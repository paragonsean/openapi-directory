/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ExportDataset service.
* @module api/ExportDatasetApi
* @version 2.1.0
*/
export default class ExportDatasetApi {

    /**
    * Constructs a new ExportDatasetApi. 
    * @alias module:api/ExportDatasetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the exportRecordsCSV operation.
     * @callback module:api/ExportDatasetApi~exportRecordsCSVCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in CSV format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:model/String} [delimiter = ';')] Provide a different delimiter (default ',').
     * @param {module:api/ExportDatasetApi~exportRecordsCSVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsCSV(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsCSV");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsCSV");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'delimiter': opts['delimiter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsGEOJSON operation.
     * @callback module:api/ExportDatasetApi~exportRecordsGEOJSONCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in GEOJSON format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {module:api/ExportDatasetApi~exportRecordsGEOJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsGEOJSON(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsGEOJSON");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsGEOJSON");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/geojson', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsICAL operation.
     * @callback module:api/ExportDatasetApi~exportRecordsICALCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in ICAL format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/ExportDatasetApi~exportRecordsICALCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsICAL(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsICAL");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsICAL");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/ical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsJSON operation.
     * @callback module:api/ExportDatasetApi~exportRecordsJSONCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in JSON format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/ExportDatasetApi~exportRecordsJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsJSON(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsJSON");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsJSON");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'pretty': opts['pretty'],
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsOV2 operation.
     * @callback module:api/ExportDatasetApi~exportRecordsOV2Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in OV2 format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/ExportDatasetApi~exportRecordsOV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsOV2(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsOV2");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsOV2");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/ov2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsSHP operation.
     * @callback module:api/ExportDatasetApi~exportRecordsSHPCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in Esri shapefile (shp) format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/ExportDatasetApi~exportRecordsSHPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsSHP(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsSHP");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsSHP");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/zip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/shp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsXLS operation.
     * @callback module:api/ExportDatasetApi~exportRecordsXLSCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in XLS (Excel) format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/ExportDatasetApi~exportRecordsXLSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsXLS(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsXLS");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsXLS");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['xls'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/xls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
