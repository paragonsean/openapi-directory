/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetMetadataTemplatesType200Response from '../model/GetMetadataTemplatesType200Response';
import GetMetadataTemplatesType200ResponseMetadataTemplatesInner from '../model/GetMetadataTemplatesType200ResponseMetadataTemplatesInner';
import GetRoot200Response from '../model/GetRoot200Response';

/**
* Metadata service.
* @module api/MetadataApi
* @version 2.1.0
*/
export default class MetadataApi {

    /**
    * Constructs a new MetadataApi. 
    * @alias module:api/MetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMetadataTemplate operation.
     * @callback module:api/MetadataApi~getMetadataTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetadataTemplatesType200ResponseMetadataTemplatesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A single metadata_template 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {module:model/String} metadataTemplateType 
     * @param {String} metadataTemplateName 
     * @param {module:api/MetadataApi~getMetadataTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetadataTemplatesType200ResponseMetadataTemplatesInner}
     */
    getMetadataTemplate(source, metadataTemplateType, metadataTemplateName, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getMetadataTemplate");
      }
      // verify the required parameter 'metadataTemplateType' is set
      if (metadataTemplateType === undefined || metadataTemplateType === null) {
        throw new Error("Missing the required parameter 'metadataTemplateType' when calling getMetadataTemplate");
      }
      // verify the required parameter 'metadataTemplateName' is set
      if (metadataTemplateName === undefined || metadataTemplateName === null) {
        throw new Error("Missing the required parameter 'metadataTemplateName' when calling getMetadataTemplate");
      }

      let pathParams = {
        'source': source,
        'metadata_template_type': metadataTemplateType,
        'metadata_template_name': metadataTemplateName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMetadataTemplatesType200ResponseMetadataTemplatesInner;
      return this.apiClient.callApi(
        '/{source}/metadata_templates/{metadata_template_type}/{metadata_template_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadataTemplatesType operation.
     * @callback module:api/MetadataApi~getMetadataTemplatesTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetadataTemplatesType200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of metadata templates available for this type. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {module:model/String} metadataTemplateType 
     * @param {module:api/MetadataApi~getMetadataTemplatesTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetadataTemplatesType200Response}
     */
    getMetadataTemplatesType(source, metadataTemplateType, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getMetadataTemplatesType");
      }
      // verify the required parameter 'metadataTemplateType' is set
      if (metadataTemplateType === undefined || metadataTemplateType === null) {
        throw new Error("Missing the required parameter 'metadataTemplateType' when calling getMetadataTemplatesType");
      }

      let pathParams = {
        'source': source,
        'metadata_template_type': metadataTemplateType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMetadataTemplatesType200Response;
      return this.apiClient.callApi(
        '/{source}/metadata_templates/{metadata_template_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadataTemplatesTypes operation.
     * @callback module:api/MetadataApi~getMetadataTemplatesTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available metadata templates types, each with their endpoints. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {module:api/MetadataApi~getMetadataTemplatesTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoot200Response}
     */
    getMetadataTemplatesTypes(source, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getMetadataTemplatesTypes");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRoot200Response;
      return this.apiClient.callApi(
        '/{source}/metadata_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
