/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetRecordsFacets200Response from '../model/GetRecordsFacets200Response';

/**
* Facet service.
* @module api/FacetApi
* @version 2.1.0
*/
export default class FacetApi {

    /**
    * Constructs a new FacetApi. 
    * @alias module:api/FacetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDatasetsFacets_0 operation.
     * @callback module:api/FacetApi~getDatasetsFacets_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecordsFacets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enumerate facets values for datasets and return a list of values for each facet. Can be used to implement guided navigation in large result sets.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#enumerating-facets-values) for more details. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/FacetApi~getDatasetsFacets_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecordsFacets200Response}
     */
    getDatasetsFacets_0(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDatasetsFacets_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecordsFacets200Response;
      return this.apiClient.callApi(
        '/{source}/facets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordsFacets_0 operation.
     * @callback module:api/FacetApi~getRecordsFacets_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecordsFacets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enumerate facets values for records and return a list of values for each facet. Can be used to implement guided navigation in large result sets.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#enumerating-facets-values) for more details. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/FacetApi~getRecordsFacets_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecordsFacets200Response}
     */
    getRecordsFacets_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getRecordsFacets_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getRecordsFacets_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecordsFacets200Response;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/facets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
