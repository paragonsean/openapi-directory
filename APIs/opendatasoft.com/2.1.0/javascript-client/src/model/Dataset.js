/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatasetFieldsInner from './DatasetFieldsInner';

/**
 * The Dataset model module.
 * @module model/Dataset
 * @version 2.1.0
 */
class Dataset {
    /**
     * Constructs a new <code>Dataset</code>.
     * @alias module:model/Dataset
     */
    constructor() { 
        
        Dataset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dataset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dataset} obj Optional instance to populate.
     * @return {module:model/Dataset} The populated <code>Dataset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dataset();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Object]);
            }
            if (data.hasOwnProperty('data_visible')) {
                obj['data_visible'] = ApiClient.convertToType(data['data_visible'], 'Boolean');
            }
            if (data.hasOwnProperty('dataset_id')) {
                obj['dataset_id'] = ApiClient.convertToType(data['dataset_id'], 'String');
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], ['String']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [DatasetFieldsInner]);
            }
            if (data.hasOwnProperty('has_records')) {
                obj['has_records'] = ApiClient.convertToType(data['has_records'], 'Boolean');
            }
            if (data.hasOwnProperty('metas')) {
                obj['metas'] = ApiClient.convertToType(data['metas'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dataset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dataset</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['attachments'])) {
            throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
        }
        // ensure the json data is a string
        if (data['dataset_id'] && !(typeof data['dataset_id'] === 'string' || data['dataset_id'] instanceof String)) {
            throw new Error("Expected the field `dataset_id` to be a primitive type in the JSON string but got " + data['dataset_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['features'])) {
            throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                DatasetFieldsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<Object>} attachments
 */
Dataset.prototype['attachments'] = undefined;

/**
 * @member {Boolean} data_visible
 */
Dataset.prototype['data_visible'] = undefined;

/**
 * @member {String} dataset_id
 */
Dataset.prototype['dataset_id'] = undefined;

/**
 * A map of available features for a dataset, with the fields they apply to. 
 * @member {Array.<String>} features
 */
Dataset.prototype['features'] = undefined;

/**
 * @member {Array.<module:model/DatasetFieldsInner>} fields
 */
Dataset.prototype['fields'] = undefined;

/**
 * @member {Boolean} has_records
 */
Dataset.prototype['has_records'] = undefined;

/**
 * @member {Object} metas
 */
Dataset.prototype['metas'] = undefined;






export default Dataset;

