/*
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AggregateDatasets200Response;
import org.openapitools.client.model.GetDatasets200Response;
import org.openapitools.client.model.GetRecordsFacets200Response;
import org.openapitools.client.model.GetRoot200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogApi
 */
@Disabled
public class CatalogApiTest {

    private final CatalogApi api = new CatalogApi();

    /**
     * **Deprecated, use &#x60;/datasets&#x60; instead.** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aggregateDatasetsTest() throws ApiException {
        String source = null;
        String select = null;
        List<String> where = null;
        String groupBy = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        AggregateDatasets200Response response = api.aggregateDatasets(source, select, where, groupBy, orderBy, limit, offset, facet, refine, exclude);
        // TODO: test validations
    }

    /**
     * List of available datasets, each with their endpoints, paginated.  Links provided: * previous page * next page * last page * first page 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetsTest() throws ApiException {
        String source = null;
        String select = null;
        List<String> where = null;
        String groupBy = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        Boolean pretty = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        GetDatasets200Response response = api.getDatasets(source, select, where, groupBy, sort, orderBy, limit, offset, search, facet, refine, exclude, pretty, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * Enumerate facets values for datasets and return a list of values for each facet. Can be used to implement guided navigation in large result sets.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#enumerating-facets-values) for more details. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetsFacetsTest() throws ApiException {
        String source = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        List<String> where = null;
        List<String> search = null;
        String timezone = null;
        GetRecordsFacets200Response response = api.getDatasetsFacets(source, facet, refine, exclude, where, search, timezone);
        // TODO: test validations
    }

    /**
     * Source entry points  Provides links for the source&#39;s datasets and metadata. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSourceTest() throws ApiException {
        String source = null;
        GetRoot200Response response = api.getSource(source);
        // TODO: test validations
    }

}
