/*
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AggregateDatasets200Response;
import org.openapitools.client.model.GetDatasetAttachements200Response;
import org.openapitools.client.model.GetDatasetReuse200Response;
import org.openapitools.client.model.GetDatasetReuses200Response;
import org.openapitools.client.model.GetDatasetSnapshots200Response;
import org.openapitools.client.model.GetDatasets200ResponseDatasetsInner;
import org.openapitools.client.model.GetRecords200Response;
import org.openapitools.client.model.GetRecords200ResponseRecordsInner;
import org.openapitools.client.model.GetRecordsFacets200Response;
import org.openapitools.client.model.SendDatasetFeedbackRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatasetApi
 */
@Disabled
public class DatasetApiTest {

    private final DatasetApi api = new DatasetApi();

    /**
     * **Deprecated, use &#x60;/records&#x60; instead.** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aggregateRecordsTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        String groupBy = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        AggregateDatasets200Response response = api.aggregateRecords(source, datasetId, select, where, groupBy, orderBy, limit, offset, facet, refine, exclude);
        // TODO: test validations
    }

    /**
     * Download attachment 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDatasetAttachementTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String attachmentId = null;
        api.downloadDatasetAttachement(source, datasetId, attachmentId);
        // TODO: test validations
    }

    /**
     * List of all snapshots for this dataset. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDatasetSnapshotTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String snapshotId = null;
        String timezone = null;
        api.downloadDatasetSnapshot(source, datasetId, snapshotId, timezone);
        // TODO: test validations
    }

    /**
     * List of available endpoints for the specified dataset, with metadata and endpoints.  Will provide links for: * the attachments endpoint * the files endpoint * the records endpoint * the catalog endpoint 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        Boolean pretty = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        GetDatasets200ResponseDatasetsInner response = api.getDataset(source, datasetId, select, pretty, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * Get list of all available attachments 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetAttachementsTest() throws ApiException {
        String source = null;
        String datasetId = null;
        GetDatasetAttachements200Response response = api.getDatasetAttachements(source, datasetId);
        // TODO: test validations
    }

    /**
     * Download file 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetFileTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String fileId = null;
        String thumbnailSize = null;
        api.getDatasetFile(source, datasetId, fileId, thumbnailSize);
        // TODO: test validations
    }

    /**
     * Retrieve a single reuse based on its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetReuseTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String reuseId = null;
        String timezone = null;
        GetDatasetReuse200Response response = api.getDatasetReuse(source, datasetId, reuseId, timezone);
        // TODO: test validations
    }

    /**
     * Get list of reuses 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetReusesTest() throws ApiException {
        String source = null;
        String datasetId = null;
        Integer limit = null;
        Integer offset = null;
        String timezone = null;
        GetDatasetReuses200Response response = api.getDatasetReuses(source, datasetId, limit, offset, timezone);
        // TODO: test validations
    }

    /**
     * List of all snapshots for this dataset. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetSnapshotsTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String timezone = null;
        GetDatasetSnapshots200Response response = api.getDatasetSnapshots(source, datasetId, timezone);
        // TODO: test validations
    }

    /**
     * Retrieve a single record based on its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String recordId = null;
        String select = null;
        Boolean pretty = null;
        String timezone = null;
        GetRecords200ResponseRecordsInner response = api.getRecord(source, datasetId, recordId, select, pretty, timezone);
        // TODO: test validations
    }

    /**
     * Search dataset&#39;s records. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordsTest() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        String groupBy = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        Boolean pretty = null;
        String timezone = null;
        GetRecords200Response response = api.getRecords(source, datasetId, select, where, groupBy, sort, orderBy, limit, offset, search, facet, refine, exclude, pretty, timezone);
        // TODO: test validations
    }

    /**
     * Enumerate facets values for records and return a list of values for each facet. Can be used to implement guided navigation in large result sets.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#enumerating-facets-values) for more details. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordsFacetsTest() throws ApiException {
        String source = null;
        String datasetId = null;
        List<String> where = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        List<String> search = null;
        String timezone = null;
        GetRecordsFacets200Response response = api.getRecordsFacets(source, datasetId, where, facet, refine, exclude, search, timezone);
        // TODO: test validations
    }

    /**
     * Create new feedback entry. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendDatasetFeedbackTest() throws ApiException {
        String source = null;
        String datasetId = null;
        SendDatasetFeedbackRequest feedback = null;
        api.sendDatasetFeedback(source, datasetId, feedback);
        // TODO: test validations
    }

}
