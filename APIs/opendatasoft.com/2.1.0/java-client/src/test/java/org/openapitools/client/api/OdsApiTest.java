/*
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AggregateDatasets200Response;
import java.io.File;
import org.openapitools.client.model.GetDatasetAttachements200Response;
import org.openapitools.client.model.GetDatasetReuse200Response;
import org.openapitools.client.model.GetDatasetReuses200Response;
import org.openapitools.client.model.GetDatasetSnapshots200Response;
import org.openapitools.client.model.GetDatasets200Response;
import org.openapitools.client.model.GetDatasets200ResponseDatasetsInner;
import org.openapitools.client.model.GetMetadataTemplatesType200Response;
import org.openapitools.client.model.GetMetadataTemplatesType200ResponseMetadataTemplatesInner;
import org.openapitools.client.model.GetPages200Response;
import org.openapitools.client.model.GetPages200ResponsePagesInner;
import org.openapitools.client.model.GetRecords200Response;
import org.openapitools.client.model.GetRecords200ResponseRecordsInner;
import org.openapitools.client.model.GetRecordsFacets200Response;
import org.openapitools.client.model.GetRoot200Response;
import org.openapitools.client.model.SendDatasetFeedbackRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OdsApi
 */
@Disabled
public class OdsApiTest {

    private final OdsApi api = new OdsApi();

    /**
     * **Deprecated, use &#x60;/datasets&#x60; instead.** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aggregateDatasets_1Test() throws ApiException {
        String source = null;
        String select = null;
        List<String> where = null;
        String groupBy = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        AggregateDatasets200Response response = api.aggregateDatasets_1(source, select, where, groupBy, orderBy, limit, offset, facet, refine, exclude);
        // TODO: test validations
    }

    /**
     * **Deprecated, use &#x60;/records&#x60; instead.** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aggregateRecords_1Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        String groupBy = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        AggregateDatasets200Response response = api.aggregateRecords_1(source, datasetId, select, where, groupBy, orderBy, limit, offset, facet, refine, exclude);
        // TODO: test validations
    }

    /**
     * Download attachment 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDatasetAttachement_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String attachmentId = null;
        api.downloadDatasetAttachement_0(source, datasetId, attachmentId);
        // TODO: test validations
    }

    /**
     * List of all snapshots for this dataset. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDatasetSnapshot_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String snapshotId = null;
        String timezone = null;
        api.downloadDatasetSnapshot_0(source, datasetId, snapshotId, timezone);
        // TODO: test validations
    }

    /**
     * Export catalog (source) in CSV format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDatasetsCSV_0Test() throws ApiException {
        String source = null;
        List<String> where = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        String delimiter = null;
        File response = api.exportDatasetsCSV_0(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, delimiter);
        // TODO: test validations
    }

    /**
     * Export catalog (source) in JSON format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDatasetsJson_0Test() throws ApiException {
        String source = null;
        List<String> where = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        Boolean pretty = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        File response = api.exportDatasetsJson_0(source, where, limit, offset, search, facet, refine, exclude, pretty, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * Export catalog (source) in RDF/XML format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDatasetsRDF_0Test() throws ApiException {
        String source = null;
        List<String> where = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        File response = api.exportDatasetsRDF_0(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * Export catalog (source) in RSS format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDatasetsRSS_0Test() throws ApiException {
        String source = null;
        List<String> where = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        File response = api.exportDatasetsRSS_0(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * Export catalog (source) in TTL (turtle/rdf) format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDatasetsTTL_0Test() throws ApiException {
        String source = null;
        List<String> where = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        File response = api.exportDatasetsTTL_0(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * Export catalog (source) in XLS (Excel) format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDatasetsXLS_0Test() throws ApiException {
        String source = null;
        List<String> where = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        File response = api.exportDatasetsXLS_0(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * Export dataset in CSV format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportRecordsCSV_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        String delimiter = null;
        File response = api.exportRecordsCSV_0(source, datasetId, select, where, sort, orderBy, limit, offset, facet, refine, exclude, timezone, delimiter);
        // TODO: test validations
    }

    /**
     * Export dataset in GEOJSON format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportRecordsGEOJSON_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        Boolean pretty = null;
        File response = api.exportRecordsGEOJSON_0(source, datasetId, select, where, sort, orderBy, limit, offset, search, facet, refine, exclude, timezone, pretty);
        // TODO: test validations
    }

    /**
     * Export dataset in ICAL format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportRecordsICAL_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        File response = api.exportRecordsICAL_0(source, datasetId, select, where, sort, orderBy, limit, offset, search, facet, refine, exclude, timezone);
        // TODO: test validations
    }

    /**
     * Export dataset in JSON format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportRecordsJSON_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        Boolean pretty = null;
        String timezone = null;
        File response = api.exportRecordsJSON_0(source, datasetId, select, where, sort, orderBy, limit, offset, search, facet, refine, exclude, pretty, timezone);
        // TODO: test validations
    }

    /**
     * Export dataset in OV2 format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportRecordsOV2_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        File response = api.exportRecordsOV2_0(source, datasetId, select, where, sort, orderBy, limit, offset, search, facet, refine, exclude, timezone);
        // TODO: test validations
    }

    /**
     * Export dataset in Esri shapefile (shp) format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportRecordsSHP_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        File response = api.exportRecordsSHP_0(source, datasetId, select, where, sort, orderBy, limit, offset, search, facet, refine, exclude, timezone);
        // TODO: test validations
    }

    /**
     * Export dataset in XLS (Excel) format 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportRecordsXLS_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        String timezone = null;
        File response = api.exportRecordsXLS_0(source, datasetId, select, where, sort, orderBy, limit, offset, search, facet, refine, exclude, timezone);
        // TODO: test validations
    }

    /**
     * Get list of all available attachments 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetAttachements_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        GetDatasetAttachements200Response response = api.getDatasetAttachements_0(source, datasetId);
        // TODO: test validations
    }

    /**
     * Download file 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetFile_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String fileId = null;
        String thumbnailSize = null;
        api.getDatasetFile_0(source, datasetId, fileId, thumbnailSize);
        // TODO: test validations
    }

    /**
     * Retrieve a single reuse based on its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetReuse_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String reuseId = null;
        String timezone = null;
        GetDatasetReuse200Response response = api.getDatasetReuse_0(source, datasetId, reuseId, timezone);
        // TODO: test validations
    }

    /**
     * Get list of reuses 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetReuses_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        Integer limit = null;
        Integer offset = null;
        String timezone = null;
        GetDatasetReuses200Response response = api.getDatasetReuses_0(source, datasetId, limit, offset, timezone);
        // TODO: test validations
    }

    /**
     * List of all snapshots for this dataset. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetSnapshots_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String timezone = null;
        GetDatasetSnapshots200Response response = api.getDatasetSnapshots_0(source, datasetId, timezone);
        // TODO: test validations
    }

    /**
     * List of available endpoints for the specified dataset, with metadata and endpoints.  Will provide links for: * the attachments endpoint * the files endpoint * the records endpoint * the catalog endpoint 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataset_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        Boolean pretty = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        GetDatasets200ResponseDatasetsInner response = api.getDataset_0(source, datasetId, select, pretty, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * Enumerate facets values for datasets and return a list of values for each facet. Can be used to implement guided navigation in large result sets.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#enumerating-facets-values) for more details. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetsFacets_1Test() throws ApiException {
        String source = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        List<String> where = null;
        List<String> search = null;
        String timezone = null;
        GetRecordsFacets200Response response = api.getDatasetsFacets_1(source, facet, refine, exclude, where, search, timezone);
        // TODO: test validations
    }

    /**
     * List of available datasets, each with their endpoints, paginated.  Links provided: * previous page * next page * last page * first page 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasets_0Test() throws ApiException {
        String source = null;
        String select = null;
        List<String> where = null;
        String groupBy = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        Boolean pretty = null;
        String timezone = null;
        Boolean includeAppMetas = null;
        GetDatasets200Response response = api.getDatasets_0(source, select, where, groupBy, sort, orderBy, limit, offset, search, facet, refine, exclude, pretty, timezone, includeAppMetas);
        // TODO: test validations
    }

    /**
     * A single metadata_template 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetadataTemplate_0Test() throws ApiException {
        String source = null;
        String metadataTemplateType = null;
        String metadataTemplateName = null;
        GetMetadataTemplatesType200ResponseMetadataTemplatesInner response = api.getMetadataTemplate_0(source, metadataTemplateType, metadataTemplateName);
        // TODO: test validations
    }

    /**
     * List of metadata templates available for this type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetadataTemplatesType_0Test() throws ApiException {
        String source = null;
        String metadataTemplateType = null;
        GetMetadataTemplatesType200Response response = api.getMetadataTemplatesType_0(source, metadataTemplateType);
        // TODO: test validations
    }

    /**
     * List of available metadata templates types, each with their endpoints. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetadataTemplatesTypes_0Test() throws ApiException {
        String source = null;
        GetRoot200Response response = api.getMetadataTemplatesTypes_0(source);
        // TODO: test validations
    }

    /**
     * A single page&#39;s metadata from this portal 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPage_0Test() throws ApiException {
        String slug = null;
        GetPages200ResponsePagesInner response = api.getPage_0(slug);
        // TODO: test validations
    }

    /**
     * List of all pages from this portal. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPages_0Test() throws ApiException {
        GetPages200Response response = api.getPages_0();
        // TODO: test validations
    }

    /**
     * Retrieve a single record based on its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecord_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String recordId = null;
        String select = null;
        Boolean pretty = null;
        String timezone = null;
        GetRecords200ResponseRecordsInner response = api.getRecord_0(source, datasetId, recordId, select, pretty, timezone);
        // TODO: test validations
    }

    /**
     * Enumerate facets values for records and return a list of values for each facet. Can be used to implement guided navigation in large result sets.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#enumerating-facets-values) for more details. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordsFacets_1Test() throws ApiException {
        String source = null;
        String datasetId = null;
        List<String> where = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        List<String> search = null;
        String timezone = null;
        GetRecordsFacets200Response response = api.getRecordsFacets_1(source, datasetId, where, facet, refine, exclude, search, timezone);
        // TODO: test validations
    }

    /**
     * Search dataset&#39;s records. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecords_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        String select = null;
        List<String> where = null;
        String groupBy = null;
        List<String> sort = null;
        List<String> orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<String> search = null;
        List<String> facet = null;
        List<String> refine = null;
        List<String> exclude = null;
        Boolean pretty = null;
        String timezone = null;
        GetRecords200Response response = api.getRecords_0(source, datasetId, select, where, groupBy, sort, orderBy, limit, offset, search, facet, refine, exclude, pretty, timezone);
        // TODO: test validations
    }

    /**
     * API entry point  Provides links for: * catalog, your domain&#39;s list of datasets * opendatasoft, all datasets on the Opendatasoft network 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoot_0Test() throws ApiException {
        GetRoot200Response response = api.getRoot_0();
        // TODO: test validations
    }

    /**
     * Source entry points  Provides links for the source&#39;s datasets and metadata. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSource_0Test() throws ApiException {
        String source = null;
        GetRoot200Response response = api.getSource_0(source);
        // TODO: test validations
    }

    /**
     * Create new feedback entry. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendDatasetFeedback_0Test() throws ApiException {
        String source = null;
        String datasetId = null;
        SendDatasetFeedbackRequest feedback = null;
        api.sendDatasetFeedback_0(source, datasetId, feedback);
        // TODO: test validations
    }

}
