/*
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetMetadataTemplatesType200Response;
import org.openapitools.client.model.GetMetadataTemplatesType200ResponseMetadataTemplatesInner;
import org.openapitools.client.model.GetRoot200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getMetadataTemplate
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param metadataTemplateType  (required)
     * @param metadataTemplateName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A metadata template selected by ID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataTemplateCall(String source, String metadataTemplateType, String metadataTemplateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/metadata_templates/{metadata_template_type}/{metadata_template_name}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "metadata_template_type" + "}", localVarApiClient.escapeString(metadataTemplateType.toString()))
            .replace("{" + "metadata_template_name" + "}", localVarApiClient.escapeString(metadataTemplateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataTemplateValidateBeforeCall(String source, String metadataTemplateType, String metadataTemplateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling getMetadataTemplate(Async)");
        }

        // verify the required parameter 'metadataTemplateType' is set
        if (metadataTemplateType == null) {
            throw new ApiException("Missing the required parameter 'metadataTemplateType' when calling getMetadataTemplate(Async)");
        }

        // verify the required parameter 'metadataTemplateName' is set
        if (metadataTemplateName == null) {
            throw new ApiException("Missing the required parameter 'metadataTemplateName' when calling getMetadataTemplate(Async)");
        }

        return getMetadataTemplateCall(source, metadataTemplateType, metadataTemplateName, _callback);

    }

    /**
     * 
     * A single metadata_template 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param metadataTemplateType  (required)
     * @param metadataTemplateName  (required)
     * @return GetMetadataTemplatesType200ResponseMetadataTemplatesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A metadata template selected by ID. </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataTemplatesType200ResponseMetadataTemplatesInner getMetadataTemplate(String source, String metadataTemplateType, String metadataTemplateName) throws ApiException {
        ApiResponse<GetMetadataTemplatesType200ResponseMetadataTemplatesInner> localVarResp = getMetadataTemplateWithHttpInfo(source, metadataTemplateType, metadataTemplateName);
        return localVarResp.getData();
    }

    /**
     * 
     * A single metadata_template 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param metadataTemplateType  (required)
     * @param metadataTemplateName  (required)
     * @return ApiResponse&lt;GetMetadataTemplatesType200ResponseMetadataTemplatesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A metadata template selected by ID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetadataTemplatesType200ResponseMetadataTemplatesInner> getMetadataTemplateWithHttpInfo(String source, String metadataTemplateType, String metadataTemplateName) throws ApiException {
        okhttp3.Call localVarCall = getMetadataTemplateValidateBeforeCall(source, metadataTemplateType, metadataTemplateName, null);
        Type localVarReturnType = new TypeToken<GetMetadataTemplatesType200ResponseMetadataTemplatesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A single metadata_template 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param metadataTemplateType  (required)
     * @param metadataTemplateName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A metadata template selected by ID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataTemplateAsync(String source, String metadataTemplateType, String metadataTemplateName, final ApiCallback<GetMetadataTemplatesType200ResponseMetadataTemplatesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataTemplateValidateBeforeCall(source, metadataTemplateType, metadataTemplateName, _callback);
        Type localVarReturnType = new TypeToken<GetMetadataTemplatesType200ResponseMetadataTemplatesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetadataTemplatesType
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param metadataTemplateType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of metadata templates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataTemplatesTypeCall(String source, String metadataTemplateType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/metadata_templates/{metadata_template_type}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "metadata_template_type" + "}", localVarApiClient.escapeString(metadataTemplateType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataTemplatesTypeValidateBeforeCall(String source, String metadataTemplateType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling getMetadataTemplatesType(Async)");
        }

        // verify the required parameter 'metadataTemplateType' is set
        if (metadataTemplateType == null) {
            throw new ApiException("Missing the required parameter 'metadataTemplateType' when calling getMetadataTemplatesType(Async)");
        }

        return getMetadataTemplatesTypeCall(source, metadataTemplateType, _callback);

    }

    /**
     * 
     * List of metadata templates available for this type. 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param metadataTemplateType  (required)
     * @return GetMetadataTemplatesType200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of metadata templates </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataTemplatesType200Response getMetadataTemplatesType(String source, String metadataTemplateType) throws ApiException {
        ApiResponse<GetMetadataTemplatesType200Response> localVarResp = getMetadataTemplatesTypeWithHttpInfo(source, metadataTemplateType);
        return localVarResp.getData();
    }

    /**
     * 
     * List of metadata templates available for this type. 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param metadataTemplateType  (required)
     * @return ApiResponse&lt;GetMetadataTemplatesType200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of metadata templates </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetadataTemplatesType200Response> getMetadataTemplatesTypeWithHttpInfo(String source, String metadataTemplateType) throws ApiException {
        okhttp3.Call localVarCall = getMetadataTemplatesTypeValidateBeforeCall(source, metadataTemplateType, null);
        Type localVarReturnType = new TypeToken<GetMetadataTemplatesType200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of metadata templates available for this type. 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param metadataTemplateType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of metadata templates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataTemplatesTypeAsync(String source, String metadataTemplateType, final ApiCallback<GetMetadataTemplatesType200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataTemplatesTypeValidateBeforeCall(source, metadataTemplateType, _callback);
        Type localVarReturnType = new TypeToken<GetMetadataTemplatesType200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetadataTemplatesTypes
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available metadata templates types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataTemplatesTypesCall(String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/metadata_templates"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataTemplatesTypesValidateBeforeCall(String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling getMetadataTemplatesTypes(Async)");
        }

        return getMetadataTemplatesTypesCall(source, _callback);

    }

    /**
     * 
     * List of available metadata templates types, each with their endpoints. 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @return GetRoot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available metadata templates types </td><td>  -  </td></tr>
     </table>
     */
    public GetRoot200Response getMetadataTemplatesTypes(String source) throws ApiException {
        ApiResponse<GetRoot200Response> localVarResp = getMetadataTemplatesTypesWithHttpInfo(source);
        return localVarResp.getData();
    }

    /**
     * 
     * List of available metadata templates types, each with their endpoints. 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @return ApiResponse&lt;GetRoot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available metadata templates types </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRoot200Response> getMetadataTemplatesTypesWithHttpInfo(String source) throws ApiException {
        okhttp3.Call localVarCall = getMetadataTemplatesTypesValidateBeforeCall(source, null);
        Type localVarReturnType = new TypeToken<GetRoot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of available metadata templates types, each with their endpoints. 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of available metadata templates types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetadataTemplatesTypesAsync(String source, final ApiCallback<GetRoot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataTemplatesTypesValidateBeforeCall(source, _callback);
        Type localVarReturnType = new TypeToken<GetRoot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
