/*
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExportCatalogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExportCatalogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportCatalogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for exportDatasetsCSV
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param delimiter Provide a different delimiter (default &#39;,&#39;). (optional, default to ;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a CSV file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsCSVCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, String delimiter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/exports/csv"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "where", where));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "search", search));
        }

        if (facet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet", facet));
        }

        if (refine != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "refine", refine));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (includeAppMetas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_app_metas", includeAppMetas));
        }

        if (delimiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delimiter", delimiter));
        }

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDatasetsCSVValidateBeforeCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, String delimiter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling exportDatasetsCSV(Async)");
        }

        return exportDatasetsCSVCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, delimiter, _callback);

    }

    /**
     * 
     * Export catalog (source) in CSV format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param delimiter Provide a different delimiter (default &#39;,&#39;). (optional, default to ;)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a CSV file </td><td>  -  </td></tr>
     </table>
     */
    public File exportDatasetsCSV(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, String delimiter) throws ApiException {
        ApiResponse<File> localVarResp = exportDatasetsCSVWithHttpInfo(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, delimiter);
        return localVarResp.getData();
    }

    /**
     * 
     * Export catalog (source) in CSV format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param delimiter Provide a different delimiter (default &#39;,&#39;). (optional, default to ;)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a CSV file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportDatasetsCSVWithHttpInfo(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, String delimiter) throws ApiException {
        okhttp3.Call localVarCall = exportDatasetsCSVValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, delimiter, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Export catalog (source) in CSV format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param delimiter Provide a different delimiter (default &#39;,&#39;). (optional, default to ;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a CSV file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsCSVAsync(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, String delimiter, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDatasetsCSVValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, delimiter, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportDatasetsJson
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param pretty Activate pretty print (optional, default to false)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a JSON file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsJsonCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, Boolean pretty, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/exports/json"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "where", where));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "search", search));
        }

        if (facet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet", facet));
        }

        if (refine != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "refine", refine));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (includeAppMetas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_app_metas", includeAppMetas));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDatasetsJsonValidateBeforeCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, Boolean pretty, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling exportDatasetsJson(Async)");
        }

        return exportDatasetsJsonCall(source, where, limit, offset, search, facet, refine, exclude, pretty, timezone, includeAppMetas, _callback);

    }

    /**
     * 
     * Export catalog (source) in JSON format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param pretty Activate pretty print (optional, default to false)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a JSON file </td><td>  -  </td></tr>
     </table>
     */
    public File exportDatasetsJson(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, Boolean pretty, String timezone, Boolean includeAppMetas) throws ApiException {
        ApiResponse<File> localVarResp = exportDatasetsJsonWithHttpInfo(source, where, limit, offset, search, facet, refine, exclude, pretty, timezone, includeAppMetas);
        return localVarResp.getData();
    }

    /**
     * 
     * Export catalog (source) in JSON format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param pretty Activate pretty print (optional, default to false)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a JSON file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportDatasetsJsonWithHttpInfo(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, Boolean pretty, String timezone, Boolean includeAppMetas) throws ApiException {
        okhttp3.Call localVarCall = exportDatasetsJsonValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, pretty, timezone, includeAppMetas, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Export catalog (source) in JSON format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param pretty Activate pretty print (optional, default to false)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a JSON file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsJsonAsync(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, Boolean pretty, String timezone, Boolean includeAppMetas, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDatasetsJsonValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, pretty, timezone, includeAppMetas, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportDatasetsRDF
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a RDF XML file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsRDFCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/exports/rdf"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "where", where));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "search", search));
        }

        if (facet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet", facet));
        }

        if (refine != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "refine", refine));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (includeAppMetas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_app_metas", includeAppMetas));
        }

        final String[] localVarAccepts = {
            "application/rdf+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDatasetsRDFValidateBeforeCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling exportDatasetsRDF(Async)");
        }

        return exportDatasetsRDFCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, _callback);

    }

    /**
     * 
     * Export catalog (source) in RDF/XML format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a RDF XML file </td><td>  -  </td></tr>
     </table>
     */
    public File exportDatasetsRDF(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas) throws ApiException {
        ApiResponse<File> localVarResp = exportDatasetsRDFWithHttpInfo(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas);
        return localVarResp.getData();
    }

    /**
     * 
     * Export catalog (source) in RDF/XML format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a RDF XML file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportDatasetsRDFWithHttpInfo(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas) throws ApiException {
        okhttp3.Call localVarCall = exportDatasetsRDFValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Export catalog (source) in RDF/XML format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a RDF XML file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsRDFAsync(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDatasetsRDFValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportDatasetsRSS
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a JSON file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsRSSCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/exports/rss"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "where", where));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "search", search));
        }

        if (facet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet", facet));
        }

        if (refine != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "refine", refine));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (includeAppMetas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_app_metas", includeAppMetas));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDatasetsRSSValidateBeforeCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling exportDatasetsRSS(Async)");
        }

        return exportDatasetsRSSCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, _callback);

    }

    /**
     * 
     * Export catalog (source) in RSS format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a JSON file </td><td>  -  </td></tr>
     </table>
     */
    public File exportDatasetsRSS(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas) throws ApiException {
        ApiResponse<File> localVarResp = exportDatasetsRSSWithHttpInfo(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas);
        return localVarResp.getData();
    }

    /**
     * 
     * Export catalog (source) in RSS format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a JSON file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportDatasetsRSSWithHttpInfo(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas) throws ApiException {
        okhttp3.Call localVarCall = exportDatasetsRSSValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Export catalog (source) in RSS format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a JSON file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsRSSAsync(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDatasetsRSSValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportDatasetsTTL
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a TTL file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsTTLCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/exports/ttl"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "where", where));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "search", search));
        }

        if (facet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet", facet));
        }

        if (refine != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "refine", refine));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (includeAppMetas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_app_metas", includeAppMetas));
        }

        final String[] localVarAccepts = {
            "text/turtle"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDatasetsTTLValidateBeforeCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling exportDatasetsTTL(Async)");
        }

        return exportDatasetsTTLCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, _callback);

    }

    /**
     * 
     * Export catalog (source) in TTL (turtle/rdf) format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a TTL file </td><td>  -  </td></tr>
     </table>
     */
    public File exportDatasetsTTL(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas) throws ApiException {
        ApiResponse<File> localVarResp = exportDatasetsTTLWithHttpInfo(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas);
        return localVarResp.getData();
    }

    /**
     * 
     * Export catalog (source) in TTL (turtle/rdf) format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a TTL file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportDatasetsTTLWithHttpInfo(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas) throws ApiException {
        okhttp3.Call localVarCall = exportDatasetsTTLValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Export catalog (source) in TTL (turtle/rdf) format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a TTL file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsTTLAsync(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDatasetsTTLValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportDatasetsXLS
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return an XLS file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsXLSCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{source}/exports/xls"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "where", where));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "search", search));
        }

        if (facet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "facet", facet));
        }

        if (refine != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "refine", refine));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (includeAppMetas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_app_metas", includeAppMetas));
        }

        final String[] localVarAccepts = {
            "xls"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDatasetsXLSValidateBeforeCall(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling exportDatasetsXLS(Async)");
        }

        return exportDatasetsXLSCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, _callback);

    }

    /**
     * 
     * Export catalog (source) in XLS (Excel) format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return an XLS file </td><td>  -  </td></tr>
     </table>
     */
    public File exportDatasetsXLS(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas) throws ApiException {
        ApiResponse<File> localVarResp = exportDatasetsXLSWithHttpInfo(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas);
        return localVarResp.getData();
    }

    /**
     * 
     * Export catalog (source) in XLS (Excel) format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return an XLS file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportDatasetsXLSWithHttpInfo(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas) throws ApiException {
        okhttp3.Call localVarCall = exportDatasetsXLSValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Export catalog (source) in XLS (Excel) format 
     * @param source Each source represents a different catalog of datasets you&#39;ll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft&#39;s repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/)  (required)
     * @param where An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details.  (optional)
     * @param limit Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10.  (optional, default to 10)
     * @param offset Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination.  (optional, default to 0)
     * @param search An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset.  (optional)
     * @param facet A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint &#x60;/facets&#x60;).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details.  (optional)
     * @param refine An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources*  (optional)
     * @param exclude An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources*  (optional)
     * @param timezone Set timezone for datetime fields (optional, default to UTC)
     * @param includeAppMetas Explicitely request application metas for each datasets.  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return an XLS file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDatasetsXLSAsync(String source, List<String> where, Integer limit, Integer offset, List<String> search, List<String> facet, List<String> refine, List<String> exclude, String timezone, Boolean includeAppMetas, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDatasetsXLSValidateBeforeCall(source, where, limit, offset, search, facet, refine, exclude, timezone, includeAppMetas, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
