/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DashboardColor;
import org.openapitools.client.model.DashboardQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistogramViewProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistogramViewProperties {
  public static final String SERIALIZED_NAME_BIN_COUNT = "binCount";
  @SerializedName(SERIALIZED_NAME_BIN_COUNT)
  private Integer binCount;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<DashboardColor> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILL_COLUMNS = "fillColumns";
  @SerializedName(SERIALIZED_NAME_FILL_COLUMNS)
  private List<String> fillColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGEND_COLORIZE_ROWS = "legendColorizeRows";
  @SerializedName(SERIALIZED_NAME_LEGEND_COLORIZE_ROWS)
  private Boolean legendColorizeRows;

  public static final String SERIALIZED_NAME_LEGEND_HIDE = "legendHide";
  @SerializedName(SERIALIZED_NAME_LEGEND_HIDE)
  private Boolean legendHide;

  public static final String SERIALIZED_NAME_LEGEND_OPACITY = "legendOpacity";
  @SerializedName(SERIALIZED_NAME_LEGEND_OPACITY)
  private Float legendOpacity;

  public static final String SERIALIZED_NAME_LEGEND_ORIENTATION_THRESHOLD = "legendOrientationThreshold";
  @SerializedName(SERIALIZED_NAME_LEGEND_ORIENTATION_THRESHOLD)
  private Integer legendOrientationThreshold;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  /**
   * Gets or Sets position
   */
  @JsonAdapter(PositionEnum.Adapter.class)
  public enum PositionEnum {
    OVERLAID("overlaid"),
    
    STACKED("stacked");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionEnum fromValue(String value) {
      for (PositionEnum b : PositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private PositionEnum position;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<DashboardQuery> queries = new ArrayList<>();

  /**
   * Gets or Sets shape
   */
  @JsonAdapter(ShapeEnum.Adapter.class)
  public enum ShapeEnum {
    CHRONOGRAF_V2("chronograf-v2");

    private String value;

    ShapeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeEnum fromValue(String value) {
      for (ShapeEnum b : ShapeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShapeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShapeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShapeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private ShapeEnum shape;

  public static final String SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY = "showNoteWhenEmpty";
  @SerializedName(SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY)
  private Boolean showNoteWhenEmpty;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HISTOGRAM("histogram");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_X_AXIS_LABEL = "xAxisLabel";
  @SerializedName(SERIALIZED_NAME_X_AXIS_LABEL)
  private String xAxisLabel;

  public static final String SERIALIZED_NAME_X_COLUMN = "xColumn";
  @SerializedName(SERIALIZED_NAME_X_COLUMN)
  private String xColumn;

  public static final String SERIALIZED_NAME_X_DOMAIN = "xDomain";
  @SerializedName(SERIALIZED_NAME_X_DOMAIN)
  private List<Float> xDomain = new ArrayList<>();

  public HistogramViewProperties() {
  }

  public HistogramViewProperties binCount(Integer binCount) {
    this.binCount = binCount;
    return this;
  }

  /**
   * Get binCount
   * @return binCount
   */
  @javax.annotation.Nonnull
  public Integer getBinCount() {
    return binCount;
  }

  public void setBinCount(Integer binCount) {
    this.binCount = binCount;
  }


  public HistogramViewProperties colors(List<DashboardColor> colors) {
    this.colors = colors;
    return this;
  }

  public HistogramViewProperties addColorsItem(DashboardColor colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * Colors define color encoding of data into a visualization
   * @return colors
   */
  @javax.annotation.Nonnull
  public List<DashboardColor> getColors() {
    return colors;
  }

  public void setColors(List<DashboardColor> colors) {
    this.colors = colors;
  }


  public HistogramViewProperties fillColumns(List<String> fillColumns) {
    this.fillColumns = fillColumns;
    return this;
  }

  public HistogramViewProperties addFillColumnsItem(String fillColumnsItem) {
    if (this.fillColumns == null) {
      this.fillColumns = new ArrayList<>();
    }
    this.fillColumns.add(fillColumnsItem);
    return this;
  }

  /**
   * Get fillColumns
   * @return fillColumns
   */
  @javax.annotation.Nonnull
  public List<String> getFillColumns() {
    return fillColumns;
  }

  public void setFillColumns(List<String> fillColumns) {
    this.fillColumns = fillColumns;
  }


  public HistogramViewProperties legendColorizeRows(Boolean legendColorizeRows) {
    this.legendColorizeRows = legendColorizeRows;
    return this;
  }

  /**
   * Get legendColorizeRows
   * @return legendColorizeRows
   */
  @javax.annotation.Nullable
  public Boolean getLegendColorizeRows() {
    return legendColorizeRows;
  }

  public void setLegendColorizeRows(Boolean legendColorizeRows) {
    this.legendColorizeRows = legendColorizeRows;
  }


  public HistogramViewProperties legendHide(Boolean legendHide) {
    this.legendHide = legendHide;
    return this;
  }

  /**
   * Get legendHide
   * @return legendHide
   */
  @javax.annotation.Nullable
  public Boolean getLegendHide() {
    return legendHide;
  }

  public void setLegendHide(Boolean legendHide) {
    this.legendHide = legendHide;
  }


  public HistogramViewProperties legendOpacity(Float legendOpacity) {
    this.legendOpacity = legendOpacity;
    return this;
  }

  /**
   * Get legendOpacity
   * @return legendOpacity
   */
  @javax.annotation.Nullable
  public Float getLegendOpacity() {
    return legendOpacity;
  }

  public void setLegendOpacity(Float legendOpacity) {
    this.legendOpacity = legendOpacity;
  }


  public HistogramViewProperties legendOrientationThreshold(Integer legendOrientationThreshold) {
    this.legendOrientationThreshold = legendOrientationThreshold;
    return this;
  }

  /**
   * Get legendOrientationThreshold
   * @return legendOrientationThreshold
   */
  @javax.annotation.Nullable
  public Integer getLegendOrientationThreshold() {
    return legendOrientationThreshold;
  }

  public void setLegendOrientationThreshold(Integer legendOrientationThreshold) {
    this.legendOrientationThreshold = legendOrientationThreshold;
  }


  public HistogramViewProperties note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nonnull
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public HistogramViewProperties position(PositionEnum position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nonnull
  public PositionEnum getPosition() {
    return position;
  }

  public void setPosition(PositionEnum position) {
    this.position = position;
  }


  public HistogramViewProperties queries(List<DashboardQuery> queries) {
    this.queries = queries;
    return this;
  }

  public HistogramViewProperties addQueriesItem(DashboardQuery queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

  /**
   * Get queries
   * @return queries
   */
  @javax.annotation.Nonnull
  public List<DashboardQuery> getQueries() {
    return queries;
  }

  public void setQueries(List<DashboardQuery> queries) {
    this.queries = queries;
  }


  public HistogramViewProperties shape(ShapeEnum shape) {
    this.shape = shape;
    return this;
  }

  /**
   * Get shape
   * @return shape
   */
  @javax.annotation.Nonnull
  public ShapeEnum getShape() {
    return shape;
  }

  public void setShape(ShapeEnum shape) {
    this.shape = shape;
  }


  public HistogramViewProperties showNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
    return this;
  }

  /**
   * If true, will display note when empty
   * @return showNoteWhenEmpty
   */
  @javax.annotation.Nonnull
  public Boolean getShowNoteWhenEmpty() {
    return showNoteWhenEmpty;
  }

  public void setShowNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
  }


  public HistogramViewProperties type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public HistogramViewProperties xAxisLabel(String xAxisLabel) {
    this.xAxisLabel = xAxisLabel;
    return this;
  }

  /**
   * Get xAxisLabel
   * @return xAxisLabel
   */
  @javax.annotation.Nonnull
  public String getxAxisLabel() {
    return xAxisLabel;
  }

  public void setxAxisLabel(String xAxisLabel) {
    this.xAxisLabel = xAxisLabel;
  }


  public HistogramViewProperties xColumn(String xColumn) {
    this.xColumn = xColumn;
    return this;
  }

  /**
   * Get xColumn
   * @return xColumn
   */
  @javax.annotation.Nonnull
  public String getxColumn() {
    return xColumn;
  }

  public void setxColumn(String xColumn) {
    this.xColumn = xColumn;
  }


  public HistogramViewProperties xDomain(List<Float> xDomain) {
    this.xDomain = xDomain;
    return this;
  }

  public HistogramViewProperties addXDomainItem(Float xDomainItem) {
    if (this.xDomain == null) {
      this.xDomain = new ArrayList<>();
    }
    this.xDomain.add(xDomainItem);
    return this;
  }

  /**
   * Get xDomain
   * @return xDomain
   */
  @javax.annotation.Nonnull
  public List<Float> getxDomain() {
    return xDomain;
  }

  public void setxDomain(List<Float> xDomain) {
    this.xDomain = xDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistogramViewProperties histogramViewProperties = (HistogramViewProperties) o;
    return Objects.equals(this.binCount, histogramViewProperties.binCount) &&
        Objects.equals(this.colors, histogramViewProperties.colors) &&
        Objects.equals(this.fillColumns, histogramViewProperties.fillColumns) &&
        Objects.equals(this.legendColorizeRows, histogramViewProperties.legendColorizeRows) &&
        Objects.equals(this.legendHide, histogramViewProperties.legendHide) &&
        Objects.equals(this.legendOpacity, histogramViewProperties.legendOpacity) &&
        Objects.equals(this.legendOrientationThreshold, histogramViewProperties.legendOrientationThreshold) &&
        Objects.equals(this.note, histogramViewProperties.note) &&
        Objects.equals(this.position, histogramViewProperties.position) &&
        Objects.equals(this.queries, histogramViewProperties.queries) &&
        Objects.equals(this.shape, histogramViewProperties.shape) &&
        Objects.equals(this.showNoteWhenEmpty, histogramViewProperties.showNoteWhenEmpty) &&
        Objects.equals(this.type, histogramViewProperties.type) &&
        Objects.equals(this.xAxisLabel, histogramViewProperties.xAxisLabel) &&
        Objects.equals(this.xColumn, histogramViewProperties.xColumn) &&
        Objects.equals(this.xDomain, histogramViewProperties.xDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binCount, colors, fillColumns, legendColorizeRows, legendHide, legendOpacity, legendOrientationThreshold, note, position, queries, shape, showNoteWhenEmpty, type, xAxisLabel, xColumn, xDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistogramViewProperties {\n");
    sb.append("    binCount: ").append(toIndentedString(binCount)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    fillColumns: ").append(toIndentedString(fillColumns)).append("\n");
    sb.append("    legendColorizeRows: ").append(toIndentedString(legendColorizeRows)).append("\n");
    sb.append("    legendHide: ").append(toIndentedString(legendHide)).append("\n");
    sb.append("    legendOpacity: ").append(toIndentedString(legendOpacity)).append("\n");
    sb.append("    legendOrientationThreshold: ").append(toIndentedString(legendOrientationThreshold)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    showNoteWhenEmpty: ").append(toIndentedString(showNoteWhenEmpty)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xAxisLabel: ").append(toIndentedString(xAxisLabel)).append("\n");
    sb.append("    xColumn: ").append(toIndentedString(xColumn)).append("\n");
    sb.append("    xDomain: ").append(toIndentedString(xDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("binCount");
    openapiFields.add("colors");
    openapiFields.add("fillColumns");
    openapiFields.add("legendColorizeRows");
    openapiFields.add("legendHide");
    openapiFields.add("legendOpacity");
    openapiFields.add("legendOrientationThreshold");
    openapiFields.add("note");
    openapiFields.add("position");
    openapiFields.add("queries");
    openapiFields.add("shape");
    openapiFields.add("showNoteWhenEmpty");
    openapiFields.add("type");
    openapiFields.add("xAxisLabel");
    openapiFields.add("xColumn");
    openapiFields.add("xDomain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("binCount");
    openapiRequiredFields.add("colors");
    openapiRequiredFields.add("fillColumns");
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("queries");
    openapiRequiredFields.add("shape");
    openapiRequiredFields.add("showNoteWhenEmpty");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("xAxisLabel");
    openapiRequiredFields.add("xColumn");
    openapiRequiredFields.add("xDomain");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistogramViewProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistogramViewProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistogramViewProperties is not found in the empty JSON string", HistogramViewProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistogramViewProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistogramViewProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HistogramViewProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }

      JsonArray jsonArraycolors = jsonObj.getAsJsonArray("colors");
      // validate the required field `colors` (array)
      for (int i = 0; i < jsonArraycolors.size(); i++) {
        DashboardColor.validateJsonElement(jsonArraycolors.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("fillColumns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("fillColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillColumns` to be an array in the JSON string but got `%s`", jsonObj.get("fillColumns").toString()));
      }
      if (!jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      // validate the required field `position`
      PositionEnum.validateJsonElement(jsonObj.get("position"));
      // ensure the json data is an array
      if (!jsonObj.get("queries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queries` to be an array in the JSON string but got `%s`", jsonObj.get("queries").toString()));
      }

      JsonArray jsonArrayqueries = jsonObj.getAsJsonArray("queries");
      // validate the required field `queries` (array)
      for (int i = 0; i < jsonArrayqueries.size(); i++) {
        DashboardQuery.validateJsonElement(jsonArrayqueries.get(i));
      };
      if (!jsonObj.get("shape").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shape` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shape").toString()));
      }
      // validate the required field `shape`
      ShapeEnum.validateJsonElement(jsonObj.get("shape"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("xAxisLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xAxisLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xAxisLabel").toString()));
      }
      if (!jsonObj.get("xColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xColumn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("xDomain") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("xDomain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `xDomain` to be an array in the JSON string but got `%s`", jsonObj.get("xDomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistogramViewProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistogramViewProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistogramViewProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistogramViewProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<HistogramViewProperties>() {
           @Override
           public void write(JsonWriter out, HistogramViewProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistogramViewProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistogramViewProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistogramViewProperties
   * @throws IOException if the JSON string is invalid with respect to HistogramViewProperties
   */
  public static HistogramViewProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistogramViewProperties.class);
  }

  /**
   * Convert an instance of HistogramViewProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

