/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrganizationLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganizationLinks {
  public static final String SERIALIZED_NAME_BUCKETS = "buckets";
  @SerializedName(SERIALIZED_NAME_BUCKETS)
  private URI buckets;

  public static final String SERIALIZED_NAME_DASHBOARDS = "dashboards";
  @SerializedName(SERIALIZED_NAME_DASHBOARDS)
  private URI dashboards;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private URI labels;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private URI members;

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private URI owners;

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private URI secrets;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private URI self;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private URI tasks;

  public OrganizationLinks() {
  }

  public OrganizationLinks(
     URI buckets, 
     URI dashboards, 
     URI labels, 
     URI members, 
     URI owners, 
     URI secrets, 
     URI self, 
     URI tasks
  ) {
    this();
    this.buckets = buckets;
    this.dashboards = dashboards;
    this.labels = labels;
    this.members = members;
    this.owners = owners;
    this.secrets = secrets;
    this.self = self;
    this.tasks = tasks;
  }

  /**
   * URI of resource.
   * @return buckets
   */
  @javax.annotation.Nullable
  public URI getBuckets() {
    return buckets;
  }



  /**
   * URI of resource.
   * @return dashboards
   */
  @javax.annotation.Nullable
  public URI getDashboards() {
    return dashboards;
  }



  /**
   * URI of resource.
   * @return labels
   */
  @javax.annotation.Nullable
  public URI getLabels() {
    return labels;
  }



  /**
   * URI of resource.
   * @return members
   */
  @javax.annotation.Nullable
  public URI getMembers() {
    return members;
  }



  /**
   * URI of resource.
   * @return owners
   */
  @javax.annotation.Nullable
  public URI getOwners() {
    return owners;
  }



  /**
   * URI of resource.
   * @return secrets
   */
  @javax.annotation.Nullable
  public URI getSecrets() {
    return secrets;
  }



  /**
   * URI of resource.
   * @return self
   */
  @javax.annotation.Nullable
  public URI getSelf() {
    return self;
  }



  /**
   * URI of resource.
   * @return tasks
   */
  @javax.annotation.Nullable
  public URI getTasks() {
    return tasks;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationLinks organizationLinks = (OrganizationLinks) o;
    return Objects.equals(this.buckets, organizationLinks.buckets) &&
        Objects.equals(this.dashboards, organizationLinks.dashboards) &&
        Objects.equals(this.labels, organizationLinks.labels) &&
        Objects.equals(this.members, organizationLinks.members) &&
        Objects.equals(this.owners, organizationLinks.owners) &&
        Objects.equals(this.secrets, organizationLinks.secrets) &&
        Objects.equals(this.self, organizationLinks.self) &&
        Objects.equals(this.tasks, organizationLinks.tasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buckets, dashboards, labels, members, owners, secrets, self, tasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationLinks {\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buckets");
    openapiFields.add("dashboards");
    openapiFields.add("labels");
    openapiFields.add("members");
    openapiFields.add("owners");
    openapiFields.add("secrets");
    openapiFields.add("self");
    openapiFields.add("tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationLinks is not found in the empty JSON string", OrganizationLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buckets") != null && !jsonObj.get("buckets").isJsonNull()) && !jsonObj.get("buckets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buckets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buckets").toString()));
      }
      if ((jsonObj.get("dashboards") != null && !jsonObj.get("dashboards").isJsonNull()) && !jsonObj.get("dashboards").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboards` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboards").toString()));
      }
      if ((jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) && !jsonObj.get("labels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) && !jsonObj.get("members").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `members` to be a primitive type in the JSON string but got `%s`", jsonObj.get("members").toString()));
      }
      if ((jsonObj.get("owners") != null && !jsonObj.get("owners").isJsonNull()) && !jsonObj.get("owners").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owners` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owners").toString()));
      }
      if ((jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonNull()) && !jsonObj.get("secrets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secrets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secrets").toString()));
      }
      if ((jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) && !jsonObj.get("self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self").toString()));
      }
      if ((jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) && !jsonObj.get("tasks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationLinks>() {
           @Override
           public void write(JsonWriter out, OrganizationLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationLinks
   * @throws IOException if the JSON string is invalid with respect to OrganizationLinks
   */
  public static OrganizationLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationLinks.class);
  }

  /**
   * Convert an instance of OrganizationLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

