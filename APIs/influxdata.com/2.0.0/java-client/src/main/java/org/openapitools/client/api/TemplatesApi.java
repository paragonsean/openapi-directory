/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentCreate;
import org.openapitools.client.model.DocumentUpdate;
import org.openapitools.client.model.Documents;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteDocumentsTemplatesID
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsTemplatesIDCall(String templateID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/templates/{templateID}"
            .replace("{" + "templateID" + "}", localVarApiClient.escapeString(templateID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentsTemplatesIDValidateBeforeCall(String templateID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateID' is set
        if (templateID == null) {
            throw new ApiException("Missing the required parameter 'templateID' when calling deleteDocumentsTemplatesID(Async)");
        }

        return deleteDocumentsTemplatesIDCall(templateID, zapTraceSpan, _callback);

    }

    /**
     * Delete a template
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocumentsTemplatesID(String templateID, String zapTraceSpan) throws ApiException {
        deleteDocumentsTemplatesIDWithHttpInfo(templateID, zapTraceSpan);
    }

    /**
     * Delete a template
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentsTemplatesIDWithHttpInfo(String templateID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentsTemplatesIDValidateBeforeCall(templateID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a template (asynchronously)
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsTemplatesIDAsync(String templateID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentsTemplatesIDValidateBeforeCall(templateID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocumentsTemplatesIDLabelsID
     * @param templateID The template ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsTemplatesIDLabelsIDCall(String templateID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/templates/{templateID}/labels/{labelID}"
            .replace("{" + "templateID" + "}", localVarApiClient.escapeString(templateID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentsTemplatesIDLabelsIDValidateBeforeCall(String templateID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateID' is set
        if (templateID == null) {
            throw new ApiException("Missing the required parameter 'templateID' when calling deleteDocumentsTemplatesIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteDocumentsTemplatesIDLabelsID(Async)");
        }

        return deleteDocumentsTemplatesIDLabelsIDCall(templateID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete a label from a template
     * 
     * @param templateID The template ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocumentsTemplatesIDLabelsID(String templateID, String labelID, String zapTraceSpan) throws ApiException {
        deleteDocumentsTemplatesIDLabelsIDWithHttpInfo(templateID, labelID, zapTraceSpan);
    }

    /**
     * Delete a label from a template
     * 
     * @param templateID The template ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentsTemplatesIDLabelsIDWithHttpInfo(String templateID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentsTemplatesIDLabelsIDValidateBeforeCall(templateID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label from a template (asynchronously)
     * 
     * @param templateID The template ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Template not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentsTemplatesIDLabelsIDAsync(String templateID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentsTemplatesIDLabelsIDValidateBeforeCall(templateID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentsTemplates
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org Specifies the name of the organization of the template. (optional)
     * @param orgID Specifies the organization ID of the template. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of template documents </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsTemplatesCall(String zapTraceSpan, String org, String orgID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsTemplatesValidateBeforeCall(String zapTraceSpan, String org, String orgID, final ApiCallback _callback) throws ApiException {
        return getDocumentsTemplatesCall(zapTraceSpan, org, orgID, _callback);

    }

    /**
     * List all templates
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org Specifies the name of the organization of the template. (optional)
     * @param orgID Specifies the organization ID of the template. (optional)
     * @return Documents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of template documents </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Documents getDocumentsTemplates(String zapTraceSpan, String org, String orgID) throws ApiException {
        ApiResponse<Documents> localVarResp = getDocumentsTemplatesWithHttpInfo(zapTraceSpan, org, orgID);
        return localVarResp.getData();
    }

    /**
     * List all templates
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org Specifies the name of the organization of the template. (optional)
     * @param orgID Specifies the organization ID of the template. (optional)
     * @return ApiResponse&lt;Documents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of template documents </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Documents> getDocumentsTemplatesWithHttpInfo(String zapTraceSpan, String org, String orgID) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsTemplatesValidateBeforeCall(zapTraceSpan, org, orgID, null);
        Type localVarReturnType = new TypeToken<Documents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all templates (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org Specifies the name of the organization of the template. (optional)
     * @param orgID Specifies the organization ID of the template. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of template documents </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsTemplatesAsync(String zapTraceSpan, String org, String orgID, final ApiCallback<Documents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsTemplatesValidateBeforeCall(zapTraceSpan, org, orgID, _callback);
        Type localVarReturnType = new TypeToken<Documents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentsTemplatesID
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsTemplatesIDCall(String templateID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/templates/{templateID}"
            .replace("{" + "templateID" + "}", localVarApiClient.escapeString(templateID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsTemplatesIDValidateBeforeCall(String templateID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateID' is set
        if (templateID == null) {
            throw new ApiException("Missing the required parameter 'templateID' when calling getDocumentsTemplatesID(Async)");
        }

        return getDocumentsTemplatesIDCall(templateID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a template
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Document getDocumentsTemplatesID(String templateID, String zapTraceSpan) throws ApiException {
        ApiResponse<Document> localVarResp = getDocumentsTemplatesIDWithHttpInfo(templateID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a template
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> getDocumentsTemplatesIDWithHttpInfo(String templateID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsTemplatesIDValidateBeforeCall(templateID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a template (asynchronously)
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsTemplatesIDAsync(String templateID, String zapTraceSpan, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsTemplatesIDValidateBeforeCall(templateID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentsTemplatesIDLabels
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsTemplatesIDLabelsCall(String templateID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/templates/{templateID}/labels"
            .replace("{" + "templateID" + "}", localVarApiClient.escapeString(templateID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsTemplatesIDLabelsValidateBeforeCall(String templateID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateID' is set
        if (templateID == null) {
            throw new ApiException("Missing the required parameter 'templateID' when calling getDocumentsTemplatesIDLabels(Async)");
        }

        return getDocumentsTemplatesIDLabelsCall(templateID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a template
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getDocumentsTemplatesIDLabels(String templateID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getDocumentsTemplatesIDLabelsWithHttpInfo(templateID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a template
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getDocumentsTemplatesIDLabelsWithHttpInfo(String templateID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsTemplatesIDLabelsValidateBeforeCall(templateID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a template (asynchronously)
     * 
     * @param templateID The template ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsTemplatesIDLabelsAsync(String templateID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsTemplatesIDLabelsValidateBeforeCall(templateID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDocumentsTemplates
     * @param documentCreate Template that will be created (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Template created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDocumentsTemplatesCall(DocumentCreate documentCreate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentCreate;

        // create path and map variables
        String localVarPath = "/documents/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDocumentsTemplatesValidateBeforeCall(DocumentCreate documentCreate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentCreate' is set
        if (documentCreate == null) {
            throw new ApiException("Missing the required parameter 'documentCreate' when calling postDocumentsTemplates(Async)");
        }

        return postDocumentsTemplatesCall(documentCreate, zapTraceSpan, _callback);

    }

    /**
     * Create a template
     * 
     * @param documentCreate Template that will be created (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Template created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Document postDocumentsTemplates(DocumentCreate documentCreate, String zapTraceSpan) throws ApiException {
        ApiResponse<Document> localVarResp = postDocumentsTemplatesWithHttpInfo(documentCreate, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a template
     * 
     * @param documentCreate Template that will be created (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Template created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> postDocumentsTemplatesWithHttpInfo(DocumentCreate documentCreate, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDocumentsTemplatesValidateBeforeCall(documentCreate, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a template (asynchronously)
     * 
     * @param documentCreate Template that will be created (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Template created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDocumentsTemplatesAsync(DocumentCreate documentCreate, String zapTraceSpan, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDocumentsTemplatesValidateBeforeCall(documentCreate, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDocumentsTemplatesIDLabels
     * @param templateID The template ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDocumentsTemplatesIDLabelsCall(String templateID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/documents/templates/{templateID}/labels"
            .replace("{" + "templateID" + "}", localVarApiClient.escapeString(templateID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDocumentsTemplatesIDLabelsValidateBeforeCall(String templateID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateID' is set
        if (templateID == null) {
            throw new ApiException("Missing the required parameter 'templateID' when calling postDocumentsTemplatesIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postDocumentsTemplatesIDLabels(Async)");
        }

        return postDocumentsTemplatesIDLabelsCall(templateID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a template
     * 
     * @param templateID The template ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postDocumentsTemplatesIDLabels(String templateID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postDocumentsTemplatesIDLabelsWithHttpInfo(templateID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a template
     * 
     * @param templateID The template ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postDocumentsTemplatesIDLabelsWithHttpInfo(String templateID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDocumentsTemplatesIDLabelsValidateBeforeCall(templateID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a template (asynchronously)
     * 
     * @param templateID The template ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDocumentsTemplatesIDLabelsAsync(String templateID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDocumentsTemplatesIDLabelsValidateBeforeCall(templateID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putDocumentsTemplatesID
     * @param templateID The template ID. (required)
     * @param documentUpdate Template that will be updated (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly updated template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDocumentsTemplatesIDCall(String templateID, DocumentUpdate documentUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentUpdate;

        // create path and map variables
        String localVarPath = "/documents/templates/{templateID}"
            .replace("{" + "templateID" + "}", localVarApiClient.escapeString(templateID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDocumentsTemplatesIDValidateBeforeCall(String templateID, DocumentUpdate documentUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateID' is set
        if (templateID == null) {
            throw new ApiException("Missing the required parameter 'templateID' when calling putDocumentsTemplatesID(Async)");
        }

        // verify the required parameter 'documentUpdate' is set
        if (documentUpdate == null) {
            throw new ApiException("Missing the required parameter 'documentUpdate' when calling putDocumentsTemplatesID(Async)");
        }

        return putDocumentsTemplatesIDCall(templateID, documentUpdate, zapTraceSpan, _callback);

    }

    /**
     * Update a template
     * 
     * @param templateID The template ID. (required)
     * @param documentUpdate Template that will be updated (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly updated template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Document putDocumentsTemplatesID(String templateID, DocumentUpdate documentUpdate, String zapTraceSpan) throws ApiException {
        ApiResponse<Document> localVarResp = putDocumentsTemplatesIDWithHttpInfo(templateID, documentUpdate, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a template
     * 
     * @param templateID The template ID. (required)
     * @param documentUpdate Template that will be updated (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly updated template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> putDocumentsTemplatesIDWithHttpInfo(String templateID, DocumentUpdate documentUpdate, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putDocumentsTemplatesIDValidateBeforeCall(templateID, documentUpdate, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a template (asynchronously)
     * 
     * @param templateID The template ID. (required)
     * @param documentUpdate Template that will be updated (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly updated template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDocumentsTemplatesIDAsync(String templateID, DocumentUpdate documentUpdate, String zapTraceSpan, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDocumentsTemplatesIDValidateBeforeCall(templateID, documentUpdate, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
