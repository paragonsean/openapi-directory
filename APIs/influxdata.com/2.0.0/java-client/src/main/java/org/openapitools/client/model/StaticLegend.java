/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StaticLegend represents the options specific to the static legend
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StaticLegend {
  public static final String SERIALIZED_NAME_COLORIZE_ROWS = "colorizeRows";
  @SerializedName(SERIALIZED_NAME_COLORIZE_ROWS)
  private Boolean colorizeRows;

  public static final String SERIALIZED_NAME_HEIGHT_RATIO = "heightRatio";
  @SerializedName(SERIALIZED_NAME_HEIGHT_RATIO)
  private Float heightRatio;

  public static final String SERIALIZED_NAME_HIDE = "hide";
  @SerializedName(SERIALIZED_NAME_HIDE)
  private Boolean hide;

  public static final String SERIALIZED_NAME_OPACITY = "opacity";
  @SerializedName(SERIALIZED_NAME_OPACITY)
  private Float opacity;

  public static final String SERIALIZED_NAME_ORIENTATION_THRESHOLD = "orientationThreshold";
  @SerializedName(SERIALIZED_NAME_ORIENTATION_THRESHOLD)
  private Integer orientationThreshold;

  public static final String SERIALIZED_NAME_VALUE_AXIS = "valueAxis";
  @SerializedName(SERIALIZED_NAME_VALUE_AXIS)
  private String valueAxis;

  public static final String SERIALIZED_NAME_WIDTH_RATIO = "widthRatio";
  @SerializedName(SERIALIZED_NAME_WIDTH_RATIO)
  private Float widthRatio;

  public StaticLegend() {
  }

  public StaticLegend colorizeRows(Boolean colorizeRows) {
    this.colorizeRows = colorizeRows;
    return this;
  }

  /**
   * Get colorizeRows
   * @return colorizeRows
   */
  @javax.annotation.Nullable
  public Boolean getColorizeRows() {
    return colorizeRows;
  }

  public void setColorizeRows(Boolean colorizeRows) {
    this.colorizeRows = colorizeRows;
  }


  public StaticLegend heightRatio(Float heightRatio) {
    this.heightRatio = heightRatio;
    return this;
  }

  /**
   * Get heightRatio
   * @return heightRatio
   */
  @javax.annotation.Nullable
  public Float getHeightRatio() {
    return heightRatio;
  }

  public void setHeightRatio(Float heightRatio) {
    this.heightRatio = heightRatio;
  }


  public StaticLegend hide(Boolean hide) {
    this.hide = hide;
    return this;
  }

  /**
   * Get hide
   * @return hide
   */
  @javax.annotation.Nullable
  public Boolean getHide() {
    return hide;
  }

  public void setHide(Boolean hide) {
    this.hide = hide;
  }


  public StaticLegend opacity(Float opacity) {
    this.opacity = opacity;
    return this;
  }

  /**
   * Get opacity
   * @return opacity
   */
  @javax.annotation.Nullable
  public Float getOpacity() {
    return opacity;
  }

  public void setOpacity(Float opacity) {
    this.opacity = opacity;
  }


  public StaticLegend orientationThreshold(Integer orientationThreshold) {
    this.orientationThreshold = orientationThreshold;
    return this;
  }

  /**
   * Get orientationThreshold
   * @return orientationThreshold
   */
  @javax.annotation.Nullable
  public Integer getOrientationThreshold() {
    return orientationThreshold;
  }

  public void setOrientationThreshold(Integer orientationThreshold) {
    this.orientationThreshold = orientationThreshold;
  }


  public StaticLegend valueAxis(String valueAxis) {
    this.valueAxis = valueAxis;
    return this;
  }

  /**
   * Get valueAxis
   * @return valueAxis
   */
  @javax.annotation.Nullable
  public String getValueAxis() {
    return valueAxis;
  }

  public void setValueAxis(String valueAxis) {
    this.valueAxis = valueAxis;
  }


  public StaticLegend widthRatio(Float widthRatio) {
    this.widthRatio = widthRatio;
    return this;
  }

  /**
   * Get widthRatio
   * @return widthRatio
   */
  @javax.annotation.Nullable
  public Float getWidthRatio() {
    return widthRatio;
  }

  public void setWidthRatio(Float widthRatio) {
    this.widthRatio = widthRatio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StaticLegend staticLegend = (StaticLegend) o;
    return Objects.equals(this.colorizeRows, staticLegend.colorizeRows) &&
        Objects.equals(this.heightRatio, staticLegend.heightRatio) &&
        Objects.equals(this.hide, staticLegend.hide) &&
        Objects.equals(this.opacity, staticLegend.opacity) &&
        Objects.equals(this.orientationThreshold, staticLegend.orientationThreshold) &&
        Objects.equals(this.valueAxis, staticLegend.valueAxis) &&
        Objects.equals(this.widthRatio, staticLegend.widthRatio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorizeRows, heightRatio, hide, opacity, orientationThreshold, valueAxis, widthRatio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaticLegend {\n");
    sb.append("    colorizeRows: ").append(toIndentedString(colorizeRows)).append("\n");
    sb.append("    heightRatio: ").append(toIndentedString(heightRatio)).append("\n");
    sb.append("    hide: ").append(toIndentedString(hide)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    orientationThreshold: ").append(toIndentedString(orientationThreshold)).append("\n");
    sb.append("    valueAxis: ").append(toIndentedString(valueAxis)).append("\n");
    sb.append("    widthRatio: ").append(toIndentedString(widthRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorizeRows");
    openapiFields.add("heightRatio");
    openapiFields.add("hide");
    openapiFields.add("opacity");
    openapiFields.add("orientationThreshold");
    openapiFields.add("valueAxis");
    openapiFields.add("widthRatio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StaticLegend
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StaticLegend.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StaticLegend is not found in the empty JSON string", StaticLegend.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StaticLegend.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StaticLegend` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("valueAxis") != null && !jsonObj.get("valueAxis").isJsonNull()) && !jsonObj.get("valueAxis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueAxis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueAxis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StaticLegend.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StaticLegend' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StaticLegend> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StaticLegend.class));

       return (TypeAdapter<T>) new TypeAdapter<StaticLegend>() {
           @Override
           public void write(JsonWriter out, StaticLegend value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StaticLegend read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StaticLegend given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StaticLegend
   * @throws IOException if the JSON string is invalid with respect to StaticLegend
   */
  public static StaticLegend fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StaticLegend.class);
  }

  /**
   * Convert an instance of StaticLegend to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

