/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dialect {
  /**
   * Gets or Sets annotations
   */
  @JsonAdapter(AnnotationsEnum.Adapter.class)
  public enum AnnotationsEnum {
    GROUP("group"),
    
    DATATYPE("datatype"),
    
    DEFAULT("default");

    private String value;

    AnnotationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationsEnum fromValue(String value) {
      for (AnnotationsEnum b : AnnotationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Set<AnnotationsEnum> annotations = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_COMMENT_PREFIX = "commentPrefix";
  @SerializedName(SERIALIZED_NAME_COMMENT_PREFIX)
  private String commentPrefix = "#";

  /**
   * Format of timestamps
   */
  @JsonAdapter(DateTimeFormatEnum.Adapter.class)
  public enum DateTimeFormatEnum {
    RFC3339("RFC3339"),
    
    RFC3339_NANO("RFC3339Nano");

    private String value;

    DateTimeFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateTimeFormatEnum fromValue(String value) {
      for (DateTimeFormatEnum b : DateTimeFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateTimeFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateTimeFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateTimeFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateTimeFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DateTimeFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATE_TIME_FORMAT = "dateTimeFormat";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_FORMAT)
  private DateTimeFormatEnum dateTimeFormat = DateTimeFormatEnum.RFC3339;

  public static final String SERIALIZED_NAME_DELIMITER = "delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  private String delimiter = ",";

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Boolean header = true;

  public Dialect() {
  }

  public Dialect annotations(Set<AnnotationsEnum> annotations) {
    this.annotations = annotations;
    return this;
  }

  public Dialect addAnnotationsItem(AnnotationsEnum annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new LinkedHashSet<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

  /**
   * https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns
   * @return annotations
   */
  @javax.annotation.Nullable
  public Set<AnnotationsEnum> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Set<AnnotationsEnum> annotations) {
    this.annotations = annotations;
  }


  public Dialect commentPrefix(String commentPrefix) {
    this.commentPrefix = commentPrefix;
    return this;
  }

  /**
   * Character prefixed to comment strings
   * @return commentPrefix
   */
  @javax.annotation.Nullable
  public String getCommentPrefix() {
    return commentPrefix;
  }

  public void setCommentPrefix(String commentPrefix) {
    this.commentPrefix = commentPrefix;
  }


  public Dialect dateTimeFormat(DateTimeFormatEnum dateTimeFormat) {
    this.dateTimeFormat = dateTimeFormat;
    return this;
  }

  /**
   * Format of timestamps
   * @return dateTimeFormat
   */
  @javax.annotation.Nullable
  public DateTimeFormatEnum getDateTimeFormat() {
    return dateTimeFormat;
  }

  public void setDateTimeFormat(DateTimeFormatEnum dateTimeFormat) {
    this.dateTimeFormat = dateTimeFormat;
  }


  public Dialect delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   * Separator between cells; the default is ,
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public Dialect header(Boolean header) {
    this.header = header;
    return this;
  }

  /**
   * If true, the results will contain a header row
   * @return header
   */
  @javax.annotation.Nullable
  public Boolean getHeader() {
    return header;
  }

  public void setHeader(Boolean header) {
    this.header = header;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dialect dialect = (Dialect) o;
    return Objects.equals(this.annotations, dialect.annotations) &&
        Objects.equals(this.commentPrefix, dialect.commentPrefix) &&
        Objects.equals(this.dateTimeFormat, dialect.dateTimeFormat) &&
        Objects.equals(this.delimiter, dialect.delimiter) &&
        Objects.equals(this.header, dialect.header);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, commentPrefix, dateTimeFormat, delimiter, header);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dialect {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    commentPrefix: ").append(toIndentedString(commentPrefix)).append("\n");
    sb.append("    dateTimeFormat: ").append(toIndentedString(dateTimeFormat)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("commentPrefix");
    openapiFields.add("dateTimeFormat");
    openapiFields.add("delimiter");
    openapiFields.add("header");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dialect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dialect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dialect is not found in the empty JSON string", Dialect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dialect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dialect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("annotations") != null && !jsonObj.get("annotations").isJsonNull() && !jsonObj.get("annotations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
      }
      if ((jsonObj.get("commentPrefix") != null && !jsonObj.get("commentPrefix").isJsonNull()) && !jsonObj.get("commentPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commentPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commentPrefix").toString()));
      }
      if ((jsonObj.get("dateTimeFormat") != null && !jsonObj.get("dateTimeFormat").isJsonNull()) && !jsonObj.get("dateTimeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTimeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTimeFormat").toString()));
      }
      // validate the optional field `dateTimeFormat`
      if (jsonObj.get("dateTimeFormat") != null && !jsonObj.get("dateTimeFormat").isJsonNull()) {
        DateTimeFormatEnum.validateJsonElement(jsonObj.get("dateTimeFormat"));
      }
      if ((jsonObj.get("delimiter") != null && !jsonObj.get("delimiter").isJsonNull()) && !jsonObj.get("delimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delimiter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dialect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dialect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dialect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dialect.class));

       return (TypeAdapter<T>) new TypeAdapter<Dialect>() {
           @Override
           public void write(JsonWriter out, Dialect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dialect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dialect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dialect
   * @throws IOException if the JSON string is invalid with respect to Dialect
   */
  public static Dialect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dialect.class);
  }

  /**
   * Convert an instance of Dialect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

