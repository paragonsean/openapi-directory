/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets TemplateKind
 */
@JsonAdapter(TemplateKind.Adapter.class)
public enum TemplateKind {
  
  BUCKET("Bucket"),
  
  CHECK("Check"),
  
  CHECK_DEADMAN("CheckDeadman"),
  
  CHECK_THRESHOLD("CheckThreshold"),
  
  DASHBOARD("Dashboard"),
  
  LABEL("Label"),
  
  NOTIFICATION_ENDPOINT("NotificationEndpoint"),
  
  NOTIFICATION_ENDPOINT_HTTP("NotificationEndpointHTTP"),
  
  NOTIFICATION_ENDPOINT_PAGER_DUTY("NotificationEndpointPagerDuty"),
  
  NOTIFICATION_ENDPOINT_SLACK("NotificationEndpointSlack"),
  
  NOTIFICATION_RULE("NotificationRule"),
  
  TASK("Task"),
  
  TELEGRAF("Telegraf"),
  
  VARIABLE("Variable");

  private String value;

  TemplateKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TemplateKind fromValue(String value) {
    for (TemplateKind b : TemplateKind.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TemplateKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final TemplateKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TemplateKind read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TemplateKind.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TemplateKind.fromValue(value);
  }
}

