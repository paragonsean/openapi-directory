/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.Logs;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.Run;
import org.openapitools.client.model.RunManually;
import org.openapitools.client.model.Runs;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskCreateRequest;
import org.openapitools.client.model.TaskUpdateRequest;
import org.openapitools.client.model.Tasks;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTasksID
     * @param taskID The ID of the task to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTasksIDValidateBeforeCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling deleteTasksID(Async)");
        }

        return deleteTasksIDCall(taskID, zapTraceSpan, _callback);

    }

    /**
     * Delete a task
     * Deletes a task and all associated records
     * @param taskID The ID of the task to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTasksID(String taskID, String zapTraceSpan) throws ApiException {
        deleteTasksIDWithHttpInfo(taskID, zapTraceSpan);
    }

    /**
     * Delete a task
     * Deletes a task and all associated records
     * @param taskID The ID of the task to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTasksIDWithHttpInfo(String taskID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTasksIDValidateBeforeCall(taskID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a task (asynchronously)
     * Deletes a task and all associated records
     * @param taskID The ID of the task to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDAsync(String taskID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTasksIDValidateBeforeCall(taskID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTasksIDLabelsID
     * @param taskID The task ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDLabelsIDCall(String taskID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/labels/{labelID}"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTasksIDLabelsIDValidateBeforeCall(String taskID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling deleteTasksIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteTasksIDLabelsID(Async)");
        }

        return deleteTasksIDLabelsIDCall(taskID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete a label from a task
     * 
     * @param taskID The task ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTasksIDLabelsID(String taskID, String labelID, String zapTraceSpan) throws ApiException {
        deleteTasksIDLabelsIDWithHttpInfo(taskID, labelID, zapTraceSpan);
    }

    /**
     * Delete a label from a task
     * 
     * @param taskID The task ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTasksIDLabelsIDWithHttpInfo(String taskID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTasksIDLabelsIDValidateBeforeCall(taskID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label from a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDLabelsIDAsync(String taskID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTasksIDLabelsIDValidateBeforeCall(taskID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTasksIDMembersID
     * @param userID The ID of the member to remove. (required)
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDMembersIDCall(String userID, String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/members/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTasksIDMembersIDValidateBeforeCall(String userID, String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteTasksIDMembersID(Async)");
        }

        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling deleteTasksIDMembersID(Async)");
        }

        return deleteTasksIDMembersIDCall(userID, taskID, zapTraceSpan, _callback);

    }

    /**
     * Remove a member from a task
     * 
     * @param userID The ID of the member to remove. (required)
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTasksIDMembersID(String userID, String taskID, String zapTraceSpan) throws ApiException {
        deleteTasksIDMembersIDWithHttpInfo(userID, taskID, zapTraceSpan);
    }

    /**
     * Remove a member from a task
     * 
     * @param userID The ID of the member to remove. (required)
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTasksIDMembersIDWithHttpInfo(String userID, String taskID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTasksIDMembersIDValidateBeforeCall(userID, taskID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a member from a task (asynchronously)
     * 
     * @param userID The ID of the member to remove. (required)
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDMembersIDAsync(String userID, String taskID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTasksIDMembersIDValidateBeforeCall(userID, taskID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTasksIDOwnersID
     * @param userID The ID of the owner to remove. (required)
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDOwnersIDCall(String userID, String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/owners/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTasksIDOwnersIDValidateBeforeCall(String userID, String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteTasksIDOwnersID(Async)");
        }

        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling deleteTasksIDOwnersID(Async)");
        }

        return deleteTasksIDOwnersIDCall(userID, taskID, zapTraceSpan, _callback);

    }

    /**
     * Remove an owner from a task
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTasksIDOwnersID(String userID, String taskID, String zapTraceSpan) throws ApiException {
        deleteTasksIDOwnersIDWithHttpInfo(userID, taskID, zapTraceSpan);
    }

    /**
     * Remove an owner from a task
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTasksIDOwnersIDWithHttpInfo(String userID, String taskID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTasksIDOwnersIDValidateBeforeCall(userID, taskID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an owner from a task (asynchronously)
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDOwnersIDAsync(String userID, String taskID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTasksIDOwnersIDValidateBeforeCall(userID, taskID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTasksIDRunsID
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDRunsIDCall(String taskID, String runID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/runs/{runID}"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()))
            .replace("{" + "runID" + "}", localVarApiClient.escapeString(runID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTasksIDRunsIDValidateBeforeCall(String taskID, String runID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling deleteTasksIDRunsID(Async)");
        }

        // verify the required parameter 'runID' is set
        if (runID == null) {
            throw new ApiException("Missing the required parameter 'runID' when calling deleteTasksIDRunsID(Async)");
        }

        return deleteTasksIDRunsIDCall(taskID, runID, zapTraceSpan, _callback);

    }

    /**
     * Cancel a running task
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTasksIDRunsID(String taskID, String runID, String zapTraceSpan) throws ApiException {
        deleteTasksIDRunsIDWithHttpInfo(taskID, runID, zapTraceSpan);
    }

    /**
     * Cancel a running task
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTasksIDRunsIDWithHttpInfo(String taskID, String runID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTasksIDRunsIDValidateBeforeCall(taskID, runID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel a running task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksIDRunsIDAsync(String taskID, String runID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTasksIDRunsIDValidateBeforeCall(taskID, runID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasks
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param name Returns task with a specific name. (optional)
     * @param after Return tasks after a specified ID. (optional)
     * @param user Filter tasks to a specific user ID. (optional)
     * @param org Filter tasks to a specific organization name. (optional)
     * @param orgID Filter tasks to a specific organization ID. (optional)
     * @param status Filter tasks by a status--\&quot;inactive\&quot; or \&quot;active\&quot;. (optional)
     * @param limit The number of tasks to return (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksCall(String zapTraceSpan, String name, String after, String user, String org, String orgID, String status, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksValidateBeforeCall(String zapTraceSpan, String name, String after, String user, String org, String orgID, String status, Integer limit, final ApiCallback _callback) throws ApiException {
        return getTasksCall(zapTraceSpan, name, after, user, org, orgID, status, limit, _callback);

    }

    /**
     * List all tasks
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param name Returns task with a specific name. (optional)
     * @param after Return tasks after a specified ID. (optional)
     * @param user Filter tasks to a specific user ID. (optional)
     * @param org Filter tasks to a specific organization name. (optional)
     * @param orgID Filter tasks to a specific organization ID. (optional)
     * @param status Filter tasks by a status--\&quot;inactive\&quot; or \&quot;active\&quot;. (optional)
     * @param limit The number of tasks to return (optional, default to 100)
     * @return Tasks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Tasks getTasks(String zapTraceSpan, String name, String after, String user, String org, String orgID, String status, Integer limit) throws ApiException {
        ApiResponse<Tasks> localVarResp = getTasksWithHttpInfo(zapTraceSpan, name, after, user, org, orgID, status, limit);
        return localVarResp.getData();
    }

    /**
     * List all tasks
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param name Returns task with a specific name. (optional)
     * @param after Return tasks after a specified ID. (optional)
     * @param user Filter tasks to a specific user ID. (optional)
     * @param org Filter tasks to a specific organization name. (optional)
     * @param orgID Filter tasks to a specific organization ID. (optional)
     * @param status Filter tasks by a status--\&quot;inactive\&quot; or \&quot;active\&quot;. (optional)
     * @param limit The number of tasks to return (optional, default to 100)
     * @return ApiResponse&lt;Tasks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tasks> getTasksWithHttpInfo(String zapTraceSpan, String name, String after, String user, String org, String orgID, String status, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getTasksValidateBeforeCall(zapTraceSpan, name, after, user, org, orgID, status, limit, null);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all tasks (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param name Returns task with a specific name. (optional)
     * @param after Return tasks after a specified ID. (optional)
     * @param user Filter tasks to a specific user ID. (optional)
     * @param org Filter tasks to a specific organization name. (optional)
     * @param orgID Filter tasks to a specific organization ID. (optional)
     * @param status Filter tasks by a status--\&quot;inactive\&quot; or \&quot;active\&quot;. (optional)
     * @param limit The number of tasks to return (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksAsync(String zapTraceSpan, String name, String after, String user, String org, String orgID, String status, Integer limit, final ApiCallback<Tasks> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksValidateBeforeCall(zapTraceSpan, name, after, user, org, orgID, status, limit, _callback);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksID
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksIDValidateBeforeCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling getTasksID(Async)");
        }

        return getTasksIDCall(taskID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a task
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Task getTasksID(String taskID, String zapTraceSpan) throws ApiException {
        ApiResponse<Task> localVarResp = getTasksIDWithHttpInfo(taskID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a task
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> getTasksIDWithHttpInfo(String taskID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTasksIDValidateBeforeCall(taskID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDAsync(String taskID, String zapTraceSpan, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksIDValidateBeforeCall(taskID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksIDLabels
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDLabelsCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/labels"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksIDLabelsValidateBeforeCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling getTasksIDLabels(Async)");
        }

        return getTasksIDLabelsCall(taskID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a task
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getTasksIDLabels(String taskID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getTasksIDLabelsWithHttpInfo(taskID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a task
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getTasksIDLabelsWithHttpInfo(String taskID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTasksIDLabelsValidateBeforeCall(taskID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDLabelsAsync(String taskID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksIDLabelsValidateBeforeCall(taskID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksIDLogs
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All logs for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDLogsCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/logs"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksIDLogsValidateBeforeCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling getTasksIDLogs(Async)");
        }

        return getTasksIDLogsCall(taskID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve all logs for a task
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Logs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All logs for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Logs getTasksIDLogs(String taskID, String zapTraceSpan) throws ApiException {
        ApiResponse<Logs> localVarResp = getTasksIDLogsWithHttpInfo(taskID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve all logs for a task
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Logs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All logs for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Logs> getTasksIDLogsWithHttpInfo(String taskID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTasksIDLogsValidateBeforeCall(taskID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Logs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all logs for a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All logs for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDLogsAsync(String taskID, String zapTraceSpan, final ApiCallback<Logs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksIDLogsValidateBeforeCall(taskID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Logs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksIDMembers
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have member privileges for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDMembersCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/members"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksIDMembersValidateBeforeCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling getTasksIDMembers(Async)");
        }

        return getTasksIDMembersCall(taskID, zapTraceSpan, _callback);

    }

    /**
     * List all task members
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have member privileges for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMembers getTasksIDMembers(String taskID, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceMembers> localVarResp = getTasksIDMembersWithHttpInfo(taskID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all task members
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have member privileges for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMembers> getTasksIDMembersWithHttpInfo(String taskID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTasksIDMembersValidateBeforeCall(taskID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all task members (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have member privileges for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDMembersAsync(String taskID, String zapTraceSpan, final ApiCallback<ResourceMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksIDMembersValidateBeforeCall(taskID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksIDOwners
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have owner privileges for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDOwnersCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/owners"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksIDOwnersValidateBeforeCall(String taskID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling getTasksIDOwners(Async)");
        }

        return getTasksIDOwnersCall(taskID, zapTraceSpan, _callback);

    }

    /**
     * List all owners of a task
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceOwners
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have owner privileges for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOwners getTasksIDOwners(String taskID, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceOwners> localVarResp = getTasksIDOwnersWithHttpInfo(taskID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all owners of a task
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceOwners&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have owner privileges for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOwners> getTasksIDOwnersWithHttpInfo(String taskID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTasksIDOwnersValidateBeforeCall(taskID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceOwners>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all owners of a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have owner privileges for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDOwnersAsync(String taskID, String zapTraceSpan, final ApiCallback<ResourceOwners> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksIDOwnersValidateBeforeCall(taskID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceOwners>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksIDRuns
     * @param taskID The ID of the task to get runs for. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param after Returns runs after a specific ID. (optional)
     * @param limit The number of runs to return (optional, default to 100)
     * @param afterTime Filter runs to those scheduled after this time, RFC3339 (optional)
     * @param beforeTime Filter runs to those scheduled before this time, RFC3339 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of task runs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDRunsCall(String taskID, String zapTraceSpan, String after, Integer limit, OffsetDateTime afterTime, OffsetDateTime beforeTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/runs"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (afterTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterTime", afterTime));
        }

        if (beforeTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeTime", beforeTime));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksIDRunsValidateBeforeCall(String taskID, String zapTraceSpan, String after, Integer limit, OffsetDateTime afterTime, OffsetDateTime beforeTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling getTasksIDRuns(Async)");
        }

        return getTasksIDRunsCall(taskID, zapTraceSpan, after, limit, afterTime, beforeTime, _callback);

    }

    /**
     * List runs for a task
     * 
     * @param taskID The ID of the task to get runs for. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param after Returns runs after a specific ID. (optional)
     * @param limit The number of runs to return (optional, default to 100)
     * @param afterTime Filter runs to those scheduled after this time, RFC3339 (optional)
     * @param beforeTime Filter runs to those scheduled before this time, RFC3339 (optional)
     * @return Runs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of task runs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Runs getTasksIDRuns(String taskID, String zapTraceSpan, String after, Integer limit, OffsetDateTime afterTime, OffsetDateTime beforeTime) throws ApiException {
        ApiResponse<Runs> localVarResp = getTasksIDRunsWithHttpInfo(taskID, zapTraceSpan, after, limit, afterTime, beforeTime);
        return localVarResp.getData();
    }

    /**
     * List runs for a task
     * 
     * @param taskID The ID of the task to get runs for. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param after Returns runs after a specific ID. (optional)
     * @param limit The number of runs to return (optional, default to 100)
     * @param afterTime Filter runs to those scheduled after this time, RFC3339 (optional)
     * @param beforeTime Filter runs to those scheduled before this time, RFC3339 (optional)
     * @return ApiResponse&lt;Runs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of task runs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Runs> getTasksIDRunsWithHttpInfo(String taskID, String zapTraceSpan, String after, Integer limit, OffsetDateTime afterTime, OffsetDateTime beforeTime) throws ApiException {
        okhttp3.Call localVarCall = getTasksIDRunsValidateBeforeCall(taskID, zapTraceSpan, after, limit, afterTime, beforeTime, null);
        Type localVarReturnType = new TypeToken<Runs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List runs for a task (asynchronously)
     * 
     * @param taskID The ID of the task to get runs for. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param after Returns runs after a specific ID. (optional)
     * @param limit The number of runs to return (optional, default to 100)
     * @param afterTime Filter runs to those scheduled after this time, RFC3339 (optional)
     * @param beforeTime Filter runs to those scheduled before this time, RFC3339 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of task runs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDRunsAsync(String taskID, String zapTraceSpan, String after, Integer limit, OffsetDateTime afterTime, OffsetDateTime beforeTime, final ApiCallback<Runs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksIDRunsValidateBeforeCall(taskID, zapTraceSpan, after, limit, afterTime, beforeTime, _callback);
        Type localVarReturnType = new TypeToken<Runs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksIDRunsID
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The run record </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDRunsIDCall(String taskID, String runID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/runs/{runID}"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()))
            .replace("{" + "runID" + "}", localVarApiClient.escapeString(runID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksIDRunsIDValidateBeforeCall(String taskID, String runID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling getTasksIDRunsID(Async)");
        }

        // verify the required parameter 'runID' is set
        if (runID == null) {
            throw new ApiException("Missing the required parameter 'runID' when calling getTasksIDRunsID(Async)");
        }

        return getTasksIDRunsIDCall(taskID, runID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a single run for a task
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The run record </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Run getTasksIDRunsID(String taskID, String runID, String zapTraceSpan) throws ApiException {
        ApiResponse<Run> localVarResp = getTasksIDRunsIDWithHttpInfo(taskID, runID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single run for a task
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The run record </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Run> getTasksIDRunsIDWithHttpInfo(String taskID, String runID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTasksIDRunsIDValidateBeforeCall(taskID, runID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single run for a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The run record </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDRunsIDAsync(String taskID, String runID, String zapTraceSpan, final ApiCallback<Run> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksIDRunsIDValidateBeforeCall(taskID, runID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksIDRunsIDLogs
     * @param taskID ID of task to get logs for. (required)
     * @param runID ID of run to get logs for. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All logs for a run </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDRunsIDLogsCall(String taskID, String runID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/runs/{runID}/logs"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()))
            .replace("{" + "runID" + "}", localVarApiClient.escapeString(runID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksIDRunsIDLogsValidateBeforeCall(String taskID, String runID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling getTasksIDRunsIDLogs(Async)");
        }

        // verify the required parameter 'runID' is set
        if (runID == null) {
            throw new ApiException("Missing the required parameter 'runID' when calling getTasksIDRunsIDLogs(Async)");
        }

        return getTasksIDRunsIDLogsCall(taskID, runID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve all logs for a run
     * 
     * @param taskID ID of task to get logs for. (required)
     * @param runID ID of run to get logs for. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Logs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All logs for a run </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Logs getTasksIDRunsIDLogs(String taskID, String runID, String zapTraceSpan) throws ApiException {
        ApiResponse<Logs> localVarResp = getTasksIDRunsIDLogsWithHttpInfo(taskID, runID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve all logs for a run
     * 
     * @param taskID ID of task to get logs for. (required)
     * @param runID ID of run to get logs for. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Logs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All logs for a run </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Logs> getTasksIDRunsIDLogsWithHttpInfo(String taskID, String runID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTasksIDRunsIDLogsValidateBeforeCall(taskID, runID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Logs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all logs for a run (asynchronously)
     * 
     * @param taskID ID of task to get logs for. (required)
     * @param runID ID of run to get logs for. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All logs for a run </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksIDRunsIDLogsAsync(String taskID, String runID, String zapTraceSpan, final ApiCallback<Logs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksIDRunsIDLogsValidateBeforeCall(taskID, runID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Logs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchTasksID
     * @param taskID The task ID. (required)
     * @param taskUpdateRequest Task update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchTasksIDCall(String taskID, TaskUpdateRequest taskUpdateRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskUpdateRequest;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchTasksIDValidateBeforeCall(String taskID, TaskUpdateRequest taskUpdateRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling patchTasksID(Async)");
        }

        // verify the required parameter 'taskUpdateRequest' is set
        if (taskUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'taskUpdateRequest' when calling patchTasksID(Async)");
        }

        return patchTasksIDCall(taskID, taskUpdateRequest, zapTraceSpan, _callback);

    }

    /**
     * Update a task
     * Update a task. This will cancel all queued runs.
     * @param taskID The task ID. (required)
     * @param taskUpdateRequest Task update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Task patchTasksID(String taskID, TaskUpdateRequest taskUpdateRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<Task> localVarResp = patchTasksIDWithHttpInfo(taskID, taskUpdateRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a task
     * Update a task. This will cancel all queued runs.
     * @param taskID The task ID. (required)
     * @param taskUpdateRequest Task update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> patchTasksIDWithHttpInfo(String taskID, TaskUpdateRequest taskUpdateRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchTasksIDValidateBeforeCall(taskID, taskUpdateRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a task (asynchronously)
     * Update a task. This will cancel all queued runs.
     * @param taskID The task ID. (required)
     * @param taskUpdateRequest Task update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchTasksIDAsync(String taskID, TaskUpdateRequest taskUpdateRequest, String zapTraceSpan, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchTasksIDValidateBeforeCall(taskID, taskUpdateRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTasks
     * @param taskCreateRequest Task to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksCall(TaskCreateRequest taskCreateRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskCreateRequest;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTasksValidateBeforeCall(TaskCreateRequest taskCreateRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskCreateRequest' is set
        if (taskCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'taskCreateRequest' when calling postTasks(Async)");
        }

        return postTasksCall(taskCreateRequest, zapTraceSpan, _callback);

    }

    /**
     * Create a new task
     * 
     * @param taskCreateRequest Task to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Task postTasks(TaskCreateRequest taskCreateRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<Task> localVarResp = postTasksWithHttpInfo(taskCreateRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a new task
     * 
     * @param taskCreateRequest Task to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> postTasksWithHttpInfo(TaskCreateRequest taskCreateRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postTasksValidateBeforeCall(taskCreateRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new task (asynchronously)
     * 
     * @param taskCreateRequest Task to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksAsync(TaskCreateRequest taskCreateRequest, String zapTraceSpan, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTasksValidateBeforeCall(taskCreateRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTasksIDLabels
     * @param taskID The task ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A list of all labels for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDLabelsCall(String taskID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/labels"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTasksIDLabelsValidateBeforeCall(String taskID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling postTasksIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postTasksIDLabels(Async)");
        }

        return postTasksIDLabelsCall(taskID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a task
     * 
     * @param taskID The task ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A list of all labels for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postTasksIDLabels(String taskID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postTasksIDLabelsWithHttpInfo(taskID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a task
     * 
     * @param taskID The task ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A list of all labels for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postTasksIDLabelsWithHttpInfo(String taskID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postTasksIDLabelsValidateBeforeCall(taskID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A list of all labels for a task </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDLabelsAsync(String taskID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTasksIDLabelsValidateBeforeCall(taskID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTasksIDMembers
     * @param taskID The task ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to task members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDMembersCall(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResourceMemberRequestBody;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/members"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTasksIDMembersValidateBeforeCall(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling postTasksIDMembers(Async)");
        }

        // verify the required parameter 'addResourceMemberRequestBody' is set
        if (addResourceMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addResourceMemberRequestBody' when calling postTasksIDMembers(Async)");
        }

        return postTasksIDMembersCall(taskID, addResourceMemberRequestBody, zapTraceSpan, _callback);

    }

    /**
     * Add a member to a task
     * 
     * @param taskID The task ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to task members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMember postTasksIDMembers(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceMember> localVarResp = postTasksIDMembersWithHttpInfo(taskID, addResourceMemberRequestBody, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a member to a task
     * 
     * @param taskID The task ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to task members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMember> postTasksIDMembersWithHttpInfo(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postTasksIDMembersValidateBeforeCall(taskID, addResourceMemberRequestBody, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a member to a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to task members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDMembersAsync(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback<ResourceMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTasksIDMembersValidateBeforeCall(taskID, addResourceMemberRequestBody, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTasksIDOwners
     * @param taskID The task ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to task owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDOwnersCall(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResourceMemberRequestBody;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/owners"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTasksIDOwnersValidateBeforeCall(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling postTasksIDOwners(Async)");
        }

        // verify the required parameter 'addResourceMemberRequestBody' is set
        if (addResourceMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addResourceMemberRequestBody' when calling postTasksIDOwners(Async)");
        }

        return postTasksIDOwnersCall(taskID, addResourceMemberRequestBody, zapTraceSpan, _callback);

    }

    /**
     * Add an owner to a task
     * 
     * @param taskID The task ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceOwner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to task owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOwner postTasksIDOwners(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceOwner> localVarResp = postTasksIDOwnersWithHttpInfo(taskID, addResourceMemberRequestBody, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add an owner to a task
     * 
     * @param taskID The task ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceOwner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to task owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOwner> postTasksIDOwnersWithHttpInfo(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postTasksIDOwnersValidateBeforeCall(taskID, addResourceMemberRequestBody, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceOwner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an owner to a task (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to task owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDOwnersAsync(String taskID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback<ResourceOwner> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTasksIDOwnersValidateBeforeCall(taskID, addResourceMemberRequestBody, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceOwner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTasksIDRuns
     * @param taskID  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param runManually  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Run scheduled to start </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDRunsCall(String taskID, String zapTraceSpan, RunManually runManually, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runManually;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/runs"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTasksIDRunsValidateBeforeCall(String taskID, String zapTraceSpan, RunManually runManually, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling postTasksIDRuns(Async)");
        }

        return postTasksIDRunsCall(taskID, zapTraceSpan, runManually, _callback);

    }

    /**
     * Manually start a task run, overriding the current schedule
     * 
     * @param taskID  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param runManually  (optional)
     * @return Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Run scheduled to start </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Run postTasksIDRuns(String taskID, String zapTraceSpan, RunManually runManually) throws ApiException {
        ApiResponse<Run> localVarResp = postTasksIDRunsWithHttpInfo(taskID, zapTraceSpan, runManually);
        return localVarResp.getData();
    }

    /**
     * Manually start a task run, overriding the current schedule
     * 
     * @param taskID  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param runManually  (optional)
     * @return ApiResponse&lt;Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Run scheduled to start </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Run> postTasksIDRunsWithHttpInfo(String taskID, String zapTraceSpan, RunManually runManually) throws ApiException {
        okhttp3.Call localVarCall = postTasksIDRunsValidateBeforeCall(taskID, zapTraceSpan, runManually, null);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manually start a task run, overriding the current schedule (asynchronously)
     * 
     * @param taskID  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param runManually  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Run scheduled to start </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDRunsAsync(String taskID, String zapTraceSpan, RunManually runManually, final ApiCallback<Run> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTasksIDRunsValidateBeforeCall(taskID, zapTraceSpan, runManually, _callback);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTasksIDRunsIDRetry
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run that has been queued </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDRunsIDRetryCall(String taskID, String runID, String zapTraceSpan, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tasks/{taskID}/runs/{runID}/retry"
            .replace("{" + "taskID" + "}", localVarApiClient.escapeString(taskID.toString()))
            .replace("{" + "runID" + "}", localVarApiClient.escapeString(runID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTasksIDRunsIDRetryValidateBeforeCall(String taskID, String runID, String zapTraceSpan, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskID' is set
        if (taskID == null) {
            throw new ApiException("Missing the required parameter 'taskID' when calling postTasksIDRunsIDRetry(Async)");
        }

        // verify the required parameter 'runID' is set
        if (runID == null) {
            throw new ApiException("Missing the required parameter 'runID' when calling postTasksIDRunsIDRetry(Async)");
        }

        return postTasksIDRunsIDRetryCall(taskID, runID, zapTraceSpan, body, _callback);

    }

    /**
     * Retry a task run
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param body  (optional)
     * @return Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run that has been queued </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Run postTasksIDRunsIDRetry(String taskID, String runID, String zapTraceSpan, Object body) throws ApiException {
        ApiResponse<Run> localVarResp = postTasksIDRunsIDRetryWithHttpInfo(taskID, runID, zapTraceSpan, body);
        return localVarResp.getData();
    }

    /**
     * Retry a task run
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run that has been queued </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Run> postTasksIDRunsIDRetryWithHttpInfo(String taskID, String runID, String zapTraceSpan, Object body) throws ApiException {
        okhttp3.Call localVarCall = postTasksIDRunsIDRetryValidateBeforeCall(taskID, runID, zapTraceSpan, body, null);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retry a task run (asynchronously)
     * 
     * @param taskID The task ID. (required)
     * @param runID The run ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run that has been queued </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTasksIDRunsIDRetryAsync(String taskID, String runID, String zapTraceSpan, Object body, final ApiCallback<Run> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTasksIDRunsIDRetryValidateBeforeCall(taskID, runID, zapTraceSpan, body, _callback);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
