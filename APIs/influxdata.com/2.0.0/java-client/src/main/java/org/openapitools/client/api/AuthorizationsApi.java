/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Authorization;
import org.openapitools.client.model.AuthorizationPostRequest;
import org.openapitools.client.model.AuthorizationUpdateRequest;
import org.openapitools.client.model.Authorizations;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAuthorizationsID
     * @param authID The ID of the authorization to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Authorization deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthorizationsIDCall(String authID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authorizations/{authID}"
            .replace("{" + "authID" + "}", localVarApiClient.escapeString(authID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthorizationsIDValidateBeforeCall(String authID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authID' is set
        if (authID == null) {
            throw new ApiException("Missing the required parameter 'authID' when calling deleteAuthorizationsID(Async)");
        }

        return deleteAuthorizationsIDCall(authID, zapTraceSpan, _callback);

    }

    /**
     * Delete an authorization
     * 
     * @param authID The ID of the authorization to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Authorization deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAuthorizationsID(String authID, String zapTraceSpan) throws ApiException {
        deleteAuthorizationsIDWithHttpInfo(authID, zapTraceSpan);
    }

    /**
     * Delete an authorization
     * 
     * @param authID The ID of the authorization to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Authorization deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAuthorizationsIDWithHttpInfo(String authID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthorizationsIDValidateBeforeCall(authID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an authorization (asynchronously)
     * 
     * @param authID The ID of the authorization to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Authorization deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthorizationsIDAsync(String authID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthorizationsIDValidateBeforeCall(authID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthorizations
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param userID Only show authorizations that belong to a user ID. (optional)
     * @param user Only show authorizations that belong to a user name. (optional)
     * @param orgID Only show authorizations that belong to an organization ID. (optional)
     * @param org Only show authorizations that belong to a organization name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of authorizations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationsCall(String zapTraceSpan, String userID, String user, String orgID, String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authorizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userID", userID));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorizationsValidateBeforeCall(String zapTraceSpan, String userID, String user, String orgID, String org, final ApiCallback _callback) throws ApiException {
        return getAuthorizationsCall(zapTraceSpan, userID, user, orgID, org, _callback);

    }

    /**
     * List all authorizations
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param userID Only show authorizations that belong to a user ID. (optional)
     * @param user Only show authorizations that belong to a user name. (optional)
     * @param orgID Only show authorizations that belong to an organization ID. (optional)
     * @param org Only show authorizations that belong to a organization name. (optional)
     * @return Authorizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of authorizations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Authorizations getAuthorizations(String zapTraceSpan, String userID, String user, String orgID, String org) throws ApiException {
        ApiResponse<Authorizations> localVarResp = getAuthorizationsWithHttpInfo(zapTraceSpan, userID, user, orgID, org);
        return localVarResp.getData();
    }

    /**
     * List all authorizations
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param userID Only show authorizations that belong to a user ID. (optional)
     * @param user Only show authorizations that belong to a user name. (optional)
     * @param orgID Only show authorizations that belong to an organization ID. (optional)
     * @param org Only show authorizations that belong to a organization name. (optional)
     * @return ApiResponse&lt;Authorizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of authorizations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Authorizations> getAuthorizationsWithHttpInfo(String zapTraceSpan, String userID, String user, String orgID, String org) throws ApiException {
        okhttp3.Call localVarCall = getAuthorizationsValidateBeforeCall(zapTraceSpan, userID, user, orgID, org, null);
        Type localVarReturnType = new TypeToken<Authorizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all authorizations (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param userID Only show authorizations that belong to a user ID. (optional)
     * @param user Only show authorizations that belong to a user name. (optional)
     * @param orgID Only show authorizations that belong to an organization ID. (optional)
     * @param org Only show authorizations that belong to a organization name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of authorizations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationsAsync(String zapTraceSpan, String userID, String user, String orgID, String org, final ApiCallback<Authorizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorizationsValidateBeforeCall(zapTraceSpan, userID, user, orgID, org, _callback);
        Type localVarReturnType = new TypeToken<Authorizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthorizationsID
     * @param authID The ID of the authorization to get. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationsIDCall(String authID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authorizations/{authID}"
            .replace("{" + "authID" + "}", localVarApiClient.escapeString(authID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorizationsIDValidateBeforeCall(String authID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authID' is set
        if (authID == null) {
            throw new ApiException("Missing the required parameter 'authID' when calling getAuthorizationsID(Async)");
        }

        return getAuthorizationsIDCall(authID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve an authorization
     * 
     * @param authID The ID of the authorization to get. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Authorization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Authorization getAuthorizationsID(String authID, String zapTraceSpan) throws ApiException {
        ApiResponse<Authorization> localVarResp = getAuthorizationsIDWithHttpInfo(authID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve an authorization
     * 
     * @param authID The ID of the authorization to get. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Authorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Authorization> getAuthorizationsIDWithHttpInfo(String authID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getAuthorizationsIDValidateBeforeCall(authID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an authorization (asynchronously)
     * 
     * @param authID The ID of the authorization to get. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationsIDAsync(String authID, String zapTraceSpan, final ApiCallback<Authorization> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorizationsIDValidateBeforeCall(authID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchAuthorizationsID
     * @param authID The ID of the authorization to update. (required)
     * @param authorizationUpdateRequest Authorization to update (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The active or inactie authorization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAuthorizationsIDCall(String authID, AuthorizationUpdateRequest authorizationUpdateRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationUpdateRequest;

        // create path and map variables
        String localVarPath = "/authorizations/{authID}"
            .replace("{" + "authID" + "}", localVarApiClient.escapeString(authID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAuthorizationsIDValidateBeforeCall(String authID, AuthorizationUpdateRequest authorizationUpdateRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authID' is set
        if (authID == null) {
            throw new ApiException("Missing the required parameter 'authID' when calling patchAuthorizationsID(Async)");
        }

        // verify the required parameter 'authorizationUpdateRequest' is set
        if (authorizationUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'authorizationUpdateRequest' when calling patchAuthorizationsID(Async)");
        }

        return patchAuthorizationsIDCall(authID, authorizationUpdateRequest, zapTraceSpan, _callback);

    }

    /**
     * Update an authorization to be active or inactive
     * 
     * @param authID The ID of the authorization to update. (required)
     * @param authorizationUpdateRequest Authorization to update (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Authorization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The active or inactie authorization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Authorization patchAuthorizationsID(String authID, AuthorizationUpdateRequest authorizationUpdateRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<Authorization> localVarResp = patchAuthorizationsIDWithHttpInfo(authID, authorizationUpdateRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update an authorization to be active or inactive
     * 
     * @param authID The ID of the authorization to update. (required)
     * @param authorizationUpdateRequest Authorization to update (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Authorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The active or inactie authorization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Authorization> patchAuthorizationsIDWithHttpInfo(String authID, AuthorizationUpdateRequest authorizationUpdateRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchAuthorizationsIDValidateBeforeCall(authID, authorizationUpdateRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an authorization to be active or inactive (asynchronously)
     * 
     * @param authID The ID of the authorization to update. (required)
     * @param authorizationUpdateRequest Authorization to update (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The active or inactie authorization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAuthorizationsIDAsync(String authID, AuthorizationUpdateRequest authorizationUpdateRequest, String zapTraceSpan, final ApiCallback<Authorization> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAuthorizationsIDValidateBeforeCall(authID, authorizationUpdateRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAuthorizations
     * @param authorizationPostRequest Authorization to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Authorization created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAuthorizationsCall(AuthorizationPostRequest authorizationPostRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationPostRequest;

        // create path and map variables
        String localVarPath = "/authorizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAuthorizationsValidateBeforeCall(AuthorizationPostRequest authorizationPostRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationPostRequest' is set
        if (authorizationPostRequest == null) {
            throw new ApiException("Missing the required parameter 'authorizationPostRequest' when calling postAuthorizations(Async)");
        }

        return postAuthorizationsCall(authorizationPostRequest, zapTraceSpan, _callback);

    }

    /**
     * Create an authorization
     * 
     * @param authorizationPostRequest Authorization to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Authorization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Authorization created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Authorization postAuthorizations(AuthorizationPostRequest authorizationPostRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<Authorization> localVarResp = postAuthorizationsWithHttpInfo(authorizationPostRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create an authorization
     * 
     * @param authorizationPostRequest Authorization to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Authorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Authorization created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Authorization> postAuthorizationsWithHttpInfo(AuthorizationPostRequest authorizationPostRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postAuthorizationsValidateBeforeCall(authorizationPostRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an authorization (asynchronously)
     * 
     * @param authorizationPostRequest Authorization to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Authorization created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAuthorizationsAsync(AuthorizationPostRequest authorizationPostRequest, String zapTraceSpan, final ApiCallback<Authorization> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAuthorizationsValidateBeforeCall(authorizationPostRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
