/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TemplateApplyActionsInnerOneOf;
import org.openapitools.client.model.TemplateApplyActionsInnerOneOf1;
import org.openapitools.client.model.TemplateApplyActionsInnerOneOf1Properties;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateApplyActionsInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TemplateApplyActionsInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TemplateApplyActionsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TemplateApplyActionsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TemplateApplyActionsInnerOneOf> adapterTemplateApplyActionsInnerOneOf = gson.getDelegateAdapter(this, TypeToken.get(TemplateApplyActionsInnerOneOf.class));
            final TypeAdapter<TemplateApplyActionsInnerOneOf1> adapterTemplateApplyActionsInnerOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(TemplateApplyActionsInnerOneOf1.class));

            return (TypeAdapter<T>) new TypeAdapter<TemplateApplyActionsInner>() {
                @Override
                public void write(JsonWriter out, TemplateApplyActionsInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TemplateApplyActionsInnerOneOf`
                    if (value.getActualInstance() instanceof TemplateApplyActionsInnerOneOf) {
                        JsonElement element = adapterTemplateApplyActionsInnerOneOf.toJsonTree((TemplateApplyActionsInnerOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TemplateApplyActionsInnerOneOf1`
                    if (value.getActualInstance() instanceof TemplateApplyActionsInnerOneOf1) {
                        JsonElement element = adapterTemplateApplyActionsInnerOneOf1.toJsonTree((TemplateApplyActionsInnerOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: TemplateApplyActionsInnerOneOf, TemplateApplyActionsInnerOneOf1");
                }

                @Override
                public TemplateApplyActionsInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TemplateApplyActionsInnerOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TemplateApplyActionsInnerOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterTemplateApplyActionsInnerOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TemplateApplyActionsInnerOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TemplateApplyActionsInnerOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TemplateApplyActionsInnerOneOf'", e);
                    }
                    // deserialize TemplateApplyActionsInnerOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TemplateApplyActionsInnerOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterTemplateApplyActionsInnerOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TemplateApplyActionsInnerOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TemplateApplyActionsInnerOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TemplateApplyActionsInnerOneOf1'", e);
                    }

                    if (match == 1) {
                        TemplateApplyActionsInner ret = new TemplateApplyActionsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TemplateApplyActionsInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TemplateApplyActionsInner() {
        super("oneOf", Boolean.FALSE);
    }

    public TemplateApplyActionsInner(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TemplateApplyActionsInnerOneOf", TemplateApplyActionsInnerOneOf.class);
        schemas.put("TemplateApplyActionsInnerOneOf1", TemplateApplyActionsInnerOneOf1.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TemplateApplyActionsInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TemplateApplyActionsInnerOneOf, TemplateApplyActionsInnerOneOf1
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TemplateApplyActionsInnerOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TemplateApplyActionsInnerOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TemplateApplyActionsInnerOneOf, TemplateApplyActionsInnerOneOf1");
    }

    /**
     * Get the actual instance, which can be the following:
     * TemplateApplyActionsInnerOneOf, TemplateApplyActionsInnerOneOf1
     *
     * @return The actual instance (TemplateApplyActionsInnerOneOf, TemplateApplyActionsInnerOneOf1)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TemplateApplyActionsInnerOneOf`. If the actual instance is not `TemplateApplyActionsInnerOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TemplateApplyActionsInnerOneOf`
     * @throws ClassCastException if the instance is not `TemplateApplyActionsInnerOneOf`
     */
    public TemplateApplyActionsInnerOneOf getTemplateApplyActionsInnerOneOf() throws ClassCastException {
        return (TemplateApplyActionsInnerOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TemplateApplyActionsInnerOneOf1`. If the actual instance is not `TemplateApplyActionsInnerOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TemplateApplyActionsInnerOneOf1`
     * @throws ClassCastException if the instance is not `TemplateApplyActionsInnerOneOf1`
     */
    public TemplateApplyActionsInnerOneOf1 getTemplateApplyActionsInnerOneOf1() throws ClassCastException {
        return (TemplateApplyActionsInnerOneOf1)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TemplateApplyActionsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with TemplateApplyActionsInnerOneOf
        try {
            TemplateApplyActionsInnerOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TemplateApplyActionsInnerOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TemplateApplyActionsInnerOneOf1
        try {
            TemplateApplyActionsInnerOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TemplateApplyActionsInnerOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for TemplateApplyActionsInner with oneOf schemas: TemplateApplyActionsInnerOneOf, TemplateApplyActionsInnerOneOf1. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of TemplateApplyActionsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TemplateApplyActionsInner
     * @throws IOException if the JSON string is invalid with respect to TemplateApplyActionsInner
     */
    public static TemplateApplyActionsInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TemplateApplyActionsInner.class);
    }

    /**
     * Convert an instance of TemplateApplyActionsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

