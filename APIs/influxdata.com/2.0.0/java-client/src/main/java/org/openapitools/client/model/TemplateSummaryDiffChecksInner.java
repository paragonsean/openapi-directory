/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CheckDiscriminator;
import org.openapitools.client.model.TemplateKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateSummaryDiffChecksInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateSummaryDiffChecksInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private TemplateKind kind;

  public static final String SERIALIZED_NAME_NEW = "new";
  @SerializedName(SERIALIZED_NAME_NEW)
  private CheckDiscriminator _new;

  public static final String SERIALIZED_NAME_OLD = "old";
  @SerializedName(SERIALIZED_NAME_OLD)
  private CheckDiscriminator old;

  public static final String SERIALIZED_NAME_STATE_STATUS = "stateStatus";
  @SerializedName(SERIALIZED_NAME_STATE_STATUS)
  private String stateStatus;

  public static final String SERIALIZED_NAME_TEMPLATE_META_NAME = "templateMetaName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_META_NAME)
  private String templateMetaName;

  public TemplateSummaryDiffChecksInner() {
  }

  public TemplateSummaryDiffChecksInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TemplateSummaryDiffChecksInner kind(TemplateKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public TemplateKind getKind() {
    return kind;
  }

  public void setKind(TemplateKind kind) {
    this.kind = kind;
  }


  public TemplateSummaryDiffChecksInner _new(CheckDiscriminator _new) {
    this._new = _new;
    return this;
  }

  /**
   * Get _new
   * @return _new
   */
  @javax.annotation.Nullable
  public CheckDiscriminator getNew() {
    return _new;
  }

  public void setNew(CheckDiscriminator _new) {
    this._new = _new;
  }


  public TemplateSummaryDiffChecksInner old(CheckDiscriminator old) {
    this.old = old;
    return this;
  }

  /**
   * Get old
   * @return old
   */
  @javax.annotation.Nullable
  public CheckDiscriminator getOld() {
    return old;
  }

  public void setOld(CheckDiscriminator old) {
    this.old = old;
  }


  public TemplateSummaryDiffChecksInner stateStatus(String stateStatus) {
    this.stateStatus = stateStatus;
    return this;
  }

  /**
   * Get stateStatus
   * @return stateStatus
   */
  @javax.annotation.Nullable
  public String getStateStatus() {
    return stateStatus;
  }

  public void setStateStatus(String stateStatus) {
    this.stateStatus = stateStatus;
  }


  public TemplateSummaryDiffChecksInner templateMetaName(String templateMetaName) {
    this.templateMetaName = templateMetaName;
    return this;
  }

  /**
   * Get templateMetaName
   * @return templateMetaName
   */
  @javax.annotation.Nullable
  public String getTemplateMetaName() {
    return templateMetaName;
  }

  public void setTemplateMetaName(String templateMetaName) {
    this.templateMetaName = templateMetaName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSummaryDiffChecksInner templateSummaryDiffChecksInner = (TemplateSummaryDiffChecksInner) o;
    return Objects.equals(this.id, templateSummaryDiffChecksInner.id) &&
        Objects.equals(this.kind, templateSummaryDiffChecksInner.kind) &&
        Objects.equals(this._new, templateSummaryDiffChecksInner._new) &&
        Objects.equals(this.old, templateSummaryDiffChecksInner.old) &&
        Objects.equals(this.stateStatus, templateSummaryDiffChecksInner.stateStatus) &&
        Objects.equals(this.templateMetaName, templateSummaryDiffChecksInner.templateMetaName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, kind, _new, old, stateStatus, templateMetaName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSummaryDiffChecksInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    _new: ").append(toIndentedString(_new)).append("\n");
    sb.append("    old: ").append(toIndentedString(old)).append("\n");
    sb.append("    stateStatus: ").append(toIndentedString(stateStatus)).append("\n");
    sb.append("    templateMetaName: ").append(toIndentedString(templateMetaName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("new");
    openapiFields.add("old");
    openapiFields.add("stateStatus");
    openapiFields.add("templateMetaName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateSummaryDiffChecksInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateSummaryDiffChecksInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateSummaryDiffChecksInner is not found in the empty JSON string", TemplateSummaryDiffChecksInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateSummaryDiffChecksInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateSummaryDiffChecksInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        TemplateKind.validateJsonElement(jsonObj.get("kind"));
      }
      // validate the optional field `new`
      if (jsonObj.get("new") != null && !jsonObj.get("new").isJsonNull()) {
        CheckDiscriminator.validateJsonElement(jsonObj.get("new"));
      }
      // validate the optional field `old`
      if (jsonObj.get("old") != null && !jsonObj.get("old").isJsonNull()) {
        CheckDiscriminator.validateJsonElement(jsonObj.get("old"));
      }
      if ((jsonObj.get("stateStatus") != null && !jsonObj.get("stateStatus").isJsonNull()) && !jsonObj.get("stateStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateStatus").toString()));
      }
      if ((jsonObj.get("templateMetaName") != null && !jsonObj.get("templateMetaName").isJsonNull()) && !jsonObj.get("templateMetaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateMetaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateMetaName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateSummaryDiffChecksInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateSummaryDiffChecksInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateSummaryDiffChecksInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateSummaryDiffChecksInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateSummaryDiffChecksInner>() {
           @Override
           public void write(JsonWriter out, TemplateSummaryDiffChecksInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateSummaryDiffChecksInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateSummaryDiffChecksInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateSummaryDiffChecksInner
   * @throws IOException if the JSON string is invalid with respect to TemplateSummaryDiffChecksInner
   */
  public static TemplateSummaryDiffChecksInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateSummaryDiffChecksInner.class);
  }

  /**
   * Convert an instance of TemplateSummaryDiffChecksInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

