/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.PasswordResetBody;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserResponse;
import org.openapitools.client.model.Users;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUsersID
     * @param userID The ID of the user to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUsersIDCall(String userID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUsersIDValidateBeforeCall(String userID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteUsersID(Async)");
        }

        return deleteUsersIDCall(userID, zapTraceSpan, _callback);

    }

    /**
     * Delete a user
     * 
     * @param userID The ID of the user to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUsersID(String userID, String zapTraceSpan) throws ApiException {
        deleteUsersIDWithHttpInfo(userID, zapTraceSpan);
    }

    /**
     * Delete a user
     * 
     * @param userID The ID of the user to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUsersIDWithHttpInfo(String userID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteUsersIDValidateBeforeCall(userID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user (asynchronously)
     * 
     * @param userID The ID of the user to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUsersIDAsync(String userID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUsersIDValidateBeforeCall(userID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlags
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feature flags for the currently authenticated user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlagsCall(String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/flags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlagsValidateBeforeCall(String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        return getFlagsCall(zapTraceSpan, _callback);

    }

    /**
     * Return the feature flags for the currently authenticated user
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feature flags for the currently authenticated user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> getFlags(String zapTraceSpan) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = getFlagsWithHttpInfo(zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Return the feature flags for the currently authenticated user
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feature flags for the currently authenticated user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> getFlagsWithHttpInfo(String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getFlagsValidateBeforeCall(zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the feature flags for the currently authenticated user (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feature flags for the currently authenticated user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlagsAsync(String zapTraceSpan, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlagsValidateBeforeCall(zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMe
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The currently authenticated user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeCall(String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeValidateBeforeCall(String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        return getMeCall(zapTraceSpan, _callback);

    }

    /**
     * Retrieve the currently authenticated user
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The currently authenticated user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse getMe(String zapTraceSpan) throws ApiException {
        ApiResponse<UserResponse> localVarResp = getMeWithHttpInfo(zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve the currently authenticated user
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The currently authenticated user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> getMeWithHttpInfo(String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getMeValidateBeforeCall(zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the currently authenticated user (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The currently authenticated user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeAsync(String zapTraceSpan, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeValidateBeforeCall(zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param after The last resource ID from which to seek from (but not including). This is to be used instead of &#x60;offset&#x60;.  (optional)
     * @param name  (optional)
     * @param id  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(String zapTraceSpan, Integer offset, Integer limit, String after, String name, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(String zapTraceSpan, Integer offset, Integer limit, String after, String name, String id, final ApiCallback _callback) throws ApiException {
        return getUsersCall(zapTraceSpan, offset, limit, after, name, id, _callback);

    }

    /**
     * List all users
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param after The last resource ID from which to seek from (but not including). This is to be used instead of &#x60;offset&#x60;.  (optional)
     * @param name  (optional)
     * @param id  (optional)
     * @return Users
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Users getUsers(String zapTraceSpan, Integer offset, Integer limit, String after, String name, String id) throws ApiException {
        ApiResponse<Users> localVarResp = getUsersWithHttpInfo(zapTraceSpan, offset, limit, after, name, id);
        return localVarResp.getData();
    }

    /**
     * List all users
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param after The last resource ID from which to seek from (but not including). This is to be used instead of &#x60;offset&#x60;.  (optional)
     * @param name  (optional)
     * @param id  (optional)
     * @return ApiResponse&lt;Users&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Users> getUsersWithHttpInfo(String zapTraceSpan, Integer offset, Integer limit, String after, String name, String id) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(zapTraceSpan, offset, limit, after, name, id, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all users (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param after The last resource ID from which to seek from (but not including). This is to be used instead of &#x60;offset&#x60;.  (optional)
     * @param name  (optional)
     * @param id  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(String zapTraceSpan, Integer offset, Integer limit, String after, String name, String id, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(zapTraceSpan, offset, limit, after, name, id, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersID
     * @param userID The user ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersIDCall(String userID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersIDValidateBeforeCall(String userID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling getUsersID(Async)");
        }

        return getUsersIDCall(userID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a user
     * 
     * @param userID The user ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse getUsersID(String userID, String zapTraceSpan) throws ApiException {
        ApiResponse<UserResponse> localVarResp = getUsersIDWithHttpInfo(userID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a user
     * 
     * @param userID The user ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> getUsersIDWithHttpInfo(String userID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getUsersIDValidateBeforeCall(userID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a user (asynchronously)
     * 
     * @param userID The user ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersIDAsync(String userID, String zapTraceSpan, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersIDValidateBeforeCall(userID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchUsersID
     * @param userID The ID of the user to update. (required)
     * @param user User update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchUsersIDCall(String userID, User user, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/users/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchUsersIDValidateBeforeCall(String userID, User user, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling patchUsersID(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling patchUsersID(Async)");
        }

        return patchUsersIDCall(userID, user, zapTraceSpan, _callback);

    }

    /**
     * Update a user
     * 
     * @param userID The ID of the user to update. (required)
     * @param user User update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse patchUsersID(String userID, User user, String zapTraceSpan) throws ApiException {
        ApiResponse<UserResponse> localVarResp = patchUsersIDWithHttpInfo(userID, user, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a user
     * 
     * @param userID The ID of the user to update. (required)
     * @param user User update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> patchUsersIDWithHttpInfo(String userID, User user, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchUsersIDValidateBeforeCall(userID, user, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user (asynchronously)
     * 
     * @param userID The ID of the user to update. (required)
     * @param user User update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchUsersIDAsync(String userID, User user, String zapTraceSpan, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchUsersIDValidateBeforeCall(userID, user, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postUsers
     * @param user User to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersCall(User user, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUsersValidateBeforeCall(User user, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling postUsers(Async)");
        }

        return postUsersCall(user, zapTraceSpan, _callback);

    }

    /**
     * Create a user
     * 
     * @param user User to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse postUsers(User user, String zapTraceSpan) throws ApiException {
        ApiResponse<UserResponse> localVarResp = postUsersWithHttpInfo(user, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a user
     * 
     * @param user User to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> postUsersWithHttpInfo(User user, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postUsersValidateBeforeCall(user, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a user (asynchronously)
     * 
     * @param user User to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersAsync(User user, String zapTraceSpan, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUsersValidateBeforeCall(user, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postUsersIDPassword
     * @param userID The user ID. (required)
     * @param passwordResetBody New password (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password successfully updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful authentication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersIDPasswordCall(String userID, PasswordResetBody passwordResetBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordResetBody;

        // create path and map variables
        String localVarPath = "/users/{userID}/password"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUsersIDPasswordValidateBeforeCall(String userID, PasswordResetBody passwordResetBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling postUsersIDPassword(Async)");
        }

        // verify the required parameter 'passwordResetBody' is set
        if (passwordResetBody == null) {
            throw new ApiException("Missing the required parameter 'passwordResetBody' when calling postUsersIDPassword(Async)");
        }

        return postUsersIDPasswordCall(userID, passwordResetBody, zapTraceSpan, _callback);

    }

    /**
     * Update a password
     * 
     * @param userID The user ID. (required)
     * @param passwordResetBody New password (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password successfully updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful authentication </td><td>  -  </td></tr>
     </table>
     */
    public void postUsersIDPassword(String userID, PasswordResetBody passwordResetBody, String zapTraceSpan) throws ApiException {
        postUsersIDPasswordWithHttpInfo(userID, passwordResetBody, zapTraceSpan);
    }

    /**
     * Update a password
     * 
     * @param userID The user ID. (required)
     * @param passwordResetBody New password (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password successfully updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful authentication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postUsersIDPasswordWithHttpInfo(String userID, PasswordResetBody passwordResetBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postUsersIDPasswordValidateBeforeCall(userID, passwordResetBody, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a password (asynchronously)
     * 
     * @param userID The user ID. (required)
     * @param passwordResetBody New password (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password successfully updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful authentication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersIDPasswordAsync(String userID, PasswordResetBody passwordResetBody, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUsersIDPasswordValidateBeforeCall(userID, passwordResetBody, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putMePassword
     * @param passwordResetBody New password (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password successfully updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful authentication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMePasswordCall(PasswordResetBody passwordResetBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordResetBody;

        // create path and map variables
        String localVarPath = "/me/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putMePasswordValidateBeforeCall(PasswordResetBody passwordResetBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'passwordResetBody' is set
        if (passwordResetBody == null) {
            throw new ApiException("Missing the required parameter 'passwordResetBody' when calling putMePassword(Async)");
        }

        return putMePasswordCall(passwordResetBody, zapTraceSpan, _callback);

    }

    /**
     * Update a password
     * 
     * @param passwordResetBody New password (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password successfully updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful authentication </td><td>  -  </td></tr>
     </table>
     */
    public void putMePassword(PasswordResetBody passwordResetBody, String zapTraceSpan) throws ApiException {
        putMePasswordWithHttpInfo(passwordResetBody, zapTraceSpan);
    }

    /**
     * Update a password
     * 
     * @param passwordResetBody New password (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password successfully updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful authentication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putMePasswordWithHttpInfo(PasswordResetBody passwordResetBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putMePasswordValidateBeforeCall(passwordResetBody, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a password (asynchronously)
     * 
     * @param passwordResetBody New password (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password successfully updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unsuccessful authentication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMePasswordAsync(PasswordResetBody passwordResetBody, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putMePasswordValidateBeforeCall(passwordResetBody, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
