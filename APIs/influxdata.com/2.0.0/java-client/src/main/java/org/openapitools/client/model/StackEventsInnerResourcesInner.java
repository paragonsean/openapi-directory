/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StackEventsInnerResourcesInnerAssociationsInner;
import org.openapitools.client.model.StackEventsInnerResourcesInnerLinks;
import org.openapitools.client.model.TemplateKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StackEventsInnerResourcesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackEventsInnerResourcesInner {
  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  private List<StackEventsInnerResourcesInnerAssociationsInner> associations = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private TemplateKind kind;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private StackEventsInnerResourcesInnerLinks links;

  public static final String SERIALIZED_NAME_RESOURCE_I_D = "resourceID";
  @SerializedName(SERIALIZED_NAME_RESOURCE_I_D)
  private String resourceID;

  public static final String SERIALIZED_NAME_TEMPLATE_META_NAME = "templateMetaName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_META_NAME)
  private String templateMetaName;

  public StackEventsInnerResourcesInner() {
  }

  public StackEventsInnerResourcesInner apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Get apiVersion
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public StackEventsInnerResourcesInner associations(List<StackEventsInnerResourcesInnerAssociationsInner> associations) {
    this.associations = associations;
    return this;
  }

  public StackEventsInnerResourcesInner addAssociationsItem(StackEventsInnerResourcesInnerAssociationsInner associationsItem) {
    if (this.associations == null) {
      this.associations = new ArrayList<>();
    }
    this.associations.add(associationsItem);
    return this;
  }

  /**
   * Get associations
   * @return associations
   */
  @javax.annotation.Nullable
  public List<StackEventsInnerResourcesInnerAssociationsInner> getAssociations() {
    return associations;
  }

  public void setAssociations(List<StackEventsInnerResourcesInnerAssociationsInner> associations) {
    this.associations = associations;
  }


  public StackEventsInnerResourcesInner kind(TemplateKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public TemplateKind getKind() {
    return kind;
  }

  public void setKind(TemplateKind kind) {
    this.kind = kind;
  }


  public StackEventsInnerResourcesInner links(StackEventsInnerResourcesInnerLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public StackEventsInnerResourcesInnerLinks getLinks() {
    return links;
  }

  public void setLinks(StackEventsInnerResourcesInnerLinks links) {
    this.links = links;
  }


  public StackEventsInnerResourcesInner resourceID(String resourceID) {
    this.resourceID = resourceID;
    return this;
  }

  /**
   * Get resourceID
   * @return resourceID
   */
  @javax.annotation.Nullable
  public String getResourceID() {
    return resourceID;
  }

  public void setResourceID(String resourceID) {
    this.resourceID = resourceID;
  }


  public StackEventsInnerResourcesInner templateMetaName(String templateMetaName) {
    this.templateMetaName = templateMetaName;
    return this;
  }

  /**
   * Get templateMetaName
   * @return templateMetaName
   */
  @javax.annotation.Nullable
  public String getTemplateMetaName() {
    return templateMetaName;
  }

  public void setTemplateMetaName(String templateMetaName) {
    this.templateMetaName = templateMetaName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackEventsInnerResourcesInner stackEventsInnerResourcesInner = (StackEventsInnerResourcesInner) o;
    return Objects.equals(this.apiVersion, stackEventsInnerResourcesInner.apiVersion) &&
        Objects.equals(this.associations, stackEventsInnerResourcesInner.associations) &&
        Objects.equals(this.kind, stackEventsInnerResourcesInner.kind) &&
        Objects.equals(this.links, stackEventsInnerResourcesInner.links) &&
        Objects.equals(this.resourceID, stackEventsInnerResourcesInner.resourceID) &&
        Objects.equals(this.templateMetaName, stackEventsInnerResourcesInner.templateMetaName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, associations, kind, links, resourceID, templateMetaName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackEventsInnerResourcesInner {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    resourceID: ").append(toIndentedString(resourceID)).append("\n");
    sb.append("    templateMetaName: ").append(toIndentedString(templateMetaName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiVersion");
    openapiFields.add("associations");
    openapiFields.add("kind");
    openapiFields.add("links");
    openapiFields.add("resourceID");
    openapiFields.add("templateMetaName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackEventsInnerResourcesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackEventsInnerResourcesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackEventsInnerResourcesInner is not found in the empty JSON string", StackEventsInnerResourcesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackEventsInnerResourcesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackEventsInnerResourcesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        JsonArray jsonArrayassociations = jsonObj.getAsJsonArray("associations");
        if (jsonArrayassociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associations` to be an array in the JSON string but got `%s`", jsonObj.get("associations").toString()));
          }

          // validate the optional field `associations` (array)
          for (int i = 0; i < jsonArrayassociations.size(); i++) {
            StackEventsInnerResourcesInnerAssociationsInner.validateJsonElement(jsonArrayassociations.get(i));
          };
        }
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        TemplateKind.validateJsonElement(jsonObj.get("kind"));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        StackEventsInnerResourcesInnerLinks.validateJsonElement(jsonObj.get("links"));
      }
      if ((jsonObj.get("resourceID") != null && !jsonObj.get("resourceID").isJsonNull()) && !jsonObj.get("resourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceID").toString()));
      }
      if ((jsonObj.get("templateMetaName") != null && !jsonObj.get("templateMetaName").isJsonNull()) && !jsonObj.get("templateMetaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateMetaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateMetaName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackEventsInnerResourcesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackEventsInnerResourcesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackEventsInnerResourcesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackEventsInnerResourcesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<StackEventsInnerResourcesInner>() {
           @Override
           public void write(JsonWriter out, StackEventsInnerResourcesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackEventsInnerResourcesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackEventsInnerResourcesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackEventsInnerResourcesInner
   * @throws IOException if the JSON string is invalid with respect to StackEventsInnerResourcesInner
   */
  public static StackEventsInnerResourcesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackEventsInnerResourcesInner.class);
  }

  /**
   * Convert an instance of StackEventsInnerResourcesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

