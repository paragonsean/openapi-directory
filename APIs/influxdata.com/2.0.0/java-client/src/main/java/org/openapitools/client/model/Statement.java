/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BadStatement;
import org.openapitools.client.model.BuiltinStatement;
import org.openapitools.client.model.Expression;
import org.openapitools.client.model.ExpressionStatement;
import org.openapitools.client.model.Identifier;
import org.openapitools.client.model.MemberAssignment;
import org.openapitools.client.model.MemberExpression;
import org.openapitools.client.model.OptionStatement;
import org.openapitools.client.model.ReturnStatement;
import org.openapitools.client.model.TestStatement;
import org.openapitools.client.model.VariableAssignment;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Statement extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Statement.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Statement.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Statement' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BadStatement> adapterBadStatement = gson.getDelegateAdapter(this, TypeToken.get(BadStatement.class));
            final TypeAdapter<VariableAssignment> adapterVariableAssignment = gson.getDelegateAdapter(this, TypeToken.get(VariableAssignment.class));
            final TypeAdapter<MemberAssignment> adapterMemberAssignment = gson.getDelegateAdapter(this, TypeToken.get(MemberAssignment.class));
            final TypeAdapter<ExpressionStatement> adapterExpressionStatement = gson.getDelegateAdapter(this, TypeToken.get(ExpressionStatement.class));
            final TypeAdapter<ReturnStatement> adapterReturnStatement = gson.getDelegateAdapter(this, TypeToken.get(ReturnStatement.class));
            final TypeAdapter<OptionStatement> adapterOptionStatement = gson.getDelegateAdapter(this, TypeToken.get(OptionStatement.class));
            final TypeAdapter<BuiltinStatement> adapterBuiltinStatement = gson.getDelegateAdapter(this, TypeToken.get(BuiltinStatement.class));
            final TypeAdapter<TestStatement> adapterTestStatement = gson.getDelegateAdapter(this, TypeToken.get(TestStatement.class));

            return (TypeAdapter<T>) new TypeAdapter<Statement>() {
                @Override
                public void write(JsonWriter out, Statement value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `BadStatement`
                    if (value.getActualInstance() instanceof BadStatement) {
                        JsonElement element = adapterBadStatement.toJsonTree((BadStatement)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VariableAssignment`
                    if (value.getActualInstance() instanceof VariableAssignment) {
                        JsonElement element = adapterVariableAssignment.toJsonTree((VariableAssignment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MemberAssignment`
                    if (value.getActualInstance() instanceof MemberAssignment) {
                        JsonElement element = adapterMemberAssignment.toJsonTree((MemberAssignment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ExpressionStatement`
                    if (value.getActualInstance() instanceof ExpressionStatement) {
                        JsonElement element = adapterExpressionStatement.toJsonTree((ExpressionStatement)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ReturnStatement`
                    if (value.getActualInstance() instanceof ReturnStatement) {
                        JsonElement element = adapterReturnStatement.toJsonTree((ReturnStatement)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OptionStatement`
                    if (value.getActualInstance() instanceof OptionStatement) {
                        JsonElement element = adapterOptionStatement.toJsonTree((OptionStatement)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BuiltinStatement`
                    if (value.getActualInstance() instanceof BuiltinStatement) {
                        JsonElement element = adapterBuiltinStatement.toJsonTree((BuiltinStatement)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TestStatement`
                    if (value.getActualInstance() instanceof TestStatement) {
                        JsonElement element = adapterTestStatement.toJsonTree((TestStatement)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: BadStatement, BuiltinStatement, ExpressionStatement, MemberAssignment, OptionStatement, ReturnStatement, TestStatement, VariableAssignment");
                }

                @Override
                public Statement read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize BadStatement
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BadStatement.validateJsonElement(jsonElement);
                        actualAdapter = adapterBadStatement;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BadStatement'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BadStatement failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BadStatement'", e);
                    }
                    // deserialize VariableAssignment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VariableAssignment.validateJsonElement(jsonElement);
                        actualAdapter = adapterVariableAssignment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VariableAssignment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VariableAssignment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VariableAssignment'", e);
                    }
                    // deserialize MemberAssignment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MemberAssignment.validateJsonElement(jsonElement);
                        actualAdapter = adapterMemberAssignment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MemberAssignment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MemberAssignment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MemberAssignment'", e);
                    }
                    // deserialize ExpressionStatement
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExpressionStatement.validateJsonElement(jsonElement);
                        actualAdapter = adapterExpressionStatement;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExpressionStatement'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExpressionStatement failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExpressionStatement'", e);
                    }
                    // deserialize ReturnStatement
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ReturnStatement.validateJsonElement(jsonElement);
                        actualAdapter = adapterReturnStatement;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ReturnStatement'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ReturnStatement failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ReturnStatement'", e);
                    }
                    // deserialize OptionStatement
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OptionStatement.validateJsonElement(jsonElement);
                        actualAdapter = adapterOptionStatement;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OptionStatement'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OptionStatement failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OptionStatement'", e);
                    }
                    // deserialize BuiltinStatement
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BuiltinStatement.validateJsonElement(jsonElement);
                        actualAdapter = adapterBuiltinStatement;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BuiltinStatement'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BuiltinStatement failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BuiltinStatement'", e);
                    }
                    // deserialize TestStatement
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TestStatement.validateJsonElement(jsonElement);
                        actualAdapter = adapterTestStatement;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TestStatement'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TestStatement failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TestStatement'", e);
                    }

                    if (match == 1) {
                        Statement ret = new Statement();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for Statement: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Statement() {
        super("oneOf", Boolean.FALSE);
    }

    public Statement(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BadStatement", BadStatement.class);
        schemas.put("VariableAssignment", VariableAssignment.class);
        schemas.put("MemberAssignment", MemberAssignment.class);
        schemas.put("ExpressionStatement", ExpressionStatement.class);
        schemas.put("ReturnStatement", ReturnStatement.class);
        schemas.put("OptionStatement", OptionStatement.class);
        schemas.put("BuiltinStatement", BuiltinStatement.class);
        schemas.put("TestStatement", TestStatement.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Statement.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * BadStatement, BuiltinStatement, ExpressionStatement, MemberAssignment, OptionStatement, ReturnStatement, TestStatement, VariableAssignment
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof BadStatement) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VariableAssignment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MemberAssignment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExpressionStatement) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ReturnStatement) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OptionStatement) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BuiltinStatement) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TestStatement) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BadStatement, BuiltinStatement, ExpressionStatement, MemberAssignment, OptionStatement, ReturnStatement, TestStatement, VariableAssignment");
    }

    /**
     * Get the actual instance, which can be the following:
     * BadStatement, BuiltinStatement, ExpressionStatement, MemberAssignment, OptionStatement, ReturnStatement, TestStatement, VariableAssignment
     *
     * @return The actual instance (BadStatement, BuiltinStatement, ExpressionStatement, MemberAssignment, OptionStatement, ReturnStatement, TestStatement, VariableAssignment)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BadStatement`. If the actual instance is not `BadStatement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BadStatement`
     * @throws ClassCastException if the instance is not `BadStatement`
     */
    public BadStatement getBadStatement() throws ClassCastException {
        return (BadStatement)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VariableAssignment`. If the actual instance is not `VariableAssignment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VariableAssignment`
     * @throws ClassCastException if the instance is not `VariableAssignment`
     */
    public VariableAssignment getVariableAssignment() throws ClassCastException {
        return (VariableAssignment)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MemberAssignment`. If the actual instance is not `MemberAssignment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MemberAssignment`
     * @throws ClassCastException if the instance is not `MemberAssignment`
     */
    public MemberAssignment getMemberAssignment() throws ClassCastException {
        return (MemberAssignment)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ExpressionStatement`. If the actual instance is not `ExpressionStatement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExpressionStatement`
     * @throws ClassCastException if the instance is not `ExpressionStatement`
     */
    public ExpressionStatement getExpressionStatement() throws ClassCastException {
        return (ExpressionStatement)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ReturnStatement`. If the actual instance is not `ReturnStatement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReturnStatement`
     * @throws ClassCastException if the instance is not `ReturnStatement`
     */
    public ReturnStatement getReturnStatement() throws ClassCastException {
        return (ReturnStatement)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OptionStatement`. If the actual instance is not `OptionStatement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OptionStatement`
     * @throws ClassCastException if the instance is not `OptionStatement`
     */
    public OptionStatement getOptionStatement() throws ClassCastException {
        return (OptionStatement)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BuiltinStatement`. If the actual instance is not `BuiltinStatement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BuiltinStatement`
     * @throws ClassCastException if the instance is not `BuiltinStatement`
     */
    public BuiltinStatement getBuiltinStatement() throws ClassCastException {
        return (BuiltinStatement)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TestStatement`. If the actual instance is not `TestStatement`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TestStatement`
     * @throws ClassCastException if the instance is not `TestStatement`
     */
    public TestStatement getTestStatement() throws ClassCastException {
        return (TestStatement)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Statement
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with BadStatement
        try {
            BadStatement.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BadStatement failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VariableAssignment
        try {
            VariableAssignment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VariableAssignment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MemberAssignment
        try {
            MemberAssignment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MemberAssignment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ExpressionStatement
        try {
            ExpressionStatement.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ExpressionStatement failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ReturnStatement
        try {
            ReturnStatement.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ReturnStatement failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OptionStatement
        try {
            OptionStatement.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OptionStatement failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BuiltinStatement
        try {
            BuiltinStatement.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BuiltinStatement failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TestStatement
        try {
            TestStatement.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TestStatement failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for Statement with oneOf schemas: BadStatement, BuiltinStatement, ExpressionStatement, MemberAssignment, OptionStatement, ReturnStatement, TestStatement, VariableAssignment. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of Statement given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Statement
     * @throws IOException if the JSON string is invalid with respect to Statement
     */
    public static Statement fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Statement.class);
    }

    /**
     * Convert an instance of Statement to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

