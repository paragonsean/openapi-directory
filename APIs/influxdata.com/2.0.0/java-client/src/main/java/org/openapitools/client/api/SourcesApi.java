/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Buckets;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.HealthCheck;
import org.openapitools.client.model.Source;
import org.openapitools.client.model.Sources;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteSourcesID
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSourcesIDCall(String sourceID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sources/{sourceID}"
            .replace("{" + "sourceID" + "}", localVarApiClient.escapeString(sourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSourcesIDValidateBeforeCall(String sourceID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceID' is set
        if (sourceID == null) {
            throw new ApiException("Missing the required parameter 'sourceID' when calling deleteSourcesID(Async)");
        }

        return deleteSourcesIDCall(sourceID, zapTraceSpan, _callback);

    }

    /**
     * Delete a source
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSourcesID(String sourceID, String zapTraceSpan) throws ApiException {
        deleteSourcesIDWithHttpInfo(sourceID, zapTraceSpan);
    }

    /**
     * Delete a source
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSourcesIDWithHttpInfo(String sourceID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteSourcesIDValidateBeforeCall(sourceID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a source (asynchronously)
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSourcesIDAsync(String sourceID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSourcesIDValidateBeforeCall(sourceID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSources
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of sources </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourcesCall(String zapTraceSpan, String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourcesValidateBeforeCall(String zapTraceSpan, String org, final ApiCallback _callback) throws ApiException {
        return getSourcesCall(zapTraceSpan, org, _callback);

    }

    /**
     * List all sources
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @return Sources
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of sources </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Sources getSources(String zapTraceSpan, String org) throws ApiException {
        ApiResponse<Sources> localVarResp = getSourcesWithHttpInfo(zapTraceSpan, org);
        return localVarResp.getData();
    }

    /**
     * List all sources
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @return ApiResponse&lt;Sources&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of sources </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sources> getSourcesWithHttpInfo(String zapTraceSpan, String org) throws ApiException {
        okhttp3.Call localVarCall = getSourcesValidateBeforeCall(zapTraceSpan, org, null);
        Type localVarReturnType = new TypeToken<Sources>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all sources (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of sources </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourcesAsync(String zapTraceSpan, String org, final ApiCallback<Sources> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourcesValidateBeforeCall(zapTraceSpan, org, _callback);
        Type localVarReturnType = new TypeToken<Sources>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourcesID
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourcesIDCall(String sourceID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sources/{sourceID}"
            .replace("{" + "sourceID" + "}", localVarApiClient.escapeString(sourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourcesIDValidateBeforeCall(String sourceID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceID' is set
        if (sourceID == null) {
            throw new ApiException("Missing the required parameter 'sourceID' when calling getSourcesID(Async)");
        }

        return getSourcesIDCall(sourceID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a source
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Source
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Source getSourcesID(String sourceID, String zapTraceSpan) throws ApiException {
        ApiResponse<Source> localVarResp = getSourcesIDWithHttpInfo(sourceID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a source
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Source&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Source> getSourcesIDWithHttpInfo(String sourceID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getSourcesIDValidateBeforeCall(sourceID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a source (asynchronously)
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourcesIDAsync(String sourceID, String zapTraceSpan, final ApiCallback<Source> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourcesIDValidateBeforeCall(sourceID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourcesIDBuckets
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourcesIDBucketsCall(String sourceID, String zapTraceSpan, String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sources/{sourceID}/buckets"
            .replace("{" + "sourceID" + "}", localVarApiClient.escapeString(sourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourcesIDBucketsValidateBeforeCall(String sourceID, String zapTraceSpan, String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceID' is set
        if (sourceID == null) {
            throw new ApiException("Missing the required parameter 'sourceID' when calling getSourcesIDBuckets(Async)");
        }

        return getSourcesIDBucketsCall(sourceID, zapTraceSpan, org, _callback);

    }

    /**
     * Get buckets in a source
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @return Buckets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Buckets getSourcesIDBuckets(String sourceID, String zapTraceSpan, String org) throws ApiException {
        ApiResponse<Buckets> localVarResp = getSourcesIDBucketsWithHttpInfo(sourceID, zapTraceSpan, org);
        return localVarResp.getData();
    }

    /**
     * Get buckets in a source
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @return ApiResponse&lt;Buckets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Buckets> getSourcesIDBucketsWithHttpInfo(String sourceID, String zapTraceSpan, String org) throws ApiException {
        okhttp3.Call localVarCall = getSourcesIDBucketsValidateBeforeCall(sourceID, zapTraceSpan, org, null);
        Type localVarReturnType = new TypeToken<Buckets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get buckets in a source (asynchronously)
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourcesIDBucketsAsync(String sourceID, String zapTraceSpan, String org, final ApiCallback<Buckets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourcesIDBucketsValidateBeforeCall(sourceID, zapTraceSpan, org, _callback);
        Type localVarReturnType = new TypeToken<Buckets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSourcesIDHealth
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The source is healthy </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The source is not healthy </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourcesIDHealthCall(String sourceID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sources/{sourceID}/health"
            .replace("{" + "sourceID" + "}", localVarApiClient.escapeString(sourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourcesIDHealthValidateBeforeCall(String sourceID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceID' is set
        if (sourceID == null) {
            throw new ApiException("Missing the required parameter 'sourceID' when calling getSourcesIDHealth(Async)");
        }

        return getSourcesIDHealthCall(sourceID, zapTraceSpan, _callback);

    }

    /**
     * Get the health of a source
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return HealthCheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The source is healthy </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The source is not healthy </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public HealthCheck getSourcesIDHealth(String sourceID, String zapTraceSpan) throws ApiException {
        ApiResponse<HealthCheck> localVarResp = getSourcesIDHealthWithHttpInfo(sourceID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Get the health of a source
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;HealthCheck&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The source is healthy </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The source is not healthy </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HealthCheck> getSourcesIDHealthWithHttpInfo(String sourceID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getSourcesIDHealthValidateBeforeCall(sourceID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<HealthCheck>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the health of a source (asynchronously)
     * 
     * @param sourceID The source ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The source is healthy </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The source is not healthy </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSourcesIDHealthAsync(String sourceID, String zapTraceSpan, final ApiCallback<HealthCheck> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourcesIDHealthValidateBeforeCall(sourceID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<HealthCheck>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchSourcesID
     * @param sourceID The source ID. (required)
     * @param source Source update (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchSourcesIDCall(String sourceID, Source source, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = source;

        // create path and map variables
        String localVarPath = "/sources/{sourceID}"
            .replace("{" + "sourceID" + "}", localVarApiClient.escapeString(sourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchSourcesIDValidateBeforeCall(String sourceID, Source source, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceID' is set
        if (sourceID == null) {
            throw new ApiException("Missing the required parameter 'sourceID' when calling patchSourcesID(Async)");
        }

        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling patchSourcesID(Async)");
        }

        return patchSourcesIDCall(sourceID, source, zapTraceSpan, _callback);

    }

    /**
     * Update a Source
     * 
     * @param sourceID The source ID. (required)
     * @param source Source update (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Source
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Source patchSourcesID(String sourceID, Source source, String zapTraceSpan) throws ApiException {
        ApiResponse<Source> localVarResp = patchSourcesIDWithHttpInfo(sourceID, source, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a Source
     * 
     * @param sourceID The source ID. (required)
     * @param source Source update (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Source&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Source> patchSourcesIDWithHttpInfo(String sourceID, Source source, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchSourcesIDValidateBeforeCall(sourceID, source, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Source (asynchronously)
     * 
     * @param sourceID The source ID. (required)
     * @param source Source update (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created Source </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchSourcesIDAsync(String sourceID, Source source, String zapTraceSpan, final ApiCallback<Source> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchSourcesIDValidateBeforeCall(sourceID, source, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSources
     * @param source Source to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Source </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSourcesCall(Source source, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = source;

        // create path and map variables
        String localVarPath = "/sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSourcesValidateBeforeCall(Source source, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling postSources(Async)");
        }

        return postSourcesCall(source, zapTraceSpan, _callback);

    }

    /**
     * Create a source
     * 
     * @param source Source to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Source
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Source </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Source postSources(Source source, String zapTraceSpan) throws ApiException {
        ApiResponse<Source> localVarResp = postSourcesWithHttpInfo(source, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a source
     * 
     * @param source Source to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Source&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Source </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Source> postSourcesWithHttpInfo(Source source, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postSourcesValidateBeforeCall(source, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a source (asynchronously)
     * 
     * @param source Source to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Source </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSourcesAsync(Source source, String zapTraceSpan, final ApiCallback<Source> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSourcesValidateBeforeCall(source, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
