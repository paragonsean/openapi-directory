/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Axes;
import org.openapitools.client.model.DashboardColor;
import org.openapitools.client.model.DashboardQuery;
import org.openapitools.client.model.StaticLegend;
import org.openapitools.client.model.XYGeom;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * XYViewProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class XYViewProperties {
  public static final String SERIALIZED_NAME_AXES = "axes";
  @SerializedName(SERIALIZED_NAME_AXES)
  private Axes axes;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<DashboardColor> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERATE_X_AXIS_TICKS = "generateXAxisTicks";
  @SerializedName(SERIALIZED_NAME_GENERATE_X_AXIS_TICKS)
  private List<String> generateXAxisTicks = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERATE_Y_AXIS_TICKS = "generateYAxisTicks";
  @SerializedName(SERIALIZED_NAME_GENERATE_Y_AXIS_TICKS)
  private List<String> generateYAxisTicks = new ArrayList<>();

  public static final String SERIALIZED_NAME_GEOM = "geom";
  @SerializedName(SERIALIZED_NAME_GEOM)
  private XYGeom geom;

  /**
   * Gets or Sets hoverDimension
   */
  @JsonAdapter(HoverDimensionEnum.Adapter.class)
  public enum HoverDimensionEnum {
    AUTO("auto"),
    
    X("x"),
    
    Y("y"),
    
    XY("xy");

    private String value;

    HoverDimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HoverDimensionEnum fromValue(String value) {
      for (HoverDimensionEnum b : HoverDimensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HoverDimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HoverDimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HoverDimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HoverDimensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HoverDimensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOVER_DIMENSION = "hoverDimension";
  @SerializedName(SERIALIZED_NAME_HOVER_DIMENSION)
  private HoverDimensionEnum hoverDimension;

  public static final String SERIALIZED_NAME_LEGEND_COLORIZE_ROWS = "legendColorizeRows";
  @SerializedName(SERIALIZED_NAME_LEGEND_COLORIZE_ROWS)
  private Boolean legendColorizeRows;

  public static final String SERIALIZED_NAME_LEGEND_HIDE = "legendHide";
  @SerializedName(SERIALIZED_NAME_LEGEND_HIDE)
  private Boolean legendHide;

  public static final String SERIALIZED_NAME_LEGEND_OPACITY = "legendOpacity";
  @SerializedName(SERIALIZED_NAME_LEGEND_OPACITY)
  private Float legendOpacity;

  public static final String SERIALIZED_NAME_LEGEND_ORIENTATION_THRESHOLD = "legendOrientationThreshold";
  @SerializedName(SERIALIZED_NAME_LEGEND_ORIENTATION_THRESHOLD)
  private Integer legendOrientationThreshold;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  /**
   * Gets or Sets position
   */
  @JsonAdapter(PositionEnum.Adapter.class)
  public enum PositionEnum {
    OVERLAID("overlaid"),
    
    STACKED("stacked");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionEnum fromValue(String value) {
      for (PositionEnum b : PositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private PositionEnum position;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<DashboardQuery> queries = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHADE_BELOW = "shadeBelow";
  @SerializedName(SERIALIZED_NAME_SHADE_BELOW)
  private Boolean shadeBelow;

  /**
   * Gets or Sets shape
   */
  @JsonAdapter(ShapeEnum.Adapter.class)
  public enum ShapeEnum {
    CHRONOGRAF_V2("chronograf-v2");

    private String value;

    ShapeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeEnum fromValue(String value) {
      for (ShapeEnum b : ShapeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShapeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShapeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShapeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private ShapeEnum shape;

  public static final String SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY = "showNoteWhenEmpty";
  @SerializedName(SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY)
  private Boolean showNoteWhenEmpty;

  public static final String SERIALIZED_NAME_STATIC_LEGEND = "staticLegend";
  @SerializedName(SERIALIZED_NAME_STATIC_LEGEND)
  private StaticLegend staticLegend;

  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private String timeFormat;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    XY("xy");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_X_COLUMN = "xColumn";
  @SerializedName(SERIALIZED_NAME_X_COLUMN)
  private String xColumn;

  public static final String SERIALIZED_NAME_X_TICK_START = "xTickStart";
  @SerializedName(SERIALIZED_NAME_X_TICK_START)
  private Float xTickStart;

  public static final String SERIALIZED_NAME_X_TICK_STEP = "xTickStep";
  @SerializedName(SERIALIZED_NAME_X_TICK_STEP)
  private Float xTickStep;

  public static final String SERIALIZED_NAME_X_TOTAL_TICKS = "xTotalTicks";
  @SerializedName(SERIALIZED_NAME_X_TOTAL_TICKS)
  private Integer xTotalTicks;

  public static final String SERIALIZED_NAME_Y_COLUMN = "yColumn";
  @SerializedName(SERIALIZED_NAME_Y_COLUMN)
  private String yColumn;

  public static final String SERIALIZED_NAME_Y_TICK_START = "yTickStart";
  @SerializedName(SERIALIZED_NAME_Y_TICK_START)
  private Float yTickStart;

  public static final String SERIALIZED_NAME_Y_TICK_STEP = "yTickStep";
  @SerializedName(SERIALIZED_NAME_Y_TICK_STEP)
  private Float yTickStep;

  public static final String SERIALIZED_NAME_Y_TOTAL_TICKS = "yTotalTicks";
  @SerializedName(SERIALIZED_NAME_Y_TOTAL_TICKS)
  private Integer yTotalTicks;

  public XYViewProperties() {
  }

  public XYViewProperties axes(Axes axes) {
    this.axes = axes;
    return this;
  }

  /**
   * Get axes
   * @return axes
   */
  @javax.annotation.Nonnull
  public Axes getAxes() {
    return axes;
  }

  public void setAxes(Axes axes) {
    this.axes = axes;
  }


  public XYViewProperties colors(List<DashboardColor> colors) {
    this.colors = colors;
    return this;
  }

  public XYViewProperties addColorsItem(DashboardColor colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * Colors define color encoding of data into a visualization
   * @return colors
   */
  @javax.annotation.Nonnull
  public List<DashboardColor> getColors() {
    return colors;
  }

  public void setColors(List<DashboardColor> colors) {
    this.colors = colors;
  }


  public XYViewProperties generateXAxisTicks(List<String> generateXAxisTicks) {
    this.generateXAxisTicks = generateXAxisTicks;
    return this;
  }

  public XYViewProperties addGenerateXAxisTicksItem(String generateXAxisTicksItem) {
    if (this.generateXAxisTicks == null) {
      this.generateXAxisTicks = new ArrayList<>();
    }
    this.generateXAxisTicks.add(generateXAxisTicksItem);
    return this;
  }

  /**
   * Get generateXAxisTicks
   * @return generateXAxisTicks
   */
  @javax.annotation.Nullable
  public List<String> getGenerateXAxisTicks() {
    return generateXAxisTicks;
  }

  public void setGenerateXAxisTicks(List<String> generateXAxisTicks) {
    this.generateXAxisTicks = generateXAxisTicks;
  }


  public XYViewProperties generateYAxisTicks(List<String> generateYAxisTicks) {
    this.generateYAxisTicks = generateYAxisTicks;
    return this;
  }

  public XYViewProperties addGenerateYAxisTicksItem(String generateYAxisTicksItem) {
    if (this.generateYAxisTicks == null) {
      this.generateYAxisTicks = new ArrayList<>();
    }
    this.generateYAxisTicks.add(generateYAxisTicksItem);
    return this;
  }

  /**
   * Get generateYAxisTicks
   * @return generateYAxisTicks
   */
  @javax.annotation.Nullable
  public List<String> getGenerateYAxisTicks() {
    return generateYAxisTicks;
  }

  public void setGenerateYAxisTicks(List<String> generateYAxisTicks) {
    this.generateYAxisTicks = generateYAxisTicks;
  }


  public XYViewProperties geom(XYGeom geom) {
    this.geom = geom;
    return this;
  }

  /**
   * Get geom
   * @return geom
   */
  @javax.annotation.Nonnull
  public XYGeom getGeom() {
    return geom;
  }

  public void setGeom(XYGeom geom) {
    this.geom = geom;
  }


  public XYViewProperties hoverDimension(HoverDimensionEnum hoverDimension) {
    this.hoverDimension = hoverDimension;
    return this;
  }

  /**
   * Get hoverDimension
   * @return hoverDimension
   */
  @javax.annotation.Nullable
  public HoverDimensionEnum getHoverDimension() {
    return hoverDimension;
  }

  public void setHoverDimension(HoverDimensionEnum hoverDimension) {
    this.hoverDimension = hoverDimension;
  }


  public XYViewProperties legendColorizeRows(Boolean legendColorizeRows) {
    this.legendColorizeRows = legendColorizeRows;
    return this;
  }

  /**
   * Get legendColorizeRows
   * @return legendColorizeRows
   */
  @javax.annotation.Nullable
  public Boolean getLegendColorizeRows() {
    return legendColorizeRows;
  }

  public void setLegendColorizeRows(Boolean legendColorizeRows) {
    this.legendColorizeRows = legendColorizeRows;
  }


  public XYViewProperties legendHide(Boolean legendHide) {
    this.legendHide = legendHide;
    return this;
  }

  /**
   * Get legendHide
   * @return legendHide
   */
  @javax.annotation.Nullable
  public Boolean getLegendHide() {
    return legendHide;
  }

  public void setLegendHide(Boolean legendHide) {
    this.legendHide = legendHide;
  }


  public XYViewProperties legendOpacity(Float legendOpacity) {
    this.legendOpacity = legendOpacity;
    return this;
  }

  /**
   * Get legendOpacity
   * @return legendOpacity
   */
  @javax.annotation.Nullable
  public Float getLegendOpacity() {
    return legendOpacity;
  }

  public void setLegendOpacity(Float legendOpacity) {
    this.legendOpacity = legendOpacity;
  }


  public XYViewProperties legendOrientationThreshold(Integer legendOrientationThreshold) {
    this.legendOrientationThreshold = legendOrientationThreshold;
    return this;
  }

  /**
   * Get legendOrientationThreshold
   * @return legendOrientationThreshold
   */
  @javax.annotation.Nullable
  public Integer getLegendOrientationThreshold() {
    return legendOrientationThreshold;
  }

  public void setLegendOrientationThreshold(Integer legendOrientationThreshold) {
    this.legendOrientationThreshold = legendOrientationThreshold;
  }


  public XYViewProperties note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nonnull
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public XYViewProperties position(PositionEnum position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nonnull
  public PositionEnum getPosition() {
    return position;
  }

  public void setPosition(PositionEnum position) {
    this.position = position;
  }


  public XYViewProperties queries(List<DashboardQuery> queries) {
    this.queries = queries;
    return this;
  }

  public XYViewProperties addQueriesItem(DashboardQuery queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

  /**
   * Get queries
   * @return queries
   */
  @javax.annotation.Nonnull
  public List<DashboardQuery> getQueries() {
    return queries;
  }

  public void setQueries(List<DashboardQuery> queries) {
    this.queries = queries;
  }


  public XYViewProperties shadeBelow(Boolean shadeBelow) {
    this.shadeBelow = shadeBelow;
    return this;
  }

  /**
   * Get shadeBelow
   * @return shadeBelow
   */
  @javax.annotation.Nullable
  public Boolean getShadeBelow() {
    return shadeBelow;
  }

  public void setShadeBelow(Boolean shadeBelow) {
    this.shadeBelow = shadeBelow;
  }


  public XYViewProperties shape(ShapeEnum shape) {
    this.shape = shape;
    return this;
  }

  /**
   * Get shape
   * @return shape
   */
  @javax.annotation.Nonnull
  public ShapeEnum getShape() {
    return shape;
  }

  public void setShape(ShapeEnum shape) {
    this.shape = shape;
  }


  public XYViewProperties showNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
    return this;
  }

  /**
   * If true, will display note when empty
   * @return showNoteWhenEmpty
   */
  @javax.annotation.Nonnull
  public Boolean getShowNoteWhenEmpty() {
    return showNoteWhenEmpty;
  }

  public void setShowNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
  }


  public XYViewProperties staticLegend(StaticLegend staticLegend) {
    this.staticLegend = staticLegend;
    return this;
  }

  /**
   * Get staticLegend
   * @return staticLegend
   */
  @javax.annotation.Nullable
  public StaticLegend getStaticLegend() {
    return staticLegend;
  }

  public void setStaticLegend(StaticLegend staticLegend) {
    this.staticLegend = staticLegend;
  }


  public XYViewProperties timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

  /**
   * Get timeFormat
   * @return timeFormat
   */
  @javax.annotation.Nullable
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }


  public XYViewProperties type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public XYViewProperties xColumn(String xColumn) {
    this.xColumn = xColumn;
    return this;
  }

  /**
   * Get xColumn
   * @return xColumn
   */
  @javax.annotation.Nullable
  public String getxColumn() {
    return xColumn;
  }

  public void setxColumn(String xColumn) {
    this.xColumn = xColumn;
  }


  public XYViewProperties xTickStart(Float xTickStart) {
    this.xTickStart = xTickStart;
    return this;
  }

  /**
   * Get xTickStart
   * @return xTickStart
   */
  @javax.annotation.Nullable
  public Float getxTickStart() {
    return xTickStart;
  }

  public void setxTickStart(Float xTickStart) {
    this.xTickStart = xTickStart;
  }


  public XYViewProperties xTickStep(Float xTickStep) {
    this.xTickStep = xTickStep;
    return this;
  }

  /**
   * Get xTickStep
   * @return xTickStep
   */
  @javax.annotation.Nullable
  public Float getxTickStep() {
    return xTickStep;
  }

  public void setxTickStep(Float xTickStep) {
    this.xTickStep = xTickStep;
  }


  public XYViewProperties xTotalTicks(Integer xTotalTicks) {
    this.xTotalTicks = xTotalTicks;
    return this;
  }

  /**
   * Get xTotalTicks
   * @return xTotalTicks
   */
  @javax.annotation.Nullable
  public Integer getxTotalTicks() {
    return xTotalTicks;
  }

  public void setxTotalTicks(Integer xTotalTicks) {
    this.xTotalTicks = xTotalTicks;
  }


  public XYViewProperties yColumn(String yColumn) {
    this.yColumn = yColumn;
    return this;
  }

  /**
   * Get yColumn
   * @return yColumn
   */
  @javax.annotation.Nullable
  public String getyColumn() {
    return yColumn;
  }

  public void setyColumn(String yColumn) {
    this.yColumn = yColumn;
  }


  public XYViewProperties yTickStart(Float yTickStart) {
    this.yTickStart = yTickStart;
    return this;
  }

  /**
   * Get yTickStart
   * @return yTickStart
   */
  @javax.annotation.Nullable
  public Float getyTickStart() {
    return yTickStart;
  }

  public void setyTickStart(Float yTickStart) {
    this.yTickStart = yTickStart;
  }


  public XYViewProperties yTickStep(Float yTickStep) {
    this.yTickStep = yTickStep;
    return this;
  }

  /**
   * Get yTickStep
   * @return yTickStep
   */
  @javax.annotation.Nullable
  public Float getyTickStep() {
    return yTickStep;
  }

  public void setyTickStep(Float yTickStep) {
    this.yTickStep = yTickStep;
  }


  public XYViewProperties yTotalTicks(Integer yTotalTicks) {
    this.yTotalTicks = yTotalTicks;
    return this;
  }

  /**
   * Get yTotalTicks
   * @return yTotalTicks
   */
  @javax.annotation.Nullable
  public Integer getyTotalTicks() {
    return yTotalTicks;
  }

  public void setyTotalTicks(Integer yTotalTicks) {
    this.yTotalTicks = yTotalTicks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XYViewProperties xyViewProperties = (XYViewProperties) o;
    return Objects.equals(this.axes, xyViewProperties.axes) &&
        Objects.equals(this.colors, xyViewProperties.colors) &&
        Objects.equals(this.generateXAxisTicks, xyViewProperties.generateXAxisTicks) &&
        Objects.equals(this.generateYAxisTicks, xyViewProperties.generateYAxisTicks) &&
        Objects.equals(this.geom, xyViewProperties.geom) &&
        Objects.equals(this.hoverDimension, xyViewProperties.hoverDimension) &&
        Objects.equals(this.legendColorizeRows, xyViewProperties.legendColorizeRows) &&
        Objects.equals(this.legendHide, xyViewProperties.legendHide) &&
        Objects.equals(this.legendOpacity, xyViewProperties.legendOpacity) &&
        Objects.equals(this.legendOrientationThreshold, xyViewProperties.legendOrientationThreshold) &&
        Objects.equals(this.note, xyViewProperties.note) &&
        Objects.equals(this.position, xyViewProperties.position) &&
        Objects.equals(this.queries, xyViewProperties.queries) &&
        Objects.equals(this.shadeBelow, xyViewProperties.shadeBelow) &&
        Objects.equals(this.shape, xyViewProperties.shape) &&
        Objects.equals(this.showNoteWhenEmpty, xyViewProperties.showNoteWhenEmpty) &&
        Objects.equals(this.staticLegend, xyViewProperties.staticLegend) &&
        Objects.equals(this.timeFormat, xyViewProperties.timeFormat) &&
        Objects.equals(this.type, xyViewProperties.type) &&
        Objects.equals(this.xColumn, xyViewProperties.xColumn) &&
        Objects.equals(this.xTickStart, xyViewProperties.xTickStart) &&
        Objects.equals(this.xTickStep, xyViewProperties.xTickStep) &&
        Objects.equals(this.xTotalTicks, xyViewProperties.xTotalTicks) &&
        Objects.equals(this.yColumn, xyViewProperties.yColumn) &&
        Objects.equals(this.yTickStart, xyViewProperties.yTickStart) &&
        Objects.equals(this.yTickStep, xyViewProperties.yTickStep) &&
        Objects.equals(this.yTotalTicks, xyViewProperties.yTotalTicks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(axes, colors, generateXAxisTicks, generateYAxisTicks, geom, hoverDimension, legendColorizeRows, legendHide, legendOpacity, legendOrientationThreshold, note, position, queries, shadeBelow, shape, showNoteWhenEmpty, staticLegend, timeFormat, type, xColumn, xTickStart, xTickStep, xTotalTicks, yColumn, yTickStart, yTickStep, yTotalTicks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XYViewProperties {\n");
    sb.append("    axes: ").append(toIndentedString(axes)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    generateXAxisTicks: ").append(toIndentedString(generateXAxisTicks)).append("\n");
    sb.append("    generateYAxisTicks: ").append(toIndentedString(generateYAxisTicks)).append("\n");
    sb.append("    geom: ").append(toIndentedString(geom)).append("\n");
    sb.append("    hoverDimension: ").append(toIndentedString(hoverDimension)).append("\n");
    sb.append("    legendColorizeRows: ").append(toIndentedString(legendColorizeRows)).append("\n");
    sb.append("    legendHide: ").append(toIndentedString(legendHide)).append("\n");
    sb.append("    legendOpacity: ").append(toIndentedString(legendOpacity)).append("\n");
    sb.append("    legendOrientationThreshold: ").append(toIndentedString(legendOrientationThreshold)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    shadeBelow: ").append(toIndentedString(shadeBelow)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    showNoteWhenEmpty: ").append(toIndentedString(showNoteWhenEmpty)).append("\n");
    sb.append("    staticLegend: ").append(toIndentedString(staticLegend)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xColumn: ").append(toIndentedString(xColumn)).append("\n");
    sb.append("    xTickStart: ").append(toIndentedString(xTickStart)).append("\n");
    sb.append("    xTickStep: ").append(toIndentedString(xTickStep)).append("\n");
    sb.append("    xTotalTicks: ").append(toIndentedString(xTotalTicks)).append("\n");
    sb.append("    yColumn: ").append(toIndentedString(yColumn)).append("\n");
    sb.append("    yTickStart: ").append(toIndentedString(yTickStart)).append("\n");
    sb.append("    yTickStep: ").append(toIndentedString(yTickStep)).append("\n");
    sb.append("    yTotalTicks: ").append(toIndentedString(yTotalTicks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("axes");
    openapiFields.add("colors");
    openapiFields.add("generateXAxisTicks");
    openapiFields.add("generateYAxisTicks");
    openapiFields.add("geom");
    openapiFields.add("hoverDimension");
    openapiFields.add("legendColorizeRows");
    openapiFields.add("legendHide");
    openapiFields.add("legendOpacity");
    openapiFields.add("legendOrientationThreshold");
    openapiFields.add("note");
    openapiFields.add("position");
    openapiFields.add("queries");
    openapiFields.add("shadeBelow");
    openapiFields.add("shape");
    openapiFields.add("showNoteWhenEmpty");
    openapiFields.add("staticLegend");
    openapiFields.add("timeFormat");
    openapiFields.add("type");
    openapiFields.add("xColumn");
    openapiFields.add("xTickStart");
    openapiFields.add("xTickStep");
    openapiFields.add("xTotalTicks");
    openapiFields.add("yColumn");
    openapiFields.add("yTickStart");
    openapiFields.add("yTickStep");
    openapiFields.add("yTotalTicks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("axes");
    openapiRequiredFields.add("colors");
    openapiRequiredFields.add("geom");
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("queries");
    openapiRequiredFields.add("shape");
    openapiRequiredFields.add("showNoteWhenEmpty");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to XYViewProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!XYViewProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in XYViewProperties is not found in the empty JSON string", XYViewProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!XYViewProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `XYViewProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : XYViewProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `axes`
      Axes.validateJsonElement(jsonObj.get("axes"));
      // ensure the json data is an array
      if (!jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }

      JsonArray jsonArraycolors = jsonObj.getAsJsonArray("colors");
      // validate the required field `colors` (array)
      for (int i = 0; i < jsonArraycolors.size(); i++) {
        DashboardColor.validateJsonElement(jsonArraycolors.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("generateXAxisTicks") != null && !jsonObj.get("generateXAxisTicks").isJsonNull() && !jsonObj.get("generateXAxisTicks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `generateXAxisTicks` to be an array in the JSON string but got `%s`", jsonObj.get("generateXAxisTicks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("generateYAxisTicks") != null && !jsonObj.get("generateYAxisTicks").isJsonNull() && !jsonObj.get("generateYAxisTicks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `generateYAxisTicks` to be an array in the JSON string but got `%s`", jsonObj.get("generateYAxisTicks").toString()));
      }
      // validate the required field `geom`
      XYGeom.validateJsonElement(jsonObj.get("geom"));
      if ((jsonObj.get("hoverDimension") != null && !jsonObj.get("hoverDimension").isJsonNull()) && !jsonObj.get("hoverDimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hoverDimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hoverDimension").toString()));
      }
      // validate the optional field `hoverDimension`
      if (jsonObj.get("hoverDimension") != null && !jsonObj.get("hoverDimension").isJsonNull()) {
        HoverDimensionEnum.validateJsonElement(jsonObj.get("hoverDimension"));
      }
      if (!jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      // validate the required field `position`
      PositionEnum.validateJsonElement(jsonObj.get("position"));
      // ensure the json data is an array
      if (!jsonObj.get("queries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queries` to be an array in the JSON string but got `%s`", jsonObj.get("queries").toString()));
      }

      JsonArray jsonArrayqueries = jsonObj.getAsJsonArray("queries");
      // validate the required field `queries` (array)
      for (int i = 0; i < jsonArrayqueries.size(); i++) {
        DashboardQuery.validateJsonElement(jsonArrayqueries.get(i));
      };
      if (!jsonObj.get("shape").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shape` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shape").toString()));
      }
      // validate the required field `shape`
      ShapeEnum.validateJsonElement(jsonObj.get("shape"));
      // validate the optional field `staticLegend`
      if (jsonObj.get("staticLegend") != null && !jsonObj.get("staticLegend").isJsonNull()) {
        StaticLegend.validateJsonElement(jsonObj.get("staticLegend"));
      }
      if ((jsonObj.get("timeFormat") != null && !jsonObj.get("timeFormat").isJsonNull()) && !jsonObj.get("timeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeFormat").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("xColumn") != null && !jsonObj.get("xColumn").isJsonNull()) && !jsonObj.get("xColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xColumn").toString()));
      }
      if ((jsonObj.get("yColumn") != null && !jsonObj.get("yColumn").isJsonNull()) && !jsonObj.get("yColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yColumn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!XYViewProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'XYViewProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<XYViewProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(XYViewProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<XYViewProperties>() {
           @Override
           public void write(JsonWriter out, XYViewProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public XYViewProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of XYViewProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of XYViewProperties
   * @throws IOException if the JSON string is invalid with respect to XYViewProperties
   */
  public static XYViewProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, XYViewProperties.class);
  }

  /**
   * Convert an instance of XYViewProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

