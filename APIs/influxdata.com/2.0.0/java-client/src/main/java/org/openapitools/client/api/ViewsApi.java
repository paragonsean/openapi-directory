/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.View;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ViewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ViewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ViewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDashboardsIDCellsIDView_1
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDCellsIDView_1Call(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}/view"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsIDCellsIDView_1ValidateBeforeCall(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling getDashboardsIDCellsIDView_1(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling getDashboardsIDCellsIDView_1(Async)");
        }

        return getDashboardsIDCellsIDView_1Call(dashboardID, cellID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve the view for a cell
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public View getDashboardsIDCellsIDView_1(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        ApiResponse<View> localVarResp = getDashboardsIDCellsIDView_1WithHttpInfo(dashboardID, cellID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve the view for a cell
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> getDashboardsIDCellsIDView_1WithHttpInfo(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsIDCellsIDView_1ValidateBeforeCall(dashboardID, cellID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the view for a cell (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDCellsIDView_1Async(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsIDCellsIDView_1ValidateBeforeCall(dashboardID, cellID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDashboardsIDCellsIDView_1
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsIDView_1Call(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = view;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}/view"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDashboardsIDCellsIDView_1ValidateBeforeCall(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsIDView_1(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsIDView_1(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling patchDashboardsIDCellsIDView_1(Async)");
        }

        return patchDashboardsIDCellsIDView_1Call(dashboardID, cellID, view, zapTraceSpan, _callback);

    }

    /**
     * Update the view for a cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public View patchDashboardsIDCellsIDView_1(String dashboardID, String cellID, View view, String zapTraceSpan) throws ApiException {
        ApiResponse<View> localVarResp = patchDashboardsIDCellsIDView_1WithHttpInfo(dashboardID, cellID, view, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update the view for a cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> patchDashboardsIDCellsIDView_1WithHttpInfo(String dashboardID, String cellID, View view, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchDashboardsIDCellsIDView_1ValidateBeforeCall(dashboardID, cellID, view, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the view for a cell (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsIDView_1Async(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDashboardsIDCellsIDView_1ValidateBeforeCall(dashboardID, cellID, view, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
