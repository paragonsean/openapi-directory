/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Check;
import org.openapitools.client.model.CheckDiscriminator;
import org.openapitools.client.model.CheckPatch;
import org.openapitools.client.model.Checks;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FluxResponse;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.PostCheck;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChecksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChecksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChecksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCheck
     * @param postCheck Check to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Check created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCheckCall(PostCheck postCheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCheck;

        // create path and map variables
        String localVarPath = "/checks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCheckValidateBeforeCall(PostCheck postCheck, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postCheck' is set
        if (postCheck == null) {
            throw new ApiException("Missing the required parameter 'postCheck' when calling createCheck(Async)");
        }

        return createCheckCall(postCheck, _callback);

    }

    /**
     * Add new check
     * 
     * @param postCheck Check to create (required)
     * @return Check
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Check created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Check createCheck(PostCheck postCheck) throws ApiException {
        ApiResponse<Check> localVarResp = createCheckWithHttpInfo(postCheck);
        return localVarResp.getData();
    }

    /**
     * Add new check
     * 
     * @param postCheck Check to create (required)
     * @return ApiResponse&lt;Check&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Check created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Check> createCheckWithHttpInfo(PostCheck postCheck) throws ApiException {
        okhttp3.Call localVarCall = createCheckValidateBeforeCall(postCheck, null);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new check (asynchronously)
     * 
     * @param postCheck Check to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Check created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCheckAsync(PostCheck postCheck, final ApiCallback<Check> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCheckValidateBeforeCall(postCheck, _callback);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChecksID
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChecksIDCall(String checkID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checks/{checkID}"
            .replace("{" + "checkID" + "}", localVarApiClient.escapeString(checkID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChecksIDValidateBeforeCall(String checkID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling deleteChecksID(Async)");
        }

        return deleteChecksIDCall(checkID, zapTraceSpan, _callback);

    }

    /**
     * Delete a check
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChecksID(String checkID, String zapTraceSpan) throws ApiException {
        deleteChecksIDWithHttpInfo(checkID, zapTraceSpan);
    }

    /**
     * Delete a check
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChecksIDWithHttpInfo(String checkID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteChecksIDValidateBeforeCall(checkID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a check (asynchronously)
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChecksIDAsync(String checkID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChecksIDValidateBeforeCall(checkID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChecksIDLabelsID
     * @param checkID The check ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Check or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChecksIDLabelsIDCall(String checkID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checks/{checkID}/labels/{labelID}"
            .replace("{" + "checkID" + "}", localVarApiClient.escapeString(checkID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChecksIDLabelsIDValidateBeforeCall(String checkID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling deleteChecksIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteChecksIDLabelsID(Async)");
        }

        return deleteChecksIDLabelsIDCall(checkID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete label from a check
     * 
     * @param checkID The check ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Check or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChecksIDLabelsID(String checkID, String labelID, String zapTraceSpan) throws ApiException {
        deleteChecksIDLabelsIDWithHttpInfo(checkID, labelID, zapTraceSpan);
    }

    /**
     * Delete label from a check
     * 
     * @param checkID The check ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Check or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChecksIDLabelsIDWithHttpInfo(String checkID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteChecksIDLabelsIDValidateBeforeCall(checkID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete label from a check (asynchronously)
     * 
     * @param checkID The check ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Check or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChecksIDLabelsIDAsync(String checkID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChecksIDLabelsIDValidateBeforeCall(checkID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChecks
     * @param orgID Only show checks that belong to a specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of checks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChecksCall(String orgID, String zapTraceSpan, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChecksValidateBeforeCall(String orgID, String zapTraceSpan, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling getChecks(Async)");
        }

        return getChecksCall(orgID, zapTraceSpan, offset, limit, _callback);

    }

    /**
     * List all checks
     * 
     * @param orgID Only show checks that belong to a specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @return Checks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of checks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Checks getChecks(String orgID, String zapTraceSpan, Integer offset, Integer limit) throws ApiException {
        ApiResponse<Checks> localVarResp = getChecksWithHttpInfo(orgID, zapTraceSpan, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List all checks
     * 
     * @param orgID Only show checks that belong to a specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @return ApiResponse&lt;Checks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of checks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checks> getChecksWithHttpInfo(String orgID, String zapTraceSpan, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getChecksValidateBeforeCall(orgID, zapTraceSpan, offset, limit, null);
        Type localVarReturnType = new TypeToken<Checks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all checks (asynchronously)
     * 
     * @param orgID Only show checks that belong to a specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of checks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChecksAsync(String orgID, String zapTraceSpan, Integer offset, Integer limit, final ApiCallback<Checks> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChecksValidateBeforeCall(orgID, zapTraceSpan, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<Checks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChecksID
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChecksIDCall(String checkID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checks/{checkID}"
            .replace("{" + "checkID" + "}", localVarApiClient.escapeString(checkID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChecksIDValidateBeforeCall(String checkID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling getChecksID(Async)");
        }

        return getChecksIDCall(checkID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a check
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Check
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Check getChecksID(String checkID, String zapTraceSpan) throws ApiException {
        ApiResponse<Check> localVarResp = getChecksIDWithHttpInfo(checkID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a check
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Check&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Check> getChecksIDWithHttpInfo(String checkID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getChecksIDValidateBeforeCall(checkID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a check (asynchronously)
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChecksIDAsync(String checkID, String zapTraceSpan, final ApiCallback<Check> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChecksIDValidateBeforeCall(checkID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChecksIDLabels
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChecksIDLabelsCall(String checkID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checks/{checkID}/labels"
            .replace("{" + "checkID" + "}", localVarApiClient.escapeString(checkID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChecksIDLabelsValidateBeforeCall(String checkID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling getChecksIDLabels(Async)");
        }

        return getChecksIDLabelsCall(checkID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a check
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getChecksIDLabels(String checkID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getChecksIDLabelsWithHttpInfo(checkID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a check
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getChecksIDLabelsWithHttpInfo(String checkID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getChecksIDLabelsValidateBeforeCall(checkID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a check (asynchronously)
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChecksIDLabelsAsync(String checkID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChecksIDLabelsValidateBeforeCall(checkID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChecksIDQuery
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check query requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Check not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChecksIDQueryCall(String checkID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checks/{checkID}/query"
            .replace("{" + "checkID" + "}", localVarApiClient.escapeString(checkID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChecksIDQueryValidateBeforeCall(String checkID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling getChecksIDQuery(Async)");
        }

        return getChecksIDQueryCall(checkID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a check query
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return FluxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check query requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Check not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public FluxResponse getChecksIDQuery(String checkID, String zapTraceSpan) throws ApiException {
        ApiResponse<FluxResponse> localVarResp = getChecksIDQueryWithHttpInfo(checkID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a check query
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;FluxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check query requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Check not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FluxResponse> getChecksIDQueryWithHttpInfo(String checkID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getChecksIDQueryValidateBeforeCall(checkID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<FluxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a check query (asynchronously)
     * 
     * @param checkID The check ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The check query requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Check not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChecksIDQueryAsync(String checkID, String zapTraceSpan, final ApiCallback<FluxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChecksIDQueryValidateBeforeCall(checkID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<FluxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchChecksID
     * @param checkID The check ID. (required)
     * @param checkPatch Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated check </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChecksIDCall(String checkID, CheckPatch checkPatch, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkPatch;

        // create path and map variables
        String localVarPath = "/checks/{checkID}"
            .replace("{" + "checkID" + "}", localVarApiClient.escapeString(checkID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchChecksIDValidateBeforeCall(String checkID, CheckPatch checkPatch, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling patchChecksID(Async)");
        }

        // verify the required parameter 'checkPatch' is set
        if (checkPatch == null) {
            throw new ApiException("Missing the required parameter 'checkPatch' when calling patchChecksID(Async)");
        }

        return patchChecksIDCall(checkID, checkPatch, zapTraceSpan, _callback);

    }

    /**
     * Update a check
     * 
     * @param checkID The check ID. (required)
     * @param checkPatch Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Check
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated check </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Check patchChecksID(String checkID, CheckPatch checkPatch, String zapTraceSpan) throws ApiException {
        ApiResponse<Check> localVarResp = patchChecksIDWithHttpInfo(checkID, checkPatch, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a check
     * 
     * @param checkID The check ID. (required)
     * @param checkPatch Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Check&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated check </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Check> patchChecksIDWithHttpInfo(String checkID, CheckPatch checkPatch, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchChecksIDValidateBeforeCall(checkID, checkPatch, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a check (asynchronously)
     * 
     * @param checkID The check ID. (required)
     * @param checkPatch Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated check </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChecksIDAsync(String checkID, CheckPatch checkPatch, String zapTraceSpan, final ApiCallback<Check> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchChecksIDValidateBeforeCall(checkID, checkPatch, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postChecksIDLabels
     * @param checkID The check ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postChecksIDLabelsCall(String checkID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/checks/{checkID}/labels"
            .replace("{" + "checkID" + "}", localVarApiClient.escapeString(checkID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postChecksIDLabelsValidateBeforeCall(String checkID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling postChecksIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postChecksIDLabels(Async)");
        }

        return postChecksIDLabelsCall(checkID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a check
     * 
     * @param checkID The check ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postChecksIDLabels(String checkID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postChecksIDLabelsWithHttpInfo(checkID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a check
     * 
     * @param checkID The check ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postChecksIDLabelsWithHttpInfo(String checkID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postChecksIDLabelsValidateBeforeCall(checkID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a check (asynchronously)
     * 
     * @param checkID The check ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the check </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postChecksIDLabelsAsync(String checkID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postChecksIDLabelsValidateBeforeCall(checkID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putChecksID
     * @param checkID The check ID. (required)
     * @param check Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated check </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putChecksIDCall(String checkID, Check check, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = check;

        // create path and map variables
        String localVarPath = "/checks/{checkID}"
            .replace("{" + "checkID" + "}", localVarApiClient.escapeString(checkID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putChecksIDValidateBeforeCall(String checkID, Check check, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling putChecksID(Async)");
        }

        // verify the required parameter 'check' is set
        if (check == null) {
            throw new ApiException("Missing the required parameter 'check' when calling putChecksID(Async)");
        }

        return putChecksIDCall(checkID, check, zapTraceSpan, _callback);

    }

    /**
     * Update a check
     * 
     * @param checkID The check ID. (required)
     * @param check Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Check
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated check </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Check putChecksID(String checkID, Check check, String zapTraceSpan) throws ApiException {
        ApiResponse<Check> localVarResp = putChecksIDWithHttpInfo(checkID, check, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a check
     * 
     * @param checkID The check ID. (required)
     * @param check Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Check&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated check </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Check> putChecksIDWithHttpInfo(String checkID, Check check, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putChecksIDValidateBeforeCall(checkID, check, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a check (asynchronously)
     * 
     * @param checkID The check ID. (required)
     * @param check Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated check </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putChecksIDAsync(String checkID, Check check, String zapTraceSpan, final ApiCallback<Check> _callback) throws ApiException {

        okhttp3.Call localVarCall = putChecksIDValidateBeforeCall(checkID, check, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Check>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
