/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Cell;
import org.openapitools.client.model.CellUpdate;
import org.openapitools.client.model.CreateCell;
import org.openapitools.client.model.CreateDashboardRequest;
import org.openapitools.client.model.Dashboard;
import org.openapitools.client.model.Dashboards;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.PatchDashboardRequest;
import org.openapitools.client.model.PostDashboards201Response;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.View;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DashboardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DashboardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DashboardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteDashboardsID
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDCall(String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardsIDValidateBeforeCall(String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling deleteDashboardsID(Async)");
        }

        return deleteDashboardsIDCall(dashboardID, zapTraceSpan, _callback);

    }

    /**
     * Delete a dashboard
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDashboardsID(String dashboardID, String zapTraceSpan) throws ApiException {
        deleteDashboardsIDWithHttpInfo(dashboardID, zapTraceSpan);
    }

    /**
     * Delete a dashboard
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDashboardsIDWithHttpInfo(String dashboardID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardsIDValidateBeforeCall(dashboardID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a dashboard (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDAsync(String dashboardID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardsIDValidateBeforeCall(dashboardID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDashboardsIDCellsID_0
     * @param dashboardID The ID of the dashboard to delete. (required)
     * @param cellID The ID of the cell to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cell successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDCellsID_0Call(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardsIDCellsID_0ValidateBeforeCall(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDCellsID_0(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling deleteDashboardsIDCellsID_0(Async)");
        }

        return deleteDashboardsIDCellsID_0Call(dashboardID, cellID, zapTraceSpan, _callback);

    }

    /**
     * Delete a dashboard cell
     * 
     * @param dashboardID The ID of the dashboard to delete. (required)
     * @param cellID The ID of the cell to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cell successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDashboardsIDCellsID_0(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        deleteDashboardsIDCellsID_0WithHttpInfo(dashboardID, cellID, zapTraceSpan);
    }

    /**
     * Delete a dashboard cell
     * 
     * @param dashboardID The ID of the dashboard to delete. (required)
     * @param cellID The ID of the cell to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cell successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDashboardsIDCellsID_0WithHttpInfo(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardsIDCellsID_0ValidateBeforeCall(dashboardID, cellID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a dashboard cell (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to delete. (required)
     * @param cellID The ID of the cell to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cell successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDCellsID_0Async(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardsIDCellsID_0ValidateBeforeCall(dashboardID, cellID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDashboardsIDLabelsID
     * @param dashboardID The dashboard ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDLabelsIDCall(String dashboardID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/labels/{labelID}"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardsIDLabelsIDValidateBeforeCall(String dashboardID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteDashboardsIDLabelsID(Async)");
        }

        return deleteDashboardsIDLabelsIDCall(dashboardID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete a label from a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDashboardsIDLabelsID(String dashboardID, String labelID, String zapTraceSpan) throws ApiException {
        deleteDashboardsIDLabelsIDWithHttpInfo(dashboardID, labelID, zapTraceSpan);
    }

    /**
     * Delete a label from a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDashboardsIDLabelsIDWithHttpInfo(String dashboardID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardsIDLabelsIDValidateBeforeCall(dashboardID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label from a dashboard (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDLabelsIDAsync(String dashboardID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardsIDLabelsIDValidateBeforeCall(dashboardID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDashboardsIDMembersID
     * @param userID The ID of the member to remove. (required)
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDMembersIDCall(String userID, String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/members/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardsIDMembersIDValidateBeforeCall(String userID, String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteDashboardsIDMembersID(Async)");
        }

        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDMembersID(Async)");
        }

        return deleteDashboardsIDMembersIDCall(userID, dashboardID, zapTraceSpan, _callback);

    }

    /**
     * Remove a member from a dashboard
     * 
     * @param userID The ID of the member to remove. (required)
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDashboardsIDMembersID(String userID, String dashboardID, String zapTraceSpan) throws ApiException {
        deleteDashboardsIDMembersIDWithHttpInfo(userID, dashboardID, zapTraceSpan);
    }

    /**
     * Remove a member from a dashboard
     * 
     * @param userID The ID of the member to remove. (required)
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDashboardsIDMembersIDWithHttpInfo(String userID, String dashboardID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardsIDMembersIDValidateBeforeCall(userID, dashboardID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a member from a dashboard (asynchronously)
     * 
     * @param userID The ID of the member to remove. (required)
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDMembersIDAsync(String userID, String dashboardID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardsIDMembersIDValidateBeforeCall(userID, dashboardID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDashboardsIDOwnersID
     * @param userID The ID of the owner to remove. (required)
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDOwnersIDCall(String userID, String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/owners/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardsIDOwnersIDValidateBeforeCall(String userID, String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteDashboardsIDOwnersID(Async)");
        }

        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDOwnersID(Async)");
        }

        return deleteDashboardsIDOwnersIDCall(userID, dashboardID, zapTraceSpan, _callback);

    }

    /**
     * Remove an owner from a dashboard
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDashboardsIDOwnersID(String userID, String dashboardID, String zapTraceSpan) throws ApiException {
        deleteDashboardsIDOwnersIDWithHttpInfo(userID, dashboardID, zapTraceSpan);
    }

    /**
     * Remove an owner from a dashboard
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDashboardsIDOwnersIDWithHttpInfo(String userID, String dashboardID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardsIDOwnersIDValidateBeforeCall(userID, dashboardID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an owner from a dashboard (asynchronously)
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDOwnersIDAsync(String userID, String dashboardID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardsIDOwnersIDValidateBeforeCall(userID, dashboardID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboards
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param descending  (optional, default to false)
     * @param owner A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)
     * @param sortBy The column to sort by. (optional)
     * @param id A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)
     * @param orgID The identifier of the organization. (optional)
     * @param org The name of the organization. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All dashboards </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsCall(String zapTraceSpan, Integer offset, Integer limit, Boolean descending, String owner, String sortBy, List<String> id, String orgID, String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (descending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descending", descending));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsValidateBeforeCall(String zapTraceSpan, Integer offset, Integer limit, Boolean descending, String owner, String sortBy, List<String> id, String orgID, String org, final ApiCallback _callback) throws ApiException {
        return getDashboardsCall(zapTraceSpan, offset, limit, descending, owner, sortBy, id, orgID, org, _callback);

    }

    /**
     * List all dashboards
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param descending  (optional, default to false)
     * @param owner A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)
     * @param sortBy The column to sort by. (optional)
     * @param id A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)
     * @param orgID The identifier of the organization. (optional)
     * @param org The name of the organization. (optional)
     * @return Dashboards
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All dashboards </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Dashboards getDashboards(String zapTraceSpan, Integer offset, Integer limit, Boolean descending, String owner, String sortBy, List<String> id, String orgID, String org) throws ApiException {
        ApiResponse<Dashboards> localVarResp = getDashboardsWithHttpInfo(zapTraceSpan, offset, limit, descending, owner, sortBy, id, orgID, org);
        return localVarResp.getData();
    }

    /**
     * List all dashboards
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param descending  (optional, default to false)
     * @param owner A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)
     * @param sortBy The column to sort by. (optional)
     * @param id A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)
     * @param orgID The identifier of the organization. (optional)
     * @param org The name of the organization. (optional)
     * @return ApiResponse&lt;Dashboards&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All dashboards </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboards> getDashboardsWithHttpInfo(String zapTraceSpan, Integer offset, Integer limit, Boolean descending, String owner, String sortBy, List<String> id, String orgID, String org) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsValidateBeforeCall(zapTraceSpan, offset, limit, descending, owner, sortBy, id, orgID, org, null);
        Type localVarReturnType = new TypeToken<Dashboards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all dashboards (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param descending  (optional, default to false)
     * @param owner A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)
     * @param sortBy The column to sort by. (optional)
     * @param id A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)
     * @param orgID The identifier of the organization. (optional)
     * @param org The name of the organization. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All dashboards </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsAsync(String zapTraceSpan, Integer offset, Integer limit, Boolean descending, String owner, String sortBy, List<String> id, String orgID, String org, final ApiCallback<Dashboards> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsValidateBeforeCall(zapTraceSpan, offset, limit, descending, owner, sortBy, id, orgID, org, _callback);
        Type localVarReturnType = new TypeToken<Dashboards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardsID
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param include Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a single dashboard </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDCall(String dashboardID, String zapTraceSpan, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsIDValidateBeforeCall(String dashboardID, String zapTraceSpan, String include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling getDashboardsID(Async)");
        }

        return getDashboardsIDCall(dashboardID, zapTraceSpan, include, _callback);

    }

    /**
     * Retrieve a Dashboard
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param include Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)
     * @return PostDashboards201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a single dashboard </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostDashboards201Response getDashboardsID(String dashboardID, String zapTraceSpan, String include) throws ApiException {
        ApiResponse<PostDashboards201Response> localVarResp = getDashboardsIDWithHttpInfo(dashboardID, zapTraceSpan, include);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Dashboard
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param include Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)
     * @return ApiResponse&lt;PostDashboards201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a single dashboard </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostDashboards201Response> getDashboardsIDWithHttpInfo(String dashboardID, String zapTraceSpan, String include) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsIDValidateBeforeCall(dashboardID, zapTraceSpan, include, null);
        Type localVarReturnType = new TypeToken<PostDashboards201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Dashboard (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param include Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a single dashboard </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDAsync(String dashboardID, String zapTraceSpan, String include, final ApiCallback<PostDashboards201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsIDValidateBeforeCall(dashboardID, zapTraceSpan, include, _callback);
        Type localVarReturnType = new TypeToken<PostDashboards201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardsIDCellsIDView_0
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDCellsIDView_0Call(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}/view"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsIDCellsIDView_0ValidateBeforeCall(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling getDashboardsIDCellsIDView_0(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling getDashboardsIDCellsIDView_0(Async)");
        }

        return getDashboardsIDCellsIDView_0Call(dashboardID, cellID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve the view for a cell
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public View getDashboardsIDCellsIDView_0(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        ApiResponse<View> localVarResp = getDashboardsIDCellsIDView_0WithHttpInfo(dashboardID, cellID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve the view for a cell
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> getDashboardsIDCellsIDView_0WithHttpInfo(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsIDCellsIDView_0ValidateBeforeCall(dashboardID, cellID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the view for a cell (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDCellsIDView_0Async(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsIDCellsIDView_0ValidateBeforeCall(dashboardID, cellID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardsIDLabels
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDLabelsCall(String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/labels"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsIDLabelsValidateBeforeCall(String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling getDashboardsIDLabels(Async)");
        }

        return getDashboardsIDLabelsCall(dashboardID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getDashboardsIDLabels(String dashboardID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getDashboardsIDLabelsWithHttpInfo(dashboardID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getDashboardsIDLabelsWithHttpInfo(String dashboardID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsIDLabelsValidateBeforeCall(dashboardID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a dashboard (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDLabelsAsync(String dashboardID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsIDLabelsValidateBeforeCall(dashboardID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardsIDMembers
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have member privileges for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDMembersCall(String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/members"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsIDMembersValidateBeforeCall(String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling getDashboardsIDMembers(Async)");
        }

        return getDashboardsIDMembersCall(dashboardID, zapTraceSpan, _callback);

    }

    /**
     * List all dashboard members
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have member privileges for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMembers getDashboardsIDMembers(String dashboardID, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceMembers> localVarResp = getDashboardsIDMembersWithHttpInfo(dashboardID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all dashboard members
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have member privileges for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMembers> getDashboardsIDMembersWithHttpInfo(String dashboardID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsIDMembersValidateBeforeCall(dashboardID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all dashboard members (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have member privileges for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDMembersAsync(String dashboardID, String zapTraceSpan, final ApiCallback<ResourceMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsIDMembersValidateBeforeCall(dashboardID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardsIDOwners
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have owner privileges for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDOwnersCall(String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/owners"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsIDOwnersValidateBeforeCall(String dashboardID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling getDashboardsIDOwners(Async)");
        }

        return getDashboardsIDOwnersCall(dashboardID, zapTraceSpan, _callback);

    }

    /**
     * List all dashboard owners
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceOwners
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have owner privileges for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOwners getDashboardsIDOwners(String dashboardID, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceOwners> localVarResp = getDashboardsIDOwnersWithHttpInfo(dashboardID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all dashboard owners
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceOwners&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have owner privileges for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOwners> getDashboardsIDOwnersWithHttpInfo(String dashboardID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsIDOwnersValidateBeforeCall(dashboardID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceOwners>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all dashboard owners (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of users who have owner privileges for a dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDOwnersAsync(String dashboardID, String zapTraceSpan, final ApiCallback<ResourceOwners> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsIDOwnersValidateBeforeCall(dashboardID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceOwners>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDashboardsID
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param patchDashboardRequest Patching of a dashboard (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCall(String dashboardID, PatchDashboardRequest patchDashboardRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchDashboardRequest;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDashboardsIDValidateBeforeCall(String dashboardID, PatchDashboardRequest patchDashboardRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling patchDashboardsID(Async)");
        }

        // verify the required parameter 'patchDashboardRequest' is set
        if (patchDashboardRequest == null) {
            throw new ApiException("Missing the required parameter 'patchDashboardRequest' when calling patchDashboardsID(Async)");
        }

        return patchDashboardsIDCall(dashboardID, patchDashboardRequest, zapTraceSpan, _callback);

    }

    /**
     * Update a dashboard
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param patchDashboardRequest Patching of a dashboard (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Dashboard patchDashboardsID(String dashboardID, PatchDashboardRequest patchDashboardRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<Dashboard> localVarResp = patchDashboardsIDWithHttpInfo(dashboardID, patchDashboardRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a dashboard
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param patchDashboardRequest Patching of a dashboard (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboard> patchDashboardsIDWithHttpInfo(String dashboardID, PatchDashboardRequest patchDashboardRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchDashboardsIDValidateBeforeCall(dashboardID, patchDashboardRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a dashboard (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param patchDashboardRequest Patching of a dashboard (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDAsync(String dashboardID, PatchDashboardRequest patchDashboardRequest, String zapTraceSpan, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDashboardsIDValidateBeforeCall(dashboardID, patchDashboardRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDashboardsIDCellsIDView_0
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsIDView_0Call(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = view;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}/view"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDashboardsIDCellsIDView_0ValidateBeforeCall(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsIDView_0(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsIDView_0(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling patchDashboardsIDCellsIDView_0(Async)");
        }

        return patchDashboardsIDCellsIDView_0Call(dashboardID, cellID, view, zapTraceSpan, _callback);

    }

    /**
     * Update the view for a cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public View patchDashboardsIDCellsIDView_0(String dashboardID, String cellID, View view, String zapTraceSpan) throws ApiException {
        ApiResponse<View> localVarResp = patchDashboardsIDCellsIDView_0WithHttpInfo(dashboardID, cellID, view, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update the view for a cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> patchDashboardsIDCellsIDView_0WithHttpInfo(String dashboardID, String cellID, View view, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchDashboardsIDCellsIDView_0ValidateBeforeCall(dashboardID, cellID, view, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the view for a cell (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsIDView_0Async(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDashboardsIDCellsIDView_0ValidateBeforeCall(dashboardID, cellID, view, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDashboardsIDCellsID_0
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param cellUpdate  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard cell </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsID_0Call(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cellUpdate;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDashboardsIDCellsID_0ValidateBeforeCall(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsID_0(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsID_0(Async)");
        }

        // verify the required parameter 'cellUpdate' is set
        if (cellUpdate == null) {
            throw new ApiException("Missing the required parameter 'cellUpdate' when calling patchDashboardsIDCellsID_0(Async)");
        }

        return patchDashboardsIDCellsID_0Call(dashboardID, cellID, cellUpdate, zapTraceSpan, _callback);

    }

    /**
     * Update the non-positional information related to a cell
     * Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param cellUpdate  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Cell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard cell </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Cell patchDashboardsIDCellsID_0(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan) throws ApiException {
        ApiResponse<Cell> localVarResp = patchDashboardsIDCellsID_0WithHttpInfo(dashboardID, cellID, cellUpdate, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update the non-positional information related to a cell
     * Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param cellUpdate  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Cell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard cell </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cell> patchDashboardsIDCellsID_0WithHttpInfo(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchDashboardsIDCellsID_0ValidateBeforeCall(dashboardID, cellID, cellUpdate, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the non-positional information related to a cell (asynchronously)
     * Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param cellUpdate  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard cell </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsID_0Async(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan, final ApiCallback<Cell> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDashboardsIDCellsID_0ValidateBeforeCall(dashboardID, cellID, cellUpdate, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDashboards
     * @param createDashboardRequest Dashboard to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsCall(CreateDashboardRequest createDashboardRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDashboardRequest;

        // create path and map variables
        String localVarPath = "/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDashboardsValidateBeforeCall(CreateDashboardRequest createDashboardRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDashboardRequest' is set
        if (createDashboardRequest == null) {
            throw new ApiException("Missing the required parameter 'createDashboardRequest' when calling postDashboards(Async)");
        }

        return postDashboardsCall(createDashboardRequest, zapTraceSpan, _callback);

    }

    /**
     * Create a dashboard
     * 
     * @param createDashboardRequest Dashboard to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return PostDashboards201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PostDashboards201Response postDashboards(CreateDashboardRequest createDashboardRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<PostDashboards201Response> localVarResp = postDashboardsWithHttpInfo(createDashboardRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a dashboard
     * 
     * @param createDashboardRequest Dashboard to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;PostDashboards201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostDashboards201Response> postDashboardsWithHttpInfo(CreateDashboardRequest createDashboardRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDashboardsValidateBeforeCall(createDashboardRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<PostDashboards201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a dashboard (asynchronously)
     * 
     * @param createDashboardRequest Dashboard to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsAsync(CreateDashboardRequest createDashboardRequest, String zapTraceSpan, final ApiCallback<PostDashboards201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDashboardsValidateBeforeCall(createDashboardRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<PostDashboards201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDashboardsIDCells_0
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param createCell Cell that will be added (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cell successfully added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDCells_0Call(String dashboardID, CreateCell createCell, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCell;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDashboardsIDCells_0ValidateBeforeCall(String dashboardID, CreateCell createCell, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling postDashboardsIDCells_0(Async)");
        }

        // verify the required parameter 'createCell' is set
        if (createCell == null) {
            throw new ApiException("Missing the required parameter 'createCell' when calling postDashboardsIDCells_0(Async)");
        }

        return postDashboardsIDCells_0Call(dashboardID, createCell, zapTraceSpan, _callback);

    }

    /**
     * Create a dashboard cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param createCell Cell that will be added (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Cell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cell successfully added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Cell postDashboardsIDCells_0(String dashboardID, CreateCell createCell, String zapTraceSpan) throws ApiException {
        ApiResponse<Cell> localVarResp = postDashboardsIDCells_0WithHttpInfo(dashboardID, createCell, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a dashboard cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param createCell Cell that will be added (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Cell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cell successfully added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cell> postDashboardsIDCells_0WithHttpInfo(String dashboardID, CreateCell createCell, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDashboardsIDCells_0ValidateBeforeCall(dashboardID, createCell, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a dashboard cell (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param createCell Cell that will be added (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cell successfully added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDCells_0Async(String dashboardID, CreateCell createCell, String zapTraceSpan, final ApiCallback<Cell> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDashboardsIDCells_0ValidateBeforeCall(dashboardID, createCell, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDashboardsIDLabels
     * @param dashboardID The dashboard ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDLabelsCall(String dashboardID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/labels"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDashboardsIDLabelsValidateBeforeCall(String dashboardID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling postDashboardsIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postDashboardsIDLabels(Async)");
        }

        return postDashboardsIDLabelsCall(dashboardID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postDashboardsIDLabels(String dashboardID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postDashboardsIDLabelsWithHttpInfo(dashboardID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postDashboardsIDLabelsWithHttpInfo(String dashboardID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDashboardsIDLabelsValidateBeforeCall(dashboardID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a dashboard (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the dashboard </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDLabelsAsync(String dashboardID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDashboardsIDLabelsValidateBeforeCall(dashboardID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDashboardsIDMembers
     * @param dashboardID The dashboard ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to dashboard members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDMembersCall(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResourceMemberRequestBody;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/members"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDashboardsIDMembersValidateBeforeCall(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling postDashboardsIDMembers(Async)");
        }

        // verify the required parameter 'addResourceMemberRequestBody' is set
        if (addResourceMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addResourceMemberRequestBody' when calling postDashboardsIDMembers(Async)");
        }

        return postDashboardsIDMembersCall(dashboardID, addResourceMemberRequestBody, zapTraceSpan, _callback);

    }

    /**
     * Add a member to a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to dashboard members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMember postDashboardsIDMembers(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceMember> localVarResp = postDashboardsIDMembersWithHttpInfo(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a member to a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to dashboard members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMember> postDashboardsIDMembersWithHttpInfo(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDashboardsIDMembersValidateBeforeCall(dashboardID, addResourceMemberRequestBody, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a member to a dashboard (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to dashboard members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDMembersAsync(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback<ResourceMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDashboardsIDMembersValidateBeforeCall(dashboardID, addResourceMemberRequestBody, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDashboardsIDOwners
     * @param dashboardID The dashboard ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to dashboard owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDOwnersCall(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResourceMemberRequestBody;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/owners"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDashboardsIDOwnersValidateBeforeCall(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling postDashboardsIDOwners(Async)");
        }

        // verify the required parameter 'addResourceMemberRequestBody' is set
        if (addResourceMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addResourceMemberRequestBody' when calling postDashboardsIDOwners(Async)");
        }

        return postDashboardsIDOwnersCall(dashboardID, addResourceMemberRequestBody, zapTraceSpan, _callback);

    }

    /**
     * Add an owner to a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceOwner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to dashboard owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOwner postDashboardsIDOwners(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceOwner> localVarResp = postDashboardsIDOwnersWithHttpInfo(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add an owner to a dashboard
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceOwner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to dashboard owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOwner> postDashboardsIDOwnersWithHttpInfo(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDashboardsIDOwnersValidateBeforeCall(dashboardID, addResourceMemberRequestBody, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceOwner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an owner to a dashboard (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Added to dashboard owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDOwnersAsync(String dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback<ResourceOwner> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDashboardsIDOwnersValidateBeforeCall(dashboardID, addResourceMemberRequestBody, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceOwner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putDashboardsIDCells_0
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cell  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replaced dashboard cells </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDashboardsIDCells_0Call(String dashboardID, List<Cell> cell, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cell;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDashboardsIDCells_0ValidateBeforeCall(String dashboardID, List<Cell> cell, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling putDashboardsIDCells_0(Async)");
        }

        // verify the required parameter 'cell' is set
        if (cell == null) {
            throw new ApiException("Missing the required parameter 'cell' when calling putDashboardsIDCells_0(Async)");
        }

        return putDashboardsIDCells_0Call(dashboardID, cell, zapTraceSpan, _callback);

    }

    /**
     * Replace cells in a dashboard
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cell  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replaced dashboard cells </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Dashboard putDashboardsIDCells_0(String dashboardID, List<Cell> cell, String zapTraceSpan) throws ApiException {
        ApiResponse<Dashboard> localVarResp = putDashboardsIDCells_0WithHttpInfo(dashboardID, cell, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Replace cells in a dashboard
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cell  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replaced dashboard cells </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboard> putDashboardsIDCells_0WithHttpInfo(String dashboardID, List<Cell> cell, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putDashboardsIDCells_0ValidateBeforeCall(dashboardID, cell, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace cells in a dashboard (asynchronously)
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cell  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replaced dashboard cells </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDashboardsIDCells_0Async(String dashboardID, List<Cell> cell, String zapTraceSpan, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDashboardsIDCells_0ValidateBeforeCall(dashboardID, cell, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
