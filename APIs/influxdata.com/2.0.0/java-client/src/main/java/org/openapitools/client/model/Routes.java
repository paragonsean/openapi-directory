/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.RoutesExternal;
import org.openapitools.client.model.RoutesQuery;
import org.openapitools.client.model.RoutesSystem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Routes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Routes {
  public static final String SERIALIZED_NAME_AUTHORIZATIONS = "authorizations";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS)
  private URI authorizations;

  public static final String SERIALIZED_NAME_BUCKETS = "buckets";
  @SerializedName(SERIALIZED_NAME_BUCKETS)
  private URI buckets;

  public static final String SERIALIZED_NAME_DASHBOARDS = "dashboards";
  @SerializedName(SERIALIZED_NAME_DASHBOARDS)
  private URI dashboards;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private RoutesExternal external;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private URI flags;

  public static final String SERIALIZED_NAME_ME = "me";
  @SerializedName(SERIALIZED_NAME_ME)
  private URI me;

  public static final String SERIALIZED_NAME_ORGS = "orgs";
  @SerializedName(SERIALIZED_NAME_ORGS)
  private URI orgs;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private RoutesQuery query;

  public static final String SERIALIZED_NAME_SETUP = "setup";
  @SerializedName(SERIALIZED_NAME_SETUP)
  private URI setup;

  public static final String SERIALIZED_NAME_SIGNIN = "signin";
  @SerializedName(SERIALIZED_NAME_SIGNIN)
  private URI signin;

  public static final String SERIALIZED_NAME_SIGNOUT = "signout";
  @SerializedName(SERIALIZED_NAME_SIGNOUT)
  private URI signout;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private URI sources;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private RoutesSystem system;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private URI tasks;

  public static final String SERIALIZED_NAME_TELEGRAFS = "telegrafs";
  @SerializedName(SERIALIZED_NAME_TELEGRAFS)
  private URI telegrafs;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private URI users;

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private URI variables;

  public static final String SERIALIZED_NAME_WRITE = "write";
  @SerializedName(SERIALIZED_NAME_WRITE)
  private URI write;

  public Routes() {
  }

  public Routes authorizations(URI authorizations) {
    this.authorizations = authorizations;
    return this;
  }

  /**
   * Get authorizations
   * @return authorizations
   */
  @javax.annotation.Nullable
  public URI getAuthorizations() {
    return authorizations;
  }

  public void setAuthorizations(URI authorizations) {
    this.authorizations = authorizations;
  }


  public Routes buckets(URI buckets) {
    this.buckets = buckets;
    return this;
  }

  /**
   * Get buckets
   * @return buckets
   */
  @javax.annotation.Nullable
  public URI getBuckets() {
    return buckets;
  }

  public void setBuckets(URI buckets) {
    this.buckets = buckets;
  }


  public Routes dashboards(URI dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  /**
   * Get dashboards
   * @return dashboards
   */
  @javax.annotation.Nullable
  public URI getDashboards() {
    return dashboards;
  }

  public void setDashboards(URI dashboards) {
    this.dashboards = dashboards;
  }


  public Routes external(RoutesExternal external) {
    this.external = external;
    return this;
  }

  /**
   * Get external
   * @return external
   */
  @javax.annotation.Nullable
  public RoutesExternal getExternal() {
    return external;
  }

  public void setExternal(RoutesExternal external) {
    this.external = external;
  }


  public Routes flags(URI flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nullable
  public URI getFlags() {
    return flags;
  }

  public void setFlags(URI flags) {
    this.flags = flags;
  }


  public Routes me(URI me) {
    this.me = me;
    return this;
  }

  /**
   * Get me
   * @return me
   */
  @javax.annotation.Nullable
  public URI getMe() {
    return me;
  }

  public void setMe(URI me) {
    this.me = me;
  }


  public Routes orgs(URI orgs) {
    this.orgs = orgs;
    return this;
  }

  /**
   * Get orgs
   * @return orgs
   */
  @javax.annotation.Nullable
  public URI getOrgs() {
    return orgs;
  }

  public void setOrgs(URI orgs) {
    this.orgs = orgs;
  }


  public Routes query(RoutesQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public RoutesQuery getQuery() {
    return query;
  }

  public void setQuery(RoutesQuery query) {
    this.query = query;
  }


  public Routes setup(URI setup) {
    this.setup = setup;
    return this;
  }

  /**
   * Get setup
   * @return setup
   */
  @javax.annotation.Nullable
  public URI getSetup() {
    return setup;
  }

  public void setSetup(URI setup) {
    this.setup = setup;
  }


  public Routes signin(URI signin) {
    this.signin = signin;
    return this;
  }

  /**
   * Get signin
   * @return signin
   */
  @javax.annotation.Nullable
  public URI getSignin() {
    return signin;
  }

  public void setSignin(URI signin) {
    this.signin = signin;
  }


  public Routes signout(URI signout) {
    this.signout = signout;
    return this;
  }

  /**
   * Get signout
   * @return signout
   */
  @javax.annotation.Nullable
  public URI getSignout() {
    return signout;
  }

  public void setSignout(URI signout) {
    this.signout = signout;
  }


  public Routes sources(URI sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public URI getSources() {
    return sources;
  }

  public void setSources(URI sources) {
    this.sources = sources;
  }


  public Routes system(RoutesSystem system) {
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @javax.annotation.Nullable
  public RoutesSystem getSystem() {
    return system;
  }

  public void setSystem(RoutesSystem system) {
    this.system = system;
  }


  public Routes tasks(URI tasks) {
    this.tasks = tasks;
    return this;
  }

  /**
   * Get tasks
   * @return tasks
   */
  @javax.annotation.Nullable
  public URI getTasks() {
    return tasks;
  }

  public void setTasks(URI tasks) {
    this.tasks = tasks;
  }


  public Routes telegrafs(URI telegrafs) {
    this.telegrafs = telegrafs;
    return this;
  }

  /**
   * Get telegrafs
   * @return telegrafs
   */
  @javax.annotation.Nullable
  public URI getTelegrafs() {
    return telegrafs;
  }

  public void setTelegrafs(URI telegrafs) {
    this.telegrafs = telegrafs;
  }


  public Routes users(URI users) {
    this.users = users;
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public URI getUsers() {
    return users;
  }

  public void setUsers(URI users) {
    this.users = users;
  }


  public Routes variables(URI variables) {
    this.variables = variables;
    return this;
  }

  /**
   * Get variables
   * @return variables
   */
  @javax.annotation.Nullable
  public URI getVariables() {
    return variables;
  }

  public void setVariables(URI variables) {
    this.variables = variables;
  }


  public Routes write(URI write) {
    this.write = write;
    return this;
  }

  /**
   * Get write
   * @return write
   */
  @javax.annotation.Nullable
  public URI getWrite() {
    return write;
  }

  public void setWrite(URI write) {
    this.write = write;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Routes routes = (Routes) o;
    return Objects.equals(this.authorizations, routes.authorizations) &&
        Objects.equals(this.buckets, routes.buckets) &&
        Objects.equals(this.dashboards, routes.dashboards) &&
        Objects.equals(this.external, routes.external) &&
        Objects.equals(this.flags, routes.flags) &&
        Objects.equals(this.me, routes.me) &&
        Objects.equals(this.orgs, routes.orgs) &&
        Objects.equals(this.query, routes.query) &&
        Objects.equals(this.setup, routes.setup) &&
        Objects.equals(this.signin, routes.signin) &&
        Objects.equals(this.signout, routes.signout) &&
        Objects.equals(this.sources, routes.sources) &&
        Objects.equals(this.system, routes.system) &&
        Objects.equals(this.tasks, routes.tasks) &&
        Objects.equals(this.telegrafs, routes.telegrafs) &&
        Objects.equals(this.users, routes.users) &&
        Objects.equals(this.variables, routes.variables) &&
        Objects.equals(this.write, routes.write);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizations, buckets, dashboards, external, flags, me, orgs, query, setup, signin, signout, sources, system, tasks, telegrafs, users, variables, write);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Routes {\n");
    sb.append("    authorizations: ").append(toIndentedString(authorizations)).append("\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    me: ").append(toIndentedString(me)).append("\n");
    sb.append("    orgs: ").append(toIndentedString(orgs)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    setup: ").append(toIndentedString(setup)).append("\n");
    sb.append("    signin: ").append(toIndentedString(signin)).append("\n");
    sb.append("    signout: ").append(toIndentedString(signout)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    telegrafs: ").append(toIndentedString(telegrafs)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    write: ").append(toIndentedString(write)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizations");
    openapiFields.add("buckets");
    openapiFields.add("dashboards");
    openapiFields.add("external");
    openapiFields.add("flags");
    openapiFields.add("me");
    openapiFields.add("orgs");
    openapiFields.add("query");
    openapiFields.add("setup");
    openapiFields.add("signin");
    openapiFields.add("signout");
    openapiFields.add("sources");
    openapiFields.add("system");
    openapiFields.add("tasks");
    openapiFields.add("telegrafs");
    openapiFields.add("users");
    openapiFields.add("variables");
    openapiFields.add("write");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Routes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Routes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Routes is not found in the empty JSON string", Routes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Routes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Routes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizations") != null && !jsonObj.get("authorizations").isJsonNull()) && !jsonObj.get("authorizations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizations").toString()));
      }
      if ((jsonObj.get("buckets") != null && !jsonObj.get("buckets").isJsonNull()) && !jsonObj.get("buckets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buckets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buckets").toString()));
      }
      if ((jsonObj.get("dashboards") != null && !jsonObj.get("dashboards").isJsonNull()) && !jsonObj.get("dashboards").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboards` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboards").toString()));
      }
      // validate the optional field `external`
      if (jsonObj.get("external") != null && !jsonObj.get("external").isJsonNull()) {
        RoutesExternal.validateJsonElement(jsonObj.get("external"));
      }
      if ((jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) && !jsonObj.get("flags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("me") != null && !jsonObj.get("me").isJsonNull()) && !jsonObj.get("me").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `me` to be a primitive type in the JSON string but got `%s`", jsonObj.get("me").toString()));
      }
      if ((jsonObj.get("orgs") != null && !jsonObj.get("orgs").isJsonNull()) && !jsonObj.get("orgs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgs").toString()));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        RoutesQuery.validateJsonElement(jsonObj.get("query"));
      }
      if ((jsonObj.get("setup") != null && !jsonObj.get("setup").isJsonNull()) && !jsonObj.get("setup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `setup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("setup").toString()));
      }
      if ((jsonObj.get("signin") != null && !jsonObj.get("signin").isJsonNull()) && !jsonObj.get("signin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signin").toString()));
      }
      if ((jsonObj.get("signout") != null && !jsonObj.get("signout").isJsonNull()) && !jsonObj.get("signout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signout").toString()));
      }
      if ((jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) && !jsonObj.get("sources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      // validate the optional field `system`
      if (jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) {
        RoutesSystem.validateJsonElement(jsonObj.get("system"));
      }
      if ((jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) && !jsonObj.get("tasks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
      }
      if ((jsonObj.get("telegrafs") != null && !jsonObj.get("telegrafs").isJsonNull()) && !jsonObj.get("telegrafs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telegrafs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telegrafs").toString()));
      }
      if ((jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) && !jsonObj.get("users").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be a primitive type in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }
      if ((jsonObj.get("variables") != null && !jsonObj.get("variables").isJsonNull()) && !jsonObj.get("variables").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variables` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variables").toString()));
      }
      if ((jsonObj.get("write") != null && !jsonObj.get("write").isJsonNull()) && !jsonObj.get("write").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `write` to be a primitive type in the JSON string but got `%s`", jsonObj.get("write").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Routes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Routes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Routes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Routes.class));

       return (TypeAdapter<T>) new TypeAdapter<Routes>() {
           @Override
           public void write(JsonWriter out, Routes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Routes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Routes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Routes
   * @throws IOException if the JSON string is invalid with respect to Routes
   */
  public static Routes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Routes.class);
  }

  /**
   * Convert an instance of Routes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

