/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DashboardQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScatterViewProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScatterViewProperties {
  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<String> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILL_COLUMNS = "fillColumns";
  @SerializedName(SERIALIZED_NAME_FILL_COLUMNS)
  private List<String> fillColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERATE_X_AXIS_TICKS = "generateXAxisTicks";
  @SerializedName(SERIALIZED_NAME_GENERATE_X_AXIS_TICKS)
  private List<String> generateXAxisTicks = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERATE_Y_AXIS_TICKS = "generateYAxisTicks";
  @SerializedName(SERIALIZED_NAME_GENERATE_Y_AXIS_TICKS)
  private List<String> generateYAxisTicks = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGEND_COLORIZE_ROWS = "legendColorizeRows";
  @SerializedName(SERIALIZED_NAME_LEGEND_COLORIZE_ROWS)
  private Boolean legendColorizeRows;

  public static final String SERIALIZED_NAME_LEGEND_HIDE = "legendHide";
  @SerializedName(SERIALIZED_NAME_LEGEND_HIDE)
  private Boolean legendHide;

  public static final String SERIALIZED_NAME_LEGEND_OPACITY = "legendOpacity";
  @SerializedName(SERIALIZED_NAME_LEGEND_OPACITY)
  private Float legendOpacity;

  public static final String SERIALIZED_NAME_LEGEND_ORIENTATION_THRESHOLD = "legendOrientationThreshold";
  @SerializedName(SERIALIZED_NAME_LEGEND_ORIENTATION_THRESHOLD)
  private Integer legendOrientationThreshold;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<DashboardQuery> queries = new ArrayList<>();

  /**
   * Gets or Sets shape
   */
  @JsonAdapter(ShapeEnum.Adapter.class)
  public enum ShapeEnum {
    CHRONOGRAF_V2("chronograf-v2");

    private String value;

    ShapeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeEnum fromValue(String value) {
      for (ShapeEnum b : ShapeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShapeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShapeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShapeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private ShapeEnum shape;

  public static final String SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY = "showNoteWhenEmpty";
  @SerializedName(SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY)
  private Boolean showNoteWhenEmpty;

  public static final String SERIALIZED_NAME_SYMBOL_COLUMNS = "symbolColumns";
  @SerializedName(SERIALIZED_NAME_SYMBOL_COLUMNS)
  private List<String> symbolColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private String timeFormat;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SCATTER("scatter");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_X_AXIS_LABEL = "xAxisLabel";
  @SerializedName(SERIALIZED_NAME_X_AXIS_LABEL)
  private String xAxisLabel;

  public static final String SERIALIZED_NAME_X_COLUMN = "xColumn";
  @SerializedName(SERIALIZED_NAME_X_COLUMN)
  private String xColumn;

  public static final String SERIALIZED_NAME_X_DOMAIN = "xDomain";
  @SerializedName(SERIALIZED_NAME_X_DOMAIN)
  private List<BigDecimal> xDomain = new ArrayList<>();

  public static final String SERIALIZED_NAME_X_PREFIX = "xPrefix";
  @SerializedName(SERIALIZED_NAME_X_PREFIX)
  private String xPrefix;

  public static final String SERIALIZED_NAME_X_SUFFIX = "xSuffix";
  @SerializedName(SERIALIZED_NAME_X_SUFFIX)
  private String xSuffix;

  public static final String SERIALIZED_NAME_X_TICK_START = "xTickStart";
  @SerializedName(SERIALIZED_NAME_X_TICK_START)
  private Float xTickStart;

  public static final String SERIALIZED_NAME_X_TICK_STEP = "xTickStep";
  @SerializedName(SERIALIZED_NAME_X_TICK_STEP)
  private Float xTickStep;

  public static final String SERIALIZED_NAME_X_TOTAL_TICKS = "xTotalTicks";
  @SerializedName(SERIALIZED_NAME_X_TOTAL_TICKS)
  private Integer xTotalTicks;

  public static final String SERIALIZED_NAME_Y_AXIS_LABEL = "yAxisLabel";
  @SerializedName(SERIALIZED_NAME_Y_AXIS_LABEL)
  private String yAxisLabel;

  public static final String SERIALIZED_NAME_Y_COLUMN = "yColumn";
  @SerializedName(SERIALIZED_NAME_Y_COLUMN)
  private String yColumn;

  public static final String SERIALIZED_NAME_Y_DOMAIN = "yDomain";
  @SerializedName(SERIALIZED_NAME_Y_DOMAIN)
  private List<BigDecimal> yDomain = new ArrayList<>();

  public static final String SERIALIZED_NAME_Y_PREFIX = "yPrefix";
  @SerializedName(SERIALIZED_NAME_Y_PREFIX)
  private String yPrefix;

  public static final String SERIALIZED_NAME_Y_SUFFIX = "ySuffix";
  @SerializedName(SERIALIZED_NAME_Y_SUFFIX)
  private String ySuffix;

  public static final String SERIALIZED_NAME_Y_TICK_START = "yTickStart";
  @SerializedName(SERIALIZED_NAME_Y_TICK_START)
  private Float yTickStart;

  public static final String SERIALIZED_NAME_Y_TICK_STEP = "yTickStep";
  @SerializedName(SERIALIZED_NAME_Y_TICK_STEP)
  private Float yTickStep;

  public static final String SERIALIZED_NAME_Y_TOTAL_TICKS = "yTotalTicks";
  @SerializedName(SERIALIZED_NAME_Y_TOTAL_TICKS)
  private Integer yTotalTicks;

  public ScatterViewProperties() {
  }

  public ScatterViewProperties colors(List<String> colors) {
    this.colors = colors;
    return this;
  }

  public ScatterViewProperties addColorsItem(String colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * Colors define color encoding of data into a visualization
   * @return colors
   */
  @javax.annotation.Nonnull
  public List<String> getColors() {
    return colors;
  }

  public void setColors(List<String> colors) {
    this.colors = colors;
  }


  public ScatterViewProperties fillColumns(List<String> fillColumns) {
    this.fillColumns = fillColumns;
    return this;
  }

  public ScatterViewProperties addFillColumnsItem(String fillColumnsItem) {
    if (this.fillColumns == null) {
      this.fillColumns = new ArrayList<>();
    }
    this.fillColumns.add(fillColumnsItem);
    return this;
  }

  /**
   * Get fillColumns
   * @return fillColumns
   */
  @javax.annotation.Nonnull
  public List<String> getFillColumns() {
    return fillColumns;
  }

  public void setFillColumns(List<String> fillColumns) {
    this.fillColumns = fillColumns;
  }


  public ScatterViewProperties generateXAxisTicks(List<String> generateXAxisTicks) {
    this.generateXAxisTicks = generateXAxisTicks;
    return this;
  }

  public ScatterViewProperties addGenerateXAxisTicksItem(String generateXAxisTicksItem) {
    if (this.generateXAxisTicks == null) {
      this.generateXAxisTicks = new ArrayList<>();
    }
    this.generateXAxisTicks.add(generateXAxisTicksItem);
    return this;
  }

  /**
   * Get generateXAxisTicks
   * @return generateXAxisTicks
   */
  @javax.annotation.Nullable
  public List<String> getGenerateXAxisTicks() {
    return generateXAxisTicks;
  }

  public void setGenerateXAxisTicks(List<String> generateXAxisTicks) {
    this.generateXAxisTicks = generateXAxisTicks;
  }


  public ScatterViewProperties generateYAxisTicks(List<String> generateYAxisTicks) {
    this.generateYAxisTicks = generateYAxisTicks;
    return this;
  }

  public ScatterViewProperties addGenerateYAxisTicksItem(String generateYAxisTicksItem) {
    if (this.generateYAxisTicks == null) {
      this.generateYAxisTicks = new ArrayList<>();
    }
    this.generateYAxisTicks.add(generateYAxisTicksItem);
    return this;
  }

  /**
   * Get generateYAxisTicks
   * @return generateYAxisTicks
   */
  @javax.annotation.Nullable
  public List<String> getGenerateYAxisTicks() {
    return generateYAxisTicks;
  }

  public void setGenerateYAxisTicks(List<String> generateYAxisTicks) {
    this.generateYAxisTicks = generateYAxisTicks;
  }


  public ScatterViewProperties legendColorizeRows(Boolean legendColorizeRows) {
    this.legendColorizeRows = legendColorizeRows;
    return this;
  }

  /**
   * Get legendColorizeRows
   * @return legendColorizeRows
   */
  @javax.annotation.Nullable
  public Boolean getLegendColorizeRows() {
    return legendColorizeRows;
  }

  public void setLegendColorizeRows(Boolean legendColorizeRows) {
    this.legendColorizeRows = legendColorizeRows;
  }


  public ScatterViewProperties legendHide(Boolean legendHide) {
    this.legendHide = legendHide;
    return this;
  }

  /**
   * Get legendHide
   * @return legendHide
   */
  @javax.annotation.Nullable
  public Boolean getLegendHide() {
    return legendHide;
  }

  public void setLegendHide(Boolean legendHide) {
    this.legendHide = legendHide;
  }


  public ScatterViewProperties legendOpacity(Float legendOpacity) {
    this.legendOpacity = legendOpacity;
    return this;
  }

  /**
   * Get legendOpacity
   * @return legendOpacity
   */
  @javax.annotation.Nullable
  public Float getLegendOpacity() {
    return legendOpacity;
  }

  public void setLegendOpacity(Float legendOpacity) {
    this.legendOpacity = legendOpacity;
  }


  public ScatterViewProperties legendOrientationThreshold(Integer legendOrientationThreshold) {
    this.legendOrientationThreshold = legendOrientationThreshold;
    return this;
  }

  /**
   * Get legendOrientationThreshold
   * @return legendOrientationThreshold
   */
  @javax.annotation.Nullable
  public Integer getLegendOrientationThreshold() {
    return legendOrientationThreshold;
  }

  public void setLegendOrientationThreshold(Integer legendOrientationThreshold) {
    this.legendOrientationThreshold = legendOrientationThreshold;
  }


  public ScatterViewProperties note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nonnull
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public ScatterViewProperties queries(List<DashboardQuery> queries) {
    this.queries = queries;
    return this;
  }

  public ScatterViewProperties addQueriesItem(DashboardQuery queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

  /**
   * Get queries
   * @return queries
   */
  @javax.annotation.Nonnull
  public List<DashboardQuery> getQueries() {
    return queries;
  }

  public void setQueries(List<DashboardQuery> queries) {
    this.queries = queries;
  }


  public ScatterViewProperties shape(ShapeEnum shape) {
    this.shape = shape;
    return this;
  }

  /**
   * Get shape
   * @return shape
   */
  @javax.annotation.Nonnull
  public ShapeEnum getShape() {
    return shape;
  }

  public void setShape(ShapeEnum shape) {
    this.shape = shape;
  }


  public ScatterViewProperties showNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
    return this;
  }

  /**
   * If true, will display note when empty
   * @return showNoteWhenEmpty
   */
  @javax.annotation.Nonnull
  public Boolean getShowNoteWhenEmpty() {
    return showNoteWhenEmpty;
  }

  public void setShowNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
  }


  public ScatterViewProperties symbolColumns(List<String> symbolColumns) {
    this.symbolColumns = symbolColumns;
    return this;
  }

  public ScatterViewProperties addSymbolColumnsItem(String symbolColumnsItem) {
    if (this.symbolColumns == null) {
      this.symbolColumns = new ArrayList<>();
    }
    this.symbolColumns.add(symbolColumnsItem);
    return this;
  }

  /**
   * Get symbolColumns
   * @return symbolColumns
   */
  @javax.annotation.Nonnull
  public List<String> getSymbolColumns() {
    return symbolColumns;
  }

  public void setSymbolColumns(List<String> symbolColumns) {
    this.symbolColumns = symbolColumns;
  }


  public ScatterViewProperties timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

  /**
   * Get timeFormat
   * @return timeFormat
   */
  @javax.annotation.Nullable
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }


  public ScatterViewProperties type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ScatterViewProperties xAxisLabel(String xAxisLabel) {
    this.xAxisLabel = xAxisLabel;
    return this;
  }

  /**
   * Get xAxisLabel
   * @return xAxisLabel
   */
  @javax.annotation.Nonnull
  public String getxAxisLabel() {
    return xAxisLabel;
  }

  public void setxAxisLabel(String xAxisLabel) {
    this.xAxisLabel = xAxisLabel;
  }


  public ScatterViewProperties xColumn(String xColumn) {
    this.xColumn = xColumn;
    return this;
  }

  /**
   * Get xColumn
   * @return xColumn
   */
  @javax.annotation.Nonnull
  public String getxColumn() {
    return xColumn;
  }

  public void setxColumn(String xColumn) {
    this.xColumn = xColumn;
  }


  public ScatterViewProperties xDomain(List<BigDecimal> xDomain) {
    this.xDomain = xDomain;
    return this;
  }

  public ScatterViewProperties addXDomainItem(BigDecimal xDomainItem) {
    if (this.xDomain == null) {
      this.xDomain = new ArrayList<>();
    }
    this.xDomain.add(xDomainItem);
    return this;
  }

  /**
   * Get xDomain
   * @return xDomain
   */
  @javax.annotation.Nonnull
  public List<BigDecimal> getxDomain() {
    return xDomain;
  }

  public void setxDomain(List<BigDecimal> xDomain) {
    this.xDomain = xDomain;
  }


  public ScatterViewProperties xPrefix(String xPrefix) {
    this.xPrefix = xPrefix;
    return this;
  }

  /**
   * Get xPrefix
   * @return xPrefix
   */
  @javax.annotation.Nonnull
  public String getxPrefix() {
    return xPrefix;
  }

  public void setxPrefix(String xPrefix) {
    this.xPrefix = xPrefix;
  }


  public ScatterViewProperties xSuffix(String xSuffix) {
    this.xSuffix = xSuffix;
    return this;
  }

  /**
   * Get xSuffix
   * @return xSuffix
   */
  @javax.annotation.Nonnull
  public String getxSuffix() {
    return xSuffix;
  }

  public void setxSuffix(String xSuffix) {
    this.xSuffix = xSuffix;
  }


  public ScatterViewProperties xTickStart(Float xTickStart) {
    this.xTickStart = xTickStart;
    return this;
  }

  /**
   * Get xTickStart
   * @return xTickStart
   */
  @javax.annotation.Nullable
  public Float getxTickStart() {
    return xTickStart;
  }

  public void setxTickStart(Float xTickStart) {
    this.xTickStart = xTickStart;
  }


  public ScatterViewProperties xTickStep(Float xTickStep) {
    this.xTickStep = xTickStep;
    return this;
  }

  /**
   * Get xTickStep
   * @return xTickStep
   */
  @javax.annotation.Nullable
  public Float getxTickStep() {
    return xTickStep;
  }

  public void setxTickStep(Float xTickStep) {
    this.xTickStep = xTickStep;
  }


  public ScatterViewProperties xTotalTicks(Integer xTotalTicks) {
    this.xTotalTicks = xTotalTicks;
    return this;
  }

  /**
   * Get xTotalTicks
   * @return xTotalTicks
   */
  @javax.annotation.Nullable
  public Integer getxTotalTicks() {
    return xTotalTicks;
  }

  public void setxTotalTicks(Integer xTotalTicks) {
    this.xTotalTicks = xTotalTicks;
  }


  public ScatterViewProperties yAxisLabel(String yAxisLabel) {
    this.yAxisLabel = yAxisLabel;
    return this;
  }

  /**
   * Get yAxisLabel
   * @return yAxisLabel
   */
  @javax.annotation.Nonnull
  public String getyAxisLabel() {
    return yAxisLabel;
  }

  public void setyAxisLabel(String yAxisLabel) {
    this.yAxisLabel = yAxisLabel;
  }


  public ScatterViewProperties yColumn(String yColumn) {
    this.yColumn = yColumn;
    return this;
  }

  /**
   * Get yColumn
   * @return yColumn
   */
  @javax.annotation.Nonnull
  public String getyColumn() {
    return yColumn;
  }

  public void setyColumn(String yColumn) {
    this.yColumn = yColumn;
  }


  public ScatterViewProperties yDomain(List<BigDecimal> yDomain) {
    this.yDomain = yDomain;
    return this;
  }

  public ScatterViewProperties addYDomainItem(BigDecimal yDomainItem) {
    if (this.yDomain == null) {
      this.yDomain = new ArrayList<>();
    }
    this.yDomain.add(yDomainItem);
    return this;
  }

  /**
   * Get yDomain
   * @return yDomain
   */
  @javax.annotation.Nonnull
  public List<BigDecimal> getyDomain() {
    return yDomain;
  }

  public void setyDomain(List<BigDecimal> yDomain) {
    this.yDomain = yDomain;
  }


  public ScatterViewProperties yPrefix(String yPrefix) {
    this.yPrefix = yPrefix;
    return this;
  }

  /**
   * Get yPrefix
   * @return yPrefix
   */
  @javax.annotation.Nonnull
  public String getyPrefix() {
    return yPrefix;
  }

  public void setyPrefix(String yPrefix) {
    this.yPrefix = yPrefix;
  }


  public ScatterViewProperties ySuffix(String ySuffix) {
    this.ySuffix = ySuffix;
    return this;
  }

  /**
   * Get ySuffix
   * @return ySuffix
   */
  @javax.annotation.Nonnull
  public String getySuffix() {
    return ySuffix;
  }

  public void setySuffix(String ySuffix) {
    this.ySuffix = ySuffix;
  }


  public ScatterViewProperties yTickStart(Float yTickStart) {
    this.yTickStart = yTickStart;
    return this;
  }

  /**
   * Get yTickStart
   * @return yTickStart
   */
  @javax.annotation.Nullable
  public Float getyTickStart() {
    return yTickStart;
  }

  public void setyTickStart(Float yTickStart) {
    this.yTickStart = yTickStart;
  }


  public ScatterViewProperties yTickStep(Float yTickStep) {
    this.yTickStep = yTickStep;
    return this;
  }

  /**
   * Get yTickStep
   * @return yTickStep
   */
  @javax.annotation.Nullable
  public Float getyTickStep() {
    return yTickStep;
  }

  public void setyTickStep(Float yTickStep) {
    this.yTickStep = yTickStep;
  }


  public ScatterViewProperties yTotalTicks(Integer yTotalTicks) {
    this.yTotalTicks = yTotalTicks;
    return this;
  }

  /**
   * Get yTotalTicks
   * @return yTotalTicks
   */
  @javax.annotation.Nullable
  public Integer getyTotalTicks() {
    return yTotalTicks;
  }

  public void setyTotalTicks(Integer yTotalTicks) {
    this.yTotalTicks = yTotalTicks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScatterViewProperties scatterViewProperties = (ScatterViewProperties) o;
    return Objects.equals(this.colors, scatterViewProperties.colors) &&
        Objects.equals(this.fillColumns, scatterViewProperties.fillColumns) &&
        Objects.equals(this.generateXAxisTicks, scatterViewProperties.generateXAxisTicks) &&
        Objects.equals(this.generateYAxisTicks, scatterViewProperties.generateYAxisTicks) &&
        Objects.equals(this.legendColorizeRows, scatterViewProperties.legendColorizeRows) &&
        Objects.equals(this.legendHide, scatterViewProperties.legendHide) &&
        Objects.equals(this.legendOpacity, scatterViewProperties.legendOpacity) &&
        Objects.equals(this.legendOrientationThreshold, scatterViewProperties.legendOrientationThreshold) &&
        Objects.equals(this.note, scatterViewProperties.note) &&
        Objects.equals(this.queries, scatterViewProperties.queries) &&
        Objects.equals(this.shape, scatterViewProperties.shape) &&
        Objects.equals(this.showNoteWhenEmpty, scatterViewProperties.showNoteWhenEmpty) &&
        Objects.equals(this.symbolColumns, scatterViewProperties.symbolColumns) &&
        Objects.equals(this.timeFormat, scatterViewProperties.timeFormat) &&
        Objects.equals(this.type, scatterViewProperties.type) &&
        Objects.equals(this.xAxisLabel, scatterViewProperties.xAxisLabel) &&
        Objects.equals(this.xColumn, scatterViewProperties.xColumn) &&
        Objects.equals(this.xDomain, scatterViewProperties.xDomain) &&
        Objects.equals(this.xPrefix, scatterViewProperties.xPrefix) &&
        Objects.equals(this.xSuffix, scatterViewProperties.xSuffix) &&
        Objects.equals(this.xTickStart, scatterViewProperties.xTickStart) &&
        Objects.equals(this.xTickStep, scatterViewProperties.xTickStep) &&
        Objects.equals(this.xTotalTicks, scatterViewProperties.xTotalTicks) &&
        Objects.equals(this.yAxisLabel, scatterViewProperties.yAxisLabel) &&
        Objects.equals(this.yColumn, scatterViewProperties.yColumn) &&
        Objects.equals(this.yDomain, scatterViewProperties.yDomain) &&
        Objects.equals(this.yPrefix, scatterViewProperties.yPrefix) &&
        Objects.equals(this.ySuffix, scatterViewProperties.ySuffix) &&
        Objects.equals(this.yTickStart, scatterViewProperties.yTickStart) &&
        Objects.equals(this.yTickStep, scatterViewProperties.yTickStep) &&
        Objects.equals(this.yTotalTicks, scatterViewProperties.yTotalTicks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colors, fillColumns, generateXAxisTicks, generateYAxisTicks, legendColorizeRows, legendHide, legendOpacity, legendOrientationThreshold, note, queries, shape, showNoteWhenEmpty, symbolColumns, timeFormat, type, xAxisLabel, xColumn, xDomain, xPrefix, xSuffix, xTickStart, xTickStep, xTotalTicks, yAxisLabel, yColumn, yDomain, yPrefix, ySuffix, yTickStart, yTickStep, yTotalTicks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScatterViewProperties {\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    fillColumns: ").append(toIndentedString(fillColumns)).append("\n");
    sb.append("    generateXAxisTicks: ").append(toIndentedString(generateXAxisTicks)).append("\n");
    sb.append("    generateYAxisTicks: ").append(toIndentedString(generateYAxisTicks)).append("\n");
    sb.append("    legendColorizeRows: ").append(toIndentedString(legendColorizeRows)).append("\n");
    sb.append("    legendHide: ").append(toIndentedString(legendHide)).append("\n");
    sb.append("    legendOpacity: ").append(toIndentedString(legendOpacity)).append("\n");
    sb.append("    legendOrientationThreshold: ").append(toIndentedString(legendOrientationThreshold)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    showNoteWhenEmpty: ").append(toIndentedString(showNoteWhenEmpty)).append("\n");
    sb.append("    symbolColumns: ").append(toIndentedString(symbolColumns)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xAxisLabel: ").append(toIndentedString(xAxisLabel)).append("\n");
    sb.append("    xColumn: ").append(toIndentedString(xColumn)).append("\n");
    sb.append("    xDomain: ").append(toIndentedString(xDomain)).append("\n");
    sb.append("    xPrefix: ").append(toIndentedString(xPrefix)).append("\n");
    sb.append("    xSuffix: ").append(toIndentedString(xSuffix)).append("\n");
    sb.append("    xTickStart: ").append(toIndentedString(xTickStart)).append("\n");
    sb.append("    xTickStep: ").append(toIndentedString(xTickStep)).append("\n");
    sb.append("    xTotalTicks: ").append(toIndentedString(xTotalTicks)).append("\n");
    sb.append("    yAxisLabel: ").append(toIndentedString(yAxisLabel)).append("\n");
    sb.append("    yColumn: ").append(toIndentedString(yColumn)).append("\n");
    sb.append("    yDomain: ").append(toIndentedString(yDomain)).append("\n");
    sb.append("    yPrefix: ").append(toIndentedString(yPrefix)).append("\n");
    sb.append("    ySuffix: ").append(toIndentedString(ySuffix)).append("\n");
    sb.append("    yTickStart: ").append(toIndentedString(yTickStart)).append("\n");
    sb.append("    yTickStep: ").append(toIndentedString(yTickStep)).append("\n");
    sb.append("    yTotalTicks: ").append(toIndentedString(yTotalTicks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colors");
    openapiFields.add("fillColumns");
    openapiFields.add("generateXAxisTicks");
    openapiFields.add("generateYAxisTicks");
    openapiFields.add("legendColorizeRows");
    openapiFields.add("legendHide");
    openapiFields.add("legendOpacity");
    openapiFields.add("legendOrientationThreshold");
    openapiFields.add("note");
    openapiFields.add("queries");
    openapiFields.add("shape");
    openapiFields.add("showNoteWhenEmpty");
    openapiFields.add("symbolColumns");
    openapiFields.add("timeFormat");
    openapiFields.add("type");
    openapiFields.add("xAxisLabel");
    openapiFields.add("xColumn");
    openapiFields.add("xDomain");
    openapiFields.add("xPrefix");
    openapiFields.add("xSuffix");
    openapiFields.add("xTickStart");
    openapiFields.add("xTickStep");
    openapiFields.add("xTotalTicks");
    openapiFields.add("yAxisLabel");
    openapiFields.add("yColumn");
    openapiFields.add("yDomain");
    openapiFields.add("yPrefix");
    openapiFields.add("ySuffix");
    openapiFields.add("yTickStart");
    openapiFields.add("yTickStep");
    openapiFields.add("yTotalTicks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("colors");
    openapiRequiredFields.add("fillColumns");
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("queries");
    openapiRequiredFields.add("shape");
    openapiRequiredFields.add("showNoteWhenEmpty");
    openapiRequiredFields.add("symbolColumns");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("xAxisLabel");
    openapiRequiredFields.add("xColumn");
    openapiRequiredFields.add("xDomain");
    openapiRequiredFields.add("xPrefix");
    openapiRequiredFields.add("xSuffix");
    openapiRequiredFields.add("yAxisLabel");
    openapiRequiredFields.add("yColumn");
    openapiRequiredFields.add("yDomain");
    openapiRequiredFields.add("yPrefix");
    openapiRequiredFields.add("ySuffix");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScatterViewProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScatterViewProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScatterViewProperties is not found in the empty JSON string", ScatterViewProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScatterViewProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScatterViewProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScatterViewProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("colors") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("fillColumns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("fillColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillColumns` to be an array in the JSON string but got `%s`", jsonObj.get("fillColumns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("generateXAxisTicks") != null && !jsonObj.get("generateXAxisTicks").isJsonNull() && !jsonObj.get("generateXAxisTicks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `generateXAxisTicks` to be an array in the JSON string but got `%s`", jsonObj.get("generateXAxisTicks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("generateYAxisTicks") != null && !jsonObj.get("generateYAxisTicks").isJsonNull() && !jsonObj.get("generateYAxisTicks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `generateYAxisTicks` to be an array in the JSON string but got `%s`", jsonObj.get("generateYAxisTicks").toString()));
      }
      if (!jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("queries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queries` to be an array in the JSON string but got `%s`", jsonObj.get("queries").toString()));
      }

      JsonArray jsonArrayqueries = jsonObj.getAsJsonArray("queries");
      // validate the required field `queries` (array)
      for (int i = 0; i < jsonArrayqueries.size(); i++) {
        DashboardQuery.validateJsonElement(jsonArrayqueries.get(i));
      };
      if (!jsonObj.get("shape").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shape` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shape").toString()));
      }
      // validate the required field `shape`
      ShapeEnum.validateJsonElement(jsonObj.get("shape"));
      // ensure the required json array is present
      if (jsonObj.get("symbolColumns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("symbolColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbolColumns` to be an array in the JSON string but got `%s`", jsonObj.get("symbolColumns").toString()));
      }
      if ((jsonObj.get("timeFormat") != null && !jsonObj.get("timeFormat").isJsonNull()) && !jsonObj.get("timeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeFormat").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("xAxisLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xAxisLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xAxisLabel").toString()));
      }
      if (!jsonObj.get("xColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xColumn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("xDomain") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("xDomain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `xDomain` to be an array in the JSON string but got `%s`", jsonObj.get("xDomain").toString()));
      }
      if (!jsonObj.get("xPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xPrefix").toString()));
      }
      if (!jsonObj.get("xSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xSuffix").toString()));
      }
      if (!jsonObj.get("yAxisLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yAxisLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yAxisLabel").toString()));
      }
      if (!jsonObj.get("yColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yColumn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("yDomain") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("yDomain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `yDomain` to be an array in the JSON string but got `%s`", jsonObj.get("yDomain").toString()));
      }
      if (!jsonObj.get("yPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yPrefix").toString()));
      }
      if (!jsonObj.get("ySuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ySuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ySuffix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScatterViewProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScatterViewProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScatterViewProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScatterViewProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ScatterViewProperties>() {
           @Override
           public void write(JsonWriter out, ScatterViewProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScatterViewProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScatterViewProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScatterViewProperties
   * @throws IOException if the JSON string is invalid with respect to ScatterViewProperties
   */
  public static ScatterViewProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScatterViewProperties.class);
  }

  /**
   * Convert an instance of ScatterViewProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

