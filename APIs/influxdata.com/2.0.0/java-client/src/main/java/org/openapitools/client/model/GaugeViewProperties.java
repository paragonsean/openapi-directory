/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DashboardColor;
import org.openapitools.client.model.DashboardQuery;
import org.openapitools.client.model.DecimalPlaces;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GaugeViewProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GaugeViewProperties {
  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<DashboardColor> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECIMAL_PLACES = "decimalPlaces";
  @SerializedName(SERIALIZED_NAME_DECIMAL_PLACES)
  private DecimalPlaces decimalPlaces;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<DashboardQuery> queries = new ArrayList<>();

  /**
   * Gets or Sets shape
   */
  @JsonAdapter(ShapeEnum.Adapter.class)
  public enum ShapeEnum {
    CHRONOGRAF_V2("chronograf-v2");

    private String value;

    ShapeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeEnum fromValue(String value) {
      for (ShapeEnum b : ShapeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShapeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShapeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShapeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private ShapeEnum shape;

  public static final String SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY = "showNoteWhenEmpty";
  @SerializedName(SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY)
  private Boolean showNoteWhenEmpty;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_TICK_PREFIX = "tickPrefix";
  @SerializedName(SERIALIZED_NAME_TICK_PREFIX)
  private String tickPrefix;

  public static final String SERIALIZED_NAME_TICK_SUFFIX = "tickSuffix";
  @SerializedName(SERIALIZED_NAME_TICK_SUFFIX)
  private String tickSuffix;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GAUGE("gauge");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GaugeViewProperties() {
  }

  public GaugeViewProperties colors(List<DashboardColor> colors) {
    this.colors = colors;
    return this;
  }

  public GaugeViewProperties addColorsItem(DashboardColor colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * Colors define color encoding of data into a visualization
   * @return colors
   */
  @javax.annotation.Nonnull
  public List<DashboardColor> getColors() {
    return colors;
  }

  public void setColors(List<DashboardColor> colors) {
    this.colors = colors;
  }


  public GaugeViewProperties decimalPlaces(DecimalPlaces decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
    return this;
  }

  /**
   * Get decimalPlaces
   * @return decimalPlaces
   */
  @javax.annotation.Nonnull
  public DecimalPlaces getDecimalPlaces() {
    return decimalPlaces;
  }

  public void setDecimalPlaces(DecimalPlaces decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }


  public GaugeViewProperties note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nonnull
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public GaugeViewProperties prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nonnull
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public GaugeViewProperties queries(List<DashboardQuery> queries) {
    this.queries = queries;
    return this;
  }

  public GaugeViewProperties addQueriesItem(DashboardQuery queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

  /**
   * Get queries
   * @return queries
   */
  @javax.annotation.Nonnull
  public List<DashboardQuery> getQueries() {
    return queries;
  }

  public void setQueries(List<DashboardQuery> queries) {
    this.queries = queries;
  }


  public GaugeViewProperties shape(ShapeEnum shape) {
    this.shape = shape;
    return this;
  }

  /**
   * Get shape
   * @return shape
   */
  @javax.annotation.Nonnull
  public ShapeEnum getShape() {
    return shape;
  }

  public void setShape(ShapeEnum shape) {
    this.shape = shape;
  }


  public GaugeViewProperties showNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
    return this;
  }

  /**
   * If true, will display note when empty
   * @return showNoteWhenEmpty
   */
  @javax.annotation.Nonnull
  public Boolean getShowNoteWhenEmpty() {
    return showNoteWhenEmpty;
  }

  public void setShowNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
  }


  public GaugeViewProperties suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

  /**
   * Get suffix
   * @return suffix
   */
  @javax.annotation.Nonnull
  public String getSuffix() {
    return suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }


  public GaugeViewProperties tickPrefix(String tickPrefix) {
    this.tickPrefix = tickPrefix;
    return this;
  }

  /**
   * Get tickPrefix
   * @return tickPrefix
   */
  @javax.annotation.Nonnull
  public String getTickPrefix() {
    return tickPrefix;
  }

  public void setTickPrefix(String tickPrefix) {
    this.tickPrefix = tickPrefix;
  }


  public GaugeViewProperties tickSuffix(String tickSuffix) {
    this.tickSuffix = tickSuffix;
    return this;
  }

  /**
   * Get tickSuffix
   * @return tickSuffix
   */
  @javax.annotation.Nonnull
  public String getTickSuffix() {
    return tickSuffix;
  }

  public void setTickSuffix(String tickSuffix) {
    this.tickSuffix = tickSuffix;
  }


  public GaugeViewProperties type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GaugeViewProperties gaugeViewProperties = (GaugeViewProperties) o;
    return Objects.equals(this.colors, gaugeViewProperties.colors) &&
        Objects.equals(this.decimalPlaces, gaugeViewProperties.decimalPlaces) &&
        Objects.equals(this.note, gaugeViewProperties.note) &&
        Objects.equals(this.prefix, gaugeViewProperties.prefix) &&
        Objects.equals(this.queries, gaugeViewProperties.queries) &&
        Objects.equals(this.shape, gaugeViewProperties.shape) &&
        Objects.equals(this.showNoteWhenEmpty, gaugeViewProperties.showNoteWhenEmpty) &&
        Objects.equals(this.suffix, gaugeViewProperties.suffix) &&
        Objects.equals(this.tickPrefix, gaugeViewProperties.tickPrefix) &&
        Objects.equals(this.tickSuffix, gaugeViewProperties.tickSuffix) &&
        Objects.equals(this.type, gaugeViewProperties.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colors, decimalPlaces, note, prefix, queries, shape, showNoteWhenEmpty, suffix, tickPrefix, tickSuffix, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GaugeViewProperties {\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    showNoteWhenEmpty: ").append(toIndentedString(showNoteWhenEmpty)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    tickPrefix: ").append(toIndentedString(tickPrefix)).append("\n");
    sb.append("    tickSuffix: ").append(toIndentedString(tickSuffix)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colors");
    openapiFields.add("decimalPlaces");
    openapiFields.add("note");
    openapiFields.add("prefix");
    openapiFields.add("queries");
    openapiFields.add("shape");
    openapiFields.add("showNoteWhenEmpty");
    openapiFields.add("suffix");
    openapiFields.add("tickPrefix");
    openapiFields.add("tickSuffix");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("colors");
    openapiRequiredFields.add("decimalPlaces");
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("prefix");
    openapiRequiredFields.add("queries");
    openapiRequiredFields.add("shape");
    openapiRequiredFields.add("showNoteWhenEmpty");
    openapiRequiredFields.add("suffix");
    openapiRequiredFields.add("tickPrefix");
    openapiRequiredFields.add("tickSuffix");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GaugeViewProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GaugeViewProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GaugeViewProperties is not found in the empty JSON string", GaugeViewProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GaugeViewProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GaugeViewProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GaugeViewProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }

      JsonArray jsonArraycolors = jsonObj.getAsJsonArray("colors");
      // validate the required field `colors` (array)
      for (int i = 0; i < jsonArraycolors.size(); i++) {
        DashboardColor.validateJsonElement(jsonArraycolors.get(i));
      };
      // validate the required field `decimalPlaces`
      DecimalPlaces.validateJsonElement(jsonObj.get("decimalPlaces"));
      if (!jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("queries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queries` to be an array in the JSON string but got `%s`", jsonObj.get("queries").toString()));
      }

      JsonArray jsonArrayqueries = jsonObj.getAsJsonArray("queries");
      // validate the required field `queries` (array)
      for (int i = 0; i < jsonArrayqueries.size(); i++) {
        DashboardQuery.validateJsonElement(jsonArrayqueries.get(i));
      };
      if (!jsonObj.get("shape").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shape` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shape").toString()));
      }
      // validate the required field `shape`
      ShapeEnum.validateJsonElement(jsonObj.get("shape"));
      if (!jsonObj.get("suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffix").toString()));
      }
      if (!jsonObj.get("tickPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tickPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tickPrefix").toString()));
      }
      if (!jsonObj.get("tickSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tickSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tickSuffix").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GaugeViewProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GaugeViewProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GaugeViewProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GaugeViewProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GaugeViewProperties>() {
           @Override
           public void write(JsonWriter out, GaugeViewProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GaugeViewProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GaugeViewProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GaugeViewProperties
   * @throws IOException if the JSON string is invalid with respect to GaugeViewProperties
   */
  public static GaugeViewProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GaugeViewProperties.class);
  }

  /**
   * Convert an instance of GaugeViewProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

