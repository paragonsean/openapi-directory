/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ASTResponse;
import org.openapitools.client.model.AnalyzeQueryResponse;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.FluxSuggestion;
import org.openapitools.client.model.FluxSuggestions;
import org.openapitools.client.model.LanguageRequest;
import org.openapitools.client.model.PostQueryRequest;
import org.openapitools.client.model.Query;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getQuerySuggestions
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suggestions for next functions in call chain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuerySuggestionsCall(String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuerySuggestionsValidateBeforeCall(String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        return getQuerySuggestionsCall(zapTraceSpan, _callback);

    }

    /**
     * Retrieve query suggestions
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return FluxSuggestions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suggestions for next functions in call chain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public FluxSuggestions getQuerySuggestions(String zapTraceSpan) throws ApiException {
        ApiResponse<FluxSuggestions> localVarResp = getQuerySuggestionsWithHttpInfo(zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve query suggestions
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;FluxSuggestions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suggestions for next functions in call chain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FluxSuggestions> getQuerySuggestionsWithHttpInfo(String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getQuerySuggestionsValidateBeforeCall(zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<FluxSuggestions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve query suggestions (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suggestions for next functions in call chain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuerySuggestionsAsync(String zapTraceSpan, final ApiCallback<FluxSuggestions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuerySuggestionsValidateBeforeCall(zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<FluxSuggestions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuerySuggestionsName
     * @param name The name of the branching suggestion. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suggestions for next functions in call chain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuerySuggestionsNameCall(String name, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query/suggestions/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuerySuggestionsNameValidateBeforeCall(String name, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getQuerySuggestionsName(Async)");
        }

        return getQuerySuggestionsNameCall(name, zapTraceSpan, _callback);

    }

    /**
     * Retrieve query suggestions for a branching suggestion
     * 
     * @param name The name of the branching suggestion. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return FluxSuggestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suggestions for next functions in call chain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public FluxSuggestion getQuerySuggestionsName(String name, String zapTraceSpan) throws ApiException {
        ApiResponse<FluxSuggestion> localVarResp = getQuerySuggestionsNameWithHttpInfo(name, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve query suggestions for a branching suggestion
     * 
     * @param name The name of the branching suggestion. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;FluxSuggestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suggestions for next functions in call chain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FluxSuggestion> getQuerySuggestionsNameWithHttpInfo(String name, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getQuerySuggestionsNameValidateBeforeCall(name, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<FluxSuggestion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve query suggestions for a branching suggestion (asynchronously)
     * 
     * @param name The name of the branching suggestion. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suggestions for next functions in call chain </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuerySuggestionsNameAsync(String name, String zapTraceSpan, final ApiCallback<FluxSuggestion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuerySuggestionsNameValidateBeforeCall(name, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<FluxSuggestion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postQuery
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param acceptEncoding The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, the client is able to understand. (optional, default to identity)
     * @param contentType  (optional)
     * @param org Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param orgID Specifies the ID of the organization executing the query. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param postQueryRequest Flux query or specification to execute (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results </td><td>  * Content-Encoding - The Content-Encoding entity header is used to compress the media-type.  When present, its value indicates which encodings were applied to the entity-body <br>  * Trace-Id - The Trace-Id header reports the request&#39;s trace ID, if one was generated. <br>  </td></tr>
        <tr><td> 429 </td><td> Token is temporarily over quota. The Retry-After header describes when to try the read again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 0 </td><td> Error processing query </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryCall(String zapTraceSpan, String acceptEncoding, String contentType, String org, String orgID, PostQueryRequest postQueryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postQueryRequest;

        // create path and map variables
        String localVarPath = "/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        if (acceptEncoding != null) {
            localVarHeaderParams.put("Accept-Encoding", localVarApiClient.parameterToString(acceptEncoding));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/vnd.influx.arrow",
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.flux"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postQueryValidateBeforeCall(String zapTraceSpan, String acceptEncoding, String contentType, String org, String orgID, PostQueryRequest postQueryRequest, final ApiCallback _callback) throws ApiException {
        return postQueryCall(zapTraceSpan, acceptEncoding, contentType, org, orgID, postQueryRequest, _callback);

    }

    /**
     * Query InfluxDB
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param acceptEncoding The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, the client is able to understand. (optional, default to identity)
     * @param contentType  (optional)
     * @param org Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param orgID Specifies the ID of the organization executing the query. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param postQueryRequest Flux query or specification to execute (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results </td><td>  * Content-Encoding - The Content-Encoding entity header is used to compress the media-type.  When present, its value indicates which encodings were applied to the entity-body <br>  * Trace-Id - The Trace-Id header reports the request&#39;s trace ID, if one was generated. <br>  </td></tr>
        <tr><td> 429 </td><td> Token is temporarily over quota. The Retry-After header describes when to try the read again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 0 </td><td> Error processing query </td><td>  -  </td></tr>
     </table>
     */
    public File postQuery(String zapTraceSpan, String acceptEncoding, String contentType, String org, String orgID, PostQueryRequest postQueryRequest) throws ApiException {
        ApiResponse<File> localVarResp = postQueryWithHttpInfo(zapTraceSpan, acceptEncoding, contentType, org, orgID, postQueryRequest);
        return localVarResp.getData();
    }

    /**
     * Query InfluxDB
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param acceptEncoding The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, the client is able to understand. (optional, default to identity)
     * @param contentType  (optional)
     * @param org Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param orgID Specifies the ID of the organization executing the query. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param postQueryRequest Flux query or specification to execute (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results </td><td>  * Content-Encoding - The Content-Encoding entity header is used to compress the media-type.  When present, its value indicates which encodings were applied to the entity-body <br>  * Trace-Id - The Trace-Id header reports the request&#39;s trace ID, if one was generated. <br>  </td></tr>
        <tr><td> 429 </td><td> Token is temporarily over quota. The Retry-After header describes when to try the read again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 0 </td><td> Error processing query </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> postQueryWithHttpInfo(String zapTraceSpan, String acceptEncoding, String contentType, String org, String orgID, PostQueryRequest postQueryRequest) throws ApiException {
        okhttp3.Call localVarCall = postQueryValidateBeforeCall(zapTraceSpan, acceptEncoding, contentType, org, orgID, postQueryRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query InfluxDB (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param acceptEncoding The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, the client is able to understand. (optional, default to identity)
     * @param contentType  (optional)
     * @param org Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param orgID Specifies the ID of the organization executing the query. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param postQueryRequest Flux query or specification to execute (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results </td><td>  * Content-Encoding - The Content-Encoding entity header is used to compress the media-type.  When present, its value indicates which encodings were applied to the entity-body <br>  * Trace-Id - The Trace-Id header reports the request&#39;s trace ID, if one was generated. <br>  </td></tr>
        <tr><td> 429 </td><td> Token is temporarily over quota. The Retry-After header describes when to try the read again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 0 </td><td> Error processing query </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryAsync(String zapTraceSpan, String acceptEncoding, String contentType, String org, String orgID, PostQueryRequest postQueryRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = postQueryValidateBeforeCall(zapTraceSpan, acceptEncoding, contentType, org, orgID, postQueryRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postQueryAnalyze
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentType  (optional)
     * @param query Flux or InfluxQL query to analyze (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query analyze results. Errors will be empty if the query is valid. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  * X-Influx-Error - Error string describing the problem <br>  * X-Influx-Reference - Reference code unique to the error type <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryAnalyzeCall(String zapTraceSpan, String contentType, Query query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/query/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postQueryAnalyzeValidateBeforeCall(String zapTraceSpan, String contentType, Query query, final ApiCallback _callback) throws ApiException {
        return postQueryAnalyzeCall(zapTraceSpan, contentType, query, _callback);

    }

    /**
     * Analyze an InfluxQL or Flux query
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentType  (optional)
     * @param query Flux or InfluxQL query to analyze (optional)
     * @return AnalyzeQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query analyze results. Errors will be empty if the query is valid. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  * X-Influx-Error - Error string describing the problem <br>  * X-Influx-Reference - Reference code unique to the error type <br>  </td></tr>
     </table>
     */
    public AnalyzeQueryResponse postQueryAnalyze(String zapTraceSpan, String contentType, Query query) throws ApiException {
        ApiResponse<AnalyzeQueryResponse> localVarResp = postQueryAnalyzeWithHttpInfo(zapTraceSpan, contentType, query);
        return localVarResp.getData();
    }

    /**
     * Analyze an InfluxQL or Flux query
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentType  (optional)
     * @param query Flux or InfluxQL query to analyze (optional)
     * @return ApiResponse&lt;AnalyzeQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query analyze results. Errors will be empty if the query is valid. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  * X-Influx-Error - Error string describing the problem <br>  * X-Influx-Reference - Reference code unique to the error type <br>  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeQueryResponse> postQueryAnalyzeWithHttpInfo(String zapTraceSpan, String contentType, Query query) throws ApiException {
        okhttp3.Call localVarCall = postQueryAnalyzeValidateBeforeCall(zapTraceSpan, contentType, query, null);
        Type localVarReturnType = new TypeToken<AnalyzeQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze an InfluxQL or Flux query (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentType  (optional)
     * @param query Flux or InfluxQL query to analyze (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query analyze results. Errors will be empty if the query is valid. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  * X-Influx-Error - Error string describing the problem <br>  * X-Influx-Reference - Reference code unique to the error type <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryAnalyzeAsync(String zapTraceSpan, String contentType, Query query, final ApiCallback<AnalyzeQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postQueryAnalyzeValidateBeforeCall(zapTraceSpan, contentType, query, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postQueryAst
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentType  (optional)
     * @param languageRequest Analyzed Flux query to generate abstract syntax tree. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Abstract syntax tree of the flux query. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryAstCall(String zapTraceSpan, String contentType, LanguageRequest languageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = languageRequest;

        // create path and map variables
        String localVarPath = "/query/ast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postQueryAstValidateBeforeCall(String zapTraceSpan, String contentType, LanguageRequest languageRequest, final ApiCallback _callback) throws ApiException {
        return postQueryAstCall(zapTraceSpan, contentType, languageRequest, _callback);

    }

    /**
     * Generate an Abstract Syntax Tree (AST) from a query
     * Analyzes flux query and generates a query specification.
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentType  (optional)
     * @param languageRequest Analyzed Flux query to generate abstract syntax tree. (optional)
     * @return ASTResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Abstract syntax tree of the flux query. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ASTResponse postQueryAst(String zapTraceSpan, String contentType, LanguageRequest languageRequest) throws ApiException {
        ApiResponse<ASTResponse> localVarResp = postQueryAstWithHttpInfo(zapTraceSpan, contentType, languageRequest);
        return localVarResp.getData();
    }

    /**
     * Generate an Abstract Syntax Tree (AST) from a query
     * Analyzes flux query and generates a query specification.
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentType  (optional)
     * @param languageRequest Analyzed Flux query to generate abstract syntax tree. (optional)
     * @return ApiResponse&lt;ASTResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Abstract syntax tree of the flux query. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ASTResponse> postQueryAstWithHttpInfo(String zapTraceSpan, String contentType, LanguageRequest languageRequest) throws ApiException {
        okhttp3.Call localVarCall = postQueryAstValidateBeforeCall(zapTraceSpan, contentType, languageRequest, null);
        Type localVarReturnType = new TypeToken<ASTResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an Abstract Syntax Tree (AST) from a query (asynchronously)
     * Analyzes flux query and generates a query specification.
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentType  (optional)
     * @param languageRequest Analyzed Flux query to generate abstract syntax tree. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Abstract syntax tree of the flux query. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any response other than 200 is an internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryAstAsync(String zapTraceSpan, String contentType, LanguageRequest languageRequest, final ApiCallback<ASTResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postQueryAstValidateBeforeCall(zapTraceSpan, contentType, languageRequest, _callback);
        Type localVarReturnType = new TypeToken<ASTResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
