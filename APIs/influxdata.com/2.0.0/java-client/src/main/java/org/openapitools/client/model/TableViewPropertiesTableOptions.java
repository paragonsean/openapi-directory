/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RenamableField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableViewPropertiesTableOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableViewPropertiesTableOptions {
  public static final String SERIALIZED_NAME_FIX_FIRST_COLUMN = "fixFirstColumn";
  @SerializedName(SERIALIZED_NAME_FIX_FIRST_COLUMN)
  private Boolean fixFirstColumn;

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private RenamableField sortBy;

  public static final String SERIALIZED_NAME_VERTICAL_TIME_AXIS = "verticalTimeAxis";
  @SerializedName(SERIALIZED_NAME_VERTICAL_TIME_AXIS)
  private Boolean verticalTimeAxis;

  /**
   * Wrapping describes the text wrapping style to be used in table views
   */
  @JsonAdapter(WrappingEnum.Adapter.class)
  public enum WrappingEnum {
    TRUNCATE("truncate"),
    
    WRAP("wrap"),
    
    SINGLE_LINE("single-line");

    private String value;

    WrappingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WrappingEnum fromValue(String value) {
      for (WrappingEnum b : WrappingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WrappingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WrappingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WrappingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WrappingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WrappingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WRAPPING = "wrapping";
  @SerializedName(SERIALIZED_NAME_WRAPPING)
  private WrappingEnum wrapping;

  public TableViewPropertiesTableOptions() {
  }

  public TableViewPropertiesTableOptions fixFirstColumn(Boolean fixFirstColumn) {
    this.fixFirstColumn = fixFirstColumn;
    return this;
  }

  /**
   * fixFirstColumn indicates whether the first column of the table should be locked
   * @return fixFirstColumn
   */
  @javax.annotation.Nullable
  public Boolean getFixFirstColumn() {
    return fixFirstColumn;
  }

  public void setFixFirstColumn(Boolean fixFirstColumn) {
    this.fixFirstColumn = fixFirstColumn;
  }


  public TableViewPropertiesTableOptions sortBy(RenamableField sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public RenamableField getSortBy() {
    return sortBy;
  }

  public void setSortBy(RenamableField sortBy) {
    this.sortBy = sortBy;
  }


  public TableViewPropertiesTableOptions verticalTimeAxis(Boolean verticalTimeAxis) {
    this.verticalTimeAxis = verticalTimeAxis;
    return this;
  }

  /**
   * verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically
   * @return verticalTimeAxis
   */
  @javax.annotation.Nullable
  public Boolean getVerticalTimeAxis() {
    return verticalTimeAxis;
  }

  public void setVerticalTimeAxis(Boolean verticalTimeAxis) {
    this.verticalTimeAxis = verticalTimeAxis;
  }


  public TableViewPropertiesTableOptions wrapping(WrappingEnum wrapping) {
    this.wrapping = wrapping;
    return this;
  }

  /**
   * Wrapping describes the text wrapping style to be used in table views
   * @return wrapping
   */
  @javax.annotation.Nullable
  public WrappingEnum getWrapping() {
    return wrapping;
  }

  public void setWrapping(WrappingEnum wrapping) {
    this.wrapping = wrapping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableViewPropertiesTableOptions tableViewPropertiesTableOptions = (TableViewPropertiesTableOptions) o;
    return Objects.equals(this.fixFirstColumn, tableViewPropertiesTableOptions.fixFirstColumn) &&
        Objects.equals(this.sortBy, tableViewPropertiesTableOptions.sortBy) &&
        Objects.equals(this.verticalTimeAxis, tableViewPropertiesTableOptions.verticalTimeAxis) &&
        Objects.equals(this.wrapping, tableViewPropertiesTableOptions.wrapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixFirstColumn, sortBy, verticalTimeAxis, wrapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableViewPropertiesTableOptions {\n");
    sb.append("    fixFirstColumn: ").append(toIndentedString(fixFirstColumn)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    verticalTimeAxis: ").append(toIndentedString(verticalTimeAxis)).append("\n");
    sb.append("    wrapping: ").append(toIndentedString(wrapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixFirstColumn");
    openapiFields.add("sortBy");
    openapiFields.add("verticalTimeAxis");
    openapiFields.add("wrapping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableViewPropertiesTableOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableViewPropertiesTableOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableViewPropertiesTableOptions is not found in the empty JSON string", TableViewPropertiesTableOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableViewPropertiesTableOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableViewPropertiesTableOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sortBy`
      if (jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) {
        RenamableField.validateJsonElement(jsonObj.get("sortBy"));
      }
      if ((jsonObj.get("wrapping") != null && !jsonObj.get("wrapping").isJsonNull()) && !jsonObj.get("wrapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wrapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wrapping").toString()));
      }
      // validate the optional field `wrapping`
      if (jsonObj.get("wrapping") != null && !jsonObj.get("wrapping").isJsonNull()) {
        WrappingEnum.validateJsonElement(jsonObj.get("wrapping"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableViewPropertiesTableOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableViewPropertiesTableOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableViewPropertiesTableOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableViewPropertiesTableOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<TableViewPropertiesTableOptions>() {
           @Override
           public void write(JsonWriter out, TableViewPropertiesTableOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableViewPropertiesTableOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableViewPropertiesTableOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableViewPropertiesTableOptions
   * @throws IOException if the JSON string is invalid with respect to TableViewPropertiesTableOptions
   */
  public static TableViewPropertiesTableOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableViewPropertiesTableOptions.class);
  }

  /**
   * Convert an instance of TableViewPropertiesTableOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

