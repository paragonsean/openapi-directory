/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.ScraperTargetRequest;
import org.openapitools.client.model.ScraperTargetResponse;
import org.openapitools.client.model.ScraperTargetResponses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScraperTargetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScraperTargetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScraperTargetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteScrapersID
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Scraper target deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScrapersIDCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScrapersIDValidateBeforeCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling deleteScrapersID(Async)");
        }

        return deleteScrapersIDCall(scraperTargetID, zapTraceSpan, _callback);

    }

    /**
     * Delete a scraper target
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Scraper target deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScrapersID(String scraperTargetID, String zapTraceSpan) throws ApiException {
        deleteScrapersIDWithHttpInfo(scraperTargetID, zapTraceSpan);
    }

    /**
     * Delete a scraper target
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Scraper target deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScrapersIDWithHttpInfo(String scraperTargetID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteScrapersIDValidateBeforeCall(scraperTargetID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a scraper target (asynchronously)
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Scraper target deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScrapersIDAsync(String scraperTargetID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScrapersIDValidateBeforeCall(scraperTargetID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScrapersIDLabelsID
     * @param scraperTargetID The scraper target ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scraper target not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScrapersIDLabelsIDCall(String scraperTargetID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/labels/{labelID}"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScrapersIDLabelsIDValidateBeforeCall(String scraperTargetID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling deleteScrapersIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteScrapersIDLabelsID(Async)");
        }

        return deleteScrapersIDLabelsIDCall(scraperTargetID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete a label from a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scraper target not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScrapersIDLabelsID(String scraperTargetID, String labelID, String zapTraceSpan) throws ApiException {
        deleteScrapersIDLabelsIDWithHttpInfo(scraperTargetID, labelID, zapTraceSpan);
    }

    /**
     * Delete a label from a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scraper target not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScrapersIDLabelsIDWithHttpInfo(String scraperTargetID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteScrapersIDLabelsIDValidateBeforeCall(scraperTargetID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label from a scraper target (asynchronously)
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Scraper target not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScrapersIDLabelsIDAsync(String scraperTargetID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScrapersIDLabelsIDValidateBeforeCall(scraperTargetID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScrapersIDMembersID
     * @param userID The ID of member to remove. (required)
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScrapersIDMembersIDCall(String userID, String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/members/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScrapersIDMembersIDValidateBeforeCall(String userID, String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteScrapersIDMembersID(Async)");
        }

        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling deleteScrapersIDMembersID(Async)");
        }

        return deleteScrapersIDMembersIDCall(userID, scraperTargetID, zapTraceSpan, _callback);

    }

    /**
     * Remove a member from a scraper target
     * 
     * @param userID The ID of member to remove. (required)
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScrapersIDMembersID(String userID, String scraperTargetID, String zapTraceSpan) throws ApiException {
        deleteScrapersIDMembersIDWithHttpInfo(userID, scraperTargetID, zapTraceSpan);
    }

    /**
     * Remove a member from a scraper target
     * 
     * @param userID The ID of member to remove. (required)
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScrapersIDMembersIDWithHttpInfo(String userID, String scraperTargetID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteScrapersIDMembersIDValidateBeforeCall(userID, scraperTargetID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a member from a scraper target (asynchronously)
     * 
     * @param userID The ID of member to remove. (required)
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScrapersIDMembersIDAsync(String userID, String scraperTargetID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScrapersIDMembersIDValidateBeforeCall(userID, scraperTargetID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScrapersIDOwnersID
     * @param userID The ID of owner to remove. (required)
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScrapersIDOwnersIDCall(String userID, String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/owners/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScrapersIDOwnersIDValidateBeforeCall(String userID, String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteScrapersIDOwnersID(Async)");
        }

        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling deleteScrapersIDOwnersID(Async)");
        }

        return deleteScrapersIDOwnersIDCall(userID, scraperTargetID, zapTraceSpan, _callback);

    }

    /**
     * Remove an owner from a scraper target
     * 
     * @param userID The ID of owner to remove. (required)
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScrapersIDOwnersID(String userID, String scraperTargetID, String zapTraceSpan) throws ApiException {
        deleteScrapersIDOwnersIDWithHttpInfo(userID, scraperTargetID, zapTraceSpan);
    }

    /**
     * Remove an owner from a scraper target
     * 
     * @param userID The ID of owner to remove. (required)
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScrapersIDOwnersIDWithHttpInfo(String userID, String scraperTargetID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteScrapersIDOwnersIDValidateBeforeCall(userID, scraperTargetID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an owner from a scraper target (asynchronously)
     * 
     * @param userID The ID of owner to remove. (required)
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScrapersIDOwnersIDAsync(String userID, String scraperTargetID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScrapersIDOwnersIDValidateBeforeCall(userID, scraperTargetID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScrapers
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param name Specifies the name of the scraper target. (optional)
     * @param id List of scraper target IDs to return. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)
     * @param orgID Specifies the organization ID of the scraper target. (optional)
     * @param org Specifies the organization name of the scraper target. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All scraper targets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersCall(String zapTraceSpan, String name, List<String> id, String orgID, String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScrapersValidateBeforeCall(String zapTraceSpan, String name, List<String> id, String orgID, String org, final ApiCallback _callback) throws ApiException {
        return getScrapersCall(zapTraceSpan, name, id, orgID, org, _callback);

    }

    /**
     * List all scraper targets
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param name Specifies the name of the scraper target. (optional)
     * @param id List of scraper target IDs to return. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)
     * @param orgID Specifies the organization ID of the scraper target. (optional)
     * @param org Specifies the organization name of the scraper target. (optional)
     * @return ScraperTargetResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All scraper targets </td><td>  -  </td></tr>
     </table>
     */
    public ScraperTargetResponses getScrapers(String zapTraceSpan, String name, List<String> id, String orgID, String org) throws ApiException {
        ApiResponse<ScraperTargetResponses> localVarResp = getScrapersWithHttpInfo(zapTraceSpan, name, id, orgID, org);
        return localVarResp.getData();
    }

    /**
     * List all scraper targets
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param name Specifies the name of the scraper target. (optional)
     * @param id List of scraper target IDs to return. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)
     * @param orgID Specifies the organization ID of the scraper target. (optional)
     * @param org Specifies the organization name of the scraper target. (optional)
     * @return ApiResponse&lt;ScraperTargetResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All scraper targets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScraperTargetResponses> getScrapersWithHttpInfo(String zapTraceSpan, String name, List<String> id, String orgID, String org) throws ApiException {
        okhttp3.Call localVarCall = getScrapersValidateBeforeCall(zapTraceSpan, name, id, orgID, org, null);
        Type localVarReturnType = new TypeToken<ScraperTargetResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all scraper targets (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param name Specifies the name of the scraper target. (optional)
     * @param id List of scraper target IDs to return. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)
     * @param orgID Specifies the organization ID of the scraper target. (optional)
     * @param org Specifies the organization name of the scraper target. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All scraper targets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersAsync(String zapTraceSpan, String name, List<String> id, String orgID, String org, final ApiCallback<ScraperTargetResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScrapersValidateBeforeCall(zapTraceSpan, name, id, orgID, org, _callback);
        Type localVarReturnType = new TypeToken<ScraperTargetResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScrapersID
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The scraper target </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersIDCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScrapersIDValidateBeforeCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling getScrapersID(Async)");
        }

        return getScrapersIDCall(scraperTargetID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a scraper target
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ScraperTargetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The scraper target </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ScraperTargetResponse getScrapersID(String scraperTargetID, String zapTraceSpan) throws ApiException {
        ApiResponse<ScraperTargetResponse> localVarResp = getScrapersIDWithHttpInfo(scraperTargetID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a scraper target
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ScraperTargetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The scraper target </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScraperTargetResponse> getScrapersIDWithHttpInfo(String scraperTargetID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getScrapersIDValidateBeforeCall(scraperTargetID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ScraperTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a scraper target (asynchronously)
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The scraper target </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersIDAsync(String scraperTargetID, String zapTraceSpan, final ApiCallback<ScraperTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScrapersIDValidateBeforeCall(scraperTargetID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ScraperTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScrapersIDLabels
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of labels for a scraper target. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersIDLabelsCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/labels"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScrapersIDLabelsValidateBeforeCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling getScrapersIDLabels(Async)");
        }

        return getScrapersIDLabelsCall(scraperTargetID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of labels for a scraper target. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getScrapersIDLabels(String scraperTargetID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getScrapersIDLabelsWithHttpInfo(scraperTargetID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of labels for a scraper target. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getScrapersIDLabelsWithHttpInfo(String scraperTargetID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getScrapersIDLabelsValidateBeforeCall(scraperTargetID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a scraper target (asynchronously)
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of labels for a scraper target. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersIDLabelsAsync(String scraperTargetID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScrapersIDLabelsValidateBeforeCall(scraperTargetID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScrapersIDMembers
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scraper target members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersIDMembersCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/members"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScrapersIDMembersValidateBeforeCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling getScrapersIDMembers(Async)");
        }

        return getScrapersIDMembersCall(scraperTargetID, zapTraceSpan, _callback);

    }

    /**
     * List all users with member privileges for a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scraper target members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMembers getScrapersIDMembers(String scraperTargetID, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceMembers> localVarResp = getScrapersIDMembersWithHttpInfo(scraperTargetID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all users with member privileges for a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scraper target members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMembers> getScrapersIDMembersWithHttpInfo(String scraperTargetID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getScrapersIDMembersValidateBeforeCall(scraperTargetID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all users with member privileges for a scraper target (asynchronously)
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scraper target members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersIDMembersAsync(String scraperTargetID, String zapTraceSpan, final ApiCallback<ResourceMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScrapersIDMembersValidateBeforeCall(scraperTargetID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScrapersIDOwners
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scraper target owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersIDOwnersCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/owners"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScrapersIDOwnersValidateBeforeCall(String scraperTargetID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling getScrapersIDOwners(Async)");
        }

        return getScrapersIDOwnersCall(scraperTargetID, zapTraceSpan, _callback);

    }

    /**
     * List all owners of a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceOwners
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scraper target owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOwners getScrapersIDOwners(String scraperTargetID, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceOwners> localVarResp = getScrapersIDOwnersWithHttpInfo(scraperTargetID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all owners of a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceOwners&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scraper target owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOwners> getScrapersIDOwnersWithHttpInfo(String scraperTargetID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getScrapersIDOwnersValidateBeforeCall(scraperTargetID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceOwners>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all owners of a scraper target (asynchronously)
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of scraper target owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrapersIDOwnersAsync(String scraperTargetID, String zapTraceSpan, final ApiCallback<ResourceOwners> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScrapersIDOwnersValidateBeforeCall(scraperTargetID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceOwners>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchScrapersID
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param scraperTargetRequest Scraper target update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scraper target updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchScrapersIDCall(String scraperTargetID, ScraperTargetRequest scraperTargetRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scraperTargetRequest;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchScrapersIDValidateBeforeCall(String scraperTargetID, ScraperTargetRequest scraperTargetRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling patchScrapersID(Async)");
        }

        // verify the required parameter 'scraperTargetRequest' is set
        if (scraperTargetRequest == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetRequest' when calling patchScrapersID(Async)");
        }

        return patchScrapersIDCall(scraperTargetID, scraperTargetRequest, zapTraceSpan, _callback);

    }

    /**
     * Update a scraper target
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param scraperTargetRequest Scraper target update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ScraperTargetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scraper target updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ScraperTargetResponse patchScrapersID(String scraperTargetID, ScraperTargetRequest scraperTargetRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<ScraperTargetResponse> localVarResp = patchScrapersIDWithHttpInfo(scraperTargetID, scraperTargetRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a scraper target
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param scraperTargetRequest Scraper target update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ScraperTargetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scraper target updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScraperTargetResponse> patchScrapersIDWithHttpInfo(String scraperTargetID, ScraperTargetRequest scraperTargetRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchScrapersIDValidateBeforeCall(scraperTargetID, scraperTargetRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ScraperTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a scraper target (asynchronously)
     * 
     * @param scraperTargetID The identifier of the scraper target. (required)
     * @param scraperTargetRequest Scraper target update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Scraper target updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchScrapersIDAsync(String scraperTargetID, ScraperTargetRequest scraperTargetRequest, String zapTraceSpan, final ApiCallback<ScraperTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchScrapersIDValidateBeforeCall(scraperTargetID, scraperTargetRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ScraperTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postScrapers
     * @param scraperTargetRequest Scraper target to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Scraper target created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScrapersCall(ScraperTargetRequest scraperTargetRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scraperTargetRequest;

        // create path and map variables
        String localVarPath = "/scrapers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postScrapersValidateBeforeCall(ScraperTargetRequest scraperTargetRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetRequest' is set
        if (scraperTargetRequest == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetRequest' when calling postScrapers(Async)");
        }

        return postScrapersCall(scraperTargetRequest, zapTraceSpan, _callback);

    }

    /**
     * Create a scraper target
     * 
     * @param scraperTargetRequest Scraper target to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ScraperTargetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Scraper target created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ScraperTargetResponse postScrapers(ScraperTargetRequest scraperTargetRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<ScraperTargetResponse> localVarResp = postScrapersWithHttpInfo(scraperTargetRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a scraper target
     * 
     * @param scraperTargetRequest Scraper target to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ScraperTargetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Scraper target created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScraperTargetResponse> postScrapersWithHttpInfo(ScraperTargetRequest scraperTargetRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postScrapersValidateBeforeCall(scraperTargetRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ScraperTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a scraper target (asynchronously)
     * 
     * @param scraperTargetRequest Scraper target to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Scraper target created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScrapersAsync(ScraperTargetRequest scraperTargetRequest, String zapTraceSpan, final ApiCallback<ScraperTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postScrapersValidateBeforeCall(scraperTargetRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ScraperTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postScrapersIDLabels
     * @param scraperTargetID The scraper target ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly added label </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScrapersIDLabelsCall(String scraperTargetID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/labels"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postScrapersIDLabelsValidateBeforeCall(String scraperTargetID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling postScrapersIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postScrapersIDLabels(Async)");
        }

        return postScrapersIDLabelsCall(scraperTargetID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly added label </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postScrapersIDLabels(String scraperTargetID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postScrapersIDLabelsWithHttpInfo(scraperTargetID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly added label </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postScrapersIDLabelsWithHttpInfo(String scraperTargetID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postScrapersIDLabelsValidateBeforeCall(scraperTargetID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a scraper target (asynchronously)
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly added label </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScrapersIDLabelsAsync(String scraperTargetID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postScrapersIDLabelsValidateBeforeCall(scraperTargetID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postScrapersIDMembers
     * @param scraperTargetID The scraper target ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Member added to scraper targets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScrapersIDMembersCall(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResourceMemberRequestBody;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/members"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postScrapersIDMembersValidateBeforeCall(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling postScrapersIDMembers(Async)");
        }

        // verify the required parameter 'addResourceMemberRequestBody' is set
        if (addResourceMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addResourceMemberRequestBody' when calling postScrapersIDMembers(Async)");
        }

        return postScrapersIDMembersCall(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, _callback);

    }

    /**
     * Add a member to a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Member added to scraper targets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMember postScrapersIDMembers(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceMember> localVarResp = postScrapersIDMembersWithHttpInfo(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a member to a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Member added to scraper targets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMember> postScrapersIDMembersWithHttpInfo(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postScrapersIDMembersValidateBeforeCall(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a member to a scraper target (asynchronously)
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Member added to scraper targets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScrapersIDMembersAsync(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback<ResourceMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = postScrapersIDMembersValidateBeforeCall(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postScrapersIDOwners
     * @param scraperTargetID The scraper target ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Scraper target owner added </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScrapersIDOwnersCall(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResourceMemberRequestBody;

        // create path and map variables
        String localVarPath = "/scrapers/{scraperTargetID}/owners"
            .replace("{" + "scraperTargetID" + "}", localVarApiClient.escapeString(scraperTargetID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postScrapersIDOwnersValidateBeforeCall(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scraperTargetID' is set
        if (scraperTargetID == null) {
            throw new ApiException("Missing the required parameter 'scraperTargetID' when calling postScrapersIDOwners(Async)");
        }

        // verify the required parameter 'addResourceMemberRequestBody' is set
        if (addResourceMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addResourceMemberRequestBody' when calling postScrapersIDOwners(Async)");
        }

        return postScrapersIDOwnersCall(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, _callback);

    }

    /**
     * Add an owner to a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceOwner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Scraper target owner added </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOwner postScrapersIDOwners(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceOwner> localVarResp = postScrapersIDOwnersWithHttpInfo(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add an owner to a scraper target
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceOwner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Scraper target owner added </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOwner> postScrapersIDOwnersWithHttpInfo(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postScrapersIDOwnersValidateBeforeCall(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceOwner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an owner to a scraper target (asynchronously)
     * 
     * @param scraperTargetID The scraper target ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Scraper target owner added </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScrapersIDOwnersAsync(String scraperTargetID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback<ResourceOwner> _callback) throws ApiException {

        okhttp3.Call localVarCall = postScrapersIDOwnersValidateBeforeCall(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceOwner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
