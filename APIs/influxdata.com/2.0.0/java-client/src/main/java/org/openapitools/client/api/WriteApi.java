/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.LineProtocolError;
import org.openapitools.client.model.LineProtocolLengthError;
import org.openapitools.client.model.WritePrecision;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WriteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WriteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WriteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postWrite
     * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (required)
     * @param bucket The destination bucket for writes. (required)
     * @param body Line protocol body (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentEncoding When present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to identity)
     * @param contentType Content-Type is used to indicate the format of the data sent to the server. (optional, default to text/plain; charset&#x3D;utf-8)
     * @param contentLength Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param accept Specifies the return content format. (optional, default to application/json)
     * @param orgID Specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param precision The precision for the unix timestamps within the body line-protocol. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Write data is correctly formatted and accepted for writing to the bucket. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token does not have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No token was sent and they are required. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Token is temporarily over quota. The Retry-After header describes when to try the write again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 503 </td><td> Server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWriteCall(String org, String bucket, byte[] body, String zapTraceSpan, String contentEncoding, String contentType, Integer contentLength, String accept, String orgID, WritePrecision precision, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/write";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (bucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bucket", bucket));
        }

        if (precision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("precision", precision));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        if (contentEncoding != null) {
            localVarHeaderParams.put("Content-Encoding", localVarApiClient.parameterToString(contentEncoding));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (contentLength != null) {
            localVarHeaderParams.put("Content-Length", localVarApiClient.parameterToString(contentLength));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWriteValidateBeforeCall(String org, String bucket, byte[] body, String zapTraceSpan, String contentEncoding, String contentType, Integer contentLength, String accept, String orgID, WritePrecision precision, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling postWrite(Async)");
        }

        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling postWrite(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postWrite(Async)");
        }

        return postWriteCall(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, orgID, precision, _callback);

    }

    /**
     * Write time series data into InfluxDB
     * 
     * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (required)
     * @param bucket The destination bucket for writes. (required)
     * @param body Line protocol body (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentEncoding When present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to identity)
     * @param contentType Content-Type is used to indicate the format of the data sent to the server. (optional, default to text/plain; charset&#x3D;utf-8)
     * @param contentLength Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param accept Specifies the return content format. (optional, default to application/json)
     * @param orgID Specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param precision The precision for the unix timestamps within the body line-protocol. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Write data is correctly formatted and accepted for writing to the bucket. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token does not have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No token was sent and they are required. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Token is temporarily over quota. The Retry-After header describes when to try the write again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 503 </td><td> Server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void postWrite(String org, String bucket, byte[] body, String zapTraceSpan, String contentEncoding, String contentType, Integer contentLength, String accept, String orgID, WritePrecision precision) throws ApiException {
        postWriteWithHttpInfo(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, orgID, precision);
    }

    /**
     * Write time series data into InfluxDB
     * 
     * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (required)
     * @param bucket The destination bucket for writes. (required)
     * @param body Line protocol body (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentEncoding When present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to identity)
     * @param contentType Content-Type is used to indicate the format of the data sent to the server. (optional, default to text/plain; charset&#x3D;utf-8)
     * @param contentLength Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param accept Specifies the return content format. (optional, default to application/json)
     * @param orgID Specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param precision The precision for the unix timestamps within the body line-protocol. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Write data is correctly formatted and accepted for writing to the bucket. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token does not have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No token was sent and they are required. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Token is temporarily over quota. The Retry-After header describes when to try the write again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 503 </td><td> Server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postWriteWithHttpInfo(String org, String bucket, byte[] body, String zapTraceSpan, String contentEncoding, String contentType, Integer contentLength, String accept, String orgID, WritePrecision precision) throws ApiException {
        okhttp3.Call localVarCall = postWriteValidateBeforeCall(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, orgID, precision, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Write time series data into InfluxDB (asynchronously)
     * 
     * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (required)
     * @param bucket The destination bucket for writes. (required)
     * @param body Line protocol body (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param contentEncoding When present, its value indicates to the database that compression is applied to the line-protocol body. (optional, default to identity)
     * @param contentType Content-Type is used to indicate the format of the data sent to the server. (optional, default to text/plain; charset&#x3D;utf-8)
     * @param contentLength Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent. (optional)
     * @param accept Specifies the return content format. (optional, default to application/json)
     * @param orgID Specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)
     * @param precision The precision for the unix timestamps within the body line-protocol. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Write data is correctly formatted and accepted for writing to the bucket. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token does not have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No token was sent and they are required. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Token is temporarily over quota. The Retry-After header describes when to try the write again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 503 </td><td> Server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again. </td><td>  * Retry-After - A non-negative decimal integer indicating the seconds to delay after the response is received. <br>  </td></tr>
        <tr><td> 0 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWriteAsync(String org, String bucket, byte[] body, String zapTraceSpan, String contentEncoding, String contentType, Integer contentLength, String accept, String orgID, WritePrecision precision, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWriteValidateBeforeCall(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, orgID, precision, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
