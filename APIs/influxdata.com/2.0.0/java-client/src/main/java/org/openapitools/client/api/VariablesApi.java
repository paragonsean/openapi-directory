/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.Variable;
import org.openapitools.client.model.Variables;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VariablesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VariablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VariablesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteVariablesID
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Variable deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariablesIDCall(String variableID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variables/{variableID}"
            .replace("{" + "variableID" + "}", localVarApiClient.escapeString(variableID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVariablesIDValidateBeforeCall(String variableID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableID' is set
        if (variableID == null) {
            throw new ApiException("Missing the required parameter 'variableID' when calling deleteVariablesID(Async)");
        }

        return deleteVariablesIDCall(variableID, zapTraceSpan, _callback);

    }

    /**
     * Delete a variable
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Variable deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVariablesID(String variableID, String zapTraceSpan) throws ApiException {
        deleteVariablesIDWithHttpInfo(variableID, zapTraceSpan);
    }

    /**
     * Delete a variable
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Variable deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVariablesIDWithHttpInfo(String variableID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteVariablesIDValidateBeforeCall(variableID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a variable (asynchronously)
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Variable deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariablesIDAsync(String variableID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVariablesIDValidateBeforeCall(variableID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVariablesIDLabelsID
     * @param variableID The variable ID. (required)
     * @param labelID The label ID to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Variable not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariablesIDLabelsIDCall(String variableID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variables/{variableID}/labels/{labelID}"
            .replace("{" + "variableID" + "}", localVarApiClient.escapeString(variableID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVariablesIDLabelsIDValidateBeforeCall(String variableID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableID' is set
        if (variableID == null) {
            throw new ApiException("Missing the required parameter 'variableID' when calling deleteVariablesIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteVariablesIDLabelsID(Async)");
        }

        return deleteVariablesIDLabelsIDCall(variableID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete a label from a variable
     * 
     * @param variableID The variable ID. (required)
     * @param labelID The label ID to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Variable not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVariablesIDLabelsID(String variableID, String labelID, String zapTraceSpan) throws ApiException {
        deleteVariablesIDLabelsIDWithHttpInfo(variableID, labelID, zapTraceSpan);
    }

    /**
     * Delete a label from a variable
     * 
     * @param variableID The variable ID. (required)
     * @param labelID The label ID to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Variable not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVariablesIDLabelsIDWithHttpInfo(String variableID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteVariablesIDLabelsIDValidateBeforeCall(variableID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label from a variable (asynchronously)
     * 
     * @param variableID The variable ID. (required)
     * @param labelID The label ID to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Variable not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariablesIDLabelsIDAsync(String variableID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVariablesIDLabelsIDValidateBeforeCall(variableID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariables
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @param orgID The organization ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of variables for an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesCall(String zapTraceSpan, String org, String orgID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (org != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariablesValidateBeforeCall(String zapTraceSpan, String org, String orgID, final ApiCallback _callback) throws ApiException {
        return getVariablesCall(zapTraceSpan, org, orgID, _callback);

    }

    /**
     * List all variables
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @param orgID The organization ID. (optional)
     * @return Variables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of variables for an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Variables getVariables(String zapTraceSpan, String org, String orgID) throws ApiException {
        ApiResponse<Variables> localVarResp = getVariablesWithHttpInfo(zapTraceSpan, org, orgID);
        return localVarResp.getData();
    }

    /**
     * List all variables
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @param orgID The organization ID. (optional)
     * @return ApiResponse&lt;Variables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of variables for an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variables> getVariablesWithHttpInfo(String zapTraceSpan, String org, String orgID) throws ApiException {
        okhttp3.Call localVarCall = getVariablesValidateBeforeCall(zapTraceSpan, org, orgID, null);
        Type localVarReturnType = new TypeToken<Variables>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all variables (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param org The name of the organization. (optional)
     * @param orgID The organization ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of variables for an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesAsync(String zapTraceSpan, String org, String orgID, final ApiCallback<Variables> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariablesValidateBeforeCall(zapTraceSpan, org, orgID, _callback);
        Type localVarReturnType = new TypeToken<Variables>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariablesID
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesIDCall(String variableID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variables/{variableID}"
            .replace("{" + "variableID" + "}", localVarApiClient.escapeString(variableID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariablesIDValidateBeforeCall(String variableID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableID' is set
        if (variableID == null) {
            throw new ApiException("Missing the required parameter 'variableID' when calling getVariablesID(Async)");
        }

        return getVariablesIDCall(variableID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a variable
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Variable getVariablesID(String variableID, String zapTraceSpan) throws ApiException {
        ApiResponse<Variable> localVarResp = getVariablesIDWithHttpInfo(variableID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a variable
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> getVariablesIDWithHttpInfo(String variableID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getVariablesIDValidateBeforeCall(variableID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a variable (asynchronously)
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesIDAsync(String variableID, String zapTraceSpan, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariablesIDValidateBeforeCall(variableID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariablesIDLabels
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a variable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesIDLabelsCall(String variableID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variables/{variableID}/labels"
            .replace("{" + "variableID" + "}", localVarApiClient.escapeString(variableID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariablesIDLabelsValidateBeforeCall(String variableID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableID' is set
        if (variableID == null) {
            throw new ApiException("Missing the required parameter 'variableID' when calling getVariablesIDLabels(Async)");
        }

        return getVariablesIDLabelsCall(variableID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a variable
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a variable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getVariablesIDLabels(String variableID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getVariablesIDLabelsWithHttpInfo(variableID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a variable
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a variable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getVariablesIDLabelsWithHttpInfo(String variableID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getVariablesIDLabelsValidateBeforeCall(variableID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a variable (asynchronously)
     * 
     * @param variableID The variable ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a variable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesIDLabelsAsync(String variableID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariablesIDLabelsValidateBeforeCall(variableID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchVariablesID
     * @param variableID The variable ID. (required)
     * @param variable Variable update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchVariablesIDCall(String variableID, Variable variable, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variable;

        // create path and map variables
        String localVarPath = "/variables/{variableID}"
            .replace("{" + "variableID" + "}", localVarApiClient.escapeString(variableID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchVariablesIDValidateBeforeCall(String variableID, Variable variable, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableID' is set
        if (variableID == null) {
            throw new ApiException("Missing the required parameter 'variableID' when calling patchVariablesID(Async)");
        }

        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling patchVariablesID(Async)");
        }

        return patchVariablesIDCall(variableID, variable, zapTraceSpan, _callback);

    }

    /**
     * Update a variable
     * 
     * @param variableID The variable ID. (required)
     * @param variable Variable update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Variable patchVariablesID(String variableID, Variable variable, String zapTraceSpan) throws ApiException {
        ApiResponse<Variable> localVarResp = patchVariablesIDWithHttpInfo(variableID, variable, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a variable
     * 
     * @param variableID The variable ID. (required)
     * @param variable Variable update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> patchVariablesIDWithHttpInfo(String variableID, Variable variable, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchVariablesIDValidateBeforeCall(variableID, variable, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a variable (asynchronously)
     * 
     * @param variableID The variable ID. (required)
     * @param variable Variable update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchVariablesIDAsync(String variableID, Variable variable, String zapTraceSpan, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchVariablesIDValidateBeforeCall(variableID, variable, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postVariables
     * @param variable Variable to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Variable created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVariablesCall(Variable variable, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variable;

        // create path and map variables
        String localVarPath = "/variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postVariablesValidateBeforeCall(Variable variable, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling postVariables(Async)");
        }

        return postVariablesCall(variable, zapTraceSpan, _callback);

    }

    /**
     * Create a variable
     * 
     * @param variable Variable to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Variable created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Variable postVariables(Variable variable, String zapTraceSpan) throws ApiException {
        ApiResponse<Variable> localVarResp = postVariablesWithHttpInfo(variable, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a variable
     * 
     * @param variable Variable to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Variable created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> postVariablesWithHttpInfo(Variable variable, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postVariablesValidateBeforeCall(variable, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a variable (asynchronously)
     * 
     * @param variable Variable to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Variable created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVariablesAsync(Variable variable, String zapTraceSpan, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = postVariablesValidateBeforeCall(variable, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postVariablesIDLabels
     * @param variableID The variable ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly added label </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVariablesIDLabelsCall(String variableID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/variables/{variableID}/labels"
            .replace("{" + "variableID" + "}", localVarApiClient.escapeString(variableID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postVariablesIDLabelsValidateBeforeCall(String variableID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableID' is set
        if (variableID == null) {
            throw new ApiException("Missing the required parameter 'variableID' when calling postVariablesIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postVariablesIDLabels(Async)");
        }

        return postVariablesIDLabelsCall(variableID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a variable
     * 
     * @param variableID The variable ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly added label </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postVariablesIDLabels(String variableID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postVariablesIDLabelsWithHttpInfo(variableID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a variable
     * 
     * @param variableID The variable ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly added label </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postVariablesIDLabelsWithHttpInfo(String variableID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postVariablesIDLabelsValidateBeforeCall(variableID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a variable (asynchronously)
     * 
     * @param variableID The variable ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly added label </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVariablesIDLabelsAsync(String variableID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postVariablesIDLabelsValidateBeforeCall(variableID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVariablesID
     * @param variableID The variable ID. (required)
     * @param variable Variable to replace (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVariablesIDCall(String variableID, Variable variable, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variable;

        // create path and map variables
        String localVarPath = "/variables/{variableID}"
            .replace("{" + "variableID" + "}", localVarApiClient.escapeString(variableID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVariablesIDValidateBeforeCall(String variableID, Variable variable, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableID' is set
        if (variableID == null) {
            throw new ApiException("Missing the required parameter 'variableID' when calling putVariablesID(Async)");
        }

        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling putVariablesID(Async)");
        }

        return putVariablesIDCall(variableID, variable, zapTraceSpan, _callback);

    }

    /**
     * Replace a variable
     * 
     * @param variableID The variable ID. (required)
     * @param variable Variable to replace (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public Variable putVariablesID(String variableID, Variable variable, String zapTraceSpan) throws ApiException {
        ApiResponse<Variable> localVarResp = putVariablesIDWithHttpInfo(variableID, variable, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Replace a variable
     * 
     * @param variableID The variable ID. (required)
     * @param variable Variable to replace (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> putVariablesIDWithHttpInfo(String variableID, Variable variable, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putVariablesIDValidateBeforeCall(variableID, variable, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a variable (asynchronously)
     * 
     * @param variableID The variable ID. (required)
     * @param variable Variable to replace (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Variable updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Non 2XX error response from server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVariablesIDAsync(String variableID, Variable variable, String zapTraceSpan, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVariablesIDValidateBeforeCall(variableID, variable, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
