/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TemplateSummaryDiffLabelMappingsInner;
import org.openapitools.client.model.TemplateSummaryLabel;
import org.openapitools.client.model.TemplateSummarySummaryBucketsInner;
import org.openapitools.client.model.TemplateSummarySummaryChecksInner;
import org.openapitools.client.model.TemplateSummarySummaryDashboardsInner;
import org.openapitools.client.model.TemplateSummarySummaryNotificationEndpointsInner;
import org.openapitools.client.model.TemplateSummarySummaryNotificationRulesInner;
import org.openapitools.client.model.TemplateSummarySummaryTasksInner;
import org.openapitools.client.model.TemplateSummarySummaryTelegrafConfigsInner;
import org.openapitools.client.model.TemplateSummarySummaryVariablesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateSummarySummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateSummarySummary {
  public static final String SERIALIZED_NAME_BUCKETS = "buckets";
  @SerializedName(SERIALIZED_NAME_BUCKETS)
  private List<TemplateSummarySummaryBucketsInner> buckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<TemplateSummarySummaryChecksInner> checks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DASHBOARDS = "dashboards";
  @SerializedName(SERIALIZED_NAME_DASHBOARDS)
  private List<TemplateSummarySummaryDashboardsInner> dashboards = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL_MAPPINGS = "labelMappings";
  @SerializedName(SERIALIZED_NAME_LABEL_MAPPINGS)
  private List<TemplateSummaryDiffLabelMappingsInner> labelMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<TemplateSummaryLabel> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MISSING_ENV_REFS = "missingEnvRefs";
  @SerializedName(SERIALIZED_NAME_MISSING_ENV_REFS)
  private List<String> missingEnvRefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MISSING_SECRETS = "missingSecrets";
  @SerializedName(SERIALIZED_NAME_MISSING_SECRETS)
  private List<String> missingSecrets = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_ENDPOINTS = "notificationEndpoints";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ENDPOINTS)
  private List<TemplateSummarySummaryNotificationEndpointsInner> notificationEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_RULES = "notificationRules";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_RULES)
  private List<TemplateSummarySummaryNotificationRulesInner> notificationRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<TemplateSummarySummaryTasksInner> tasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TELEGRAF_CONFIGS = "telegrafConfigs";
  @SerializedName(SERIALIZED_NAME_TELEGRAF_CONFIGS)
  private List<TemplateSummarySummaryTelegrafConfigsInner> telegrafConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private List<TemplateSummarySummaryVariablesInner> variables = new ArrayList<>();

  public TemplateSummarySummary() {
  }

  public TemplateSummarySummary buckets(List<TemplateSummarySummaryBucketsInner> buckets) {
    this.buckets = buckets;
    return this;
  }

  public TemplateSummarySummary addBucketsItem(TemplateSummarySummaryBucketsInner bucketsItem) {
    if (this.buckets == null) {
      this.buckets = new ArrayList<>();
    }
    this.buckets.add(bucketsItem);
    return this;
  }

  /**
   * Get buckets
   * @return buckets
   */
  @javax.annotation.Nullable
  public List<TemplateSummarySummaryBucketsInner> getBuckets() {
    return buckets;
  }

  public void setBuckets(List<TemplateSummarySummaryBucketsInner> buckets) {
    this.buckets = buckets;
  }


  public TemplateSummarySummary checks(List<TemplateSummarySummaryChecksInner> checks) {
    this.checks = checks;
    return this;
  }

  public TemplateSummarySummary addChecksItem(TemplateSummarySummaryChecksInner checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

  /**
   * Get checks
   * @return checks
   */
  @javax.annotation.Nullable
  public List<TemplateSummarySummaryChecksInner> getChecks() {
    return checks;
  }

  public void setChecks(List<TemplateSummarySummaryChecksInner> checks) {
    this.checks = checks;
  }


  public TemplateSummarySummary dashboards(List<TemplateSummarySummaryDashboardsInner> dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  public TemplateSummarySummary addDashboardsItem(TemplateSummarySummaryDashboardsInner dashboardsItem) {
    if (this.dashboards == null) {
      this.dashboards = new ArrayList<>();
    }
    this.dashboards.add(dashboardsItem);
    return this;
  }

  /**
   * Get dashboards
   * @return dashboards
   */
  @javax.annotation.Nullable
  public List<TemplateSummarySummaryDashboardsInner> getDashboards() {
    return dashboards;
  }

  public void setDashboards(List<TemplateSummarySummaryDashboardsInner> dashboards) {
    this.dashboards = dashboards;
  }


  public TemplateSummarySummary labelMappings(List<TemplateSummaryDiffLabelMappingsInner> labelMappings) {
    this.labelMappings = labelMappings;
    return this;
  }

  public TemplateSummarySummary addLabelMappingsItem(TemplateSummaryDiffLabelMappingsInner labelMappingsItem) {
    if (this.labelMappings == null) {
      this.labelMappings = new ArrayList<>();
    }
    this.labelMappings.add(labelMappingsItem);
    return this;
  }

  /**
   * Get labelMappings
   * @return labelMappings
   */
  @javax.annotation.Nullable
  public List<TemplateSummaryDiffLabelMappingsInner> getLabelMappings() {
    return labelMappings;
  }

  public void setLabelMappings(List<TemplateSummaryDiffLabelMappingsInner> labelMappings) {
    this.labelMappings = labelMappings;
  }


  public TemplateSummarySummary labels(List<TemplateSummaryLabel> labels) {
    this.labels = labels;
    return this;
  }

  public TemplateSummarySummary addLabelsItem(TemplateSummaryLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<TemplateSummaryLabel> getLabels() {
    return labels;
  }

  public void setLabels(List<TemplateSummaryLabel> labels) {
    this.labels = labels;
  }


  public TemplateSummarySummary missingEnvRefs(List<String> missingEnvRefs) {
    this.missingEnvRefs = missingEnvRefs;
    return this;
  }

  public TemplateSummarySummary addMissingEnvRefsItem(String missingEnvRefsItem) {
    if (this.missingEnvRefs == null) {
      this.missingEnvRefs = new ArrayList<>();
    }
    this.missingEnvRefs.add(missingEnvRefsItem);
    return this;
  }

  /**
   * Get missingEnvRefs
   * @return missingEnvRefs
   */
  @javax.annotation.Nullable
  public List<String> getMissingEnvRefs() {
    return missingEnvRefs;
  }

  public void setMissingEnvRefs(List<String> missingEnvRefs) {
    this.missingEnvRefs = missingEnvRefs;
  }


  public TemplateSummarySummary missingSecrets(List<String> missingSecrets) {
    this.missingSecrets = missingSecrets;
    return this;
  }

  public TemplateSummarySummary addMissingSecretsItem(String missingSecretsItem) {
    if (this.missingSecrets == null) {
      this.missingSecrets = new ArrayList<>();
    }
    this.missingSecrets.add(missingSecretsItem);
    return this;
  }

  /**
   * Get missingSecrets
   * @return missingSecrets
   */
  @javax.annotation.Nullable
  public List<String> getMissingSecrets() {
    return missingSecrets;
  }

  public void setMissingSecrets(List<String> missingSecrets) {
    this.missingSecrets = missingSecrets;
  }


  public TemplateSummarySummary notificationEndpoints(List<TemplateSummarySummaryNotificationEndpointsInner> notificationEndpoints) {
    this.notificationEndpoints = notificationEndpoints;
    return this;
  }

  public TemplateSummarySummary addNotificationEndpointsItem(TemplateSummarySummaryNotificationEndpointsInner notificationEndpointsItem) {
    if (this.notificationEndpoints == null) {
      this.notificationEndpoints = new ArrayList<>();
    }
    this.notificationEndpoints.add(notificationEndpointsItem);
    return this;
  }

  /**
   * Get notificationEndpoints
   * @return notificationEndpoints
   */
  @javax.annotation.Nullable
  public List<TemplateSummarySummaryNotificationEndpointsInner> getNotificationEndpoints() {
    return notificationEndpoints;
  }

  public void setNotificationEndpoints(List<TemplateSummarySummaryNotificationEndpointsInner> notificationEndpoints) {
    this.notificationEndpoints = notificationEndpoints;
  }


  public TemplateSummarySummary notificationRules(List<TemplateSummarySummaryNotificationRulesInner> notificationRules) {
    this.notificationRules = notificationRules;
    return this;
  }

  public TemplateSummarySummary addNotificationRulesItem(TemplateSummarySummaryNotificationRulesInner notificationRulesItem) {
    if (this.notificationRules == null) {
      this.notificationRules = new ArrayList<>();
    }
    this.notificationRules.add(notificationRulesItem);
    return this;
  }

  /**
   * Get notificationRules
   * @return notificationRules
   */
  @javax.annotation.Nullable
  public List<TemplateSummarySummaryNotificationRulesInner> getNotificationRules() {
    return notificationRules;
  }

  public void setNotificationRules(List<TemplateSummarySummaryNotificationRulesInner> notificationRules) {
    this.notificationRules = notificationRules;
  }


  public TemplateSummarySummary tasks(List<TemplateSummarySummaryTasksInner> tasks) {
    this.tasks = tasks;
    return this;
  }

  public TemplateSummarySummary addTasksItem(TemplateSummarySummaryTasksInner tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

  /**
   * Get tasks
   * @return tasks
   */
  @javax.annotation.Nullable
  public List<TemplateSummarySummaryTasksInner> getTasks() {
    return tasks;
  }

  public void setTasks(List<TemplateSummarySummaryTasksInner> tasks) {
    this.tasks = tasks;
  }


  public TemplateSummarySummary telegrafConfigs(List<TemplateSummarySummaryTelegrafConfigsInner> telegrafConfigs) {
    this.telegrafConfigs = telegrafConfigs;
    return this;
  }

  public TemplateSummarySummary addTelegrafConfigsItem(TemplateSummarySummaryTelegrafConfigsInner telegrafConfigsItem) {
    if (this.telegrafConfigs == null) {
      this.telegrafConfigs = new ArrayList<>();
    }
    this.telegrafConfigs.add(telegrafConfigsItem);
    return this;
  }

  /**
   * Get telegrafConfigs
   * @return telegrafConfigs
   */
  @javax.annotation.Nullable
  public List<TemplateSummarySummaryTelegrafConfigsInner> getTelegrafConfigs() {
    return telegrafConfigs;
  }

  public void setTelegrafConfigs(List<TemplateSummarySummaryTelegrafConfigsInner> telegrafConfigs) {
    this.telegrafConfigs = telegrafConfigs;
  }


  public TemplateSummarySummary variables(List<TemplateSummarySummaryVariablesInner> variables) {
    this.variables = variables;
    return this;
  }

  public TemplateSummarySummary addVariablesItem(TemplateSummarySummaryVariablesInner variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<>();
    }
    this.variables.add(variablesItem);
    return this;
  }

  /**
   * Get variables
   * @return variables
   */
  @javax.annotation.Nullable
  public List<TemplateSummarySummaryVariablesInner> getVariables() {
    return variables;
  }

  public void setVariables(List<TemplateSummarySummaryVariablesInner> variables) {
    this.variables = variables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSummarySummary templateSummarySummary = (TemplateSummarySummary) o;
    return Objects.equals(this.buckets, templateSummarySummary.buckets) &&
        Objects.equals(this.checks, templateSummarySummary.checks) &&
        Objects.equals(this.dashboards, templateSummarySummary.dashboards) &&
        Objects.equals(this.labelMappings, templateSummarySummary.labelMappings) &&
        Objects.equals(this.labels, templateSummarySummary.labels) &&
        Objects.equals(this.missingEnvRefs, templateSummarySummary.missingEnvRefs) &&
        Objects.equals(this.missingSecrets, templateSummarySummary.missingSecrets) &&
        Objects.equals(this.notificationEndpoints, templateSummarySummary.notificationEndpoints) &&
        Objects.equals(this.notificationRules, templateSummarySummary.notificationRules) &&
        Objects.equals(this.tasks, templateSummarySummary.tasks) &&
        Objects.equals(this.telegrafConfigs, templateSummarySummary.telegrafConfigs) &&
        Objects.equals(this.variables, templateSummarySummary.variables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buckets, checks, dashboards, labelMappings, labels, missingEnvRefs, missingSecrets, notificationEndpoints, notificationRules, tasks, telegrafConfigs, variables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSummarySummary {\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    labelMappings: ").append(toIndentedString(labelMappings)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    missingEnvRefs: ").append(toIndentedString(missingEnvRefs)).append("\n");
    sb.append("    missingSecrets: ").append(toIndentedString(missingSecrets)).append("\n");
    sb.append("    notificationEndpoints: ").append(toIndentedString(notificationEndpoints)).append("\n");
    sb.append("    notificationRules: ").append(toIndentedString(notificationRules)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    telegrafConfigs: ").append(toIndentedString(telegrafConfigs)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buckets");
    openapiFields.add("checks");
    openapiFields.add("dashboards");
    openapiFields.add("labelMappings");
    openapiFields.add("labels");
    openapiFields.add("missingEnvRefs");
    openapiFields.add("missingSecrets");
    openapiFields.add("notificationEndpoints");
    openapiFields.add("notificationRules");
    openapiFields.add("tasks");
    openapiFields.add("telegrafConfigs");
    openapiFields.add("variables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateSummarySummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateSummarySummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateSummarySummary is not found in the empty JSON string", TemplateSummarySummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateSummarySummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateSummarySummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("buckets") != null && !jsonObj.get("buckets").isJsonNull()) {
        JsonArray jsonArraybuckets = jsonObj.getAsJsonArray("buckets");
        if (jsonArraybuckets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buckets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buckets` to be an array in the JSON string but got `%s`", jsonObj.get("buckets").toString()));
          }

          // validate the optional field `buckets` (array)
          for (int i = 0; i < jsonArraybuckets.size(); i++) {
            TemplateSummarySummaryBucketsInner.validateJsonElement(jsonArraybuckets.get(i));
          };
        }
      }
      if (jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull()) {
        JsonArray jsonArraychecks = jsonObj.getAsJsonArray("checks");
        if (jsonArraychecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
          }

          // validate the optional field `checks` (array)
          for (int i = 0; i < jsonArraychecks.size(); i++) {
            TemplateSummarySummaryChecksInner.validateJsonElement(jsonArraychecks.get(i));
          };
        }
      }
      if (jsonObj.get("dashboards") != null && !jsonObj.get("dashboards").isJsonNull()) {
        JsonArray jsonArraydashboards = jsonObj.getAsJsonArray("dashboards");
        if (jsonArraydashboards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dashboards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dashboards` to be an array in the JSON string but got `%s`", jsonObj.get("dashboards").toString()));
          }

          // validate the optional field `dashboards` (array)
          for (int i = 0; i < jsonArraydashboards.size(); i++) {
            TemplateSummarySummaryDashboardsInner.validateJsonElement(jsonArraydashboards.get(i));
          };
        }
      }
      if (jsonObj.get("labelMappings") != null && !jsonObj.get("labelMappings").isJsonNull()) {
        JsonArray jsonArraylabelMappings = jsonObj.getAsJsonArray("labelMappings");
        if (jsonArraylabelMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labelMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labelMappings` to be an array in the JSON string but got `%s`", jsonObj.get("labelMappings").toString()));
          }

          // validate the optional field `labelMappings` (array)
          for (int i = 0; i < jsonArraylabelMappings.size(); i++) {
            TemplateSummaryDiffLabelMappingsInner.validateJsonElement(jsonArraylabelMappings.get(i));
          };
        }
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            TemplateSummaryLabel.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("missingEnvRefs") != null && !jsonObj.get("missingEnvRefs").isJsonNull() && !jsonObj.get("missingEnvRefs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `missingEnvRefs` to be an array in the JSON string but got `%s`", jsonObj.get("missingEnvRefs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("missingSecrets") != null && !jsonObj.get("missingSecrets").isJsonNull() && !jsonObj.get("missingSecrets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `missingSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("missingSecrets").toString()));
      }
      if (jsonObj.get("notificationEndpoints") != null && !jsonObj.get("notificationEndpoints").isJsonNull()) {
        JsonArray jsonArraynotificationEndpoints = jsonObj.getAsJsonArray("notificationEndpoints");
        if (jsonArraynotificationEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notificationEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notificationEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("notificationEndpoints").toString()));
          }

          // validate the optional field `notificationEndpoints` (array)
          for (int i = 0; i < jsonArraynotificationEndpoints.size(); i++) {
            TemplateSummarySummaryNotificationEndpointsInner.validateJsonElement(jsonArraynotificationEndpoints.get(i));
          };
        }
      }
      if (jsonObj.get("notificationRules") != null && !jsonObj.get("notificationRules").isJsonNull()) {
        JsonArray jsonArraynotificationRules = jsonObj.getAsJsonArray("notificationRules");
        if (jsonArraynotificationRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notificationRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notificationRules` to be an array in the JSON string but got `%s`", jsonObj.get("notificationRules").toString()));
          }

          // validate the optional field `notificationRules` (array)
          for (int i = 0; i < jsonArraynotificationRules.size(); i++) {
            TemplateSummarySummaryNotificationRulesInner.validateJsonElement(jsonArraynotificationRules.get(i));
          };
        }
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            TemplateSummarySummaryTasksInner.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
      if (jsonObj.get("telegrafConfigs") != null && !jsonObj.get("telegrafConfigs").isJsonNull()) {
        JsonArray jsonArraytelegrafConfigs = jsonObj.getAsJsonArray("telegrafConfigs");
        if (jsonArraytelegrafConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("telegrafConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `telegrafConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("telegrafConfigs").toString()));
          }

          // validate the optional field `telegrafConfigs` (array)
          for (int i = 0; i < jsonArraytelegrafConfigs.size(); i++) {
            TemplateSummarySummaryTelegrafConfigsInner.validateJsonElement(jsonArraytelegrafConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("variables") != null && !jsonObj.get("variables").isJsonNull()) {
        JsonArray jsonArrayvariables = jsonObj.getAsJsonArray("variables");
        if (jsonArrayvariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variables` to be an array in the JSON string but got `%s`", jsonObj.get("variables").toString()));
          }

          // validate the optional field `variables` (array)
          for (int i = 0; i < jsonArrayvariables.size(); i++) {
            TemplateSummarySummaryVariablesInner.validateJsonElement(jsonArrayvariables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateSummarySummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateSummarySummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateSummarySummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateSummarySummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateSummarySummary>() {
           @Override
           public void write(JsonWriter out, TemplateSummarySummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateSummarySummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateSummarySummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateSummarySummary
   * @throws IOException if the JSON string is invalid with respect to TemplateSummarySummary
   */
  public static TemplateSummarySummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateSummarySummary.class);
  }

  /**
   * Convert an instance of TemplateSummarySummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

