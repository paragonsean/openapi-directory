/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Axis;
import org.openapitools.client.model.DashboardColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeoPointMapViewLayer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeoPointMapViewLayer {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HEATMAP("heatmap"),
    
    CIRCLE_MAP("circleMap"),
    
    POINT_MAP("pointMap"),
    
    TRACK_MAP("trackMap");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_COLOR_DIMENSION = "colorDimension";
  @SerializedName(SERIALIZED_NAME_COLOR_DIMENSION)
  private Axis colorDimension;

  public static final String SERIALIZED_NAME_COLOR_FIELD = "colorField";
  @SerializedName(SERIALIZED_NAME_COLOR_FIELD)
  private String colorField;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<DashboardColor> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_CLUSTERED = "isClustered";
  @SerializedName(SERIALIZED_NAME_IS_CLUSTERED)
  private Boolean isClustered;

  public GeoPointMapViewLayer() {
  }

  public GeoPointMapViewLayer type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GeoPointMapViewLayer colorDimension(Axis colorDimension) {
    this.colorDimension = colorDimension;
    return this;
  }

  /**
   * Get colorDimension
   * @return colorDimension
   */
  @javax.annotation.Nonnull
  public Axis getColorDimension() {
    return colorDimension;
  }

  public void setColorDimension(Axis colorDimension) {
    this.colorDimension = colorDimension;
  }


  public GeoPointMapViewLayer colorField(String colorField) {
    this.colorField = colorField;
    return this;
  }

  /**
   * Marker color field
   * @return colorField
   */
  @javax.annotation.Nonnull
  public String getColorField() {
    return colorField;
  }

  public void setColorField(String colorField) {
    this.colorField = colorField;
  }


  public GeoPointMapViewLayer colors(List<DashboardColor> colors) {
    this.colors = colors;
    return this;
  }

  public GeoPointMapViewLayer addColorsItem(DashboardColor colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * Colors define color encoding of data into a visualization
   * @return colors
   */
  @javax.annotation.Nonnull
  public List<DashboardColor> getColors() {
    return colors;
  }

  public void setColors(List<DashboardColor> colors) {
    this.colors = colors;
  }


  public GeoPointMapViewLayer isClustered(Boolean isClustered) {
    this.isClustered = isClustered;
    return this;
  }

  /**
   * Cluster close markers together
   * @return isClustered
   */
  @javax.annotation.Nullable
  public Boolean getIsClustered() {
    return isClustered;
  }

  public void setIsClustered(Boolean isClustered) {
    this.isClustered = isClustered;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoPointMapViewLayer geoPointMapViewLayer = (GeoPointMapViewLayer) o;
    return Objects.equals(this.type, geoPointMapViewLayer.type) &&
        Objects.equals(this.colorDimension, geoPointMapViewLayer.colorDimension) &&
        Objects.equals(this.colorField, geoPointMapViewLayer.colorField) &&
        Objects.equals(this.colors, geoPointMapViewLayer.colors) &&
        Objects.equals(this.isClustered, geoPointMapViewLayer.isClustered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, colorDimension, colorField, colors, isClustered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoPointMapViewLayer {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    colorDimension: ").append(toIndentedString(colorDimension)).append("\n");
    sb.append("    colorField: ").append(toIndentedString(colorField)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    isClustered: ").append(toIndentedString(isClustered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("colorDimension");
    openapiFields.add("colorField");
    openapiFields.add("colors");
    openapiFields.add("isClustered");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("colorDimension");
    openapiRequiredFields.add("colorField");
    openapiRequiredFields.add("colors");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeoPointMapViewLayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeoPointMapViewLayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeoPointMapViewLayer is not found in the empty JSON string", GeoPointMapViewLayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeoPointMapViewLayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeoPointMapViewLayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GeoPointMapViewLayer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the required field `colorDimension`
      Axis.validateJsonElement(jsonObj.get("colorDimension"));
      if (!jsonObj.get("colorField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorField").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }

      JsonArray jsonArraycolors = jsonObj.getAsJsonArray("colors");
      // validate the required field `colors` (array)
      for (int i = 0; i < jsonArraycolors.size(); i++) {
        DashboardColor.validateJsonElement(jsonArraycolors.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeoPointMapViewLayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeoPointMapViewLayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeoPointMapViewLayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeoPointMapViewLayer.class));

       return (TypeAdapter<T>) new TypeAdapter<GeoPointMapViewLayer>() {
           @Override
           public void write(JsonWriter out, GeoPointMapViewLayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeoPointMapViewLayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeoPointMapViewLayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeoPointMapViewLayer
   * @throws IOException if the JSON string is invalid with respect to GeoPointMapViewLayer
   */
  public static GeoPointMapViewLayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeoPointMapViewLayer.class);
  }

  /**
   * Convert an instance of GeoPointMapViewLayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

