/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.NotificationRule;
import org.openapitools.client.model.NotificationRuleDiscriminator;
import org.openapitools.client.model.NotificationRuleUpdate;
import org.openapitools.client.model.NotificationRules;
import org.openapitools.client.model.PostNotificationRule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNotificationRule
     * @param postNotificationRule Notification rule to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Notification rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNotificationRuleCall(PostNotificationRule postNotificationRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postNotificationRule;

        // create path and map variables
        String localVarPath = "/notificationRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNotificationRuleValidateBeforeCall(PostNotificationRule postNotificationRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postNotificationRule' is set
        if (postNotificationRule == null) {
            throw new ApiException("Missing the required parameter 'postNotificationRule' when calling createNotificationRule(Async)");
        }

        return createNotificationRuleCall(postNotificationRule, _callback);

    }

    /**
     * Add a notification rule
     * 
     * @param postNotificationRule Notification rule to create (required)
     * @return NotificationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Notification rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationRule createNotificationRule(PostNotificationRule postNotificationRule) throws ApiException {
        ApiResponse<NotificationRule> localVarResp = createNotificationRuleWithHttpInfo(postNotificationRule);
        return localVarResp.getData();
    }

    /**
     * Add a notification rule
     * 
     * @param postNotificationRule Notification rule to create (required)
     * @return ApiResponse&lt;NotificationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Notification rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationRule> createNotificationRuleWithHttpInfo(PostNotificationRule postNotificationRule) throws ApiException {
        okhttp3.Call localVarCall = createNotificationRuleValidateBeforeCall(postNotificationRule, null);
        Type localVarReturnType = new TypeToken<NotificationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a notification rule (asynchronously)
     * 
     * @param postNotificationRule Notification rule to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Notification rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNotificationRuleAsync(PostNotificationRule postNotificationRule, final ApiCallback<NotificationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNotificationRuleValidateBeforeCall(postNotificationRule, _callback);
        Type localVarReturnType = new TypeToken<NotificationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNotificationRulesID
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationRulesIDCall(String ruleID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationRules/{ruleID}"
            .replace("{" + "ruleID" + "}", localVarApiClient.escapeString(ruleID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNotificationRulesIDValidateBeforeCall(String ruleID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleID' is set
        if (ruleID == null) {
            throw new ApiException("Missing the required parameter 'ruleID' when calling deleteNotificationRulesID(Async)");
        }

        return deleteNotificationRulesIDCall(ruleID, zapTraceSpan, _callback);

    }

    /**
     * Delete a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNotificationRulesID(String ruleID, String zapTraceSpan) throws ApiException {
        deleteNotificationRulesIDWithHttpInfo(ruleID, zapTraceSpan);
    }

    /**
     * Delete a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNotificationRulesIDWithHttpInfo(String ruleID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteNotificationRulesIDValidateBeforeCall(ruleID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a notification rule (asynchronously)
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The check was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationRulesIDAsync(String ruleID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNotificationRulesIDValidateBeforeCall(ruleID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNotificationRulesIDLabelsID
     * @param ruleID The notification rule ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationRulesIDLabelsIDCall(String ruleID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationRules/{ruleID}/labels/{labelID}"
            .replace("{" + "ruleID" + "}", localVarApiClient.escapeString(ruleID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNotificationRulesIDLabelsIDValidateBeforeCall(String ruleID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleID' is set
        if (ruleID == null) {
            throw new ApiException("Missing the required parameter 'ruleID' when calling deleteNotificationRulesIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteNotificationRulesIDLabelsID(Async)");
        }

        return deleteNotificationRulesIDLabelsIDCall(ruleID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete label from a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNotificationRulesIDLabelsID(String ruleID, String labelID, String zapTraceSpan) throws ApiException {
        deleteNotificationRulesIDLabelsIDWithHttpInfo(ruleID, labelID, zapTraceSpan);
    }

    /**
     * Delete label from a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNotificationRulesIDLabelsIDWithHttpInfo(String ruleID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteNotificationRulesIDLabelsIDValidateBeforeCall(ruleID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete label from a notification rule (asynchronously)
     * 
     * @param ruleID The notification rule ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Rule or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationRulesIDLabelsIDAsync(String ruleID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNotificationRulesIDLabelsIDValidateBeforeCall(ruleID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNotificationRules
     * @param orgID Only show notification rules that belong to a specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param checkID Only show notifications that belong to the specific check ID. (optional)
     * @param tag Only return notification rules that \&quot;would match\&quot; statuses which contain the tag key value pairs provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationRulesCall(String orgID, String zapTraceSpan, Integer offset, Integer limit, String checkID, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (checkID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkID", checkID));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationRulesValidateBeforeCall(String orgID, String zapTraceSpan, Integer offset, Integer limit, String checkID, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling getNotificationRules(Async)");
        }

        return getNotificationRulesCall(orgID, zapTraceSpan, offset, limit, checkID, tag, _callback);

    }

    /**
     * List all notification rules
     * 
     * @param orgID Only show notification rules that belong to a specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param checkID Only show notifications that belong to the specific check ID. (optional)
     * @param tag Only return notification rules that \&quot;would match\&quot; statuses which contain the tag key value pairs provided. (optional)
     * @return NotificationRules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationRules getNotificationRules(String orgID, String zapTraceSpan, Integer offset, Integer limit, String checkID, String tag) throws ApiException {
        ApiResponse<NotificationRules> localVarResp = getNotificationRulesWithHttpInfo(orgID, zapTraceSpan, offset, limit, checkID, tag);
        return localVarResp.getData();
    }

    /**
     * List all notification rules
     * 
     * @param orgID Only show notification rules that belong to a specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param checkID Only show notifications that belong to the specific check ID. (optional)
     * @param tag Only return notification rules that \&quot;would match\&quot; statuses which contain the tag key value pairs provided. (optional)
     * @return ApiResponse&lt;NotificationRules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationRules> getNotificationRulesWithHttpInfo(String orgID, String zapTraceSpan, Integer offset, Integer limit, String checkID, String tag) throws ApiException {
        okhttp3.Call localVarCall = getNotificationRulesValidateBeforeCall(orgID, zapTraceSpan, offset, limit, checkID, tag, null);
        Type localVarReturnType = new TypeToken<NotificationRules>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all notification rules (asynchronously)
     * 
     * @param orgID Only show notification rules that belong to a specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param checkID Only show notifications that belong to the specific check ID. (optional)
     * @param tag Only return notification rules that \&quot;would match\&quot; statuses which contain the tag key value pairs provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationRulesAsync(String orgID, String zapTraceSpan, Integer offset, Integer limit, String checkID, String tag, final ApiCallback<NotificationRules> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationRulesValidateBeforeCall(orgID, zapTraceSpan, offset, limit, checkID, tag, _callback);
        Type localVarReturnType = new TypeToken<NotificationRules>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNotificationRulesID
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The notification rule requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationRulesIDCall(String ruleID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationRules/{ruleID}"
            .replace("{" + "ruleID" + "}", localVarApiClient.escapeString(ruleID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationRulesIDValidateBeforeCall(String ruleID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleID' is set
        if (ruleID == null) {
            throw new ApiException("Missing the required parameter 'ruleID' when calling getNotificationRulesID(Async)");
        }

        return getNotificationRulesIDCall(ruleID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return NotificationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The notification rule requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationRule getNotificationRulesID(String ruleID, String zapTraceSpan) throws ApiException {
        ApiResponse<NotificationRule> localVarResp = getNotificationRulesIDWithHttpInfo(ruleID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;NotificationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The notification rule requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationRule> getNotificationRulesIDWithHttpInfo(String ruleID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getNotificationRulesIDValidateBeforeCall(ruleID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<NotificationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a notification rule (asynchronously)
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The notification rule requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationRulesIDAsync(String ruleID, String zapTraceSpan, final ApiCallback<NotificationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationRulesIDValidateBeforeCall(ruleID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<NotificationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNotificationRulesIDLabels
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a notification rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationRulesIDLabelsCall(String ruleID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationRules/{ruleID}/labels"
            .replace("{" + "ruleID" + "}", localVarApiClient.escapeString(ruleID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationRulesIDLabelsValidateBeforeCall(String ruleID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleID' is set
        if (ruleID == null) {
            throw new ApiException("Missing the required parameter 'ruleID' when calling getNotificationRulesIDLabels(Async)");
        }

        return getNotificationRulesIDLabelsCall(ruleID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a notification rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getNotificationRulesIDLabels(String ruleID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getNotificationRulesIDLabelsWithHttpInfo(ruleID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a notification rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getNotificationRulesIDLabelsWithHttpInfo(String ruleID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getNotificationRulesIDLabelsValidateBeforeCall(ruleID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a notification rule (asynchronously)
     * 
     * @param ruleID The notification rule ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a notification rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationRulesIDLabelsAsync(String ruleID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationRulesIDLabelsValidateBeforeCall(ruleID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchNotificationRulesID
     * @param ruleID The notification rule ID. (required)
     * @param notificationRuleUpdate Notification rule update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification rule was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchNotificationRulesIDCall(String ruleID, NotificationRuleUpdate notificationRuleUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRuleUpdate;

        // create path and map variables
        String localVarPath = "/notificationRules/{ruleID}"
            .replace("{" + "ruleID" + "}", localVarApiClient.escapeString(ruleID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchNotificationRulesIDValidateBeforeCall(String ruleID, NotificationRuleUpdate notificationRuleUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleID' is set
        if (ruleID == null) {
            throw new ApiException("Missing the required parameter 'ruleID' when calling patchNotificationRulesID(Async)");
        }

        // verify the required parameter 'notificationRuleUpdate' is set
        if (notificationRuleUpdate == null) {
            throw new ApiException("Missing the required parameter 'notificationRuleUpdate' when calling patchNotificationRulesID(Async)");
        }

        return patchNotificationRulesIDCall(ruleID, notificationRuleUpdate, zapTraceSpan, _callback);

    }

    /**
     * Update a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param notificationRuleUpdate Notification rule update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return NotificationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification rule was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationRule patchNotificationRulesID(String ruleID, NotificationRuleUpdate notificationRuleUpdate, String zapTraceSpan) throws ApiException {
        ApiResponse<NotificationRule> localVarResp = patchNotificationRulesIDWithHttpInfo(ruleID, notificationRuleUpdate, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param notificationRuleUpdate Notification rule update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;NotificationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification rule was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationRule> patchNotificationRulesIDWithHttpInfo(String ruleID, NotificationRuleUpdate notificationRuleUpdate, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchNotificationRulesIDValidateBeforeCall(ruleID, notificationRuleUpdate, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<NotificationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a notification rule (asynchronously)
     * 
     * @param ruleID The notification rule ID. (required)
     * @param notificationRuleUpdate Notification rule update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification rule was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchNotificationRulesIDAsync(String ruleID, NotificationRuleUpdate notificationRuleUpdate, String zapTraceSpan, final ApiCallback<NotificationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchNotificationRulesIDValidateBeforeCall(ruleID, notificationRuleUpdate, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<NotificationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postNotificationRuleIDLabels
     * @param ruleID The notification rule ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the notification rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNotificationRuleIDLabelsCall(String ruleID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/notificationRules/{ruleID}/labels"
            .replace("{" + "ruleID" + "}", localVarApiClient.escapeString(ruleID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNotificationRuleIDLabelsValidateBeforeCall(String ruleID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleID' is set
        if (ruleID == null) {
            throw new ApiException("Missing the required parameter 'ruleID' when calling postNotificationRuleIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postNotificationRuleIDLabels(Async)");
        }

        return postNotificationRuleIDLabelsCall(ruleID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the notification rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postNotificationRuleIDLabels(String ruleID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postNotificationRuleIDLabelsWithHttpInfo(ruleID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the notification rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postNotificationRuleIDLabelsWithHttpInfo(String ruleID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postNotificationRuleIDLabelsValidateBeforeCall(ruleID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a notification rule (asynchronously)
     * 
     * @param ruleID The notification rule ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the notification rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNotificationRuleIDLabelsAsync(String ruleID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNotificationRuleIDLabelsValidateBeforeCall(ruleID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putNotificationRulesID
     * @param ruleID The notification rule ID. (required)
     * @param notificationRule Notification rule update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification rule was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putNotificationRulesIDCall(String ruleID, NotificationRule notificationRule, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRule;

        // create path and map variables
        String localVarPath = "/notificationRules/{ruleID}"
            .replace("{" + "ruleID" + "}", localVarApiClient.escapeString(ruleID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putNotificationRulesIDValidateBeforeCall(String ruleID, NotificationRule notificationRule, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleID' is set
        if (ruleID == null) {
            throw new ApiException("Missing the required parameter 'ruleID' when calling putNotificationRulesID(Async)");
        }

        // verify the required parameter 'notificationRule' is set
        if (notificationRule == null) {
            throw new ApiException("Missing the required parameter 'notificationRule' when calling putNotificationRulesID(Async)");
        }

        return putNotificationRulesIDCall(ruleID, notificationRule, zapTraceSpan, _callback);

    }

    /**
     * Update a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param notificationRule Notification rule update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return NotificationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification rule was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationRule putNotificationRulesID(String ruleID, NotificationRule notificationRule, String zapTraceSpan) throws ApiException {
        ApiResponse<NotificationRule> localVarResp = putNotificationRulesIDWithHttpInfo(ruleID, notificationRule, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a notification rule
     * 
     * @param ruleID The notification rule ID. (required)
     * @param notificationRule Notification rule update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;NotificationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification rule was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationRule> putNotificationRulesIDWithHttpInfo(String ruleID, NotificationRule notificationRule, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putNotificationRulesIDValidateBeforeCall(ruleID, notificationRule, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<NotificationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a notification rule (asynchronously)
     * 
     * @param ruleID The notification rule ID. (required)
     * @param notificationRule Notification rule update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification rule </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification rule was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putNotificationRulesIDAsync(String ruleID, NotificationRule notificationRule, String zapTraceSpan, final ApiCallback<NotificationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = putNotificationRulesIDValidateBeforeCall(ruleID, notificationRule, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<NotificationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
