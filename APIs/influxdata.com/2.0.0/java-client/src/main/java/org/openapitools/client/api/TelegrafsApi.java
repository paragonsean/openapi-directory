/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.Telegraf;
import org.openapitools.client.model.TelegrafRequest;
import org.openapitools.client.model.Telegrafs;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TelegrafsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TelegrafsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TelegrafsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTelegrafsID
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTelegrafsIDCall(String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTelegrafsIDValidateBeforeCall(String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling deleteTelegrafsID(Async)");
        }

        return deleteTelegrafsIDCall(telegrafID, zapTraceSpan, _callback);

    }

    /**
     * Delete a Telegraf configuration
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTelegrafsID(String telegrafID, String zapTraceSpan) throws ApiException {
        deleteTelegrafsIDWithHttpInfo(telegrafID, zapTraceSpan);
    }

    /**
     * Delete a Telegraf configuration
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTelegrafsIDWithHttpInfo(String telegrafID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTelegrafsIDValidateBeforeCall(telegrafID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Telegraf configuration (asynchronously)
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTelegrafsIDAsync(String telegrafID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTelegrafsIDValidateBeforeCall(telegrafID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTelegrafsIDLabelsID
     * @param telegrafID The Telegraf config ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Telegraf config not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTelegrafsIDLabelsIDCall(String telegrafID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/labels/{labelID}"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTelegrafsIDLabelsIDValidateBeforeCall(String telegrafID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling deleteTelegrafsIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteTelegrafsIDLabelsID(Async)");
        }

        return deleteTelegrafsIDLabelsIDCall(telegrafID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete a label from a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Telegraf config not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTelegrafsIDLabelsID(String telegrafID, String labelID, String zapTraceSpan) throws ApiException {
        deleteTelegrafsIDLabelsIDWithHttpInfo(telegrafID, labelID, zapTraceSpan);
    }

    /**
     * Delete a label from a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Telegraf config not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTelegrafsIDLabelsIDWithHttpInfo(String telegrafID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTelegrafsIDLabelsIDValidateBeforeCall(telegrafID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label from a Telegraf config (asynchronously)
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param labelID The label ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Telegraf config not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTelegrafsIDLabelsIDAsync(String telegrafID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTelegrafsIDLabelsIDValidateBeforeCall(telegrafID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTelegrafsIDMembersID
     * @param userID The ID of the member to remove. (required)
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTelegrafsIDMembersIDCall(String userID, String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/members/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTelegrafsIDMembersIDValidateBeforeCall(String userID, String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteTelegrafsIDMembersID(Async)");
        }

        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling deleteTelegrafsIDMembersID(Async)");
        }

        return deleteTelegrafsIDMembersIDCall(userID, telegrafID, zapTraceSpan, _callback);

    }

    /**
     * Remove a member from a Telegraf config
     * 
     * @param userID The ID of the member to remove. (required)
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTelegrafsIDMembersID(String userID, String telegrafID, String zapTraceSpan) throws ApiException {
        deleteTelegrafsIDMembersIDWithHttpInfo(userID, telegrafID, zapTraceSpan);
    }

    /**
     * Remove a member from a Telegraf config
     * 
     * @param userID The ID of the member to remove. (required)
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTelegrafsIDMembersIDWithHttpInfo(String userID, String telegrafID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTelegrafsIDMembersIDValidateBeforeCall(userID, telegrafID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a member from a Telegraf config (asynchronously)
     * 
     * @param userID The ID of the member to remove. (required)
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Member removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTelegrafsIDMembersIDAsync(String userID, String telegrafID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTelegrafsIDMembersIDValidateBeforeCall(userID, telegrafID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTelegrafsIDOwnersID
     * @param userID The ID of the owner to remove. (required)
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTelegrafsIDOwnersIDCall(String userID, String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/owners/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTelegrafsIDOwnersIDValidateBeforeCall(String userID, String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling deleteTelegrafsIDOwnersID(Async)");
        }

        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling deleteTelegrafsIDOwnersID(Async)");
        }

        return deleteTelegrafsIDOwnersIDCall(userID, telegrafID, zapTraceSpan, _callback);

    }

    /**
     * Remove an owner from a Telegraf config
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTelegrafsIDOwnersID(String userID, String telegrafID, String zapTraceSpan) throws ApiException {
        deleteTelegrafsIDOwnersIDWithHttpInfo(userID, telegrafID, zapTraceSpan);
    }

    /**
     * Remove an owner from a Telegraf config
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTelegrafsIDOwnersIDWithHttpInfo(String userID, String telegrafID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteTelegrafsIDOwnersIDValidateBeforeCall(userID, telegrafID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an owner from a Telegraf config (asynchronously)
     * 
     * @param userID The ID of the owner to remove. (required)
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Owner removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTelegrafsIDOwnersIDAsync(String userID, String telegrafID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTelegrafsIDOwnersIDValidateBeforeCall(userID, telegrafID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTelegrafs
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param orgID The organization ID the Telegraf config belongs to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Telegraf configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsCall(String zapTraceSpan, String orgID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTelegrafsValidateBeforeCall(String zapTraceSpan, String orgID, final ApiCallback _callback) throws ApiException {
        return getTelegrafsCall(zapTraceSpan, orgID, _callback);

    }

    /**
     * List all Telegraf configurations
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param orgID The organization ID the Telegraf config belongs to. (optional)
     * @return Telegrafs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Telegraf configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Telegrafs getTelegrafs(String zapTraceSpan, String orgID) throws ApiException {
        ApiResponse<Telegrafs> localVarResp = getTelegrafsWithHttpInfo(zapTraceSpan, orgID);
        return localVarResp.getData();
    }

    /**
     * List all Telegraf configurations
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param orgID The organization ID the Telegraf config belongs to. (optional)
     * @return ApiResponse&lt;Telegrafs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Telegraf configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Telegrafs> getTelegrafsWithHttpInfo(String zapTraceSpan, String orgID) throws ApiException {
        okhttp3.Call localVarCall = getTelegrafsValidateBeforeCall(zapTraceSpan, orgID, null);
        Type localVarReturnType = new TypeToken<Telegrafs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Telegraf configurations (asynchronously)
     * 
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param orgID The organization ID the Telegraf config belongs to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Telegraf configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsAsync(String zapTraceSpan, String orgID, final ApiCallback<Telegrafs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTelegrafsValidateBeforeCall(zapTraceSpan, orgID, _callback);
        Type localVarReturnType = new TypeToken<Telegrafs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTelegrafsID
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param accept  (optional, default to application/toml)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Telegraf configuration details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsIDCall(String telegrafID, String zapTraceSpan, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream",
            "application/toml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTelegrafsIDValidateBeforeCall(String telegrafID, String zapTraceSpan, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling getTelegrafsID(Async)");
        }

        return getTelegrafsIDCall(telegrafID, zapTraceSpan, accept, _callback);

    }

    /**
     * Retrieve a Telegraf configuration
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param accept  (optional, default to application/toml)
     * @return Telegraf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Telegraf configuration details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Telegraf getTelegrafsID(String telegrafID, String zapTraceSpan, String accept) throws ApiException {
        ApiResponse<Telegraf> localVarResp = getTelegrafsIDWithHttpInfo(telegrafID, zapTraceSpan, accept);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Telegraf configuration
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param accept  (optional, default to application/toml)
     * @return ApiResponse&lt;Telegraf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Telegraf configuration details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Telegraf> getTelegrafsIDWithHttpInfo(String telegrafID, String zapTraceSpan, String accept) throws ApiException {
        okhttp3.Call localVarCall = getTelegrafsIDValidateBeforeCall(telegrafID, zapTraceSpan, accept, null);
        Type localVarReturnType = new TypeToken<Telegraf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Telegraf configuration (asynchronously)
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param accept  (optional, default to application/toml)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Telegraf configuration details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsIDAsync(String telegrafID, String zapTraceSpan, String accept, final ApiCallback<Telegraf> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTelegrafsIDValidateBeforeCall(telegrafID, zapTraceSpan, accept, _callback);
        Type localVarReturnType = new TypeToken<Telegraf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTelegrafsIDLabels
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsIDLabelsCall(String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/labels"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTelegrafsIDLabelsValidateBeforeCall(String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling getTelegrafsIDLabels(Async)");
        }

        return getTelegrafsIDLabelsCall(telegrafID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getTelegrafsIDLabels(String telegrafID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getTelegrafsIDLabelsWithHttpInfo(telegrafID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getTelegrafsIDLabelsWithHttpInfo(String telegrafID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTelegrafsIDLabelsValidateBeforeCall(telegrafID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a Telegraf config (asynchronously)
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsIDLabelsAsync(String telegrafID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTelegrafsIDLabelsValidateBeforeCall(telegrafID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTelegrafsIDMembers
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Telegraf config members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsIDMembersCall(String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/members"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTelegrafsIDMembersValidateBeforeCall(String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling getTelegrafsIDMembers(Async)");
        }

        return getTelegrafsIDMembersCall(telegrafID, zapTraceSpan, _callback);

    }

    /**
     * List all users with member privileges for a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Telegraf config members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMembers getTelegrafsIDMembers(String telegrafID, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceMembers> localVarResp = getTelegrafsIDMembersWithHttpInfo(telegrafID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all users with member privileges for a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Telegraf config members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMembers> getTelegrafsIDMembersWithHttpInfo(String telegrafID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTelegrafsIDMembersValidateBeforeCall(telegrafID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all users with member privileges for a Telegraf config (asynchronously)
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Telegraf config members </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsIDMembersAsync(String telegrafID, String zapTraceSpan, final ApiCallback<ResourceMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTelegrafsIDMembersValidateBeforeCall(telegrafID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTelegrafsIDOwners
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Telegraf configuration owners as a ResourceOwners list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsIDOwnersCall(String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/owners"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTelegrafsIDOwnersValidateBeforeCall(String telegrafID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling getTelegrafsIDOwners(Async)");
        }

        return getTelegrafsIDOwnersCall(telegrafID, zapTraceSpan, _callback);

    }

    /**
     * List all owners of a Telegraf configuration
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceOwners
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Telegraf configuration owners as a ResourceOwners list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOwners getTelegrafsIDOwners(String telegrafID, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceOwners> localVarResp = getTelegrafsIDOwnersWithHttpInfo(telegrafID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all owners of a Telegraf configuration
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceOwners&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Telegraf configuration owners as a ResourceOwners list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOwners> getTelegrafsIDOwnersWithHttpInfo(String telegrafID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getTelegrafsIDOwnersValidateBeforeCall(telegrafID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceOwners>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all owners of a Telegraf configuration (asynchronously)
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Telegraf configuration owners as a ResourceOwners list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTelegrafsIDOwnersAsync(String telegrafID, String zapTraceSpan, final ApiCallback<ResourceOwners> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTelegrafsIDOwnersValidateBeforeCall(telegrafID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceOwners>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTelegrafs
     * @param telegrafRequest Telegraf configuration to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Telegraf configuration created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTelegrafsCall(TelegrafRequest telegrafRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = telegrafRequest;

        // create path and map variables
        String localVarPath = "/telegrafs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTelegrafsValidateBeforeCall(TelegrafRequest telegrafRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafRequest' is set
        if (telegrafRequest == null) {
            throw new ApiException("Missing the required parameter 'telegrafRequest' when calling postTelegrafs(Async)");
        }

        return postTelegrafsCall(telegrafRequest, zapTraceSpan, _callback);

    }

    /**
     * Create a Telegraf configuration
     * 
     * @param telegrafRequest Telegraf configuration to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Telegraf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Telegraf configuration created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Telegraf postTelegrafs(TelegrafRequest telegrafRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<Telegraf> localVarResp = postTelegrafsWithHttpInfo(telegrafRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a Telegraf configuration
     * 
     * @param telegrafRequest Telegraf configuration to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Telegraf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Telegraf configuration created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Telegraf> postTelegrafsWithHttpInfo(TelegrafRequest telegrafRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postTelegrafsValidateBeforeCall(telegrafRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Telegraf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Telegraf configuration (asynchronously)
     * 
     * @param telegrafRequest Telegraf configuration to create (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Telegraf configuration created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTelegrafsAsync(TelegrafRequest telegrafRequest, String zapTraceSpan, final ApiCallback<Telegraf> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTelegrafsValidateBeforeCall(telegrafRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Telegraf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTelegrafsIDLabels
     * @param telegrafID The Telegraf config ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTelegrafsIDLabelsCall(String telegrafID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/labels"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTelegrafsIDLabelsValidateBeforeCall(String telegrafID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling postTelegrafsIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postTelegrafsIDLabels(Async)");
        }

        return postTelegrafsIDLabelsCall(telegrafID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postTelegrafsIDLabels(String telegrafID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postTelegrafsIDLabelsWithHttpInfo(telegrafID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postTelegrafsIDLabelsWithHttpInfo(String telegrafID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postTelegrafsIDLabelsValidateBeforeCall(telegrafID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a Telegraf config (asynchronously)
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label added to the Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTelegrafsIDLabelsAsync(String telegrafID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTelegrafsIDLabelsValidateBeforeCall(telegrafID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTelegrafsIDMembers
     * @param telegrafID The Telegraf config ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Member added to Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTelegrafsIDMembersCall(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResourceMemberRequestBody;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/members"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTelegrafsIDMembersValidateBeforeCall(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling postTelegrafsIDMembers(Async)");
        }

        // verify the required parameter 'addResourceMemberRequestBody' is set
        if (addResourceMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addResourceMemberRequestBody' when calling postTelegrafsIDMembers(Async)");
        }

        return postTelegrafsIDMembersCall(telegrafID, addResourceMemberRequestBody, zapTraceSpan, _callback);

    }

    /**
     * Add a member to a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Member added to Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMember postTelegrafsIDMembers(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceMember> localVarResp = postTelegrafsIDMembersWithHttpInfo(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a member to a Telegraf config
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Member added to Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMember> postTelegrafsIDMembersWithHttpInfo(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postTelegrafsIDMembersValidateBeforeCall(telegrafID, addResourceMemberRequestBody, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a member to a Telegraf config (asynchronously)
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param addResourceMemberRequestBody User to add as member (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Member added to Telegraf config </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTelegrafsIDMembersAsync(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback<ResourceMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTelegrafsIDMembersValidateBeforeCall(telegrafID, addResourceMemberRequestBody, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTelegrafsIDOwners
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Telegraf configuration owner was added. Returns a ResourceOwner that references the User. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTelegrafsIDOwnersCall(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResourceMemberRequestBody;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}/owners"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTelegrafsIDOwnersValidateBeforeCall(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling postTelegrafsIDOwners(Async)");
        }

        // verify the required parameter 'addResourceMemberRequestBody' is set
        if (addResourceMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addResourceMemberRequestBody' when calling postTelegrafsIDOwners(Async)");
        }

        return postTelegrafsIDOwnersCall(telegrafID, addResourceMemberRequestBody, zapTraceSpan, _callback);

    }

    /**
     * Add an owner to a Telegraf configuration
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ResourceOwner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Telegraf configuration owner was added. Returns a ResourceOwner that references the User. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceOwner postTelegrafsIDOwners(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        ApiResponse<ResourceOwner> localVarResp = postTelegrafsIDOwnersWithHttpInfo(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add an owner to a Telegraf configuration
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;ResourceOwner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Telegraf configuration owner was added. Returns a ResourceOwner that references the User. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceOwner> postTelegrafsIDOwnersWithHttpInfo(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postTelegrafsIDOwnersValidateBeforeCall(telegrafID, addResourceMemberRequestBody, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<ResourceOwner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an owner to a Telegraf configuration (asynchronously)
     * 
     * @param telegrafID The Telegraf configuration ID. (required)
     * @param addResourceMemberRequestBody User to add as owner (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Telegraf configuration owner was added. Returns a ResourceOwner that references the User. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTelegrafsIDOwnersAsync(String telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, String zapTraceSpan, final ApiCallback<ResourceOwner> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTelegrafsIDOwnersValidateBeforeCall(telegrafID, addResourceMemberRequestBody, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<ResourceOwner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putTelegrafsID
     * @param telegrafID The Telegraf config ID. (required)
     * @param telegrafRequest Telegraf configuration update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated Telegraf configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTelegrafsIDCall(String telegrafID, TelegrafRequest telegrafRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = telegrafRequest;

        // create path and map variables
        String localVarPath = "/telegrafs/{telegrafID}"
            .replace("{" + "telegrafID" + "}", localVarApiClient.escapeString(telegrafID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTelegrafsIDValidateBeforeCall(String telegrafID, TelegrafRequest telegrafRequest, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telegrafID' is set
        if (telegrafID == null) {
            throw new ApiException("Missing the required parameter 'telegrafID' when calling putTelegrafsID(Async)");
        }

        // verify the required parameter 'telegrafRequest' is set
        if (telegrafRequest == null) {
            throw new ApiException("Missing the required parameter 'telegrafRequest' when calling putTelegrafsID(Async)");
        }

        return putTelegrafsIDCall(telegrafID, telegrafRequest, zapTraceSpan, _callback);

    }

    /**
     * Update a Telegraf configuration
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param telegrafRequest Telegraf configuration update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Telegraf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated Telegraf configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Telegraf putTelegrafsID(String telegrafID, TelegrafRequest telegrafRequest, String zapTraceSpan) throws ApiException {
        ApiResponse<Telegraf> localVarResp = putTelegrafsIDWithHttpInfo(telegrafID, telegrafRequest, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a Telegraf configuration
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param telegrafRequest Telegraf configuration update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Telegraf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated Telegraf configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Telegraf> putTelegrafsIDWithHttpInfo(String telegrafID, TelegrafRequest telegrafRequest, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putTelegrafsIDValidateBeforeCall(telegrafID, telegrafRequest, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Telegraf>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Telegraf configuration (asynchronously)
     * 
     * @param telegrafID The Telegraf config ID. (required)
     * @param telegrafRequest Telegraf configuration update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated Telegraf configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTelegrafsIDAsync(String telegrafID, TelegrafRequest telegrafRequest, String zapTraceSpan, final ApiCallback<Telegraf> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTelegrafsIDValidateBeforeCall(telegrafID, telegrafRequest, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Telegraf>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
