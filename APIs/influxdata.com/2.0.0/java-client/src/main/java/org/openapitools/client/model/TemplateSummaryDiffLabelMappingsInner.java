/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateSummaryDiffLabelMappingsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateSummaryDiffLabelMappingsInner {
  public static final String SERIALIZED_NAME_LABEL_I_D = "labelID";
  @SerializedName(SERIALIZED_NAME_LABEL_I_D)
  private String labelID;

  public static final String SERIALIZED_NAME_LABEL_NAME = "labelName";
  @SerializedName(SERIALIZED_NAME_LABEL_NAME)
  private String labelName;

  public static final String SERIALIZED_NAME_LABEL_TEMPLATE_META_NAME = "labelTemplateMetaName";
  @SerializedName(SERIALIZED_NAME_LABEL_TEMPLATE_META_NAME)
  private String labelTemplateMetaName;

  public static final String SERIALIZED_NAME_RESOURCE_I_D = "resourceID";
  @SerializedName(SERIALIZED_NAME_RESOURCE_I_D)
  private String resourceID;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_RESOURCE_TEMPLATE_META_NAME = "resourceTemplateMetaName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TEMPLATE_META_NAME)
  private String resourceTemplateMetaName;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public TemplateSummaryDiffLabelMappingsInner() {
  }

  public TemplateSummaryDiffLabelMappingsInner labelID(String labelID) {
    this.labelID = labelID;
    return this;
  }

  /**
   * Get labelID
   * @return labelID
   */
  @javax.annotation.Nullable
  public String getLabelID() {
    return labelID;
  }

  public void setLabelID(String labelID) {
    this.labelID = labelID;
  }


  public TemplateSummaryDiffLabelMappingsInner labelName(String labelName) {
    this.labelName = labelName;
    return this;
  }

  /**
   * Get labelName
   * @return labelName
   */
  @javax.annotation.Nullable
  public String getLabelName() {
    return labelName;
  }

  public void setLabelName(String labelName) {
    this.labelName = labelName;
  }


  public TemplateSummaryDiffLabelMappingsInner labelTemplateMetaName(String labelTemplateMetaName) {
    this.labelTemplateMetaName = labelTemplateMetaName;
    return this;
  }

  /**
   * Get labelTemplateMetaName
   * @return labelTemplateMetaName
   */
  @javax.annotation.Nullable
  public String getLabelTemplateMetaName() {
    return labelTemplateMetaName;
  }

  public void setLabelTemplateMetaName(String labelTemplateMetaName) {
    this.labelTemplateMetaName = labelTemplateMetaName;
  }


  public TemplateSummaryDiffLabelMappingsInner resourceID(String resourceID) {
    this.resourceID = resourceID;
    return this;
  }

  /**
   * Get resourceID
   * @return resourceID
   */
  @javax.annotation.Nullable
  public String getResourceID() {
    return resourceID;
  }

  public void setResourceID(String resourceID) {
    this.resourceID = resourceID;
  }


  public TemplateSummaryDiffLabelMappingsInner resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Get resourceName
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public TemplateSummaryDiffLabelMappingsInner resourceTemplateMetaName(String resourceTemplateMetaName) {
    this.resourceTemplateMetaName = resourceTemplateMetaName;
    return this;
  }

  /**
   * Get resourceTemplateMetaName
   * @return resourceTemplateMetaName
   */
  @javax.annotation.Nullable
  public String getResourceTemplateMetaName() {
    return resourceTemplateMetaName;
  }

  public void setResourceTemplateMetaName(String resourceTemplateMetaName) {
    this.resourceTemplateMetaName = resourceTemplateMetaName;
  }


  public TemplateSummaryDiffLabelMappingsInner resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public TemplateSummaryDiffLabelMappingsInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSummaryDiffLabelMappingsInner templateSummaryDiffLabelMappingsInner = (TemplateSummaryDiffLabelMappingsInner) o;
    return Objects.equals(this.labelID, templateSummaryDiffLabelMappingsInner.labelID) &&
        Objects.equals(this.labelName, templateSummaryDiffLabelMappingsInner.labelName) &&
        Objects.equals(this.labelTemplateMetaName, templateSummaryDiffLabelMappingsInner.labelTemplateMetaName) &&
        Objects.equals(this.resourceID, templateSummaryDiffLabelMappingsInner.resourceID) &&
        Objects.equals(this.resourceName, templateSummaryDiffLabelMappingsInner.resourceName) &&
        Objects.equals(this.resourceTemplateMetaName, templateSummaryDiffLabelMappingsInner.resourceTemplateMetaName) &&
        Objects.equals(this.resourceType, templateSummaryDiffLabelMappingsInner.resourceType) &&
        Objects.equals(this.status, templateSummaryDiffLabelMappingsInner.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labelID, labelName, labelTemplateMetaName, resourceID, resourceName, resourceTemplateMetaName, resourceType, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSummaryDiffLabelMappingsInner {\n");
    sb.append("    labelID: ").append(toIndentedString(labelID)).append("\n");
    sb.append("    labelName: ").append(toIndentedString(labelName)).append("\n");
    sb.append("    labelTemplateMetaName: ").append(toIndentedString(labelTemplateMetaName)).append("\n");
    sb.append("    resourceID: ").append(toIndentedString(resourceID)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    resourceTemplateMetaName: ").append(toIndentedString(resourceTemplateMetaName)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("labelID");
    openapiFields.add("labelName");
    openapiFields.add("labelTemplateMetaName");
    openapiFields.add("resourceID");
    openapiFields.add("resourceName");
    openapiFields.add("resourceTemplateMetaName");
    openapiFields.add("resourceType");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateSummaryDiffLabelMappingsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateSummaryDiffLabelMappingsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateSummaryDiffLabelMappingsInner is not found in the empty JSON string", TemplateSummaryDiffLabelMappingsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateSummaryDiffLabelMappingsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateSummaryDiffLabelMappingsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("labelID") != null && !jsonObj.get("labelID").isJsonNull()) && !jsonObj.get("labelID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelID").toString()));
      }
      if ((jsonObj.get("labelName") != null && !jsonObj.get("labelName").isJsonNull()) && !jsonObj.get("labelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelName").toString()));
      }
      if ((jsonObj.get("labelTemplateMetaName") != null && !jsonObj.get("labelTemplateMetaName").isJsonNull()) && !jsonObj.get("labelTemplateMetaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelTemplateMetaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelTemplateMetaName").toString()));
      }
      if ((jsonObj.get("resourceID") != null && !jsonObj.get("resourceID").isJsonNull()) && !jsonObj.get("resourceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceID").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("resourceTemplateMetaName") != null && !jsonObj.get("resourceTemplateMetaName").isJsonNull()) && !jsonObj.get("resourceTemplateMetaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceTemplateMetaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceTemplateMetaName").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateSummaryDiffLabelMappingsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateSummaryDiffLabelMappingsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateSummaryDiffLabelMappingsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateSummaryDiffLabelMappingsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateSummaryDiffLabelMappingsInner>() {
           @Override
           public void write(JsonWriter out, TemplateSummaryDiffLabelMappingsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateSummaryDiffLabelMappingsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateSummaryDiffLabelMappingsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateSummaryDiffLabelMappingsInner
   * @throws IOException if the JSON string is invalid with respect to TemplateSummaryDiffLabelMappingsInner
   */
  public static TemplateSummaryDiffLabelMappingsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateSummaryDiffLabelMappingsInner.class);
  }

  /**
   * Convert an instance of TemplateSummaryDiffLabelMappingsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

