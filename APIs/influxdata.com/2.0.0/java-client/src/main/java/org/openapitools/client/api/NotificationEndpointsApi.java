/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.NotificationEndpoint;
import org.openapitools.client.model.NotificationEndpointDiscriminator;
import org.openapitools.client.model.NotificationEndpointUpdate;
import org.openapitools.client.model.NotificationEndpoints;
import org.openapitools.client.model.PostNotificationEndpoint;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationEndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationEndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNotificationEndpoint
     * @param postNotificationEndpoint Notification endpoint to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Notification endpoint created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNotificationEndpointCall(PostNotificationEndpoint postNotificationEndpoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postNotificationEndpoint;

        // create path and map variables
        String localVarPath = "/notificationEndpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNotificationEndpointValidateBeforeCall(PostNotificationEndpoint postNotificationEndpoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postNotificationEndpoint' is set
        if (postNotificationEndpoint == null) {
            throw new ApiException("Missing the required parameter 'postNotificationEndpoint' when calling createNotificationEndpoint(Async)");
        }

        return createNotificationEndpointCall(postNotificationEndpoint, _callback);

    }

    /**
     * Add a notification endpoint
     * 
     * @param postNotificationEndpoint Notification endpoint to create (required)
     * @return NotificationEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Notification endpoint created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationEndpoint createNotificationEndpoint(PostNotificationEndpoint postNotificationEndpoint) throws ApiException {
        ApiResponse<NotificationEndpoint> localVarResp = createNotificationEndpointWithHttpInfo(postNotificationEndpoint);
        return localVarResp.getData();
    }

    /**
     * Add a notification endpoint
     * 
     * @param postNotificationEndpoint Notification endpoint to create (required)
     * @return ApiResponse&lt;NotificationEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Notification endpoint created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationEndpoint> createNotificationEndpointWithHttpInfo(PostNotificationEndpoint postNotificationEndpoint) throws ApiException {
        okhttp3.Call localVarCall = createNotificationEndpointValidateBeforeCall(postNotificationEndpoint, null);
        Type localVarReturnType = new TypeToken<NotificationEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a notification endpoint (asynchronously)
     * 
     * @param postNotificationEndpoint Notification endpoint to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Notification endpoint created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNotificationEndpointAsync(PostNotificationEndpoint postNotificationEndpoint, final ApiCallback<NotificationEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNotificationEndpointValidateBeforeCall(postNotificationEndpoint, _callback);
        Type localVarReturnType = new TypeToken<NotificationEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNotificationEndpointsID
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationEndpointsIDCall(String endpointID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationEndpoints/{endpointID}"
            .replace("{" + "endpointID" + "}", localVarApiClient.escapeString(endpointID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNotificationEndpointsIDValidateBeforeCall(String endpointID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointID' is set
        if (endpointID == null) {
            throw new ApiException("Missing the required parameter 'endpointID' when calling deleteNotificationEndpointsID(Async)");
        }

        return deleteNotificationEndpointsIDCall(endpointID, zapTraceSpan, _callback);

    }

    /**
     * Delete a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNotificationEndpointsID(String endpointID, String zapTraceSpan) throws ApiException {
        deleteNotificationEndpointsIDWithHttpInfo(endpointID, zapTraceSpan);
    }

    /**
     * Delete a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNotificationEndpointsIDWithHttpInfo(String endpointID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteNotificationEndpointsIDValidateBeforeCall(endpointID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a notification endpoint (asynchronously)
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationEndpointsIDAsync(String endpointID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNotificationEndpointsIDValidateBeforeCall(endpointID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNotificationEndpointsIDLabelsID
     * @param endpointID The notification endpoint ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Endpoint or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationEndpointsIDLabelsIDCall(String endpointID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationEndpoints/{endpointID}/labels/{labelID}"
            .replace("{" + "endpointID" + "}", localVarApiClient.escapeString(endpointID.toString()))
            .replace("{" + "labelID" + "}", localVarApiClient.escapeString(labelID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNotificationEndpointsIDLabelsIDValidateBeforeCall(String endpointID, String labelID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointID' is set
        if (endpointID == null) {
            throw new ApiException("Missing the required parameter 'endpointID' when calling deleteNotificationEndpointsIDLabelsID(Async)");
        }

        // verify the required parameter 'labelID' is set
        if (labelID == null) {
            throw new ApiException("Missing the required parameter 'labelID' when calling deleteNotificationEndpointsIDLabelsID(Async)");
        }

        return deleteNotificationEndpointsIDLabelsIDCall(endpointID, labelID, zapTraceSpan, _callback);

    }

    /**
     * Delete a label from a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Endpoint or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNotificationEndpointsIDLabelsID(String endpointID, String labelID, String zapTraceSpan) throws ApiException {
        deleteNotificationEndpointsIDLabelsIDWithHttpInfo(endpointID, labelID, zapTraceSpan);
    }

    /**
     * Delete a label from a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Endpoint or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNotificationEndpointsIDLabelsIDWithHttpInfo(String endpointID, String labelID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteNotificationEndpointsIDLabelsIDValidateBeforeCall(endpointID, labelID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label from a notification endpoint (asynchronously)
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param labelID The ID of the label to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Endpoint or label not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNotificationEndpointsIDLabelsIDAsync(String endpointID, String labelID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNotificationEndpointsIDLabelsIDValidateBeforeCall(endpointID, labelID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNotificationEndpoints
     * @param orgID Only show notification endpoints that belong to specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification endpoints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationEndpointsCall(String orgID, String zapTraceSpan, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationEndpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationEndpointsValidateBeforeCall(String orgID, String zapTraceSpan, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling getNotificationEndpoints(Async)");
        }

        return getNotificationEndpointsCall(orgID, zapTraceSpan, offset, limit, _callback);

    }

    /**
     * List all notification endpoints
     * 
     * @param orgID Only show notification endpoints that belong to specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @return NotificationEndpoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification endpoints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationEndpoints getNotificationEndpoints(String orgID, String zapTraceSpan, Integer offset, Integer limit) throws ApiException {
        ApiResponse<NotificationEndpoints> localVarResp = getNotificationEndpointsWithHttpInfo(orgID, zapTraceSpan, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List all notification endpoints
     * 
     * @param orgID Only show notification endpoints that belong to specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @return ApiResponse&lt;NotificationEndpoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification endpoints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationEndpoints> getNotificationEndpointsWithHttpInfo(String orgID, String zapTraceSpan, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getNotificationEndpointsValidateBeforeCall(orgID, zapTraceSpan, offset, limit, null);
        Type localVarReturnType = new TypeToken<NotificationEndpoints>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all notification endpoints (asynchronously)
     * 
     * @param orgID Only show notification endpoints that belong to specific organization ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param offset  (optional)
     * @param limit  (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification endpoints </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationEndpointsAsync(String orgID, String zapTraceSpan, Integer offset, Integer limit, final ApiCallback<NotificationEndpoints> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationEndpointsValidateBeforeCall(orgID, zapTraceSpan, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<NotificationEndpoints>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNotificationEndpointsID
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The notification endpoint requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationEndpointsIDCall(String endpointID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationEndpoints/{endpointID}"
            .replace("{" + "endpointID" + "}", localVarApiClient.escapeString(endpointID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationEndpointsIDValidateBeforeCall(String endpointID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointID' is set
        if (endpointID == null) {
            throw new ApiException("Missing the required parameter 'endpointID' when calling getNotificationEndpointsID(Async)");
        }

        return getNotificationEndpointsIDCall(endpointID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return NotificationEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The notification endpoint requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationEndpoint getNotificationEndpointsID(String endpointID, String zapTraceSpan) throws ApiException {
        ApiResponse<NotificationEndpoint> localVarResp = getNotificationEndpointsIDWithHttpInfo(endpointID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;NotificationEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The notification endpoint requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationEndpoint> getNotificationEndpointsIDWithHttpInfo(String endpointID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getNotificationEndpointsIDValidateBeforeCall(endpointID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<NotificationEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a notification endpoint (asynchronously)
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The notification endpoint requested </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationEndpointsIDAsync(String endpointID, String zapTraceSpan, final ApiCallback<NotificationEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationEndpointsIDValidateBeforeCall(endpointID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<NotificationEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNotificationEndpointsIDLabels
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a notification endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationEndpointsIDLabelsCall(String endpointID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationEndpoints/{endpointID}/labels"
            .replace("{" + "endpointID" + "}", localVarApiClient.escapeString(endpointID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNotificationEndpointsIDLabelsValidateBeforeCall(String endpointID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointID' is set
        if (endpointID == null) {
            throw new ApiException("Missing the required parameter 'endpointID' when calling getNotificationEndpointsIDLabels(Async)");
        }

        return getNotificationEndpointsIDLabelsCall(endpointID, zapTraceSpan, _callback);

    }

    /**
     * List all labels for a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a notification endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse getNotificationEndpointsIDLabels(String endpointID, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = getNotificationEndpointsIDLabelsWithHttpInfo(endpointID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * List all labels for a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a notification endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> getNotificationEndpointsIDLabelsWithHttpInfo(String endpointID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getNotificationEndpointsIDLabelsValidateBeforeCall(endpointID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all labels for a notification endpoint (asynchronously)
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all labels for a notification endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNotificationEndpointsIDLabelsAsync(String endpointID, String zapTraceSpan, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNotificationEndpointsIDLabelsValidateBeforeCall(endpointID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchNotificationEndpointsID
     * @param endpointID The notification endpoint ID. (required)
     * @param notificationEndpointUpdate Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchNotificationEndpointsIDCall(String endpointID, NotificationEndpointUpdate notificationEndpointUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationEndpointUpdate;

        // create path and map variables
        String localVarPath = "/notificationEndpoints/{endpointID}"
            .replace("{" + "endpointID" + "}", localVarApiClient.escapeString(endpointID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchNotificationEndpointsIDValidateBeforeCall(String endpointID, NotificationEndpointUpdate notificationEndpointUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointID' is set
        if (endpointID == null) {
            throw new ApiException("Missing the required parameter 'endpointID' when calling patchNotificationEndpointsID(Async)");
        }

        // verify the required parameter 'notificationEndpointUpdate' is set
        if (notificationEndpointUpdate == null) {
            throw new ApiException("Missing the required parameter 'notificationEndpointUpdate' when calling patchNotificationEndpointsID(Async)");
        }

        return patchNotificationEndpointsIDCall(endpointID, notificationEndpointUpdate, zapTraceSpan, _callback);

    }

    /**
     * Update a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param notificationEndpointUpdate Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return NotificationEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationEndpoint patchNotificationEndpointsID(String endpointID, NotificationEndpointUpdate notificationEndpointUpdate, String zapTraceSpan) throws ApiException {
        ApiResponse<NotificationEndpoint> localVarResp = patchNotificationEndpointsIDWithHttpInfo(endpointID, notificationEndpointUpdate, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param notificationEndpointUpdate Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;NotificationEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationEndpoint> patchNotificationEndpointsIDWithHttpInfo(String endpointID, NotificationEndpointUpdate notificationEndpointUpdate, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchNotificationEndpointsIDValidateBeforeCall(endpointID, notificationEndpointUpdate, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<NotificationEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a notification endpoint (asynchronously)
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param notificationEndpointUpdate Check update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchNotificationEndpointsIDAsync(String endpointID, NotificationEndpointUpdate notificationEndpointUpdate, String zapTraceSpan, final ApiCallback<NotificationEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchNotificationEndpointsIDValidateBeforeCall(endpointID, notificationEndpointUpdate, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<NotificationEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postNotificationEndpointIDLabels
     * @param endpointID The notification endpoint ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the notification endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNotificationEndpointIDLabelsCall(String endpointID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labelMapping;

        // create path and map variables
        String localVarPath = "/notificationEndpoints/{endpointID}/labels"
            .replace("{" + "endpointID" + "}", localVarApiClient.escapeString(endpointID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNotificationEndpointIDLabelsValidateBeforeCall(String endpointID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointID' is set
        if (endpointID == null) {
            throw new ApiException("Missing the required parameter 'endpointID' when calling postNotificationEndpointIDLabels(Async)");
        }

        // verify the required parameter 'labelMapping' is set
        if (labelMapping == null) {
            throw new ApiException("Missing the required parameter 'labelMapping' when calling postNotificationEndpointIDLabels(Async)");
        }

        return postNotificationEndpointIDLabelsCall(endpointID, labelMapping, zapTraceSpan, _callback);

    }

    /**
     * Add a label to a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return LabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the notification endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LabelResponse postNotificationEndpointIDLabels(String endpointID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        ApiResponse<LabelResponse> localVarResp = postNotificationEndpointIDLabelsWithHttpInfo(endpointID, labelMapping, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a label to a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;LabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the notification endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelResponse> postNotificationEndpointIDLabelsWithHttpInfo(String endpointID, LabelMapping labelMapping, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postNotificationEndpointIDLabelsValidateBeforeCall(endpointID, labelMapping, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a label to a notification endpoint (asynchronously)
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param labelMapping Label to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The label was added to the notification endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNotificationEndpointIDLabelsAsync(String endpointID, LabelMapping labelMapping, String zapTraceSpan, final ApiCallback<LabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNotificationEndpointIDLabelsValidateBeforeCall(endpointID, labelMapping, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<LabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putNotificationEndpointsID
     * @param endpointID The notification endpoint ID. (required)
     * @param notificationEndpoint A new notification endpoint to replace the existing endpoint with (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putNotificationEndpointsIDCall(String endpointID, NotificationEndpoint notificationEndpoint, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationEndpoint;

        // create path and map variables
        String localVarPath = "/notificationEndpoints/{endpointID}"
            .replace("{" + "endpointID" + "}", localVarApiClient.escapeString(endpointID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putNotificationEndpointsIDValidateBeforeCall(String endpointID, NotificationEndpoint notificationEndpoint, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointID' is set
        if (endpointID == null) {
            throw new ApiException("Missing the required parameter 'endpointID' when calling putNotificationEndpointsID(Async)");
        }

        // verify the required parameter 'notificationEndpoint' is set
        if (notificationEndpoint == null) {
            throw new ApiException("Missing the required parameter 'notificationEndpoint' when calling putNotificationEndpointsID(Async)");
        }

        return putNotificationEndpointsIDCall(endpointID, notificationEndpoint, zapTraceSpan, _callback);

    }

    /**
     * Update a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param notificationEndpoint A new notification endpoint to replace the existing endpoint with (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return NotificationEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NotificationEndpoint putNotificationEndpointsID(String endpointID, NotificationEndpoint notificationEndpoint, String zapTraceSpan) throws ApiException {
        ApiResponse<NotificationEndpoint> localVarResp = putNotificationEndpointsIDWithHttpInfo(endpointID, notificationEndpoint, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a notification endpoint
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param notificationEndpoint A new notification endpoint to replace the existing endpoint with (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;NotificationEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationEndpoint> putNotificationEndpointsIDWithHttpInfo(String endpointID, NotificationEndpoint notificationEndpoint, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putNotificationEndpointsIDValidateBeforeCall(endpointID, notificationEndpoint, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<NotificationEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a notification endpoint (asynchronously)
     * 
     * @param endpointID The notification endpoint ID. (required)
     * @param notificationEndpoint A new notification endpoint to replace the existing endpoint with (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated notification endpoint </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The notification endpoint was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putNotificationEndpointsIDAsync(String endpointID, NotificationEndpoint notificationEndpoint, String zapTraceSpan, final ApiCallback<NotificationEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = putNotificationEndpointsIDValidateBeforeCall(endpointID, notificationEndpoint, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<NotificationEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
