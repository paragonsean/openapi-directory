/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Cell;
import org.openapitools.client.model.CellUpdate;
import org.openapitools.client.model.CreateCell;
import org.openapitools.client.model.Dashboard;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.View;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CellsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteDashboardsIDCellsID
     * @param dashboardID The ID of the dashboard to delete. (required)
     * @param cellID The ID of the cell to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cell successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDCellsIDCall(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDashboardsIDCellsIDValidateBeforeCall(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDCellsID(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling deleteDashboardsIDCellsID(Async)");
        }

        return deleteDashboardsIDCellsIDCall(dashboardID, cellID, zapTraceSpan, _callback);

    }

    /**
     * Delete a dashboard cell
     * 
     * @param dashboardID The ID of the dashboard to delete. (required)
     * @param cellID The ID of the cell to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cell successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDashboardsIDCellsID(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        deleteDashboardsIDCellsIDWithHttpInfo(dashboardID, cellID, zapTraceSpan);
    }

    /**
     * Delete a dashboard cell
     * 
     * @param dashboardID The ID of the dashboard to delete. (required)
     * @param cellID The ID of the cell to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cell successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDashboardsIDCellsIDWithHttpInfo(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDashboardsIDCellsIDValidateBeforeCall(dashboardID, cellID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a dashboard cell (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to delete. (required)
     * @param cellID The ID of the cell to delete. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Cell successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDashboardsIDCellsIDAsync(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDashboardsIDCellsIDValidateBeforeCall(dashboardID, cellID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDashboardsIDCellsIDView
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDCellsIDViewCall(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}/view"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsIDCellsIDViewValidateBeforeCall(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling getDashboardsIDCellsIDView(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling getDashboardsIDCellsIDView(Async)");
        }

        return getDashboardsIDCellsIDViewCall(dashboardID, cellID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve the view for a cell
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public View getDashboardsIDCellsIDView(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        ApiResponse<View> localVarResp = getDashboardsIDCellsIDViewWithHttpInfo(dashboardID, cellID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve the view for a cell
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> getDashboardsIDCellsIDViewWithHttpInfo(String dashboardID, String cellID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsIDCellsIDViewValidateBeforeCall(dashboardID, cellID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the view for a cell (asynchronously)
     * 
     * @param dashboardID The dashboard ID. (required)
     * @param cellID The cell ID. (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dashboard cells view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsIDCellsIDViewAsync(String dashboardID, String cellID, String zapTraceSpan, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsIDCellsIDViewValidateBeforeCall(dashboardID, cellID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDashboardsIDCellsID
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param cellUpdate  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard cell </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsIDCall(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cellUpdate;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDashboardsIDCellsIDValidateBeforeCall(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsID(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsID(Async)");
        }

        // verify the required parameter 'cellUpdate' is set
        if (cellUpdate == null) {
            throw new ApiException("Missing the required parameter 'cellUpdate' when calling patchDashboardsIDCellsID(Async)");
        }

        return patchDashboardsIDCellsIDCall(dashboardID, cellID, cellUpdate, zapTraceSpan, _callback);

    }

    /**
     * Update the non-positional information related to a cell
     * Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param cellUpdate  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Cell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard cell </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Cell patchDashboardsIDCellsID(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan) throws ApiException {
        ApiResponse<Cell> localVarResp = patchDashboardsIDCellsIDWithHttpInfo(dashboardID, cellID, cellUpdate, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update the non-positional information related to a cell
     * Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param cellUpdate  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Cell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard cell </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cell> patchDashboardsIDCellsIDWithHttpInfo(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchDashboardsIDCellsIDValidateBeforeCall(dashboardID, cellID, cellUpdate, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the non-positional information related to a cell (asynchronously)
     * Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param cellUpdate  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated dashboard cell </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsIDAsync(String dashboardID, String cellID, CellUpdate cellUpdate, String zapTraceSpan, final ApiCallback<Cell> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDashboardsIDCellsIDValidateBeforeCall(dashboardID, cellID, cellUpdate, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDashboardsIDCellsIDView
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsIDViewCall(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = view;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells/{cellID}/view"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()))
            .replace("{" + "cellID" + "}", localVarApiClient.escapeString(cellID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDashboardsIDCellsIDViewValidateBeforeCall(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsIDView(Async)");
        }

        // verify the required parameter 'cellID' is set
        if (cellID == null) {
            throw new ApiException("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsIDView(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling patchDashboardsIDCellsIDView(Async)");
        }

        return patchDashboardsIDCellsIDViewCall(dashboardID, cellID, view, zapTraceSpan, _callback);

    }

    /**
     * Update the view for a cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public View patchDashboardsIDCellsIDView(String dashboardID, String cellID, View view, String zapTraceSpan) throws ApiException {
        ApiResponse<View> localVarResp = patchDashboardsIDCellsIDViewWithHttpInfo(dashboardID, cellID, view, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update the view for a cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> patchDashboardsIDCellsIDViewWithHttpInfo(String dashboardID, String cellID, View view, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchDashboardsIDCellsIDViewValidateBeforeCall(dashboardID, cellID, view, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the view for a cell (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cellID The ID of the cell to update. (required)
     * @param view  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated cell view </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cell or dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDashboardsIDCellsIDViewAsync(String dashboardID, String cellID, View view, String zapTraceSpan, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDashboardsIDCellsIDViewValidateBeforeCall(dashboardID, cellID, view, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDashboardsIDCells
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param createCell Cell that will be added (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cell successfully added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDCellsCall(String dashboardID, CreateCell createCell, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCell;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDashboardsIDCellsValidateBeforeCall(String dashboardID, CreateCell createCell, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling postDashboardsIDCells(Async)");
        }

        // verify the required parameter 'createCell' is set
        if (createCell == null) {
            throw new ApiException("Missing the required parameter 'createCell' when calling postDashboardsIDCells(Async)");
        }

        return postDashboardsIDCellsCall(dashboardID, createCell, zapTraceSpan, _callback);

    }

    /**
     * Create a dashboard cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param createCell Cell that will be added (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Cell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cell successfully added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Cell postDashboardsIDCells(String dashboardID, CreateCell createCell, String zapTraceSpan) throws ApiException {
        ApiResponse<Cell> localVarResp = postDashboardsIDCellsWithHttpInfo(dashboardID, createCell, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Create a dashboard cell
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param createCell Cell that will be added (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Cell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cell successfully added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cell> postDashboardsIDCellsWithHttpInfo(String dashboardID, CreateCell createCell, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDashboardsIDCellsValidateBeforeCall(dashboardID, createCell, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a dashboard cell (asynchronously)
     * 
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param createCell Cell that will be added (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cell successfully added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDashboardsIDCellsAsync(String dashboardID, CreateCell createCell, String zapTraceSpan, final ApiCallback<Cell> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDashboardsIDCellsValidateBeforeCall(dashboardID, createCell, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Cell>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putDashboardsIDCells
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cell  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replaced dashboard cells </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDashboardsIDCellsCall(String dashboardID, List<Cell> cell, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cell;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboardID}/cells"
            .replace("{" + "dashboardID" + "}", localVarApiClient.escapeString(dashboardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDashboardsIDCellsValidateBeforeCall(String dashboardID, List<Cell> cell, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardID' is set
        if (dashboardID == null) {
            throw new ApiException("Missing the required parameter 'dashboardID' when calling putDashboardsIDCells(Async)");
        }

        // verify the required parameter 'cell' is set
        if (cell == null) {
            throw new ApiException("Missing the required parameter 'cell' when calling putDashboardsIDCells(Async)");
        }

        return putDashboardsIDCellsCall(dashboardID, cell, zapTraceSpan, _callback);

    }

    /**
     * Replace cells in a dashboard
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cell  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replaced dashboard cells </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Dashboard putDashboardsIDCells(String dashboardID, List<Cell> cell, String zapTraceSpan) throws ApiException {
        ApiResponse<Dashboard> localVarResp = putDashboardsIDCellsWithHttpInfo(dashboardID, cell, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Replace cells in a dashboard
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cell  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replaced dashboard cells </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboard> putDashboardsIDCellsWithHttpInfo(String dashboardID, List<Cell> cell, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = putDashboardsIDCellsValidateBeforeCall(dashboardID, cell, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace cells in a dashboard (asynchronously)
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     * @param dashboardID The ID of the dashboard to update. (required)
     * @param cell  (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Replaced dashboard cells </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Dashboard not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDashboardsIDCellsAsync(String dashboardID, List<Cell> cell, String zapTraceSpan, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDashboardsIDCellsValidateBeforeCall(dashboardID, cell, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
