/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HTTPNotificationRule;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.NotificationRuleBaseLinks;
import org.openapitools.client.model.PagerDutyNotificationRule;
import org.openapitools.client.model.SMTPNotificationRule;
import org.openapitools.client.model.SlackNotificationRule;
import org.openapitools.client.model.StatusRule;
import org.openapitools.client.model.TagRule;
import org.openapitools.client.model.TaskStatusType;
import org.openapitools.client.model.TelegramNotificationRule;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationRuleDiscriminator extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(NotificationRuleDiscriminator.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NotificationRuleDiscriminator.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NotificationRuleDiscriminator' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SlackNotificationRule> adapterSlackNotificationRule = gson.getDelegateAdapter(this, TypeToken.get(SlackNotificationRule.class));
            final TypeAdapter<SMTPNotificationRule> adapterSMTPNotificationRule = gson.getDelegateAdapter(this, TypeToken.get(SMTPNotificationRule.class));
            final TypeAdapter<PagerDutyNotificationRule> adapterPagerDutyNotificationRule = gson.getDelegateAdapter(this, TypeToken.get(PagerDutyNotificationRule.class));
            final TypeAdapter<HTTPNotificationRule> adapterHTTPNotificationRule = gson.getDelegateAdapter(this, TypeToken.get(HTTPNotificationRule.class));
            final TypeAdapter<TelegramNotificationRule> adapterTelegramNotificationRule = gson.getDelegateAdapter(this, TypeToken.get(TelegramNotificationRule.class));

            return (TypeAdapter<T>) new TypeAdapter<NotificationRuleDiscriminator>() {
                @Override
                public void write(JsonWriter out, NotificationRuleDiscriminator value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SlackNotificationRule`
                    if (value.getActualInstance() instanceof SlackNotificationRule) {
                        JsonElement element = adapterSlackNotificationRule.toJsonTree((SlackNotificationRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SMTPNotificationRule`
                    if (value.getActualInstance() instanceof SMTPNotificationRule) {
                        JsonElement element = adapterSMTPNotificationRule.toJsonTree((SMTPNotificationRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PagerDutyNotificationRule`
                    if (value.getActualInstance() instanceof PagerDutyNotificationRule) {
                        JsonElement element = adapterPagerDutyNotificationRule.toJsonTree((PagerDutyNotificationRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HTTPNotificationRule`
                    if (value.getActualInstance() instanceof HTTPNotificationRule) {
                        JsonElement element = adapterHTTPNotificationRule.toJsonTree((HTTPNotificationRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TelegramNotificationRule`
                    if (value.getActualInstance() instanceof TelegramNotificationRule) {
                        JsonElement element = adapterTelegramNotificationRule.toJsonTree((TelegramNotificationRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: HTTPNotificationRule, PagerDutyNotificationRule, SMTPNotificationRule, SlackNotificationRule, TelegramNotificationRule");
                }

                @Override
                public NotificationRuleDiscriminator read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SlackNotificationRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SlackNotificationRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterSlackNotificationRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SlackNotificationRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SlackNotificationRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SlackNotificationRule'", e);
                    }
                    // deserialize SMTPNotificationRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SMTPNotificationRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterSMTPNotificationRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SMTPNotificationRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SMTPNotificationRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SMTPNotificationRule'", e);
                    }
                    // deserialize PagerDutyNotificationRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PagerDutyNotificationRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterPagerDutyNotificationRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PagerDutyNotificationRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PagerDutyNotificationRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PagerDutyNotificationRule'", e);
                    }
                    // deserialize HTTPNotificationRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HTTPNotificationRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterHTTPNotificationRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HTTPNotificationRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HTTPNotificationRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HTTPNotificationRule'", e);
                    }
                    // deserialize TelegramNotificationRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TelegramNotificationRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterTelegramNotificationRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TelegramNotificationRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TelegramNotificationRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TelegramNotificationRule'", e);
                    }

                    if (match == 1) {
                        NotificationRuleDiscriminator ret = new NotificationRuleDiscriminator();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for NotificationRuleDiscriminator: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public NotificationRuleDiscriminator() {
        super("oneOf", Boolean.FALSE);
    }

    public NotificationRuleDiscriminator(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SlackNotificationRule", SlackNotificationRule.class);
        schemas.put("SMTPNotificationRule", SMTPNotificationRule.class);
        schemas.put("PagerDutyNotificationRule", PagerDutyNotificationRule.class);
        schemas.put("HTTPNotificationRule", HTTPNotificationRule.class);
        schemas.put("TelegramNotificationRule", TelegramNotificationRule.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return NotificationRuleDiscriminator.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * HTTPNotificationRule, PagerDutyNotificationRule, SMTPNotificationRule, SlackNotificationRule, TelegramNotificationRule
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SlackNotificationRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SMTPNotificationRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PagerDutyNotificationRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HTTPNotificationRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TelegramNotificationRule) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be HTTPNotificationRule, PagerDutyNotificationRule, SMTPNotificationRule, SlackNotificationRule, TelegramNotificationRule");
    }

    /**
     * Get the actual instance, which can be the following:
     * HTTPNotificationRule, PagerDutyNotificationRule, SMTPNotificationRule, SlackNotificationRule, TelegramNotificationRule
     *
     * @return The actual instance (HTTPNotificationRule, PagerDutyNotificationRule, SMTPNotificationRule, SlackNotificationRule, TelegramNotificationRule)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SlackNotificationRule`. If the actual instance is not `SlackNotificationRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SlackNotificationRule`
     * @throws ClassCastException if the instance is not `SlackNotificationRule`
     */
    public SlackNotificationRule getSlackNotificationRule() throws ClassCastException {
        return (SlackNotificationRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SMTPNotificationRule`. If the actual instance is not `SMTPNotificationRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SMTPNotificationRule`
     * @throws ClassCastException if the instance is not `SMTPNotificationRule`
     */
    public SMTPNotificationRule getSMTPNotificationRule() throws ClassCastException {
        return (SMTPNotificationRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PagerDutyNotificationRule`. If the actual instance is not `PagerDutyNotificationRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PagerDutyNotificationRule`
     * @throws ClassCastException if the instance is not `PagerDutyNotificationRule`
     */
    public PagerDutyNotificationRule getPagerDutyNotificationRule() throws ClassCastException {
        return (PagerDutyNotificationRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `HTTPNotificationRule`. If the actual instance is not `HTTPNotificationRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HTTPNotificationRule`
     * @throws ClassCastException if the instance is not `HTTPNotificationRule`
     */
    public HTTPNotificationRule getHTTPNotificationRule() throws ClassCastException {
        return (HTTPNotificationRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TelegramNotificationRule`. If the actual instance is not `TelegramNotificationRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TelegramNotificationRule`
     * @throws ClassCastException if the instance is not `TelegramNotificationRule`
     */
    public TelegramNotificationRule getTelegramNotificationRule() throws ClassCastException {
        return (TelegramNotificationRule)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NotificationRuleDiscriminator
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with SlackNotificationRule
        try {
            SlackNotificationRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SlackNotificationRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SMTPNotificationRule
        try {
            SMTPNotificationRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SMTPNotificationRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PagerDutyNotificationRule
        try {
            PagerDutyNotificationRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PagerDutyNotificationRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HTTPNotificationRule
        try {
            HTTPNotificationRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HTTPNotificationRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TelegramNotificationRule
        try {
            TelegramNotificationRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TelegramNotificationRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for NotificationRuleDiscriminator with oneOf schemas: HTTPNotificationRule, PagerDutyNotificationRule, SMTPNotificationRule, SlackNotificationRule, TelegramNotificationRule. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of NotificationRuleDiscriminator given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NotificationRuleDiscriminator
     * @throws IOException if the JSON string is invalid with respect to NotificationRuleDiscriminator
     */
    public static NotificationRuleDiscriminator fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NotificationRuleDiscriminator.class);
    }

    /**
     * Convert an instance of NotificationRuleDiscriminator to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

