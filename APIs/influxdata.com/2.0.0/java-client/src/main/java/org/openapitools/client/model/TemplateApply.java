/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.TemplateApplyActionsInner;
import org.openapitools.client.model.TemplateApplyEnvRefsValue;
import org.openapitools.client.model.TemplateApplyRemotesInner;
import org.openapitools.client.model.TemplateApplyTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateApply
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateApply {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<TemplateApplyActionsInner> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_ENV_REFS = "envRefs";
  @SerializedName(SERIALIZED_NAME_ENV_REFS)
  private Map<String, TemplateApplyEnvRefsValue> envRefs = new HashMap<>();

  public static final String SERIALIZED_NAME_ORG_I_D = "orgID";
  @SerializedName(SERIALIZED_NAME_ORG_I_D)
  private String orgID;

  public static final String SERIALIZED_NAME_REMOTES = "remotes";
  @SerializedName(SERIALIZED_NAME_REMOTES)
  private List<TemplateApplyRemotesInner> remotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private Map<String, String> secrets = new HashMap<>();

  public static final String SERIALIZED_NAME_STACK_I_D = "stackID";
  @SerializedName(SERIALIZED_NAME_STACK_I_D)
  private String stackID;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private TemplateApplyTemplate template;

  public static final String SERIALIZED_NAME_TEMPLATES = "templates";
  @SerializedName(SERIALIZED_NAME_TEMPLATES)
  private List<TemplateApplyTemplate> templates = new ArrayList<>();

  public TemplateApply() {
  }

  public TemplateApply actions(List<TemplateApplyActionsInner> actions) {
    this.actions = actions;
    return this;
  }

  public TemplateApply addActionsItem(TemplateApplyActionsInner actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List<TemplateApplyActionsInner> getActions() {
    return actions;
  }

  public void setActions(List<TemplateApplyActionsInner> actions) {
    this.actions = actions;
  }


  public TemplateApply dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * Get dryRun
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public TemplateApply envRefs(Map<String, TemplateApplyEnvRefsValue> envRefs) {
    this.envRefs = envRefs;
    return this;
  }

  public TemplateApply putEnvRefsItem(String key, TemplateApplyEnvRefsValue envRefsItem) {
    if (this.envRefs == null) {
      this.envRefs = new HashMap<>();
    }
    this.envRefs.put(key, envRefsItem);
    return this;
  }

  /**
   * Get envRefs
   * @return envRefs
   */
  @javax.annotation.Nullable
  public Map<String, TemplateApplyEnvRefsValue> getEnvRefs() {
    return envRefs;
  }

  public void setEnvRefs(Map<String, TemplateApplyEnvRefsValue> envRefs) {
    this.envRefs = envRefs;
  }


  public TemplateApply orgID(String orgID) {
    this.orgID = orgID;
    return this;
  }

  /**
   * Get orgID
   * @return orgID
   */
  @javax.annotation.Nullable
  public String getOrgID() {
    return orgID;
  }

  public void setOrgID(String orgID) {
    this.orgID = orgID;
  }


  public TemplateApply remotes(List<TemplateApplyRemotesInner> remotes) {
    this.remotes = remotes;
    return this;
  }

  public TemplateApply addRemotesItem(TemplateApplyRemotesInner remotesItem) {
    if (this.remotes == null) {
      this.remotes = new ArrayList<>();
    }
    this.remotes.add(remotesItem);
    return this;
  }

  /**
   * Get remotes
   * @return remotes
   */
  @javax.annotation.Nullable
  public List<TemplateApplyRemotesInner> getRemotes() {
    return remotes;
  }

  public void setRemotes(List<TemplateApplyRemotesInner> remotes) {
    this.remotes = remotes;
  }


  public TemplateApply secrets(Map<String, String> secrets) {
    this.secrets = secrets;
    return this;
  }

  public TemplateApply putSecretsItem(String key, String secretsItem) {
    if (this.secrets == null) {
      this.secrets = new HashMap<>();
    }
    this.secrets.put(key, secretsItem);
    return this;
  }

  /**
   * Get secrets
   * @return secrets
   */
  @javax.annotation.Nullable
  public Map<String, String> getSecrets() {
    return secrets;
  }

  public void setSecrets(Map<String, String> secrets) {
    this.secrets = secrets;
  }


  public TemplateApply stackID(String stackID) {
    this.stackID = stackID;
    return this;
  }

  /**
   * Get stackID
   * @return stackID
   */
  @javax.annotation.Nullable
  public String getStackID() {
    return stackID;
  }

  public void setStackID(String stackID) {
    this.stackID = stackID;
  }


  public TemplateApply template(TemplateApplyTemplate template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public TemplateApplyTemplate getTemplate() {
    return template;
  }

  public void setTemplate(TemplateApplyTemplate template) {
    this.template = template;
  }


  public TemplateApply templates(List<TemplateApplyTemplate> templates) {
    this.templates = templates;
    return this;
  }

  public TemplateApply addTemplatesItem(TemplateApplyTemplate templatesItem) {
    if (this.templates == null) {
      this.templates = new ArrayList<>();
    }
    this.templates.add(templatesItem);
    return this;
  }

  /**
   * Get templates
   * @return templates
   */
  @javax.annotation.Nullable
  public List<TemplateApplyTemplate> getTemplates() {
    return templates;
  }

  public void setTemplates(List<TemplateApplyTemplate> templates) {
    this.templates = templates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateApply templateApply = (TemplateApply) o;
    return Objects.equals(this.actions, templateApply.actions) &&
        Objects.equals(this.dryRun, templateApply.dryRun) &&
        Objects.equals(this.envRefs, templateApply.envRefs) &&
        Objects.equals(this.orgID, templateApply.orgID) &&
        Objects.equals(this.remotes, templateApply.remotes) &&
        Objects.equals(this.secrets, templateApply.secrets) &&
        Objects.equals(this.stackID, templateApply.stackID) &&
        Objects.equals(this.template, templateApply.template) &&
        Objects.equals(this.templates, templateApply.templates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, dryRun, envRefs, orgID, remotes, secrets, stackID, template, templates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateApply {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    envRefs: ").append(toIndentedString(envRefs)).append("\n");
    sb.append("    orgID: ").append(toIndentedString(orgID)).append("\n");
    sb.append("    remotes: ").append(toIndentedString(remotes)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    stackID: ").append(toIndentedString(stackID)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("dryRun");
    openapiFields.add("envRefs");
    openapiFields.add("orgID");
    openapiFields.add("remotes");
    openapiFields.add("secrets");
    openapiFields.add("stackID");
    openapiFields.add("template");
    openapiFields.add("templates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateApply
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateApply.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateApply is not found in the empty JSON string", TemplateApply.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateApply.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateApply` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            TemplateApplyActionsInner.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if ((jsonObj.get("orgID") != null && !jsonObj.get("orgID").isJsonNull()) && !jsonObj.get("orgID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgID").toString()));
      }
      if (jsonObj.get("remotes") != null && !jsonObj.get("remotes").isJsonNull()) {
        JsonArray jsonArrayremotes = jsonObj.getAsJsonArray("remotes");
        if (jsonArrayremotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("remotes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `remotes` to be an array in the JSON string but got `%s`", jsonObj.get("remotes").toString()));
          }

          // validate the optional field `remotes` (array)
          for (int i = 0; i < jsonArrayremotes.size(); i++) {
            TemplateApplyRemotesInner.validateJsonElement(jsonArrayremotes.get(i));
          };
        }
      }
      if ((jsonObj.get("stackID") != null && !jsonObj.get("stackID").isJsonNull()) && !jsonObj.get("stackID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackID").toString()));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        TemplateApplyTemplate.validateJsonElement(jsonObj.get("template"));
      }
      if (jsonObj.get("templates") != null && !jsonObj.get("templates").isJsonNull()) {
        JsonArray jsonArraytemplates = jsonObj.getAsJsonArray("templates");
        if (jsonArraytemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("templates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `templates` to be an array in the JSON string but got `%s`", jsonObj.get("templates").toString()));
          }

          // validate the optional field `templates` (array)
          for (int i = 0; i < jsonArraytemplates.size(); i++) {
            TemplateApplyTemplate.validateJsonElement(jsonArraytemplates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateApply.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateApply' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateApply> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateApply.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateApply>() {
           @Override
           public void write(JsonWriter out, TemplateApply value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateApply read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateApply given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateApply
   * @throws IOException if the JSON string is invalid with respect to TemplateApply
   */
  public static TemplateApply fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateApply.class);
  }

  /**
   * Convert an instance of TemplateApply to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

