/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DBRP;
import org.openapitools.client.model.DBRPUpdate;
import org.openapitools.client.model.DBRPs;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DbrpsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DbrpsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DbrpsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteDBRPID
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDBRPIDCall(String orgID, String dbrpID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbrps/{dbrpID}"
            .replace("{" + "dbrpID" + "}", localVarApiClient.escapeString(dbrpID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDBRPIDValidateBeforeCall(String orgID, String dbrpID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling deleteDBRPID(Async)");
        }

        // verify the required parameter 'dbrpID' is set
        if (dbrpID == null) {
            throw new ApiException("Missing the required parameter 'dbrpID' when calling deleteDBRPID(Async)");
        }

        return deleteDBRPIDCall(orgID, dbrpID, zapTraceSpan, _callback);

    }

    /**
     * Delete a database retention policy
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDBRPID(String orgID, String dbrpID, String zapTraceSpan) throws ApiException {
        deleteDBRPIDWithHttpInfo(orgID, dbrpID, zapTraceSpan);
    }

    /**
     * Delete a database retention policy
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDBRPIDWithHttpInfo(String orgID, String dbrpID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = deleteDBRPIDValidateBeforeCall(orgID, dbrpID, zapTraceSpan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a database retention policy (asynchronously)
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete has been accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDBRPIDAsync(String orgID, String dbrpID, String zapTraceSpan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDBRPIDValidateBeforeCall(orgID, dbrpID, zapTraceSpan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDBRPs
     * @param orgID Specifies the organization ID to filter on (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param id Specifies the mapping ID to filter on (optional)
     * @param bucketID Specifies the bucket ID to filter on (optional)
     * @param _default Specifies filtering on default (optional)
     * @param db Specifies the database to filter on (optional)
     * @param rp Specifies the retention policy to filter on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all database retention policy mappings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the parameter passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDBRPsCall(String orgID, String zapTraceSpan, String id, String bucketID, Boolean _default, String db, String rp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbrps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (bucketID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bucketID", bucketID));
        }

        if (_default != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("default", _default));
        }

        if (db != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("db", db));
        }

        if (rp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rp", rp));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDBRPsValidateBeforeCall(String orgID, String zapTraceSpan, String id, String bucketID, Boolean _default, String db, String rp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling getDBRPs(Async)");
        }

        return getDBRPsCall(orgID, zapTraceSpan, id, bucketID, _default, db, rp, _callback);

    }

    /**
     * List all database retention policy mappings
     * 
     * @param orgID Specifies the organization ID to filter on (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param id Specifies the mapping ID to filter on (optional)
     * @param bucketID Specifies the bucket ID to filter on (optional)
     * @param _default Specifies filtering on default (optional)
     * @param db Specifies the database to filter on (optional)
     * @param rp Specifies the retention policy to filter on (optional)
     * @return DBRPs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all database retention policy mappings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the parameter passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DBRPs getDBRPs(String orgID, String zapTraceSpan, String id, String bucketID, Boolean _default, String db, String rp) throws ApiException {
        ApiResponse<DBRPs> localVarResp = getDBRPsWithHttpInfo(orgID, zapTraceSpan, id, bucketID, _default, db, rp);
        return localVarResp.getData();
    }

    /**
     * List all database retention policy mappings
     * 
     * @param orgID Specifies the organization ID to filter on (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param id Specifies the mapping ID to filter on (optional)
     * @param bucketID Specifies the bucket ID to filter on (optional)
     * @param _default Specifies filtering on default (optional)
     * @param db Specifies the database to filter on (optional)
     * @param rp Specifies the retention policy to filter on (optional)
     * @return ApiResponse&lt;DBRPs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all database retention policy mappings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the parameter passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBRPs> getDBRPsWithHttpInfo(String orgID, String zapTraceSpan, String id, String bucketID, Boolean _default, String db, String rp) throws ApiException {
        okhttp3.Call localVarCall = getDBRPsValidateBeforeCall(orgID, zapTraceSpan, id, bucketID, _default, db, rp, null);
        Type localVarReturnType = new TypeToken<DBRPs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all database retention policy mappings (asynchronously)
     * 
     * @param orgID Specifies the organization ID to filter on (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param id Specifies the mapping ID to filter on (optional)
     * @param bucketID Specifies the bucket ID to filter on (optional)
     * @param _default Specifies filtering on default (optional)
     * @param db Specifies the database to filter on (optional)
     * @param rp Specifies the retention policy to filter on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all database retention policy mappings </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the parameter passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDBRPsAsync(String orgID, String zapTraceSpan, String id, String bucketID, Boolean _default, String db, String rp, final ApiCallback<DBRPs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDBRPsValidateBeforeCall(orgID, zapTraceSpan, id, bucketID, _default, db, rp, _callback);
        Type localVarReturnType = new TypeToken<DBRPs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDBRPsID
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping ID (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database retention policy requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDBRPsIDCall(String orgID, String dbrpID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dbrps/{dbrpID}"
            .replace("{" + "dbrpID" + "}", localVarApiClient.escapeString(dbrpID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDBRPsIDValidateBeforeCall(String orgID, String dbrpID, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling getDBRPsID(Async)");
        }

        // verify the required parameter 'dbrpID' is set
        if (dbrpID == null) {
            throw new ApiException("Missing the required parameter 'dbrpID' when calling getDBRPsID(Async)");
        }

        return getDBRPsIDCall(orgID, dbrpID, zapTraceSpan, _callback);

    }

    /**
     * Retrieve a database retention policy mapping
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping ID (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return DBRP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database retention policy requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DBRP getDBRPsID(String orgID, String dbrpID, String zapTraceSpan) throws ApiException {
        ApiResponse<DBRP> localVarResp = getDBRPsIDWithHttpInfo(orgID, dbrpID, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Retrieve a database retention policy mapping
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping ID (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;DBRP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database retention policy requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBRP> getDBRPsIDWithHttpInfo(String orgID, String dbrpID, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = getDBRPsIDValidateBeforeCall(orgID, dbrpID, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<DBRP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a database retention policy mapping (asynchronously)
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping ID (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The database retention policy requested </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDBRPsIDAsync(String orgID, String dbrpID, String zapTraceSpan, final ApiCallback<DBRP> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDBRPsIDValidateBeforeCall(orgID, dbrpID, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<DBRP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDBRPID
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping. (required)
     * @param dbRPUpdate Database retention policy update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated mapping </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The mapping was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDBRPIDCall(String orgID, String dbrpID, DBRPUpdate dbRPUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dbRPUpdate;

        // create path and map variables
        String localVarPath = "/dbrps/{dbrpID}"
            .replace("{" + "dbrpID" + "}", localVarApiClient.escapeString(dbrpID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDBRPIDValidateBeforeCall(String orgID, String dbrpID, DBRPUpdate dbRPUpdate, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling patchDBRPID(Async)");
        }

        // verify the required parameter 'dbrpID' is set
        if (dbrpID == null) {
            throw new ApiException("Missing the required parameter 'dbrpID' when calling patchDBRPID(Async)");
        }

        // verify the required parameter 'dbRPUpdate' is set
        if (dbRPUpdate == null) {
            throw new ApiException("Missing the required parameter 'dbRPUpdate' when calling patchDBRPID(Async)");
        }

        return patchDBRPIDCall(orgID, dbrpID, dbRPUpdate, zapTraceSpan, _callback);

    }

    /**
     * Update a database retention policy mapping
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping. (required)
     * @param dbRPUpdate Database retention policy update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return DBRP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated mapping </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The mapping was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DBRP patchDBRPID(String orgID, String dbrpID, DBRPUpdate dbRPUpdate, String zapTraceSpan) throws ApiException {
        ApiResponse<DBRP> localVarResp = patchDBRPIDWithHttpInfo(orgID, dbrpID, dbRPUpdate, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Update a database retention policy mapping
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping. (required)
     * @param dbRPUpdate Database retention policy update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;DBRP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated mapping </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The mapping was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBRP> patchDBRPIDWithHttpInfo(String orgID, String dbrpID, DBRPUpdate dbRPUpdate, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = patchDBRPIDValidateBeforeCall(orgID, dbrpID, dbRPUpdate, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<DBRP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a database retention policy mapping (asynchronously)
     * 
     * @param orgID Specifies the organization ID of the mapping (required)
     * @param dbrpID The database retention policy mapping. (required)
     * @param dbRPUpdate Database retention policy update to apply (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An updated mapping </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs passed is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The mapping was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDBRPIDAsync(String orgID, String dbrpID, DBRPUpdate dbRPUpdate, String zapTraceSpan, final ApiCallback<DBRP> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDBRPIDValidateBeforeCall(orgID, dbrpID, dbRPUpdate, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<DBRP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postDBRP
     * @param DBRP The database retention policy mapping to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Database retention policy mapping created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs in the mapping is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDBRPCall(DBRP DBRP, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = DBRP;

        // create path and map variables
        String localVarPath = "/dbrps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zapTraceSpan != null) {
            localVarHeaderParams.put("Zap-Trace-Span", localVarApiClient.parameterToString(zapTraceSpan));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postDBRPValidateBeforeCall(DBRP DBRP, String zapTraceSpan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'DBRP' is set
        if (DBRP == null) {
            throw new ApiException("Missing the required parameter 'DBRP' when calling postDBRP(Async)");
        }

        return postDBRPCall(DBRP, zapTraceSpan, _callback);

    }

    /**
     * Add a database retention policy mapping
     * 
     * @param DBRP The database retention policy mapping to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return DBRP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Database retention policy mapping created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs in the mapping is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DBRP postDBRP(DBRP DBRP, String zapTraceSpan) throws ApiException {
        ApiResponse<DBRP> localVarResp = postDBRPWithHttpInfo(DBRP, zapTraceSpan);
        return localVarResp.getData();
    }

    /**
     * Add a database retention policy mapping
     * 
     * @param DBRP The database retention policy mapping to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @return ApiResponse&lt;DBRP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Database retention policy mapping created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs in the mapping is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBRP> postDBRPWithHttpInfo(DBRP DBRP, String zapTraceSpan) throws ApiException {
        okhttp3.Call localVarCall = postDBRPValidateBeforeCall(DBRP, zapTraceSpan, null);
        Type localVarReturnType = new TypeToken<DBRP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a database retention policy mapping (asynchronously)
     * 
     * @param DBRP The database retention policy mapping to add (required)
     * @param zapTraceSpan OpenTracing span context (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Database retention policy mapping created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> if any of the IDs in the mapping is invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postDBRPAsync(DBRP DBRP, String zapTraceSpan, final ApiCallback<DBRP> _callback) throws ApiException {

        okhttp3.Call localVarCall = postDBRPValidateBeforeCall(DBRP, zapTraceSpan, _callback);
        Type localVarReturnType = new TypeToken<DBRP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
