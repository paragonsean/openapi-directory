/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Expression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Selects one of two expressions, &#x60;Alternate&#x60; or &#x60;Consequent&#x60;, depending on a third boolean expression, &#x60;Test&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConditionalExpression {
  public static final String SERIALIZED_NAME_ALTERNATE = "alternate";
  @SerializedName(SERIALIZED_NAME_ALTERNATE)
  private Expression alternate;

  public static final String SERIALIZED_NAME_CONSEQUENT = "consequent";
  @SerializedName(SERIALIZED_NAME_CONSEQUENT)
  private Expression consequent;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Expression test;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ConditionalExpression() {
  }

  public ConditionalExpression alternate(Expression alternate) {
    this.alternate = alternate;
    return this;
  }

  /**
   * Get alternate
   * @return alternate
   */
  @javax.annotation.Nullable
  public Expression getAlternate() {
    return alternate;
  }

  public void setAlternate(Expression alternate) {
    this.alternate = alternate;
  }


  public ConditionalExpression consequent(Expression consequent) {
    this.consequent = consequent;
    return this;
  }

  /**
   * Get consequent
   * @return consequent
   */
  @javax.annotation.Nullable
  public Expression getConsequent() {
    return consequent;
  }

  public void setConsequent(Expression consequent) {
    this.consequent = consequent;
  }


  public ConditionalExpression test(Expression test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nullable
  public Expression getTest() {
    return test;
  }

  public void setTest(Expression test) {
    this.test = test;
  }


  public ConditionalExpression type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of AST node
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConditionalExpression conditionalExpression = (ConditionalExpression) o;
    return Objects.equals(this.alternate, conditionalExpression.alternate) &&
        Objects.equals(this.consequent, conditionalExpression.consequent) &&
        Objects.equals(this.test, conditionalExpression.test) &&
        Objects.equals(this.type, conditionalExpression.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternate, consequent, test, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConditionalExpression {\n");
    sb.append("    alternate: ").append(toIndentedString(alternate)).append("\n");
    sb.append("    consequent: ").append(toIndentedString(consequent)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternate");
    openapiFields.add("consequent");
    openapiFields.add("test");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConditionalExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConditionalExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConditionalExpression is not found in the empty JSON string", ConditionalExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConditionalExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConditionalExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alternate`
      if (jsonObj.get("alternate") != null && !jsonObj.get("alternate").isJsonNull()) {
        Expression.validateJsonElement(jsonObj.get("alternate"));
      }
      // validate the optional field `consequent`
      if (jsonObj.get("consequent") != null && !jsonObj.get("consequent").isJsonNull()) {
        Expression.validateJsonElement(jsonObj.get("consequent"));
      }
      // validate the optional field `test`
      if (jsonObj.get("test") != null && !jsonObj.get("test").isJsonNull()) {
        Expression.validateJsonElement(jsonObj.get("test"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConditionalExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConditionalExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConditionalExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConditionalExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<ConditionalExpression>() {
           @Override
           public void write(JsonWriter out, ConditionalExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConditionalExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConditionalExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConditionalExpression
   * @throws IOException if the JSON string is invalid with respect to ConditionalExpression
   */
  public static ConditionalExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConditionalExpression.class);
  }

  /**
   * Convert an instance of ConditionalExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

