/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuilderConfigAggregateWindow;
import org.openapitools.client.model.BuilderFunctionsType;
import org.openapitools.client.model.BuilderTagsType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuilderConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuilderConfig {
  public static final String SERIALIZED_NAME_AGGREGATE_WINDOW = "aggregateWindow";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_WINDOW)
  private BuilderConfigAggregateWindow aggregateWindow;

  public static final String SERIALIZED_NAME_BUCKETS = "buckets";
  @SerializedName(SERIALIZED_NAME_BUCKETS)
  private List<String> buckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNCTIONS = "functions";
  @SerializedName(SERIALIZED_NAME_FUNCTIONS)
  private List<BuilderFunctionsType> functions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<BuilderTagsType> tags = new ArrayList<>();

  public BuilderConfig() {
  }

  public BuilderConfig aggregateWindow(BuilderConfigAggregateWindow aggregateWindow) {
    this.aggregateWindow = aggregateWindow;
    return this;
  }

  /**
   * Get aggregateWindow
   * @return aggregateWindow
   */
  @javax.annotation.Nullable
  public BuilderConfigAggregateWindow getAggregateWindow() {
    return aggregateWindow;
  }

  public void setAggregateWindow(BuilderConfigAggregateWindow aggregateWindow) {
    this.aggregateWindow = aggregateWindow;
  }


  public BuilderConfig buckets(List<String> buckets) {
    this.buckets = buckets;
    return this;
  }

  public BuilderConfig addBucketsItem(String bucketsItem) {
    if (this.buckets == null) {
      this.buckets = new ArrayList<>();
    }
    this.buckets.add(bucketsItem);
    return this;
  }

  /**
   * Get buckets
   * @return buckets
   */
  @javax.annotation.Nullable
  public List<String> getBuckets() {
    return buckets;
  }

  public void setBuckets(List<String> buckets) {
    this.buckets = buckets;
  }


  public BuilderConfig functions(List<BuilderFunctionsType> functions) {
    this.functions = functions;
    return this;
  }

  public BuilderConfig addFunctionsItem(BuilderFunctionsType functionsItem) {
    if (this.functions == null) {
      this.functions = new ArrayList<>();
    }
    this.functions.add(functionsItem);
    return this;
  }

  /**
   * Get functions
   * @return functions
   */
  @javax.annotation.Nullable
  public List<BuilderFunctionsType> getFunctions() {
    return functions;
  }

  public void setFunctions(List<BuilderFunctionsType> functions) {
    this.functions = functions;
  }


  public BuilderConfig tags(List<BuilderTagsType> tags) {
    this.tags = tags;
    return this;
  }

  public BuilderConfig addTagsItem(BuilderTagsType tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<BuilderTagsType> getTags() {
    return tags;
  }

  public void setTags(List<BuilderTagsType> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuilderConfig builderConfig = (BuilderConfig) o;
    return Objects.equals(this.aggregateWindow, builderConfig.aggregateWindow) &&
        Objects.equals(this.buckets, builderConfig.buckets) &&
        Objects.equals(this.functions, builderConfig.functions) &&
        Objects.equals(this.tags, builderConfig.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateWindow, buckets, functions, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuilderConfig {\n");
    sb.append("    aggregateWindow: ").append(toIndentedString(aggregateWindow)).append("\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateWindow");
    openapiFields.add("buckets");
    openapiFields.add("functions");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuilderConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuilderConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuilderConfig is not found in the empty JSON string", BuilderConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuilderConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuilderConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregateWindow`
      if (jsonObj.get("aggregateWindow") != null && !jsonObj.get("aggregateWindow").isJsonNull()) {
        BuilderConfigAggregateWindow.validateJsonElement(jsonObj.get("aggregateWindow"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("buckets") != null && !jsonObj.get("buckets").isJsonNull() && !jsonObj.get("buckets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `buckets` to be an array in the JSON string but got `%s`", jsonObj.get("buckets").toString()));
      }
      if (jsonObj.get("functions") != null && !jsonObj.get("functions").isJsonNull()) {
        JsonArray jsonArrayfunctions = jsonObj.getAsJsonArray("functions");
        if (jsonArrayfunctions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("functions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `functions` to be an array in the JSON string but got `%s`", jsonObj.get("functions").toString()));
          }

          // validate the optional field `functions` (array)
          for (int i = 0; i < jsonArrayfunctions.size(); i++) {
            BuilderFunctionsType.validateJsonElement(jsonArrayfunctions.get(i));
          };
        }
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            BuilderTagsType.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuilderConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuilderConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuilderConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuilderConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BuilderConfig>() {
           @Override
           public void write(JsonWriter out, BuilderConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuilderConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuilderConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuilderConfig
   * @throws IOException if the JSON string is invalid with respect to BuilderConfig
   */
  public static BuilderConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuilderConfig.class);
  }

  /**
   * Convert an instance of BuilderConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

