/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Axes;
import org.openapitools.client.model.BandViewProperties;
import org.openapitools.client.model.Check;
import org.openapitools.client.model.CheckViewProperties;
import org.openapitools.client.model.DashboardColor;
import org.openapitools.client.model.DashboardQuery;
import org.openapitools.client.model.DecimalPlaces;
import org.openapitools.client.model.GaugeViewProperties;
import org.openapitools.client.model.GeoViewLayer;
import org.openapitools.client.model.GeoViewProperties;
import org.openapitools.client.model.GeoViewPropertiesCenter;
import org.openapitools.client.model.HeatmapViewProperties;
import org.openapitools.client.model.HistogramViewProperties;
import org.openapitools.client.model.LinePlusSingleStatProperties;
import org.openapitools.client.model.MarkdownViewProperties;
import org.openapitools.client.model.MosaicViewProperties;
import org.openapitools.client.model.RenamableField;
import org.openapitools.client.model.ScatterViewProperties;
import org.openapitools.client.model.SingleStatViewProperties;
import org.openapitools.client.model.StaticLegend;
import org.openapitools.client.model.TableViewProperties;
import org.openapitools.client.model.TableViewPropertiesTableOptions;
import org.openapitools.client.model.XYGeom;
import org.openapitools.client.model.XYViewProperties;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ViewProperties extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ViewProperties.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ViewProperties.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ViewProperties' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<LinePlusSingleStatProperties> adapterLinePlusSingleStatProperties = gson.getDelegateAdapter(this, TypeToken.get(LinePlusSingleStatProperties.class));
            final TypeAdapter<XYViewProperties> adapterXYViewProperties = gson.getDelegateAdapter(this, TypeToken.get(XYViewProperties.class));
            final TypeAdapter<SingleStatViewProperties> adapterSingleStatViewProperties = gson.getDelegateAdapter(this, TypeToken.get(SingleStatViewProperties.class));
            final TypeAdapter<HistogramViewProperties> adapterHistogramViewProperties = gson.getDelegateAdapter(this, TypeToken.get(HistogramViewProperties.class));
            final TypeAdapter<GaugeViewProperties> adapterGaugeViewProperties = gson.getDelegateAdapter(this, TypeToken.get(GaugeViewProperties.class));
            final TypeAdapter<TableViewProperties> adapterTableViewProperties = gson.getDelegateAdapter(this, TypeToken.get(TableViewProperties.class));
            final TypeAdapter<MarkdownViewProperties> adapterMarkdownViewProperties = gson.getDelegateAdapter(this, TypeToken.get(MarkdownViewProperties.class));
            final TypeAdapter<CheckViewProperties> adapterCheckViewProperties = gson.getDelegateAdapter(this, TypeToken.get(CheckViewProperties.class));
            final TypeAdapter<ScatterViewProperties> adapterScatterViewProperties = gson.getDelegateAdapter(this, TypeToken.get(ScatterViewProperties.class));
            final TypeAdapter<HeatmapViewProperties> adapterHeatmapViewProperties = gson.getDelegateAdapter(this, TypeToken.get(HeatmapViewProperties.class));
            final TypeAdapter<MosaicViewProperties> adapterMosaicViewProperties = gson.getDelegateAdapter(this, TypeToken.get(MosaicViewProperties.class));
            final TypeAdapter<BandViewProperties> adapterBandViewProperties = gson.getDelegateAdapter(this, TypeToken.get(BandViewProperties.class));
            final TypeAdapter<GeoViewProperties> adapterGeoViewProperties = gson.getDelegateAdapter(this, TypeToken.get(GeoViewProperties.class));

            return (TypeAdapter<T>) new TypeAdapter<ViewProperties>() {
                @Override
                public void write(JsonWriter out, ViewProperties value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `LinePlusSingleStatProperties`
                    if (value.getActualInstance() instanceof LinePlusSingleStatProperties) {
                        JsonElement element = adapterLinePlusSingleStatProperties.toJsonTree((LinePlusSingleStatProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `XYViewProperties`
                    if (value.getActualInstance() instanceof XYViewProperties) {
                        JsonElement element = adapterXYViewProperties.toJsonTree((XYViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SingleStatViewProperties`
                    if (value.getActualInstance() instanceof SingleStatViewProperties) {
                        JsonElement element = adapterSingleStatViewProperties.toJsonTree((SingleStatViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HistogramViewProperties`
                    if (value.getActualInstance() instanceof HistogramViewProperties) {
                        JsonElement element = adapterHistogramViewProperties.toJsonTree((HistogramViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GaugeViewProperties`
                    if (value.getActualInstance() instanceof GaugeViewProperties) {
                        JsonElement element = adapterGaugeViewProperties.toJsonTree((GaugeViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TableViewProperties`
                    if (value.getActualInstance() instanceof TableViewProperties) {
                        JsonElement element = adapterTableViewProperties.toJsonTree((TableViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MarkdownViewProperties`
                    if (value.getActualInstance() instanceof MarkdownViewProperties) {
                        JsonElement element = adapterMarkdownViewProperties.toJsonTree((MarkdownViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CheckViewProperties`
                    if (value.getActualInstance() instanceof CheckViewProperties) {
                        JsonElement element = adapterCheckViewProperties.toJsonTree((CheckViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ScatterViewProperties`
                    if (value.getActualInstance() instanceof ScatterViewProperties) {
                        JsonElement element = adapterScatterViewProperties.toJsonTree((ScatterViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HeatmapViewProperties`
                    if (value.getActualInstance() instanceof HeatmapViewProperties) {
                        JsonElement element = adapterHeatmapViewProperties.toJsonTree((HeatmapViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MosaicViewProperties`
                    if (value.getActualInstance() instanceof MosaicViewProperties) {
                        JsonElement element = adapterMosaicViewProperties.toJsonTree((MosaicViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BandViewProperties`
                    if (value.getActualInstance() instanceof BandViewProperties) {
                        JsonElement element = adapterBandViewProperties.toJsonTree((BandViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GeoViewProperties`
                    if (value.getActualInstance() instanceof GeoViewProperties) {
                        JsonElement element = adapterGeoViewProperties.toJsonTree((GeoViewProperties)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties");
                }

                @Override
                public ViewProperties read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize LinePlusSingleStatProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LinePlusSingleStatProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterLinePlusSingleStatProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LinePlusSingleStatProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LinePlusSingleStatProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LinePlusSingleStatProperties'", e);
                    }
                    // deserialize XYViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        XYViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterXYViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'XYViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for XYViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'XYViewProperties'", e);
                    }
                    // deserialize SingleStatViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SingleStatViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterSingleStatViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SingleStatViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SingleStatViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SingleStatViewProperties'", e);
                    }
                    // deserialize HistogramViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HistogramViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterHistogramViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HistogramViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HistogramViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HistogramViewProperties'", e);
                    }
                    // deserialize GaugeViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GaugeViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterGaugeViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GaugeViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GaugeViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GaugeViewProperties'", e);
                    }
                    // deserialize TableViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TableViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterTableViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TableViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TableViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TableViewProperties'", e);
                    }
                    // deserialize MarkdownViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MarkdownViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterMarkdownViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MarkdownViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MarkdownViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MarkdownViewProperties'", e);
                    }
                    // deserialize CheckViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CheckViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterCheckViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CheckViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CheckViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CheckViewProperties'", e);
                    }
                    // deserialize ScatterViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ScatterViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterScatterViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ScatterViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ScatterViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ScatterViewProperties'", e);
                    }
                    // deserialize HeatmapViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HeatmapViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterHeatmapViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HeatmapViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HeatmapViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HeatmapViewProperties'", e);
                    }
                    // deserialize MosaicViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MosaicViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterMosaicViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MosaicViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MosaicViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MosaicViewProperties'", e);
                    }
                    // deserialize BandViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BandViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterBandViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BandViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BandViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BandViewProperties'", e);
                    }
                    // deserialize GeoViewProperties
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeoViewProperties.validateJsonElement(jsonElement);
                        actualAdapter = adapterGeoViewProperties;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GeoViewProperties'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GeoViewProperties failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GeoViewProperties'", e);
                    }

                    if (match == 1) {
                        ViewProperties ret = new ViewProperties();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ViewProperties: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ViewProperties() {
        super("oneOf", Boolean.FALSE);
    }

    public ViewProperties(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("LinePlusSingleStatProperties", LinePlusSingleStatProperties.class);
        schemas.put("XYViewProperties", XYViewProperties.class);
        schemas.put("SingleStatViewProperties", SingleStatViewProperties.class);
        schemas.put("HistogramViewProperties", HistogramViewProperties.class);
        schemas.put("GaugeViewProperties", GaugeViewProperties.class);
        schemas.put("TableViewProperties", TableViewProperties.class);
        schemas.put("MarkdownViewProperties", MarkdownViewProperties.class);
        schemas.put("CheckViewProperties", CheckViewProperties.class);
        schemas.put("ScatterViewProperties", ScatterViewProperties.class);
        schemas.put("HeatmapViewProperties", HeatmapViewProperties.class);
        schemas.put("MosaicViewProperties", MosaicViewProperties.class);
        schemas.put("BandViewProperties", BandViewProperties.class);
        schemas.put("GeoViewProperties", GeoViewProperties.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ViewProperties.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof LinePlusSingleStatProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof XYViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SingleStatViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HistogramViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GaugeViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TableViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MarkdownViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CheckViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ScatterViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HeatmapViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BandViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GeoViewProperties) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties");
    }

    /**
     * Get the actual instance, which can be the following:
     * BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties
     *
     * @return The actual instance (BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `LinePlusSingleStatProperties`. If the actual instance is not `LinePlusSingleStatProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LinePlusSingleStatProperties`
     * @throws ClassCastException if the instance is not `LinePlusSingleStatProperties`
     */
    public LinePlusSingleStatProperties getLinePlusSingleStatProperties() throws ClassCastException {
        return (LinePlusSingleStatProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `XYViewProperties`. If the actual instance is not `XYViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `XYViewProperties`
     * @throws ClassCastException if the instance is not `XYViewProperties`
     */
    public XYViewProperties getXYViewProperties() throws ClassCastException {
        return (XYViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SingleStatViewProperties`. If the actual instance is not `SingleStatViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SingleStatViewProperties`
     * @throws ClassCastException if the instance is not `SingleStatViewProperties`
     */
    public SingleStatViewProperties getSingleStatViewProperties() throws ClassCastException {
        return (SingleStatViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `HistogramViewProperties`. If the actual instance is not `HistogramViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HistogramViewProperties`
     * @throws ClassCastException if the instance is not `HistogramViewProperties`
     */
    public HistogramViewProperties getHistogramViewProperties() throws ClassCastException {
        return (HistogramViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GaugeViewProperties`. If the actual instance is not `GaugeViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GaugeViewProperties`
     * @throws ClassCastException if the instance is not `GaugeViewProperties`
     */
    public GaugeViewProperties getGaugeViewProperties() throws ClassCastException {
        return (GaugeViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TableViewProperties`. If the actual instance is not `TableViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TableViewProperties`
     * @throws ClassCastException if the instance is not `TableViewProperties`
     */
    public TableViewProperties getTableViewProperties() throws ClassCastException {
        return (TableViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MarkdownViewProperties`. If the actual instance is not `MarkdownViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MarkdownViewProperties`
     * @throws ClassCastException if the instance is not `MarkdownViewProperties`
     */
    public MarkdownViewProperties getMarkdownViewProperties() throws ClassCastException {
        return (MarkdownViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CheckViewProperties`. If the actual instance is not `CheckViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CheckViewProperties`
     * @throws ClassCastException if the instance is not `CheckViewProperties`
     */
    public CheckViewProperties getCheckViewProperties() throws ClassCastException {
        return (CheckViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ScatterViewProperties`. If the actual instance is not `ScatterViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ScatterViewProperties`
     * @throws ClassCastException if the instance is not `ScatterViewProperties`
     */
    public ScatterViewProperties getScatterViewProperties() throws ClassCastException {
        return (ScatterViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `HeatmapViewProperties`. If the actual instance is not `HeatmapViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HeatmapViewProperties`
     * @throws ClassCastException if the instance is not `HeatmapViewProperties`
     */
    public HeatmapViewProperties getHeatmapViewProperties() throws ClassCastException {
        return (HeatmapViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicViewProperties`. If the actual instance is not `MosaicViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicViewProperties`
     * @throws ClassCastException if the instance is not `MosaicViewProperties`
     */
    public MosaicViewProperties getMosaicViewProperties() throws ClassCastException {
        return (MosaicViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BandViewProperties`. If the actual instance is not `BandViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BandViewProperties`
     * @throws ClassCastException if the instance is not `BandViewProperties`
     */
    public BandViewProperties getBandViewProperties() throws ClassCastException {
        return (BandViewProperties)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GeoViewProperties`. If the actual instance is not `GeoViewProperties`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeoViewProperties`
     * @throws ClassCastException if the instance is not `GeoViewProperties`
     */
    public GeoViewProperties getGeoViewProperties() throws ClassCastException {
        return (GeoViewProperties)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ViewProperties
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with LinePlusSingleStatProperties
        try {
            LinePlusSingleStatProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LinePlusSingleStatProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with XYViewProperties
        try {
            XYViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for XYViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SingleStatViewProperties
        try {
            SingleStatViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SingleStatViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HistogramViewProperties
        try {
            HistogramViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HistogramViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GaugeViewProperties
        try {
            GaugeViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GaugeViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TableViewProperties
        try {
            TableViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TableViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MarkdownViewProperties
        try {
            MarkdownViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MarkdownViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CheckViewProperties
        try {
            CheckViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CheckViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ScatterViewProperties
        try {
            ScatterViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ScatterViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HeatmapViewProperties
        try {
            HeatmapViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HeatmapViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MosaicViewProperties
        try {
            MosaicViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MosaicViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BandViewProperties
        try {
            BandViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BandViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GeoViewProperties
        try {
            GeoViewProperties.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GeoViewProperties failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ViewProperties with oneOf schemas: BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ViewProperties given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ViewProperties
     * @throws IOException if the JSON string is invalid with respect to ViewProperties
     */
    public static ViewProperties fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ViewProperties.class);
    }

    /**
     * Convert an instance of ViewProperties to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

