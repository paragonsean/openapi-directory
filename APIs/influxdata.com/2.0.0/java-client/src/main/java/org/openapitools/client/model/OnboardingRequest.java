/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OnboardingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnboardingRequest {
  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private String org;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD_HRS = "retentionPeriodHrs";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD_HRS)
  private Integer retentionPeriodHrs;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD_SECONDS = "retentionPeriodSeconds";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD_SECONDS)
  private Long retentionPeriodSeconds;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public OnboardingRequest() {
  }

  public OnboardingRequest bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Get bucket
   * @return bucket
   */
  @javax.annotation.Nonnull
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public OnboardingRequest org(String org) {
    this.org = org;
    return this;
  }

  /**
   * Get org
   * @return org
   */
  @javax.annotation.Nonnull
  public String getOrg() {
    return org;
  }

  public void setOrg(String org) {
    this.org = org;
  }


  public OnboardingRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  @Deprecated
  public OnboardingRequest retentionPeriodHrs(Integer retentionPeriodHrs) {
    this.retentionPeriodHrs = retentionPeriodHrs;
    return this;
  }

  /**
   * Retention period *in nanoseconds* for the new bucket. This key&#39;s name has been misleading since OSS 2.0 GA, please transition to use &#x60;retentionPeriodSeconds&#x60; 
   * @return retentionPeriodHrs
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getRetentionPeriodHrs() {
    return retentionPeriodHrs;
  }

  @Deprecated
  public void setRetentionPeriodHrs(Integer retentionPeriodHrs) {
    this.retentionPeriodHrs = retentionPeriodHrs;
  }


  public OnboardingRequest retentionPeriodSeconds(Long retentionPeriodSeconds) {
    this.retentionPeriodSeconds = retentionPeriodSeconds;
    return this;
  }

  /**
   * Get retentionPeriodSeconds
   * @return retentionPeriodSeconds
   */
  @javax.annotation.Nullable
  public Long getRetentionPeriodSeconds() {
    return retentionPeriodSeconds;
  }

  public void setRetentionPeriodSeconds(Long retentionPeriodSeconds) {
    this.retentionPeriodSeconds = retentionPeriodSeconds;
  }


  public OnboardingRequest token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token to set on the initial user. If not specified, the server will generate a token. 
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public OnboardingRequest username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnboardingRequest onboardingRequest = (OnboardingRequest) o;
    return Objects.equals(this.bucket, onboardingRequest.bucket) &&
        Objects.equals(this.org, onboardingRequest.org) &&
        Objects.equals(this.password, onboardingRequest.password) &&
        Objects.equals(this.retentionPeriodHrs, onboardingRequest.retentionPeriodHrs) &&
        Objects.equals(this.retentionPeriodSeconds, onboardingRequest.retentionPeriodSeconds) &&
        Objects.equals(this.token, onboardingRequest.token) &&
        Objects.equals(this.username, onboardingRequest.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, org, password, retentionPeriodHrs, retentionPeriodSeconds, token, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnboardingRequest {\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    retentionPeriodHrs: ").append(toIndentedString(retentionPeriodHrs)).append("\n");
    sb.append("    retentionPeriodSeconds: ").append(toIndentedString(retentionPeriodSeconds)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucket");
    openapiFields.add("org");
    openapiFields.add("password");
    openapiFields.add("retentionPeriodHrs");
    openapiFields.add("retentionPeriodSeconds");
    openapiFields.add("token");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bucket");
    openapiRequiredFields.add("org");
    openapiRequiredFields.add("username");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnboardingRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnboardingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnboardingRequest is not found in the empty JSON string", OnboardingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnboardingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnboardingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnboardingRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if (!jsonObj.get("org").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnboardingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnboardingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnboardingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnboardingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OnboardingRequest>() {
           @Override
           public void write(JsonWriter out, OnboardingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnboardingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnboardingRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnboardingRequest
   * @throws IOException if the JSON string is invalid with respect to OnboardingRequest
   */
  public static OnboardingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnboardingRequest.class);
  }

  /**
   * Convert an instance of OnboardingRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

