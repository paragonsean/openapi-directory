/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TemplateSummaryDiff;
import org.openapitools.client.model.TemplateSummaryErrorsInner;
import org.openapitools.client.model.TemplateSummarySummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateSummary {
  public static final String SERIALIZED_NAME_DIFF = "diff";
  @SerializedName(SERIALIZED_NAME_DIFF)
  private TemplateSummaryDiff diff;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<TemplateSummaryErrorsInner> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<String> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_STACK_I_D = "stackID";
  @SerializedName(SERIALIZED_NAME_STACK_I_D)
  private String stackID;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private TemplateSummarySummary summary;

  public TemplateSummary() {
  }

  public TemplateSummary diff(TemplateSummaryDiff diff) {
    this.diff = diff;
    return this;
  }

  /**
   * Get diff
   * @return diff
   */
  @javax.annotation.Nullable
  public TemplateSummaryDiff getDiff() {
    return diff;
  }

  public void setDiff(TemplateSummaryDiff diff) {
    this.diff = diff;
  }


  public TemplateSummary errors(List<TemplateSummaryErrorsInner> errors) {
    this.errors = errors;
    return this;
  }

  public TemplateSummary addErrorsItem(TemplateSummaryErrorsInner errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<TemplateSummaryErrorsInner> getErrors() {
    return errors;
  }

  public void setErrors(List<TemplateSummaryErrorsInner> errors) {
    this.errors = errors;
  }


  public TemplateSummary sources(List<String> sources) {
    this.sources = sources;
    return this;
  }

  public TemplateSummary addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List<String> getSources() {
    return sources;
  }

  public void setSources(List<String> sources) {
    this.sources = sources;
  }


  public TemplateSummary stackID(String stackID) {
    this.stackID = stackID;
    return this;
  }

  /**
   * Get stackID
   * @return stackID
   */
  @javax.annotation.Nullable
  public String getStackID() {
    return stackID;
  }

  public void setStackID(String stackID) {
    this.stackID = stackID;
  }


  public TemplateSummary summary(TemplateSummarySummary summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public TemplateSummarySummary getSummary() {
    return summary;
  }

  public void setSummary(TemplateSummarySummary summary) {
    this.summary = summary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSummary templateSummary = (TemplateSummary) o;
    return Objects.equals(this.diff, templateSummary.diff) &&
        Objects.equals(this.errors, templateSummary.errors) &&
        Objects.equals(this.sources, templateSummary.sources) &&
        Objects.equals(this.stackID, templateSummary.stackID) &&
        Objects.equals(this.summary, templateSummary.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diff, errors, sources, stackID, summary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSummary {\n");
    sb.append("    diff: ").append(toIndentedString(diff)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    stackID: ").append(toIndentedString(stackID)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diff");
    openapiFields.add("errors");
    openapiFields.add("sources");
    openapiFields.add("stackID");
    openapiFields.add("summary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateSummary is not found in the empty JSON string", TemplateSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `diff`
      if (jsonObj.get("diff") != null && !jsonObj.get("diff").isJsonNull()) {
        TemplateSummaryDiff.validateJsonElement(jsonObj.get("diff"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            TemplateSummaryErrorsInner.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      if ((jsonObj.get("stackID") != null && !jsonObj.get("stackID").isJsonNull()) && !jsonObj.get("stackID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackID").toString()));
      }
      // validate the optional field `summary`
      if (jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) {
        TemplateSummarySummary.validateJsonElement(jsonObj.get("summary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateSummary>() {
           @Override
           public void write(JsonWriter out, TemplateSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateSummary
   * @throws IOException if the JSON string is invalid with respect to TemplateSummary
   */
  public static TemplateSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateSummary.class);
  }

  /**
   * Convert an instance of TemplateSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

