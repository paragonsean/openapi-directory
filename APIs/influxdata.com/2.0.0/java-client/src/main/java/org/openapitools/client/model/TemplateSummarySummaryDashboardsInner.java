/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TemplateChart;
import org.openapitools.client.model.TemplateEnvReferencesInner;
import org.openapitools.client.model.TemplateKind;
import org.openapitools.client.model.TemplateSummaryLabel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateSummarySummaryDashboardsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateSummarySummaryDashboardsInner {
  public static final String SERIALIZED_NAME_CHARTS = "charts";
  @SerializedName(SERIALIZED_NAME_CHARTS)
  private List<TemplateChart> charts = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENV_REFERENCES = "envReferences";
  @SerializedName(SERIALIZED_NAME_ENV_REFERENCES)
  private List<TemplateEnvReferencesInner> envReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private TemplateKind kind;

  public static final String SERIALIZED_NAME_LABEL_ASSOCIATIONS = "labelAssociations";
  @SerializedName(SERIALIZED_NAME_LABEL_ASSOCIATIONS)
  private List<TemplateSummaryLabel> labelAssociations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORG_I_D = "orgID";
  @SerializedName(SERIALIZED_NAME_ORG_I_D)
  private String orgID;

  public static final String SERIALIZED_NAME_TEMPLATE_META_NAME = "templateMetaName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_META_NAME)
  private String templateMetaName;

  public TemplateSummarySummaryDashboardsInner() {
  }

  public TemplateSummarySummaryDashboardsInner charts(List<TemplateChart> charts) {
    this.charts = charts;
    return this;
  }

  public TemplateSummarySummaryDashboardsInner addChartsItem(TemplateChart chartsItem) {
    if (this.charts == null) {
      this.charts = new ArrayList<>();
    }
    this.charts.add(chartsItem);
    return this;
  }

  /**
   * Get charts
   * @return charts
   */
  @javax.annotation.Nullable
  public List<TemplateChart> getCharts() {
    return charts;
  }

  public void setCharts(List<TemplateChart> charts) {
    this.charts = charts;
  }


  public TemplateSummarySummaryDashboardsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TemplateSummarySummaryDashboardsInner envReferences(List<TemplateEnvReferencesInner> envReferences) {
    this.envReferences = envReferences;
    return this;
  }

  public TemplateSummarySummaryDashboardsInner addEnvReferencesItem(TemplateEnvReferencesInner envReferencesItem) {
    if (this.envReferences == null) {
      this.envReferences = new ArrayList<>();
    }
    this.envReferences.add(envReferencesItem);
    return this;
  }

  /**
   * Get envReferences
   * @return envReferences
   */
  @javax.annotation.Nullable
  public List<TemplateEnvReferencesInner> getEnvReferences() {
    return envReferences;
  }

  public void setEnvReferences(List<TemplateEnvReferencesInner> envReferences) {
    this.envReferences = envReferences;
  }


  public TemplateSummarySummaryDashboardsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TemplateSummarySummaryDashboardsInner kind(TemplateKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public TemplateKind getKind() {
    return kind;
  }

  public void setKind(TemplateKind kind) {
    this.kind = kind;
  }


  public TemplateSummarySummaryDashboardsInner labelAssociations(List<TemplateSummaryLabel> labelAssociations) {
    this.labelAssociations = labelAssociations;
    return this;
  }

  public TemplateSummarySummaryDashboardsInner addLabelAssociationsItem(TemplateSummaryLabel labelAssociationsItem) {
    if (this.labelAssociations == null) {
      this.labelAssociations = new ArrayList<>();
    }
    this.labelAssociations.add(labelAssociationsItem);
    return this;
  }

  /**
   * Get labelAssociations
   * @return labelAssociations
   */
  @javax.annotation.Nullable
  public List<TemplateSummaryLabel> getLabelAssociations() {
    return labelAssociations;
  }

  public void setLabelAssociations(List<TemplateSummaryLabel> labelAssociations) {
    this.labelAssociations = labelAssociations;
  }


  public TemplateSummarySummaryDashboardsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TemplateSummarySummaryDashboardsInner orgID(String orgID) {
    this.orgID = orgID;
    return this;
  }

  /**
   * Get orgID
   * @return orgID
   */
  @javax.annotation.Nullable
  public String getOrgID() {
    return orgID;
  }

  public void setOrgID(String orgID) {
    this.orgID = orgID;
  }


  public TemplateSummarySummaryDashboardsInner templateMetaName(String templateMetaName) {
    this.templateMetaName = templateMetaName;
    return this;
  }

  /**
   * Get templateMetaName
   * @return templateMetaName
   */
  @javax.annotation.Nullable
  public String getTemplateMetaName() {
    return templateMetaName;
  }

  public void setTemplateMetaName(String templateMetaName) {
    this.templateMetaName = templateMetaName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSummarySummaryDashboardsInner templateSummarySummaryDashboardsInner = (TemplateSummarySummaryDashboardsInner) o;
    return Objects.equals(this.charts, templateSummarySummaryDashboardsInner.charts) &&
        Objects.equals(this.description, templateSummarySummaryDashboardsInner.description) &&
        Objects.equals(this.envReferences, templateSummarySummaryDashboardsInner.envReferences) &&
        Objects.equals(this.id, templateSummarySummaryDashboardsInner.id) &&
        Objects.equals(this.kind, templateSummarySummaryDashboardsInner.kind) &&
        Objects.equals(this.labelAssociations, templateSummarySummaryDashboardsInner.labelAssociations) &&
        Objects.equals(this.name, templateSummarySummaryDashboardsInner.name) &&
        Objects.equals(this.orgID, templateSummarySummaryDashboardsInner.orgID) &&
        Objects.equals(this.templateMetaName, templateSummarySummaryDashboardsInner.templateMetaName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charts, description, envReferences, id, kind, labelAssociations, name, orgID, templateMetaName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSummarySummaryDashboardsInner {\n");
    sb.append("    charts: ").append(toIndentedString(charts)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    envReferences: ").append(toIndentedString(envReferences)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labelAssociations: ").append(toIndentedString(labelAssociations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgID: ").append(toIndentedString(orgID)).append("\n");
    sb.append("    templateMetaName: ").append(toIndentedString(templateMetaName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charts");
    openapiFields.add("description");
    openapiFields.add("envReferences");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("labelAssociations");
    openapiFields.add("name");
    openapiFields.add("orgID");
    openapiFields.add("templateMetaName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateSummarySummaryDashboardsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateSummarySummaryDashboardsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateSummarySummaryDashboardsInner is not found in the empty JSON string", TemplateSummarySummaryDashboardsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateSummarySummaryDashboardsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateSummarySummaryDashboardsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("charts") != null && !jsonObj.get("charts").isJsonNull()) {
        JsonArray jsonArraycharts = jsonObj.getAsJsonArray("charts");
        if (jsonArraycharts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("charts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `charts` to be an array in the JSON string but got `%s`", jsonObj.get("charts").toString()));
          }

          // validate the optional field `charts` (array)
          for (int i = 0; i < jsonArraycharts.size(); i++) {
            TemplateChart.validateJsonElement(jsonArraycharts.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("envReferences") != null && !jsonObj.get("envReferences").isJsonNull()) {
        JsonArray jsonArrayenvReferences = jsonObj.getAsJsonArray("envReferences");
        if (jsonArrayenvReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("envReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `envReferences` to be an array in the JSON string but got `%s`", jsonObj.get("envReferences").toString()));
          }

          // validate the optional field `envReferences` (array)
          for (int i = 0; i < jsonArrayenvReferences.size(); i++) {
            TemplateEnvReferencesInner.validateJsonElement(jsonArrayenvReferences.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        TemplateKind.validateJsonElement(jsonObj.get("kind"));
      }
      if (jsonObj.get("labelAssociations") != null && !jsonObj.get("labelAssociations").isJsonNull()) {
        JsonArray jsonArraylabelAssociations = jsonObj.getAsJsonArray("labelAssociations");
        if (jsonArraylabelAssociations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labelAssociations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labelAssociations` to be an array in the JSON string but got `%s`", jsonObj.get("labelAssociations").toString()));
          }

          // validate the optional field `labelAssociations` (array)
          for (int i = 0; i < jsonArraylabelAssociations.size(); i++) {
            TemplateSummaryLabel.validateJsonElement(jsonArraylabelAssociations.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("orgID") != null && !jsonObj.get("orgID").isJsonNull()) && !jsonObj.get("orgID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgID").toString()));
      }
      if ((jsonObj.get("templateMetaName") != null && !jsonObj.get("templateMetaName").isJsonNull()) && !jsonObj.get("templateMetaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateMetaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateMetaName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateSummarySummaryDashboardsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateSummarySummaryDashboardsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateSummarySummaryDashboardsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateSummarySummaryDashboardsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateSummarySummaryDashboardsInner>() {
           @Override
           public void write(JsonWriter out, TemplateSummarySummaryDashboardsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateSummarySummaryDashboardsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateSummarySummaryDashboardsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateSummarySummaryDashboardsInner
   * @throws IOException if the JSON string is invalid with respect to TemplateSummarySummaryDashboardsInner
   */
  public static TemplateSummarySummaryDashboardsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateSummarySummaryDashboardsInner.class);
  }

  /**
   * Convert an instance of TemplateSummarySummaryDashboardsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

