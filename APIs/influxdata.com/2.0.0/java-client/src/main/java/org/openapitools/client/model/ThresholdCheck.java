/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckBaseLinks;
import org.openapitools.client.model.DashboardQuery;
import org.openapitools.client.model.DeadmanCheckAllOfTags;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.TaskStatusType;
import org.openapitools.client.model.Threshold;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ThresholdCheck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThresholdCheck {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<Label> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_RUN_ERROR = "lastRunError";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_ERROR)
  private String lastRunError;

  /**
   * Gets or Sets lastRunStatus
   */
  @JsonAdapter(LastRunStatusEnum.Adapter.class)
  public enum LastRunStatusEnum {
    FAILED("failed"),
    
    SUCCESS("success"),
    
    CANCELED("canceled");

    private String value;

    LastRunStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastRunStatusEnum fromValue(String value) {
      for (LastRunStatusEnum b : LastRunStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LastRunStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastRunStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastRunStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LastRunStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LastRunStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAST_RUN_STATUS = "lastRunStatus";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_STATUS)
  private LastRunStatusEnum lastRunStatus;

  public static final String SERIALIZED_NAME_LATEST_COMPLETED = "latestCompleted";
  @SerializedName(SERIALIZED_NAME_LATEST_COMPLETED)
  private OffsetDateTime latestCompleted;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private CheckBaseLinks links;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORG_I_D = "orgID";
  @SerializedName(SERIALIZED_NAME_ORG_I_D)
  private String orgID;

  public static final String SERIALIZED_NAME_OWNER_I_D = "ownerID";
  @SerializedName(SERIALIZED_NAME_OWNER_I_D)
  private String ownerID;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private DashboardQuery query;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TaskStatusType status;

  public static final String SERIALIZED_NAME_TASK_I_D = "taskID";
  @SerializedName(SERIALIZED_NAME_TASK_I_D)
  private String taskID;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_EVERY = "every";
  @SerializedName(SERIALIZED_NAME_EVERY)
  private String every;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE_TEMPLATE = "statusMessageTemplate";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE_TEMPLATE)
  private String statusMessageTemplate;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<DeadmanCheckAllOfTags> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_THRESHOLDS = "thresholds";
  @SerializedName(SERIALIZED_NAME_THRESHOLDS)
  private List<Threshold> thresholds = new ArrayList<>();

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    THRESHOLD("threshold");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ThresholdCheck() {
  }

  public ThresholdCheck(
     OffsetDateTime createdAt, 
     String id, 
     String lastRunError, 
     LastRunStatusEnum lastRunStatus, 
     OffsetDateTime latestCompleted, 
     String ownerID, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.id = id;
    this.lastRunError = lastRunError;
    this.lastRunStatus = lastRunStatus;
    this.latestCompleted = latestCompleted;
    this.ownerID = ownerID;
    this.updatedAt = updatedAt;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public ThresholdCheck description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the check.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ThresholdCheck labels(List<Label> labels) {
    this.labels = labels;
    return this;
  }

  public ThresholdCheck addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<Label> getLabels() {
    return labels;
  }

  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }


  /**
   * Get lastRunError
   * @return lastRunError
   */
  @javax.annotation.Nullable
  public String getLastRunError() {
    return lastRunError;
  }



  /**
   * Get lastRunStatus
   * @return lastRunStatus
   */
  @javax.annotation.Nullable
  public LastRunStatusEnum getLastRunStatus() {
    return lastRunStatus;
  }



  /**
   * Timestamp of latest scheduled, completed run, RFC3339.
   * @return latestCompleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestCompleted() {
    return latestCompleted;
  }



  public ThresholdCheck links(CheckBaseLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public CheckBaseLinks getLinks() {
    return links;
  }

  public void setLinks(CheckBaseLinks links) {
    this.links = links;
  }


  public ThresholdCheck name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ThresholdCheck orgID(String orgID) {
    this.orgID = orgID;
    return this;
  }

  /**
   * The ID of the organization that owns this check.
   * @return orgID
   */
  @javax.annotation.Nonnull
  public String getOrgID() {
    return orgID;
  }

  public void setOrgID(String orgID) {
    this.orgID = orgID;
  }


  /**
   * The ID of creator used to create this check.
   * @return ownerID
   */
  @javax.annotation.Nullable
  public String getOwnerID() {
    return ownerID;
  }



  public ThresholdCheck query(DashboardQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nonnull
  public DashboardQuery getQuery() {
    return query;
  }

  public void setQuery(DashboardQuery query) {
    this.query = query;
  }


  public ThresholdCheck status(TaskStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TaskStatusType getStatus() {
    return status;
  }

  public void setStatus(TaskStatusType status) {
    this.status = status;
  }


  public ThresholdCheck taskID(String taskID) {
    this.taskID = taskID;
    return this;
  }

  /**
   * The ID of the task associated with this check.
   * @return taskID
   */
  @javax.annotation.Nullable
  public String getTaskID() {
    return taskID;
  }

  public void setTaskID(String taskID) {
    this.taskID = taskID;
  }


  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public ThresholdCheck every(String every) {
    this.every = every;
    return this;
  }

  /**
   * Check repetition interval.
   * @return every
   */
  @javax.annotation.Nullable
  public String getEvery() {
    return every;
  }

  public void setEvery(String every) {
    this.every = every;
  }


  public ThresholdCheck offset(String offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Duration to delay after the schedule, before executing check.
   * @return offset
   */
  @javax.annotation.Nullable
  public String getOffset() {
    return offset;
  }

  public void setOffset(String offset) {
    this.offset = offset;
  }


  public ThresholdCheck statusMessageTemplate(String statusMessageTemplate) {
    this.statusMessageTemplate = statusMessageTemplate;
    return this;
  }

  /**
   * The template used to generate and write a status message.
   * @return statusMessageTemplate
   */
  @javax.annotation.Nullable
  public String getStatusMessageTemplate() {
    return statusMessageTemplate;
  }

  public void setStatusMessageTemplate(String statusMessageTemplate) {
    this.statusMessageTemplate = statusMessageTemplate;
  }


  public ThresholdCheck tags(List<DeadmanCheckAllOfTags> tags) {
    this.tags = tags;
    return this;
  }

  public ThresholdCheck addTagsItem(DeadmanCheckAllOfTags tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * List of tags to write to each status.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<DeadmanCheckAllOfTags> getTags() {
    return tags;
  }

  public void setTags(List<DeadmanCheckAllOfTags> tags) {
    this.tags = tags;
  }


  public ThresholdCheck thresholds(List<Threshold> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  public ThresholdCheck addThresholdsItem(Threshold thresholdsItem) {
    if (this.thresholds == null) {
      this.thresholds = new ArrayList<>();
    }
    this.thresholds.add(thresholdsItem);
    return this;
  }

  /**
   * Get thresholds
   * @return thresholds
   */
  @javax.annotation.Nullable
  public List<Threshold> getThresholds() {
    return thresholds;
  }

  public void setThresholds(List<Threshold> thresholds) {
    this.thresholds = thresholds;
  }


  public ThresholdCheck type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThresholdCheck thresholdCheck = (ThresholdCheck) o;
    return Objects.equals(this.createdAt, thresholdCheck.createdAt) &&
        Objects.equals(this.description, thresholdCheck.description) &&
        Objects.equals(this.id, thresholdCheck.id) &&
        Objects.equals(this.labels, thresholdCheck.labels) &&
        Objects.equals(this.lastRunError, thresholdCheck.lastRunError) &&
        Objects.equals(this.lastRunStatus, thresholdCheck.lastRunStatus) &&
        Objects.equals(this.latestCompleted, thresholdCheck.latestCompleted) &&
        Objects.equals(this.links, thresholdCheck.links) &&
        Objects.equals(this.name, thresholdCheck.name) &&
        Objects.equals(this.orgID, thresholdCheck.orgID) &&
        Objects.equals(this.ownerID, thresholdCheck.ownerID) &&
        Objects.equals(this.query, thresholdCheck.query) &&
        Objects.equals(this.status, thresholdCheck.status) &&
        Objects.equals(this.taskID, thresholdCheck.taskID) &&
        Objects.equals(this.updatedAt, thresholdCheck.updatedAt) &&
        Objects.equals(this.every, thresholdCheck.every) &&
        Objects.equals(this.offset, thresholdCheck.offset) &&
        Objects.equals(this.statusMessageTemplate, thresholdCheck.statusMessageTemplate) &&
        Objects.equals(this.tags, thresholdCheck.tags) &&
        Objects.equals(this.thresholds, thresholdCheck.thresholds) &&
        Objects.equals(this.type, thresholdCheck.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, description, id, labels, lastRunError, lastRunStatus, latestCompleted, links, name, orgID, ownerID, query, status, taskID, updatedAt, every, offset, statusMessageTemplate, tags, thresholds, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThresholdCheck {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lastRunError: ").append(toIndentedString(lastRunError)).append("\n");
    sb.append("    lastRunStatus: ").append(toIndentedString(lastRunStatus)).append("\n");
    sb.append("    latestCompleted: ").append(toIndentedString(latestCompleted)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgID: ").append(toIndentedString(orgID)).append("\n");
    sb.append("    ownerID: ").append(toIndentedString(ownerID)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taskID: ").append(toIndentedString(taskID)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    every: ").append(toIndentedString(every)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    statusMessageTemplate: ").append(toIndentedString(statusMessageTemplate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("lastRunError");
    openapiFields.add("lastRunStatus");
    openapiFields.add("latestCompleted");
    openapiFields.add("links");
    openapiFields.add("name");
    openapiFields.add("orgID");
    openapiFields.add("ownerID");
    openapiFields.add("query");
    openapiFields.add("status");
    openapiFields.add("taskID");
    openapiFields.add("updatedAt");
    openapiFields.add("every");
    openapiFields.add("offset");
    openapiFields.add("statusMessageTemplate");
    openapiFields.add("tags");
    openapiFields.add("thresholds");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("orgID");
    openapiRequiredFields.add("query");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThresholdCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThresholdCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThresholdCheck is not found in the empty JSON string", ThresholdCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThresholdCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThresholdCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ThresholdCheck.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            Label.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if ((jsonObj.get("lastRunError") != null && !jsonObj.get("lastRunError").isJsonNull()) && !jsonObj.get("lastRunError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRunError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRunError").toString()));
      }
      if ((jsonObj.get("lastRunStatus") != null && !jsonObj.get("lastRunStatus").isJsonNull()) && !jsonObj.get("lastRunStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRunStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRunStatus").toString()));
      }
      // validate the optional field `lastRunStatus`
      if (jsonObj.get("lastRunStatus") != null && !jsonObj.get("lastRunStatus").isJsonNull()) {
        LastRunStatusEnum.validateJsonElement(jsonObj.get("lastRunStatus"));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        CheckBaseLinks.validateJsonElement(jsonObj.get("links"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("orgID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgID").toString()));
      }
      if ((jsonObj.get("ownerID") != null && !jsonObj.get("ownerID").isJsonNull()) && !jsonObj.get("ownerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerID").toString()));
      }
      // validate the required field `query`
      DashboardQuery.validateJsonElement(jsonObj.get("query"));
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TaskStatusType.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("taskID") != null && !jsonObj.get("taskID").isJsonNull()) && !jsonObj.get("taskID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskID").toString()));
      }
      if ((jsonObj.get("every") != null && !jsonObj.get("every").isJsonNull()) && !jsonObj.get("every").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `every` to be a primitive type in the JSON string but got `%s`", jsonObj.get("every").toString()));
      }
      if ((jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) && !jsonObj.get("offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offset").toString()));
      }
      if ((jsonObj.get("statusMessageTemplate") != null && !jsonObj.get("statusMessageTemplate").isJsonNull()) && !jsonObj.get("statusMessageTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessageTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessageTemplate").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            DeadmanCheckAllOfTags.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (jsonObj.get("thresholds") != null && !jsonObj.get("thresholds").isJsonNull()) {
        JsonArray jsonArraythresholds = jsonObj.getAsJsonArray("thresholds");
        if (jsonArraythresholds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thresholds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thresholds` to be an array in the JSON string but got `%s`", jsonObj.get("thresholds").toString()));
          }

          // validate the optional field `thresholds` (array)
          for (int i = 0; i < jsonArraythresholds.size(); i++) {
            Threshold.validateJsonElement(jsonArraythresholds.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThresholdCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThresholdCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThresholdCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThresholdCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<ThresholdCheck>() {
           @Override
           public void write(JsonWriter out, ThresholdCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThresholdCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThresholdCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThresholdCheck
   * @throws IOException if the JSON string is invalid with respect to ThresholdCheck
   */
  public static ThresholdCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThresholdCheck.class);
  }

  /**
   * Convert an instance of ThresholdCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

