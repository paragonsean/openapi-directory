/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExportTemplateRequest;
import org.openapitools.client.model.ListStacks200Response;
import org.openapitools.client.model.PatchStackRequest;
import org.openapitools.client.model.PostStackRequest;
import org.openapitools.client.model.Stack;
import org.openapitools.client.model.TemplateApply;
import org.openapitools.client.model.TemplateInner;
import org.openapitools.client.model.TemplateSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InfluxDbTemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InfluxDbTemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InfluxDbTemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applyTemplate
     * @param templateApply  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx package dry-run successful, no new resources created. The provided diff and summary will not have IDs for resources that do not exist at the time of the dry run.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Influx package applied successfully. Newly created resources created available in summary. The diff compares the state of the world before the package is applied with the changes the application will impose. This corresponds to &#x60;\&quot;dryRun\&quot;: true&#x60;  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyTemplateCall(TemplateApply templateApply, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateApply;

        // create path and map variables
        String localVarPath = "/templates/apply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-jsonnet",
            "text/yml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyTemplateValidateBeforeCall(TemplateApply templateApply, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateApply' is set
        if (templateApply == null) {
            throw new ApiException("Missing the required parameter 'templateApply' when calling applyTemplate(Async)");
        }

        return applyTemplateCall(templateApply, _callback);

    }

    /**
     * Apply or dry-run an InfluxDB Template
     * 
     * @param templateApply  (required)
     * @return TemplateSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx package dry-run successful, no new resources created. The provided diff and summary will not have IDs for resources that do not exist at the time of the dry run.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Influx package applied successfully. Newly created resources created available in summary. The diff compares the state of the world before the package is applied with the changes the application will impose. This corresponds to &#x60;\&quot;dryRun\&quot;: true&#x60;  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TemplateSummary applyTemplate(TemplateApply templateApply) throws ApiException {
        ApiResponse<TemplateSummary> localVarResp = applyTemplateWithHttpInfo(templateApply);
        return localVarResp.getData();
    }

    /**
     * Apply or dry-run an InfluxDB Template
     * 
     * @param templateApply  (required)
     * @return ApiResponse&lt;TemplateSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx package dry-run successful, no new resources created. The provided diff and summary will not have IDs for resources that do not exist at the time of the dry run.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Influx package applied successfully. Newly created resources created available in summary. The diff compares the state of the world before the package is applied with the changes the application will impose. This corresponds to &#x60;\&quot;dryRun\&quot;: true&#x60;  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateSummary> applyTemplateWithHttpInfo(TemplateApply templateApply) throws ApiException {
        okhttp3.Call localVarCall = applyTemplateValidateBeforeCall(templateApply, null);
        Type localVarReturnType = new TypeToken<TemplateSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply or dry-run an InfluxDB Template (asynchronously)
     * 
     * @param templateApply  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx package dry-run successful, no new resources created. The provided diff and summary will not have IDs for resources that do not exist at the time of the dry run.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Influx package applied successfully. Newly created resources created available in summary. The diff compares the state of the world before the package is applied with the changes the application will impose. This corresponds to &#x60;\&quot;dryRun\&quot;: true&#x60;  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyTemplateAsync(TemplateApply templateApply, final ApiCallback<TemplateSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyTemplateValidateBeforeCall(templateApply, _callback);
        Type localVarReturnType = new TypeToken<TemplateSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStack
     * @param postStackRequest Stack to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> InfluxDB Stack created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStackCall(PostStackRequest postStackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postStackRequest;

        // create path and map variables
        String localVarPath = "/stacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStackValidateBeforeCall(PostStackRequest postStackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postStackRequest' is set
        if (postStackRequest == null) {
            throw new ApiException("Missing the required parameter 'postStackRequest' when calling createStack(Async)");
        }

        return createStackCall(postStackRequest, _callback);

    }

    /**
     * Create a new stack
     * 
     * @param postStackRequest Stack to create. (required)
     * @return Stack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> InfluxDB Stack created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Stack createStack(PostStackRequest postStackRequest) throws ApiException {
        ApiResponse<Stack> localVarResp = createStackWithHttpInfo(postStackRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new stack
     * 
     * @param postStackRequest Stack to create. (required)
     * @return ApiResponse&lt;Stack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> InfluxDB Stack created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Stack> createStackWithHttpInfo(PostStackRequest postStackRequest) throws ApiException {
        okhttp3.Call localVarCall = createStackValidateBeforeCall(postStackRequest, null);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new stack (asynchronously)
     * 
     * @param postStackRequest Stack to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> InfluxDB Stack created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStackAsync(PostStackRequest postStackRequest, final ApiCallback<Stack> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStackValidateBeforeCall(postStackRequest, _callback);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStack
     * @param stackId Theidentifier of the stack. (required)
     * @param orgID The identifier of the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The stack and its associated resources are deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStackCall(String stackId, String orgID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stacks/{stack_id}"
            .replace("{" + "stack_id" + "}", localVarApiClient.escapeString(stackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStackValidateBeforeCall(String stackId, String orgID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackId' is set
        if (stackId == null) {
            throw new ApiException("Missing the required parameter 'stackId' when calling deleteStack(Async)");
        }

        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling deleteStack(Async)");
        }

        return deleteStackCall(stackId, orgID, _callback);

    }

    /**
     * Delete a stack and associated resources
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @param orgID The identifier of the organization. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The stack and its associated resources are deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStack(String stackId, String orgID) throws ApiException {
        deleteStackWithHttpInfo(stackId, orgID);
    }

    /**
     * Delete a stack and associated resources
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @param orgID The identifier of the organization. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The stack and its associated resources are deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStackWithHttpInfo(String stackId, String orgID) throws ApiException {
        okhttp3.Call localVarCall = deleteStackValidateBeforeCall(stackId, orgID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a stack and associated resources (asynchronously)
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @param orgID The identifier of the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The stack and its associated resources are deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStackAsync(String stackId, String orgID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStackValidateBeforeCall(stackId, orgID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportTemplate
     * @param exportTemplateRequest Export resources as an InfluxDB template. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InfluxDB template created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportTemplateCall(ExportTemplateRequest exportTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportTemplateRequest;

        // create path and map variables
        String localVarPath = "/templates/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportTemplateValidateBeforeCall(ExportTemplateRequest exportTemplateRequest, final ApiCallback _callback) throws ApiException {
        return exportTemplateCall(exportTemplateRequest, _callback);

    }

    /**
     * Export a new Influx Template
     * 
     * @param exportTemplateRequest Export resources as an InfluxDB template. (optional)
     * @return List&lt;TemplateInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InfluxDB template created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<TemplateInner> exportTemplate(ExportTemplateRequest exportTemplateRequest) throws ApiException {
        ApiResponse<List<TemplateInner>> localVarResp = exportTemplateWithHttpInfo(exportTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Export a new Influx Template
     * 
     * @param exportTemplateRequest Export resources as an InfluxDB template. (optional)
     * @return ApiResponse&lt;List&lt;TemplateInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InfluxDB template created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TemplateInner>> exportTemplateWithHttpInfo(ExportTemplateRequest exportTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = exportTemplateValidateBeforeCall(exportTemplateRequest, null);
        Type localVarReturnType = new TypeToken<List<TemplateInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export a new Influx Template (asynchronously)
     * 
     * @param exportTemplateRequest Export resources as an InfluxDB template. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InfluxDB template created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportTemplateAsync(ExportTemplateRequest exportTemplateRequest, final ApiCallback<List<TemplateInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportTemplateValidateBeforeCall(exportTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TemplateInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStacks
     * @param orgID The organization id of the stacks (required)
     * @param name A collection of names to filter the list by. (optional)
     * @param stackID A collection of stackIDs to filter the list by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stacks found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStacksCall(String orgID, String name, String stackID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgID", orgID));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (stackID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stackID", stackID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStacksValidateBeforeCall(String orgID, String name, String stackID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgID' is set
        if (orgID == null) {
            throw new ApiException("Missing the required parameter 'orgID' when calling listStacks(Async)");
        }

        return listStacksCall(orgID, name, stackID, _callback);

    }

    /**
     * List all installed InfluxDB templates
     * 
     * @param orgID The organization id of the stacks (required)
     * @param name A collection of names to filter the list by. (optional)
     * @param stackID A collection of stackIDs to filter the list by. (optional)
     * @return ListStacks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stacks found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListStacks200Response listStacks(String orgID, String name, String stackID) throws ApiException {
        ApiResponse<ListStacks200Response> localVarResp = listStacksWithHttpInfo(orgID, name, stackID);
        return localVarResp.getData();
    }

    /**
     * List all installed InfluxDB templates
     * 
     * @param orgID The organization id of the stacks (required)
     * @param name A collection of names to filter the list by. (optional)
     * @param stackID A collection of stackIDs to filter the list by. (optional)
     * @return ApiResponse&lt;ListStacks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stacks found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStacks200Response> listStacksWithHttpInfo(String orgID, String name, String stackID) throws ApiException {
        okhttp3.Call localVarCall = listStacksValidateBeforeCall(orgID, name, stackID, null);
        Type localVarReturnType = new TypeToken<ListStacks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all installed InfluxDB templates (asynchronously)
     * 
     * @param orgID The organization id of the stacks (required)
     * @param name A collection of names to filter the list by. (optional)
     * @param stackID A collection of stackIDs to filter the list by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stacks found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStacksAsync(String orgID, String name, String stackID, final ApiCallback<ListStacks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStacksValidateBeforeCall(orgID, name, stackID, _callback);
        Type localVarReturnType = new TypeToken<ListStacks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readStack
     * @param stackId Theidentifier of the stack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The InfluxDB stack </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readStackCall(String stackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stacks/{stack_id}"
            .replace("{" + "stack_id" + "}", localVarApiClient.escapeString(stackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readStackValidateBeforeCall(String stackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackId' is set
        if (stackId == null) {
            throw new ApiException("Missing the required parameter 'stackId' when calling readStack(Async)");
        }

        return readStackCall(stackId, _callback);

    }

    /**
     * Retrieve a stack
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @return Stack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The InfluxDB stack </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Stack readStack(String stackId) throws ApiException {
        ApiResponse<Stack> localVarResp = readStackWithHttpInfo(stackId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a stack
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @return ApiResponse&lt;Stack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The InfluxDB stack </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Stack> readStackWithHttpInfo(String stackId) throws ApiException {
        okhttp3.Call localVarCall = readStackValidateBeforeCall(stackId, null);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a stack (asynchronously)
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The InfluxDB stack </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readStackAsync(String stackId, final ApiCallback<Stack> _callback) throws ApiException {

        okhttp3.Call localVarCall = readStackValidateBeforeCall(stackId, _callback);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uninstallStack
     * @param stackId The stack id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stack uninstalled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uninstallStackCall(String stackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stacks/{stack_id}/uninstall"
            .replace("{" + "stack_id" + "}", localVarApiClient.escapeString(stackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uninstallStackValidateBeforeCall(String stackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackId' is set
        if (stackId == null) {
            throw new ApiException("Missing the required parameter 'stackId' when calling uninstallStack(Async)");
        }

        return uninstallStackCall(stackId, _callback);

    }

    /**
     * Uninstall an InfluxDB Stack
     * 
     * @param stackId The stack id (required)
     * @return Stack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stack uninstalled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Stack uninstallStack(String stackId) throws ApiException {
        ApiResponse<Stack> localVarResp = uninstallStackWithHttpInfo(stackId);
        return localVarResp.getData();
    }

    /**
     * Uninstall an InfluxDB Stack
     * 
     * @param stackId The stack id (required)
     * @return ApiResponse&lt;Stack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stack uninstalled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Stack> uninstallStackWithHttpInfo(String stackId) throws ApiException {
        okhttp3.Call localVarCall = uninstallStackValidateBeforeCall(stackId, null);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Uninstall an InfluxDB Stack (asynchronously)
     * 
     * @param stackId The stack id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stack uninstalled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uninstallStackAsync(String stackId, final ApiCallback<Stack> _callback) throws ApiException {

        okhttp3.Call localVarCall = uninstallStackValidateBeforeCall(stackId, _callback);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStack
     * @param stackId Theidentifier of the stack. (required)
     * @param patchStackRequest Influx stack to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stack updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStackCall(String stackId, PatchStackRequest patchStackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchStackRequest;

        // create path and map variables
        String localVarPath = "/stacks/{stack_id}"
            .replace("{" + "stack_id" + "}", localVarApiClient.escapeString(stackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStackValidateBeforeCall(String stackId, PatchStackRequest patchStackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackId' is set
        if (stackId == null) {
            throw new ApiException("Missing the required parameter 'stackId' when calling updateStack(Async)");
        }

        // verify the required parameter 'patchStackRequest' is set
        if (patchStackRequest == null) {
            throw new ApiException("Missing the required parameter 'patchStackRequest' when calling updateStack(Async)");
        }

        return updateStackCall(stackId, patchStackRequest, _callback);

    }

    /**
     * Update an InfluxDB Stack
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @param patchStackRequest Influx stack to update. (required)
     * @return Stack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stack updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Stack updateStack(String stackId, PatchStackRequest patchStackRequest) throws ApiException {
        ApiResponse<Stack> localVarResp = updateStackWithHttpInfo(stackId, patchStackRequest);
        return localVarResp.getData();
    }

    /**
     * Update an InfluxDB Stack
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @param patchStackRequest Influx stack to update. (required)
     * @return ApiResponse&lt;Stack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stack updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Stack> updateStackWithHttpInfo(String stackId, PatchStackRequest patchStackRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStackValidateBeforeCall(stackId, patchStackRequest, null);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an InfluxDB Stack (asynchronously)
     * 
     * @param stackId Theidentifier of the stack. (required)
     * @param patchStackRequest Influx stack to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Influx stack updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStackAsync(String stackId, PatchStackRequest patchStackRequest, final ApiCallback<Stack> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStackValidateBeforeCall(stackId, patchStackRequest, _callback);
        Type localVarReturnType = new TypeToken<Stack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
