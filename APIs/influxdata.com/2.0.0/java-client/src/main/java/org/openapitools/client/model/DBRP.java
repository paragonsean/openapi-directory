/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Links;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DBRP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:51.322764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DBRP {
  public static final String SERIALIZED_NAME_BUCKET_I_D = "bucketID";
  @SerializedName(SERIALIZED_NAME_BUCKET_I_D)
  private String bucketID;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Links links;

  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private String org;

  public static final String SERIALIZED_NAME_ORG_I_D = "orgID";
  @SerializedName(SERIALIZED_NAME_ORG_I_D)
  private String orgID;

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "retention_policy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private String retentionPolicy;

  public DBRP() {
  }

  public DBRP(
     String id
  ) {
    this();
    this.id = id;
  }

  public DBRP bucketID(String bucketID) {
    this.bucketID = bucketID;
    return this;
  }

  /**
   * the bucket ID used as target for the translation.
   * @return bucketID
   */
  @javax.annotation.Nullable
  public String getBucketID() {
    return bucketID;
  }

  public void setBucketID(String bucketID) {
    this.bucketID = bucketID;
  }


  public DBRP database(String database) {
    this.database = database;
    return this;
  }

  /**
   * InfluxDB v1 database
   * @return database
   */
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public DBRP _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * Specify if this mapping represents the default retention policy for the database specificed.
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  /**
   * the mapping identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DBRP links(Links links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public Links getLinks() {
    return links;
  }

  public void setLinks(Links links) {
    this.links = links;
  }


  public DBRP org(String org) {
    this.org = org;
    return this;
  }

  /**
   * the organization that owns this mapping.
   * @return org
   */
  @javax.annotation.Nullable
  public String getOrg() {
    return org;
  }

  public void setOrg(String org) {
    this.org = org;
  }


  public DBRP orgID(String orgID) {
    this.orgID = orgID;
    return this;
  }

  /**
   * the organization ID that owns this mapping.
   * @return orgID
   */
  @javax.annotation.Nullable
  public String getOrgID() {
    return orgID;
  }

  public void setOrgID(String orgID) {
    this.orgID = orgID;
  }


  public DBRP retentionPolicy(String retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  /**
   * InfluxDB v1 retention policy
   * @return retentionPolicy
   */
  @javax.annotation.Nullable
  public String getRetentionPolicy() {
    return retentionPolicy;
  }

  public void setRetentionPolicy(String retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBRP DBRP = (DBRP) o;
    return Objects.equals(this.bucketID, DBRP.bucketID) &&
        Objects.equals(this.database, DBRP.database) &&
        Objects.equals(this._default, DBRP._default) &&
        Objects.equals(this.id, DBRP.id) &&
        Objects.equals(this.links, DBRP.links) &&
        Objects.equals(this.org, DBRP.org) &&
        Objects.equals(this.orgID, DBRP.orgID) &&
        Objects.equals(this.retentionPolicy, DBRP.retentionPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketID, database, _default, id, links, org, orgID, retentionPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBRP {\n");
    sb.append("    bucketID: ").append(toIndentedString(bucketID)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    orgID: ").append(toIndentedString(orgID)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DBRP
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DBRP.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DBRP is not found in the empty JSON string", DBRP.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DBRP.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DBRP` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bucketID") != null && !jsonObj.get("bucketID").isJsonNull()) && !jsonObj.get("bucketID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucketID").toString()));
      }
      if ((jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) && !jsonObj.get("database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        Links.validateJsonElement(jsonObj.get("links"));
      }
      if ((jsonObj.get("org") != null && !jsonObj.get("org").isJsonNull()) && !jsonObj.get("org").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org").toString()));
      }
      if ((jsonObj.get("orgID") != null && !jsonObj.get("orgID").isJsonNull()) && !jsonObj.get("orgID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgID").toString()));
      }
      if ((jsonObj.get("retention_policy") != null && !jsonObj.get("retention_policy").isJsonNull()) && !jsonObj.get("retention_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention_policy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DBRP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DBRP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DBRP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DBRP.class));

       return (TypeAdapter<T>) new TypeAdapter<DBRP>() {
           @Override
           public void write(JsonWriter out, DBRP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DBRP read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DBRP given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DBRP
   * @throws IOException if the JSON string is invalid with respect to DBRP
   */
  public static DBRP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DBRP.class);
  }

  /**
   * Convert an instance of DBRP to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

