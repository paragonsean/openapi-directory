/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.ScraperTargetRequest;
import org.openapitools.client.model.ScraperTargetResponse;
import org.openapitools.client.model.ScraperTargetResponses;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScraperTargetsApi
 */
@Disabled
public class ScraperTargetsApiTest {

    private final ScraperTargetsApi api = new ScraperTargetsApi();

    /**
     * Delete a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScrapersIDTest() throws ApiException {
        String scraperTargetID = null;
        String zapTraceSpan = null;
        api.deleteScrapersID(scraperTargetID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete a label from a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScrapersIDLabelsIDTest() throws ApiException {
        String scraperTargetID = null;
        String labelID = null;
        String zapTraceSpan = null;
        api.deleteScrapersIDLabelsID(scraperTargetID, labelID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove a member from a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScrapersIDMembersIDTest() throws ApiException {
        String userID = null;
        String scraperTargetID = null;
        String zapTraceSpan = null;
        api.deleteScrapersIDMembersID(userID, scraperTargetID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove an owner from a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScrapersIDOwnersIDTest() throws ApiException {
        String userID = null;
        String scraperTargetID = null;
        String zapTraceSpan = null;
        api.deleteScrapersIDOwnersID(userID, scraperTargetID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all scraper targets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScrapersTest() throws ApiException {
        String zapTraceSpan = null;
        String name = null;
        List<String> id = null;
        String orgID = null;
        String org = null;
        ScraperTargetResponses response = api.getScrapers(zapTraceSpan, name, id, orgID, org);
        // TODO: test validations
    }

    /**
     * Retrieve a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScrapersIDTest() throws ApiException {
        String scraperTargetID = null;
        String zapTraceSpan = null;
        ScraperTargetResponse response = api.getScrapersID(scraperTargetID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all labels for a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScrapersIDLabelsTest() throws ApiException {
        String scraperTargetID = null;
        String zapTraceSpan = null;
        LabelsResponse response = api.getScrapersIDLabels(scraperTargetID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all users with member privileges for a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScrapersIDMembersTest() throws ApiException {
        String scraperTargetID = null;
        String zapTraceSpan = null;
        ResourceMembers response = api.getScrapersIDMembers(scraperTargetID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all owners of a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScrapersIDOwnersTest() throws ApiException {
        String scraperTargetID = null;
        String zapTraceSpan = null;
        ResourceOwners response = api.getScrapersIDOwners(scraperTargetID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchScrapersIDTest() throws ApiException {
        String scraperTargetID = null;
        ScraperTargetRequest scraperTargetRequest = null;
        String zapTraceSpan = null;
        ScraperTargetResponse response = api.patchScrapersID(scraperTargetID, scraperTargetRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScrapersTest() throws ApiException {
        ScraperTargetRequest scraperTargetRequest = null;
        String zapTraceSpan = null;
        ScraperTargetResponse response = api.postScrapers(scraperTargetRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a label to a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScrapersIDLabelsTest() throws ApiException {
        String scraperTargetID = null;
        LabelMapping labelMapping = null;
        String zapTraceSpan = null;
        LabelResponse response = api.postScrapersIDLabels(scraperTargetID, labelMapping, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a member to a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScrapersIDMembersTest() throws ApiException {
        String scraperTargetID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceMember response = api.postScrapersIDMembers(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add an owner to a scraper target
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScrapersIDOwnersTest() throws ApiException {
        String scraperTargetID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceOwner response = api.postScrapersIDOwners(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

}
