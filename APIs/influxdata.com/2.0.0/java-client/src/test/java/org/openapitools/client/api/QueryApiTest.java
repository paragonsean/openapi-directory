/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ASTResponse;
import org.openapitools.client.model.AnalyzeQueryResponse;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.FluxSuggestion;
import org.openapitools.client.model.FluxSuggestions;
import org.openapitools.client.model.LanguageRequest;
import org.openapitools.client.model.PostQueryRequest;
import org.openapitools.client.model.Query;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueryApi
 */
@Disabled
public class QueryApiTest {

    private final QueryApi api = new QueryApi();

    /**
     * Retrieve query suggestions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuerySuggestionsTest() throws ApiException {
        String zapTraceSpan = null;
        FluxSuggestions response = api.getQuerySuggestions(zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Retrieve query suggestions for a branching suggestion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuerySuggestionsNameTest() throws ApiException {
        String name = null;
        String zapTraceSpan = null;
        FluxSuggestion response = api.getQuerySuggestionsName(name, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Query InfluxDB
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postQueryTest() throws ApiException {
        String zapTraceSpan = null;
        String acceptEncoding = null;
        String contentType = null;
        String org = null;
        String orgID = null;
        PostQueryRequest postQueryRequest = null;
        File response = api.postQuery(zapTraceSpan, acceptEncoding, contentType, org, orgID, postQueryRequest);
        // TODO: test validations
    }

    /**
     * Analyze an InfluxQL or Flux query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postQueryAnalyzeTest() throws ApiException {
        String zapTraceSpan = null;
        String contentType = null;
        Query query = null;
        AnalyzeQueryResponse response = api.postQueryAnalyze(zapTraceSpan, contentType, query);
        // TODO: test validations
    }

    /**
     * Generate an Abstract Syntax Tree (AST) from a query
     *
     * Analyzes flux query and generates a query specification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postQueryAstTest() throws ApiException {
        String zapTraceSpan = null;
        String contentType = null;
        LanguageRequest languageRequest = null;
        ASTResponse response = api.postQueryAst(zapTraceSpan, contentType, languageRequest);
        // TODO: test validations
    }

}
