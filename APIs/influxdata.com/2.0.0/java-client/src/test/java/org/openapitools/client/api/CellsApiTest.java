/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Cell;
import org.openapitools.client.model.CellUpdate;
import org.openapitools.client.model.CreateCell;
import org.openapitools.client.model.Dashboard;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.View;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CellsApi
 */
@Disabled
public class CellsApiTest {

    private final CellsApi api = new CellsApi();

    /**
     * Delete a dashboard cell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDashboardsIDCellsIDTest() throws ApiException {
        String dashboardID = null;
        String cellID = null;
        String zapTraceSpan = null;
        api.deleteDashboardsIDCellsID(dashboardID, cellID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Retrieve the view for a cell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDashboardsIDCellsIDViewTest() throws ApiException {
        String dashboardID = null;
        String cellID = null;
        String zapTraceSpan = null;
        View response = api.getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update the non-positional information related to a cell
     *
     * Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDashboardsIDCellsIDTest() throws ApiException {
        String dashboardID = null;
        String cellID = null;
        CellUpdate cellUpdate = null;
        String zapTraceSpan = null;
        Cell response = api.patchDashboardsIDCellsID(dashboardID, cellID, cellUpdate, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update the view for a cell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDashboardsIDCellsIDViewTest() throws ApiException {
        String dashboardID = null;
        String cellID = null;
        View view = null;
        String zapTraceSpan = null;
        View response = api.patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create a dashboard cell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDashboardsIDCellsTest() throws ApiException {
        String dashboardID = null;
        CreateCell createCell = null;
        String zapTraceSpan = null;
        Cell response = api.postDashboardsIDCells(dashboardID, createCell, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Replace cells in a dashboard
     *
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDashboardsIDCellsTest() throws ApiException {
        String dashboardID = null;
        List<Cell> cell = null;
        String zapTraceSpan = null;
        Dashboard response = api.putDashboardsIDCells(dashboardID, cell, zapTraceSpan);
        // TODO: test validations
    }

}
