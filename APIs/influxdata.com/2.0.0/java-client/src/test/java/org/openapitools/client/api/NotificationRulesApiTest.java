/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.NotificationRule;
import org.openapitools.client.model.NotificationRuleDiscriminator;
import org.openapitools.client.model.NotificationRuleUpdate;
import org.openapitools.client.model.NotificationRules;
import org.openapitools.client.model.PostNotificationRule;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationRulesApi
 */
@Disabled
public class NotificationRulesApiTest {

    private final NotificationRulesApi api = new NotificationRulesApi();

    /**
     * Add a notification rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNotificationRuleTest() throws ApiException {
        PostNotificationRule postNotificationRule = null;
        NotificationRule response = api.createNotificationRule(postNotificationRule);
        // TODO: test validations
    }

    /**
     * Delete a notification rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNotificationRulesIDTest() throws ApiException {
        String ruleID = null;
        String zapTraceSpan = null;
        api.deleteNotificationRulesID(ruleID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete label from a notification rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNotificationRulesIDLabelsIDTest() throws ApiException {
        String ruleID = null;
        String labelID = null;
        String zapTraceSpan = null;
        api.deleteNotificationRulesIDLabelsID(ruleID, labelID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all notification rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationRulesTest() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        Integer offset = null;
        Integer limit = null;
        String checkID = null;
        String tag = null;
        NotificationRules response = api.getNotificationRules(orgID, zapTraceSpan, offset, limit, checkID, tag);
        // TODO: test validations
    }

    /**
     * Retrieve a notification rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationRulesIDTest() throws ApiException {
        String ruleID = null;
        String zapTraceSpan = null;
        NotificationRule response = api.getNotificationRulesID(ruleID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all labels for a notification rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationRulesIDLabelsTest() throws ApiException {
        String ruleID = null;
        String zapTraceSpan = null;
        LabelsResponse response = api.getNotificationRulesIDLabels(ruleID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a notification rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchNotificationRulesIDTest() throws ApiException {
        String ruleID = null;
        NotificationRuleUpdate notificationRuleUpdate = null;
        String zapTraceSpan = null;
        NotificationRule response = api.patchNotificationRulesID(ruleID, notificationRuleUpdate, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a label to a notification rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNotificationRuleIDLabelsTest() throws ApiException {
        String ruleID = null;
        LabelMapping labelMapping = null;
        String zapTraceSpan = null;
        LabelResponse response = api.postNotificationRuleIDLabels(ruleID, labelMapping, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a notification rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putNotificationRulesIDTest() throws ApiException {
        String ruleID = null;
        NotificationRule notificationRule = null;
        String zapTraceSpan = null;
        NotificationRule response = api.putNotificationRulesID(ruleID, notificationRule, zapTraceSpan);
        // TODO: test validations
    }

}
