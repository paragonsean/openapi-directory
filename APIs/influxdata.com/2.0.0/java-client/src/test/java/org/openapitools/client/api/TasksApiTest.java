/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.Logs;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.Run;
import org.openapitools.client.model.RunManually;
import org.openapitools.client.model.Runs;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskCreateRequest;
import org.openapitools.client.model.TaskUpdateRequest;
import org.openapitools.client.model.Tasks;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Disabled
public class TasksApiTest {

    private final TasksApi api = new TasksApi();

    /**
     * Delete a task
     *
     * Deletes a task and all associated records
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTasksIDTest() throws ApiException {
        String taskID = null;
        String zapTraceSpan = null;
        api.deleteTasksID(taskID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete a label from a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTasksIDLabelsIDTest() throws ApiException {
        String taskID = null;
        String labelID = null;
        String zapTraceSpan = null;
        api.deleteTasksIDLabelsID(taskID, labelID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove a member from a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTasksIDMembersIDTest() throws ApiException {
        String userID = null;
        String taskID = null;
        String zapTraceSpan = null;
        api.deleteTasksIDMembersID(userID, taskID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove an owner from a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTasksIDOwnersIDTest() throws ApiException {
        String userID = null;
        String taskID = null;
        String zapTraceSpan = null;
        api.deleteTasksIDOwnersID(userID, taskID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Cancel a running task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTasksIDRunsIDTest() throws ApiException {
        String taskID = null;
        String runID = null;
        String zapTraceSpan = null;
        api.deleteTasksIDRunsID(taskID, runID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all tasks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksTest() throws ApiException {
        String zapTraceSpan = null;
        String name = null;
        String after = null;
        String user = null;
        String org = null;
        String orgID = null;
        String status = null;
        Integer limit = null;
        Tasks response = api.getTasks(zapTraceSpan, name, after, user, org, orgID, status, limit);
        // TODO: test validations
    }

    /**
     * Retrieve a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksIDTest() throws ApiException {
        String taskID = null;
        String zapTraceSpan = null;
        Task response = api.getTasksID(taskID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all labels for a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksIDLabelsTest() throws ApiException {
        String taskID = null;
        String zapTraceSpan = null;
        LabelsResponse response = api.getTasksIDLabels(taskID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Retrieve all logs for a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksIDLogsTest() throws ApiException {
        String taskID = null;
        String zapTraceSpan = null;
        Logs response = api.getTasksIDLogs(taskID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all task members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksIDMembersTest() throws ApiException {
        String taskID = null;
        String zapTraceSpan = null;
        ResourceMembers response = api.getTasksIDMembers(taskID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all owners of a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksIDOwnersTest() throws ApiException {
        String taskID = null;
        String zapTraceSpan = null;
        ResourceOwners response = api.getTasksIDOwners(taskID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List runs for a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksIDRunsTest() throws ApiException {
        String taskID = null;
        String zapTraceSpan = null;
        String after = null;
        Integer limit = null;
        OffsetDateTime afterTime = null;
        OffsetDateTime beforeTime = null;
        Runs response = api.getTasksIDRuns(taskID, zapTraceSpan, after, limit, afterTime, beforeTime);
        // TODO: test validations
    }

    /**
     * Retrieve a single run for a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksIDRunsIDTest() throws ApiException {
        String taskID = null;
        String runID = null;
        String zapTraceSpan = null;
        Run response = api.getTasksIDRunsID(taskID, runID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Retrieve all logs for a run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksIDRunsIDLogsTest() throws ApiException {
        String taskID = null;
        String runID = null;
        String zapTraceSpan = null;
        Logs response = api.getTasksIDRunsIDLogs(taskID, runID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a task
     *
     * Update a task. This will cancel all queued runs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchTasksIDTest() throws ApiException {
        String taskID = null;
        TaskUpdateRequest taskUpdateRequest = null;
        String zapTraceSpan = null;
        Task response = api.patchTasksID(taskID, taskUpdateRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create a new task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTasksTest() throws ApiException {
        TaskCreateRequest taskCreateRequest = null;
        String zapTraceSpan = null;
        Task response = api.postTasks(taskCreateRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a label to a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTasksIDLabelsTest() throws ApiException {
        String taskID = null;
        LabelMapping labelMapping = null;
        String zapTraceSpan = null;
        LabelResponse response = api.postTasksIDLabels(taskID, labelMapping, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a member to a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTasksIDMembersTest() throws ApiException {
        String taskID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceMember response = api.postTasksIDMembers(taskID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add an owner to a task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTasksIDOwnersTest() throws ApiException {
        String taskID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceOwner response = api.postTasksIDOwners(taskID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Manually start a task run, overriding the current schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTasksIDRunsTest() throws ApiException {
        String taskID = null;
        String zapTraceSpan = null;
        RunManually runManually = null;
        Run response = api.postTasksIDRuns(taskID, zapTraceSpan, runManually);
        // TODO: test validations
    }

    /**
     * Retry a task run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTasksIDRunsIDRetryTest() throws ApiException {
        String taskID = null;
        String runID = null;
        String zapTraceSpan = null;
        Object body = null;
        Run response = api.postTasksIDRunsIDRetry(taskID, runID, zapTraceSpan, body);
        // TODO: test validations
    }

}
