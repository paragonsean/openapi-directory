/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Cell;
import org.openapitools.client.model.CellUpdate;
import org.openapitools.client.model.CreateCell;
import org.openapitools.client.model.CreateDashboardRequest;
import org.openapitools.client.model.Dashboard;
import org.openapitools.client.model.Dashboards;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.PatchDashboardRequest;
import org.openapitools.client.model.PostDashboards201Response;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.View;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardsApi
 */
@Disabled
public class DashboardsApiTest {

    private final DashboardsApi api = new DashboardsApi();

    /**
     * Delete a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDashboardsIDTest() throws ApiException {
        String dashboardID = null;
        String zapTraceSpan = null;
        api.deleteDashboardsID(dashboardID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete a dashboard cell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDashboardsIDCellsID_0Test() throws ApiException {
        String dashboardID = null;
        String cellID = null;
        String zapTraceSpan = null;
        api.deleteDashboardsIDCellsID_0(dashboardID, cellID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete a label from a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDashboardsIDLabelsIDTest() throws ApiException {
        String dashboardID = null;
        String labelID = null;
        String zapTraceSpan = null;
        api.deleteDashboardsIDLabelsID(dashboardID, labelID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove a member from a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDashboardsIDMembersIDTest() throws ApiException {
        String userID = null;
        String dashboardID = null;
        String zapTraceSpan = null;
        api.deleteDashboardsIDMembersID(userID, dashboardID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove an owner from a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDashboardsIDOwnersIDTest() throws ApiException {
        String userID = null;
        String dashboardID = null;
        String zapTraceSpan = null;
        api.deleteDashboardsIDOwnersID(userID, dashboardID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all dashboards
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDashboardsTest() throws ApiException {
        String zapTraceSpan = null;
        Integer offset = null;
        Integer limit = null;
        Boolean descending = null;
        String owner = null;
        String sortBy = null;
        List<String> id = null;
        String orgID = null;
        String org = null;
        Dashboards response = api.getDashboards(zapTraceSpan, offset, limit, descending, owner, sortBy, id, orgID, org);
        // TODO: test validations
    }

    /**
     * Retrieve a Dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDashboardsIDTest() throws ApiException {
        String dashboardID = null;
        String zapTraceSpan = null;
        String include = null;
        PostDashboards201Response response = api.getDashboardsID(dashboardID, zapTraceSpan, include);
        // TODO: test validations
    }

    /**
     * Retrieve the view for a cell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDashboardsIDCellsIDView_0Test() throws ApiException {
        String dashboardID = null;
        String cellID = null;
        String zapTraceSpan = null;
        View response = api.getDashboardsIDCellsIDView_0(dashboardID, cellID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all labels for a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDashboardsIDLabelsTest() throws ApiException {
        String dashboardID = null;
        String zapTraceSpan = null;
        LabelsResponse response = api.getDashboardsIDLabels(dashboardID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all dashboard members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDashboardsIDMembersTest() throws ApiException {
        String dashboardID = null;
        String zapTraceSpan = null;
        ResourceMembers response = api.getDashboardsIDMembers(dashboardID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all dashboard owners
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDashboardsIDOwnersTest() throws ApiException {
        String dashboardID = null;
        String zapTraceSpan = null;
        ResourceOwners response = api.getDashboardsIDOwners(dashboardID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDashboardsIDTest() throws ApiException {
        String dashboardID = null;
        PatchDashboardRequest patchDashboardRequest = null;
        String zapTraceSpan = null;
        Dashboard response = api.patchDashboardsID(dashboardID, patchDashboardRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update the view for a cell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDashboardsIDCellsIDView_0Test() throws ApiException {
        String dashboardID = null;
        String cellID = null;
        View view = null;
        String zapTraceSpan = null;
        View response = api.patchDashboardsIDCellsIDView_0(dashboardID, cellID, view, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update the non-positional information related to a cell
     *
     * Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDashboardsIDCellsID_0Test() throws ApiException {
        String dashboardID = null;
        String cellID = null;
        CellUpdate cellUpdate = null;
        String zapTraceSpan = null;
        Cell response = api.patchDashboardsIDCellsID_0(dashboardID, cellID, cellUpdate, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDashboardsTest() throws ApiException {
        CreateDashboardRequest createDashboardRequest = null;
        String zapTraceSpan = null;
        PostDashboards201Response response = api.postDashboards(createDashboardRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create a dashboard cell
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDashboardsIDCells_0Test() throws ApiException {
        String dashboardID = null;
        CreateCell createCell = null;
        String zapTraceSpan = null;
        Cell response = api.postDashboardsIDCells_0(dashboardID, createCell, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a label to a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDashboardsIDLabelsTest() throws ApiException {
        String dashboardID = null;
        LabelMapping labelMapping = null;
        String zapTraceSpan = null;
        LabelResponse response = api.postDashboardsIDLabels(dashboardID, labelMapping, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a member to a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDashboardsIDMembersTest() throws ApiException {
        String dashboardID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceMember response = api.postDashboardsIDMembers(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add an owner to a dashboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDashboardsIDOwnersTest() throws ApiException {
        String dashboardID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceOwner response = api.postDashboardsIDOwners(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Replace cells in a dashboard
     *
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDashboardsIDCells_0Test() throws ApiException {
        String dashboardID = null;
        List<Cell> cell = null;
        String zapTraceSpan = null;
        Dashboard response = api.putDashboardsIDCells_0(dashboardID, cell, zapTraceSpan);
        // TODO: test validations
    }

}
