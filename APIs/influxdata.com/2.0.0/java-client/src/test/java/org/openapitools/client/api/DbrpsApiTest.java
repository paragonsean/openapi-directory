/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DBRP;
import org.openapitools.client.model.DBRPUpdate;
import org.openapitools.client.model.DBRPs;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DbrpsApi
 */
@Disabled
public class DbrpsApiTest {

    private final DbrpsApi api = new DbrpsApi();

    /**
     * Delete a database retention policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDBRPIDTest() throws ApiException {
        String orgID = null;
        String dbrpID = null;
        String zapTraceSpan = null;
        api.deleteDBRPID(orgID, dbrpID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all database retention policy mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDBRPsTest() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        String id = null;
        String bucketID = null;
        Boolean _default = null;
        String db = null;
        String rp = null;
        DBRPs response = api.getDBRPs(orgID, zapTraceSpan, id, bucketID, _default, db, rp);
        // TODO: test validations
    }

    /**
     * Retrieve a database retention policy mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDBRPsIDTest() throws ApiException {
        String orgID = null;
        String dbrpID = null;
        String zapTraceSpan = null;
        DBRP response = api.getDBRPsID(orgID, dbrpID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a database retention policy mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDBRPIDTest() throws ApiException {
        String orgID = null;
        String dbrpID = null;
        DBRPUpdate dbRPUpdate = null;
        String zapTraceSpan = null;
        DBRP response = api.patchDBRPID(orgID, dbrpID, dbRPUpdate, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a database retention policy mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDBRPTest() throws ApiException {
        DBRP DBRP = null;
        String zapTraceSpan = null;
        DBRP response = api.postDBRP(DBRP, zapTraceSpan);
        // TODO: test validations
    }

}
