/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Authorization;
import org.openapitools.client.model.AuthorizationPostRequest;
import org.openapitools.client.model.AuthorizationUpdateRequest;
import org.openapitools.client.model.Authorizations;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthorizationsApi
 */
@Disabled
public class AuthorizationsApiTest {

    private final AuthorizationsApi api = new AuthorizationsApi();

    /**
     * Delete an authorization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAuthorizationsIDTest() throws ApiException {
        String authID = null;
        String zapTraceSpan = null;
        api.deleteAuthorizationsID(authID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all authorizations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizationsTest() throws ApiException {
        String zapTraceSpan = null;
        String userID = null;
        String user = null;
        String orgID = null;
        String org = null;
        Authorizations response = api.getAuthorizations(zapTraceSpan, userID, user, orgID, org);
        // TODO: test validations
    }

    /**
     * Retrieve an authorization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizationsIDTest() throws ApiException {
        String authID = null;
        String zapTraceSpan = null;
        Authorization response = api.getAuthorizationsID(authID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update an authorization to be active or inactive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchAuthorizationsIDTest() throws ApiException {
        String authID = null;
        AuthorizationUpdateRequest authorizationUpdateRequest = null;
        String zapTraceSpan = null;
        Authorization response = api.patchAuthorizationsID(authID, authorizationUpdateRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create an authorization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAuthorizationsTest() throws ApiException {
        AuthorizationPostRequest authorizationPostRequest = null;
        String zapTraceSpan = null;
        Authorization response = api.postAuthorizations(authorizationPostRequest, zapTraceSpan);
        // TODO: test validations
    }

}
