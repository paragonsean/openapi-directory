/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.NotificationEndpoint;
import org.openapitools.client.model.NotificationEndpointDiscriminator;
import org.openapitools.client.model.NotificationEndpointUpdate;
import org.openapitools.client.model.NotificationEndpoints;
import org.openapitools.client.model.PostNotificationEndpoint;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationEndpointsApi
 */
@Disabled
public class NotificationEndpointsApiTest {

    private final NotificationEndpointsApi api = new NotificationEndpointsApi();

    /**
     * Add a notification endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNotificationEndpointTest() throws ApiException {
        PostNotificationEndpoint postNotificationEndpoint = null;
        NotificationEndpoint response = api.createNotificationEndpoint(postNotificationEndpoint);
        // TODO: test validations
    }

    /**
     * Delete a notification endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNotificationEndpointsIDTest() throws ApiException {
        String endpointID = null;
        String zapTraceSpan = null;
        api.deleteNotificationEndpointsID(endpointID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete a label from a notification endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNotificationEndpointsIDLabelsIDTest() throws ApiException {
        String endpointID = null;
        String labelID = null;
        String zapTraceSpan = null;
        api.deleteNotificationEndpointsIDLabelsID(endpointID, labelID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all notification endpoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationEndpointsTest() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        Integer offset = null;
        Integer limit = null;
        NotificationEndpoints response = api.getNotificationEndpoints(orgID, zapTraceSpan, offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve a notification endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationEndpointsIDTest() throws ApiException {
        String endpointID = null;
        String zapTraceSpan = null;
        NotificationEndpoint response = api.getNotificationEndpointsID(endpointID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all labels for a notification endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationEndpointsIDLabelsTest() throws ApiException {
        String endpointID = null;
        String zapTraceSpan = null;
        LabelsResponse response = api.getNotificationEndpointsIDLabels(endpointID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a notification endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchNotificationEndpointsIDTest() throws ApiException {
        String endpointID = null;
        NotificationEndpointUpdate notificationEndpointUpdate = null;
        String zapTraceSpan = null;
        NotificationEndpoint response = api.patchNotificationEndpointsID(endpointID, notificationEndpointUpdate, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a label to a notification endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNotificationEndpointIDLabelsTest() throws ApiException {
        String endpointID = null;
        LabelMapping labelMapping = null;
        String zapTraceSpan = null;
        LabelResponse response = api.postNotificationEndpointIDLabels(endpointID, labelMapping, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a notification endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putNotificationEndpointsIDTest() throws ApiException {
        String endpointID = null;
        NotificationEndpoint notificationEndpoint = null;
        String zapTraceSpan = null;
        NotificationEndpoint response = api.putNotificationEndpointsID(endpointID, notificationEndpoint, zapTraceSpan);
        // TODO: test validations
    }

}
