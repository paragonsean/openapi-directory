/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DashboardQuery;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ScatterViewProperties
 */
public class ScatterViewPropertiesTest {
    private final ScatterViewProperties model = new ScatterViewProperties();

    /**
     * Model tests for ScatterViewProperties
     */
    @Test
    public void testScatterViewProperties() {
        // TODO: test ScatterViewProperties
    }

    /**
     * Test the property 'colors'
     */
    @Test
    public void colorsTest() {
        // TODO: test colors
    }

    /**
     * Test the property 'fillColumns'
     */
    @Test
    public void fillColumnsTest() {
        // TODO: test fillColumns
    }

    /**
     * Test the property 'generateXAxisTicks'
     */
    @Test
    public void generateXAxisTicksTest() {
        // TODO: test generateXAxisTicks
    }

    /**
     * Test the property 'generateYAxisTicks'
     */
    @Test
    public void generateYAxisTicksTest() {
        // TODO: test generateYAxisTicks
    }

    /**
     * Test the property 'legendColorizeRows'
     */
    @Test
    public void legendColorizeRowsTest() {
        // TODO: test legendColorizeRows
    }

    /**
     * Test the property 'legendHide'
     */
    @Test
    public void legendHideTest() {
        // TODO: test legendHide
    }

    /**
     * Test the property 'legendOpacity'
     */
    @Test
    public void legendOpacityTest() {
        // TODO: test legendOpacity
    }

    /**
     * Test the property 'legendOrientationThreshold'
     */
    @Test
    public void legendOrientationThresholdTest() {
        // TODO: test legendOrientationThreshold
    }

    /**
     * Test the property 'note'
     */
    @Test
    public void noteTest() {
        // TODO: test note
    }

    /**
     * Test the property 'queries'
     */
    @Test
    public void queriesTest() {
        // TODO: test queries
    }

    /**
     * Test the property 'shape'
     */
    @Test
    public void shapeTest() {
        // TODO: test shape
    }

    /**
     * Test the property 'showNoteWhenEmpty'
     */
    @Test
    public void showNoteWhenEmptyTest() {
        // TODO: test showNoteWhenEmpty
    }

    /**
     * Test the property 'symbolColumns'
     */
    @Test
    public void symbolColumnsTest() {
        // TODO: test symbolColumns
    }

    /**
     * Test the property 'timeFormat'
     */
    @Test
    public void timeFormatTest() {
        // TODO: test timeFormat
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'xAxisLabel'
     */
    @Test
    public void xAxisLabelTest() {
        // TODO: test xAxisLabel
    }

    /**
     * Test the property 'xColumn'
     */
    @Test
    public void xColumnTest() {
        // TODO: test xColumn
    }

    /**
     * Test the property 'xDomain'
     */
    @Test
    public void xDomainTest() {
        // TODO: test xDomain
    }

    /**
     * Test the property 'xPrefix'
     */
    @Test
    public void xPrefixTest() {
        // TODO: test xPrefix
    }

    /**
     * Test the property 'xSuffix'
     */
    @Test
    public void xSuffixTest() {
        // TODO: test xSuffix
    }

    /**
     * Test the property 'xTickStart'
     */
    @Test
    public void xTickStartTest() {
        // TODO: test xTickStart
    }

    /**
     * Test the property 'xTickStep'
     */
    @Test
    public void xTickStepTest() {
        // TODO: test xTickStep
    }

    /**
     * Test the property 'xTotalTicks'
     */
    @Test
    public void xTotalTicksTest() {
        // TODO: test xTotalTicks
    }

    /**
     * Test the property 'yAxisLabel'
     */
    @Test
    public void yAxisLabelTest() {
        // TODO: test yAxisLabel
    }

    /**
     * Test the property 'yColumn'
     */
    @Test
    public void yColumnTest() {
        // TODO: test yColumn
    }

    /**
     * Test the property 'yDomain'
     */
    @Test
    public void yDomainTest() {
        // TODO: test yDomain
    }

    /**
     * Test the property 'yPrefix'
     */
    @Test
    public void yPrefixTest() {
        // TODO: test yPrefix
    }

    /**
     * Test the property 'ySuffix'
     */
    @Test
    public void ySuffixTest() {
        // TODO: test ySuffix
    }

    /**
     * Test the property 'yTickStart'
     */
    @Test
    public void yTickStartTest() {
        // TODO: test yTickStart
    }

    /**
     * Test the property 'yTickStep'
     */
    @Test
    public void yTickStepTest() {
        // TODO: test yTickStep
    }

    /**
     * Test the property 'yTotalTicks'
     */
    @Test
    public void yTotalTicksTest() {
        // TODO: test yTotalTicks
    }

}
