/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Bucket;
import org.openapitools.client.model.Buckets;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.PatchBucketRequest;
import org.openapitools.client.model.PostBucketRequest;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BucketsApi
 */
@Disabled
public class BucketsApiTest {

    private final BucketsApi api = new BucketsApi();

    /**
     * Delete a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBucketsIDTest() throws ApiException {
        String bucketID = null;
        String zapTraceSpan = null;
        api.deleteBucketsID(bucketID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete a label from a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBucketsIDLabelsIDTest() throws ApiException {
        String bucketID = null;
        String labelID = null;
        String zapTraceSpan = null;
        api.deleteBucketsIDLabelsID(bucketID, labelID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove a member from a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBucketsIDMembersIDTest() throws ApiException {
        String userID = null;
        String bucketID = null;
        String zapTraceSpan = null;
        api.deleteBucketsIDMembersID(userID, bucketID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove an owner from a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBucketsIDOwnersIDTest() throws ApiException {
        String userID = null;
        String bucketID = null;
        String zapTraceSpan = null;
        api.deleteBucketsIDOwnersID(userID, bucketID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all buckets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketsTest() throws ApiException {
        String zapTraceSpan = null;
        Integer offset = null;
        Integer limit = null;
        String after = null;
        String org = null;
        String orgID = null;
        String name = null;
        String id = null;
        Buckets response = api.getBuckets(zapTraceSpan, offset, limit, after, org, orgID, name, id);
        // TODO: test validations
    }

    /**
     * Retrieve a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketsIDTest() throws ApiException {
        String bucketID = null;
        String zapTraceSpan = null;
        Bucket response = api.getBucketsID(bucketID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all labels for a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketsIDLabelsTest() throws ApiException {
        String bucketID = null;
        String zapTraceSpan = null;
        LabelsResponse response = api.getBucketsIDLabels(bucketID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all users with member privileges for a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketsIDMembersTest() throws ApiException {
        String bucketID = null;
        String zapTraceSpan = null;
        ResourceMembers response = api.getBucketsIDMembers(bucketID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all owners of a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketsIDOwnersTest() throws ApiException {
        String bucketID = null;
        String zapTraceSpan = null;
        ResourceOwners response = api.getBucketsIDOwners(bucketID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Get buckets in a source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSourcesIDBuckets_0Test() throws ApiException {
        String sourceID = null;
        String zapTraceSpan = null;
        String org = null;
        Buckets response = api.getSourcesIDBuckets_0(sourceID, zapTraceSpan, org);
        // TODO: test validations
    }

    /**
     * Update a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchBucketsIDTest() throws ApiException {
        String bucketID = null;
        PatchBucketRequest patchBucketRequest = null;
        String zapTraceSpan = null;
        Bucket response = api.patchBucketsID(bucketID, patchBucketRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBucketsTest() throws ApiException {
        PostBucketRequest postBucketRequest = null;
        String zapTraceSpan = null;
        Bucket response = api.postBuckets(postBucketRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a label to a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBucketsIDLabelsTest() throws ApiException {
        String bucketID = null;
        LabelMapping labelMapping = null;
        String zapTraceSpan = null;
        LabelResponse response = api.postBucketsIDLabels(bucketID, labelMapping, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a member to a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBucketsIDMembersTest() throws ApiException {
        String bucketID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceMember response = api.postBucketsIDMembers(bucketID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add an owner to a bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBucketsIDOwnersTest() throws ApiException {
        String bucketID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceOwner response = api.postBucketsIDOwners(bucketID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

}
