/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.Telegraf;
import org.openapitools.client.model.TelegrafRequest;
import org.openapitools.client.model.Telegrafs;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TelegrafsApi
 */
@Disabled
public class TelegrafsApiTest {

    private final TelegrafsApi api = new TelegrafsApi();

    /**
     * Delete a Telegraf configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTelegrafsIDTest() throws ApiException {
        String telegrafID = null;
        String zapTraceSpan = null;
        api.deleteTelegrafsID(telegrafID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete a label from a Telegraf config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTelegrafsIDLabelsIDTest() throws ApiException {
        String telegrafID = null;
        String labelID = null;
        String zapTraceSpan = null;
        api.deleteTelegrafsIDLabelsID(telegrafID, labelID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove a member from a Telegraf config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTelegrafsIDMembersIDTest() throws ApiException {
        String userID = null;
        String telegrafID = null;
        String zapTraceSpan = null;
        api.deleteTelegrafsIDMembersID(userID, telegrafID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove an owner from a Telegraf config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTelegrafsIDOwnersIDTest() throws ApiException {
        String userID = null;
        String telegrafID = null;
        String zapTraceSpan = null;
        api.deleteTelegrafsIDOwnersID(userID, telegrafID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all Telegraf configurations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTelegrafsTest() throws ApiException {
        String zapTraceSpan = null;
        String orgID = null;
        Telegrafs response = api.getTelegrafs(zapTraceSpan, orgID);
        // TODO: test validations
    }

    /**
     * Retrieve a Telegraf configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTelegrafsIDTest() throws ApiException {
        String telegrafID = null;
        String zapTraceSpan = null;
        String accept = null;
        Telegraf response = api.getTelegrafsID(telegrafID, zapTraceSpan, accept);
        // TODO: test validations
    }

    /**
     * List all labels for a Telegraf config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTelegrafsIDLabelsTest() throws ApiException {
        String telegrafID = null;
        String zapTraceSpan = null;
        LabelsResponse response = api.getTelegrafsIDLabels(telegrafID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all users with member privileges for a Telegraf config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTelegrafsIDMembersTest() throws ApiException {
        String telegrafID = null;
        String zapTraceSpan = null;
        ResourceMembers response = api.getTelegrafsIDMembers(telegrafID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all owners of a Telegraf configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTelegrafsIDOwnersTest() throws ApiException {
        String telegrafID = null;
        String zapTraceSpan = null;
        ResourceOwners response = api.getTelegrafsIDOwners(telegrafID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create a Telegraf configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTelegrafsTest() throws ApiException {
        TelegrafRequest telegrafRequest = null;
        String zapTraceSpan = null;
        Telegraf response = api.postTelegrafs(telegrafRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a label to a Telegraf config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTelegrafsIDLabelsTest() throws ApiException {
        String telegrafID = null;
        LabelMapping labelMapping = null;
        String zapTraceSpan = null;
        LabelResponse response = api.postTelegrafsIDLabels(telegrafID, labelMapping, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a member to a Telegraf config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTelegrafsIDMembersTest() throws ApiException {
        String telegrafID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceMember response = api.postTelegrafsIDMembers(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add an owner to a Telegraf configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTelegrafsIDOwnersTest() throws ApiException {
        String telegrafID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceOwner response = api.postTelegrafsIDOwners(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a Telegraf configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putTelegrafsIDTest() throws ApiException {
        String telegrafID = null;
        TelegrafRequest telegrafRequest = null;
        String zapTraceSpan = null;
        Telegraf response = api.putTelegrafsID(telegrafID, telegrafRequest, zapTraceSpan);
        // TODO: test validations
    }

}
