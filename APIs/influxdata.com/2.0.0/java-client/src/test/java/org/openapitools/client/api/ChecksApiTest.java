/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Check;
import org.openapitools.client.model.CheckDiscriminator;
import org.openapitools.client.model.CheckPatch;
import org.openapitools.client.model.Checks;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FluxResponse;
import org.openapitools.client.model.LabelMapping;
import org.openapitools.client.model.LabelResponse;
import org.openapitools.client.model.LabelsResponse;
import org.openapitools.client.model.PostCheck;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChecksApi
 */
@Disabled
public class ChecksApiTest {

    private final ChecksApi api = new ChecksApi();

    /**
     * Add new check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCheckTest() throws ApiException {
        PostCheck postCheck = null;
        Check response = api.createCheck(postCheck);
        // TODO: test validations
    }

    /**
     * Delete a check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChecksIDTest() throws ApiException {
        String checkID = null;
        String zapTraceSpan = null;
        api.deleteChecksID(checkID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete label from a check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChecksIDLabelsIDTest() throws ApiException {
        String checkID = null;
        String labelID = null;
        String zapTraceSpan = null;
        api.deleteChecksIDLabelsID(checkID, labelID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all checks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChecksTest() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        Integer offset = null;
        Integer limit = null;
        Checks response = api.getChecks(orgID, zapTraceSpan, offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve a check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChecksIDTest() throws ApiException {
        String checkID = null;
        String zapTraceSpan = null;
        Check response = api.getChecksID(checkID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all labels for a check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChecksIDLabelsTest() throws ApiException {
        String checkID = null;
        String zapTraceSpan = null;
        LabelsResponse response = api.getChecksIDLabels(checkID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Retrieve a check query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChecksIDQueryTest() throws ApiException {
        String checkID = null;
        String zapTraceSpan = null;
        FluxResponse response = api.getChecksIDQuery(checkID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchChecksIDTest() throws ApiException {
        String checkID = null;
        CheckPatch checkPatch = null;
        String zapTraceSpan = null;
        Check response = api.patchChecksID(checkID, checkPatch, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a label to a check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postChecksIDLabelsTest() throws ApiException {
        String checkID = null;
        LabelMapping labelMapping = null;
        String zapTraceSpan = null;
        LabelResponse response = api.postChecksIDLabels(checkID, labelMapping, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putChecksIDTest() throws ApiException {
        String checkID = null;
        Check check = null;
        String zapTraceSpan = null;
        Check response = api.putChecksID(checkID, check, zapTraceSpan);
        // TODO: test validations
    }

}
