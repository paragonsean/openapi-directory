/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PasswordResetBody;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserResponse;
import org.openapitools.client.model.Users;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsersIDTest() throws ApiException {
        String userID = null;
        String zapTraceSpan = null;
        api.deleteUsersID(userID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Return the feature flags for the currently authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlagsTest() throws ApiException {
        String zapTraceSpan = null;
        Map<String, Object> response = api.getFlags(zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Retrieve the currently authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeTest() throws ApiException {
        String zapTraceSpan = null;
        UserResponse response = api.getMe(zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String zapTraceSpan = null;
        Integer offset = null;
        Integer limit = null;
        String after = null;
        String name = null;
        String id = null;
        Users response = api.getUsers(zapTraceSpan, offset, limit, after, name, id);
        // TODO: test validations
    }

    /**
     * Retrieve a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersIDTest() throws ApiException {
        String userID = null;
        String zapTraceSpan = null;
        UserResponse response = api.getUsersID(userID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchUsersIDTest() throws ApiException {
        String userID = null;
        User user = null;
        String zapTraceSpan = null;
        UserResponse response = api.patchUsersID(userID, user, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUsersTest() throws ApiException {
        User user = null;
        String zapTraceSpan = null;
        UserResponse response = api.postUsers(user, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUsersIDPasswordTest() throws ApiException {
        String userID = null;
        PasswordResetBody passwordResetBody = null;
        String zapTraceSpan = null;
        api.postUsersIDPassword(userID, passwordResetBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update a password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMePasswordTest() throws ApiException {
        PasswordResetBody passwordResetBody = null;
        String zapTraceSpan = null;
        api.putMePassword(passwordResetBody, zapTraceSpan);
        // TODO: test validations
    }

}
