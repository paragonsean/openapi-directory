/*
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddResourceMemberRequestBody;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.Organizations;
import org.openapitools.client.model.PatchOrganizationRequest;
import org.openapitools.client.model.PostOrganizationRequest;
import org.openapitools.client.model.ResourceMember;
import org.openapitools.client.model.ResourceMembers;
import org.openapitools.client.model.ResourceOwner;
import org.openapitools.client.model.ResourceOwners;
import org.openapitools.client.model.SecretKeys;
import org.openapitools.client.model.SecretKeysResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Disabled
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Delete an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrgsIDTest() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        api.deleteOrgsID(orgID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove a member from an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrgsIDMembersIDTest() throws ApiException {
        String userID = null;
        String orgID = null;
        String zapTraceSpan = null;
        api.deleteOrgsIDMembersID(userID, orgID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Remove an owner from an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrgsIDOwnersIDTest() throws ApiException {
        String userID = null;
        String orgID = null;
        String zapTraceSpan = null;
        api.deleteOrgsIDOwnersID(userID, orgID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all organizations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrgsTest() throws ApiException {
        String zapTraceSpan = null;
        Integer offset = null;
        Integer limit = null;
        Boolean descending = null;
        String org = null;
        String orgID = null;
        String userID = null;
        Organizations response = api.getOrgs(zapTraceSpan, offset, limit, descending, org, orgID, userID);
        // TODO: test validations
    }

    /**
     * Retrieve an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrgsIDTest() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        Organization response = api.getOrgsID(orgID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all members of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrgsIDMembersTest() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        ResourceMembers response = api.getOrgsIDMembers(orgID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all owners of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrgsIDOwnersTest() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        ResourceOwners response = api.getOrgsIDOwners(orgID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * List all secret keys for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrgsIDSecrets_0Test() throws ApiException {
        String orgID = null;
        String zapTraceSpan = null;
        SecretKeysResponse response = api.getOrgsIDSecrets_0(orgID, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchOrgsIDTest() throws ApiException {
        String orgID = null;
        PatchOrganizationRequest patchOrganizationRequest = null;
        String zapTraceSpan = null;
        Organization response = api.patchOrgsID(orgID, patchOrganizationRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Update secrets in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchOrgsIDSecrets_0Test() throws ApiException {
        String orgID = null;
        Map<String, String> requestBody = null;
        String zapTraceSpan = null;
        api.patchOrgsIDSecrets_0(orgID, requestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Create an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrgsTest() throws ApiException {
        PostOrganizationRequest postOrganizationRequest = null;
        String zapTraceSpan = null;
        Organization response = api.postOrgs(postOrganizationRequest, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add a member to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrgsIDMembersTest() throws ApiException {
        String orgID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceMember response = api.postOrgsIDMembers(orgID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Add an owner to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrgsIDOwnersTest() throws ApiException {
        String orgID = null;
        AddResourceMemberRequestBody addResourceMemberRequestBody = null;
        String zapTraceSpan = null;
        ResourceOwner response = api.postOrgsIDOwners(orgID, addResourceMemberRequestBody, zapTraceSpan);
        // TODO: test validations
    }

    /**
     * Delete secrets from an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrgsIDSecrets_0Test() throws ApiException {
        String orgID = null;
        SecretKeys secretKeys = null;
        String zapTraceSpan = null;
        api.postOrgsIDSecrets_0(orgID, secretKeys, zapTraceSpan);
        // TODO: test validations
    }

}
