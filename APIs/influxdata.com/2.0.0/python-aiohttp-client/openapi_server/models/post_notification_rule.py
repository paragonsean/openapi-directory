# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label import Label
from openapi_server.models.notification_rule_base_links import NotificationRuleBaseLinks
from openapi_server.models.notification_rule_discriminator import NotificationRuleDiscriminator
from openapi_server.models.status_rule import StatusRule
from openapi_server.models.tag_rule import TagRule
from openapi_server.models.task_status_type import TaskStatusType
from openapi_server import util


class PostNotificationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, endpoint_id: str=None, every: str=None, id: str=None, labels: List[Label]=None, last_run_error: str=None, last_run_status: str=None, latest_completed: datetime=None, limit: int=None, limit_every: int=None, links: NotificationRuleBaseLinks=None, name: str=None, offset: str=None, org_id: str=None, owner_id: str=None, runbook_link: str=None, sleep_until: str=None, status: TaskStatusType=None, status_rules: List[StatusRule]=None, tag_rules: List[TagRule]=None, task_id: str=None, updated_at: datetime=None, channel: str=None, message_template: str=None, type: str=None, body_template: str=None, subject_template: str=None, to: str=None, url: str=None, disable_web_page_preview: bool=None, parse_mode: str=None):
        """PostNotificationRule - a model defined in OpenAPI

        :param created_at: The created_at of this PostNotificationRule.
        :param description: The description of this PostNotificationRule.
        :param endpoint_id: The endpoint_id of this PostNotificationRule.
        :param every: The every of this PostNotificationRule.
        :param id: The id of this PostNotificationRule.
        :param labels: The labels of this PostNotificationRule.
        :param last_run_error: The last_run_error of this PostNotificationRule.
        :param last_run_status: The last_run_status of this PostNotificationRule.
        :param latest_completed: The latest_completed of this PostNotificationRule.
        :param limit: The limit of this PostNotificationRule.
        :param limit_every: The limit_every of this PostNotificationRule.
        :param links: The links of this PostNotificationRule.
        :param name: The name of this PostNotificationRule.
        :param offset: The offset of this PostNotificationRule.
        :param org_id: The org_id of this PostNotificationRule.
        :param owner_id: The owner_id of this PostNotificationRule.
        :param runbook_link: The runbook_link of this PostNotificationRule.
        :param sleep_until: The sleep_until of this PostNotificationRule.
        :param status: The status of this PostNotificationRule.
        :param status_rules: The status_rules of this PostNotificationRule.
        :param tag_rules: The tag_rules of this PostNotificationRule.
        :param task_id: The task_id of this PostNotificationRule.
        :param updated_at: The updated_at of this PostNotificationRule.
        :param channel: The channel of this PostNotificationRule.
        :param message_template: The message_template of this PostNotificationRule.
        :param type: The type of this PostNotificationRule.
        :param body_template: The body_template of this PostNotificationRule.
        :param subject_template: The subject_template of this PostNotificationRule.
        :param to: The to of this PostNotificationRule.
        :param url: The url of this PostNotificationRule.
        :param disable_web_page_preview: The disable_web_page_preview of this PostNotificationRule.
        :param parse_mode: The parse_mode of this PostNotificationRule.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'endpoint_id': str,
            'every': str,
            'id': str,
            'labels': List[Label],
            'last_run_error': str,
            'last_run_status': str,
            'latest_completed': datetime,
            'limit': int,
            'limit_every': int,
            'links': NotificationRuleBaseLinks,
            'name': str,
            'offset': str,
            'org_id': str,
            'owner_id': str,
            'runbook_link': str,
            'sleep_until': str,
            'status': TaskStatusType,
            'status_rules': List[StatusRule],
            'tag_rules': List[TagRule],
            'task_id': str,
            'updated_at': datetime,
            'channel': str,
            'message_template': str,
            'type': str,
            'body_template': str,
            'subject_template': str,
            'to': str,
            'url': str,
            'disable_web_page_preview': bool,
            'parse_mode': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'description': 'description',
            'endpoint_id': 'endpointID',
            'every': 'every',
            'id': 'id',
            'labels': 'labels',
            'last_run_error': 'lastRunError',
            'last_run_status': 'lastRunStatus',
            'latest_completed': 'latestCompleted',
            'limit': 'limit',
            'limit_every': 'limitEvery',
            'links': 'links',
            'name': 'name',
            'offset': 'offset',
            'org_id': 'orgID',
            'owner_id': 'ownerID',
            'runbook_link': 'runbookLink',
            'sleep_until': 'sleepUntil',
            'status': 'status',
            'status_rules': 'statusRules',
            'tag_rules': 'tagRules',
            'task_id': 'taskID',
            'updated_at': 'updatedAt',
            'channel': 'channel',
            'message_template': 'messageTemplate',
            'type': 'type',
            'body_template': 'bodyTemplate',
            'subject_template': 'subjectTemplate',
            'to': 'to',
            'url': 'url',
            'disable_web_page_preview': 'disableWebPagePreview',
            'parse_mode': 'parseMode'
        }

        self._created_at = created_at
        self._description = description
        self._endpoint_id = endpoint_id
        self._every = every
        self._id = id
        self._labels = labels
        self._last_run_error = last_run_error
        self._last_run_status = last_run_status
        self._latest_completed = latest_completed
        self._limit = limit
        self._limit_every = limit_every
        self._links = links
        self._name = name
        self._offset = offset
        self._org_id = org_id
        self._owner_id = owner_id
        self._runbook_link = runbook_link
        self._sleep_until = sleep_until
        self._status = status
        self._status_rules = status_rules
        self._tag_rules = tag_rules
        self._task_id = task_id
        self._updated_at = updated_at
        self._channel = channel
        self._message_template = message_template
        self._type = type
        self._body_template = body_template
        self._subject_template = subject_template
        self._to = to
        self._url = url
        self._disable_web_page_preview = disable_web_page_preview
        self._parse_mode = parse_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostNotificationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostNotificationRule of this PostNotificationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PostNotificationRule.


        :return: The created_at of this PostNotificationRule.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PostNotificationRule.


        :param created_at: The created_at of this PostNotificationRule.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this PostNotificationRule.

        An optional description of the notification rule.

        :return: The description of this PostNotificationRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostNotificationRule.

        An optional description of the notification rule.

        :param description: The description of this PostNotificationRule.
        :type description: str
        """

        self._description = description

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this PostNotificationRule.


        :return: The endpoint_id of this PostNotificationRule.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this PostNotificationRule.


        :param endpoint_id: The endpoint_id of this PostNotificationRule.
        :type endpoint_id: str
        """
        if endpoint_id is None:
            raise ValueError("Invalid value for `endpoint_id`, must not be `None`")

        self._endpoint_id = endpoint_id

    @property
    def every(self):
        """Gets the every of this PostNotificationRule.

        The notification repetition interval.

        :return: The every of this PostNotificationRule.
        :rtype: str
        """
        return self._every

    @every.setter
    def every(self, every):
        """Sets the every of this PostNotificationRule.

        The notification repetition interval.

        :param every: The every of this PostNotificationRule.
        :type every: str
        """

        self._every = every

    @property
    def id(self):
        """Gets the id of this PostNotificationRule.


        :return: The id of this PostNotificationRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostNotificationRule.


        :param id: The id of this PostNotificationRule.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this PostNotificationRule.


        :return: The labels of this PostNotificationRule.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PostNotificationRule.


        :param labels: The labels of this PostNotificationRule.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def last_run_error(self):
        """Gets the last_run_error of this PostNotificationRule.


        :return: The last_run_error of this PostNotificationRule.
        :rtype: str
        """
        return self._last_run_error

    @last_run_error.setter
    def last_run_error(self, last_run_error):
        """Sets the last_run_error of this PostNotificationRule.


        :param last_run_error: The last_run_error of this PostNotificationRule.
        :type last_run_error: str
        """

        self._last_run_error = last_run_error

    @property
    def last_run_status(self):
        """Gets the last_run_status of this PostNotificationRule.


        :return: The last_run_status of this PostNotificationRule.
        :rtype: str
        """
        return self._last_run_status

    @last_run_status.setter
    def last_run_status(self, last_run_status):
        """Sets the last_run_status of this PostNotificationRule.


        :param last_run_status: The last_run_status of this PostNotificationRule.
        :type last_run_status: str
        """
        allowed_values = ["failed", "success", "canceled"]  # noqa: E501
        if last_run_status not in allowed_values:
            raise ValueError(
                "Invalid value for `last_run_status` ({0}), must be one of {1}"
                .format(last_run_status, allowed_values)
            )

        self._last_run_status = last_run_status

    @property
    def latest_completed(self):
        """Gets the latest_completed of this PostNotificationRule.

        Timestamp of latest scheduled, completed run, RFC3339.

        :return: The latest_completed of this PostNotificationRule.
        :rtype: datetime
        """
        return self._latest_completed

    @latest_completed.setter
    def latest_completed(self, latest_completed):
        """Sets the latest_completed of this PostNotificationRule.

        Timestamp of latest scheduled, completed run, RFC3339.

        :param latest_completed: The latest_completed of this PostNotificationRule.
        :type latest_completed: datetime
        """

        self._latest_completed = latest_completed

    @property
    def limit(self):
        """Gets the limit of this PostNotificationRule.

        Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty.

        :return: The limit of this PostNotificationRule.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PostNotificationRule.

        Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty.

        :param limit: The limit of this PostNotificationRule.
        :type limit: int
        """

        self._limit = limit

    @property
    def limit_every(self):
        """Gets the limit_every of this PostNotificationRule.

        Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty.

        :return: The limit_every of this PostNotificationRule.
        :rtype: int
        """
        return self._limit_every

    @limit_every.setter
    def limit_every(self, limit_every):
        """Sets the limit_every of this PostNotificationRule.

        Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty.

        :param limit_every: The limit_every of this PostNotificationRule.
        :type limit_every: int
        """

        self._limit_every = limit_every

    @property
    def links(self):
        """Gets the links of this PostNotificationRule.


        :return: The links of this PostNotificationRule.
        :rtype: NotificationRuleBaseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PostNotificationRule.


        :param links: The links of this PostNotificationRule.
        :type links: NotificationRuleBaseLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this PostNotificationRule.

        Human-readable name describing the notification rule.

        :return: The name of this PostNotificationRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostNotificationRule.

        Human-readable name describing the notification rule.

        :param name: The name of this PostNotificationRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def offset(self):
        """Gets the offset of this PostNotificationRule.

        Duration to delay after the schedule, before executing check.

        :return: The offset of this PostNotificationRule.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PostNotificationRule.

        Duration to delay after the schedule, before executing check.

        :param offset: The offset of this PostNotificationRule.
        :type offset: str
        """

        self._offset = offset

    @property
    def org_id(self):
        """Gets the org_id of this PostNotificationRule.

        The ID of the organization that owns this notification rule.

        :return: The org_id of this PostNotificationRule.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PostNotificationRule.

        The ID of the organization that owns this notification rule.

        :param org_id: The org_id of this PostNotificationRule.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def owner_id(self):
        """Gets the owner_id of this PostNotificationRule.

        The ID of creator used to create this notification rule.

        :return: The owner_id of this PostNotificationRule.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this PostNotificationRule.

        The ID of creator used to create this notification rule.

        :param owner_id: The owner_id of this PostNotificationRule.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def runbook_link(self):
        """Gets the runbook_link of this PostNotificationRule.


        :return: The runbook_link of this PostNotificationRule.
        :rtype: str
        """
        return self._runbook_link

    @runbook_link.setter
    def runbook_link(self, runbook_link):
        """Sets the runbook_link of this PostNotificationRule.


        :param runbook_link: The runbook_link of this PostNotificationRule.
        :type runbook_link: str
        """

        self._runbook_link = runbook_link

    @property
    def sleep_until(self):
        """Gets the sleep_until of this PostNotificationRule.


        :return: The sleep_until of this PostNotificationRule.
        :rtype: str
        """
        return self._sleep_until

    @sleep_until.setter
    def sleep_until(self, sleep_until):
        """Sets the sleep_until of this PostNotificationRule.


        :param sleep_until: The sleep_until of this PostNotificationRule.
        :type sleep_until: str
        """

        self._sleep_until = sleep_until

    @property
    def status(self):
        """Gets the status of this PostNotificationRule.


        :return: The status of this PostNotificationRule.
        :rtype: TaskStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PostNotificationRule.


        :param status: The status of this PostNotificationRule.
        :type status: TaskStatusType
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_rules(self):
        """Gets the status_rules of this PostNotificationRule.

        List of status rules the notification rule attempts to match.

        :return: The status_rules of this PostNotificationRule.
        :rtype: List[StatusRule]
        """
        return self._status_rules

    @status_rules.setter
    def status_rules(self, status_rules):
        """Sets the status_rules of this PostNotificationRule.

        List of status rules the notification rule attempts to match.

        :param status_rules: The status_rules of this PostNotificationRule.
        :type status_rules: List[StatusRule]
        """
        if status_rules is None:
            raise ValueError("Invalid value for `status_rules`, must not be `None`")
        if status_rules is not None and len(status_rules) < 1:
            raise ValueError("Invalid value for `status_rules`, number of items must be greater than or equal to `1`")

        self._status_rules = status_rules

    @property
    def tag_rules(self):
        """Gets the tag_rules of this PostNotificationRule.

        List of tag rules the notification rule attempts to match.

        :return: The tag_rules of this PostNotificationRule.
        :rtype: List[TagRule]
        """
        return self._tag_rules

    @tag_rules.setter
    def tag_rules(self, tag_rules):
        """Sets the tag_rules of this PostNotificationRule.

        List of tag rules the notification rule attempts to match.

        :param tag_rules: The tag_rules of this PostNotificationRule.
        :type tag_rules: List[TagRule]
        """

        self._tag_rules = tag_rules

    @property
    def task_id(self):
        """Gets the task_id of this PostNotificationRule.

        The ID of the task associated with this notification rule.

        :return: The task_id of this PostNotificationRule.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this PostNotificationRule.

        The ID of the task associated with this notification rule.

        :param task_id: The task_id of this PostNotificationRule.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def updated_at(self):
        """Gets the updated_at of this PostNotificationRule.


        :return: The updated_at of this PostNotificationRule.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PostNotificationRule.


        :param updated_at: The updated_at of this PostNotificationRule.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def channel(self):
        """Gets the channel of this PostNotificationRule.


        :return: The channel of this PostNotificationRule.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this PostNotificationRule.


        :param channel: The channel of this PostNotificationRule.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def message_template(self):
        """Gets the message_template of this PostNotificationRule.

        The message template as a flux interpolated string.

        :return: The message_template of this PostNotificationRule.
        :rtype: str
        """
        return self._message_template

    @message_template.setter
    def message_template(self, message_template):
        """Sets the message_template of this PostNotificationRule.

        The message template as a flux interpolated string.

        :param message_template: The message_template of this PostNotificationRule.
        :type message_template: str
        """
        if message_template is None:
            raise ValueError("Invalid value for `message_template`, must not be `None`")

        self._message_template = message_template

    @property
    def type(self):
        """Gets the type of this PostNotificationRule.

        The discriminator between other types of notification rules is \"telegram\".

        :return: The type of this PostNotificationRule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostNotificationRule.

        The discriminator between other types of notification rules is \"telegram\".

        :param type: The type of this PostNotificationRule.
        :type type: str
        """
        allowed_values = ["telegram"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def body_template(self):
        """Gets the body_template of this PostNotificationRule.


        :return: The body_template of this PostNotificationRule.
        :rtype: str
        """
        return self._body_template

    @body_template.setter
    def body_template(self, body_template):
        """Sets the body_template of this PostNotificationRule.


        :param body_template: The body_template of this PostNotificationRule.
        :type body_template: str
        """

        self._body_template = body_template

    @property
    def subject_template(self):
        """Gets the subject_template of this PostNotificationRule.


        :return: The subject_template of this PostNotificationRule.
        :rtype: str
        """
        return self._subject_template

    @subject_template.setter
    def subject_template(self, subject_template):
        """Sets the subject_template of this PostNotificationRule.


        :param subject_template: The subject_template of this PostNotificationRule.
        :type subject_template: str
        """
        if subject_template is None:
            raise ValueError("Invalid value for `subject_template`, must not be `None`")

        self._subject_template = subject_template

    @property
    def to(self):
        """Gets the to of this PostNotificationRule.


        :return: The to of this PostNotificationRule.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PostNotificationRule.


        :param to: The to of this PostNotificationRule.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def url(self):
        """Gets the url of this PostNotificationRule.


        :return: The url of this PostNotificationRule.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PostNotificationRule.


        :param url: The url of this PostNotificationRule.
        :type url: str
        """

        self._url = url

    @property
    def disable_web_page_preview(self):
        """Gets the disable_web_page_preview of this PostNotificationRule.

        Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .

        :return: The disable_web_page_preview of this PostNotificationRule.
        :rtype: bool
        """
        return self._disable_web_page_preview

    @disable_web_page_preview.setter
    def disable_web_page_preview(self, disable_web_page_preview):
        """Sets the disable_web_page_preview of this PostNotificationRule.

        Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .

        :param disable_web_page_preview: The disable_web_page_preview of this PostNotificationRule.
        :type disable_web_page_preview: bool
        """

        self._disable_web_page_preview = disable_web_page_preview

    @property
    def parse_mode(self):
        """Gets the parse_mode of this PostNotificationRule.

        Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .

        :return: The parse_mode of this PostNotificationRule.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this PostNotificationRule.

        Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .

        :param parse_mode: The parse_mode of this PostNotificationRule.
        :type parse_mode: str
        """
        allowed_values = ["MarkdownV2", "HTML", "Markdown"]  # noqa: E501
        if parse_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `parse_mode` ({0}), must be one of {1}"
                .format(parse_mode, allowed_values)
            )

        self._parse_mode = parse_mode
