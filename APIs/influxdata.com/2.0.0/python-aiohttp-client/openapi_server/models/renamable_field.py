# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenamableField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, internal_name: str=None, visible: bool=None):
        """RenamableField - a model defined in OpenAPI

        :param display_name: The display_name of this RenamableField.
        :param internal_name: The internal_name of this RenamableField.
        :param visible: The visible of this RenamableField.
        """
        self.openapi_types = {
            'display_name': str,
            'internal_name': str,
            'visible': bool
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'internal_name': 'internalName',
            'visible': 'visible'
        }

        self._display_name = display_name
        self._internal_name = internal_name
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenamableField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenamableField of this RenamableField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this RenamableField.

        The name that a field is renamed to by the user.

        :return: The display_name of this RenamableField.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RenamableField.

        The name that a field is renamed to by the user.

        :param display_name: The display_name of this RenamableField.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def internal_name(self):
        """Gets the internal_name of this RenamableField.

        The calculated name of a field.

        :return: The internal_name of this RenamableField.
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this RenamableField.

        The calculated name of a field.

        :param internal_name: The internal_name of this RenamableField.
        :type internal_name: str
        """

        self._internal_name = internal_name

    @property
    def visible(self):
        """Gets the visible of this RenamableField.

        Indicates whether this field should be visible on the table.

        :return: The visible of this RenamableField.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this RenamableField.

        Indicates whether this field should be visible on the table.

        :param visible: The visible of this RenamableField.
        :type visible: bool
        """

        self._visible = visible
