# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_export_by_id_org_ids_inner import TemplateExportByIDOrgIDsInner
from openapi_server.models.template_export_by_id_resources import TemplateExportByIDResources
from openapi_server import util


class TemplateExportByID(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, org_ids: List[TemplateExportByIDOrgIDsInner]=None, resources: TemplateExportByIDResources=None, stack_id: str=None):
        """TemplateExportByID - a model defined in OpenAPI

        :param org_ids: The org_ids of this TemplateExportByID.
        :param resources: The resources of this TemplateExportByID.
        :param stack_id: The stack_id of this TemplateExportByID.
        """
        self.openapi_types = {
            'org_ids': List[TemplateExportByIDOrgIDsInner],
            'resources': TemplateExportByIDResources,
            'stack_id': str
        }

        self.attribute_map = {
            'org_ids': 'orgIDs',
            'resources': 'resources',
            'stack_id': 'stackID'
        }

        self._org_ids = org_ids
        self._resources = resources
        self._stack_id = stack_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateExportByID':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateExportByID of this TemplateExportByID.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def org_ids(self):
        """Gets the org_ids of this TemplateExportByID.


        :return: The org_ids of this TemplateExportByID.
        :rtype: List[TemplateExportByIDOrgIDsInner]
        """
        return self._org_ids

    @org_ids.setter
    def org_ids(self, org_ids):
        """Sets the org_ids of this TemplateExportByID.


        :param org_ids: The org_ids of this TemplateExportByID.
        :type org_ids: List[TemplateExportByIDOrgIDsInner]
        """

        self._org_ids = org_ids

    @property
    def resources(self):
        """Gets the resources of this TemplateExportByID.


        :return: The resources of this TemplateExportByID.
        :rtype: TemplateExportByIDResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this TemplateExportByID.


        :param resources: The resources of this TemplateExportByID.
        :type resources: TemplateExportByIDResources
        """

        self._resources = resources

    @property
    def stack_id(self):
        """Gets the stack_id of this TemplateExportByID.


        :return: The stack_id of this TemplateExportByID.
        :rtype: str
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """Sets the stack_id of this TemplateExportByID.


        :param stack_id: The stack_id of this TemplateExportByID.
        :type stack_id: str
        """

        self._stack_id = stack_id
