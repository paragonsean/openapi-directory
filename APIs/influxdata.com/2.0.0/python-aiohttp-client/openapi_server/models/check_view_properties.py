# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check import Check
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server.models.dashboard_query import DashboardQuery
from openapi_server import util


class CheckViewProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check: Check=None, check_id: str=None, colors: List[DashboardColor]=None, legend_colorize_rows: bool=None, legend_hide: bool=None, legend_opacity: float=None, legend_orientation_threshold: int=None, queries: List[DashboardQuery]=None, shape: str=None, type: str=None):
        """CheckViewProperties - a model defined in OpenAPI

        :param check: The check of this CheckViewProperties.
        :param check_id: The check_id of this CheckViewProperties.
        :param colors: The colors of this CheckViewProperties.
        :param legend_colorize_rows: The legend_colorize_rows of this CheckViewProperties.
        :param legend_hide: The legend_hide of this CheckViewProperties.
        :param legend_opacity: The legend_opacity of this CheckViewProperties.
        :param legend_orientation_threshold: The legend_orientation_threshold of this CheckViewProperties.
        :param queries: The queries of this CheckViewProperties.
        :param shape: The shape of this CheckViewProperties.
        :param type: The type of this CheckViewProperties.
        """
        self.openapi_types = {
            'check': Check,
            'check_id': str,
            'colors': List[DashboardColor],
            'legend_colorize_rows': bool,
            'legend_hide': bool,
            'legend_opacity': float,
            'legend_orientation_threshold': int,
            'queries': List[DashboardQuery],
            'shape': str,
            'type': str
        }

        self.attribute_map = {
            'check': 'check',
            'check_id': 'checkID',
            'colors': 'colors',
            'legend_colorize_rows': 'legendColorizeRows',
            'legend_hide': 'legendHide',
            'legend_opacity': 'legendOpacity',
            'legend_orientation_threshold': 'legendOrientationThreshold',
            'queries': 'queries',
            'shape': 'shape',
            'type': 'type'
        }

        self._check = check
        self._check_id = check_id
        self._colors = colors
        self._legend_colorize_rows = legend_colorize_rows
        self._legend_hide = legend_hide
        self._legend_opacity = legend_opacity
        self._legend_orientation_threshold = legend_orientation_threshold
        self._queries = queries
        self._shape = shape
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckViewProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckViewProperties of this CheckViewProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check(self):
        """Gets the check of this CheckViewProperties.


        :return: The check of this CheckViewProperties.
        :rtype: Check
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this CheckViewProperties.


        :param check: The check of this CheckViewProperties.
        :type check: Check
        """

        self._check = check

    @property
    def check_id(self):
        """Gets the check_id of this CheckViewProperties.


        :return: The check_id of this CheckViewProperties.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this CheckViewProperties.


        :param check_id: The check_id of this CheckViewProperties.
        :type check_id: str
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")

        self._check_id = check_id

    @property
    def colors(self):
        """Gets the colors of this CheckViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this CheckViewProperties.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this CheckViewProperties.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this CheckViewProperties.
        :type colors: List[DashboardColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def legend_colorize_rows(self):
        """Gets the legend_colorize_rows of this CheckViewProperties.


        :return: The legend_colorize_rows of this CheckViewProperties.
        :rtype: bool
        """
        return self._legend_colorize_rows

    @legend_colorize_rows.setter
    def legend_colorize_rows(self, legend_colorize_rows):
        """Sets the legend_colorize_rows of this CheckViewProperties.


        :param legend_colorize_rows: The legend_colorize_rows of this CheckViewProperties.
        :type legend_colorize_rows: bool
        """

        self._legend_colorize_rows = legend_colorize_rows

    @property
    def legend_hide(self):
        """Gets the legend_hide of this CheckViewProperties.


        :return: The legend_hide of this CheckViewProperties.
        :rtype: bool
        """
        return self._legend_hide

    @legend_hide.setter
    def legend_hide(self, legend_hide):
        """Sets the legend_hide of this CheckViewProperties.


        :param legend_hide: The legend_hide of this CheckViewProperties.
        :type legend_hide: bool
        """

        self._legend_hide = legend_hide

    @property
    def legend_opacity(self):
        """Gets the legend_opacity of this CheckViewProperties.


        :return: The legend_opacity of this CheckViewProperties.
        :rtype: float
        """
        return self._legend_opacity

    @legend_opacity.setter
    def legend_opacity(self, legend_opacity):
        """Sets the legend_opacity of this CheckViewProperties.


        :param legend_opacity: The legend_opacity of this CheckViewProperties.
        :type legend_opacity: float
        """

        self._legend_opacity = legend_opacity

    @property
    def legend_orientation_threshold(self):
        """Gets the legend_orientation_threshold of this CheckViewProperties.


        :return: The legend_orientation_threshold of this CheckViewProperties.
        :rtype: int
        """
        return self._legend_orientation_threshold

    @legend_orientation_threshold.setter
    def legend_orientation_threshold(self, legend_orientation_threshold):
        """Sets the legend_orientation_threshold of this CheckViewProperties.


        :param legend_orientation_threshold: The legend_orientation_threshold of this CheckViewProperties.
        :type legend_orientation_threshold: int
        """

        self._legend_orientation_threshold = legend_orientation_threshold

    @property
    def queries(self):
        """Gets the queries of this CheckViewProperties.


        :return: The queries of this CheckViewProperties.
        :rtype: List[DashboardQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this CheckViewProperties.


        :param queries: The queries of this CheckViewProperties.
        :type queries: List[DashboardQuery]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def shape(self):
        """Gets the shape of this CheckViewProperties.


        :return: The shape of this CheckViewProperties.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this CheckViewProperties.


        :param shape: The shape of this CheckViewProperties.
        :type shape: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def type(self):
        """Gets the type of this CheckViewProperties.


        :return: The type of this CheckViewProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckViewProperties.


        :param type: The type of this CheckViewProperties.
        :type type: str
        """
        allowed_values = ["check"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
