# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.axes import Axes
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server.models.dashboard_query import DashboardQuery
from openapi_server.models.decimal_places import DecimalPlaces
from openapi_server.models.static_legend import StaticLegend
from openapi_server import util


class LinePlusSingleStatProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, axes: Axes=None, colors: List[DashboardColor]=None, decimal_places: DecimalPlaces=None, generate_x_axis_ticks: List[str]=None, generate_y_axis_ticks: List[str]=None, hover_dimension: str=None, legend_colorize_rows: bool=None, legend_hide: bool=None, legend_opacity: float=None, legend_orientation_threshold: int=None, note: str=None, position: str=None, prefix: str=None, queries: List[DashboardQuery]=None, shade_below: bool=None, shape: str=None, show_note_when_empty: bool=None, static_legend: StaticLegend=None, suffix: str=None, time_format: str=None, type: str=None, x_column: str=None, x_tick_start: float=None, x_tick_step: float=None, x_total_ticks: int=None, y_column: str=None, y_tick_start: float=None, y_tick_step: float=None, y_total_ticks: int=None):
        """LinePlusSingleStatProperties - a model defined in OpenAPI

        :param axes: The axes of this LinePlusSingleStatProperties.
        :param colors: The colors of this LinePlusSingleStatProperties.
        :param decimal_places: The decimal_places of this LinePlusSingleStatProperties.
        :param generate_x_axis_ticks: The generate_x_axis_ticks of this LinePlusSingleStatProperties.
        :param generate_y_axis_ticks: The generate_y_axis_ticks of this LinePlusSingleStatProperties.
        :param hover_dimension: The hover_dimension of this LinePlusSingleStatProperties.
        :param legend_colorize_rows: The legend_colorize_rows of this LinePlusSingleStatProperties.
        :param legend_hide: The legend_hide of this LinePlusSingleStatProperties.
        :param legend_opacity: The legend_opacity of this LinePlusSingleStatProperties.
        :param legend_orientation_threshold: The legend_orientation_threshold of this LinePlusSingleStatProperties.
        :param note: The note of this LinePlusSingleStatProperties.
        :param position: The position of this LinePlusSingleStatProperties.
        :param prefix: The prefix of this LinePlusSingleStatProperties.
        :param queries: The queries of this LinePlusSingleStatProperties.
        :param shade_below: The shade_below of this LinePlusSingleStatProperties.
        :param shape: The shape of this LinePlusSingleStatProperties.
        :param show_note_when_empty: The show_note_when_empty of this LinePlusSingleStatProperties.
        :param static_legend: The static_legend of this LinePlusSingleStatProperties.
        :param suffix: The suffix of this LinePlusSingleStatProperties.
        :param time_format: The time_format of this LinePlusSingleStatProperties.
        :param type: The type of this LinePlusSingleStatProperties.
        :param x_column: The x_column of this LinePlusSingleStatProperties.
        :param x_tick_start: The x_tick_start of this LinePlusSingleStatProperties.
        :param x_tick_step: The x_tick_step of this LinePlusSingleStatProperties.
        :param x_total_ticks: The x_total_ticks of this LinePlusSingleStatProperties.
        :param y_column: The y_column of this LinePlusSingleStatProperties.
        :param y_tick_start: The y_tick_start of this LinePlusSingleStatProperties.
        :param y_tick_step: The y_tick_step of this LinePlusSingleStatProperties.
        :param y_total_ticks: The y_total_ticks of this LinePlusSingleStatProperties.
        """
        self.openapi_types = {
            'axes': Axes,
            'colors': List[DashboardColor],
            'decimal_places': DecimalPlaces,
            'generate_x_axis_ticks': List[str],
            'generate_y_axis_ticks': List[str],
            'hover_dimension': str,
            'legend_colorize_rows': bool,
            'legend_hide': bool,
            'legend_opacity': float,
            'legend_orientation_threshold': int,
            'note': str,
            'position': str,
            'prefix': str,
            'queries': List[DashboardQuery],
            'shade_below': bool,
            'shape': str,
            'show_note_when_empty': bool,
            'static_legend': StaticLegend,
            'suffix': str,
            'time_format': str,
            'type': str,
            'x_column': str,
            'x_tick_start': float,
            'x_tick_step': float,
            'x_total_ticks': int,
            'y_column': str,
            'y_tick_start': float,
            'y_tick_step': float,
            'y_total_ticks': int
        }

        self.attribute_map = {
            'axes': 'axes',
            'colors': 'colors',
            'decimal_places': 'decimalPlaces',
            'generate_x_axis_ticks': 'generateXAxisTicks',
            'generate_y_axis_ticks': 'generateYAxisTicks',
            'hover_dimension': 'hoverDimension',
            'legend_colorize_rows': 'legendColorizeRows',
            'legend_hide': 'legendHide',
            'legend_opacity': 'legendOpacity',
            'legend_orientation_threshold': 'legendOrientationThreshold',
            'note': 'note',
            'position': 'position',
            'prefix': 'prefix',
            'queries': 'queries',
            'shade_below': 'shadeBelow',
            'shape': 'shape',
            'show_note_when_empty': 'showNoteWhenEmpty',
            'static_legend': 'staticLegend',
            'suffix': 'suffix',
            'time_format': 'timeFormat',
            'type': 'type',
            'x_column': 'xColumn',
            'x_tick_start': 'xTickStart',
            'x_tick_step': 'xTickStep',
            'x_total_ticks': 'xTotalTicks',
            'y_column': 'yColumn',
            'y_tick_start': 'yTickStart',
            'y_tick_step': 'yTickStep',
            'y_total_ticks': 'yTotalTicks'
        }

        self._axes = axes
        self._colors = colors
        self._decimal_places = decimal_places
        self._generate_x_axis_ticks = generate_x_axis_ticks
        self._generate_y_axis_ticks = generate_y_axis_ticks
        self._hover_dimension = hover_dimension
        self._legend_colorize_rows = legend_colorize_rows
        self._legend_hide = legend_hide
        self._legend_opacity = legend_opacity
        self._legend_orientation_threshold = legend_orientation_threshold
        self._note = note
        self._position = position
        self._prefix = prefix
        self._queries = queries
        self._shade_below = shade_below
        self._shape = shape
        self._show_note_when_empty = show_note_when_empty
        self._static_legend = static_legend
        self._suffix = suffix
        self._time_format = time_format
        self._type = type
        self._x_column = x_column
        self._x_tick_start = x_tick_start
        self._x_tick_step = x_tick_step
        self._x_total_ticks = x_total_ticks
        self._y_column = y_column
        self._y_tick_start = y_tick_start
        self._y_tick_step = y_tick_step
        self._y_total_ticks = y_total_ticks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinePlusSingleStatProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinePlusSingleStatProperties of this LinePlusSingleStatProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def axes(self):
        """Gets the axes of this LinePlusSingleStatProperties.


        :return: The axes of this LinePlusSingleStatProperties.
        :rtype: Axes
        """
        return self._axes

    @axes.setter
    def axes(self, axes):
        """Sets the axes of this LinePlusSingleStatProperties.


        :param axes: The axes of this LinePlusSingleStatProperties.
        :type axes: Axes
        """
        if axes is None:
            raise ValueError("Invalid value for `axes`, must not be `None`")

        self._axes = axes

    @property
    def colors(self):
        """Gets the colors of this LinePlusSingleStatProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this LinePlusSingleStatProperties.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this LinePlusSingleStatProperties.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this LinePlusSingleStatProperties.
        :type colors: List[DashboardColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def decimal_places(self):
        """Gets the decimal_places of this LinePlusSingleStatProperties.


        :return: The decimal_places of this LinePlusSingleStatProperties.
        :rtype: DecimalPlaces
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this LinePlusSingleStatProperties.


        :param decimal_places: The decimal_places of this LinePlusSingleStatProperties.
        :type decimal_places: DecimalPlaces
        """
        if decimal_places is None:
            raise ValueError("Invalid value for `decimal_places`, must not be `None`")

        self._decimal_places = decimal_places

    @property
    def generate_x_axis_ticks(self):
        """Gets the generate_x_axis_ticks of this LinePlusSingleStatProperties.


        :return: The generate_x_axis_ticks of this LinePlusSingleStatProperties.
        :rtype: List[str]
        """
        return self._generate_x_axis_ticks

    @generate_x_axis_ticks.setter
    def generate_x_axis_ticks(self, generate_x_axis_ticks):
        """Sets the generate_x_axis_ticks of this LinePlusSingleStatProperties.


        :param generate_x_axis_ticks: The generate_x_axis_ticks of this LinePlusSingleStatProperties.
        :type generate_x_axis_ticks: List[str]
        """

        self._generate_x_axis_ticks = generate_x_axis_ticks

    @property
    def generate_y_axis_ticks(self):
        """Gets the generate_y_axis_ticks of this LinePlusSingleStatProperties.


        :return: The generate_y_axis_ticks of this LinePlusSingleStatProperties.
        :rtype: List[str]
        """
        return self._generate_y_axis_ticks

    @generate_y_axis_ticks.setter
    def generate_y_axis_ticks(self, generate_y_axis_ticks):
        """Sets the generate_y_axis_ticks of this LinePlusSingleStatProperties.


        :param generate_y_axis_ticks: The generate_y_axis_ticks of this LinePlusSingleStatProperties.
        :type generate_y_axis_ticks: List[str]
        """

        self._generate_y_axis_ticks = generate_y_axis_ticks

    @property
    def hover_dimension(self):
        """Gets the hover_dimension of this LinePlusSingleStatProperties.


        :return: The hover_dimension of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._hover_dimension

    @hover_dimension.setter
    def hover_dimension(self, hover_dimension):
        """Sets the hover_dimension of this LinePlusSingleStatProperties.


        :param hover_dimension: The hover_dimension of this LinePlusSingleStatProperties.
        :type hover_dimension: str
        """
        allowed_values = ["auto", "x", "y", "xy"]  # noqa: E501
        if hover_dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `hover_dimension` ({0}), must be one of {1}"
                .format(hover_dimension, allowed_values)
            )

        self._hover_dimension = hover_dimension

    @property
    def legend_colorize_rows(self):
        """Gets the legend_colorize_rows of this LinePlusSingleStatProperties.


        :return: The legend_colorize_rows of this LinePlusSingleStatProperties.
        :rtype: bool
        """
        return self._legend_colorize_rows

    @legend_colorize_rows.setter
    def legend_colorize_rows(self, legend_colorize_rows):
        """Sets the legend_colorize_rows of this LinePlusSingleStatProperties.


        :param legend_colorize_rows: The legend_colorize_rows of this LinePlusSingleStatProperties.
        :type legend_colorize_rows: bool
        """

        self._legend_colorize_rows = legend_colorize_rows

    @property
    def legend_hide(self):
        """Gets the legend_hide of this LinePlusSingleStatProperties.


        :return: The legend_hide of this LinePlusSingleStatProperties.
        :rtype: bool
        """
        return self._legend_hide

    @legend_hide.setter
    def legend_hide(self, legend_hide):
        """Sets the legend_hide of this LinePlusSingleStatProperties.


        :param legend_hide: The legend_hide of this LinePlusSingleStatProperties.
        :type legend_hide: bool
        """

        self._legend_hide = legend_hide

    @property
    def legend_opacity(self):
        """Gets the legend_opacity of this LinePlusSingleStatProperties.


        :return: The legend_opacity of this LinePlusSingleStatProperties.
        :rtype: float
        """
        return self._legend_opacity

    @legend_opacity.setter
    def legend_opacity(self, legend_opacity):
        """Sets the legend_opacity of this LinePlusSingleStatProperties.


        :param legend_opacity: The legend_opacity of this LinePlusSingleStatProperties.
        :type legend_opacity: float
        """

        self._legend_opacity = legend_opacity

    @property
    def legend_orientation_threshold(self):
        """Gets the legend_orientation_threshold of this LinePlusSingleStatProperties.


        :return: The legend_orientation_threshold of this LinePlusSingleStatProperties.
        :rtype: int
        """
        return self._legend_orientation_threshold

    @legend_orientation_threshold.setter
    def legend_orientation_threshold(self, legend_orientation_threshold):
        """Sets the legend_orientation_threshold of this LinePlusSingleStatProperties.


        :param legend_orientation_threshold: The legend_orientation_threshold of this LinePlusSingleStatProperties.
        :type legend_orientation_threshold: int
        """

        self._legend_orientation_threshold = legend_orientation_threshold

    @property
    def note(self):
        """Gets the note of this LinePlusSingleStatProperties.


        :return: The note of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this LinePlusSingleStatProperties.


        :param note: The note of this LinePlusSingleStatProperties.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def position(self):
        """Gets the position of this LinePlusSingleStatProperties.


        :return: The position of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this LinePlusSingleStatProperties.


        :param position: The position of this LinePlusSingleStatProperties.
        :type position: str
        """
        allowed_values = ["overlaid", "stacked"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def prefix(self):
        """Gets the prefix of this LinePlusSingleStatProperties.


        :return: The prefix of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this LinePlusSingleStatProperties.


        :param prefix: The prefix of this LinePlusSingleStatProperties.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def queries(self):
        """Gets the queries of this LinePlusSingleStatProperties.


        :return: The queries of this LinePlusSingleStatProperties.
        :rtype: List[DashboardQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this LinePlusSingleStatProperties.


        :param queries: The queries of this LinePlusSingleStatProperties.
        :type queries: List[DashboardQuery]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def shade_below(self):
        """Gets the shade_below of this LinePlusSingleStatProperties.


        :return: The shade_below of this LinePlusSingleStatProperties.
        :rtype: bool
        """
        return self._shade_below

    @shade_below.setter
    def shade_below(self, shade_below):
        """Sets the shade_below of this LinePlusSingleStatProperties.


        :param shade_below: The shade_below of this LinePlusSingleStatProperties.
        :type shade_below: bool
        """

        self._shade_below = shade_below

    @property
    def shape(self):
        """Gets the shape of this LinePlusSingleStatProperties.


        :return: The shape of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this LinePlusSingleStatProperties.


        :param shape: The shape of this LinePlusSingleStatProperties.
        :type shape: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def show_note_when_empty(self):
        """Gets the show_note_when_empty of this LinePlusSingleStatProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this LinePlusSingleStatProperties.
        :rtype: bool
        """
        return self._show_note_when_empty

    @show_note_when_empty.setter
    def show_note_when_empty(self, show_note_when_empty):
        """Sets the show_note_when_empty of this LinePlusSingleStatProperties.

        If true, will display note when empty

        :param show_note_when_empty: The show_note_when_empty of this LinePlusSingleStatProperties.
        :type show_note_when_empty: bool
        """
        if show_note_when_empty is None:
            raise ValueError("Invalid value for `show_note_when_empty`, must not be `None`")

        self._show_note_when_empty = show_note_when_empty

    @property
    def static_legend(self):
        """Gets the static_legend of this LinePlusSingleStatProperties.


        :return: The static_legend of this LinePlusSingleStatProperties.
        :rtype: StaticLegend
        """
        return self._static_legend

    @static_legend.setter
    def static_legend(self, static_legend):
        """Sets the static_legend of this LinePlusSingleStatProperties.


        :param static_legend: The static_legend of this LinePlusSingleStatProperties.
        :type static_legend: StaticLegend
        """

        self._static_legend = static_legend

    @property
    def suffix(self):
        """Gets the suffix of this LinePlusSingleStatProperties.


        :return: The suffix of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this LinePlusSingleStatProperties.


        :param suffix: The suffix of this LinePlusSingleStatProperties.
        :type suffix: str
        """
        if suffix is None:
            raise ValueError("Invalid value for `suffix`, must not be `None`")

        self._suffix = suffix

    @property
    def time_format(self):
        """Gets the time_format of this LinePlusSingleStatProperties.


        :return: The time_format of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this LinePlusSingleStatProperties.


        :param time_format: The time_format of this LinePlusSingleStatProperties.
        :type time_format: str
        """

        self._time_format = time_format

    @property
    def type(self):
        """Gets the type of this LinePlusSingleStatProperties.


        :return: The type of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LinePlusSingleStatProperties.


        :param type: The type of this LinePlusSingleStatProperties.
        :type type: str
        """
        allowed_values = ["line-plus-single-stat"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def x_column(self):
        """Gets the x_column of this LinePlusSingleStatProperties.


        :return: The x_column of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._x_column

    @x_column.setter
    def x_column(self, x_column):
        """Sets the x_column of this LinePlusSingleStatProperties.


        :param x_column: The x_column of this LinePlusSingleStatProperties.
        :type x_column: str
        """

        self._x_column = x_column

    @property
    def x_tick_start(self):
        """Gets the x_tick_start of this LinePlusSingleStatProperties.


        :return: The x_tick_start of this LinePlusSingleStatProperties.
        :rtype: float
        """
        return self._x_tick_start

    @x_tick_start.setter
    def x_tick_start(self, x_tick_start):
        """Sets the x_tick_start of this LinePlusSingleStatProperties.


        :param x_tick_start: The x_tick_start of this LinePlusSingleStatProperties.
        :type x_tick_start: float
        """

        self._x_tick_start = x_tick_start

    @property
    def x_tick_step(self):
        """Gets the x_tick_step of this LinePlusSingleStatProperties.


        :return: The x_tick_step of this LinePlusSingleStatProperties.
        :rtype: float
        """
        return self._x_tick_step

    @x_tick_step.setter
    def x_tick_step(self, x_tick_step):
        """Sets the x_tick_step of this LinePlusSingleStatProperties.


        :param x_tick_step: The x_tick_step of this LinePlusSingleStatProperties.
        :type x_tick_step: float
        """

        self._x_tick_step = x_tick_step

    @property
    def x_total_ticks(self):
        """Gets the x_total_ticks of this LinePlusSingleStatProperties.


        :return: The x_total_ticks of this LinePlusSingleStatProperties.
        :rtype: int
        """
        return self._x_total_ticks

    @x_total_ticks.setter
    def x_total_ticks(self, x_total_ticks):
        """Sets the x_total_ticks of this LinePlusSingleStatProperties.


        :param x_total_ticks: The x_total_ticks of this LinePlusSingleStatProperties.
        :type x_total_ticks: int
        """

        self._x_total_ticks = x_total_ticks

    @property
    def y_column(self):
        """Gets the y_column of this LinePlusSingleStatProperties.


        :return: The y_column of this LinePlusSingleStatProperties.
        :rtype: str
        """
        return self._y_column

    @y_column.setter
    def y_column(self, y_column):
        """Sets the y_column of this LinePlusSingleStatProperties.


        :param y_column: The y_column of this LinePlusSingleStatProperties.
        :type y_column: str
        """

        self._y_column = y_column

    @property
    def y_tick_start(self):
        """Gets the y_tick_start of this LinePlusSingleStatProperties.


        :return: The y_tick_start of this LinePlusSingleStatProperties.
        :rtype: float
        """
        return self._y_tick_start

    @y_tick_start.setter
    def y_tick_start(self, y_tick_start):
        """Sets the y_tick_start of this LinePlusSingleStatProperties.


        :param y_tick_start: The y_tick_start of this LinePlusSingleStatProperties.
        :type y_tick_start: float
        """

        self._y_tick_start = y_tick_start

    @property
    def y_tick_step(self):
        """Gets the y_tick_step of this LinePlusSingleStatProperties.


        :return: The y_tick_step of this LinePlusSingleStatProperties.
        :rtype: float
        """
        return self._y_tick_step

    @y_tick_step.setter
    def y_tick_step(self, y_tick_step):
        """Sets the y_tick_step of this LinePlusSingleStatProperties.


        :param y_tick_step: The y_tick_step of this LinePlusSingleStatProperties.
        :type y_tick_step: float
        """

        self._y_tick_step = y_tick_step

    @property
    def y_total_ticks(self):
        """Gets the y_total_ticks of this LinePlusSingleStatProperties.


        :return: The y_total_ticks of this LinePlusSingleStatProperties.
        :rtype: int
        """
        return self._y_total_ticks

    @y_total_ticks.setter
    def y_total_ticks(self, y_total_ticks):
        """Sets the y_total_ticks of this LinePlusSingleStatProperties.


        :param y_total_ticks: The y_total_ticks of this LinePlusSingleStatProperties.
        :type y_total_ticks: int
        """

        self._y_total_ticks = y_total_ticks
