# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.array_expression import ArrayExpression
from openapi_server.models.binary_expression import BinaryExpression
from openapi_server.models.boolean_literal import BooleanLiteral
from openapi_server.models.call_expression import CallExpression
from openapi_server.models.conditional_expression import ConditionalExpression
from openapi_server.models.date_time_literal import DateTimeLiteral
from openapi_server.models.dict_expression import DictExpression
from openapi_server.models.dict_item import DictItem
from openapi_server.models.duration import Duration
from openapi_server.models.duration_literal import DurationLiteral
from openapi_server.models.float_literal import FloatLiteral
from openapi_server.models.function_expression import FunctionExpression
from openapi_server.models.identifier import Identifier
from openapi_server.models.index_expression import IndexExpression
from openapi_server.models.integer_literal import IntegerLiteral
from openapi_server.models.logical_expression import LogicalExpression
from openapi_server.models.member_expression import MemberExpression
from openapi_server.models.model_property import ModelProperty
from openapi_server.models.node import Node
from openapi_server.models.object_expression import ObjectExpression
from openapi_server.models.paren_expression import ParenExpression
from openapi_server.models.pipe_expression import PipeExpression
from openapi_server.models.pipe_literal import PipeLiteral
from openapi_server.models.property_key import PropertyKey
from openapi_server.models.regexp_literal import RegexpLiteral
from openapi_server.models.string_literal import StringLiteral
from openapi_server.models.unary_expression import UnaryExpression
from openapi_server.models.unsigned_integer_literal import UnsignedIntegerLiteral
from openapi_server import util


class Expression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elements: List[DictItem]=None, type: str=None, body: Node=None, params: List[ModelProperty]=None, left: Expression=None, operator: str=None, right: Expression=None, arguments: List[Expression]=None, callee: Expression=None, alternate: Expression=None, consequent: Expression=None, test: Expression=None, object: Expression=None, _property: PropertyKey=None, array: Expression=None, index: Expression=None, properties: List[ModelProperty]=None, expression: Expression=None, argument: Expression=None, call: CallExpression=None, value: str=None, values: List[Duration]=None, name: str=None):
        """Expression - a model defined in OpenAPI

        :param elements: The elements of this Expression.
        :param type: The type of this Expression.
        :param body: The body of this Expression.
        :param params: The params of this Expression.
        :param left: The left of this Expression.
        :param operator: The operator of this Expression.
        :param right: The right of this Expression.
        :param arguments: The arguments of this Expression.
        :param callee: The callee of this Expression.
        :param alternate: The alternate of this Expression.
        :param consequent: The consequent of this Expression.
        :param test: The test of this Expression.
        :param object: The object of this Expression.
        :param _property: The _property of this Expression.
        :param array: The array of this Expression.
        :param index: The index of this Expression.
        :param properties: The properties of this Expression.
        :param expression: The expression of this Expression.
        :param argument: The argument of this Expression.
        :param call: The call of this Expression.
        :param value: The value of this Expression.
        :param values: The values of this Expression.
        :param name: The name of this Expression.
        """
        self.openapi_types = {
            'elements': List[DictItem],
            'type': str,
            'body': Node,
            'params': List[ModelProperty],
            'left': Expression,
            'operator': str,
            'right': Expression,
            'arguments': List[Expression],
            'callee': Expression,
            'alternate': Expression,
            'consequent': Expression,
            'test': Expression,
            'object': Expression,
            '_property': PropertyKey,
            'array': Expression,
            'index': Expression,
            'properties': List[ModelProperty],
            'expression': Expression,
            'argument': Expression,
            'call': CallExpression,
            'value': str,
            'values': List[Duration],
            'name': str
        }

        self.attribute_map = {
            'elements': 'elements',
            'type': 'type',
            'body': 'body',
            'params': 'params',
            'left': 'left',
            'operator': 'operator',
            'right': 'right',
            'arguments': 'arguments',
            'callee': 'callee',
            'alternate': 'alternate',
            'consequent': 'consequent',
            'test': 'test',
            'object': 'object',
            '_property': 'property',
            'array': 'array',
            'index': 'index',
            'properties': 'properties',
            'expression': 'expression',
            'argument': 'argument',
            'call': 'call',
            'value': 'value',
            'values': 'values',
            'name': 'name'
        }

        self._elements = elements
        self._type = type
        self._body = body
        self._params = params
        self._left = left
        self._operator = operator
        self._right = right
        self._arguments = arguments
        self._callee = callee
        self._alternate = alternate
        self._consequent = consequent
        self._test = test
        self._object = object
        self.__property = _property
        self._array = array
        self._index = index
        self._properties = properties
        self._expression = expression
        self._argument = argument
        self._call = call
        self._value = value
        self._values = values
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Expression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Expression of this Expression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elements(self):
        """Gets the elements of this Expression.

        Elements of the dictionary

        :return: The elements of this Expression.
        :rtype: List[DictItem]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this Expression.

        Elements of the dictionary

        :param elements: The elements of this Expression.
        :type elements: List[DictItem]
        """

        self._elements = elements

    @property
    def type(self):
        """Gets the type of this Expression.

        Type of AST node

        :return: The type of this Expression.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Expression.

        Type of AST node

        :param type: The type of this Expression.
        :type type: str
        """

        self._type = type

    @property
    def body(self):
        """Gets the body of this Expression.


        :return: The body of this Expression.
        :rtype: Node
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Expression.


        :param body: The body of this Expression.
        :type body: Node
        """

        self._body = body

    @property
    def params(self):
        """Gets the params of this Expression.

        Function parameters

        :return: The params of this Expression.
        :rtype: List[ModelProperty]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Expression.

        Function parameters

        :param params: The params of this Expression.
        :type params: List[ModelProperty]
        """

        self._params = params

    @property
    def left(self):
        """Gets the left of this Expression.


        :return: The left of this Expression.
        :rtype: Expression
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this Expression.


        :param left: The left of this Expression.
        :type left: Expression
        """

        self._left = left

    @property
    def operator(self):
        """Gets the operator of this Expression.


        :return: The operator of this Expression.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Expression.


        :param operator: The operator of this Expression.
        :type operator: str
        """

        self._operator = operator

    @property
    def right(self):
        """Gets the right of this Expression.


        :return: The right of this Expression.
        :rtype: Expression
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this Expression.


        :param right: The right of this Expression.
        :type right: Expression
        """

        self._right = right

    @property
    def arguments(self):
        """Gets the arguments of this Expression.

        Function arguments

        :return: The arguments of this Expression.
        :rtype: List[Expression]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this Expression.

        Function arguments

        :param arguments: The arguments of this Expression.
        :type arguments: List[Expression]
        """

        self._arguments = arguments

    @property
    def callee(self):
        """Gets the callee of this Expression.


        :return: The callee of this Expression.
        :rtype: Expression
        """
        return self._callee

    @callee.setter
    def callee(self, callee):
        """Sets the callee of this Expression.


        :param callee: The callee of this Expression.
        :type callee: Expression
        """

        self._callee = callee

    @property
    def alternate(self):
        """Gets the alternate of this Expression.


        :return: The alternate of this Expression.
        :rtype: Expression
        """
        return self._alternate

    @alternate.setter
    def alternate(self, alternate):
        """Sets the alternate of this Expression.


        :param alternate: The alternate of this Expression.
        :type alternate: Expression
        """

        self._alternate = alternate

    @property
    def consequent(self):
        """Gets the consequent of this Expression.


        :return: The consequent of this Expression.
        :rtype: Expression
        """
        return self._consequent

    @consequent.setter
    def consequent(self, consequent):
        """Sets the consequent of this Expression.


        :param consequent: The consequent of this Expression.
        :type consequent: Expression
        """

        self._consequent = consequent

    @property
    def test(self):
        """Gets the test of this Expression.


        :return: The test of this Expression.
        :rtype: Expression
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Expression.


        :param test: The test of this Expression.
        :type test: Expression
        """

        self._test = test

    @property
    def object(self):
        """Gets the object of this Expression.


        :return: The object of this Expression.
        :rtype: Expression
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Expression.


        :param object: The object of this Expression.
        :type object: Expression
        """

        self._object = object

    @property
    def _property(self):
        """Gets the _property of this Expression.


        :return: The _property of this Expression.
        :rtype: PropertyKey
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Expression.


        :param _property: The _property of this Expression.
        :type _property: PropertyKey
        """

        self.__property = _property

    @property
    def array(self):
        """Gets the array of this Expression.


        :return: The array of this Expression.
        :rtype: Expression
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this Expression.


        :param array: The array of this Expression.
        :type array: Expression
        """

        self._array = array

    @property
    def index(self):
        """Gets the index of this Expression.


        :return: The index of this Expression.
        :rtype: Expression
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Expression.


        :param index: The index of this Expression.
        :type index: Expression
        """

        self._index = index

    @property
    def properties(self):
        """Gets the properties of this Expression.

        Object properties

        :return: The properties of this Expression.
        :rtype: List[ModelProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Expression.

        Object properties

        :param properties: The properties of this Expression.
        :type properties: List[ModelProperty]
        """

        self._properties = properties

    @property
    def expression(self):
        """Gets the expression of this Expression.


        :return: The expression of this Expression.
        :rtype: Expression
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Expression.


        :param expression: The expression of this Expression.
        :type expression: Expression
        """

        self._expression = expression

    @property
    def argument(self):
        """Gets the argument of this Expression.


        :return: The argument of this Expression.
        :rtype: Expression
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """Sets the argument of this Expression.


        :param argument: The argument of this Expression.
        :type argument: Expression
        """

        self._argument = argument

    @property
    def call(self):
        """Gets the call of this Expression.


        :return: The call of this Expression.
        :rtype: CallExpression
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this Expression.


        :param call: The call of this Expression.
        :type call: CallExpression
        """

        self._call = call

    @property
    def value(self):
        """Gets the value of this Expression.


        :return: The value of this Expression.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Expression.


        :param value: The value of this Expression.
        :type value: str
        """

        self._value = value

    @property
    def values(self):
        """Gets the values of this Expression.

        Duration values

        :return: The values of this Expression.
        :rtype: List[Duration]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Expression.

        Duration values

        :param values: The values of this Expression.
        :type values: List[Duration]
        """

        self._values = values

    @property
    def name(self):
        """Gets the name of this Expression.


        :return: The name of this Expression.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Expression.


        :param name: The name of this Expression.
        :type name: str
        """

        self._name = name
