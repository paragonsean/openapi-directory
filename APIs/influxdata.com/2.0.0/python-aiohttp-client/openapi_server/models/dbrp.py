# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server import util


class DBRP(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_id: str=None, database: str=None, default: bool=None, id: str=None, links: Links=None, org: str=None, org_id: str=None, retention_policy: str=None):
        """DBRP - a model defined in OpenAPI

        :param bucket_id: The bucket_id of this DBRP.
        :param database: The database of this DBRP.
        :param default: The default of this DBRP.
        :param id: The id of this DBRP.
        :param links: The links of this DBRP.
        :param org: The org of this DBRP.
        :param org_id: The org_id of this DBRP.
        :param retention_policy: The retention_policy of this DBRP.
        """
        self.openapi_types = {
            'bucket_id': str,
            'database': str,
            'default': bool,
            'id': str,
            'links': Links,
            'org': str,
            'org_id': str,
            'retention_policy': str
        }

        self.attribute_map = {
            'bucket_id': 'bucketID',
            'database': 'database',
            'default': 'default',
            'id': 'id',
            'links': 'links',
            'org': 'org',
            'org_id': 'orgID',
            'retention_policy': 'retention_policy'
        }

        self._bucket_id = bucket_id
        self._database = database
        self._default = default
        self._id = id
        self._links = links
        self._org = org
        self._org_id = org_id
        self._retention_policy = retention_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DBRP':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DBRP of this DBRP.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_id(self):
        """Gets the bucket_id of this DBRP.

        the bucket ID used as target for the translation.

        :return: The bucket_id of this DBRP.
        :rtype: str
        """
        return self._bucket_id

    @bucket_id.setter
    def bucket_id(self, bucket_id):
        """Sets the bucket_id of this DBRP.

        the bucket ID used as target for the translation.

        :param bucket_id: The bucket_id of this DBRP.
        :type bucket_id: str
        """

        self._bucket_id = bucket_id

    @property
    def database(self):
        """Gets the database of this DBRP.

        InfluxDB v1 database

        :return: The database of this DBRP.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DBRP.

        InfluxDB v1 database

        :param database: The database of this DBRP.
        :type database: str
        """

        self._database = database

    @property
    def default(self):
        """Gets the default of this DBRP.

        Specify if this mapping represents the default retention policy for the database specificed.

        :return: The default of this DBRP.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this DBRP.

        Specify if this mapping represents the default retention policy for the database specificed.

        :param default: The default of this DBRP.
        :type default: bool
        """

        self._default = default

    @property
    def id(self):
        """Gets the id of this DBRP.

        the mapping identifier

        :return: The id of this DBRP.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DBRP.

        the mapping identifier

        :param id: The id of this DBRP.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this DBRP.


        :return: The links of this DBRP.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DBRP.


        :param links: The links of this DBRP.
        :type links: Links
        """

        self._links = links

    @property
    def org(self):
        """Gets the org of this DBRP.

        the organization that owns this mapping.

        :return: The org of this DBRP.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this DBRP.

        the organization that owns this mapping.

        :param org: The org of this DBRP.
        :type org: str
        """

        self._org = org

    @property
    def org_id(self):
        """Gets the org_id of this DBRP.

        the organization ID that owns this mapping.

        :return: The org_id of this DBRP.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this DBRP.

        the organization ID that owns this mapping.

        :param org_id: The org_id of this DBRP.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def retention_policy(self):
        """Gets the retention_policy of this DBRP.

        InfluxDB v1 retention policy

        :return: The retention_policy of this DBRP.
        :rtype: str
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this DBRP.

        InfluxDB v1 retention policy

        :param retention_policy: The retention_policy of this DBRP.
        :type retention_policy: str
        """

        self._retention_policy = retention_policy
