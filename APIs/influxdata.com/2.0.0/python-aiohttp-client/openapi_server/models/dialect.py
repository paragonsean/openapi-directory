# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dialect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: list[str]=None, comment_prefix: str='#', date_time_format: str='RFC3339', delimiter: str=',', header: bool=True):
        """Dialect - a model defined in OpenAPI

        :param annotations: The annotations of this Dialect.
        :param comment_prefix: The comment_prefix of this Dialect.
        :param date_time_format: The date_time_format of this Dialect.
        :param delimiter: The delimiter of this Dialect.
        :param header: The header of this Dialect.
        """
        self.openapi_types = {
            'annotations': list[str],
            'comment_prefix': str,
            'date_time_format': str,
            'delimiter': str,
            'header': bool
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'comment_prefix': 'commentPrefix',
            'date_time_format': 'dateTimeFormat',
            'delimiter': 'delimiter',
            'header': 'header'
        }

        self._annotations = annotations
        self._comment_prefix = comment_prefix
        self._date_time_format = date_time_format
        self._delimiter = delimiter
        self._header = header

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dialect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dialect of this Dialect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Dialect.

        https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns

        :return: The annotations of this Dialect.
        :rtype: list[str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Dialect.

        https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns

        :param annotations: The annotations of this Dialect.
        :type annotations: list[str]
        """
        allowed_values = ["group", "datatype", "default"]  # noqa: E501
        if not set(annotations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `annotations` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(annotations) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._annotations = annotations

    @property
    def comment_prefix(self):
        """Gets the comment_prefix of this Dialect.

        Character prefixed to comment strings

        :return: The comment_prefix of this Dialect.
        :rtype: str
        """
        return self._comment_prefix

    @comment_prefix.setter
    def comment_prefix(self, comment_prefix):
        """Sets the comment_prefix of this Dialect.

        Character prefixed to comment strings

        :param comment_prefix: The comment_prefix of this Dialect.
        :type comment_prefix: str
        """
        if comment_prefix is not None and len(comment_prefix) > 1:
            raise ValueError("Invalid value for `comment_prefix`, length must be less than or equal to `1`")
        if comment_prefix is not None and len(comment_prefix) < 0:
            raise ValueError("Invalid value for `comment_prefix`, length must be greater than or equal to `0`")

        self._comment_prefix = comment_prefix

    @property
    def date_time_format(self):
        """Gets the date_time_format of this Dialect.

        Format of timestamps

        :return: The date_time_format of this Dialect.
        :rtype: str
        """
        return self._date_time_format

    @date_time_format.setter
    def date_time_format(self, date_time_format):
        """Sets the date_time_format of this Dialect.

        Format of timestamps

        :param date_time_format: The date_time_format of this Dialect.
        :type date_time_format: str
        """
        allowed_values = ["RFC3339", "RFC3339Nano"]  # noqa: E501
        if date_time_format not in allowed_values:
            raise ValueError(
                "Invalid value for `date_time_format` ({0}), must be one of {1}"
                .format(date_time_format, allowed_values)
            )

        self._date_time_format = date_time_format

    @property
    def delimiter(self):
        """Gets the delimiter of this Dialect.

        Separator between cells; the default is ,

        :return: The delimiter of this Dialect.
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this Dialect.

        Separator between cells; the default is ,

        :param delimiter: The delimiter of this Dialect.
        :type delimiter: str
        """
        if delimiter is not None and len(delimiter) > 1:
            raise ValueError("Invalid value for `delimiter`, length must be less than or equal to `1`")
        if delimiter is not None and len(delimiter) < 1:
            raise ValueError("Invalid value for `delimiter`, length must be greater than or equal to `1`")

        self._delimiter = delimiter

    @property
    def header(self):
        """Gets the header of this Dialect.

        If true, the results will contain a header row

        :return: The header of this Dialect.
        :rtype: bool
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Dialect.

        If true, the results will contain a header row

        :param header: The header of this Dialect.
        :type header: bool
        """

        self._header = header
