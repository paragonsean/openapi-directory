# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stack_events_inner_resources_inner_links import StackEventsInnerResourcesInnerLinks
from openapi_server.models.view import View
from openapi_server import util


class Views(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: StackEventsInnerResourcesInnerLinks=None, views: List[View]=None):
        """Views - a model defined in OpenAPI

        :param links: The links of this Views.
        :param views: The views of this Views.
        """
        self.openapi_types = {
            'links': StackEventsInnerResourcesInnerLinks,
            'views': List[View]
        }

        self.attribute_map = {
            'links': 'links',
            'views': 'views'
        }

        self._links = links
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Views':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Views of this Views.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Views.


        :return: The links of this Views.
        :rtype: StackEventsInnerResourcesInnerLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Views.


        :param links: The links of this Views.
        :type links: StackEventsInnerResourcesInnerLinks
        """

        self._links = links

    @property
    def views(self):
        """Gets the views of this Views.


        :return: The views of this Views.
        :rtype: List[View]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this Views.


        :param views: The views of this Views.
        :type views: List[View]
        """

        self._views = views
