# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.view_links import ViewLinks
from openapi_server.models.view_properties import ViewProperties
from openapi_server import util


class View(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, links: ViewLinks=None, name: str=None, properties: ViewProperties=None):
        """View - a model defined in OpenAPI

        :param id: The id of this View.
        :param links: The links of this View.
        :param name: The name of this View.
        :param properties: The properties of this View.
        """
        self.openapi_types = {
            'id': str,
            'links': ViewLinks,
            'name': str,
            'properties': ViewProperties
        }

        self.attribute_map = {
            'id': 'id',
            'links': 'links',
            'name': 'name',
            'properties': 'properties'
        }

        self._id = id
        self._links = links
        self._name = name
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'View':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The View of this View.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this View.


        :return: The id of this View.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this View.


        :param id: The id of this View.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this View.


        :return: The links of this View.
        :rtype: ViewLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this View.


        :param links: The links of this View.
        :type links: ViewLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this View.


        :return: The name of this View.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this View.


        :param name: The name of this View.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this View.


        :return: The properties of this View.
        :rtype: ViewProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this View.


        :param properties: The properties of this View.
        :type properties: ViewProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties
