# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StaticLegend(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colorize_rows: bool=None, height_ratio: float=None, hide: bool=None, opacity: float=None, orientation_threshold: int=None, value_axis: str=None, width_ratio: float=None):
        """StaticLegend - a model defined in OpenAPI

        :param colorize_rows: The colorize_rows of this StaticLegend.
        :param height_ratio: The height_ratio of this StaticLegend.
        :param hide: The hide of this StaticLegend.
        :param opacity: The opacity of this StaticLegend.
        :param orientation_threshold: The orientation_threshold of this StaticLegend.
        :param value_axis: The value_axis of this StaticLegend.
        :param width_ratio: The width_ratio of this StaticLegend.
        """
        self.openapi_types = {
            'colorize_rows': bool,
            'height_ratio': float,
            'hide': bool,
            'opacity': float,
            'orientation_threshold': int,
            'value_axis': str,
            'width_ratio': float
        }

        self.attribute_map = {
            'colorize_rows': 'colorizeRows',
            'height_ratio': 'heightRatio',
            'hide': 'hide',
            'opacity': 'opacity',
            'orientation_threshold': 'orientationThreshold',
            'value_axis': 'valueAxis',
            'width_ratio': 'widthRatio'
        }

        self._colorize_rows = colorize_rows
        self._height_ratio = height_ratio
        self._hide = hide
        self._opacity = opacity
        self._orientation_threshold = orientation_threshold
        self._value_axis = value_axis
        self._width_ratio = width_ratio

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StaticLegend':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StaticLegend of this StaticLegend.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colorize_rows(self):
        """Gets the colorize_rows of this StaticLegend.


        :return: The colorize_rows of this StaticLegend.
        :rtype: bool
        """
        return self._colorize_rows

    @colorize_rows.setter
    def colorize_rows(self, colorize_rows):
        """Sets the colorize_rows of this StaticLegend.


        :param colorize_rows: The colorize_rows of this StaticLegend.
        :type colorize_rows: bool
        """

        self._colorize_rows = colorize_rows

    @property
    def height_ratio(self):
        """Gets the height_ratio of this StaticLegend.


        :return: The height_ratio of this StaticLegend.
        :rtype: float
        """
        return self._height_ratio

    @height_ratio.setter
    def height_ratio(self, height_ratio):
        """Sets the height_ratio of this StaticLegend.


        :param height_ratio: The height_ratio of this StaticLegend.
        :type height_ratio: float
        """

        self._height_ratio = height_ratio

    @property
    def hide(self):
        """Gets the hide of this StaticLegend.


        :return: The hide of this StaticLegend.
        :rtype: bool
        """
        return self._hide

    @hide.setter
    def hide(self, hide):
        """Sets the hide of this StaticLegend.


        :param hide: The hide of this StaticLegend.
        :type hide: bool
        """

        self._hide = hide

    @property
    def opacity(self):
        """Gets the opacity of this StaticLegend.


        :return: The opacity of this StaticLegend.
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this StaticLegend.


        :param opacity: The opacity of this StaticLegend.
        :type opacity: float
        """

        self._opacity = opacity

    @property
    def orientation_threshold(self):
        """Gets the orientation_threshold of this StaticLegend.


        :return: The orientation_threshold of this StaticLegend.
        :rtype: int
        """
        return self._orientation_threshold

    @orientation_threshold.setter
    def orientation_threshold(self, orientation_threshold):
        """Sets the orientation_threshold of this StaticLegend.


        :param orientation_threshold: The orientation_threshold of this StaticLegend.
        :type orientation_threshold: int
        """

        self._orientation_threshold = orientation_threshold

    @property
    def value_axis(self):
        """Gets the value_axis of this StaticLegend.


        :return: The value_axis of this StaticLegend.
        :rtype: str
        """
        return self._value_axis

    @value_axis.setter
    def value_axis(self, value_axis):
        """Sets the value_axis of this StaticLegend.


        :param value_axis: The value_axis of this StaticLegend.
        :type value_axis: str
        """

        self._value_axis = value_axis

    @property
    def width_ratio(self):
        """Gets the width_ratio of this StaticLegend.


        :return: The width_ratio of this StaticLegend.
        :rtype: float
        """
        return self._width_ratio

    @width_ratio.setter
    def width_ratio(self, width_ratio):
        """Sets the width_ratio of this StaticLegend.


        :param width_ratio: The width_ratio of this StaticLegend.
        :type width_ratio: float
        """

        self._width_ratio = width_ratio
