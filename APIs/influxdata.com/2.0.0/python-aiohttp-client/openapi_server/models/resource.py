# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Resource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, org: str=None, org_id: str=None, type: str=None):
        """Resource - a model defined in OpenAPI

        :param id: The id of this Resource.
        :param name: The name of this Resource.
        :param org: The org of this Resource.
        :param org_id: The org_id of this Resource.
        :param type: The type of this Resource.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'org': str,
            'org_id': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'org': 'org',
            'org_id': 'orgID',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._org = org
        self._org_id = org_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resource of this Resource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Resource.

        If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.

        :return: The id of this Resource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Resource.

        If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.

        :param id: The id of this Resource.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Resource.

        Optional name of the resource if the resource has a name field.

        :return: The name of this Resource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Resource.

        Optional name of the resource if the resource has a name field.

        :param name: The name of this Resource.
        :type name: str
        """

        self._name = name

    @property
    def org(self):
        """Gets the org of this Resource.

        Optional name of the organization of the organization with orgID.

        :return: The org of this Resource.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Resource.

        Optional name of the organization of the organization with orgID.

        :param org: The org of this Resource.
        :type org: str
        """

        self._org = org

    @property
    def org_id(self):
        """Gets the org_id of this Resource.

        If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.

        :return: The org_id of this Resource.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Resource.

        If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.

        :param org_id: The org_id of this Resource.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def type(self):
        """Gets the type of this Resource.


        :return: The type of this Resource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Resource.


        :param type: The type of this Resource.
        :type type: str
        """
        allowed_values = ["authorizations", "buckets", "dashboards", "orgs", "sources", "tasks", "telegrafs", "users", "variables", "scrapers", "secrets", "labels", "views", "documents", "notificationRules", "notificationEndpoints", "checks", "dbrp", "notebooks"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
