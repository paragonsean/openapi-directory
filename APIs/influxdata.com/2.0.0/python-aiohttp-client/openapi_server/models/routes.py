# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.routes_external import RoutesExternal
from openapi_server.models.routes_query import RoutesQuery
from openapi_server.models.routes_system import RoutesSystem
from openapi_server import util


class Routes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorizations: str=None, buckets: str=None, dashboards: str=None, external: RoutesExternal=None, flags: str=None, me: str=None, orgs: str=None, query: RoutesQuery=None, setup: str=None, signin: str=None, signout: str=None, sources: str=None, system: RoutesSystem=None, tasks: str=None, telegrafs: str=None, users: str=None, variables: str=None, write: str=None):
        """Routes - a model defined in OpenAPI

        :param authorizations: The authorizations of this Routes.
        :param buckets: The buckets of this Routes.
        :param dashboards: The dashboards of this Routes.
        :param external: The external of this Routes.
        :param flags: The flags of this Routes.
        :param me: The me of this Routes.
        :param orgs: The orgs of this Routes.
        :param query: The query of this Routes.
        :param setup: The setup of this Routes.
        :param signin: The signin of this Routes.
        :param signout: The signout of this Routes.
        :param sources: The sources of this Routes.
        :param system: The system of this Routes.
        :param tasks: The tasks of this Routes.
        :param telegrafs: The telegrafs of this Routes.
        :param users: The users of this Routes.
        :param variables: The variables of this Routes.
        :param write: The write of this Routes.
        """
        self.openapi_types = {
            'authorizations': str,
            'buckets': str,
            'dashboards': str,
            'external': RoutesExternal,
            'flags': str,
            'me': str,
            'orgs': str,
            'query': RoutesQuery,
            'setup': str,
            'signin': str,
            'signout': str,
            'sources': str,
            'system': RoutesSystem,
            'tasks': str,
            'telegrafs': str,
            'users': str,
            'variables': str,
            'write': str
        }

        self.attribute_map = {
            'authorizations': 'authorizations',
            'buckets': 'buckets',
            'dashboards': 'dashboards',
            'external': 'external',
            'flags': 'flags',
            'me': 'me',
            'orgs': 'orgs',
            'query': 'query',
            'setup': 'setup',
            'signin': 'signin',
            'signout': 'signout',
            'sources': 'sources',
            'system': 'system',
            'tasks': 'tasks',
            'telegrafs': 'telegrafs',
            'users': 'users',
            'variables': 'variables',
            'write': 'write'
        }

        self._authorizations = authorizations
        self._buckets = buckets
        self._dashboards = dashboards
        self._external = external
        self._flags = flags
        self._me = me
        self._orgs = orgs
        self._query = query
        self._setup = setup
        self._signin = signin
        self._signout = signout
        self._sources = sources
        self._system = system
        self._tasks = tasks
        self._telegrafs = telegrafs
        self._users = users
        self._variables = variables
        self._write = write

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Routes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Routes of this Routes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorizations(self):
        """Gets the authorizations of this Routes.


        :return: The authorizations of this Routes.
        :rtype: str
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this Routes.


        :param authorizations: The authorizations of this Routes.
        :type authorizations: str
        """

        self._authorizations = authorizations

    @property
    def buckets(self):
        """Gets the buckets of this Routes.


        :return: The buckets of this Routes.
        :rtype: str
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this Routes.


        :param buckets: The buckets of this Routes.
        :type buckets: str
        """

        self._buckets = buckets

    @property
    def dashboards(self):
        """Gets the dashboards of this Routes.


        :return: The dashboards of this Routes.
        :rtype: str
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this Routes.


        :param dashboards: The dashboards of this Routes.
        :type dashboards: str
        """

        self._dashboards = dashboards

    @property
    def external(self):
        """Gets the external of this Routes.


        :return: The external of this Routes.
        :rtype: RoutesExternal
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this Routes.


        :param external: The external of this Routes.
        :type external: RoutesExternal
        """

        self._external = external

    @property
    def flags(self):
        """Gets the flags of this Routes.


        :return: The flags of this Routes.
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Routes.


        :param flags: The flags of this Routes.
        :type flags: str
        """

        self._flags = flags

    @property
    def me(self):
        """Gets the me of this Routes.


        :return: The me of this Routes.
        :rtype: str
        """
        return self._me

    @me.setter
    def me(self, me):
        """Sets the me of this Routes.


        :param me: The me of this Routes.
        :type me: str
        """

        self._me = me

    @property
    def orgs(self):
        """Gets the orgs of this Routes.


        :return: The orgs of this Routes.
        :rtype: str
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this Routes.


        :param orgs: The orgs of this Routes.
        :type orgs: str
        """

        self._orgs = orgs

    @property
    def query(self):
        """Gets the query of this Routes.


        :return: The query of this Routes.
        :rtype: RoutesQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Routes.


        :param query: The query of this Routes.
        :type query: RoutesQuery
        """

        self._query = query

    @property
    def setup(self):
        """Gets the setup of this Routes.


        :return: The setup of this Routes.
        :rtype: str
        """
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Sets the setup of this Routes.


        :param setup: The setup of this Routes.
        :type setup: str
        """

        self._setup = setup

    @property
    def signin(self):
        """Gets the signin of this Routes.


        :return: The signin of this Routes.
        :rtype: str
        """
        return self._signin

    @signin.setter
    def signin(self, signin):
        """Sets the signin of this Routes.


        :param signin: The signin of this Routes.
        :type signin: str
        """

        self._signin = signin

    @property
    def signout(self):
        """Gets the signout of this Routes.


        :return: The signout of this Routes.
        :rtype: str
        """
        return self._signout

    @signout.setter
    def signout(self, signout):
        """Sets the signout of this Routes.


        :param signout: The signout of this Routes.
        :type signout: str
        """

        self._signout = signout

    @property
    def sources(self):
        """Gets the sources of this Routes.


        :return: The sources of this Routes.
        :rtype: str
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Routes.


        :param sources: The sources of this Routes.
        :type sources: str
        """

        self._sources = sources

    @property
    def system(self):
        """Gets the system of this Routes.


        :return: The system of this Routes.
        :rtype: RoutesSystem
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Routes.


        :param system: The system of this Routes.
        :type system: RoutesSystem
        """

        self._system = system

    @property
    def tasks(self):
        """Gets the tasks of this Routes.


        :return: The tasks of this Routes.
        :rtype: str
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this Routes.


        :param tasks: The tasks of this Routes.
        :type tasks: str
        """

        self._tasks = tasks

    @property
    def telegrafs(self):
        """Gets the telegrafs of this Routes.


        :return: The telegrafs of this Routes.
        :rtype: str
        """
        return self._telegrafs

    @telegrafs.setter
    def telegrafs(self, telegrafs):
        """Sets the telegrafs of this Routes.


        :param telegrafs: The telegrafs of this Routes.
        :type telegrafs: str
        """

        self._telegrafs = telegrafs

    @property
    def users(self):
        """Gets the users of this Routes.


        :return: The users of this Routes.
        :rtype: str
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Routes.


        :param users: The users of this Routes.
        :type users: str
        """

        self._users = users

    @property
    def variables(self):
        """Gets the variables of this Routes.


        :return: The variables of this Routes.
        :rtype: str
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this Routes.


        :param variables: The variables of this Routes.
        :type variables: str
        """

        self._variables = variables

    @property
    def write(self):
        """Gets the write of this Routes.


        :return: The write of this Routes.
        :rtype: str
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this Routes.


        :param write: The write of this Routes.
        :type write: str
        """

        self._write = write
