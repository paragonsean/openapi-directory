# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DashboardColor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hex: str=None, id: str=None, name: str=None, type: str=None, value: float=None):
        """DashboardColor - a model defined in OpenAPI

        :param hex: The hex of this DashboardColor.
        :param id: The id of this DashboardColor.
        :param name: The name of this DashboardColor.
        :param type: The type of this DashboardColor.
        :param value: The value of this DashboardColor.
        """
        self.openapi_types = {
            'hex': str,
            'id': str,
            'name': str,
            'type': str,
            'value': float
        }

        self.attribute_map = {
            'hex': 'hex',
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'value': 'value'
        }

        self._hex = hex
        self._id = id
        self._name = name
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardColor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardColor of this DashboardColor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hex(self):
        """Gets the hex of this DashboardColor.

        The hex number of the color

        :return: The hex of this DashboardColor.
        :rtype: str
        """
        return self._hex

    @hex.setter
    def hex(self, hex):
        """Sets the hex of this DashboardColor.

        The hex number of the color

        :param hex: The hex of this DashboardColor.
        :type hex: str
        """
        if hex is None:
            raise ValueError("Invalid value for `hex`, must not be `None`")
        if hex is not None and len(hex) > 7:
            raise ValueError("Invalid value for `hex`, length must be less than or equal to `7`")
        if hex is not None and len(hex) < 7:
            raise ValueError("Invalid value for `hex`, length must be greater than or equal to `7`")

        self._hex = hex

    @property
    def id(self):
        """Gets the id of this DashboardColor.

        The unique ID of the view color.

        :return: The id of this DashboardColor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardColor.

        The unique ID of the view color.

        :param id: The id of this DashboardColor.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this DashboardColor.

        The user-facing name of the hex color.

        :return: The name of this DashboardColor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardColor.

        The user-facing name of the hex color.

        :param name: The name of this DashboardColor.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this DashboardColor.

        Type is how the color is used.

        :return: The type of this DashboardColor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DashboardColor.

        Type is how the color is used.

        :param type: The type of this DashboardColor.
        :type type: str
        """
        allowed_values = ["min", "max", "threshold", "scale", "text", "background"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this DashboardColor.

        The data value mapped to this color.

        :return: The value of this DashboardColor.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DashboardColor.

        The data value mapped to this color.

        :param value: The value of this DashboardColor.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
