# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_base_links import CheckBaseLinks
from openapi_server.models.check_status_level import CheckStatusLevel
from openapi_server.models.custom_check import CustomCheck
from openapi_server.models.dashboard_query import DashboardQuery
from openapi_server.models.deadman_check import DeadmanCheck
from openapi_server.models.deadman_check_all_of_tags import DeadmanCheckAllOfTags
from openapi_server.models.label import Label
from openapi_server.models.task_status_type import TaskStatusType
from openapi_server.models.threshold import Threshold
from openapi_server.models.threshold_check import ThresholdCheck
from openapi_server import util


class CheckDiscriminator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, id: str=None, labels: List[Label]=None, last_run_error: str=None, last_run_status: str=None, latest_completed: datetime=None, links: CheckBaseLinks=None, name: str=None, org_id: str=None, owner_id: str=None, query: DashboardQuery=None, status: TaskStatusType=None, task_id: str=None, updated_at: datetime=None, every: str=None, level: CheckStatusLevel=None, offset: str=None, report_zero: bool=None, stale_time: str=None, status_message_template: str=None, tags: List[DeadmanCheckAllOfTags]=None, time_since: str=None, type: str=None, thresholds: List[Threshold]=None):
        """CheckDiscriminator - a model defined in OpenAPI

        :param created_at: The created_at of this CheckDiscriminator.
        :param description: The description of this CheckDiscriminator.
        :param id: The id of this CheckDiscriminator.
        :param labels: The labels of this CheckDiscriminator.
        :param last_run_error: The last_run_error of this CheckDiscriminator.
        :param last_run_status: The last_run_status of this CheckDiscriminator.
        :param latest_completed: The latest_completed of this CheckDiscriminator.
        :param links: The links of this CheckDiscriminator.
        :param name: The name of this CheckDiscriminator.
        :param org_id: The org_id of this CheckDiscriminator.
        :param owner_id: The owner_id of this CheckDiscriminator.
        :param query: The query of this CheckDiscriminator.
        :param status: The status of this CheckDiscriminator.
        :param task_id: The task_id of this CheckDiscriminator.
        :param updated_at: The updated_at of this CheckDiscriminator.
        :param every: The every of this CheckDiscriminator.
        :param level: The level of this CheckDiscriminator.
        :param offset: The offset of this CheckDiscriminator.
        :param report_zero: The report_zero of this CheckDiscriminator.
        :param stale_time: The stale_time of this CheckDiscriminator.
        :param status_message_template: The status_message_template of this CheckDiscriminator.
        :param tags: The tags of this CheckDiscriminator.
        :param time_since: The time_since of this CheckDiscriminator.
        :param type: The type of this CheckDiscriminator.
        :param thresholds: The thresholds of this CheckDiscriminator.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'id': str,
            'labels': List[Label],
            'last_run_error': str,
            'last_run_status': str,
            'latest_completed': datetime,
            'links': CheckBaseLinks,
            'name': str,
            'org_id': str,
            'owner_id': str,
            'query': DashboardQuery,
            'status': TaskStatusType,
            'task_id': str,
            'updated_at': datetime,
            'every': str,
            'level': CheckStatusLevel,
            'offset': str,
            'report_zero': bool,
            'stale_time': str,
            'status_message_template': str,
            'tags': List[DeadmanCheckAllOfTags],
            'time_since': str,
            'type': str,
            'thresholds': List[Threshold]
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'description': 'description',
            'id': 'id',
            'labels': 'labels',
            'last_run_error': 'lastRunError',
            'last_run_status': 'lastRunStatus',
            'latest_completed': 'latestCompleted',
            'links': 'links',
            'name': 'name',
            'org_id': 'orgID',
            'owner_id': 'ownerID',
            'query': 'query',
            'status': 'status',
            'task_id': 'taskID',
            'updated_at': 'updatedAt',
            'every': 'every',
            'level': 'level',
            'offset': 'offset',
            'report_zero': 'reportZero',
            'stale_time': 'staleTime',
            'status_message_template': 'statusMessageTemplate',
            'tags': 'tags',
            'time_since': 'timeSince',
            'type': 'type',
            'thresholds': 'thresholds'
        }

        self._created_at = created_at
        self._description = description
        self._id = id
        self._labels = labels
        self._last_run_error = last_run_error
        self._last_run_status = last_run_status
        self._latest_completed = latest_completed
        self._links = links
        self._name = name
        self._org_id = org_id
        self._owner_id = owner_id
        self._query = query
        self._status = status
        self._task_id = task_id
        self._updated_at = updated_at
        self._every = every
        self._level = level
        self._offset = offset
        self._report_zero = report_zero
        self._stale_time = stale_time
        self._status_message_template = status_message_template
        self._tags = tags
        self._time_since = time_since
        self._type = type
        self._thresholds = thresholds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDiscriminator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckDiscriminator of this CheckDiscriminator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this CheckDiscriminator.


        :return: The created_at of this CheckDiscriminator.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CheckDiscriminator.


        :param created_at: The created_at of this CheckDiscriminator.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this CheckDiscriminator.

        An optional description of the check.

        :return: The description of this CheckDiscriminator.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CheckDiscriminator.

        An optional description of the check.

        :param description: The description of this CheckDiscriminator.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this CheckDiscriminator.


        :return: The id of this CheckDiscriminator.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckDiscriminator.


        :param id: The id of this CheckDiscriminator.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this CheckDiscriminator.


        :return: The labels of this CheckDiscriminator.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CheckDiscriminator.


        :param labels: The labels of this CheckDiscriminator.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def last_run_error(self):
        """Gets the last_run_error of this CheckDiscriminator.


        :return: The last_run_error of this CheckDiscriminator.
        :rtype: str
        """
        return self._last_run_error

    @last_run_error.setter
    def last_run_error(self, last_run_error):
        """Sets the last_run_error of this CheckDiscriminator.


        :param last_run_error: The last_run_error of this CheckDiscriminator.
        :type last_run_error: str
        """

        self._last_run_error = last_run_error

    @property
    def last_run_status(self):
        """Gets the last_run_status of this CheckDiscriminator.


        :return: The last_run_status of this CheckDiscriminator.
        :rtype: str
        """
        return self._last_run_status

    @last_run_status.setter
    def last_run_status(self, last_run_status):
        """Sets the last_run_status of this CheckDiscriminator.


        :param last_run_status: The last_run_status of this CheckDiscriminator.
        :type last_run_status: str
        """
        allowed_values = ["failed", "success", "canceled"]  # noqa: E501
        if last_run_status not in allowed_values:
            raise ValueError(
                "Invalid value for `last_run_status` ({0}), must be one of {1}"
                .format(last_run_status, allowed_values)
            )

        self._last_run_status = last_run_status

    @property
    def latest_completed(self):
        """Gets the latest_completed of this CheckDiscriminator.

        Timestamp of latest scheduled, completed run, RFC3339.

        :return: The latest_completed of this CheckDiscriminator.
        :rtype: datetime
        """
        return self._latest_completed

    @latest_completed.setter
    def latest_completed(self, latest_completed):
        """Sets the latest_completed of this CheckDiscriminator.

        Timestamp of latest scheduled, completed run, RFC3339.

        :param latest_completed: The latest_completed of this CheckDiscriminator.
        :type latest_completed: datetime
        """

        self._latest_completed = latest_completed

    @property
    def links(self):
        """Gets the links of this CheckDiscriminator.


        :return: The links of this CheckDiscriminator.
        :rtype: CheckBaseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CheckDiscriminator.


        :param links: The links of this CheckDiscriminator.
        :type links: CheckBaseLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this CheckDiscriminator.


        :return: The name of this CheckDiscriminator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CheckDiscriminator.


        :param name: The name of this CheckDiscriminator.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this CheckDiscriminator.

        The ID of the organization that owns this check.

        :return: The org_id of this CheckDiscriminator.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CheckDiscriminator.

        The ID of the organization that owns this check.

        :param org_id: The org_id of this CheckDiscriminator.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def owner_id(self):
        """Gets the owner_id of this CheckDiscriminator.

        The ID of creator used to create this check.

        :return: The owner_id of this CheckDiscriminator.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this CheckDiscriminator.

        The ID of creator used to create this check.

        :param owner_id: The owner_id of this CheckDiscriminator.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def query(self):
        """Gets the query of this CheckDiscriminator.


        :return: The query of this CheckDiscriminator.
        :rtype: DashboardQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this CheckDiscriminator.


        :param query: The query of this CheckDiscriminator.
        :type query: DashboardQuery
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def status(self):
        """Gets the status of this CheckDiscriminator.


        :return: The status of this CheckDiscriminator.
        :rtype: TaskStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckDiscriminator.


        :param status: The status of this CheckDiscriminator.
        :type status: TaskStatusType
        """

        self._status = status

    @property
    def task_id(self):
        """Gets the task_id of this CheckDiscriminator.

        The ID of the task associated with this check.

        :return: The task_id of this CheckDiscriminator.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this CheckDiscriminator.

        The ID of the task associated with this check.

        :param task_id: The task_id of this CheckDiscriminator.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def updated_at(self):
        """Gets the updated_at of this CheckDiscriminator.


        :return: The updated_at of this CheckDiscriminator.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CheckDiscriminator.


        :param updated_at: The updated_at of this CheckDiscriminator.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def every(self):
        """Gets the every of this CheckDiscriminator.

        Check repetition interval.

        :return: The every of this CheckDiscriminator.
        :rtype: str
        """
        return self._every

    @every.setter
    def every(self, every):
        """Sets the every of this CheckDiscriminator.

        Check repetition interval.

        :param every: The every of this CheckDiscriminator.
        :type every: str
        """

        self._every = every

    @property
    def level(self):
        """Gets the level of this CheckDiscriminator.


        :return: The level of this CheckDiscriminator.
        :rtype: CheckStatusLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CheckDiscriminator.


        :param level: The level of this CheckDiscriminator.
        :type level: CheckStatusLevel
        """

        self._level = level

    @property
    def offset(self):
        """Gets the offset of this CheckDiscriminator.

        Duration to delay after the schedule, before executing check.

        :return: The offset of this CheckDiscriminator.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this CheckDiscriminator.

        Duration to delay after the schedule, before executing check.

        :param offset: The offset of this CheckDiscriminator.
        :type offset: str
        """

        self._offset = offset

    @property
    def report_zero(self):
        """Gets the report_zero of this CheckDiscriminator.

        If only zero values reported since time, trigger an alert

        :return: The report_zero of this CheckDiscriminator.
        :rtype: bool
        """
        return self._report_zero

    @report_zero.setter
    def report_zero(self, report_zero):
        """Sets the report_zero of this CheckDiscriminator.

        If only zero values reported since time, trigger an alert

        :param report_zero: The report_zero of this CheckDiscriminator.
        :type report_zero: bool
        """

        self._report_zero = report_zero

    @property
    def stale_time(self):
        """Gets the stale_time of this CheckDiscriminator.

        String duration for time that a series is considered stale and should not trigger deadman.

        :return: The stale_time of this CheckDiscriminator.
        :rtype: str
        """
        return self._stale_time

    @stale_time.setter
    def stale_time(self, stale_time):
        """Sets the stale_time of this CheckDiscriminator.

        String duration for time that a series is considered stale and should not trigger deadman.

        :param stale_time: The stale_time of this CheckDiscriminator.
        :type stale_time: str
        """

        self._stale_time = stale_time

    @property
    def status_message_template(self):
        """Gets the status_message_template of this CheckDiscriminator.

        The template used to generate and write a status message.

        :return: The status_message_template of this CheckDiscriminator.
        :rtype: str
        """
        return self._status_message_template

    @status_message_template.setter
    def status_message_template(self, status_message_template):
        """Sets the status_message_template of this CheckDiscriminator.

        The template used to generate and write a status message.

        :param status_message_template: The status_message_template of this CheckDiscriminator.
        :type status_message_template: str
        """

        self._status_message_template = status_message_template

    @property
    def tags(self):
        """Gets the tags of this CheckDiscriminator.

        List of tags to write to each status.

        :return: The tags of this CheckDiscriminator.
        :rtype: List[DeadmanCheckAllOfTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CheckDiscriminator.

        List of tags to write to each status.

        :param tags: The tags of this CheckDiscriminator.
        :type tags: List[DeadmanCheckAllOfTags]
        """

        self._tags = tags

    @property
    def time_since(self):
        """Gets the time_since of this CheckDiscriminator.

        String duration before deadman triggers.

        :return: The time_since of this CheckDiscriminator.
        :rtype: str
        """
        return self._time_since

    @time_since.setter
    def time_since(self, time_since):
        """Sets the time_since of this CheckDiscriminator.

        String duration before deadman triggers.

        :param time_since: The time_since of this CheckDiscriminator.
        :type time_since: str
        """

        self._time_since = time_since

    @property
    def type(self):
        """Gets the type of this CheckDiscriminator.


        :return: The type of this CheckDiscriminator.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckDiscriminator.


        :param type: The type of this CheckDiscriminator.
        :type type: str
        """
        allowed_values = ["deadman", "threshold", "custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def thresholds(self):
        """Gets the thresholds of this CheckDiscriminator.


        :return: The thresholds of this CheckDiscriminator.
        :rtype: List[Threshold]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this CheckDiscriminator.


        :param thresholds: The thresholds of this CheckDiscriminator.
        :type thresholds: List[Threshold]
        """

        self._thresholds = thresholds
