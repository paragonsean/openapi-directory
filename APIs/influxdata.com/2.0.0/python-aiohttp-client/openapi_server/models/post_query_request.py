# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dialect import Dialect
from openapi_server.models.file import File
from openapi_server.models.influx_ql_query import InfluxQLQuery
from openapi_server.models.query import Query
from openapi_server import util


class PostQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dialect: Dialect=None, extern: File=None, now: datetime=None, params: Dict[str, object]=None, query: str=None, type: str=None, bucket: str=None):
        """PostQueryRequest - a model defined in OpenAPI

        :param dialect: The dialect of this PostQueryRequest.
        :param extern: The extern of this PostQueryRequest.
        :param now: The now of this PostQueryRequest.
        :param params: The params of this PostQueryRequest.
        :param query: The query of this PostQueryRequest.
        :param type: The type of this PostQueryRequest.
        :param bucket: The bucket of this PostQueryRequest.
        """
        self.openapi_types = {
            'dialect': Dialect,
            'extern': File,
            'now': datetime,
            'params': Dict[str, object],
            'query': str,
            'type': str,
            'bucket': str
        }

        self.attribute_map = {
            'dialect': 'dialect',
            'extern': 'extern',
            'now': 'now',
            'params': 'params',
            'query': 'query',
            'type': 'type',
            'bucket': 'bucket'
        }

        self._dialect = dialect
        self._extern = extern
        self._now = now
        self._params = params
        self._query = query
        self._type = type
        self._bucket = bucket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostQuery_request of this PostQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dialect(self):
        """Gets the dialect of this PostQueryRequest.


        :return: The dialect of this PostQueryRequest.
        :rtype: Dialect
        """
        return self._dialect

    @dialect.setter
    def dialect(self, dialect):
        """Sets the dialect of this PostQueryRequest.


        :param dialect: The dialect of this PostQueryRequest.
        :type dialect: Dialect
        """

        self._dialect = dialect

    @property
    def extern(self):
        """Gets the extern of this PostQueryRequest.


        :return: The extern of this PostQueryRequest.
        :rtype: File
        """
        return self._extern

    @extern.setter
    def extern(self, extern):
        """Sets the extern of this PostQueryRequest.


        :param extern: The extern of this PostQueryRequest.
        :type extern: File
        """

        self._extern = extern

    @property
    def now(self):
        """Gets the now of this PostQueryRequest.

        Specifies the time that should be reported as \"now\" in the query. Default is the server's now time.

        :return: The now of this PostQueryRequest.
        :rtype: datetime
        """
        return self._now

    @now.setter
    def now(self, now):
        """Sets the now of this PostQueryRequest.

        Specifies the time that should be reported as \"now\" in the query. Default is the server's now time.

        :param now: The now of this PostQueryRequest.
        :type now: datetime
        """

        self._now = now

    @property
    def params(self):
        """Gets the params of this PostQueryRequest.

        Enumeration of key/value pairs that respresent parameters to be injected into query (can only specify either this field or extern and not both) 

        :return: The params of this PostQueryRequest.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this PostQueryRequest.

        Enumeration of key/value pairs that respresent parameters to be injected into query (can only specify either this field or extern and not both) 

        :param params: The params of this PostQueryRequest.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def query(self):
        """Gets the query of this PostQueryRequest.

        InfluxQL query execute.

        :return: The query of this PostQueryRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this PostQueryRequest.

        InfluxQL query execute.

        :param query: The query of this PostQueryRequest.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def type(self):
        """Gets the type of this PostQueryRequest.

        The type of query. Must be \"flux\".

        :return: The type of this PostQueryRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostQueryRequest.

        The type of query. Must be \"flux\".

        :param type: The type of this PostQueryRequest.
        :type type: str
        """
        allowed_values = ["flux", "influxql"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def bucket(self):
        """Gets the bucket of this PostQueryRequest.

        Bucket is to be used instead of the database and retention policy specified in the InfluxQL query.

        :return: The bucket of this PostQueryRequest.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this PostQueryRequest.

        Bucket is to be used instead of the database and retention policy specified in the InfluxQL query.

        :param bucket: The bucket of this PostQueryRequest.
        :type bucket: str
        """

        self._bucket = bucket
