# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server.models.dashboard_query import DashboardQuery
from openapi_server.models.decimal_places import DecimalPlaces
from openapi_server import util


class GaugeViewProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colors: List[DashboardColor]=None, decimal_places: DecimalPlaces=None, note: str=None, prefix: str=None, queries: List[DashboardQuery]=None, shape: str=None, show_note_when_empty: bool=None, suffix: str=None, tick_prefix: str=None, tick_suffix: str=None, type: str=None):
        """GaugeViewProperties - a model defined in OpenAPI

        :param colors: The colors of this GaugeViewProperties.
        :param decimal_places: The decimal_places of this GaugeViewProperties.
        :param note: The note of this GaugeViewProperties.
        :param prefix: The prefix of this GaugeViewProperties.
        :param queries: The queries of this GaugeViewProperties.
        :param shape: The shape of this GaugeViewProperties.
        :param show_note_when_empty: The show_note_when_empty of this GaugeViewProperties.
        :param suffix: The suffix of this GaugeViewProperties.
        :param tick_prefix: The tick_prefix of this GaugeViewProperties.
        :param tick_suffix: The tick_suffix of this GaugeViewProperties.
        :param type: The type of this GaugeViewProperties.
        """
        self.openapi_types = {
            'colors': List[DashboardColor],
            'decimal_places': DecimalPlaces,
            'note': str,
            'prefix': str,
            'queries': List[DashboardQuery],
            'shape': str,
            'show_note_when_empty': bool,
            'suffix': str,
            'tick_prefix': str,
            'tick_suffix': str,
            'type': str
        }

        self.attribute_map = {
            'colors': 'colors',
            'decimal_places': 'decimalPlaces',
            'note': 'note',
            'prefix': 'prefix',
            'queries': 'queries',
            'shape': 'shape',
            'show_note_when_empty': 'showNoteWhenEmpty',
            'suffix': 'suffix',
            'tick_prefix': 'tickPrefix',
            'tick_suffix': 'tickSuffix',
            'type': 'type'
        }

        self._colors = colors
        self._decimal_places = decimal_places
        self._note = note
        self._prefix = prefix
        self._queries = queries
        self._shape = shape
        self._show_note_when_empty = show_note_when_empty
        self._suffix = suffix
        self._tick_prefix = tick_prefix
        self._tick_suffix = tick_suffix
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GaugeViewProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GaugeViewProperties of this GaugeViewProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colors(self):
        """Gets the colors of this GaugeViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this GaugeViewProperties.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this GaugeViewProperties.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this GaugeViewProperties.
        :type colors: List[DashboardColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def decimal_places(self):
        """Gets the decimal_places of this GaugeViewProperties.


        :return: The decimal_places of this GaugeViewProperties.
        :rtype: DecimalPlaces
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this GaugeViewProperties.


        :param decimal_places: The decimal_places of this GaugeViewProperties.
        :type decimal_places: DecimalPlaces
        """
        if decimal_places is None:
            raise ValueError("Invalid value for `decimal_places`, must not be `None`")

        self._decimal_places = decimal_places

    @property
    def note(self):
        """Gets the note of this GaugeViewProperties.


        :return: The note of this GaugeViewProperties.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this GaugeViewProperties.


        :param note: The note of this GaugeViewProperties.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def prefix(self):
        """Gets the prefix of this GaugeViewProperties.


        :return: The prefix of this GaugeViewProperties.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this GaugeViewProperties.


        :param prefix: The prefix of this GaugeViewProperties.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def queries(self):
        """Gets the queries of this GaugeViewProperties.


        :return: The queries of this GaugeViewProperties.
        :rtype: List[DashboardQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this GaugeViewProperties.


        :param queries: The queries of this GaugeViewProperties.
        :type queries: List[DashboardQuery]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def shape(self):
        """Gets the shape of this GaugeViewProperties.


        :return: The shape of this GaugeViewProperties.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this GaugeViewProperties.


        :param shape: The shape of this GaugeViewProperties.
        :type shape: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def show_note_when_empty(self):
        """Gets the show_note_when_empty of this GaugeViewProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this GaugeViewProperties.
        :rtype: bool
        """
        return self._show_note_when_empty

    @show_note_when_empty.setter
    def show_note_when_empty(self, show_note_when_empty):
        """Sets the show_note_when_empty of this GaugeViewProperties.

        If true, will display note when empty

        :param show_note_when_empty: The show_note_when_empty of this GaugeViewProperties.
        :type show_note_when_empty: bool
        """
        if show_note_when_empty is None:
            raise ValueError("Invalid value for `show_note_when_empty`, must not be `None`")

        self._show_note_when_empty = show_note_when_empty

    @property
    def suffix(self):
        """Gets the suffix of this GaugeViewProperties.


        :return: The suffix of this GaugeViewProperties.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this GaugeViewProperties.


        :param suffix: The suffix of this GaugeViewProperties.
        :type suffix: str
        """
        if suffix is None:
            raise ValueError("Invalid value for `suffix`, must not be `None`")

        self._suffix = suffix

    @property
    def tick_prefix(self):
        """Gets the tick_prefix of this GaugeViewProperties.


        :return: The tick_prefix of this GaugeViewProperties.
        :rtype: str
        """
        return self._tick_prefix

    @tick_prefix.setter
    def tick_prefix(self, tick_prefix):
        """Sets the tick_prefix of this GaugeViewProperties.


        :param tick_prefix: The tick_prefix of this GaugeViewProperties.
        :type tick_prefix: str
        """
        if tick_prefix is None:
            raise ValueError("Invalid value for `tick_prefix`, must not be `None`")

        self._tick_prefix = tick_prefix

    @property
    def tick_suffix(self):
        """Gets the tick_suffix of this GaugeViewProperties.


        :return: The tick_suffix of this GaugeViewProperties.
        :rtype: str
        """
        return self._tick_suffix

    @tick_suffix.setter
    def tick_suffix(self, tick_suffix):
        """Sets the tick_suffix of this GaugeViewProperties.


        :param tick_suffix: The tick_suffix of this GaugeViewProperties.
        :type tick_suffix: str
        """
        if tick_suffix is None:
            raise ValueError("Invalid value for `tick_suffix`, must not be `None`")

        self._tick_suffix = tick_suffix

    @property
    def type(self):
        """Gets the type of this GaugeViewProperties.


        :return: The type of this GaugeViewProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GaugeViewProperties.


        :param type: The type of this GaugeViewProperties.
        :type type: str
        """
        allowed_values = ["gauge"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
