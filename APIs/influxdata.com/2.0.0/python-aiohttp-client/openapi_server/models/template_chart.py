# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.view_properties import ViewProperties
from openapi_server import util


class TemplateChart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, properties: ViewProperties=None, width: int=None, x_pos: int=None, y_pos: int=None):
        """TemplateChart - a model defined in OpenAPI

        :param height: The height of this TemplateChart.
        :param properties: The properties of this TemplateChart.
        :param width: The width of this TemplateChart.
        :param x_pos: The x_pos of this TemplateChart.
        :param y_pos: The y_pos of this TemplateChart.
        """
        self.openapi_types = {
            'height': int,
            'properties': ViewProperties,
            'width': int,
            'x_pos': int,
            'y_pos': int
        }

        self.attribute_map = {
            'height': 'height',
            'properties': 'properties',
            'width': 'width',
            'x_pos': 'xPos',
            'y_pos': 'yPos'
        }

        self._height = height
        self._properties = properties
        self._width = width
        self._x_pos = x_pos
        self._y_pos = y_pos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateChart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateChart of this TemplateChart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this TemplateChart.


        :return: The height of this TemplateChart.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TemplateChart.


        :param height: The height of this TemplateChart.
        :type height: int
        """

        self._height = height

    @property
    def properties(self):
        """Gets the properties of this TemplateChart.


        :return: The properties of this TemplateChart.
        :rtype: ViewProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TemplateChart.


        :param properties: The properties of this TemplateChart.
        :type properties: ViewProperties
        """

        self._properties = properties

    @property
    def width(self):
        """Gets the width of this TemplateChart.


        :return: The width of this TemplateChart.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this TemplateChart.


        :param width: The width of this TemplateChart.
        :type width: int
        """

        self._width = width

    @property
    def x_pos(self):
        """Gets the x_pos of this TemplateChart.


        :return: The x_pos of this TemplateChart.
        :rtype: int
        """
        return self._x_pos

    @x_pos.setter
    def x_pos(self, x_pos):
        """Sets the x_pos of this TemplateChart.


        :param x_pos: The x_pos of this TemplateChart.
        :type x_pos: int
        """

        self._x_pos = x_pos

    @property
    def y_pos(self):
        """Gets the y_pos of this TemplateChart.


        :return: The y_pos of this TemplateChart.
        :rtype: int
        """
        return self._y_pos

    @y_pos.setter
    def y_pos(self, y_pos):
        """Sets the y_pos of this TemplateChart.


        :param y_pos: The y_pos of this TemplateChart.
        :type y_pos: int
        """

        self._y_pos = y_pos
