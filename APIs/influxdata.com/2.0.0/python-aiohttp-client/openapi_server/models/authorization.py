# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization_all_of_links import AuthorizationAllOfLinks
from openapi_server.models.permission import Permission
from openapi_server import util


class Authorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, status: str='active', created_at: datetime=None, id: str=None, links: AuthorizationAllOfLinks=None, org: str=None, org_id: str=None, permissions: List[Permission]=None, token: str=None, updated_at: datetime=None, user: str=None, user_id: str=None):
        """Authorization - a model defined in OpenAPI

        :param description: The description of this Authorization.
        :param status: The status of this Authorization.
        :param created_at: The created_at of this Authorization.
        :param id: The id of this Authorization.
        :param links: The links of this Authorization.
        :param org: The org of this Authorization.
        :param org_id: The org_id of this Authorization.
        :param permissions: The permissions of this Authorization.
        :param token: The token of this Authorization.
        :param updated_at: The updated_at of this Authorization.
        :param user: The user of this Authorization.
        :param user_id: The user_id of this Authorization.
        """
        self.openapi_types = {
            'description': str,
            'status': str,
            'created_at': datetime,
            'id': str,
            'links': AuthorizationAllOfLinks,
            'org': str,
            'org_id': str,
            'permissions': List[Permission],
            'token': str,
            'updated_at': datetime,
            'user': str,
            'user_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'status': 'status',
            'created_at': 'createdAt',
            'id': 'id',
            'links': 'links',
            'org': 'org',
            'org_id': 'orgID',
            'permissions': 'permissions',
            'token': 'token',
            'updated_at': 'updatedAt',
            'user': 'user',
            'user_id': 'userID'
        }

        self._description = description
        self._status = status
        self._created_at = created_at
        self._id = id
        self._links = links
        self._org = org
        self._org_id = org_id
        self._permissions = permissions
        self._token = token
        self._updated_at = updated_at
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Authorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Authorization of this Authorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Authorization.

        A description of the token.

        :return: The description of this Authorization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Authorization.

        A description of the token.

        :param description: The description of this Authorization.
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Authorization.

        If inactive the token is inactive and requests using the token will be rejected.

        :return: The status of this Authorization.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Authorization.

        If inactive the token is inactive and requests using the token will be rejected.

        :param status: The status of this Authorization.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this Authorization.


        :return: The created_at of this Authorization.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Authorization.


        :param created_at: The created_at of this Authorization.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Authorization.


        :return: The id of this Authorization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Authorization.


        :param id: The id of this Authorization.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Authorization.


        :return: The links of this Authorization.
        :rtype: AuthorizationAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Authorization.


        :param links: The links of this Authorization.
        :type links: AuthorizationAllOfLinks
        """

        self._links = links

    @property
    def org(self):
        """Gets the org of this Authorization.

        Name of the org token is scoped to.

        :return: The org of this Authorization.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Authorization.

        Name of the org token is scoped to.

        :param org: The org of this Authorization.
        :type org: str
        """

        self._org = org

    @property
    def org_id(self):
        """Gets the org_id of this Authorization.

        ID of org that authorization is scoped to.

        :return: The org_id of this Authorization.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Authorization.

        ID of org that authorization is scoped to.

        :param org_id: The org_id of this Authorization.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def permissions(self):
        """Gets the permissions of this Authorization.

        List of permissions for an auth.  An auth must have at least one Permission.

        :return: The permissions of this Authorization.
        :rtype: List[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Authorization.

        List of permissions for an auth.  An auth must have at least one Permission.

        :param permissions: The permissions of this Authorization.
        :type permissions: List[Permission]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")
        if permissions is not None and len(permissions) < 1:
            raise ValueError("Invalid value for `permissions`, number of items must be greater than or equal to `1`")

        self._permissions = permissions

    @property
    def token(self):
        """Gets the token of this Authorization.

        Passed via the Authorization Header and Token Authentication type.

        :return: The token of this Authorization.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Authorization.

        Passed via the Authorization Header and Token Authentication type.

        :param token: The token of this Authorization.
        :type token: str
        """

        self._token = token

    @property
    def updated_at(self):
        """Gets the updated_at of this Authorization.


        :return: The updated_at of this Authorization.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Authorization.


        :param updated_at: The updated_at of this Authorization.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Authorization.

        Name of user that created and owns the token.

        :return: The user of this Authorization.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Authorization.

        Name of user that created and owns the token.

        :param user: The user of this Authorization.
        :type user: str
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this Authorization.

        ID of user that created and owns the token.

        :return: The user_id of this Authorization.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Authorization.

        ID of user that created and owns the token.

        :param user_id: The user_id of this Authorization.
        :type user_id: str
        """

        self._user_id = user_id
