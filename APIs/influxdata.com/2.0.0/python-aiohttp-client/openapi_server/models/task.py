# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label import Label
from openapi_server.models.task_links import TaskLinks
from openapi_server.models.task_status_type import TaskStatusType
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_id: str=None, created_at: datetime=None, cron: str=None, description: str=None, every: str=None, flux: str=None, id: str=None, labels: List[Label]=None, last_run_error: str=None, last_run_status: str=None, latest_completed: datetime=None, links: TaskLinks=None, name: str=None, offset: str=None, org: str=None, org_id: str=None, status: TaskStatusType=None, type: str=None, updated_at: datetime=None):
        """Task - a model defined in OpenAPI

        :param authorization_id: The authorization_id of this Task.
        :param created_at: The created_at of this Task.
        :param cron: The cron of this Task.
        :param description: The description of this Task.
        :param every: The every of this Task.
        :param flux: The flux of this Task.
        :param id: The id of this Task.
        :param labels: The labels of this Task.
        :param last_run_error: The last_run_error of this Task.
        :param last_run_status: The last_run_status of this Task.
        :param latest_completed: The latest_completed of this Task.
        :param links: The links of this Task.
        :param name: The name of this Task.
        :param offset: The offset of this Task.
        :param org: The org of this Task.
        :param org_id: The org_id of this Task.
        :param status: The status of this Task.
        :param type: The type of this Task.
        :param updated_at: The updated_at of this Task.
        """
        self.openapi_types = {
            'authorization_id': str,
            'created_at': datetime,
            'cron': str,
            'description': str,
            'every': str,
            'flux': str,
            'id': str,
            'labels': List[Label],
            'last_run_error': str,
            'last_run_status': str,
            'latest_completed': datetime,
            'links': TaskLinks,
            'name': str,
            'offset': str,
            'org': str,
            'org_id': str,
            'status': TaskStatusType,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'authorization_id': 'authorizationID',
            'created_at': 'createdAt',
            'cron': 'cron',
            'description': 'description',
            'every': 'every',
            'flux': 'flux',
            'id': 'id',
            'labels': 'labels',
            'last_run_error': 'lastRunError',
            'last_run_status': 'lastRunStatus',
            'latest_completed': 'latestCompleted',
            'links': 'links',
            'name': 'name',
            'offset': 'offset',
            'org': 'org',
            'org_id': 'orgID',
            'status': 'status',
            'type': 'type',
            'updated_at': 'updatedAt'
        }

        self._authorization_id = authorization_id
        self._created_at = created_at
        self._cron = cron
        self._description = description
        self._every = every
        self._flux = flux
        self._id = id
        self._labels = labels
        self._last_run_error = last_run_error
        self._last_run_status = last_run_status
        self._latest_completed = latest_completed
        self._links = links
        self._name = name
        self._offset = offset
        self._org = org
        self._org_id = org_id
        self._status = status
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_id(self):
        """Gets the authorization_id of this Task.

        The ID of the authorization used when this task communicates with the query engine.

        :return: The authorization_id of this Task.
        :rtype: str
        """
        return self._authorization_id

    @authorization_id.setter
    def authorization_id(self, authorization_id):
        """Sets the authorization_id of this Task.

        The ID of the authorization used when this task communicates with the query engine.

        :param authorization_id: The authorization_id of this Task.
        :type authorization_id: str
        """

        self._authorization_id = authorization_id

    @property
    def created_at(self):
        """Gets the created_at of this Task.


        :return: The created_at of this Task.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.


        :param created_at: The created_at of this Task.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def cron(self):
        """Gets the cron of this Task.

        A task repetition schedule in the form '* * * * * *'; parsed from Flux.

        :return: The cron of this Task.
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this Task.

        A task repetition schedule in the form '* * * * * *'; parsed from Flux.

        :param cron: The cron of this Task.
        :type cron: str
        """

        self._cron = cron

    @property
    def description(self):
        """Gets the description of this Task.

        An optional description of the task.

        :return: The description of this Task.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.

        An optional description of the task.

        :param description: The description of this Task.
        :type description: str
        """

        self._description = description

    @property
    def every(self):
        """Gets the every of this Task.

        A simple task repetition schedule; parsed from Flux.

        :return: The every of this Task.
        :rtype: str
        """
        return self._every

    @every.setter
    def every(self, every):
        """Sets the every of this Task.

        A simple task repetition schedule; parsed from Flux.

        :param every: The every of this Task.
        :type every: str
        """

        self._every = every

    @property
    def flux(self):
        """Gets the flux of this Task.

        The Flux script to run for this task.

        :return: The flux of this Task.
        :rtype: str
        """
        return self._flux

    @flux.setter
    def flux(self, flux):
        """Sets the flux of this Task.

        The Flux script to run for this task.

        :param flux: The flux of this Task.
        :type flux: str
        """
        if flux is None:
            raise ValueError("Invalid value for `flux`, must not be `None`")

        self._flux = flux

    @property
    def id(self):
        """Gets the id of this Task.


        :return: The id of this Task.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Task.


        :return: The labels of this Task.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Task.


        :param labels: The labels of this Task.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def last_run_error(self):
        """Gets the last_run_error of this Task.


        :return: The last_run_error of this Task.
        :rtype: str
        """
        return self._last_run_error

    @last_run_error.setter
    def last_run_error(self, last_run_error):
        """Sets the last_run_error of this Task.


        :param last_run_error: The last_run_error of this Task.
        :type last_run_error: str
        """

        self._last_run_error = last_run_error

    @property
    def last_run_status(self):
        """Gets the last_run_status of this Task.


        :return: The last_run_status of this Task.
        :rtype: str
        """
        return self._last_run_status

    @last_run_status.setter
    def last_run_status(self, last_run_status):
        """Sets the last_run_status of this Task.


        :param last_run_status: The last_run_status of this Task.
        :type last_run_status: str
        """
        allowed_values = ["failed", "success", "canceled"]  # noqa: E501
        if last_run_status not in allowed_values:
            raise ValueError(
                "Invalid value for `last_run_status` ({0}), must be one of {1}"
                .format(last_run_status, allowed_values)
            )

        self._last_run_status = last_run_status

    @property
    def latest_completed(self):
        """Gets the latest_completed of this Task.

        Timestamp of latest scheduled, completed run, RFC3339.

        :return: The latest_completed of this Task.
        :rtype: datetime
        """
        return self._latest_completed

    @latest_completed.setter
    def latest_completed(self, latest_completed):
        """Sets the latest_completed of this Task.

        Timestamp of latest scheduled, completed run, RFC3339.

        :param latest_completed: The latest_completed of this Task.
        :type latest_completed: datetime
        """

        self._latest_completed = latest_completed

    @property
    def links(self):
        """Gets the links of this Task.


        :return: The links of this Task.
        :rtype: TaskLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Task.


        :param links: The links of this Task.
        :type links: TaskLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Task.

        The name of the task.

        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        The name of the task.

        :param name: The name of this Task.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def offset(self):
        """Gets the offset of this Task.

        Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default.

        :return: The offset of this Task.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Task.

        Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default.

        :param offset: The offset of this Task.
        :type offset: str
        """

        self._offset = offset

    @property
    def org(self):
        """Gets the org of this Task.

        The name of the organization that owns this Task.

        :return: The org of this Task.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Task.

        The name of the organization that owns this Task.

        :param org: The org of this Task.
        :type org: str
        """

        self._org = org

    @property
    def org_id(self):
        """Gets the org_id of this Task.

        The ID of the organization that owns this Task.

        :return: The org_id of this Task.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Task.

        The ID of the organization that owns this Task.

        :param org_id: The org_id of this Task.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def status(self):
        """Gets the status of this Task.


        :return: The status of this Task.
        :rtype: TaskStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.
        :type status: TaskStatusType
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Task.

        The type of task, this can be used for filtering tasks on list actions.

        :return: The type of this Task.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Task.

        The type of task, this can be used for filtering tasks on list actions.

        :param type: The type of this Task.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Task.


        :return: The updated_at of this Task.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Task.


        :param updated_at: The updated_at of this Task.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
