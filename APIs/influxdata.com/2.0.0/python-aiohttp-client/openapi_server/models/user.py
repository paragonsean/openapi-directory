# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, oauth_id: str=None, status: str='active'):
        """User - a model defined in OpenAPI

        :param id: The id of this User.
        :param name: The name of this User.
        :param oauth_id: The oauth_id of this User.
        :param status: The status of this User.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'oauth_id': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'oauth_id': 'oauthID',
            'status': 'status'
        }

        self._id = id
        self._name = name
        self._oauth_id = oauth_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def oauth_id(self):
        """Gets the oauth_id of this User.


        :return: The oauth_id of this User.
        :rtype: str
        """
        return self._oauth_id

    @oauth_id.setter
    def oauth_id(self, oauth_id):
        """Sets the oauth_id of this User.


        :param oauth_id: The oauth_id of this User.
        :type oauth_id: str
        """

        self._oauth_id = oauth_id

    @property
    def status(self):
        """Gets the status of this User.

        If inactive the user is inactive.

        :return: The status of this User.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        If inactive the user is inactive.

        :param status: The status of this User.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
