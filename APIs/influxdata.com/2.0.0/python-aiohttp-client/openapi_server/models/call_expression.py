# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expression import Expression
from openapi_server import util


class CallExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: List[Expression]=None, callee: Expression=None, type: str=None):
        """CallExpression - a model defined in OpenAPI

        :param arguments: The arguments of this CallExpression.
        :param callee: The callee of this CallExpression.
        :param type: The type of this CallExpression.
        """
        self.openapi_types = {
            'arguments': List[Expression],
            'callee': Expression,
            'type': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'callee': 'callee',
            'type': 'type'
        }

        self._arguments = arguments
        self._callee = callee
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallExpression of this CallExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this CallExpression.

        Function arguments

        :return: The arguments of this CallExpression.
        :rtype: List[Expression]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this CallExpression.

        Function arguments

        :param arguments: The arguments of this CallExpression.
        :type arguments: List[Expression]
        """

        self._arguments = arguments

    @property
    def callee(self):
        """Gets the callee of this CallExpression.


        :return: The callee of this CallExpression.
        :rtype: Expression
        """
        return self._callee

    @callee.setter
    def callee(self, callee):
        """Sets the callee of this CallExpression.


        :param callee: The callee of this CallExpression.
        :type callee: Expression
        """

        self._callee = callee

    @property
    def type(self):
        """Gets the type of this CallExpression.

        Type of AST node

        :return: The type of this CallExpression.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CallExpression.

        Type of AST node

        :param type: The type of this CallExpression.
        :type type: str
        """

        self._type = type
