# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarkdownViewProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, note: str=None, shape: str=None, type: str=None):
        """MarkdownViewProperties - a model defined in OpenAPI

        :param note: The note of this MarkdownViewProperties.
        :param shape: The shape of this MarkdownViewProperties.
        :param type: The type of this MarkdownViewProperties.
        """
        self.openapi_types = {
            'note': str,
            'shape': str,
            'type': str
        }

        self.attribute_map = {
            'note': 'note',
            'shape': 'shape',
            'type': 'type'
        }

        self._note = note
        self._shape = shape
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarkdownViewProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarkdownViewProperties of this MarkdownViewProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def note(self):
        """Gets the note of this MarkdownViewProperties.


        :return: The note of this MarkdownViewProperties.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this MarkdownViewProperties.


        :param note: The note of this MarkdownViewProperties.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def shape(self):
        """Gets the shape of this MarkdownViewProperties.


        :return: The shape of this MarkdownViewProperties.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this MarkdownViewProperties.


        :param shape: The shape of this MarkdownViewProperties.
        :type shape: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def type(self):
        """Gets the type of this MarkdownViewProperties.


        :return: The type of this MarkdownViewProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MarkdownViewProperties.


        :param type: The type of this MarkdownViewProperties.
        :type type: str
        """
        allowed_values = ["markdown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
