# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.axis_scale import AxisScale
from openapi_server import util


class Axis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, bounds: List[str]=None, label: str=None, prefix: str=None, scale: AxisScale=None, suffix: str=None):
        """Axis - a model defined in OpenAPI

        :param base: The base of this Axis.
        :param bounds: The bounds of this Axis.
        :param label: The label of this Axis.
        :param prefix: The prefix of this Axis.
        :param scale: The scale of this Axis.
        :param suffix: The suffix of this Axis.
        """
        self.openapi_types = {
            'base': str,
            'bounds': List[str],
            'label': str,
            'prefix': str,
            'scale': AxisScale,
            'suffix': str
        }

        self.attribute_map = {
            'base': 'base',
            'bounds': 'bounds',
            'label': 'label',
            'prefix': 'prefix',
            'scale': 'scale',
            'suffix': 'suffix'
        }

        self._base = base
        self._bounds = bounds
        self._label = label
        self._prefix = prefix
        self._scale = scale
        self._suffix = suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Axis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Axis of this Axis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this Axis.

        Base represents the radix for formatting axis values.

        :return: The base of this Axis.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Axis.

        Base represents the radix for formatting axis values.

        :param base: The base of this Axis.
        :type base: str
        """
        allowed_values = ["", "2", "10"]  # noqa: E501
        if base not in allowed_values:
            raise ValueError(
                "Invalid value for `base` ({0}), must be one of {1}"
                .format(base, allowed_values)
            )

        self._base = base

    @property
    def bounds(self):
        """Gets the bounds of this Axis.

        The extents of an axis in the form [lower, upper]. Clients determine whether bounds are to be inclusive or exclusive of their limits

        :return: The bounds of this Axis.
        :rtype: List[str]
        """
        return self._bounds

    @bounds.setter
    def bounds(self, bounds):
        """Sets the bounds of this Axis.

        The extents of an axis in the form [lower, upper]. Clients determine whether bounds are to be inclusive or exclusive of their limits

        :param bounds: The bounds of this Axis.
        :type bounds: List[str]
        """
        if bounds is not None and len(bounds) > 2:
            raise ValueError("Invalid value for `bounds`, number of items must be less than or equal to `2`")
        if bounds is not None and len(bounds) < 0:
            raise ValueError("Invalid value for `bounds`, number of items must be greater than or equal to `0`")

        self._bounds = bounds

    @property
    def label(self):
        """Gets the label of this Axis.

        Label is a description of this Axis

        :return: The label of this Axis.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Axis.

        Label is a description of this Axis

        :param label: The label of this Axis.
        :type label: str
        """

        self._label = label

    @property
    def prefix(self):
        """Gets the prefix of this Axis.

        Prefix represents a label prefix for formatting axis values.

        :return: The prefix of this Axis.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Axis.

        Prefix represents a label prefix for formatting axis values.

        :param prefix: The prefix of this Axis.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def scale(self):
        """Gets the scale of this Axis.


        :return: The scale of this Axis.
        :rtype: AxisScale
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Axis.


        :param scale: The scale of this Axis.
        :type scale: AxisScale
        """

        self._scale = scale

    @property
    def suffix(self):
        """Gets the suffix of this Axis.

        Suffix represents a label suffix for formatting axis values.

        :return: The suffix of this Axis.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Axis.

        Suffix represents a label suffix for formatting axis values.

        :param suffix: The suffix of this Axis.
        :type suffix: str
        """

        self._suffix = suffix
