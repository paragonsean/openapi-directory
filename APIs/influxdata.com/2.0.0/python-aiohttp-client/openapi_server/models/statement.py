# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bad_statement import BadStatement
from openapi_server.models.builtin_statement import BuiltinStatement
from openapi_server.models.expression import Expression
from openapi_server.models.expression_statement import ExpressionStatement
from openapi_server.models.identifier import Identifier
from openapi_server.models.member_assignment import MemberAssignment
from openapi_server.models.member_expression import MemberExpression
from openapi_server.models.option_statement import OptionStatement
from openapi_server.models.return_statement import ReturnStatement
from openapi_server.models.test_statement import TestStatement
from openapi_server.models.variable_assignment import VariableAssignment
from openapi_server import util


class Statement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, type: str=None, id: Identifier=None, init: Expression=None, member: MemberExpression=None, expression: Expression=None, argument: Expression=None, assignment: VariableAssignment=None):
        """Statement - a model defined in OpenAPI

        :param text: The text of this Statement.
        :param type: The type of this Statement.
        :param id: The id of this Statement.
        :param init: The init of this Statement.
        :param member: The member of this Statement.
        :param expression: The expression of this Statement.
        :param argument: The argument of this Statement.
        :param assignment: The assignment of this Statement.
        """
        self.openapi_types = {
            'text': str,
            'type': str,
            'id': Identifier,
            'init': Expression,
            'member': MemberExpression,
            'expression': Expression,
            'argument': Expression,
            'assignment': VariableAssignment
        }

        self.attribute_map = {
            'text': 'text',
            'type': 'type',
            'id': 'id',
            'init': 'init',
            'member': 'member',
            'expression': 'expression',
            'argument': 'argument',
            'assignment': 'assignment'
        }

        self._text = text
        self._type = type
        self._id = id
        self._init = init
        self._member = member
        self._expression = expression
        self._argument = argument
        self._assignment = assignment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statement of this Statement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this Statement.

        Raw source text

        :return: The text of this Statement.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Statement.

        Raw source text

        :param text: The text of this Statement.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this Statement.

        Type of AST node

        :return: The type of this Statement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Statement.

        Type of AST node

        :param type: The type of this Statement.
        :type type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this Statement.


        :return: The id of this Statement.
        :rtype: Identifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Statement.


        :param id: The id of this Statement.
        :type id: Identifier
        """

        self._id = id

    @property
    def init(self):
        """Gets the init of this Statement.


        :return: The init of this Statement.
        :rtype: Expression
        """
        return self._init

    @init.setter
    def init(self, init):
        """Sets the init of this Statement.


        :param init: The init of this Statement.
        :type init: Expression
        """

        self._init = init

    @property
    def member(self):
        """Gets the member of this Statement.


        :return: The member of this Statement.
        :rtype: MemberExpression
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this Statement.


        :param member: The member of this Statement.
        :type member: MemberExpression
        """

        self._member = member

    @property
    def expression(self):
        """Gets the expression of this Statement.


        :return: The expression of this Statement.
        :rtype: Expression
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Statement.


        :param expression: The expression of this Statement.
        :type expression: Expression
        """

        self._expression = expression

    @property
    def argument(self):
        """Gets the argument of this Statement.


        :return: The argument of this Statement.
        :rtype: Expression
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """Sets the argument of this Statement.


        :param argument: The argument of this Statement.
        :type argument: Expression
        """

        self._argument = argument

    @property
    def assignment(self):
        """Gets the assignment of this Statement.


        :return: The assignment of this Statement.
        :rtype: VariableAssignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this Statement.


        :param assignment: The assignment of this Statement.
        :type assignment: VariableAssignment
        """

        self._assignment = assignment
