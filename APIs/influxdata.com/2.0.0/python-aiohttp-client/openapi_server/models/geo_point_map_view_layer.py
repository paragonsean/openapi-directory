# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.axis import Axis
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server import util


class GeoPointMapViewLayer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, color_dimension: Axis=None, color_field: str=None, colors: List[DashboardColor]=None, is_clustered: bool=None):
        """GeoPointMapViewLayer - a model defined in OpenAPI

        :param type: The type of this GeoPointMapViewLayer.
        :param color_dimension: The color_dimension of this GeoPointMapViewLayer.
        :param color_field: The color_field of this GeoPointMapViewLayer.
        :param colors: The colors of this GeoPointMapViewLayer.
        :param is_clustered: The is_clustered of this GeoPointMapViewLayer.
        """
        self.openapi_types = {
            'type': str,
            'color_dimension': Axis,
            'color_field': str,
            'colors': List[DashboardColor],
            'is_clustered': bool
        }

        self.attribute_map = {
            'type': 'type',
            'color_dimension': 'colorDimension',
            'color_field': 'colorField',
            'colors': 'colors',
            'is_clustered': 'isClustered'
        }

        self._type = type
        self._color_dimension = color_dimension
        self._color_field = color_field
        self._colors = colors
        self._is_clustered = is_clustered

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoPointMapViewLayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoPointMapViewLayer of this GeoPointMapViewLayer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this GeoPointMapViewLayer.


        :return: The type of this GeoPointMapViewLayer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GeoPointMapViewLayer.


        :param type: The type of this GeoPointMapViewLayer.
        :type type: str
        """
        allowed_values = ["heatmap", "circleMap", "pointMap", "trackMap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def color_dimension(self):
        """Gets the color_dimension of this GeoPointMapViewLayer.


        :return: The color_dimension of this GeoPointMapViewLayer.
        :rtype: Axis
        """
        return self._color_dimension

    @color_dimension.setter
    def color_dimension(self, color_dimension):
        """Sets the color_dimension of this GeoPointMapViewLayer.


        :param color_dimension: The color_dimension of this GeoPointMapViewLayer.
        :type color_dimension: Axis
        """
        if color_dimension is None:
            raise ValueError("Invalid value for `color_dimension`, must not be `None`")

        self._color_dimension = color_dimension

    @property
    def color_field(self):
        """Gets the color_field of this GeoPointMapViewLayer.

        Marker color field

        :return: The color_field of this GeoPointMapViewLayer.
        :rtype: str
        """
        return self._color_field

    @color_field.setter
    def color_field(self, color_field):
        """Sets the color_field of this GeoPointMapViewLayer.

        Marker color field

        :param color_field: The color_field of this GeoPointMapViewLayer.
        :type color_field: str
        """
        if color_field is None:
            raise ValueError("Invalid value for `color_field`, must not be `None`")

        self._color_field = color_field

    @property
    def colors(self):
        """Gets the colors of this GeoPointMapViewLayer.

        Colors define color encoding of data into a visualization

        :return: The colors of this GeoPointMapViewLayer.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this GeoPointMapViewLayer.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this GeoPointMapViewLayer.
        :type colors: List[DashboardColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def is_clustered(self):
        """Gets the is_clustered of this GeoPointMapViewLayer.

        Cluster close markers together

        :return: The is_clustered of this GeoPointMapViewLayer.
        :rtype: bool
        """
        return self._is_clustered

    @is_clustered.setter
    def is_clustered(self, is_clustered):
        """Sets the is_clustered of this GeoPointMapViewLayer.

        Cluster close markers together

        :param is_clustered: The is_clustered of this GeoPointMapViewLayer.
        :type is_clustered: bool
        """

        self._is_clustered = is_clustered
