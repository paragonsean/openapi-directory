# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label import Label
from openapi_server.models.telegraf_all_of_links import TelegrafAllOfLinks
from openapi_server.models.telegraf_request_metadata import TelegrafRequestMetadata
from openapi_server import util


class Telegraf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: str=None, description: str=None, metadata: TelegrafRequestMetadata=None, name: str=None, org_id: str=None, id: str=None, labels: List[Label]=None, links: TelegrafAllOfLinks=None):
        """Telegraf - a model defined in OpenAPI

        :param config: The config of this Telegraf.
        :param description: The description of this Telegraf.
        :param metadata: The metadata of this Telegraf.
        :param name: The name of this Telegraf.
        :param org_id: The org_id of this Telegraf.
        :param id: The id of this Telegraf.
        :param labels: The labels of this Telegraf.
        :param links: The links of this Telegraf.
        """
        self.openapi_types = {
            'config': str,
            'description': str,
            'metadata': TelegrafRequestMetadata,
            'name': str,
            'org_id': str,
            'id': str,
            'labels': List[Label],
            'links': TelegrafAllOfLinks
        }

        self.attribute_map = {
            'config': 'config',
            'description': 'description',
            'metadata': 'metadata',
            'name': 'name',
            'org_id': 'orgID',
            'id': 'id',
            'labels': 'labels',
            'links': 'links'
        }

        self._config = config
        self._description = description
        self._metadata = metadata
        self._name = name
        self._org_id = org_id
        self._id = id
        self._labels = labels
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Telegraf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Telegraf of this Telegraf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this Telegraf.


        :return: The config of this Telegraf.
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Telegraf.


        :param config: The config of this Telegraf.
        :type config: str
        """

        self._config = config

    @property
    def description(self):
        """Gets the description of this Telegraf.


        :return: The description of this Telegraf.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Telegraf.


        :param description: The description of this Telegraf.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this Telegraf.


        :return: The metadata of this Telegraf.
        :rtype: TelegrafRequestMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Telegraf.


        :param metadata: The metadata of this Telegraf.
        :type metadata: TelegrafRequestMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Telegraf.


        :return: The name of this Telegraf.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Telegraf.


        :param name: The name of this Telegraf.
        :type name: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this Telegraf.


        :return: The org_id of this Telegraf.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Telegraf.


        :param org_id: The org_id of this Telegraf.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def id(self):
        """Gets the id of this Telegraf.


        :return: The id of this Telegraf.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Telegraf.


        :param id: The id of this Telegraf.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Telegraf.


        :return: The labels of this Telegraf.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Telegraf.


        :param labels: The labels of this Telegraf.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def links(self):
        """Gets the links of this Telegraf.


        :return: The links of this Telegraf.
        :rtype: TelegrafAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Telegraf.


        :param links: The links of this Telegraf.
        :type links: TelegrafAllOfLinks
        """

        self._links = links
