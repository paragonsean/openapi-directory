# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server.models.dashboard_query import DashboardQuery
from openapi_server import util


class HistogramViewProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bin_count: int=None, colors: List[DashboardColor]=None, fill_columns: List[str]=None, legend_colorize_rows: bool=None, legend_hide: bool=None, legend_opacity: float=None, legend_orientation_threshold: int=None, note: str=None, position: str=None, queries: List[DashboardQuery]=None, shape: str=None, show_note_when_empty: bool=None, type: str=None, x_axis_label: str=None, x_column: str=None, x_domain: List[float]=None):
        """HistogramViewProperties - a model defined in OpenAPI

        :param bin_count: The bin_count of this HistogramViewProperties.
        :param colors: The colors of this HistogramViewProperties.
        :param fill_columns: The fill_columns of this HistogramViewProperties.
        :param legend_colorize_rows: The legend_colorize_rows of this HistogramViewProperties.
        :param legend_hide: The legend_hide of this HistogramViewProperties.
        :param legend_opacity: The legend_opacity of this HistogramViewProperties.
        :param legend_orientation_threshold: The legend_orientation_threshold of this HistogramViewProperties.
        :param note: The note of this HistogramViewProperties.
        :param position: The position of this HistogramViewProperties.
        :param queries: The queries of this HistogramViewProperties.
        :param shape: The shape of this HistogramViewProperties.
        :param show_note_when_empty: The show_note_when_empty of this HistogramViewProperties.
        :param type: The type of this HistogramViewProperties.
        :param x_axis_label: The x_axis_label of this HistogramViewProperties.
        :param x_column: The x_column of this HistogramViewProperties.
        :param x_domain: The x_domain of this HistogramViewProperties.
        """
        self.openapi_types = {
            'bin_count': int,
            'colors': List[DashboardColor],
            'fill_columns': List[str],
            'legend_colorize_rows': bool,
            'legend_hide': bool,
            'legend_opacity': float,
            'legend_orientation_threshold': int,
            'note': str,
            'position': str,
            'queries': List[DashboardQuery],
            'shape': str,
            'show_note_when_empty': bool,
            'type': str,
            'x_axis_label': str,
            'x_column': str,
            'x_domain': List[float]
        }

        self.attribute_map = {
            'bin_count': 'binCount',
            'colors': 'colors',
            'fill_columns': 'fillColumns',
            'legend_colorize_rows': 'legendColorizeRows',
            'legend_hide': 'legendHide',
            'legend_opacity': 'legendOpacity',
            'legend_orientation_threshold': 'legendOrientationThreshold',
            'note': 'note',
            'position': 'position',
            'queries': 'queries',
            'shape': 'shape',
            'show_note_when_empty': 'showNoteWhenEmpty',
            'type': 'type',
            'x_axis_label': 'xAxisLabel',
            'x_column': 'xColumn',
            'x_domain': 'xDomain'
        }

        self._bin_count = bin_count
        self._colors = colors
        self._fill_columns = fill_columns
        self._legend_colorize_rows = legend_colorize_rows
        self._legend_hide = legend_hide
        self._legend_opacity = legend_opacity
        self._legend_orientation_threshold = legend_orientation_threshold
        self._note = note
        self._position = position
        self._queries = queries
        self._shape = shape
        self._show_note_when_empty = show_note_when_empty
        self._type = type
        self._x_axis_label = x_axis_label
        self._x_column = x_column
        self._x_domain = x_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistogramViewProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistogramViewProperties of this HistogramViewProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bin_count(self):
        """Gets the bin_count of this HistogramViewProperties.


        :return: The bin_count of this HistogramViewProperties.
        :rtype: int
        """
        return self._bin_count

    @bin_count.setter
    def bin_count(self, bin_count):
        """Sets the bin_count of this HistogramViewProperties.


        :param bin_count: The bin_count of this HistogramViewProperties.
        :type bin_count: int
        """
        if bin_count is None:
            raise ValueError("Invalid value for `bin_count`, must not be `None`")

        self._bin_count = bin_count

    @property
    def colors(self):
        """Gets the colors of this HistogramViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this HistogramViewProperties.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this HistogramViewProperties.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this HistogramViewProperties.
        :type colors: List[DashboardColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def fill_columns(self):
        """Gets the fill_columns of this HistogramViewProperties.


        :return: The fill_columns of this HistogramViewProperties.
        :rtype: List[str]
        """
        return self._fill_columns

    @fill_columns.setter
    def fill_columns(self, fill_columns):
        """Sets the fill_columns of this HistogramViewProperties.


        :param fill_columns: The fill_columns of this HistogramViewProperties.
        :type fill_columns: List[str]
        """
        if fill_columns is None:
            raise ValueError("Invalid value for `fill_columns`, must not be `None`")

        self._fill_columns = fill_columns

    @property
    def legend_colorize_rows(self):
        """Gets the legend_colorize_rows of this HistogramViewProperties.


        :return: The legend_colorize_rows of this HistogramViewProperties.
        :rtype: bool
        """
        return self._legend_colorize_rows

    @legend_colorize_rows.setter
    def legend_colorize_rows(self, legend_colorize_rows):
        """Sets the legend_colorize_rows of this HistogramViewProperties.


        :param legend_colorize_rows: The legend_colorize_rows of this HistogramViewProperties.
        :type legend_colorize_rows: bool
        """

        self._legend_colorize_rows = legend_colorize_rows

    @property
    def legend_hide(self):
        """Gets the legend_hide of this HistogramViewProperties.


        :return: The legend_hide of this HistogramViewProperties.
        :rtype: bool
        """
        return self._legend_hide

    @legend_hide.setter
    def legend_hide(self, legend_hide):
        """Sets the legend_hide of this HistogramViewProperties.


        :param legend_hide: The legend_hide of this HistogramViewProperties.
        :type legend_hide: bool
        """

        self._legend_hide = legend_hide

    @property
    def legend_opacity(self):
        """Gets the legend_opacity of this HistogramViewProperties.


        :return: The legend_opacity of this HistogramViewProperties.
        :rtype: float
        """
        return self._legend_opacity

    @legend_opacity.setter
    def legend_opacity(self, legend_opacity):
        """Sets the legend_opacity of this HistogramViewProperties.


        :param legend_opacity: The legend_opacity of this HistogramViewProperties.
        :type legend_opacity: float
        """

        self._legend_opacity = legend_opacity

    @property
    def legend_orientation_threshold(self):
        """Gets the legend_orientation_threshold of this HistogramViewProperties.


        :return: The legend_orientation_threshold of this HistogramViewProperties.
        :rtype: int
        """
        return self._legend_orientation_threshold

    @legend_orientation_threshold.setter
    def legend_orientation_threshold(self, legend_orientation_threshold):
        """Sets the legend_orientation_threshold of this HistogramViewProperties.


        :param legend_orientation_threshold: The legend_orientation_threshold of this HistogramViewProperties.
        :type legend_orientation_threshold: int
        """

        self._legend_orientation_threshold = legend_orientation_threshold

    @property
    def note(self):
        """Gets the note of this HistogramViewProperties.


        :return: The note of this HistogramViewProperties.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this HistogramViewProperties.


        :param note: The note of this HistogramViewProperties.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def position(self):
        """Gets the position of this HistogramViewProperties.


        :return: The position of this HistogramViewProperties.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this HistogramViewProperties.


        :param position: The position of this HistogramViewProperties.
        :type position: str
        """
        allowed_values = ["overlaid", "stacked"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def queries(self):
        """Gets the queries of this HistogramViewProperties.


        :return: The queries of this HistogramViewProperties.
        :rtype: List[DashboardQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this HistogramViewProperties.


        :param queries: The queries of this HistogramViewProperties.
        :type queries: List[DashboardQuery]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def shape(self):
        """Gets the shape of this HistogramViewProperties.


        :return: The shape of this HistogramViewProperties.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this HistogramViewProperties.


        :param shape: The shape of this HistogramViewProperties.
        :type shape: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def show_note_when_empty(self):
        """Gets the show_note_when_empty of this HistogramViewProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this HistogramViewProperties.
        :rtype: bool
        """
        return self._show_note_when_empty

    @show_note_when_empty.setter
    def show_note_when_empty(self, show_note_when_empty):
        """Sets the show_note_when_empty of this HistogramViewProperties.

        If true, will display note when empty

        :param show_note_when_empty: The show_note_when_empty of this HistogramViewProperties.
        :type show_note_when_empty: bool
        """
        if show_note_when_empty is None:
            raise ValueError("Invalid value for `show_note_when_empty`, must not be `None`")

        self._show_note_when_empty = show_note_when_empty

    @property
    def type(self):
        """Gets the type of this HistogramViewProperties.


        :return: The type of this HistogramViewProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HistogramViewProperties.


        :param type: The type of this HistogramViewProperties.
        :type type: str
        """
        allowed_values = ["histogram"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def x_axis_label(self):
        """Gets the x_axis_label of this HistogramViewProperties.


        :return: The x_axis_label of this HistogramViewProperties.
        :rtype: str
        """
        return self._x_axis_label

    @x_axis_label.setter
    def x_axis_label(self, x_axis_label):
        """Sets the x_axis_label of this HistogramViewProperties.


        :param x_axis_label: The x_axis_label of this HistogramViewProperties.
        :type x_axis_label: str
        """
        if x_axis_label is None:
            raise ValueError("Invalid value for `x_axis_label`, must not be `None`")

        self._x_axis_label = x_axis_label

    @property
    def x_column(self):
        """Gets the x_column of this HistogramViewProperties.


        :return: The x_column of this HistogramViewProperties.
        :rtype: str
        """
        return self._x_column

    @x_column.setter
    def x_column(self, x_column):
        """Sets the x_column of this HistogramViewProperties.


        :param x_column: The x_column of this HistogramViewProperties.
        :type x_column: str
        """
        if x_column is None:
            raise ValueError("Invalid value for `x_column`, must not be `None`")

        self._x_column = x_column

    @property
    def x_domain(self):
        """Gets the x_domain of this HistogramViewProperties.


        :return: The x_domain of this HistogramViewProperties.
        :rtype: List[float]
        """
        return self._x_domain

    @x_domain.setter
    def x_domain(self, x_domain):
        """Sets the x_domain of this HistogramViewProperties.


        :param x_domain: The x_domain of this HistogramViewProperties.
        :type x_domain: List[float]
        """
        if x_domain is None:
            raise ValueError("Invalid value for `x_domain`, must not be `None`")

        self._x_domain = x_domain
