# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label import Label
from openapi_server.models.variable_links import VariableLinks
from openapi_server.models.variable_properties import VariableProperties
from openapi_server import util


class Variable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: VariableProperties=None, created_at: datetime=None, description: str=None, id: str=None, labels: List[Label]=None, links: VariableLinks=None, name: str=None, org_id: str=None, selected: List[str]=None, updated_at: datetime=None):
        """Variable - a model defined in OpenAPI

        :param arguments: The arguments of this Variable.
        :param created_at: The created_at of this Variable.
        :param description: The description of this Variable.
        :param id: The id of this Variable.
        :param labels: The labels of this Variable.
        :param links: The links of this Variable.
        :param name: The name of this Variable.
        :param org_id: The org_id of this Variable.
        :param selected: The selected of this Variable.
        :param updated_at: The updated_at of this Variable.
        """
        self.openapi_types = {
            'arguments': VariableProperties,
            'created_at': datetime,
            'description': str,
            'id': str,
            'labels': List[Label],
            'links': VariableLinks,
            'name': str,
            'org_id': str,
            'selected': List[str],
            'updated_at': datetime
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'created_at': 'createdAt',
            'description': 'description',
            'id': 'id',
            'labels': 'labels',
            'links': 'links',
            'name': 'name',
            'org_id': 'orgID',
            'selected': 'selected',
            'updated_at': 'updatedAt'
        }

        self._arguments = arguments
        self._created_at = created_at
        self._description = description
        self._id = id
        self._labels = labels
        self._links = links
        self._name = name
        self._org_id = org_id
        self._selected = selected
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Variable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Variable of this Variable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this Variable.


        :return: The arguments of this Variable.
        :rtype: VariableProperties
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this Variable.


        :param arguments: The arguments of this Variable.
        :type arguments: VariableProperties
        """
        if arguments is None:
            raise ValueError("Invalid value for `arguments`, must not be `None`")

        self._arguments = arguments

    @property
    def created_at(self):
        """Gets the created_at of this Variable.


        :return: The created_at of this Variable.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Variable.


        :param created_at: The created_at of this Variable.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Variable.


        :return: The description of this Variable.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Variable.


        :param description: The description of this Variable.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Variable.


        :return: The id of this Variable.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Variable.


        :param id: The id of this Variable.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Variable.


        :return: The labels of this Variable.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Variable.


        :param labels: The labels of this Variable.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def links(self):
        """Gets the links of this Variable.


        :return: The links of this Variable.
        :rtype: VariableLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Variable.


        :param links: The links of this Variable.
        :type links: VariableLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Variable.


        :return: The name of this Variable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Variable.


        :param name: The name of this Variable.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this Variable.


        :return: The org_id of this Variable.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Variable.


        :param org_id: The org_id of this Variable.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def selected(self):
        """Gets the selected of this Variable.


        :return: The selected of this Variable.
        :rtype: List[str]
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this Variable.


        :param selected: The selected of this Variable.
        :type selected: List[str]
        """

        self._selected = selected

    @property
    def updated_at(self):
        """Gets the updated_at of this Variable.


        :return: The updated_at of this Variable.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Variable.


        :param updated_at: The updated_at of this Variable.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
