# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCell(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, h: int=None, name: str=None, using_view: str=None, w: int=None, x: int=None, y: int=None):
        """CreateCell - a model defined in OpenAPI

        :param h: The h of this CreateCell.
        :param name: The name of this CreateCell.
        :param using_view: The using_view of this CreateCell.
        :param w: The w of this CreateCell.
        :param x: The x of this CreateCell.
        :param y: The y of this CreateCell.
        """
        self.openapi_types = {
            'h': int,
            'name': str,
            'using_view': str,
            'w': int,
            'x': int,
            'y': int
        }

        self.attribute_map = {
            'h': 'h',
            'name': 'name',
            'using_view': 'usingView',
            'w': 'w',
            'x': 'x',
            'y': 'y'
        }

        self._h = h
        self._name = name
        self._using_view = using_view
        self._w = w
        self._x = x
        self._y = y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCell':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCell of this CreateCell.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def h(self):
        """Gets the h of this CreateCell.


        :return: The h of this CreateCell.
        :rtype: int
        """
        return self._h

    @h.setter
    def h(self, h):
        """Sets the h of this CreateCell.


        :param h: The h of this CreateCell.
        :type h: int
        """

        self._h = h

    @property
    def name(self):
        """Gets the name of this CreateCell.


        :return: The name of this CreateCell.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCell.


        :param name: The name of this CreateCell.
        :type name: str
        """

        self._name = name

    @property
    def using_view(self):
        """Gets the using_view of this CreateCell.

        Makes a copy of the provided view.

        :return: The using_view of this CreateCell.
        :rtype: str
        """
        return self._using_view

    @using_view.setter
    def using_view(self, using_view):
        """Sets the using_view of this CreateCell.

        Makes a copy of the provided view.

        :param using_view: The using_view of this CreateCell.
        :type using_view: str
        """

        self._using_view = using_view

    @property
    def w(self):
        """Gets the w of this CreateCell.


        :return: The w of this CreateCell.
        :rtype: int
        """
        return self._w

    @w.setter
    def w(self, w):
        """Sets the w of this CreateCell.


        :param w: The w of this CreateCell.
        :type w: int
        """

        self._w = w

    @property
    def x(self):
        """Gets the x of this CreateCell.


        :return: The x of this CreateCell.
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this CreateCell.


        :param x: The x of this CreateCell.
        :type x: int
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this CreateCell.


        :return: The y of this CreateCell.
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this CreateCell.


        :param y: The y of this CreateCell.
        :type y: int
        """

        self._y = y
