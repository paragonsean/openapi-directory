# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchRetentionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, every_seconds: int=None, shard_group_duration_seconds: int=None, type: str='expire'):
        """PatchRetentionRule - a model defined in OpenAPI

        :param every_seconds: The every_seconds of this PatchRetentionRule.
        :param shard_group_duration_seconds: The shard_group_duration_seconds of this PatchRetentionRule.
        :param type: The type of this PatchRetentionRule.
        """
        self.openapi_types = {
            'every_seconds': int,
            'shard_group_duration_seconds': int,
            'type': str
        }

        self.attribute_map = {
            'every_seconds': 'everySeconds',
            'shard_group_duration_seconds': 'shardGroupDurationSeconds',
            'type': 'type'
        }

        self._every_seconds = every_seconds
        self._shard_group_duration_seconds = shard_group_duration_seconds
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchRetentionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchRetentionRule of this PatchRetentionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def every_seconds(self):
        """Gets the every_seconds of this PatchRetentionRule.

        Duration in seconds for how long data will be kept in the database. 0 means infinite.

        :return: The every_seconds of this PatchRetentionRule.
        :rtype: int
        """
        return self._every_seconds

    @every_seconds.setter
    def every_seconds(self, every_seconds):
        """Sets the every_seconds of this PatchRetentionRule.

        Duration in seconds for how long data will be kept in the database. 0 means infinite.

        :param every_seconds: The every_seconds of this PatchRetentionRule.
        :type every_seconds: int
        """
        if every_seconds is not None and every_seconds < 0:
            raise ValueError("Invalid value for `every_seconds`, must be a value greater than or equal to `0`")

        self._every_seconds = every_seconds

    @property
    def shard_group_duration_seconds(self):
        """Gets the shard_group_duration_seconds of this PatchRetentionRule.

        Shard duration measured in seconds.

        :return: The shard_group_duration_seconds of this PatchRetentionRule.
        :rtype: int
        """
        return self._shard_group_duration_seconds

    @shard_group_duration_seconds.setter
    def shard_group_duration_seconds(self, shard_group_duration_seconds):
        """Sets the shard_group_duration_seconds of this PatchRetentionRule.

        Shard duration measured in seconds.

        :param shard_group_duration_seconds: The shard_group_duration_seconds of this PatchRetentionRule.
        :type shard_group_duration_seconds: int
        """

        self._shard_group_duration_seconds = shard_group_duration_seconds

    @property
    def type(self):
        """Gets the type of this PatchRetentionRule.


        :return: The type of this PatchRetentionRule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PatchRetentionRule.


        :param type: The type of this PatchRetentionRule.
        :type type: str
        """
        allowed_values = ["expire"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
