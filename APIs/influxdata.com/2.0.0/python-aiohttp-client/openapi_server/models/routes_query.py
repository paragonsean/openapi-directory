# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoutesQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyze: str=None, ast: str=None, _self: str=None, suggestions: str=None):
        """RoutesQuery - a model defined in OpenAPI

        :param analyze: The analyze of this RoutesQuery.
        :param ast: The ast of this RoutesQuery.
        :param _self: The _self of this RoutesQuery.
        :param suggestions: The suggestions of this RoutesQuery.
        """
        self.openapi_types = {
            'analyze': str,
            'ast': str,
            '_self': str,
            'suggestions': str
        }

        self.attribute_map = {
            'analyze': 'analyze',
            'ast': 'ast',
            '_self': 'self',
            'suggestions': 'suggestions'
        }

        self._analyze = analyze
        self._ast = ast
        self.__self = _self
        self._suggestions = suggestions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutesQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Routes_query of this RoutesQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyze(self):
        """Gets the analyze of this RoutesQuery.


        :return: The analyze of this RoutesQuery.
        :rtype: str
        """
        return self._analyze

    @analyze.setter
    def analyze(self, analyze):
        """Sets the analyze of this RoutesQuery.


        :param analyze: The analyze of this RoutesQuery.
        :type analyze: str
        """

        self._analyze = analyze

    @property
    def ast(self):
        """Gets the ast of this RoutesQuery.


        :return: The ast of this RoutesQuery.
        :rtype: str
        """
        return self._ast

    @ast.setter
    def ast(self, ast):
        """Sets the ast of this RoutesQuery.


        :param ast: The ast of this RoutesQuery.
        :type ast: str
        """

        self._ast = ast

    @property
    def _self(self):
        """Gets the _self of this RoutesQuery.


        :return: The _self of this RoutesQuery.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this RoutesQuery.


        :param _self: The _self of this RoutesQuery.
        :type _self: str
        """

        self.__self = _self

    @property
    def suggestions(self):
        """Gets the suggestions of this RoutesQuery.


        :return: The suggestions of this RoutesQuery.
        :rtype: str
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this RoutesQuery.


        :param suggestions: The suggestions of this RoutesQuery.
        :type suggestions: str
        """

        self._suggestions = suggestions
