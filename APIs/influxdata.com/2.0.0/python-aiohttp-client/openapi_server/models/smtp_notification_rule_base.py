# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SMTPNotificationRuleBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_template: str=None, subject_template: str=None, to: str=None, type: str=None):
        """SMTPNotificationRuleBase - a model defined in OpenAPI

        :param body_template: The body_template of this SMTPNotificationRuleBase.
        :param subject_template: The subject_template of this SMTPNotificationRuleBase.
        :param to: The to of this SMTPNotificationRuleBase.
        :param type: The type of this SMTPNotificationRuleBase.
        """
        self.openapi_types = {
            'body_template': str,
            'subject_template': str,
            'to': str,
            'type': str
        }

        self.attribute_map = {
            'body_template': 'bodyTemplate',
            'subject_template': 'subjectTemplate',
            'to': 'to',
            'type': 'type'
        }

        self._body_template = body_template
        self._subject_template = subject_template
        self._to = to
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SMTPNotificationRuleBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SMTPNotificationRuleBase of this SMTPNotificationRuleBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_template(self):
        """Gets the body_template of this SMTPNotificationRuleBase.


        :return: The body_template of this SMTPNotificationRuleBase.
        :rtype: str
        """
        return self._body_template

    @body_template.setter
    def body_template(self, body_template):
        """Sets the body_template of this SMTPNotificationRuleBase.


        :param body_template: The body_template of this SMTPNotificationRuleBase.
        :type body_template: str
        """

        self._body_template = body_template

    @property
    def subject_template(self):
        """Gets the subject_template of this SMTPNotificationRuleBase.


        :return: The subject_template of this SMTPNotificationRuleBase.
        :rtype: str
        """
        return self._subject_template

    @subject_template.setter
    def subject_template(self, subject_template):
        """Sets the subject_template of this SMTPNotificationRuleBase.


        :param subject_template: The subject_template of this SMTPNotificationRuleBase.
        :type subject_template: str
        """
        if subject_template is None:
            raise ValueError("Invalid value for `subject_template`, must not be `None`")

        self._subject_template = subject_template

    @property
    def to(self):
        """Gets the to of this SMTPNotificationRuleBase.


        :return: The to of this SMTPNotificationRuleBase.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SMTPNotificationRuleBase.


        :param to: The to of this SMTPNotificationRuleBase.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def type(self):
        """Gets the type of this SMTPNotificationRuleBase.


        :return: The type of this SMTPNotificationRuleBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SMTPNotificationRuleBase.


        :param type: The type of this SMTPNotificationRuleBase.
        :type type: str
        """
        allowed_values = ["smtp"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
