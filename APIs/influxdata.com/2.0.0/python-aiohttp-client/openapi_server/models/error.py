# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, err: str=None, message: str=None, op: str=None):
        """Error - a model defined in OpenAPI

        :param code: The code of this Error.
        :param err: The err of this Error.
        :param message: The message of this Error.
        :param op: The op of this Error.
        """
        self.openapi_types = {
            'code': str,
            'err': str,
            'message': str,
            'op': str
        }

        self.attribute_map = {
            'code': 'code',
            'err': 'err',
            'message': 'message',
            'op': 'op'
        }

        self._code = code
        self._err = err
        self._message = message
        self._op = op

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Error.

        code is the machine-readable error code.

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        code is the machine-readable error code.

        :param code: The code of this Error.
        :type code: str
        """
        allowed_values = ["internal error", "not found", "conflict", "invalid", "unprocessable entity", "empty value", "unavailable", "forbidden", "too many requests", "unauthorized", "method not allowed", "request too large", "unsupported media type"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def err(self):
        """Gets the err of this Error.

        err is a stack of errors that occurred during processing of the request. Useful for debugging.

        :return: The err of this Error.
        :rtype: str
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this Error.

        err is a stack of errors that occurred during processing of the request. Useful for debugging.

        :param err: The err of this Error.
        :type err: str
        """

        self._err = err

    @property
    def message(self):
        """Gets the message of this Error.

        message is a human-readable message.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        message is a human-readable message.

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def op(self):
        """Gets the op of this Error.

        op describes the logical code operation during error. Useful for debugging.

        :return: The op of this Error.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this Error.

        op describes the logical code operation during error. Useful for debugging.

        :param op: The op of this Error.
        :type op: str
        """

        self._op = op
