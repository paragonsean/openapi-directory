# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TelegramNotificationRuleBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_web_page_preview: bool=None, message_template: str=None, parse_mode: str=None, type: str=None):
        """TelegramNotificationRuleBase - a model defined in OpenAPI

        :param disable_web_page_preview: The disable_web_page_preview of this TelegramNotificationRuleBase.
        :param message_template: The message_template of this TelegramNotificationRuleBase.
        :param parse_mode: The parse_mode of this TelegramNotificationRuleBase.
        :param type: The type of this TelegramNotificationRuleBase.
        """
        self.openapi_types = {
            'disable_web_page_preview': bool,
            'message_template': str,
            'parse_mode': str,
            'type': str
        }

        self.attribute_map = {
            'disable_web_page_preview': 'disableWebPagePreview',
            'message_template': 'messageTemplate',
            'parse_mode': 'parseMode',
            'type': 'type'
        }

        self._disable_web_page_preview = disable_web_page_preview
        self._message_template = message_template
        self._parse_mode = parse_mode
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TelegramNotificationRuleBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TelegramNotificationRuleBase of this TelegramNotificationRuleBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_web_page_preview(self):
        """Gets the disable_web_page_preview of this TelegramNotificationRuleBase.

        Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .

        :return: The disable_web_page_preview of this TelegramNotificationRuleBase.
        :rtype: bool
        """
        return self._disable_web_page_preview

    @disable_web_page_preview.setter
    def disable_web_page_preview(self, disable_web_page_preview):
        """Sets the disable_web_page_preview of this TelegramNotificationRuleBase.

        Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .

        :param disable_web_page_preview: The disable_web_page_preview of this TelegramNotificationRuleBase.
        :type disable_web_page_preview: bool
        """

        self._disable_web_page_preview = disable_web_page_preview

    @property
    def message_template(self):
        """Gets the message_template of this TelegramNotificationRuleBase.

        The message template as a flux interpolated string.

        :return: The message_template of this TelegramNotificationRuleBase.
        :rtype: str
        """
        return self._message_template

    @message_template.setter
    def message_template(self, message_template):
        """Sets the message_template of this TelegramNotificationRuleBase.

        The message template as a flux interpolated string.

        :param message_template: The message_template of this TelegramNotificationRuleBase.
        :type message_template: str
        """
        if message_template is None:
            raise ValueError("Invalid value for `message_template`, must not be `None`")

        self._message_template = message_template

    @property
    def parse_mode(self):
        """Gets the parse_mode of this TelegramNotificationRuleBase.

        Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .

        :return: The parse_mode of this TelegramNotificationRuleBase.
        :rtype: str
        """
        return self._parse_mode

    @parse_mode.setter
    def parse_mode(self, parse_mode):
        """Sets the parse_mode of this TelegramNotificationRuleBase.

        Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .

        :param parse_mode: The parse_mode of this TelegramNotificationRuleBase.
        :type parse_mode: str
        """
        allowed_values = ["MarkdownV2", "HTML", "Markdown"]  # noqa: E501
        if parse_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `parse_mode` ({0}), must be one of {1}"
                .format(parse_mode, allowed_values)
            )

        self._parse_mode = parse_mode

    @property
    def type(self):
        """Gets the type of this TelegramNotificationRuleBase.

        The discriminator between other types of notification rules is \"telegram\".

        :return: The type of this TelegramNotificationRuleBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TelegramNotificationRuleBase.

        The discriminator between other types of notification rules is \"telegram\".

        :param type: The type of this TelegramNotificationRuleBase.
        :type type: str
        """
        allowed_values = ["telegram"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
