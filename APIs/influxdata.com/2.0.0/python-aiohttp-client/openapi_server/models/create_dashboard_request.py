# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDashboardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, org_id: str=None):
        """CreateDashboardRequest - a model defined in OpenAPI

        :param description: The description of this CreateDashboardRequest.
        :param name: The name of this CreateDashboardRequest.
        :param org_id: The org_id of this CreateDashboardRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'org_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'org_id': 'orgID'
        }

        self._description = description
        self._name = name
        self._org_id = org_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDashboardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDashboardRequest of this CreateDashboardRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateDashboardRequest.

        The user-facing description of the dashboard.

        :return: The description of this CreateDashboardRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDashboardRequest.

        The user-facing description of the dashboard.

        :param description: The description of this CreateDashboardRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateDashboardRequest.

        The user-facing name of the dashboard.

        :return: The name of this CreateDashboardRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateDashboardRequest.

        The user-facing name of the dashboard.

        :param name: The name of this CreateDashboardRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this CreateDashboardRequest.

        The ID of the organization that owns the dashboard.

        :return: The org_id of this CreateDashboardRequest.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CreateDashboardRequest.

        The ID of the organization that owns the dashboard.

        :param org_id: The org_id of this CreateDashboardRequest.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id
