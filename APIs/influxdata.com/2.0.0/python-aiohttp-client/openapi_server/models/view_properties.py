# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.axes import Axes
from openapi_server.models.band_view_properties import BandViewProperties
from openapi_server.models.check import Check
from openapi_server.models.check_view_properties import CheckViewProperties
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server.models.dashboard_query import DashboardQuery
from openapi_server.models.decimal_places import DecimalPlaces
from openapi_server.models.gauge_view_properties import GaugeViewProperties
from openapi_server.models.geo_view_layer import GeoViewLayer
from openapi_server.models.geo_view_properties import GeoViewProperties
from openapi_server.models.geo_view_properties_center import GeoViewPropertiesCenter
from openapi_server.models.heatmap_view_properties import HeatmapViewProperties
from openapi_server.models.histogram_view_properties import HistogramViewProperties
from openapi_server.models.line_plus_single_stat_properties import LinePlusSingleStatProperties
from openapi_server.models.markdown_view_properties import MarkdownViewProperties
from openapi_server.models.mosaic_view_properties import MosaicViewProperties
from openapi_server.models.renamable_field import RenamableField
from openapi_server.models.scatter_view_properties import ScatterViewProperties
from openapi_server.models.single_stat_view_properties import SingleStatViewProperties
from openapi_server.models.static_legend import StaticLegend
from openapi_server.models.table_view_properties import TableViewProperties
from openapi_server.models.table_view_properties_table_options import TableViewPropertiesTableOptions
from openapi_server.models.xy_geom import XYGeom
from openapi_server.models.xy_view_properties import XYViewProperties
from openapi_server import util


class ViewProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, axes: Axes=None, colors: List[DashboardColor]=None, decimal_places: DecimalPlaces=None, generate_x_axis_ticks: List[str]=None, generate_y_axis_ticks: List[str]=None, hover_dimension: str=None, legend_colorize_rows: bool=None, legend_hide: bool=None, legend_opacity: float=None, legend_orientation_threshold: int=None, note: str=None, position: str=None, prefix: str=None, queries: List[DashboardQuery]=None, shade_below: bool=None, shape: str=None, show_note_when_empty: bool=None, static_legend: StaticLegend=None, suffix: str=None, time_format: str=None, type: str=None, x_column: str=None, x_tick_start: float=None, x_tick_step: float=None, x_total_ticks: int=None, y_column: str=None, y_tick_start: float=None, y_tick_step: float=None, y_total_ticks: int=None, geom: XYGeom=None, tick_prefix: str=None, tick_suffix: str=None, bin_count: int=None, fill_columns: List[str]=None, x_axis_label: str=None, x_domain: List[float]=None, field_options: List[RenamableField]=None, table_options: TableViewPropertiesTableOptions=None, check: Check=None, check_id: str=None, symbol_columns: List[str]=None, x_prefix: str=None, x_suffix: str=None, y_axis_label: str=None, y_domain: List[float]=None, y_prefix: str=None, y_suffix: str=None, bin_size: float=None, y_label_column_separator: str=None, y_label_columns: List[str]=None, y_series_columns: List[str]=None, lower_column: str=None, main_column: str=None, upper_column: str=None, allow_pan_and_zoom: bool=True, center: GeoViewPropertiesCenter=None, detect_coordinate_fields: bool=True, layers: List[GeoViewLayer]=None, map_style: str=None, zoom: float=None):
        """ViewProperties - a model defined in OpenAPI

        :param axes: The axes of this ViewProperties.
        :param colors: The colors of this ViewProperties.
        :param decimal_places: The decimal_places of this ViewProperties.
        :param generate_x_axis_ticks: The generate_x_axis_ticks of this ViewProperties.
        :param generate_y_axis_ticks: The generate_y_axis_ticks of this ViewProperties.
        :param hover_dimension: The hover_dimension of this ViewProperties.
        :param legend_colorize_rows: The legend_colorize_rows of this ViewProperties.
        :param legend_hide: The legend_hide of this ViewProperties.
        :param legend_opacity: The legend_opacity of this ViewProperties.
        :param legend_orientation_threshold: The legend_orientation_threshold of this ViewProperties.
        :param note: The note of this ViewProperties.
        :param position: The position of this ViewProperties.
        :param prefix: The prefix of this ViewProperties.
        :param queries: The queries of this ViewProperties.
        :param shade_below: The shade_below of this ViewProperties.
        :param shape: The shape of this ViewProperties.
        :param show_note_when_empty: The show_note_when_empty of this ViewProperties.
        :param static_legend: The static_legend of this ViewProperties.
        :param suffix: The suffix of this ViewProperties.
        :param time_format: The time_format of this ViewProperties.
        :param type: The type of this ViewProperties.
        :param x_column: The x_column of this ViewProperties.
        :param x_tick_start: The x_tick_start of this ViewProperties.
        :param x_tick_step: The x_tick_step of this ViewProperties.
        :param x_total_ticks: The x_total_ticks of this ViewProperties.
        :param y_column: The y_column of this ViewProperties.
        :param y_tick_start: The y_tick_start of this ViewProperties.
        :param y_tick_step: The y_tick_step of this ViewProperties.
        :param y_total_ticks: The y_total_ticks of this ViewProperties.
        :param geom: The geom of this ViewProperties.
        :param tick_prefix: The tick_prefix of this ViewProperties.
        :param tick_suffix: The tick_suffix of this ViewProperties.
        :param bin_count: The bin_count of this ViewProperties.
        :param fill_columns: The fill_columns of this ViewProperties.
        :param x_axis_label: The x_axis_label of this ViewProperties.
        :param x_domain: The x_domain of this ViewProperties.
        :param field_options: The field_options of this ViewProperties.
        :param table_options: The table_options of this ViewProperties.
        :param check: The check of this ViewProperties.
        :param check_id: The check_id of this ViewProperties.
        :param symbol_columns: The symbol_columns of this ViewProperties.
        :param x_prefix: The x_prefix of this ViewProperties.
        :param x_suffix: The x_suffix of this ViewProperties.
        :param y_axis_label: The y_axis_label of this ViewProperties.
        :param y_domain: The y_domain of this ViewProperties.
        :param y_prefix: The y_prefix of this ViewProperties.
        :param y_suffix: The y_suffix of this ViewProperties.
        :param bin_size: The bin_size of this ViewProperties.
        :param y_label_column_separator: The y_label_column_separator of this ViewProperties.
        :param y_label_columns: The y_label_columns of this ViewProperties.
        :param y_series_columns: The y_series_columns of this ViewProperties.
        :param lower_column: The lower_column of this ViewProperties.
        :param main_column: The main_column of this ViewProperties.
        :param upper_column: The upper_column of this ViewProperties.
        :param allow_pan_and_zoom: The allow_pan_and_zoom of this ViewProperties.
        :param center: The center of this ViewProperties.
        :param detect_coordinate_fields: The detect_coordinate_fields of this ViewProperties.
        :param layers: The layers of this ViewProperties.
        :param map_style: The map_style of this ViewProperties.
        :param zoom: The zoom of this ViewProperties.
        """
        self.openapi_types = {
            'axes': Axes,
            'colors': List[DashboardColor],
            'decimal_places': DecimalPlaces,
            'generate_x_axis_ticks': List[str],
            'generate_y_axis_ticks': List[str],
            'hover_dimension': str,
            'legend_colorize_rows': bool,
            'legend_hide': bool,
            'legend_opacity': float,
            'legend_orientation_threshold': int,
            'note': str,
            'position': str,
            'prefix': str,
            'queries': List[DashboardQuery],
            'shade_below': bool,
            'shape': str,
            'show_note_when_empty': bool,
            'static_legend': StaticLegend,
            'suffix': str,
            'time_format': str,
            'type': str,
            'x_column': str,
            'x_tick_start': float,
            'x_tick_step': float,
            'x_total_ticks': int,
            'y_column': str,
            'y_tick_start': float,
            'y_tick_step': float,
            'y_total_ticks': int,
            'geom': XYGeom,
            'tick_prefix': str,
            'tick_suffix': str,
            'bin_count': int,
            'fill_columns': List[str],
            'x_axis_label': str,
            'x_domain': List[float],
            'field_options': List[RenamableField],
            'table_options': TableViewPropertiesTableOptions,
            'check': Check,
            'check_id': str,
            'symbol_columns': List[str],
            'x_prefix': str,
            'x_suffix': str,
            'y_axis_label': str,
            'y_domain': List[float],
            'y_prefix': str,
            'y_suffix': str,
            'bin_size': float,
            'y_label_column_separator': str,
            'y_label_columns': List[str],
            'y_series_columns': List[str],
            'lower_column': str,
            'main_column': str,
            'upper_column': str,
            'allow_pan_and_zoom': bool,
            'center': GeoViewPropertiesCenter,
            'detect_coordinate_fields': bool,
            'layers': List[GeoViewLayer],
            'map_style': str,
            'zoom': float
        }

        self.attribute_map = {
            'axes': 'axes',
            'colors': 'colors',
            'decimal_places': 'decimalPlaces',
            'generate_x_axis_ticks': 'generateXAxisTicks',
            'generate_y_axis_ticks': 'generateYAxisTicks',
            'hover_dimension': 'hoverDimension',
            'legend_colorize_rows': 'legendColorizeRows',
            'legend_hide': 'legendHide',
            'legend_opacity': 'legendOpacity',
            'legend_orientation_threshold': 'legendOrientationThreshold',
            'note': 'note',
            'position': 'position',
            'prefix': 'prefix',
            'queries': 'queries',
            'shade_below': 'shadeBelow',
            'shape': 'shape',
            'show_note_when_empty': 'showNoteWhenEmpty',
            'static_legend': 'staticLegend',
            'suffix': 'suffix',
            'time_format': 'timeFormat',
            'type': 'type',
            'x_column': 'xColumn',
            'x_tick_start': 'xTickStart',
            'x_tick_step': 'xTickStep',
            'x_total_ticks': 'xTotalTicks',
            'y_column': 'yColumn',
            'y_tick_start': 'yTickStart',
            'y_tick_step': 'yTickStep',
            'y_total_ticks': 'yTotalTicks',
            'geom': 'geom',
            'tick_prefix': 'tickPrefix',
            'tick_suffix': 'tickSuffix',
            'bin_count': 'binCount',
            'fill_columns': 'fillColumns',
            'x_axis_label': 'xAxisLabel',
            'x_domain': 'xDomain',
            'field_options': 'fieldOptions',
            'table_options': 'tableOptions',
            'check': 'check',
            'check_id': 'checkID',
            'symbol_columns': 'symbolColumns',
            'x_prefix': 'xPrefix',
            'x_suffix': 'xSuffix',
            'y_axis_label': 'yAxisLabel',
            'y_domain': 'yDomain',
            'y_prefix': 'yPrefix',
            'y_suffix': 'ySuffix',
            'bin_size': 'binSize',
            'y_label_column_separator': 'yLabelColumnSeparator',
            'y_label_columns': 'yLabelColumns',
            'y_series_columns': 'ySeriesColumns',
            'lower_column': 'lowerColumn',
            'main_column': 'mainColumn',
            'upper_column': 'upperColumn',
            'allow_pan_and_zoom': 'allowPanAndZoom',
            'center': 'center',
            'detect_coordinate_fields': 'detectCoordinateFields',
            'layers': 'layers',
            'map_style': 'mapStyle',
            'zoom': 'zoom'
        }

        self._axes = axes
        self._colors = colors
        self._decimal_places = decimal_places
        self._generate_x_axis_ticks = generate_x_axis_ticks
        self._generate_y_axis_ticks = generate_y_axis_ticks
        self._hover_dimension = hover_dimension
        self._legend_colorize_rows = legend_colorize_rows
        self._legend_hide = legend_hide
        self._legend_opacity = legend_opacity
        self._legend_orientation_threshold = legend_orientation_threshold
        self._note = note
        self._position = position
        self._prefix = prefix
        self._queries = queries
        self._shade_below = shade_below
        self._shape = shape
        self._show_note_when_empty = show_note_when_empty
        self._static_legend = static_legend
        self._suffix = suffix
        self._time_format = time_format
        self._type = type
        self._x_column = x_column
        self._x_tick_start = x_tick_start
        self._x_tick_step = x_tick_step
        self._x_total_ticks = x_total_ticks
        self._y_column = y_column
        self._y_tick_start = y_tick_start
        self._y_tick_step = y_tick_step
        self._y_total_ticks = y_total_ticks
        self._geom = geom
        self._tick_prefix = tick_prefix
        self._tick_suffix = tick_suffix
        self._bin_count = bin_count
        self._fill_columns = fill_columns
        self._x_axis_label = x_axis_label
        self._x_domain = x_domain
        self._field_options = field_options
        self._table_options = table_options
        self._check = check
        self._check_id = check_id
        self._symbol_columns = symbol_columns
        self._x_prefix = x_prefix
        self._x_suffix = x_suffix
        self._y_axis_label = y_axis_label
        self._y_domain = y_domain
        self._y_prefix = y_prefix
        self._y_suffix = y_suffix
        self._bin_size = bin_size
        self._y_label_column_separator = y_label_column_separator
        self._y_label_columns = y_label_columns
        self._y_series_columns = y_series_columns
        self._lower_column = lower_column
        self._main_column = main_column
        self._upper_column = upper_column
        self._allow_pan_and_zoom = allow_pan_and_zoom
        self._center = center
        self._detect_coordinate_fields = detect_coordinate_fields
        self._layers = layers
        self._map_style = map_style
        self._zoom = zoom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViewProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViewProperties of this ViewProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def axes(self):
        """Gets the axes of this ViewProperties.


        :return: The axes of this ViewProperties.
        :rtype: Axes
        """
        return self._axes

    @axes.setter
    def axes(self, axes):
        """Sets the axes of this ViewProperties.


        :param axes: The axes of this ViewProperties.
        :type axes: Axes
        """
        if axes is None:
            raise ValueError("Invalid value for `axes`, must not be `None`")

        self._axes = axes

    @property
    def colors(self):
        """Gets the colors of this ViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this ViewProperties.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this ViewProperties.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this ViewProperties.
        :type colors: List[DashboardColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def decimal_places(self):
        """Gets the decimal_places of this ViewProperties.


        :return: The decimal_places of this ViewProperties.
        :rtype: DecimalPlaces
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this ViewProperties.


        :param decimal_places: The decimal_places of this ViewProperties.
        :type decimal_places: DecimalPlaces
        """
        if decimal_places is None:
            raise ValueError("Invalid value for `decimal_places`, must not be `None`")

        self._decimal_places = decimal_places

    @property
    def generate_x_axis_ticks(self):
        """Gets the generate_x_axis_ticks of this ViewProperties.


        :return: The generate_x_axis_ticks of this ViewProperties.
        :rtype: List[str]
        """
        return self._generate_x_axis_ticks

    @generate_x_axis_ticks.setter
    def generate_x_axis_ticks(self, generate_x_axis_ticks):
        """Sets the generate_x_axis_ticks of this ViewProperties.


        :param generate_x_axis_ticks: The generate_x_axis_ticks of this ViewProperties.
        :type generate_x_axis_ticks: List[str]
        """

        self._generate_x_axis_ticks = generate_x_axis_ticks

    @property
    def generate_y_axis_ticks(self):
        """Gets the generate_y_axis_ticks of this ViewProperties.


        :return: The generate_y_axis_ticks of this ViewProperties.
        :rtype: List[str]
        """
        return self._generate_y_axis_ticks

    @generate_y_axis_ticks.setter
    def generate_y_axis_ticks(self, generate_y_axis_ticks):
        """Sets the generate_y_axis_ticks of this ViewProperties.


        :param generate_y_axis_ticks: The generate_y_axis_ticks of this ViewProperties.
        :type generate_y_axis_ticks: List[str]
        """

        self._generate_y_axis_ticks = generate_y_axis_ticks

    @property
    def hover_dimension(self):
        """Gets the hover_dimension of this ViewProperties.


        :return: The hover_dimension of this ViewProperties.
        :rtype: str
        """
        return self._hover_dimension

    @hover_dimension.setter
    def hover_dimension(self, hover_dimension):
        """Sets the hover_dimension of this ViewProperties.


        :param hover_dimension: The hover_dimension of this ViewProperties.
        :type hover_dimension: str
        """
        allowed_values = ["auto", "x", "y", "xy"]  # noqa: E501
        if hover_dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `hover_dimension` ({0}), must be one of {1}"
                .format(hover_dimension, allowed_values)
            )

        self._hover_dimension = hover_dimension

    @property
    def legend_colorize_rows(self):
        """Gets the legend_colorize_rows of this ViewProperties.


        :return: The legend_colorize_rows of this ViewProperties.
        :rtype: bool
        """
        return self._legend_colorize_rows

    @legend_colorize_rows.setter
    def legend_colorize_rows(self, legend_colorize_rows):
        """Sets the legend_colorize_rows of this ViewProperties.


        :param legend_colorize_rows: The legend_colorize_rows of this ViewProperties.
        :type legend_colorize_rows: bool
        """

        self._legend_colorize_rows = legend_colorize_rows

    @property
    def legend_hide(self):
        """Gets the legend_hide of this ViewProperties.


        :return: The legend_hide of this ViewProperties.
        :rtype: bool
        """
        return self._legend_hide

    @legend_hide.setter
    def legend_hide(self, legend_hide):
        """Sets the legend_hide of this ViewProperties.


        :param legend_hide: The legend_hide of this ViewProperties.
        :type legend_hide: bool
        """

        self._legend_hide = legend_hide

    @property
    def legend_opacity(self):
        """Gets the legend_opacity of this ViewProperties.


        :return: The legend_opacity of this ViewProperties.
        :rtype: float
        """
        return self._legend_opacity

    @legend_opacity.setter
    def legend_opacity(self, legend_opacity):
        """Sets the legend_opacity of this ViewProperties.


        :param legend_opacity: The legend_opacity of this ViewProperties.
        :type legend_opacity: float
        """

        self._legend_opacity = legend_opacity

    @property
    def legend_orientation_threshold(self):
        """Gets the legend_orientation_threshold of this ViewProperties.


        :return: The legend_orientation_threshold of this ViewProperties.
        :rtype: int
        """
        return self._legend_orientation_threshold

    @legend_orientation_threshold.setter
    def legend_orientation_threshold(self, legend_orientation_threshold):
        """Sets the legend_orientation_threshold of this ViewProperties.


        :param legend_orientation_threshold: The legend_orientation_threshold of this ViewProperties.
        :type legend_orientation_threshold: int
        """

        self._legend_orientation_threshold = legend_orientation_threshold

    @property
    def note(self):
        """Gets the note of this ViewProperties.


        :return: The note of this ViewProperties.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ViewProperties.


        :param note: The note of this ViewProperties.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def position(self):
        """Gets the position of this ViewProperties.


        :return: The position of this ViewProperties.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ViewProperties.


        :param position: The position of this ViewProperties.
        :type position: str
        """
        allowed_values = ["overlaid", "stacked"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def prefix(self):
        """Gets the prefix of this ViewProperties.


        :return: The prefix of this ViewProperties.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ViewProperties.


        :param prefix: The prefix of this ViewProperties.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def queries(self):
        """Gets the queries of this ViewProperties.


        :return: The queries of this ViewProperties.
        :rtype: List[DashboardQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this ViewProperties.


        :param queries: The queries of this ViewProperties.
        :type queries: List[DashboardQuery]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def shade_below(self):
        """Gets the shade_below of this ViewProperties.


        :return: The shade_below of this ViewProperties.
        :rtype: bool
        """
        return self._shade_below

    @shade_below.setter
    def shade_below(self, shade_below):
        """Sets the shade_below of this ViewProperties.


        :param shade_below: The shade_below of this ViewProperties.
        :type shade_below: bool
        """

        self._shade_below = shade_below

    @property
    def shape(self):
        """Gets the shape of this ViewProperties.


        :return: The shape of this ViewProperties.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this ViewProperties.


        :param shape: The shape of this ViewProperties.
        :type shape: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def show_note_when_empty(self):
        """Gets the show_note_when_empty of this ViewProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this ViewProperties.
        :rtype: bool
        """
        return self._show_note_when_empty

    @show_note_when_empty.setter
    def show_note_when_empty(self, show_note_when_empty):
        """Sets the show_note_when_empty of this ViewProperties.

        If true, will display note when empty

        :param show_note_when_empty: The show_note_when_empty of this ViewProperties.
        :type show_note_when_empty: bool
        """
        if show_note_when_empty is None:
            raise ValueError("Invalid value for `show_note_when_empty`, must not be `None`")

        self._show_note_when_empty = show_note_when_empty

    @property
    def static_legend(self):
        """Gets the static_legend of this ViewProperties.


        :return: The static_legend of this ViewProperties.
        :rtype: StaticLegend
        """
        return self._static_legend

    @static_legend.setter
    def static_legend(self, static_legend):
        """Sets the static_legend of this ViewProperties.


        :param static_legend: The static_legend of this ViewProperties.
        :type static_legend: StaticLegend
        """

        self._static_legend = static_legend

    @property
    def suffix(self):
        """Gets the suffix of this ViewProperties.


        :return: The suffix of this ViewProperties.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this ViewProperties.


        :param suffix: The suffix of this ViewProperties.
        :type suffix: str
        """
        if suffix is None:
            raise ValueError("Invalid value for `suffix`, must not be `None`")

        self._suffix = suffix

    @property
    def time_format(self):
        """Gets the time_format of this ViewProperties.


        :return: The time_format of this ViewProperties.
        :rtype: str
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this ViewProperties.


        :param time_format: The time_format of this ViewProperties.
        :type time_format: str
        """
        if time_format is None:
            raise ValueError("Invalid value for `time_format`, must not be `None`")

        self._time_format = time_format

    @property
    def type(self):
        """Gets the type of this ViewProperties.


        :return: The type of this ViewProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ViewProperties.


        :param type: The type of this ViewProperties.
        :type type: str
        """
        allowed_values = ["line-plus-single-stat", "xy", "single-stat", "histogram", "gauge", "table", "markdown", "check", "scatter", "heatmap", "mosaic", "band", "geo"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def x_column(self):
        """Gets the x_column of this ViewProperties.


        :return: The x_column of this ViewProperties.
        :rtype: str
        """
        return self._x_column

    @x_column.setter
    def x_column(self, x_column):
        """Sets the x_column of this ViewProperties.


        :param x_column: The x_column of this ViewProperties.
        :type x_column: str
        """
        if x_column is None:
            raise ValueError("Invalid value for `x_column`, must not be `None`")

        self._x_column = x_column

    @property
    def x_tick_start(self):
        """Gets the x_tick_start of this ViewProperties.


        :return: The x_tick_start of this ViewProperties.
        :rtype: float
        """
        return self._x_tick_start

    @x_tick_start.setter
    def x_tick_start(self, x_tick_start):
        """Sets the x_tick_start of this ViewProperties.


        :param x_tick_start: The x_tick_start of this ViewProperties.
        :type x_tick_start: float
        """

        self._x_tick_start = x_tick_start

    @property
    def x_tick_step(self):
        """Gets the x_tick_step of this ViewProperties.


        :return: The x_tick_step of this ViewProperties.
        :rtype: float
        """
        return self._x_tick_step

    @x_tick_step.setter
    def x_tick_step(self, x_tick_step):
        """Sets the x_tick_step of this ViewProperties.


        :param x_tick_step: The x_tick_step of this ViewProperties.
        :type x_tick_step: float
        """

        self._x_tick_step = x_tick_step

    @property
    def x_total_ticks(self):
        """Gets the x_total_ticks of this ViewProperties.


        :return: The x_total_ticks of this ViewProperties.
        :rtype: int
        """
        return self._x_total_ticks

    @x_total_ticks.setter
    def x_total_ticks(self, x_total_ticks):
        """Sets the x_total_ticks of this ViewProperties.


        :param x_total_ticks: The x_total_ticks of this ViewProperties.
        :type x_total_ticks: int
        """

        self._x_total_ticks = x_total_ticks

    @property
    def y_column(self):
        """Gets the y_column of this ViewProperties.


        :return: The y_column of this ViewProperties.
        :rtype: str
        """
        return self._y_column

    @y_column.setter
    def y_column(self, y_column):
        """Sets the y_column of this ViewProperties.


        :param y_column: The y_column of this ViewProperties.
        :type y_column: str
        """
        if y_column is None:
            raise ValueError("Invalid value for `y_column`, must not be `None`")

        self._y_column = y_column

    @property
    def y_tick_start(self):
        """Gets the y_tick_start of this ViewProperties.


        :return: The y_tick_start of this ViewProperties.
        :rtype: float
        """
        return self._y_tick_start

    @y_tick_start.setter
    def y_tick_start(self, y_tick_start):
        """Sets the y_tick_start of this ViewProperties.


        :param y_tick_start: The y_tick_start of this ViewProperties.
        :type y_tick_start: float
        """

        self._y_tick_start = y_tick_start

    @property
    def y_tick_step(self):
        """Gets the y_tick_step of this ViewProperties.


        :return: The y_tick_step of this ViewProperties.
        :rtype: float
        """
        return self._y_tick_step

    @y_tick_step.setter
    def y_tick_step(self, y_tick_step):
        """Sets the y_tick_step of this ViewProperties.


        :param y_tick_step: The y_tick_step of this ViewProperties.
        :type y_tick_step: float
        """

        self._y_tick_step = y_tick_step

    @property
    def y_total_ticks(self):
        """Gets the y_total_ticks of this ViewProperties.


        :return: The y_total_ticks of this ViewProperties.
        :rtype: int
        """
        return self._y_total_ticks

    @y_total_ticks.setter
    def y_total_ticks(self, y_total_ticks):
        """Sets the y_total_ticks of this ViewProperties.


        :param y_total_ticks: The y_total_ticks of this ViewProperties.
        :type y_total_ticks: int
        """

        self._y_total_ticks = y_total_ticks

    @property
    def geom(self):
        """Gets the geom of this ViewProperties.


        :return: The geom of this ViewProperties.
        :rtype: XYGeom
        """
        return self._geom

    @geom.setter
    def geom(self, geom):
        """Sets the geom of this ViewProperties.


        :param geom: The geom of this ViewProperties.
        :type geom: XYGeom
        """
        if geom is None:
            raise ValueError("Invalid value for `geom`, must not be `None`")

        self._geom = geom

    @property
    def tick_prefix(self):
        """Gets the tick_prefix of this ViewProperties.


        :return: The tick_prefix of this ViewProperties.
        :rtype: str
        """
        return self._tick_prefix

    @tick_prefix.setter
    def tick_prefix(self, tick_prefix):
        """Sets the tick_prefix of this ViewProperties.


        :param tick_prefix: The tick_prefix of this ViewProperties.
        :type tick_prefix: str
        """
        if tick_prefix is None:
            raise ValueError("Invalid value for `tick_prefix`, must not be `None`")

        self._tick_prefix = tick_prefix

    @property
    def tick_suffix(self):
        """Gets the tick_suffix of this ViewProperties.


        :return: The tick_suffix of this ViewProperties.
        :rtype: str
        """
        return self._tick_suffix

    @tick_suffix.setter
    def tick_suffix(self, tick_suffix):
        """Sets the tick_suffix of this ViewProperties.


        :param tick_suffix: The tick_suffix of this ViewProperties.
        :type tick_suffix: str
        """
        if tick_suffix is None:
            raise ValueError("Invalid value for `tick_suffix`, must not be `None`")

        self._tick_suffix = tick_suffix

    @property
    def bin_count(self):
        """Gets the bin_count of this ViewProperties.


        :return: The bin_count of this ViewProperties.
        :rtype: int
        """
        return self._bin_count

    @bin_count.setter
    def bin_count(self, bin_count):
        """Sets the bin_count of this ViewProperties.


        :param bin_count: The bin_count of this ViewProperties.
        :type bin_count: int
        """
        if bin_count is None:
            raise ValueError("Invalid value for `bin_count`, must not be `None`")

        self._bin_count = bin_count

    @property
    def fill_columns(self):
        """Gets the fill_columns of this ViewProperties.


        :return: The fill_columns of this ViewProperties.
        :rtype: List[str]
        """
        return self._fill_columns

    @fill_columns.setter
    def fill_columns(self, fill_columns):
        """Sets the fill_columns of this ViewProperties.


        :param fill_columns: The fill_columns of this ViewProperties.
        :type fill_columns: List[str]
        """
        if fill_columns is None:
            raise ValueError("Invalid value for `fill_columns`, must not be `None`")

        self._fill_columns = fill_columns

    @property
    def x_axis_label(self):
        """Gets the x_axis_label of this ViewProperties.


        :return: The x_axis_label of this ViewProperties.
        :rtype: str
        """
        return self._x_axis_label

    @x_axis_label.setter
    def x_axis_label(self, x_axis_label):
        """Sets the x_axis_label of this ViewProperties.


        :param x_axis_label: The x_axis_label of this ViewProperties.
        :type x_axis_label: str
        """
        if x_axis_label is None:
            raise ValueError("Invalid value for `x_axis_label`, must not be `None`")

        self._x_axis_label = x_axis_label

    @property
    def x_domain(self):
        """Gets the x_domain of this ViewProperties.


        :return: The x_domain of this ViewProperties.
        :rtype: List[float]
        """
        return self._x_domain

    @x_domain.setter
    def x_domain(self, x_domain):
        """Sets the x_domain of this ViewProperties.


        :param x_domain: The x_domain of this ViewProperties.
        :type x_domain: List[float]
        """
        if x_domain is None:
            raise ValueError("Invalid value for `x_domain`, must not be `None`")
        if x_domain is not None and len(x_domain) > 2:
            raise ValueError("Invalid value for `x_domain`, number of items must be less than or equal to `2`")

        self._x_domain = x_domain

    @property
    def field_options(self):
        """Gets the field_options of this ViewProperties.

        fieldOptions represent the fields retrieved by the query with customization options

        :return: The field_options of this ViewProperties.
        :rtype: List[RenamableField]
        """
        return self._field_options

    @field_options.setter
    def field_options(self, field_options):
        """Sets the field_options of this ViewProperties.

        fieldOptions represent the fields retrieved by the query with customization options

        :param field_options: The field_options of this ViewProperties.
        :type field_options: List[RenamableField]
        """
        if field_options is None:
            raise ValueError("Invalid value for `field_options`, must not be `None`")

        self._field_options = field_options

    @property
    def table_options(self):
        """Gets the table_options of this ViewProperties.


        :return: The table_options of this ViewProperties.
        :rtype: TableViewPropertiesTableOptions
        """
        return self._table_options

    @table_options.setter
    def table_options(self, table_options):
        """Sets the table_options of this ViewProperties.


        :param table_options: The table_options of this ViewProperties.
        :type table_options: TableViewPropertiesTableOptions
        """
        if table_options is None:
            raise ValueError("Invalid value for `table_options`, must not be `None`")

        self._table_options = table_options

    @property
    def check(self):
        """Gets the check of this ViewProperties.


        :return: The check of this ViewProperties.
        :rtype: Check
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this ViewProperties.


        :param check: The check of this ViewProperties.
        :type check: Check
        """

        self._check = check

    @property
    def check_id(self):
        """Gets the check_id of this ViewProperties.


        :return: The check_id of this ViewProperties.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this ViewProperties.


        :param check_id: The check_id of this ViewProperties.
        :type check_id: str
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")

        self._check_id = check_id

    @property
    def symbol_columns(self):
        """Gets the symbol_columns of this ViewProperties.


        :return: The symbol_columns of this ViewProperties.
        :rtype: List[str]
        """
        return self._symbol_columns

    @symbol_columns.setter
    def symbol_columns(self, symbol_columns):
        """Sets the symbol_columns of this ViewProperties.


        :param symbol_columns: The symbol_columns of this ViewProperties.
        :type symbol_columns: List[str]
        """
        if symbol_columns is None:
            raise ValueError("Invalid value for `symbol_columns`, must not be `None`")

        self._symbol_columns = symbol_columns

    @property
    def x_prefix(self):
        """Gets the x_prefix of this ViewProperties.


        :return: The x_prefix of this ViewProperties.
        :rtype: str
        """
        return self._x_prefix

    @x_prefix.setter
    def x_prefix(self, x_prefix):
        """Sets the x_prefix of this ViewProperties.


        :param x_prefix: The x_prefix of this ViewProperties.
        :type x_prefix: str
        """
        if x_prefix is None:
            raise ValueError("Invalid value for `x_prefix`, must not be `None`")

        self._x_prefix = x_prefix

    @property
    def x_suffix(self):
        """Gets the x_suffix of this ViewProperties.


        :return: The x_suffix of this ViewProperties.
        :rtype: str
        """
        return self._x_suffix

    @x_suffix.setter
    def x_suffix(self, x_suffix):
        """Sets the x_suffix of this ViewProperties.


        :param x_suffix: The x_suffix of this ViewProperties.
        :type x_suffix: str
        """
        if x_suffix is None:
            raise ValueError("Invalid value for `x_suffix`, must not be `None`")

        self._x_suffix = x_suffix

    @property
    def y_axis_label(self):
        """Gets the y_axis_label of this ViewProperties.


        :return: The y_axis_label of this ViewProperties.
        :rtype: str
        """
        return self._y_axis_label

    @y_axis_label.setter
    def y_axis_label(self, y_axis_label):
        """Sets the y_axis_label of this ViewProperties.


        :param y_axis_label: The y_axis_label of this ViewProperties.
        :type y_axis_label: str
        """
        if y_axis_label is None:
            raise ValueError("Invalid value for `y_axis_label`, must not be `None`")

        self._y_axis_label = y_axis_label

    @property
    def y_domain(self):
        """Gets the y_domain of this ViewProperties.


        :return: The y_domain of this ViewProperties.
        :rtype: List[float]
        """
        return self._y_domain

    @y_domain.setter
    def y_domain(self, y_domain):
        """Sets the y_domain of this ViewProperties.


        :param y_domain: The y_domain of this ViewProperties.
        :type y_domain: List[float]
        """
        if y_domain is None:
            raise ValueError("Invalid value for `y_domain`, must not be `None`")
        if y_domain is not None and len(y_domain) > 2:
            raise ValueError("Invalid value for `y_domain`, number of items must be less than or equal to `2`")

        self._y_domain = y_domain

    @property
    def y_prefix(self):
        """Gets the y_prefix of this ViewProperties.


        :return: The y_prefix of this ViewProperties.
        :rtype: str
        """
        return self._y_prefix

    @y_prefix.setter
    def y_prefix(self, y_prefix):
        """Sets the y_prefix of this ViewProperties.


        :param y_prefix: The y_prefix of this ViewProperties.
        :type y_prefix: str
        """
        if y_prefix is None:
            raise ValueError("Invalid value for `y_prefix`, must not be `None`")

        self._y_prefix = y_prefix

    @property
    def y_suffix(self):
        """Gets the y_suffix of this ViewProperties.


        :return: The y_suffix of this ViewProperties.
        :rtype: str
        """
        return self._y_suffix

    @y_suffix.setter
    def y_suffix(self, y_suffix):
        """Sets the y_suffix of this ViewProperties.


        :param y_suffix: The y_suffix of this ViewProperties.
        :type y_suffix: str
        """
        if y_suffix is None:
            raise ValueError("Invalid value for `y_suffix`, must not be `None`")

        self._y_suffix = y_suffix

    @property
    def bin_size(self):
        """Gets the bin_size of this ViewProperties.


        :return: The bin_size of this ViewProperties.
        :rtype: float
        """
        return self._bin_size

    @bin_size.setter
    def bin_size(self, bin_size):
        """Sets the bin_size of this ViewProperties.


        :param bin_size: The bin_size of this ViewProperties.
        :type bin_size: float
        """
        if bin_size is None:
            raise ValueError("Invalid value for `bin_size`, must not be `None`")

        self._bin_size = bin_size

    @property
    def y_label_column_separator(self):
        """Gets the y_label_column_separator of this ViewProperties.


        :return: The y_label_column_separator of this ViewProperties.
        :rtype: str
        """
        return self._y_label_column_separator

    @y_label_column_separator.setter
    def y_label_column_separator(self, y_label_column_separator):
        """Sets the y_label_column_separator of this ViewProperties.


        :param y_label_column_separator: The y_label_column_separator of this ViewProperties.
        :type y_label_column_separator: str
        """

        self._y_label_column_separator = y_label_column_separator

    @property
    def y_label_columns(self):
        """Gets the y_label_columns of this ViewProperties.


        :return: The y_label_columns of this ViewProperties.
        :rtype: List[str]
        """
        return self._y_label_columns

    @y_label_columns.setter
    def y_label_columns(self, y_label_columns):
        """Sets the y_label_columns of this ViewProperties.


        :param y_label_columns: The y_label_columns of this ViewProperties.
        :type y_label_columns: List[str]
        """

        self._y_label_columns = y_label_columns

    @property
    def y_series_columns(self):
        """Gets the y_series_columns of this ViewProperties.


        :return: The y_series_columns of this ViewProperties.
        :rtype: List[str]
        """
        return self._y_series_columns

    @y_series_columns.setter
    def y_series_columns(self, y_series_columns):
        """Sets the y_series_columns of this ViewProperties.


        :param y_series_columns: The y_series_columns of this ViewProperties.
        :type y_series_columns: List[str]
        """
        if y_series_columns is None:
            raise ValueError("Invalid value for `y_series_columns`, must not be `None`")

        self._y_series_columns = y_series_columns

    @property
    def lower_column(self):
        """Gets the lower_column of this ViewProperties.


        :return: The lower_column of this ViewProperties.
        :rtype: str
        """
        return self._lower_column

    @lower_column.setter
    def lower_column(self, lower_column):
        """Sets the lower_column of this ViewProperties.


        :param lower_column: The lower_column of this ViewProperties.
        :type lower_column: str
        """

        self._lower_column = lower_column

    @property
    def main_column(self):
        """Gets the main_column of this ViewProperties.


        :return: The main_column of this ViewProperties.
        :rtype: str
        """
        return self._main_column

    @main_column.setter
    def main_column(self, main_column):
        """Sets the main_column of this ViewProperties.


        :param main_column: The main_column of this ViewProperties.
        :type main_column: str
        """

        self._main_column = main_column

    @property
    def upper_column(self):
        """Gets the upper_column of this ViewProperties.


        :return: The upper_column of this ViewProperties.
        :rtype: str
        """
        return self._upper_column

    @upper_column.setter
    def upper_column(self, upper_column):
        """Sets the upper_column of this ViewProperties.


        :param upper_column: The upper_column of this ViewProperties.
        :type upper_column: str
        """

        self._upper_column = upper_column

    @property
    def allow_pan_and_zoom(self):
        """Gets the allow_pan_and_zoom of this ViewProperties.

        If true, map zoom and pan controls are enabled on the dashboard view

        :return: The allow_pan_and_zoom of this ViewProperties.
        :rtype: bool
        """
        return self._allow_pan_and_zoom

    @allow_pan_and_zoom.setter
    def allow_pan_and_zoom(self, allow_pan_and_zoom):
        """Sets the allow_pan_and_zoom of this ViewProperties.

        If true, map zoom and pan controls are enabled on the dashboard view

        :param allow_pan_and_zoom: The allow_pan_and_zoom of this ViewProperties.
        :type allow_pan_and_zoom: bool
        """
        if allow_pan_and_zoom is None:
            raise ValueError("Invalid value for `allow_pan_and_zoom`, must not be `None`")

        self._allow_pan_and_zoom = allow_pan_and_zoom

    @property
    def center(self):
        """Gets the center of this ViewProperties.


        :return: The center of this ViewProperties.
        :rtype: GeoViewPropertiesCenter
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this ViewProperties.


        :param center: The center of this ViewProperties.
        :type center: GeoViewPropertiesCenter
        """
        if center is None:
            raise ValueError("Invalid value for `center`, must not be `None`")

        self._center = center

    @property
    def detect_coordinate_fields(self):
        """Gets the detect_coordinate_fields of this ViewProperties.

        If true, search results get automatically regroupped so that lon,lat and value are treated as columns

        :return: The detect_coordinate_fields of this ViewProperties.
        :rtype: bool
        """
        return self._detect_coordinate_fields

    @detect_coordinate_fields.setter
    def detect_coordinate_fields(self, detect_coordinate_fields):
        """Sets the detect_coordinate_fields of this ViewProperties.

        If true, search results get automatically regroupped so that lon,lat and value are treated as columns

        :param detect_coordinate_fields: The detect_coordinate_fields of this ViewProperties.
        :type detect_coordinate_fields: bool
        """
        if detect_coordinate_fields is None:
            raise ValueError("Invalid value for `detect_coordinate_fields`, must not be `None`")

        self._detect_coordinate_fields = detect_coordinate_fields

    @property
    def layers(self):
        """Gets the layers of this ViewProperties.

        List of individual layers shown in the map

        :return: The layers of this ViewProperties.
        :rtype: List[GeoViewLayer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this ViewProperties.

        List of individual layers shown in the map

        :param layers: The layers of this ViewProperties.
        :type layers: List[GeoViewLayer]
        """
        if layers is None:
            raise ValueError("Invalid value for `layers`, must not be `None`")

        self._layers = layers

    @property
    def map_style(self):
        """Gets the map_style of this ViewProperties.

        Define map type - regular, satellite etc.

        :return: The map_style of this ViewProperties.
        :rtype: str
        """
        return self._map_style

    @map_style.setter
    def map_style(self, map_style):
        """Sets the map_style of this ViewProperties.

        Define map type - regular, satellite etc.

        :param map_style: The map_style of this ViewProperties.
        :type map_style: str
        """

        self._map_style = map_style

    @property
    def zoom(self):
        """Gets the zoom of this ViewProperties.

        Zoom level used for initial display of the map

        :return: The zoom of this ViewProperties.
        :rtype: float
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this ViewProperties.

        Zoom level used for initial display of the map

        :param zoom: The zoom of this ViewProperties.
        :type zoom: float
        """
        if zoom is None:
            raise ValueError("Invalid value for `zoom`, must not be `None`")
        if zoom is not None and zoom > 28:
            raise ValueError("Invalid value for `zoom`, must be a value less than or equal to `28`")
        if zoom is not None and zoom < 1:
            raise ValueError("Invalid value for `zoom`, must be a value greater than or equal to `1`")

        self._zoom = zoom
