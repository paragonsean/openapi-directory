# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_meta import DocumentMeta
from openapi_server import util


class DocumentCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: object=None, labels: List[str]=None, meta: DocumentMeta=None, org: str=None, org_id: str=None):
        """DocumentCreate - a model defined in OpenAPI

        :param content: The content of this DocumentCreate.
        :param labels: The labels of this DocumentCreate.
        :param meta: The meta of this DocumentCreate.
        :param org: The org of this DocumentCreate.
        :param org_id: The org_id of this DocumentCreate.
        """
        self.openapi_types = {
            'content': object,
            'labels': List[str],
            'meta': DocumentMeta,
            'org': str,
            'org_id': str
        }

        self.attribute_map = {
            'content': 'content',
            'labels': 'labels',
            'meta': 'meta',
            'org': 'org',
            'org_id': 'orgID'
        }

        self._content = content
        self._labels = labels
        self._meta = meta
        self._org = org
        self._org_id = org_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentCreate of this DocumentCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this DocumentCreate.


        :return: The content of this DocumentCreate.
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DocumentCreate.


        :param content: The content of this DocumentCreate.
        :type content: object
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def labels(self):
        """Gets the labels of this DocumentCreate.

        An array of label IDs to be added as labels to the document.

        :return: The labels of this DocumentCreate.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DocumentCreate.

        An array of label IDs to be added as labels to the document.

        :param labels: The labels of this DocumentCreate.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def meta(self):
        """Gets the meta of this DocumentCreate.


        :return: The meta of this DocumentCreate.
        :rtype: DocumentMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this DocumentCreate.


        :param meta: The meta of this DocumentCreate.
        :type meta: DocumentMeta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta

    @property
    def org(self):
        """Gets the org of this DocumentCreate.

        The organization Name. Specify either `orgID` or `org`.

        :return: The org of this DocumentCreate.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this DocumentCreate.

        The organization Name. Specify either `orgID` or `org`.

        :param org: The org of this DocumentCreate.
        :type org: str
        """

        self._org = org

    @property
    def org_id(self):
        """Gets the org_id of this DocumentCreate.

        The organization Name. Specify either `orgID` or `org`.

        :return: The org_id of this DocumentCreate.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this DocumentCreate.

        The organization Name. Specify either `orgID` or `org`.

        :param org_id: The org_id of this DocumentCreate.
        :type org_id: str
        """

        self._org_id = org_id
