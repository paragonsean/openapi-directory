# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_links import SourceLinks
from openapi_server import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: bool=None, default_rp: str=None, id: str=None, insecure_skip_verify: bool=None, languages: List[str]=None, links: SourceLinks=None, meta_url: str=None, name: str=None, org_id: str=None, password: str=None, shared_secret: str=None, telegraf: str=None, token: str=None, type: str=None, url: str=None, username: str=None):
        """Source - a model defined in OpenAPI

        :param default: The default of this Source.
        :param default_rp: The default_rp of this Source.
        :param id: The id of this Source.
        :param insecure_skip_verify: The insecure_skip_verify of this Source.
        :param languages: The languages of this Source.
        :param links: The links of this Source.
        :param meta_url: The meta_url of this Source.
        :param name: The name of this Source.
        :param org_id: The org_id of this Source.
        :param password: The password of this Source.
        :param shared_secret: The shared_secret of this Source.
        :param telegraf: The telegraf of this Source.
        :param token: The token of this Source.
        :param type: The type of this Source.
        :param url: The url of this Source.
        :param username: The username of this Source.
        """
        self.openapi_types = {
            'default': bool,
            'default_rp': str,
            'id': str,
            'insecure_skip_verify': bool,
            'languages': List[str],
            'links': SourceLinks,
            'meta_url': str,
            'name': str,
            'org_id': str,
            'password': str,
            'shared_secret': str,
            'telegraf': str,
            'token': str,
            'type': str,
            'url': str,
            'username': str
        }

        self.attribute_map = {
            'default': 'default',
            'default_rp': 'defaultRP',
            'id': 'id',
            'insecure_skip_verify': 'insecureSkipVerify',
            'languages': 'languages',
            'links': 'links',
            'meta_url': 'metaUrl',
            'name': 'name',
            'org_id': 'orgID',
            'password': 'password',
            'shared_secret': 'sharedSecret',
            'telegraf': 'telegraf',
            'token': 'token',
            'type': 'type',
            'url': 'url',
            'username': 'username'
        }

        self._default = default
        self._default_rp = default_rp
        self._id = id
        self._insecure_skip_verify = insecure_skip_verify
        self._languages = languages
        self._links = links
        self._meta_url = meta_url
        self._name = name
        self._org_id = org_id
        self._password = password
        self._shared_secret = shared_secret
        self._telegraf = telegraf
        self._token = token
        self._type = type
        self._url = url
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this Source.


        :return: The default of this Source.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Source.


        :param default: The default of this Source.
        :type default: bool
        """

        self._default = default

    @property
    def default_rp(self):
        """Gets the default_rp of this Source.


        :return: The default_rp of this Source.
        :rtype: str
        """
        return self._default_rp

    @default_rp.setter
    def default_rp(self, default_rp):
        """Sets the default_rp of this Source.


        :param default_rp: The default_rp of this Source.
        :type default_rp: str
        """

        self._default_rp = default_rp

    @property
    def id(self):
        """Gets the id of this Source.


        :return: The id of this Source.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Source.


        :param id: The id of this Source.
        :type id: str
        """

        self._id = id

    @property
    def insecure_skip_verify(self):
        """Gets the insecure_skip_verify of this Source.


        :return: The insecure_skip_verify of this Source.
        :rtype: bool
        """
        return self._insecure_skip_verify

    @insecure_skip_verify.setter
    def insecure_skip_verify(self, insecure_skip_verify):
        """Sets the insecure_skip_verify of this Source.


        :param insecure_skip_verify: The insecure_skip_verify of this Source.
        :type insecure_skip_verify: bool
        """

        self._insecure_skip_verify = insecure_skip_verify

    @property
    def languages(self):
        """Gets the languages of this Source.


        :return: The languages of this Source.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Source.


        :param languages: The languages of this Source.
        :type languages: List[str]
        """
        allowed_values = ["flux", "influxql"]  # noqa: E501
        if not set(languages).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `languages` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(languages) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._languages = languages

    @property
    def links(self):
        """Gets the links of this Source.


        :return: The links of this Source.
        :rtype: SourceLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Source.


        :param links: The links of this Source.
        :type links: SourceLinks
        """

        self._links = links

    @property
    def meta_url(self):
        """Gets the meta_url of this Source.


        :return: The meta_url of this Source.
        :rtype: str
        """
        return self._meta_url

    @meta_url.setter
    def meta_url(self, meta_url):
        """Sets the meta_url of this Source.


        :param meta_url: The meta_url of this Source.
        :type meta_url: str
        """

        self._meta_url = meta_url

    @property
    def name(self):
        """Gets the name of this Source.


        :return: The name of this Source.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Source.


        :param name: The name of this Source.
        :type name: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this Source.


        :return: The org_id of this Source.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Source.


        :param org_id: The org_id of this Source.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def password(self):
        """Gets the password of this Source.


        :return: The password of this Source.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Source.


        :param password: The password of this Source.
        :type password: str
        """

        self._password = password

    @property
    def shared_secret(self):
        """Gets the shared_secret of this Source.


        :return: The shared_secret of this Source.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this Source.


        :param shared_secret: The shared_secret of this Source.
        :type shared_secret: str
        """

        self._shared_secret = shared_secret

    @property
    def telegraf(self):
        """Gets the telegraf of this Source.


        :return: The telegraf of this Source.
        :rtype: str
        """
        return self._telegraf

    @telegraf.setter
    def telegraf(self, telegraf):
        """Sets the telegraf of this Source.


        :param telegraf: The telegraf of this Source.
        :type telegraf: str
        """

        self._telegraf = telegraf

    @property
    def token(self):
        """Gets the token of this Source.


        :return: The token of this Source.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Source.


        :param token: The token of this Source.
        :type token: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this Source.


        :return: The type of this Source.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Source.


        :param type: The type of this Source.
        :type type: str
        """
        allowed_values = ["v1", "v2", "self"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Source.


        :return: The url of this Source.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Source.


        :param url: The url of this Source.
        :type url: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this Source.


        :return: The username of this Source.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Source.


        :param username: The username of this Source.
        :type username: str
        """

        self._username = username
