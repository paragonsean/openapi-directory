# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.axis import Axis
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server import util


class GeoHeatMapViewLayer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, blur: int=None, colors: List[DashboardColor]=None, intensity_dimension: Axis=None, intensity_field: str=None, radius: int=None):
        """GeoHeatMapViewLayer - a model defined in OpenAPI

        :param type: The type of this GeoHeatMapViewLayer.
        :param blur: The blur of this GeoHeatMapViewLayer.
        :param colors: The colors of this GeoHeatMapViewLayer.
        :param intensity_dimension: The intensity_dimension of this GeoHeatMapViewLayer.
        :param intensity_field: The intensity_field of this GeoHeatMapViewLayer.
        :param radius: The radius of this GeoHeatMapViewLayer.
        """
        self.openapi_types = {
            'type': str,
            'blur': int,
            'colors': List[DashboardColor],
            'intensity_dimension': Axis,
            'intensity_field': str,
            'radius': int
        }

        self.attribute_map = {
            'type': 'type',
            'blur': 'blur',
            'colors': 'colors',
            'intensity_dimension': 'intensityDimension',
            'intensity_field': 'intensityField',
            'radius': 'radius'
        }

        self._type = type
        self._blur = blur
        self._colors = colors
        self._intensity_dimension = intensity_dimension
        self._intensity_field = intensity_field
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoHeatMapViewLayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoHeatMapViewLayer of this GeoHeatMapViewLayer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this GeoHeatMapViewLayer.


        :return: The type of this GeoHeatMapViewLayer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GeoHeatMapViewLayer.


        :param type: The type of this GeoHeatMapViewLayer.
        :type type: str
        """
        allowed_values = ["heatmap", "circleMap", "pointMap", "trackMap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def blur(self):
        """Gets the blur of this GeoHeatMapViewLayer.

        Blur for heatmap points

        :return: The blur of this GeoHeatMapViewLayer.
        :rtype: int
        """
        return self._blur

    @blur.setter
    def blur(self, blur):
        """Sets the blur of this GeoHeatMapViewLayer.

        Blur for heatmap points

        :param blur: The blur of this GeoHeatMapViewLayer.
        :type blur: int
        """
        if blur is None:
            raise ValueError("Invalid value for `blur`, must not be `None`")

        self._blur = blur

    @property
    def colors(self):
        """Gets the colors of this GeoHeatMapViewLayer.

        Colors define color encoding of data into a visualization

        :return: The colors of this GeoHeatMapViewLayer.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this GeoHeatMapViewLayer.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this GeoHeatMapViewLayer.
        :type colors: List[DashboardColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def intensity_dimension(self):
        """Gets the intensity_dimension of this GeoHeatMapViewLayer.


        :return: The intensity_dimension of this GeoHeatMapViewLayer.
        :rtype: Axis
        """
        return self._intensity_dimension

    @intensity_dimension.setter
    def intensity_dimension(self, intensity_dimension):
        """Sets the intensity_dimension of this GeoHeatMapViewLayer.


        :param intensity_dimension: The intensity_dimension of this GeoHeatMapViewLayer.
        :type intensity_dimension: Axis
        """
        if intensity_dimension is None:
            raise ValueError("Invalid value for `intensity_dimension`, must not be `None`")

        self._intensity_dimension = intensity_dimension

    @property
    def intensity_field(self):
        """Gets the intensity_field of this GeoHeatMapViewLayer.

        Intensity field

        :return: The intensity_field of this GeoHeatMapViewLayer.
        :rtype: str
        """
        return self._intensity_field

    @intensity_field.setter
    def intensity_field(self, intensity_field):
        """Sets the intensity_field of this GeoHeatMapViewLayer.

        Intensity field

        :param intensity_field: The intensity_field of this GeoHeatMapViewLayer.
        :type intensity_field: str
        """
        if intensity_field is None:
            raise ValueError("Invalid value for `intensity_field`, must not be `None`")

        self._intensity_field = intensity_field

    @property
    def radius(self):
        """Gets the radius of this GeoHeatMapViewLayer.

        Radius size in pixels

        :return: The radius of this GeoHeatMapViewLayer.
        :rtype: int
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GeoHeatMapViewLayer.

        Radius size in pixels

        :param radius: The radius of this GeoHeatMapViewLayer.
        :type radius: int
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")

        self._radius = radius
