# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_links import OrganizationLinks
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, id: str=None, links: OrganizationLinks=None, name: str=None, status: str='active', updated_at: datetime=None):
        """Organization - a model defined in OpenAPI

        :param created_at: The created_at of this Organization.
        :param description: The description of this Organization.
        :param id: The id of this Organization.
        :param links: The links of this Organization.
        :param name: The name of this Organization.
        :param status: The status of this Organization.
        :param updated_at: The updated_at of this Organization.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'id': str,
            'links': OrganizationLinks,
            'name': str,
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'description': 'description',
            'id': 'id',
            'links': 'links',
            'name': 'name',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._description = description
        self._id = id
        self._links = links
        self._name = name
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Organization.


        :return: The created_at of this Organization.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Organization.


        :param created_at: The created_at of this Organization.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Organization.


        :return: The description of this Organization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.


        :param description: The description of this Organization.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Organization.


        :return: The id of this Organization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Organization.


        :return: The links of this Organization.
        :rtype: OrganizationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Organization.


        :param links: The links of this Organization.
        :type links: OrganizationLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Organization.


        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this Organization.

        If inactive the organization is inactive.

        :return: The status of this Organization.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Organization.

        If inactive the organization is inactive.

        :param status: The status of this Organization.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Organization.


        :return: The updated_at of this Organization.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Organization.


        :param updated_at: The updated_at of this Organization.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
