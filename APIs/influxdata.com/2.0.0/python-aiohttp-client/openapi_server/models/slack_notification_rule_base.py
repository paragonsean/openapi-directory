# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SlackNotificationRuleBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, message_template: str=None, type: str=None):
        """SlackNotificationRuleBase - a model defined in OpenAPI

        :param channel: The channel of this SlackNotificationRuleBase.
        :param message_template: The message_template of this SlackNotificationRuleBase.
        :param type: The type of this SlackNotificationRuleBase.
        """
        self.openapi_types = {
            'channel': str,
            'message_template': str,
            'type': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'message_template': 'messageTemplate',
            'type': 'type'
        }

        self._channel = channel
        self._message_template = message_template
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlackNotificationRuleBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlackNotificationRuleBase of this SlackNotificationRuleBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this SlackNotificationRuleBase.


        :return: The channel of this SlackNotificationRuleBase.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this SlackNotificationRuleBase.


        :param channel: The channel of this SlackNotificationRuleBase.
        :type channel: str
        """

        self._channel = channel

    @property
    def message_template(self):
        """Gets the message_template of this SlackNotificationRuleBase.


        :return: The message_template of this SlackNotificationRuleBase.
        :rtype: str
        """
        return self._message_template

    @message_template.setter
    def message_template(self, message_template):
        """Sets the message_template of this SlackNotificationRuleBase.


        :param message_template: The message_template of this SlackNotificationRuleBase.
        :type message_template: str
        """
        if message_template is None:
            raise ValueError("Invalid value for `message_template`, must not be `None`")

        self._message_template = message_template

    @property
    def type(self):
        """Gets the type of this SlackNotificationRuleBase.


        :return: The type of this SlackNotificationRuleBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SlackNotificationRuleBase.


        :param type: The type of this SlackNotificationRuleBase.
        :type type: str
        """
        allowed_values = ["slack"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
