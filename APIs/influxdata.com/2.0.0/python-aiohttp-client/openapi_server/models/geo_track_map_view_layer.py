# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server import util


class GeoTrackMapViewLayer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colors: List[DashboardColor]=None, random_colors: bool=None, speed: int=None, track_width: int=None, type: str=None):
        """GeoTrackMapViewLayer - a model defined in OpenAPI

        :param colors: The colors of this GeoTrackMapViewLayer.
        :param random_colors: The random_colors of this GeoTrackMapViewLayer.
        :param speed: The speed of this GeoTrackMapViewLayer.
        :param track_width: The track_width of this GeoTrackMapViewLayer.
        :param type: The type of this GeoTrackMapViewLayer.
        """
        self.openapi_types = {
            'colors': List[DashboardColor],
            'random_colors': bool,
            'speed': int,
            'track_width': int,
            'type': str
        }

        self.attribute_map = {
            'colors': 'colors',
            'random_colors': 'randomColors',
            'speed': 'speed',
            'track_width': 'trackWidth',
            'type': 'type'
        }

        self._colors = colors
        self._random_colors = random_colors
        self._speed = speed
        self._track_width = track_width
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoTrackMapViewLayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoTrackMapViewLayer of this GeoTrackMapViewLayer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colors(self):
        """Gets the colors of this GeoTrackMapViewLayer.

        Colors define color encoding of data into a visualization

        :return: The colors of this GeoTrackMapViewLayer.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this GeoTrackMapViewLayer.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this GeoTrackMapViewLayer.
        :type colors: List[DashboardColor]
        """

        self._colors = colors

    @property
    def random_colors(self):
        """Gets the random_colors of this GeoTrackMapViewLayer.

        Assign different colors to different tracks

        :return: The random_colors of this GeoTrackMapViewLayer.
        :rtype: bool
        """
        return self._random_colors

    @random_colors.setter
    def random_colors(self, random_colors):
        """Sets the random_colors of this GeoTrackMapViewLayer.

        Assign different colors to different tracks

        :param random_colors: The random_colors of this GeoTrackMapViewLayer.
        :type random_colors: bool
        """

        self._random_colors = random_colors

    @property
    def speed(self):
        """Gets the speed of this GeoTrackMapViewLayer.

        Speed of the track animation

        :return: The speed of this GeoTrackMapViewLayer.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this GeoTrackMapViewLayer.

        Speed of the track animation

        :param speed: The speed of this GeoTrackMapViewLayer.
        :type speed: int
        """

        self._speed = speed

    @property
    def track_width(self):
        """Gets the track_width of this GeoTrackMapViewLayer.

        Width of the track

        :return: The track_width of this GeoTrackMapViewLayer.
        :rtype: int
        """
        return self._track_width

    @track_width.setter
    def track_width(self, track_width):
        """Sets the track_width of this GeoTrackMapViewLayer.

        Width of the track

        :param track_width: The track_width of this GeoTrackMapViewLayer.
        :type track_width: int
        """

        self._track_width = track_width

    @property
    def type(self):
        """Gets the type of this GeoTrackMapViewLayer.


        :return: The type of this GeoTrackMapViewLayer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GeoTrackMapViewLayer.


        :param type: The type of this GeoTrackMapViewLayer.
        :type type: str
        """
        allowed_values = ["heatmap", "circleMap", "pointMap", "trackMap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
