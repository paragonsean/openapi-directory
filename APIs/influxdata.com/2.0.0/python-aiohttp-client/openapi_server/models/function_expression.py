# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_property import ModelProperty
from openapi_server.models.node import Node
from openapi_server import util


class FunctionExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: Node=None, params: List[ModelProperty]=None, type: str=None):
        """FunctionExpression - a model defined in OpenAPI

        :param body: The body of this FunctionExpression.
        :param params: The params of this FunctionExpression.
        :param type: The type of this FunctionExpression.
        """
        self.openapi_types = {
            'body': Node,
            'params': List[ModelProperty],
            'type': str
        }

        self.attribute_map = {
            'body': 'body',
            'params': 'params',
            'type': 'type'
        }

        self._body = body
        self._params = params
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FunctionExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FunctionExpression of this FunctionExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this FunctionExpression.


        :return: The body of this FunctionExpression.
        :rtype: Node
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this FunctionExpression.


        :param body: The body of this FunctionExpression.
        :type body: Node
        """

        self._body = body

    @property
    def params(self):
        """Gets the params of this FunctionExpression.

        Function parameters

        :return: The params of this FunctionExpression.
        :rtype: List[ModelProperty]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this FunctionExpression.

        Function parameters

        :param params: The params of this FunctionExpression.
        :type params: List[ModelProperty]
        """

        self._params = params

    @property
    def type(self):
        """Gets the type of this FunctionExpression.

        Type of AST node

        :return: The type of this FunctionExpression.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FunctionExpression.

        Type of AST node

        :param type: The type of this FunctionExpression.
        :type type: str
        """

        self._type = type
