# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_status_level import CheckStatusLevel
from openapi_server.models.greater_threshold import GreaterThreshold
from openapi_server.models.lesser_threshold import LesserThreshold
from openapi_server.models.range_threshold import RangeThreshold
from openapi_server import util


class Threshold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_values: bool=None, level: CheckStatusLevel=None, type: str=None, value: float=None, max: float=None, min: float=None, within: bool=None):
        """Threshold - a model defined in OpenAPI

        :param all_values: The all_values of this Threshold.
        :param level: The level of this Threshold.
        :param type: The type of this Threshold.
        :param value: The value of this Threshold.
        :param max: The max of this Threshold.
        :param min: The min of this Threshold.
        :param within: The within of this Threshold.
        """
        self.openapi_types = {
            'all_values': bool,
            'level': CheckStatusLevel,
            'type': str,
            'value': float,
            'max': float,
            'min': float,
            'within': bool
        }

        self.attribute_map = {
            'all_values': 'allValues',
            'level': 'level',
            'type': 'type',
            'value': 'value',
            'max': 'max',
            'min': 'min',
            'within': 'within'
        }

        self._all_values = all_values
        self._level = level
        self._type = type
        self._value = value
        self._max = max
        self._min = min
        self._within = within

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Threshold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Threshold of this Threshold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_values(self):
        """Gets the all_values of this Threshold.

        If true, only alert if all values meet threshold.

        :return: The all_values of this Threshold.
        :rtype: bool
        """
        return self._all_values

    @all_values.setter
    def all_values(self, all_values):
        """Sets the all_values of this Threshold.

        If true, only alert if all values meet threshold.

        :param all_values: The all_values of this Threshold.
        :type all_values: bool
        """

        self._all_values = all_values

    @property
    def level(self):
        """Gets the level of this Threshold.


        :return: The level of this Threshold.
        :rtype: CheckStatusLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Threshold.


        :param level: The level of this Threshold.
        :type level: CheckStatusLevel
        """

        self._level = level

    @property
    def type(self):
        """Gets the type of this Threshold.


        :return: The type of this Threshold.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Threshold.


        :param type: The type of this Threshold.
        :type type: str
        """
        allowed_values = ["greater", "lesser", "range"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this Threshold.


        :return: The value of this Threshold.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Threshold.


        :param value: The value of this Threshold.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def max(self):
        """Gets the max of this Threshold.


        :return: The max of this Threshold.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this Threshold.


        :param max: The max of this Threshold.
        :type max: float
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max

    @property
    def min(self):
        """Gets the min of this Threshold.


        :return: The min of this Threshold.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this Threshold.


        :param min: The min of this Threshold.
        :type min: float
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")

        self._min = min

    @property
    def within(self):
        """Gets the within of this Threshold.


        :return: The within of this Threshold.
        :rtype: bool
        """
        return self._within

    @within.setter
    def within(self, within):
        """Sets the within of this Threshold.


        :param within: The within of this Threshold.
        :type within: bool
        """
        if within is None:
            raise ValueError("Invalid value for `within`, must not be `None`")

        self._within = within
