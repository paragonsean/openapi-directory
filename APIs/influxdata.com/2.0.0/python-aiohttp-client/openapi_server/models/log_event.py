# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, run_id: str=None, time: datetime=None):
        """LogEvent - a model defined in OpenAPI

        :param message: The message of this LogEvent.
        :param run_id: The run_id of this LogEvent.
        :param time: The time of this LogEvent.
        """
        self.openapi_types = {
            'message': str,
            'run_id': str,
            'time': datetime
        }

        self.attribute_map = {
            'message': 'message',
            'run_id': 'runID',
            'time': 'time'
        }

        self._message = message
        self._run_id = run_id
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogEvent of this LogEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this LogEvent.

        A description of the event that occurred.

        :return: The message of this LogEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogEvent.

        A description of the event that occurred.

        :param message: The message of this LogEvent.
        :type message: str
        """

        self._message = message

    @property
    def run_id(self):
        """Gets the run_id of this LogEvent.

        the ID of the task that logged

        :return: The run_id of this LogEvent.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this LogEvent.

        the ID of the task that logged

        :param run_id: The run_id of this LogEvent.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def time(self):
        """Gets the time of this LogEvent.

        Time event occurred, RFC3339Nano.

        :return: The time of this LogEvent.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this LogEvent.

        Time event occurred, RFC3339Nano.

        :param time: The time of this LogEvent.
        :type time: datetime
        """

        self._time = time
