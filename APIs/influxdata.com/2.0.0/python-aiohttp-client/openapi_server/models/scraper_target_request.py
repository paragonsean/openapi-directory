# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScraperTargetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_insecure: bool=False, bucket_id: str=None, name: str=None, org_id: str=None, type: str=None, url: str=None):
        """ScraperTargetRequest - a model defined in OpenAPI

        :param allow_insecure: The allow_insecure of this ScraperTargetRequest.
        :param bucket_id: The bucket_id of this ScraperTargetRequest.
        :param name: The name of this ScraperTargetRequest.
        :param org_id: The org_id of this ScraperTargetRequest.
        :param type: The type of this ScraperTargetRequest.
        :param url: The url of this ScraperTargetRequest.
        """
        self.openapi_types = {
            'allow_insecure': bool,
            'bucket_id': str,
            'name': str,
            'org_id': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'allow_insecure': 'allowInsecure',
            'bucket_id': 'bucketID',
            'name': 'name',
            'org_id': 'orgID',
            'type': 'type',
            'url': 'url'
        }

        self._allow_insecure = allow_insecure
        self._bucket_id = bucket_id
        self._name = name
        self._org_id = org_id
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScraperTargetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScraperTargetRequest of this ScraperTargetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_insecure(self):
        """Gets the allow_insecure of this ScraperTargetRequest.

        Skip TLS verification on endpoint.

        :return: The allow_insecure of this ScraperTargetRequest.
        :rtype: bool
        """
        return self._allow_insecure

    @allow_insecure.setter
    def allow_insecure(self, allow_insecure):
        """Sets the allow_insecure of this ScraperTargetRequest.

        Skip TLS verification on endpoint.

        :param allow_insecure: The allow_insecure of this ScraperTargetRequest.
        :type allow_insecure: bool
        """

        self._allow_insecure = allow_insecure

    @property
    def bucket_id(self):
        """Gets the bucket_id of this ScraperTargetRequest.

        The ID of the bucket to write to.

        :return: The bucket_id of this ScraperTargetRequest.
        :rtype: str
        """
        return self._bucket_id

    @bucket_id.setter
    def bucket_id(self, bucket_id):
        """Sets the bucket_id of this ScraperTargetRequest.

        The ID of the bucket to write to.

        :param bucket_id: The bucket_id of this ScraperTargetRequest.
        :type bucket_id: str
        """

        self._bucket_id = bucket_id

    @property
    def name(self):
        """Gets the name of this ScraperTargetRequest.

        The name of the scraper target.

        :return: The name of this ScraperTargetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScraperTargetRequest.

        The name of the scraper target.

        :param name: The name of this ScraperTargetRequest.
        :type name: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this ScraperTargetRequest.

        The organization ID.

        :return: The org_id of this ScraperTargetRequest.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ScraperTargetRequest.

        The organization ID.

        :param org_id: The org_id of this ScraperTargetRequest.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def type(self):
        """Gets the type of this ScraperTargetRequest.

        The type of the metrics to be parsed.

        :return: The type of this ScraperTargetRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScraperTargetRequest.

        The type of the metrics to be parsed.

        :param type: The type of this ScraperTargetRequest.
        :type type: str
        """
        allowed_values = ["prometheus"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this ScraperTargetRequest.

        The URL of the metrics endpoint.

        :return: The url of this ScraperTargetRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ScraperTargetRequest.

        The URL of the metrics endpoint.

        :param url: The url of this ScraperTargetRequest.
        :type url: str
        """

        self._url = url
