# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checks: List[HealthCheck]=None, commit: str=None, message: str=None, name: str=None, status: str=None, version: str=None):
        """HealthCheck - a model defined in OpenAPI

        :param checks: The checks of this HealthCheck.
        :param commit: The commit of this HealthCheck.
        :param message: The message of this HealthCheck.
        :param name: The name of this HealthCheck.
        :param status: The status of this HealthCheck.
        :param version: The version of this HealthCheck.
        """
        self.openapi_types = {
            'checks': List[HealthCheck],
            'commit': str,
            'message': str,
            'name': str,
            'status': str,
            'version': str
        }

        self.attribute_map = {
            'checks': 'checks',
            'commit': 'commit',
            'message': 'message',
            'name': 'name',
            'status': 'status',
            'version': 'version'
        }

        self._checks = checks
        self._commit = commit
        self._message = message
        self._name = name
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthCheck of this HealthCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checks(self):
        """Gets the checks of this HealthCheck.


        :return: The checks of this HealthCheck.
        :rtype: List[HealthCheck]
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this HealthCheck.


        :param checks: The checks of this HealthCheck.
        :type checks: List[HealthCheck]
        """

        self._checks = checks

    @property
    def commit(self):
        """Gets the commit of this HealthCheck.


        :return: The commit of this HealthCheck.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this HealthCheck.


        :param commit: The commit of this HealthCheck.
        :type commit: str
        """

        self._commit = commit

    @property
    def message(self):
        """Gets the message of this HealthCheck.


        :return: The message of this HealthCheck.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this HealthCheck.


        :param message: The message of this HealthCheck.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this HealthCheck.


        :return: The name of this HealthCheck.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HealthCheck.


        :param name: The name of this HealthCheck.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this HealthCheck.


        :return: The status of this HealthCheck.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HealthCheck.


        :param status: The status of this HealthCheck.
        :type status: str
        """
        allowed_values = ["pass", "fail"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version(self):
        """Gets the version of this HealthCheck.


        :return: The version of this HealthCheck.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HealthCheck.


        :param version: The version of this HealthCheck.
        :type version: str
        """

        self._version = version
