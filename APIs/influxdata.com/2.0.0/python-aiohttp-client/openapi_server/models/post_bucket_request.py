# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retention_rule import RetentionRule
from openapi_server.models.schema_type import SchemaType
from openapi_server import util


class PostBucketRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, org_id: str=None, retention_rules: List[RetentionRule]=None, rp: str=None, schema_type: SchemaType=None):
        """PostBucketRequest - a model defined in OpenAPI

        :param description: The description of this PostBucketRequest.
        :param name: The name of this PostBucketRequest.
        :param org_id: The org_id of this PostBucketRequest.
        :param retention_rules: The retention_rules of this PostBucketRequest.
        :param rp: The rp of this PostBucketRequest.
        :param schema_type: The schema_type of this PostBucketRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'org_id': str,
            'retention_rules': List[RetentionRule],
            'rp': str,
            'schema_type': SchemaType
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'org_id': 'orgID',
            'retention_rules': 'retentionRules',
            'rp': 'rp',
            'schema_type': 'schemaType'
        }

        self._description = description
        self._name = name
        self._org_id = org_id
        self._retention_rules = retention_rules
        self._rp = rp
        self._schema_type = schema_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostBucketRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostBucketRequest of this PostBucketRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PostBucketRequest.


        :return: The description of this PostBucketRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostBucketRequest.


        :param description: The description of this PostBucketRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this PostBucketRequest.


        :return: The name of this PostBucketRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostBucketRequest.


        :param name: The name of this PostBucketRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this PostBucketRequest.


        :return: The org_id of this PostBucketRequest.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PostBucketRequest.


        :param org_id: The org_id of this PostBucketRequest.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def retention_rules(self):
        """Gets the retention_rules of this PostBucketRequest.

        Rules to expire or retain data.  No rules means data never expires.

        :return: The retention_rules of this PostBucketRequest.
        :rtype: List[RetentionRule]
        """
        return self._retention_rules

    @retention_rules.setter
    def retention_rules(self, retention_rules):
        """Sets the retention_rules of this PostBucketRequest.

        Rules to expire or retain data.  No rules means data never expires.

        :param retention_rules: The retention_rules of this PostBucketRequest.
        :type retention_rules: List[RetentionRule]
        """
        if retention_rules is None:
            raise ValueError("Invalid value for `retention_rules`, must not be `None`")

        self._retention_rules = retention_rules

    @property
    def rp(self):
        """Gets the rp of this PostBucketRequest.


        :return: The rp of this PostBucketRequest.
        :rtype: str
        """
        return self._rp

    @rp.setter
    def rp(self, rp):
        """Sets the rp of this PostBucketRequest.


        :param rp: The rp of this PostBucketRequest.
        :type rp: str
        """

        self._rp = rp

    @property
    def schema_type(self):
        """Gets the schema_type of this PostBucketRequest.


        :return: The schema_type of this PostBucketRequest.
        :rtype: SchemaType
        """
        return self._schema_type

    @schema_type.setter
    def schema_type(self, schema_type):
        """Sets the schema_type of this PostBucketRequest.


        :param schema_type: The schema_type of this PostBucketRequest.
        :type schema_type: SchemaType
        """

        self._schema_type = schema_type
