# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expression import Expression
from openapi_server import util


class ConditionalExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate: Expression=None, consequent: Expression=None, test: Expression=None, type: str=None):
        """ConditionalExpression - a model defined in OpenAPI

        :param alternate: The alternate of this ConditionalExpression.
        :param consequent: The consequent of this ConditionalExpression.
        :param test: The test of this ConditionalExpression.
        :param type: The type of this ConditionalExpression.
        """
        self.openapi_types = {
            'alternate': Expression,
            'consequent': Expression,
            'test': Expression,
            'type': str
        }

        self.attribute_map = {
            'alternate': 'alternate',
            'consequent': 'consequent',
            'test': 'test',
            'type': 'type'
        }

        self._alternate = alternate
        self._consequent = consequent
        self._test = test
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionalExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionalExpression of this ConditionalExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate(self):
        """Gets the alternate of this ConditionalExpression.


        :return: The alternate of this ConditionalExpression.
        :rtype: Expression
        """
        return self._alternate

    @alternate.setter
    def alternate(self, alternate):
        """Sets the alternate of this ConditionalExpression.


        :param alternate: The alternate of this ConditionalExpression.
        :type alternate: Expression
        """

        self._alternate = alternate

    @property
    def consequent(self):
        """Gets the consequent of this ConditionalExpression.


        :return: The consequent of this ConditionalExpression.
        :rtype: Expression
        """
        return self._consequent

    @consequent.setter
    def consequent(self, consequent):
        """Sets the consequent of this ConditionalExpression.


        :param consequent: The consequent of this ConditionalExpression.
        :type consequent: Expression
        """

        self._consequent = consequent

    @property
    def test(self):
        """Gets the test of this ConditionalExpression.


        :return: The test of this ConditionalExpression.
        :rtype: Expression
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this ConditionalExpression.


        :param test: The test of this ConditionalExpression.
        :type test: Expression
        """

        self._test = test

    @property
    def type(self):
        """Gets the type of this ConditionalExpression.

        Type of AST node

        :return: The type of this ConditionalExpression.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConditionalExpression.

        Type of AST node

        :param type: The type of this ConditionalExpression.
        :type type: str
        """

        self._type = type
