# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_status_type import TaskStatusType
from openapi_server import util


class TaskCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, flux: str=None, org: str=None, org_id: str=None, status: TaskStatusType=None):
        """TaskCreateRequest - a model defined in OpenAPI

        :param description: The description of this TaskCreateRequest.
        :param flux: The flux of this TaskCreateRequest.
        :param org: The org of this TaskCreateRequest.
        :param org_id: The org_id of this TaskCreateRequest.
        :param status: The status of this TaskCreateRequest.
        """
        self.openapi_types = {
            'description': str,
            'flux': str,
            'org': str,
            'org_id': str,
            'status': TaskStatusType
        }

        self.attribute_map = {
            'description': 'description',
            'flux': 'flux',
            'org': 'org',
            'org_id': 'orgID',
            'status': 'status'
        }

        self._description = description
        self._flux = flux
        self._org = org
        self._org_id = org_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskCreateRequest of this TaskCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TaskCreateRequest.

        An optional description of the task.

        :return: The description of this TaskCreateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskCreateRequest.

        An optional description of the task.

        :param description: The description of this TaskCreateRequest.
        :type description: str
        """

        self._description = description

    @property
    def flux(self):
        """Gets the flux of this TaskCreateRequest.

        The Flux script to run for this task.

        :return: The flux of this TaskCreateRequest.
        :rtype: str
        """
        return self._flux

    @flux.setter
    def flux(self, flux):
        """Sets the flux of this TaskCreateRequest.

        The Flux script to run for this task.

        :param flux: The flux of this TaskCreateRequest.
        :type flux: str
        """
        if flux is None:
            raise ValueError("Invalid value for `flux`, must not be `None`")

        self._flux = flux

    @property
    def org(self):
        """Gets the org of this TaskCreateRequest.

        The name of the organization that owns this Task.

        :return: The org of this TaskCreateRequest.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this TaskCreateRequest.

        The name of the organization that owns this Task.

        :param org: The org of this TaskCreateRequest.
        :type org: str
        """

        self._org = org

    @property
    def org_id(self):
        """Gets the org_id of this TaskCreateRequest.

        The ID of the organization that owns this Task.

        :return: The org_id of this TaskCreateRequest.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this TaskCreateRequest.

        The ID of the organization that owns this Task.

        :param org_id: The org_id of this TaskCreateRequest.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def status(self):
        """Gets the status of this TaskCreateRequest.


        :return: The status of this TaskCreateRequest.
        :rtype: TaskStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskCreateRequest.


        :param status: The status of this TaskCreateRequest.
        :type status: TaskStatusType
        """

        self._status = status
