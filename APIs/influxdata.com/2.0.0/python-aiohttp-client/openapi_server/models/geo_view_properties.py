# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server.models.dashboard_query import DashboardQuery
from openapi_server.models.geo_view_layer import GeoViewLayer
from openapi_server.models.geo_view_properties_center import GeoViewPropertiesCenter
from openapi_server import util


class GeoViewProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_pan_and_zoom: bool=True, center: GeoViewPropertiesCenter=None, colors: List[DashboardColor]=None, detect_coordinate_fields: bool=True, layers: List[GeoViewLayer]=None, map_style: str=None, note: str=None, queries: List[DashboardQuery]=None, shape: str=None, show_note_when_empty: bool=None, type: str=None, zoom: float=None):
        """GeoViewProperties - a model defined in OpenAPI

        :param allow_pan_and_zoom: The allow_pan_and_zoom of this GeoViewProperties.
        :param center: The center of this GeoViewProperties.
        :param colors: The colors of this GeoViewProperties.
        :param detect_coordinate_fields: The detect_coordinate_fields of this GeoViewProperties.
        :param layers: The layers of this GeoViewProperties.
        :param map_style: The map_style of this GeoViewProperties.
        :param note: The note of this GeoViewProperties.
        :param queries: The queries of this GeoViewProperties.
        :param shape: The shape of this GeoViewProperties.
        :param show_note_when_empty: The show_note_when_empty of this GeoViewProperties.
        :param type: The type of this GeoViewProperties.
        :param zoom: The zoom of this GeoViewProperties.
        """
        self.openapi_types = {
            'allow_pan_and_zoom': bool,
            'center': GeoViewPropertiesCenter,
            'colors': List[DashboardColor],
            'detect_coordinate_fields': bool,
            'layers': List[GeoViewLayer],
            'map_style': str,
            'note': str,
            'queries': List[DashboardQuery],
            'shape': str,
            'show_note_when_empty': bool,
            'type': str,
            'zoom': float
        }

        self.attribute_map = {
            'allow_pan_and_zoom': 'allowPanAndZoom',
            'center': 'center',
            'colors': 'colors',
            'detect_coordinate_fields': 'detectCoordinateFields',
            'layers': 'layers',
            'map_style': 'mapStyle',
            'note': 'note',
            'queries': 'queries',
            'shape': 'shape',
            'show_note_when_empty': 'showNoteWhenEmpty',
            'type': 'type',
            'zoom': 'zoom'
        }

        self._allow_pan_and_zoom = allow_pan_and_zoom
        self._center = center
        self._colors = colors
        self._detect_coordinate_fields = detect_coordinate_fields
        self._layers = layers
        self._map_style = map_style
        self._note = note
        self._queries = queries
        self._shape = shape
        self._show_note_when_empty = show_note_when_empty
        self._type = type
        self._zoom = zoom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoViewProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoViewProperties of this GeoViewProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_pan_and_zoom(self):
        """Gets the allow_pan_and_zoom of this GeoViewProperties.

        If true, map zoom and pan controls are enabled on the dashboard view

        :return: The allow_pan_and_zoom of this GeoViewProperties.
        :rtype: bool
        """
        return self._allow_pan_and_zoom

    @allow_pan_and_zoom.setter
    def allow_pan_and_zoom(self, allow_pan_and_zoom):
        """Sets the allow_pan_and_zoom of this GeoViewProperties.

        If true, map zoom and pan controls are enabled on the dashboard view

        :param allow_pan_and_zoom: The allow_pan_and_zoom of this GeoViewProperties.
        :type allow_pan_and_zoom: bool
        """
        if allow_pan_and_zoom is None:
            raise ValueError("Invalid value for `allow_pan_and_zoom`, must not be `None`")

        self._allow_pan_and_zoom = allow_pan_and_zoom

    @property
    def center(self):
        """Gets the center of this GeoViewProperties.


        :return: The center of this GeoViewProperties.
        :rtype: GeoViewPropertiesCenter
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this GeoViewProperties.


        :param center: The center of this GeoViewProperties.
        :type center: GeoViewPropertiesCenter
        """
        if center is None:
            raise ValueError("Invalid value for `center`, must not be `None`")

        self._center = center

    @property
    def colors(self):
        """Gets the colors of this GeoViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this GeoViewProperties.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this GeoViewProperties.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this GeoViewProperties.
        :type colors: List[DashboardColor]
        """

        self._colors = colors

    @property
    def detect_coordinate_fields(self):
        """Gets the detect_coordinate_fields of this GeoViewProperties.

        If true, search results get automatically regroupped so that lon,lat and value are treated as columns

        :return: The detect_coordinate_fields of this GeoViewProperties.
        :rtype: bool
        """
        return self._detect_coordinate_fields

    @detect_coordinate_fields.setter
    def detect_coordinate_fields(self, detect_coordinate_fields):
        """Sets the detect_coordinate_fields of this GeoViewProperties.

        If true, search results get automatically regroupped so that lon,lat and value are treated as columns

        :param detect_coordinate_fields: The detect_coordinate_fields of this GeoViewProperties.
        :type detect_coordinate_fields: bool
        """
        if detect_coordinate_fields is None:
            raise ValueError("Invalid value for `detect_coordinate_fields`, must not be `None`")

        self._detect_coordinate_fields = detect_coordinate_fields

    @property
    def layers(self):
        """Gets the layers of this GeoViewProperties.

        List of individual layers shown in the map

        :return: The layers of this GeoViewProperties.
        :rtype: List[GeoViewLayer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this GeoViewProperties.

        List of individual layers shown in the map

        :param layers: The layers of this GeoViewProperties.
        :type layers: List[GeoViewLayer]
        """
        if layers is None:
            raise ValueError("Invalid value for `layers`, must not be `None`")

        self._layers = layers

    @property
    def map_style(self):
        """Gets the map_style of this GeoViewProperties.

        Define map type - regular, satellite etc.

        :return: The map_style of this GeoViewProperties.
        :rtype: str
        """
        return self._map_style

    @map_style.setter
    def map_style(self, map_style):
        """Sets the map_style of this GeoViewProperties.

        Define map type - regular, satellite etc.

        :param map_style: The map_style of this GeoViewProperties.
        :type map_style: str
        """

        self._map_style = map_style

    @property
    def note(self):
        """Gets the note of this GeoViewProperties.


        :return: The note of this GeoViewProperties.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this GeoViewProperties.


        :param note: The note of this GeoViewProperties.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def queries(self):
        """Gets the queries of this GeoViewProperties.


        :return: The queries of this GeoViewProperties.
        :rtype: List[DashboardQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this GeoViewProperties.


        :param queries: The queries of this GeoViewProperties.
        :type queries: List[DashboardQuery]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def shape(self):
        """Gets the shape of this GeoViewProperties.


        :return: The shape of this GeoViewProperties.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this GeoViewProperties.


        :param shape: The shape of this GeoViewProperties.
        :type shape: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def show_note_when_empty(self):
        """Gets the show_note_when_empty of this GeoViewProperties.

        If true, will display note when empty

        :return: The show_note_when_empty of this GeoViewProperties.
        :rtype: bool
        """
        return self._show_note_when_empty

    @show_note_when_empty.setter
    def show_note_when_empty(self, show_note_when_empty):
        """Sets the show_note_when_empty of this GeoViewProperties.

        If true, will display note when empty

        :param show_note_when_empty: The show_note_when_empty of this GeoViewProperties.
        :type show_note_when_empty: bool
        """
        if show_note_when_empty is None:
            raise ValueError("Invalid value for `show_note_when_empty`, must not be `None`")

        self._show_note_when_empty = show_note_when_empty

    @property
    def type(self):
        """Gets the type of this GeoViewProperties.


        :return: The type of this GeoViewProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GeoViewProperties.


        :param type: The type of this GeoViewProperties.
        :type type: str
        """
        allowed_values = ["geo"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def zoom(self):
        """Gets the zoom of this GeoViewProperties.

        Zoom level used for initial display of the map

        :return: The zoom of this GeoViewProperties.
        :rtype: float
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this GeoViewProperties.

        Zoom level used for initial display of the map

        :param zoom: The zoom of this GeoViewProperties.
        :type zoom: float
        """
        if zoom is None:
            raise ValueError("Invalid value for `zoom`, must not be `None`")
        if zoom is not None and zoom > 28:
            raise ValueError("Invalid value for `zoom`, must be a value less than or equal to `28`")
        if zoom is not None and zoom < 1:
            raise ValueError("Invalid value for `zoom`, must be a value greater than or equal to `1`")

        self._zoom = zoom
