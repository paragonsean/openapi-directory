# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_status_level import RuleStatusLevel
from openapi_server import util


class StatusRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, current_level: RuleStatusLevel=None, period: str=None, previous_level: RuleStatusLevel=None):
        """StatusRule - a model defined in OpenAPI

        :param count: The count of this StatusRule.
        :param current_level: The current_level of this StatusRule.
        :param period: The period of this StatusRule.
        :param previous_level: The previous_level of this StatusRule.
        """
        self.openapi_types = {
            'count': int,
            'current_level': RuleStatusLevel,
            'period': str,
            'previous_level': RuleStatusLevel
        }

        self.attribute_map = {
            'count': 'count',
            'current_level': 'currentLevel',
            'period': 'period',
            'previous_level': 'previousLevel'
        }

        self._count = count
        self._current_level = current_level
        self._period = period
        self._previous_level = previous_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusRule of this StatusRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this StatusRule.


        :return: The count of this StatusRule.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this StatusRule.


        :param count: The count of this StatusRule.
        :type count: int
        """

        self._count = count

    @property
    def current_level(self):
        """Gets the current_level of this StatusRule.


        :return: The current_level of this StatusRule.
        :rtype: RuleStatusLevel
        """
        return self._current_level

    @current_level.setter
    def current_level(self, current_level):
        """Sets the current_level of this StatusRule.


        :param current_level: The current_level of this StatusRule.
        :type current_level: RuleStatusLevel
        """

        self._current_level = current_level

    @property
    def period(self):
        """Gets the period of this StatusRule.


        :return: The period of this StatusRule.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this StatusRule.


        :param period: The period of this StatusRule.
        :type period: str
        """

        self._period = period

    @property
    def previous_level(self):
        """Gets the previous_level of this StatusRule.


        :return: The previous_level of this StatusRule.
        :rtype: RuleStatusLevel
        """
        return self._previous_level

    @previous_level.setter
    def previous_level(self, previous_level):
        """Sets the previous_level of this StatusRule.


        :param previous_level: The previous_level of this StatusRule.
        :type previous_level: RuleStatusLevel
        """

        self._previous_level = previous_level
