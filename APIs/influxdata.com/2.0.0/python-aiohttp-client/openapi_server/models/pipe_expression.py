# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_expression import CallExpression
from openapi_server.models.expression import Expression
from openapi_server import util


class PipeExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, argument: Expression=None, call: CallExpression=None, type: str=None):
        """PipeExpression - a model defined in OpenAPI

        :param argument: The argument of this PipeExpression.
        :param call: The call of this PipeExpression.
        :param type: The type of this PipeExpression.
        """
        self.openapi_types = {
            'argument': Expression,
            'call': CallExpression,
            'type': str
        }

        self.attribute_map = {
            'argument': 'argument',
            'call': 'call',
            'type': 'type'
        }

        self._argument = argument
        self._call = call
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipeExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipeExpression of this PipeExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def argument(self):
        """Gets the argument of this PipeExpression.


        :return: The argument of this PipeExpression.
        :rtype: Expression
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """Sets the argument of this PipeExpression.


        :param argument: The argument of this PipeExpression.
        :type argument: Expression
        """

        self._argument = argument

    @property
    def call(self):
        """Gets the call of this PipeExpression.


        :return: The call of this PipeExpression.
        :rtype: CallExpression
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this PipeExpression.


        :param call: The call of this PipeExpression.
        :type call: CallExpression
        """

        self._call = call

    @property
    def type(self):
        """Gets the type of this PipeExpression.

        Type of AST node

        :return: The type of this PipeExpression.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PipeExpression.

        Type of AST node

        :param type: The type of this PipeExpression.
        :type type: str
        """

        self._type = type
