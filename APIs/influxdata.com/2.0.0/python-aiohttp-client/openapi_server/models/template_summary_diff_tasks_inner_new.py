# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemplateSummaryDiffTasksInnerNew(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cron: str=None, description: str=None, every: str=None, name: str=None, offset: str=None, query: str=None, status: str=None):
        """TemplateSummaryDiffTasksInnerNew - a model defined in OpenAPI

        :param cron: The cron of this TemplateSummaryDiffTasksInnerNew.
        :param description: The description of this TemplateSummaryDiffTasksInnerNew.
        :param every: The every of this TemplateSummaryDiffTasksInnerNew.
        :param name: The name of this TemplateSummaryDiffTasksInnerNew.
        :param offset: The offset of this TemplateSummaryDiffTasksInnerNew.
        :param query: The query of this TemplateSummaryDiffTasksInnerNew.
        :param status: The status of this TemplateSummaryDiffTasksInnerNew.
        """
        self.openapi_types = {
            'cron': str,
            'description': str,
            'every': str,
            'name': str,
            'offset': str,
            'query': str,
            'status': str
        }

        self.attribute_map = {
            'cron': 'cron',
            'description': 'description',
            'every': 'every',
            'name': 'name',
            'offset': 'offset',
            'query': 'query',
            'status': 'status'
        }

        self._cron = cron
        self._description = description
        self._every = every
        self._name = name
        self._offset = offset
        self._query = query
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateSummaryDiffTasksInnerNew':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateSummary_diff_tasks_inner_new of this TemplateSummaryDiffTasksInnerNew.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cron(self):
        """Gets the cron of this TemplateSummaryDiffTasksInnerNew.


        :return: The cron of this TemplateSummaryDiffTasksInnerNew.
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this TemplateSummaryDiffTasksInnerNew.


        :param cron: The cron of this TemplateSummaryDiffTasksInnerNew.
        :type cron: str
        """

        self._cron = cron

    @property
    def description(self):
        """Gets the description of this TemplateSummaryDiffTasksInnerNew.


        :return: The description of this TemplateSummaryDiffTasksInnerNew.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateSummaryDiffTasksInnerNew.


        :param description: The description of this TemplateSummaryDiffTasksInnerNew.
        :type description: str
        """

        self._description = description

    @property
    def every(self):
        """Gets the every of this TemplateSummaryDiffTasksInnerNew.


        :return: The every of this TemplateSummaryDiffTasksInnerNew.
        :rtype: str
        """
        return self._every

    @every.setter
    def every(self, every):
        """Sets the every of this TemplateSummaryDiffTasksInnerNew.


        :param every: The every of this TemplateSummaryDiffTasksInnerNew.
        :type every: str
        """

        self._every = every

    @property
    def name(self):
        """Gets the name of this TemplateSummaryDiffTasksInnerNew.


        :return: The name of this TemplateSummaryDiffTasksInnerNew.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateSummaryDiffTasksInnerNew.


        :param name: The name of this TemplateSummaryDiffTasksInnerNew.
        :type name: str
        """

        self._name = name

    @property
    def offset(self):
        """Gets the offset of this TemplateSummaryDiffTasksInnerNew.


        :return: The offset of this TemplateSummaryDiffTasksInnerNew.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TemplateSummaryDiffTasksInnerNew.


        :param offset: The offset of this TemplateSummaryDiffTasksInnerNew.
        :type offset: str
        """

        self._offset = offset

    @property
    def query(self):
        """Gets the query of this TemplateSummaryDiffTasksInnerNew.


        :return: The query of this TemplateSummaryDiffTasksInnerNew.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this TemplateSummaryDiffTasksInnerNew.


        :param query: The query of this TemplateSummaryDiffTasksInnerNew.
        :type query: str
        """

        self._query = query

    @property
    def status(self):
        """Gets the status of this TemplateSummaryDiffTasksInnerNew.


        :return: The status of this TemplateSummaryDiffTasksInnerNew.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TemplateSummaryDiffTasksInnerNew.


        :param status: The status of this TemplateSummaryDiffTasksInnerNew.
        :type status: str
        """

        self._status = status
