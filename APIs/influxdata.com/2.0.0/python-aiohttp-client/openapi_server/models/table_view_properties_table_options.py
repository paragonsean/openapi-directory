# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.renamable_field import RenamableField
from openapi_server import util


class TableViewPropertiesTableOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fix_first_column: bool=None, sort_by: RenamableField=None, vertical_time_axis: bool=None, wrapping: str=None):
        """TableViewPropertiesTableOptions - a model defined in OpenAPI

        :param fix_first_column: The fix_first_column of this TableViewPropertiesTableOptions.
        :param sort_by: The sort_by of this TableViewPropertiesTableOptions.
        :param vertical_time_axis: The vertical_time_axis of this TableViewPropertiesTableOptions.
        :param wrapping: The wrapping of this TableViewPropertiesTableOptions.
        """
        self.openapi_types = {
            'fix_first_column': bool,
            'sort_by': RenamableField,
            'vertical_time_axis': bool,
            'wrapping': str
        }

        self.attribute_map = {
            'fix_first_column': 'fixFirstColumn',
            'sort_by': 'sortBy',
            'vertical_time_axis': 'verticalTimeAxis',
            'wrapping': 'wrapping'
        }

        self._fix_first_column = fix_first_column
        self._sort_by = sort_by
        self._vertical_time_axis = vertical_time_axis
        self._wrapping = wrapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableViewPropertiesTableOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableViewProperties_tableOptions of this TableViewPropertiesTableOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fix_first_column(self):
        """Gets the fix_first_column of this TableViewPropertiesTableOptions.

        fixFirstColumn indicates whether the first column of the table should be locked

        :return: The fix_first_column of this TableViewPropertiesTableOptions.
        :rtype: bool
        """
        return self._fix_first_column

    @fix_first_column.setter
    def fix_first_column(self, fix_first_column):
        """Sets the fix_first_column of this TableViewPropertiesTableOptions.

        fixFirstColumn indicates whether the first column of the table should be locked

        :param fix_first_column: The fix_first_column of this TableViewPropertiesTableOptions.
        :type fix_first_column: bool
        """

        self._fix_first_column = fix_first_column

    @property
    def sort_by(self):
        """Gets the sort_by of this TableViewPropertiesTableOptions.


        :return: The sort_by of this TableViewPropertiesTableOptions.
        :rtype: RenamableField
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this TableViewPropertiesTableOptions.


        :param sort_by: The sort_by of this TableViewPropertiesTableOptions.
        :type sort_by: RenamableField
        """

        self._sort_by = sort_by

    @property
    def vertical_time_axis(self):
        """Gets the vertical_time_axis of this TableViewPropertiesTableOptions.

        verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically

        :return: The vertical_time_axis of this TableViewPropertiesTableOptions.
        :rtype: bool
        """
        return self._vertical_time_axis

    @vertical_time_axis.setter
    def vertical_time_axis(self, vertical_time_axis):
        """Sets the vertical_time_axis of this TableViewPropertiesTableOptions.

        verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically

        :param vertical_time_axis: The vertical_time_axis of this TableViewPropertiesTableOptions.
        :type vertical_time_axis: bool
        """

        self._vertical_time_axis = vertical_time_axis

    @property
    def wrapping(self):
        """Gets the wrapping of this TableViewPropertiesTableOptions.

        Wrapping describes the text wrapping style to be used in table views

        :return: The wrapping of this TableViewPropertiesTableOptions.
        :rtype: str
        """
        return self._wrapping

    @wrapping.setter
    def wrapping(self, wrapping):
        """Sets the wrapping of this TableViewPropertiesTableOptions.

        Wrapping describes the text wrapping style to be used in table views

        :param wrapping: The wrapping of this TableViewPropertiesTableOptions.
        :type wrapping: str
        """
        allowed_values = ["truncate", "wrap", "single-line"]  # noqa: E501
        if wrapping not in allowed_values:
            raise ValueError(
                "Invalid value for `wrapping` ({0}), must be one of {1}"
                .format(wrapping, allowed_values)
            )

        self._wrapping = wrapping
