# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_event import LogEvent
from openapi_server.models.run_links import RunLinks
from openapi_server import util


class Run(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finished_at: datetime=None, id: str=None, links: RunLinks=None, log: List[LogEvent]=None, requested_at: datetime=None, scheduled_for: datetime=None, started_at: datetime=None, status: str=None, task_id: str=None):
        """Run - a model defined in OpenAPI

        :param finished_at: The finished_at of this Run.
        :param id: The id of this Run.
        :param links: The links of this Run.
        :param log: The log of this Run.
        :param requested_at: The requested_at of this Run.
        :param scheduled_for: The scheduled_for of this Run.
        :param started_at: The started_at of this Run.
        :param status: The status of this Run.
        :param task_id: The task_id of this Run.
        """
        self.openapi_types = {
            'finished_at': datetime,
            'id': str,
            'links': RunLinks,
            'log': List[LogEvent],
            'requested_at': datetime,
            'scheduled_for': datetime,
            'started_at': datetime,
            'status': str,
            'task_id': str
        }

        self.attribute_map = {
            'finished_at': 'finishedAt',
            'id': 'id',
            'links': 'links',
            'log': 'log',
            'requested_at': 'requestedAt',
            'scheduled_for': 'scheduledFor',
            'started_at': 'startedAt',
            'status': 'status',
            'task_id': 'taskID'
        }

        self._finished_at = finished_at
        self._id = id
        self._links = links
        self._log = log
        self._requested_at = requested_at
        self._scheduled_for = scheduled_for
        self._started_at = started_at
        self._status = status
        self._task_id = task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Run':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Run of this Run.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finished_at(self):
        """Gets the finished_at of this Run.

        Time run finished executing, RFC3339Nano.

        :return: The finished_at of this Run.
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this Run.

        Time run finished executing, RFC3339Nano.

        :param finished_at: The finished_at of this Run.
        :type finished_at: datetime
        """

        self._finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this Run.


        :return: The id of this Run.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Run.


        :param id: The id of this Run.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Run.


        :return: The links of this Run.
        :rtype: RunLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Run.


        :param links: The links of this Run.
        :type links: RunLinks
        """

        self._links = links

    @property
    def log(self):
        """Gets the log of this Run.

        An array of logs associated with the run.

        :return: The log of this Run.
        :rtype: List[LogEvent]
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this Run.

        An array of logs associated with the run.

        :param log: The log of this Run.
        :type log: List[LogEvent]
        """

        self._log = log

    @property
    def requested_at(self):
        """Gets the requested_at of this Run.

        Time run was manually requested, RFC3339Nano.

        :return: The requested_at of this Run.
        :rtype: datetime
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this Run.

        Time run was manually requested, RFC3339Nano.

        :param requested_at: The requested_at of this Run.
        :type requested_at: datetime
        """

        self._requested_at = requested_at

    @property
    def scheduled_for(self):
        """Gets the scheduled_for of this Run.

        Time used for run's \"now\" option, RFC3339.

        :return: The scheduled_for of this Run.
        :rtype: datetime
        """
        return self._scheduled_for

    @scheduled_for.setter
    def scheduled_for(self, scheduled_for):
        """Sets the scheduled_for of this Run.

        Time used for run's \"now\" option, RFC3339.

        :param scheduled_for: The scheduled_for of this Run.
        :type scheduled_for: datetime
        """

        self._scheduled_for = scheduled_for

    @property
    def started_at(self):
        """Gets the started_at of this Run.

        Time run started executing, RFC3339Nano.

        :return: The started_at of this Run.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Run.

        Time run started executing, RFC3339Nano.

        :param started_at: The started_at of this Run.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this Run.


        :return: The status of this Run.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Run.


        :param status: The status of this Run.
        :type status: str
        """
        allowed_values = ["scheduled", "started", "failed", "success", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task_id(self):
        """Gets the task_id of this Run.


        :return: The task_id of this Run.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Run.


        :param task_id: The task_id of this Run.
        :type task_id: str
        """

        self._task_id = task_id
