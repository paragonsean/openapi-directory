# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Ready(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, started: datetime=None, status: str=None, up: str=None):
        """Ready - a model defined in OpenAPI

        :param started: The started of this Ready.
        :param status: The status of this Ready.
        :param up: The up of this Ready.
        """
        self.openapi_types = {
            'started': datetime,
            'status': str,
            'up': str
        }

        self.attribute_map = {
            'started': 'started',
            'status': 'status',
            'up': 'up'
        }

        self._started = started
        self._status = status
        self._up = up

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ready':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ready of this Ready.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def started(self):
        """Gets the started of this Ready.


        :return: The started of this Ready.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Ready.


        :param started: The started of this Ready.
        :type started: datetime
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this Ready.


        :return: The status of this Ready.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Ready.


        :param status: The status of this Ready.
        :type status: str
        """
        allowed_values = ["ready"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def up(self):
        """Gets the up of this Ready.


        :return: The up of this Ready.
        :rtype: str
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this Ready.


        :param up: The up of this Ready.
        :type up: str
        """

        self._up = up
