# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_links import DocumentLinks
from openapi_server.models.document_meta import DocumentMeta
from openapi_server.models.label import Label
from openapi_server import util


class DocumentListEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, labels: List[Label]=None, links: DocumentLinks=None, meta: DocumentMeta=None):
        """DocumentListEntry - a model defined in OpenAPI

        :param id: The id of this DocumentListEntry.
        :param labels: The labels of this DocumentListEntry.
        :param links: The links of this DocumentListEntry.
        :param meta: The meta of this DocumentListEntry.
        """
        self.openapi_types = {
            'id': str,
            'labels': List[Label],
            'links': DocumentLinks,
            'meta': DocumentMeta
        }

        self.attribute_map = {
            'id': 'id',
            'labels': 'labels',
            'links': 'links',
            'meta': 'meta'
        }

        self._id = id
        self._labels = labels
        self._links = links
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentListEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentListEntry of this DocumentListEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DocumentListEntry.


        :return: The id of this DocumentListEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentListEntry.


        :param id: The id of this DocumentListEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this DocumentListEntry.


        :return: The labels of this DocumentListEntry.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DocumentListEntry.


        :param labels: The labels of this DocumentListEntry.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def links(self):
        """Gets the links of this DocumentListEntry.


        :return: The links of this DocumentListEntry.
        :rtype: DocumentLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DocumentListEntry.


        :param links: The links of this DocumentListEntry.
        :type links: DocumentLinks
        """

        self._links = links

    @property
    def meta(self):
        """Gets the meta of this DocumentListEntry.


        :return: The meta of this DocumentListEntry.
        :rtype: DocumentMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this DocumentListEntry.


        :param meta: The meta of this DocumentListEntry.
        :type meta: DocumentMeta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta
