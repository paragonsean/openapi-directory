# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_apply_actions_inner import TemplateApplyActionsInner
from openapi_server.models.template_apply_env_refs_value import TemplateApplyEnvRefsValue
from openapi_server.models.template_apply_remotes_inner import TemplateApplyRemotesInner
from openapi_server.models.template_apply_template import TemplateApplyTemplate
from openapi_server import util


class TemplateApply(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[TemplateApplyActionsInner]=None, dry_run: bool=None, env_refs: Dict[str, TemplateApplyEnvRefsValue]=None, org_id: str=None, remotes: List[TemplateApplyRemotesInner]=None, secrets: Dict[str, str]=None, stack_id: str=None, template: TemplateApplyTemplate=None, templates: List[TemplateApplyTemplate]=None):
        """TemplateApply - a model defined in OpenAPI

        :param actions: The actions of this TemplateApply.
        :param dry_run: The dry_run of this TemplateApply.
        :param env_refs: The env_refs of this TemplateApply.
        :param org_id: The org_id of this TemplateApply.
        :param remotes: The remotes of this TemplateApply.
        :param secrets: The secrets of this TemplateApply.
        :param stack_id: The stack_id of this TemplateApply.
        :param template: The template of this TemplateApply.
        :param templates: The templates of this TemplateApply.
        """
        self.openapi_types = {
            'actions': List[TemplateApplyActionsInner],
            'dry_run': bool,
            'env_refs': Dict[str, TemplateApplyEnvRefsValue],
            'org_id': str,
            'remotes': List[TemplateApplyRemotesInner],
            'secrets': Dict[str, str],
            'stack_id': str,
            'template': TemplateApplyTemplate,
            'templates': List[TemplateApplyTemplate]
        }

        self.attribute_map = {
            'actions': 'actions',
            'dry_run': 'dryRun',
            'env_refs': 'envRefs',
            'org_id': 'orgID',
            'remotes': 'remotes',
            'secrets': 'secrets',
            'stack_id': 'stackID',
            'template': 'template',
            'templates': 'templates'
        }

        self._actions = actions
        self._dry_run = dry_run
        self._env_refs = env_refs
        self._org_id = org_id
        self._remotes = remotes
        self._secrets = secrets
        self._stack_id = stack_id
        self._template = template
        self._templates = templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateApply':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateApply of this TemplateApply.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this TemplateApply.


        :return: The actions of this TemplateApply.
        :rtype: List[TemplateApplyActionsInner]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this TemplateApply.


        :param actions: The actions of this TemplateApply.
        :type actions: List[TemplateApplyActionsInner]
        """

        self._actions = actions

    @property
    def dry_run(self):
        """Gets the dry_run of this TemplateApply.


        :return: The dry_run of this TemplateApply.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this TemplateApply.


        :param dry_run: The dry_run of this TemplateApply.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def env_refs(self):
        """Gets the env_refs of this TemplateApply.


        :return: The env_refs of this TemplateApply.
        :rtype: Dict[str, TemplateApplyEnvRefsValue]
        """
        return self._env_refs

    @env_refs.setter
    def env_refs(self, env_refs):
        """Sets the env_refs of this TemplateApply.


        :param env_refs: The env_refs of this TemplateApply.
        :type env_refs: Dict[str, TemplateApplyEnvRefsValue]
        """

        self._env_refs = env_refs

    @property
    def org_id(self):
        """Gets the org_id of this TemplateApply.


        :return: The org_id of this TemplateApply.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this TemplateApply.


        :param org_id: The org_id of this TemplateApply.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def remotes(self):
        """Gets the remotes of this TemplateApply.


        :return: The remotes of this TemplateApply.
        :rtype: List[TemplateApplyRemotesInner]
        """
        return self._remotes

    @remotes.setter
    def remotes(self, remotes):
        """Sets the remotes of this TemplateApply.


        :param remotes: The remotes of this TemplateApply.
        :type remotes: List[TemplateApplyRemotesInner]
        """

        self._remotes = remotes

    @property
    def secrets(self):
        """Gets the secrets of this TemplateApply.


        :return: The secrets of this TemplateApply.
        :rtype: Dict[str, str]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this TemplateApply.


        :param secrets: The secrets of this TemplateApply.
        :type secrets: Dict[str, str]
        """

        self._secrets = secrets

    @property
    def stack_id(self):
        """Gets the stack_id of this TemplateApply.


        :return: The stack_id of this TemplateApply.
        :rtype: str
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """Sets the stack_id of this TemplateApply.


        :param stack_id: The stack_id of this TemplateApply.
        :type stack_id: str
        """

        self._stack_id = stack_id

    @property
    def template(self):
        """Gets the template of this TemplateApply.


        :return: The template of this TemplateApply.
        :rtype: TemplateApplyTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this TemplateApply.


        :param template: The template of this TemplateApply.
        :type template: TemplateApplyTemplate
        """

        self._template = template

    @property
    def templates(self):
        """Gets the templates of this TemplateApply.


        :return: The templates of this TemplateApply.
        :rtype: List[TemplateApplyTemplate]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this TemplateApply.


        :param templates: The templates of this TemplateApply.
        :type templates: List[TemplateApplyTemplate]
        """

        self._templates = templates
