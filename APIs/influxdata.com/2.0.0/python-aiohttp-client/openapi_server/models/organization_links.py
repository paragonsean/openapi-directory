# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buckets: str=None, dashboards: str=None, labels: str=None, members: str=None, owners: str=None, secrets: str=None, _self: str=None, tasks: str=None):
        """OrganizationLinks - a model defined in OpenAPI

        :param buckets: The buckets of this OrganizationLinks.
        :param dashboards: The dashboards of this OrganizationLinks.
        :param labels: The labels of this OrganizationLinks.
        :param members: The members of this OrganizationLinks.
        :param owners: The owners of this OrganizationLinks.
        :param secrets: The secrets of this OrganizationLinks.
        :param _self: The _self of this OrganizationLinks.
        :param tasks: The tasks of this OrganizationLinks.
        """
        self.openapi_types = {
            'buckets': str,
            'dashboards': str,
            'labels': str,
            'members': str,
            'owners': str,
            'secrets': str,
            '_self': str,
            'tasks': str
        }

        self.attribute_map = {
            'buckets': 'buckets',
            'dashboards': 'dashboards',
            'labels': 'labels',
            'members': 'members',
            'owners': 'owners',
            'secrets': 'secrets',
            '_self': 'self',
            'tasks': 'tasks'
        }

        self._buckets = buckets
        self._dashboards = dashboards
        self._labels = labels
        self._members = members
        self._owners = owners
        self._secrets = secrets
        self.__self = _self
        self._tasks = tasks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization_links of this OrganizationLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buckets(self):
        """Gets the buckets of this OrganizationLinks.

        URI of resource.

        :return: The buckets of this OrganizationLinks.
        :rtype: str
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this OrganizationLinks.

        URI of resource.

        :param buckets: The buckets of this OrganizationLinks.
        :type buckets: str
        """

        self._buckets = buckets

    @property
    def dashboards(self):
        """Gets the dashboards of this OrganizationLinks.

        URI of resource.

        :return: The dashboards of this OrganizationLinks.
        :rtype: str
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this OrganizationLinks.

        URI of resource.

        :param dashboards: The dashboards of this OrganizationLinks.
        :type dashboards: str
        """

        self._dashboards = dashboards

    @property
    def labels(self):
        """Gets the labels of this OrganizationLinks.

        URI of resource.

        :return: The labels of this OrganizationLinks.
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this OrganizationLinks.

        URI of resource.

        :param labels: The labels of this OrganizationLinks.
        :type labels: str
        """

        self._labels = labels

    @property
    def members(self):
        """Gets the members of this OrganizationLinks.

        URI of resource.

        :return: The members of this OrganizationLinks.
        :rtype: str
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this OrganizationLinks.

        URI of resource.

        :param members: The members of this OrganizationLinks.
        :type members: str
        """

        self._members = members

    @property
    def owners(self):
        """Gets the owners of this OrganizationLinks.

        URI of resource.

        :return: The owners of this OrganizationLinks.
        :rtype: str
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this OrganizationLinks.

        URI of resource.

        :param owners: The owners of this OrganizationLinks.
        :type owners: str
        """

        self._owners = owners

    @property
    def secrets(self):
        """Gets the secrets of this OrganizationLinks.

        URI of resource.

        :return: The secrets of this OrganizationLinks.
        :rtype: str
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this OrganizationLinks.

        URI of resource.

        :param secrets: The secrets of this OrganizationLinks.
        :type secrets: str
        """

        self._secrets = secrets

    @property
    def _self(self):
        """Gets the _self of this OrganizationLinks.

        URI of resource.

        :return: The _self of this OrganizationLinks.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this OrganizationLinks.

        URI of resource.

        :param _self: The _self of this OrganizationLinks.
        :type _self: str
        """

        self.__self = _self

    @property
    def tasks(self):
        """Gets the tasks of this OrganizationLinks.

        URI of resource.

        :return: The tasks of this OrganizationLinks.
        :rtype: str
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this OrganizationLinks.

        URI of resource.

        :param tasks: The tasks of this OrganizationLinks.
        :type tasks: str
        """

        self._tasks = tasks
