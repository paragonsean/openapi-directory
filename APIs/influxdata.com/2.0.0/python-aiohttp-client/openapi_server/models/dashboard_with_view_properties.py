# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cell_with_view_properties import CellWithViewProperties
from openapi_server.models.dashboard_all_of_links import DashboardAllOfLinks
from openapi_server.models.dashboard_all_of_meta import DashboardAllOfMeta
from openapi_server.models.label import Label
from openapi_server import util


class DashboardWithViewProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, org_id: str=None, cells: List[CellWithViewProperties]=None, id: str=None, labels: List[Label]=None, links: DashboardAllOfLinks=None, meta: DashboardAllOfMeta=None):
        """DashboardWithViewProperties - a model defined in OpenAPI

        :param description: The description of this DashboardWithViewProperties.
        :param name: The name of this DashboardWithViewProperties.
        :param org_id: The org_id of this DashboardWithViewProperties.
        :param cells: The cells of this DashboardWithViewProperties.
        :param id: The id of this DashboardWithViewProperties.
        :param labels: The labels of this DashboardWithViewProperties.
        :param links: The links of this DashboardWithViewProperties.
        :param meta: The meta of this DashboardWithViewProperties.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'org_id': str,
            'cells': List[CellWithViewProperties],
            'id': str,
            'labels': List[Label],
            'links': DashboardAllOfLinks,
            'meta': DashboardAllOfMeta
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'org_id': 'orgID',
            'cells': 'cells',
            'id': 'id',
            'labels': 'labels',
            'links': 'links',
            'meta': 'meta'
        }

        self._description = description
        self._name = name
        self._org_id = org_id
        self._cells = cells
        self._id = id
        self._labels = labels
        self._links = links
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardWithViewProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardWithViewProperties of this DashboardWithViewProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DashboardWithViewProperties.

        The user-facing description of the dashboard.

        :return: The description of this DashboardWithViewProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardWithViewProperties.

        The user-facing description of the dashboard.

        :param description: The description of this DashboardWithViewProperties.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this DashboardWithViewProperties.

        The user-facing name of the dashboard.

        :return: The name of this DashboardWithViewProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardWithViewProperties.

        The user-facing name of the dashboard.

        :param name: The name of this DashboardWithViewProperties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this DashboardWithViewProperties.

        The ID of the organization that owns the dashboard.

        :return: The org_id of this DashboardWithViewProperties.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this DashboardWithViewProperties.

        The ID of the organization that owns the dashboard.

        :param org_id: The org_id of this DashboardWithViewProperties.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def cells(self):
        """Gets the cells of this DashboardWithViewProperties.


        :return: The cells of this DashboardWithViewProperties.
        :rtype: List[CellWithViewProperties]
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this DashboardWithViewProperties.


        :param cells: The cells of this DashboardWithViewProperties.
        :type cells: List[CellWithViewProperties]
        """

        self._cells = cells

    @property
    def id(self):
        """Gets the id of this DashboardWithViewProperties.


        :return: The id of this DashboardWithViewProperties.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardWithViewProperties.


        :param id: The id of this DashboardWithViewProperties.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this DashboardWithViewProperties.


        :return: The labels of this DashboardWithViewProperties.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DashboardWithViewProperties.


        :param labels: The labels of this DashboardWithViewProperties.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def links(self):
        """Gets the links of this DashboardWithViewProperties.


        :return: The links of this DashboardWithViewProperties.
        :rtype: DashboardAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DashboardWithViewProperties.


        :param links: The links of this DashboardWithViewProperties.
        :type links: DashboardAllOfLinks
        """

        self._links = links

    @property
    def meta(self):
        """Gets the meta of this DashboardWithViewProperties.


        :return: The meta of this DashboardWithViewProperties.
        :rtype: DashboardAllOfMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this DashboardWithViewProperties.


        :param meta: The meta of this DashboardWithViewProperties.
        :type meta: DashboardAllOfMeta
        """

        self._meta = meta
