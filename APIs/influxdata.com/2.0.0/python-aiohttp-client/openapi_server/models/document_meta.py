# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, name: str=None, template_id: str=None, type: str=None, updated_at: datetime=None, version: str=None):
        """DocumentMeta - a model defined in OpenAPI

        :param created_at: The created_at of this DocumentMeta.
        :param description: The description of this DocumentMeta.
        :param name: The name of this DocumentMeta.
        :param template_id: The template_id of this DocumentMeta.
        :param type: The type of this DocumentMeta.
        :param updated_at: The updated_at of this DocumentMeta.
        :param version: The version of this DocumentMeta.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'name': str,
            'template_id': str,
            'type': str,
            'updated_at': datetime,
            'version': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'description': 'description',
            'name': 'name',
            'template_id': 'templateID',
            'type': 'type',
            'updated_at': 'updatedAt',
            'version': 'version'
        }

        self._created_at = created_at
        self._description = description
        self._name = name
        self._template_id = template_id
        self._type = type
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentMeta of this DocumentMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this DocumentMeta.


        :return: The created_at of this DocumentMeta.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DocumentMeta.


        :param created_at: The created_at of this DocumentMeta.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this DocumentMeta.


        :return: The description of this DocumentMeta.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentMeta.


        :param description: The description of this DocumentMeta.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this DocumentMeta.


        :return: The name of this DocumentMeta.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentMeta.


        :param name: The name of this DocumentMeta.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def template_id(self):
        """Gets the template_id of this DocumentMeta.


        :return: The template_id of this DocumentMeta.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this DocumentMeta.


        :param template_id: The template_id of this DocumentMeta.
        :type template_id: str
        """

        self._template_id = template_id

    @property
    def type(self):
        """Gets the type of this DocumentMeta.


        :return: The type of this DocumentMeta.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DocumentMeta.


        :param type: The type of this DocumentMeta.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this DocumentMeta.


        :return: The updated_at of this DocumentMeta.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DocumentMeta.


        :param updated_at: The updated_at of this DocumentMeta.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this DocumentMeta.


        :return: The version of this DocumentMeta.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DocumentMeta.


        :param version: The version of this DocumentMeta.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
