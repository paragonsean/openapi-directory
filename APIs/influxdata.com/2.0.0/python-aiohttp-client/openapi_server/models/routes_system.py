# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoutesSystem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debug: str=None, health: str=None, metrics: str=None):
        """RoutesSystem - a model defined in OpenAPI

        :param debug: The debug of this RoutesSystem.
        :param health: The health of this RoutesSystem.
        :param metrics: The metrics of this RoutesSystem.
        """
        self.openapi_types = {
            'debug': str,
            'health': str,
            'metrics': str
        }

        self.attribute_map = {
            'debug': 'debug',
            'health': 'health',
            'metrics': 'metrics'
        }

        self._debug = debug
        self._health = health
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutesSystem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Routes_system of this RoutesSystem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debug(self):
        """Gets the debug of this RoutesSystem.


        :return: The debug of this RoutesSystem.
        :rtype: str
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this RoutesSystem.


        :param debug: The debug of this RoutesSystem.
        :type debug: str
        """

        self._debug = debug

    @property
    def health(self):
        """Gets the health of this RoutesSystem.


        :return: The health of this RoutesSystem.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this RoutesSystem.


        :param health: The health of this RoutesSystem.
        :type health: str
        """

        self._health = health

    @property
    def metrics(self):
        """Gets the metrics of this RoutesSystem.


        :return: The metrics of this RoutesSystem.
        :rtype: str
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this RoutesSystem.


        :param metrics: The metrics of this RoutesSystem.
        :type metrics: str
        """

        self._metrics = metrics
