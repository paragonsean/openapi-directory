# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_env_references_inner import TemplateEnvReferencesInner
from openapi_server.models.template_kind import TemplateKind
from openapi_server.models.template_summary_label_properties import TemplateSummaryLabelProperties
from openapi_server import util


class TemplateSummaryLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, env_references: List[TemplateEnvReferencesInner]=None, id: str=None, kind: TemplateKind=None, name: str=None, org_id: str=None, properties: TemplateSummaryLabelProperties=None, template_meta_name: str=None):
        """TemplateSummaryLabel - a model defined in OpenAPI

        :param env_references: The env_references of this TemplateSummaryLabel.
        :param id: The id of this TemplateSummaryLabel.
        :param kind: The kind of this TemplateSummaryLabel.
        :param name: The name of this TemplateSummaryLabel.
        :param org_id: The org_id of this TemplateSummaryLabel.
        :param properties: The properties of this TemplateSummaryLabel.
        :param template_meta_name: The template_meta_name of this TemplateSummaryLabel.
        """
        self.openapi_types = {
            'env_references': List[TemplateEnvReferencesInner],
            'id': str,
            'kind': TemplateKind,
            'name': str,
            'org_id': str,
            'properties': TemplateSummaryLabelProperties,
            'template_meta_name': str
        }

        self.attribute_map = {
            'env_references': 'envReferences',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'org_id': 'orgID',
            'properties': 'properties',
            'template_meta_name': 'templateMetaName'
        }

        self._env_references = env_references
        self._id = id
        self._kind = kind
        self._name = name
        self._org_id = org_id
        self._properties = properties
        self._template_meta_name = template_meta_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateSummaryLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateSummaryLabel of this TemplateSummaryLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def env_references(self):
        """Gets the env_references of this TemplateSummaryLabel.


        :return: The env_references of this TemplateSummaryLabel.
        :rtype: List[TemplateEnvReferencesInner]
        """
        return self._env_references

    @env_references.setter
    def env_references(self, env_references):
        """Sets the env_references of this TemplateSummaryLabel.


        :param env_references: The env_references of this TemplateSummaryLabel.
        :type env_references: List[TemplateEnvReferencesInner]
        """

        self._env_references = env_references

    @property
    def id(self):
        """Gets the id of this TemplateSummaryLabel.


        :return: The id of this TemplateSummaryLabel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateSummaryLabel.


        :param id: The id of this TemplateSummaryLabel.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this TemplateSummaryLabel.


        :return: The kind of this TemplateSummaryLabel.
        :rtype: TemplateKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TemplateSummaryLabel.


        :param kind: The kind of this TemplateSummaryLabel.
        :type kind: TemplateKind
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this TemplateSummaryLabel.


        :return: The name of this TemplateSummaryLabel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateSummaryLabel.


        :param name: The name of this TemplateSummaryLabel.
        :type name: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this TemplateSummaryLabel.


        :return: The org_id of this TemplateSummaryLabel.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this TemplateSummaryLabel.


        :param org_id: The org_id of this TemplateSummaryLabel.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def properties(self):
        """Gets the properties of this TemplateSummaryLabel.


        :return: The properties of this TemplateSummaryLabel.
        :rtype: TemplateSummaryLabelProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TemplateSummaryLabel.


        :param properties: The properties of this TemplateSummaryLabel.
        :type properties: TemplateSummaryLabelProperties
        """

        self._properties = properties

    @property
    def template_meta_name(self):
        """Gets the template_meta_name of this TemplateSummaryLabel.


        :return: The template_meta_name of this TemplateSummaryLabel.
        :rtype: str
        """
        return self._template_meta_name

    @template_meta_name.setter
    def template_meta_name(self, template_meta_name):
        """Sets the template_meta_name of this TemplateSummaryLabel.


        :param template_meta_name: The template_meta_name of this TemplateSummaryLabel.
        :type template_meta_name: str
        """

        self._template_meta_name = template_meta_name
