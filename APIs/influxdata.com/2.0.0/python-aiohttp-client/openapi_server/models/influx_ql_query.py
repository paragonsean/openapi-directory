# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InfluxQLQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, query: str=None, type: str=None):
        """InfluxQLQuery - a model defined in OpenAPI

        :param bucket: The bucket of this InfluxQLQuery.
        :param query: The query of this InfluxQLQuery.
        :param type: The type of this InfluxQLQuery.
        """
        self.openapi_types = {
            'bucket': str,
            'query': str,
            'type': str
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'query': 'query',
            'type': 'type'
        }

        self._bucket = bucket
        self._query = query
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfluxQLQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InfluxQLQuery of this InfluxQLQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this InfluxQLQuery.

        Bucket is to be used instead of the database and retention policy specified in the InfluxQL query.

        :return: The bucket of this InfluxQLQuery.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this InfluxQLQuery.

        Bucket is to be used instead of the database and retention policy specified in the InfluxQL query.

        :param bucket: The bucket of this InfluxQLQuery.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def query(self):
        """Gets the query of this InfluxQLQuery.

        InfluxQL query execute.

        :return: The query of this InfluxQLQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this InfluxQLQuery.

        InfluxQL query execute.

        :param query: The query of this InfluxQLQuery.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def type(self):
        """Gets the type of this InfluxQLQuery.

        The type of query. Must be \"influxql\".

        :return: The type of this InfluxQLQuery.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InfluxQLQuery.

        The type of query. Must be \"influxql\".

        :param type: The type of this InfluxQLQuery.
        :type type: str
        """
        allowed_values = ["influxql"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
