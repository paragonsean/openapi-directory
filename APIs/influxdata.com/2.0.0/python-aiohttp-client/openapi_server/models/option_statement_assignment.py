# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expression import Expression
from openapi_server.models.identifier import Identifier
from openapi_server.models.member_assignment import MemberAssignment
from openapi_server.models.member_expression import MemberExpression
from openapi_server.models.variable_assignment import VariableAssignment
from openapi_server import util


class OptionStatementAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: Identifier=None, init: Expression=None, type: str=None, member: MemberExpression=None):
        """OptionStatementAssignment - a model defined in OpenAPI

        :param id: The id of this OptionStatementAssignment.
        :param init: The init of this OptionStatementAssignment.
        :param type: The type of this OptionStatementAssignment.
        :param member: The member of this OptionStatementAssignment.
        """
        self.openapi_types = {
            'id': Identifier,
            'init': Expression,
            'type': str,
            'member': MemberExpression
        }

        self.attribute_map = {
            'id': 'id',
            'init': 'init',
            'type': 'type',
            'member': 'member'
        }

        self._id = id
        self._init = init
        self._type = type
        self._member = member

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptionStatementAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptionStatement_assignment of this OptionStatementAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OptionStatementAssignment.


        :return: The id of this OptionStatementAssignment.
        :rtype: Identifier
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OptionStatementAssignment.


        :param id: The id of this OptionStatementAssignment.
        :type id: Identifier
        """

        self._id = id

    @property
    def init(self):
        """Gets the init of this OptionStatementAssignment.


        :return: The init of this OptionStatementAssignment.
        :rtype: Expression
        """
        return self._init

    @init.setter
    def init(self, init):
        """Sets the init of this OptionStatementAssignment.


        :param init: The init of this OptionStatementAssignment.
        :type init: Expression
        """

        self._init = init

    @property
    def type(self):
        """Gets the type of this OptionStatementAssignment.

        Type of AST node

        :return: The type of this OptionStatementAssignment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OptionStatementAssignment.

        Type of AST node

        :param type: The type of this OptionStatementAssignment.
        :type type: str
        """

        self._type = type

    @property
    def member(self):
        """Gets the member of this OptionStatementAssignment.


        :return: The member of this OptionStatementAssignment.
        :rtype: MemberExpression
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this OptionStatementAssignment.


        :param member: The member of this OptionStatementAssignment.
        :type member: MemberExpression
        """

        self._member = member
