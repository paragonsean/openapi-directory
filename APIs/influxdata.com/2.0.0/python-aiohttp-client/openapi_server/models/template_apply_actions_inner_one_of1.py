# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_apply_actions_inner_one_of1_properties import TemplateApplyActionsInnerOneOf1Properties
from openapi_server import util


class TemplateApplyActionsInnerOneOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, properties: TemplateApplyActionsInnerOneOf1Properties=None):
        """TemplateApplyActionsInnerOneOf1 - a model defined in OpenAPI

        :param action: The action of this TemplateApplyActionsInnerOneOf1.
        :param properties: The properties of this TemplateApplyActionsInnerOneOf1.
        """
        self.openapi_types = {
            'action': str,
            'properties': TemplateApplyActionsInnerOneOf1Properties
        }

        self.attribute_map = {
            'action': 'action',
            'properties': 'properties'
        }

        self._action = action
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateApplyActionsInnerOneOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateApply_actions_inner_oneOf_1 of this TemplateApplyActionsInnerOneOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this TemplateApplyActionsInnerOneOf1.


        :return: The action of this TemplateApplyActionsInnerOneOf1.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TemplateApplyActionsInnerOneOf1.


        :param action: The action of this TemplateApplyActionsInnerOneOf1.
        :type action: str
        """
        allowed_values = ["skipResource"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def properties(self):
        """Gets the properties of this TemplateApplyActionsInnerOneOf1.


        :return: The properties of this TemplateApplyActionsInnerOneOf1.
        :rtype: TemplateApplyActionsInnerOneOf1Properties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TemplateApplyActionsInnerOneOf1.


        :param properties: The properties of this TemplateApplyActionsInnerOneOf1.
        :type properties: TemplateApplyActionsInnerOneOf1Properties
        """

        self._properties = properties
