# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, args: List[ModelField]=None, type: str=None, value: str=None):
        """ModelField - a model defined in OpenAPI

        :param alias: The alias of this ModelField.
        :param args: The args of this ModelField.
        :param type: The type of this ModelField.
        :param value: The value of this ModelField.
        """
        self.openapi_types = {
            'alias': str,
            'args': List[ModelField],
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'args': 'args',
            'type': 'type',
            'value': 'value'
        }

        self._alias = alias
        self._args = args
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this ModelField.

        Alias overrides the field name in the returned response.  Applies only if type is `func`

        :return: The alias of this ModelField.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ModelField.

        Alias overrides the field name in the returned response.  Applies only if type is `func`

        :param alias: The alias of this ModelField.
        :type alias: str
        """

        self._alias = alias

    @property
    def args(self):
        """Gets the args of this ModelField.

        Args are the arguments to the function

        :return: The args of this ModelField.
        :rtype: List[ModelField]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this ModelField.

        Args are the arguments to the function

        :param args: The args of this ModelField.
        :type args: List[ModelField]
        """

        self._args = args

    @property
    def type(self):
        """Gets the type of this ModelField.

        `type` describes the field type. `func` is a function. `field` is a field reference.

        :return: The type of this ModelField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelField.

        `type` describes the field type. `func` is a function. `field` is a field reference.

        :param type: The type of this ModelField.
        :type type: str
        """
        allowed_values = ["func", "field", "integer", "number", "regex", "wildcard"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this ModelField.

        value is the value of the field.  Meaning of the value is implied by the `type` key

        :return: The value of this ModelField.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ModelField.

        value is the value of the field.  Meaning of the value is implied by the `type` key

        :param value: The value of this ModelField.
        :type value: str
        """

        self._value = value
