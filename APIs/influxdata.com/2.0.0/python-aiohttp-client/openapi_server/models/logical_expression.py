# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expression import Expression
from openapi_server import util


class LogicalExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, left: Expression=None, operator: str=None, right: Expression=None, type: str=None):
        """LogicalExpression - a model defined in OpenAPI

        :param left: The left of this LogicalExpression.
        :param operator: The operator of this LogicalExpression.
        :param right: The right of this LogicalExpression.
        :param type: The type of this LogicalExpression.
        """
        self.openapi_types = {
            'left': Expression,
            'operator': str,
            'right': Expression,
            'type': str
        }

        self.attribute_map = {
            'left': 'left',
            'operator': 'operator',
            'right': 'right',
            'type': 'type'
        }

        self._left = left
        self._operator = operator
        self._right = right
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogicalExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogicalExpression of this LogicalExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def left(self):
        """Gets the left of this LogicalExpression.


        :return: The left of this LogicalExpression.
        :rtype: Expression
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this LogicalExpression.


        :param left: The left of this LogicalExpression.
        :type left: Expression
        """

        self._left = left

    @property
    def operator(self):
        """Gets the operator of this LogicalExpression.


        :return: The operator of this LogicalExpression.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this LogicalExpression.


        :param operator: The operator of this LogicalExpression.
        :type operator: str
        """

        self._operator = operator

    @property
    def right(self):
        """Gets the right of this LogicalExpression.


        :return: The right of this LogicalExpression.
        :rtype: Expression
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this LogicalExpression.


        :param right: The right of this LogicalExpression.
        :type right: Expression
        """

        self._right = right

    @property
    def type(self):
        """Gets the type of this LogicalExpression.

        Type of AST node

        :return: The type of this LogicalExpression.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LogicalExpression.

        Type of AST node

        :param type: The type of this LogicalExpression.
        :type type: str
        """

        self._type = type
