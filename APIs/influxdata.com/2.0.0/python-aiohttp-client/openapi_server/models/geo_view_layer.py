# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.axis import Axis
from openapi_server.models.dashboard_color import DashboardColor
from openapi_server.models.geo_circle_view_layer import GeoCircleViewLayer
from openapi_server.models.geo_heat_map_view_layer import GeoHeatMapViewLayer
from openapi_server.models.geo_point_map_view_layer import GeoPointMapViewLayer
from openapi_server.models.geo_track_map_view_layer import GeoTrackMapViewLayer
from openapi_server import util


class GeoViewLayer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, color_dimension: Axis=None, color_field: str=None, colors: List[DashboardColor]=None, interpolate_colors: bool=None, radius: int=None, radius_dimension: Axis=None, radius_field: str=None, blur: int=None, intensity_dimension: Axis=None, intensity_field: str=None, is_clustered: bool=None, random_colors: bool=None, speed: int=None, track_width: int=None):
        """GeoViewLayer - a model defined in OpenAPI

        :param type: The type of this GeoViewLayer.
        :param color_dimension: The color_dimension of this GeoViewLayer.
        :param color_field: The color_field of this GeoViewLayer.
        :param colors: The colors of this GeoViewLayer.
        :param interpolate_colors: The interpolate_colors of this GeoViewLayer.
        :param radius: The radius of this GeoViewLayer.
        :param radius_dimension: The radius_dimension of this GeoViewLayer.
        :param radius_field: The radius_field of this GeoViewLayer.
        :param blur: The blur of this GeoViewLayer.
        :param intensity_dimension: The intensity_dimension of this GeoViewLayer.
        :param intensity_field: The intensity_field of this GeoViewLayer.
        :param is_clustered: The is_clustered of this GeoViewLayer.
        :param random_colors: The random_colors of this GeoViewLayer.
        :param speed: The speed of this GeoViewLayer.
        :param track_width: The track_width of this GeoViewLayer.
        """
        self.openapi_types = {
            'type': str,
            'color_dimension': Axis,
            'color_field': str,
            'colors': List[DashboardColor],
            'interpolate_colors': bool,
            'radius': int,
            'radius_dimension': Axis,
            'radius_field': str,
            'blur': int,
            'intensity_dimension': Axis,
            'intensity_field': str,
            'is_clustered': bool,
            'random_colors': bool,
            'speed': int,
            'track_width': int
        }

        self.attribute_map = {
            'type': 'type',
            'color_dimension': 'colorDimension',
            'color_field': 'colorField',
            'colors': 'colors',
            'interpolate_colors': 'interpolateColors',
            'radius': 'radius',
            'radius_dimension': 'radiusDimension',
            'radius_field': 'radiusField',
            'blur': 'blur',
            'intensity_dimension': 'intensityDimension',
            'intensity_field': 'intensityField',
            'is_clustered': 'isClustered',
            'random_colors': 'randomColors',
            'speed': 'speed',
            'track_width': 'trackWidth'
        }

        self._type = type
        self._color_dimension = color_dimension
        self._color_field = color_field
        self._colors = colors
        self._interpolate_colors = interpolate_colors
        self._radius = radius
        self._radius_dimension = radius_dimension
        self._radius_field = radius_field
        self._blur = blur
        self._intensity_dimension = intensity_dimension
        self._intensity_field = intensity_field
        self._is_clustered = is_clustered
        self._random_colors = random_colors
        self._speed = speed
        self._track_width = track_width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoViewLayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoViewLayer of this GeoViewLayer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this GeoViewLayer.


        :return: The type of this GeoViewLayer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GeoViewLayer.


        :param type: The type of this GeoViewLayer.
        :type type: str
        """
        allowed_values = ["heatmap", "circleMap", "pointMap", "trackMap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def color_dimension(self):
        """Gets the color_dimension of this GeoViewLayer.


        :return: The color_dimension of this GeoViewLayer.
        :rtype: Axis
        """
        return self._color_dimension

    @color_dimension.setter
    def color_dimension(self, color_dimension):
        """Sets the color_dimension of this GeoViewLayer.


        :param color_dimension: The color_dimension of this GeoViewLayer.
        :type color_dimension: Axis
        """
        if color_dimension is None:
            raise ValueError("Invalid value for `color_dimension`, must not be `None`")

        self._color_dimension = color_dimension

    @property
    def color_field(self):
        """Gets the color_field of this GeoViewLayer.

        Marker color field

        :return: The color_field of this GeoViewLayer.
        :rtype: str
        """
        return self._color_field

    @color_field.setter
    def color_field(self, color_field):
        """Sets the color_field of this GeoViewLayer.

        Marker color field

        :param color_field: The color_field of this GeoViewLayer.
        :type color_field: str
        """
        if color_field is None:
            raise ValueError("Invalid value for `color_field`, must not be `None`")

        self._color_field = color_field

    @property
    def colors(self):
        """Gets the colors of this GeoViewLayer.

        Colors define color encoding of data into a visualization

        :return: The colors of this GeoViewLayer.
        :rtype: List[DashboardColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this GeoViewLayer.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this GeoViewLayer.
        :type colors: List[DashboardColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def interpolate_colors(self):
        """Gets the interpolate_colors of this GeoViewLayer.

        Interpolate circle color based on displayed value

        :return: The interpolate_colors of this GeoViewLayer.
        :rtype: bool
        """
        return self._interpolate_colors

    @interpolate_colors.setter
    def interpolate_colors(self, interpolate_colors):
        """Sets the interpolate_colors of this GeoViewLayer.

        Interpolate circle color based on displayed value

        :param interpolate_colors: The interpolate_colors of this GeoViewLayer.
        :type interpolate_colors: bool
        """

        self._interpolate_colors = interpolate_colors

    @property
    def radius(self):
        """Gets the radius of this GeoViewLayer.

        Radius size in pixels

        :return: The radius of this GeoViewLayer.
        :rtype: int
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GeoViewLayer.

        Radius size in pixels

        :param radius: The radius of this GeoViewLayer.
        :type radius: int
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")

        self._radius = radius

    @property
    def radius_dimension(self):
        """Gets the radius_dimension of this GeoViewLayer.


        :return: The radius_dimension of this GeoViewLayer.
        :rtype: Axis
        """
        return self._radius_dimension

    @radius_dimension.setter
    def radius_dimension(self, radius_dimension):
        """Sets the radius_dimension of this GeoViewLayer.


        :param radius_dimension: The radius_dimension of this GeoViewLayer.
        :type radius_dimension: Axis
        """
        if radius_dimension is None:
            raise ValueError("Invalid value for `radius_dimension`, must not be `None`")

        self._radius_dimension = radius_dimension

    @property
    def radius_field(self):
        """Gets the radius_field of this GeoViewLayer.

        Radius field

        :return: The radius_field of this GeoViewLayer.
        :rtype: str
        """
        return self._radius_field

    @radius_field.setter
    def radius_field(self, radius_field):
        """Sets the radius_field of this GeoViewLayer.

        Radius field

        :param radius_field: The radius_field of this GeoViewLayer.
        :type radius_field: str
        """
        if radius_field is None:
            raise ValueError("Invalid value for `radius_field`, must not be `None`")

        self._radius_field = radius_field

    @property
    def blur(self):
        """Gets the blur of this GeoViewLayer.

        Blur for heatmap points

        :return: The blur of this GeoViewLayer.
        :rtype: int
        """
        return self._blur

    @blur.setter
    def blur(self, blur):
        """Sets the blur of this GeoViewLayer.

        Blur for heatmap points

        :param blur: The blur of this GeoViewLayer.
        :type blur: int
        """
        if blur is None:
            raise ValueError("Invalid value for `blur`, must not be `None`")

        self._blur = blur

    @property
    def intensity_dimension(self):
        """Gets the intensity_dimension of this GeoViewLayer.


        :return: The intensity_dimension of this GeoViewLayer.
        :rtype: Axis
        """
        return self._intensity_dimension

    @intensity_dimension.setter
    def intensity_dimension(self, intensity_dimension):
        """Sets the intensity_dimension of this GeoViewLayer.


        :param intensity_dimension: The intensity_dimension of this GeoViewLayer.
        :type intensity_dimension: Axis
        """
        if intensity_dimension is None:
            raise ValueError("Invalid value for `intensity_dimension`, must not be `None`")

        self._intensity_dimension = intensity_dimension

    @property
    def intensity_field(self):
        """Gets the intensity_field of this GeoViewLayer.

        Intensity field

        :return: The intensity_field of this GeoViewLayer.
        :rtype: str
        """
        return self._intensity_field

    @intensity_field.setter
    def intensity_field(self, intensity_field):
        """Sets the intensity_field of this GeoViewLayer.

        Intensity field

        :param intensity_field: The intensity_field of this GeoViewLayer.
        :type intensity_field: str
        """
        if intensity_field is None:
            raise ValueError("Invalid value for `intensity_field`, must not be `None`")

        self._intensity_field = intensity_field

    @property
    def is_clustered(self):
        """Gets the is_clustered of this GeoViewLayer.

        Cluster close markers together

        :return: The is_clustered of this GeoViewLayer.
        :rtype: bool
        """
        return self._is_clustered

    @is_clustered.setter
    def is_clustered(self, is_clustered):
        """Sets the is_clustered of this GeoViewLayer.

        Cluster close markers together

        :param is_clustered: The is_clustered of this GeoViewLayer.
        :type is_clustered: bool
        """

        self._is_clustered = is_clustered

    @property
    def random_colors(self):
        """Gets the random_colors of this GeoViewLayer.

        Assign different colors to different tracks

        :return: The random_colors of this GeoViewLayer.
        :rtype: bool
        """
        return self._random_colors

    @random_colors.setter
    def random_colors(self, random_colors):
        """Sets the random_colors of this GeoViewLayer.

        Assign different colors to different tracks

        :param random_colors: The random_colors of this GeoViewLayer.
        :type random_colors: bool
        """
        if random_colors is None:
            raise ValueError("Invalid value for `random_colors`, must not be `None`")

        self._random_colors = random_colors

    @property
    def speed(self):
        """Gets the speed of this GeoViewLayer.

        Speed of the track animation

        :return: The speed of this GeoViewLayer.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this GeoViewLayer.

        Speed of the track animation

        :param speed: The speed of this GeoViewLayer.
        :type speed: int
        """
        if speed is None:
            raise ValueError("Invalid value for `speed`, must not be `None`")

        self._speed = speed

    @property
    def track_width(self):
        """Gets the track_width of this GeoViewLayer.

        Width of the track

        :return: The track_width of this GeoViewLayer.
        :rtype: int
        """
        return self._track_width

    @track_width.setter
    def track_width(self, track_width):
        """Sets the track_width of this GeoViewLayer.

        Width of the track

        :param track_width: The track_width of this GeoViewLayer.
        :type track_width: int
        """
        if track_width is None:
            raise ValueError("Invalid value for `track_width`, must not be `None`")

        self._track_width = track_width
