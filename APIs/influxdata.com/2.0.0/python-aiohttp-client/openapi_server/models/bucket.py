# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_links import BucketLinks
from openapi_server.models.label import Label
from openapi_server.models.retention_rule import RetentionRule
from openapi_server.models.schema_type import SchemaType
from openapi_server import util


class Bucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, id: str=None, labels: List[Label]=None, links: BucketLinks=None, name: str=None, org_id: str=None, retention_rules: List[RetentionRule]=None, rp: str=None, schema_type: SchemaType=None, type: str='user', updated_at: datetime=None):
        """Bucket - a model defined in OpenAPI

        :param created_at: The created_at of this Bucket.
        :param description: The description of this Bucket.
        :param id: The id of this Bucket.
        :param labels: The labels of this Bucket.
        :param links: The links of this Bucket.
        :param name: The name of this Bucket.
        :param org_id: The org_id of this Bucket.
        :param retention_rules: The retention_rules of this Bucket.
        :param rp: The rp of this Bucket.
        :param schema_type: The schema_type of this Bucket.
        :param type: The type of this Bucket.
        :param updated_at: The updated_at of this Bucket.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'id': str,
            'labels': List[Label],
            'links': BucketLinks,
            'name': str,
            'org_id': str,
            'retention_rules': List[RetentionRule],
            'rp': str,
            'schema_type': SchemaType,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'description': 'description',
            'id': 'id',
            'labels': 'labels',
            'links': 'links',
            'name': 'name',
            'org_id': 'orgID',
            'retention_rules': 'retentionRules',
            'rp': 'rp',
            'schema_type': 'schemaType',
            'type': 'type',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._description = description
        self._id = id
        self._labels = labels
        self._links = links
        self._name = name
        self._org_id = org_id
        self._retention_rules = retention_rules
        self._rp = rp
        self._schema_type = schema_type
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket of this Bucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Bucket.


        :return: The created_at of this Bucket.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Bucket.


        :param created_at: The created_at of this Bucket.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Bucket.


        :return: The description of this Bucket.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Bucket.


        :param description: The description of this Bucket.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Bucket.


        :return: The id of this Bucket.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bucket.


        :param id: The id of this Bucket.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Bucket.


        :return: The labels of this Bucket.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Bucket.


        :param labels: The labels of this Bucket.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def links(self):
        """Gets the links of this Bucket.


        :return: The links of this Bucket.
        :rtype: BucketLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Bucket.


        :param links: The links of this Bucket.
        :type links: BucketLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Bucket.


        :return: The name of this Bucket.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bucket.


        :param name: The name of this Bucket.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this Bucket.


        :return: The org_id of this Bucket.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Bucket.


        :param org_id: The org_id of this Bucket.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def retention_rules(self):
        """Gets the retention_rules of this Bucket.

        Rules to expire or retain data.  No rules means data never expires.

        :return: The retention_rules of this Bucket.
        :rtype: List[RetentionRule]
        """
        return self._retention_rules

    @retention_rules.setter
    def retention_rules(self, retention_rules):
        """Sets the retention_rules of this Bucket.

        Rules to expire or retain data.  No rules means data never expires.

        :param retention_rules: The retention_rules of this Bucket.
        :type retention_rules: List[RetentionRule]
        """
        if retention_rules is None:
            raise ValueError("Invalid value for `retention_rules`, must not be `None`")

        self._retention_rules = retention_rules

    @property
    def rp(self):
        """Gets the rp of this Bucket.


        :return: The rp of this Bucket.
        :rtype: str
        """
        return self._rp

    @rp.setter
    def rp(self, rp):
        """Sets the rp of this Bucket.


        :param rp: The rp of this Bucket.
        :type rp: str
        """

        self._rp = rp

    @property
    def schema_type(self):
        """Gets the schema_type of this Bucket.


        :return: The schema_type of this Bucket.
        :rtype: SchemaType
        """
        return self._schema_type

    @schema_type.setter
    def schema_type(self, schema_type):
        """Sets the schema_type of this Bucket.


        :param schema_type: The schema_type of this Bucket.
        :type schema_type: SchemaType
        """

        self._schema_type = schema_type

    @property
    def type(self):
        """Gets the type of this Bucket.


        :return: The type of this Bucket.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Bucket.


        :param type: The type of this Bucket.
        :type type: str
        """
        allowed_values = ["user", "system"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Bucket.


        :return: The updated_at of this Bucket.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Bucket.


        :param updated_at: The updated_at of this Bucket.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
