/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreshold::OAIThreshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreshold::OAIThreshold() {
    this->initializeModel();
}

OAIThreshold::~OAIThreshold() {}

void OAIThreshold::initializeModel() {

    m_all_values_isSet = false;
    m_all_values_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_within_isSet = false;
    m_within_isValid = false;
}

void OAIThreshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreshold::fromJsonObject(QJsonObject json) {

    m_all_values_isValid = ::OpenAPI::fromJsonValue(m_all_values, json[QString("allValues")]);
    m_all_values_isSet = !json[QString("allValues")].isNull() && m_all_values_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_within_isValid = ::OpenAPI::fromJsonValue(m_within, json[QString("within")]);
    m_within_isSet = !json[QString("within")].isNull() && m_within_isValid;
}

QString OAIThreshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreshold::asJsonObject() const {
    QJsonObject obj;
    if (m_all_values_isSet) {
        obj.insert(QString("allValues"), ::OpenAPI::toJsonValue(m_all_values));
    }
    if (m_level.isSet()) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_within_isSet) {
        obj.insert(QString("within"), ::OpenAPI::toJsonValue(m_within));
    }
    return obj;
}

bool OAIThreshold::isAllValues() const {
    return m_all_values;
}
void OAIThreshold::setAllValues(const bool &all_values) {
    m_all_values = all_values;
    m_all_values_isSet = true;
}

bool OAIThreshold::is_all_values_Set() const{
    return m_all_values_isSet;
}

bool OAIThreshold::is_all_values_Valid() const{
    return m_all_values_isValid;
}

OAICheckStatusLevel OAIThreshold::getLevel() const {
    return m_level;
}
void OAIThreshold::setLevel(const OAICheckStatusLevel &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIThreshold::is_level_Set() const{
    return m_level_isSet;
}

bool OAIThreshold::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIThreshold::getType() const {
    return m_type;
}
void OAIThreshold::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIThreshold::is_type_Set() const{
    return m_type_isSet;
}

bool OAIThreshold::is_type_Valid() const{
    return m_type_isValid;
}

float OAIThreshold::getValue() const {
    return m_value;
}
void OAIThreshold::setValue(const float &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIThreshold::is_value_Set() const{
    return m_value_isSet;
}

bool OAIThreshold::is_value_Valid() const{
    return m_value_isValid;
}

float OAIThreshold::getMax() const {
    return m_max;
}
void OAIThreshold::setMax(const float &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIThreshold::is_max_Set() const{
    return m_max_isSet;
}

bool OAIThreshold::is_max_Valid() const{
    return m_max_isValid;
}

float OAIThreshold::getMin() const {
    return m_min;
}
void OAIThreshold::setMin(const float &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIThreshold::is_min_Set() const{
    return m_min_isSet;
}

bool OAIThreshold::is_min_Valid() const{
    return m_min_isValid;
}

bool OAIThreshold::isWithin() const {
    return m_within;
}
void OAIThreshold::setWithin(const bool &within) {
    m_within = within;
    m_within_isSet = true;
}

bool OAIThreshold::is_within_Set() const{
    return m_within_isSet;
}

bool OAIThreshold::is_within_Valid() const{
    return m_within_isValid;
}

bool OAIThreshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_within_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_value_isValid && m_max_isValid && m_min_isValid && m_within_isValid && true;
}

} // namespace OpenAPI
