/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuilderConfig_aggregateWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuilderConfig_aggregateWindow::OAIBuilderConfig_aggregateWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuilderConfig_aggregateWindow::OAIBuilderConfig_aggregateWindow() {
    this->initializeModel();
}

OAIBuilderConfig_aggregateWindow::~OAIBuilderConfig_aggregateWindow() {}

void OAIBuilderConfig_aggregateWindow::initializeModel() {

    m_fill_values_isSet = false;
    m_fill_values_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;
}

void OAIBuilderConfig_aggregateWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuilderConfig_aggregateWindow::fromJsonObject(QJsonObject json) {

    m_fill_values_isValid = ::OpenAPI::fromJsonValue(m_fill_values, json[QString("fillValues")]);
    m_fill_values_isSet = !json[QString("fillValues")].isNull() && m_fill_values_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;
}

QString OAIBuilderConfig_aggregateWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuilderConfig_aggregateWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_fill_values_isSet) {
        obj.insert(QString("fillValues"), ::OpenAPI::toJsonValue(m_fill_values));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    return obj;
}

bool OAIBuilderConfig_aggregateWindow::isFillValues() const {
    return m_fill_values;
}
void OAIBuilderConfig_aggregateWindow::setFillValues(const bool &fill_values) {
    m_fill_values = fill_values;
    m_fill_values_isSet = true;
}

bool OAIBuilderConfig_aggregateWindow::is_fill_values_Set() const{
    return m_fill_values_isSet;
}

bool OAIBuilderConfig_aggregateWindow::is_fill_values_Valid() const{
    return m_fill_values_isValid;
}

QString OAIBuilderConfig_aggregateWindow::getPeriod() const {
    return m_period;
}
void OAIBuilderConfig_aggregateWindow::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIBuilderConfig_aggregateWindow::is_period_Set() const{
    return m_period_isSet;
}

bool OAIBuilderConfig_aggregateWindow::is_period_Valid() const{
    return m_period_isValid;
}

bool OAIBuilderConfig_aggregateWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fill_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuilderConfig_aggregateWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
