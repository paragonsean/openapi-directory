/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariablesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIVariablesApi::OAIVariablesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIVariablesApi::~OAIVariablesApi() {
}

void OAIVariablesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/api/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteVariablesID", defaultConf);
    _serverIndices.insert("deleteVariablesID", 0);
    _serverConfigs.insert("deleteVariablesIDLabelsID", defaultConf);
    _serverIndices.insert("deleteVariablesIDLabelsID", 0);
    _serverConfigs.insert("getVariables", defaultConf);
    _serverIndices.insert("getVariables", 0);
    _serverConfigs.insert("getVariablesID", defaultConf);
    _serverIndices.insert("getVariablesID", 0);
    _serverConfigs.insert("getVariablesIDLabels", defaultConf);
    _serverIndices.insert("getVariablesIDLabels", 0);
    _serverConfigs.insert("patchVariablesID", defaultConf);
    _serverIndices.insert("patchVariablesID", 0);
    _serverConfigs.insert("postVariables", defaultConf);
    _serverIndices.insert("postVariables", 0);
    _serverConfigs.insert("postVariablesIDLabels", defaultConf);
    _serverIndices.insert("postVariablesIDLabels", 0);
    _serverConfigs.insert("putVariablesID", defaultConf);
    _serverIndices.insert("putVariablesID", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIVariablesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIVariablesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIVariablesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIVariablesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIVariablesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIVariablesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIVariablesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIVariablesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIVariablesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIVariablesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIVariablesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIVariablesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIVariablesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIVariablesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIVariablesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIVariablesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIVariablesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIVariablesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIVariablesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIVariablesApi::deleteVariablesID(const QString &variable_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteVariablesID"][_serverIndices.value("deleteVariablesID")].URL()+"/variables/{variableID}");
    
    
    {
        QString variable_idPathParam("{");
        variable_idPathParam.append("variableID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "variableID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"variableID"+pathSuffix : pathPrefix;
        fullPath.replace(variable_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(variable_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::deleteVariablesIDCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::deleteVariablesIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteVariablesIDSignal();
        Q_EMIT deleteVariablesIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteVariablesIDSignalE(error_type, error_str);
        Q_EMIT deleteVariablesIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteVariablesIDSignalError(error_type, error_str);
        Q_EMIT deleteVariablesIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::deleteVariablesIDLabelsID(const QString &variable_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteVariablesIDLabelsID"][_serverIndices.value("deleteVariablesIDLabelsID")].URL()+"/variables/{variableID}/labels/{labelID}");
    
    
    {
        QString variable_idPathParam("{");
        variable_idPathParam.append("variableID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "variableID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"variableID"+pathSuffix : pathPrefix;
        fullPath.replace(variable_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(variable_id)));
    }
    
    {
        QString label_idPathParam("{");
        label_idPathParam.append("labelID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labelID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labelID"+pathSuffix : pathPrefix;
        fullPath.replace(label_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(label_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::deleteVariablesIDLabelsIDCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::deleteVariablesIDLabelsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteVariablesIDLabelsIDSignal();
        Q_EMIT deleteVariablesIDLabelsIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteVariablesIDLabelsIDSignalE(error_type, error_str);
        Q_EMIT deleteVariablesIDLabelsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteVariablesIDLabelsIDSignalError(error_type, error_str);
        Q_EMIT deleteVariablesIDLabelsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::getVariables(const ::OpenAPI::OptionalParam<QString> &zap_trace_span, const ::OpenAPI::OptionalParam<QString> &org, const ::OpenAPI::OptionalParam<QString> &org_id) {
    QString fullPath = QString(_serverConfigs["getVariables"][_serverIndices.value("getVariables")].URL()+"/variables");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (org.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "org", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("org")).append(querySuffix).append(QUrl::toPercentEncoding(org.stringValue()));
    }
    if (org_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "orgID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("orgID")).append(querySuffix).append(QUrl::toPercentEncoding(org_id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::getVariablesCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::getVariablesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIVariables output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getVariablesSignal(output);
        Q_EMIT getVariablesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getVariablesSignalE(output, error_type, error_str);
        Q_EMIT getVariablesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getVariablesSignalError(output, error_type, error_str);
        Q_EMIT getVariablesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::getVariablesID(const QString &variable_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getVariablesID"][_serverIndices.value("getVariablesID")].URL()+"/variables/{variableID}");
    
    
    {
        QString variable_idPathParam("{");
        variable_idPathParam.append("variableID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "variableID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"variableID"+pathSuffix : pathPrefix;
        fullPath.replace(variable_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(variable_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::getVariablesIDCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::getVariablesIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getVariablesIDSignal(output);
        Q_EMIT getVariablesIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getVariablesIDSignalE(output, error_type, error_str);
        Q_EMIT getVariablesIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getVariablesIDSignalError(output, error_type, error_str);
        Q_EMIT getVariablesIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::getVariablesIDLabels(const QString &variable_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getVariablesIDLabels"][_serverIndices.value("getVariablesIDLabels")].URL()+"/variables/{variableID}/labels");
    
    
    {
        QString variable_idPathParam("{");
        variable_idPathParam.append("variableID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "variableID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"variableID"+pathSuffix : pathPrefix;
        fullPath.replace(variable_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(variable_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::getVariablesIDLabelsCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::getVariablesIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getVariablesIDLabelsSignal(output);
        Q_EMIT getVariablesIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getVariablesIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT getVariablesIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getVariablesIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT getVariablesIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::patchVariablesID(const QString &variable_id, const OAIVariable &oai_variable, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["patchVariablesID"][_serverIndices.value("patchVariablesID")].URL()+"/variables/{variableID}");
    
    
    {
        QString variable_idPathParam("{");
        variable_idPathParam.append("variableID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "variableID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"variableID"+pathSuffix : pathPrefix;
        fullPath.replace(variable_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(variable_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_variable.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::patchVariablesIDCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::patchVariablesIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchVariablesIDSignal(output);
        Q_EMIT patchVariablesIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchVariablesIDSignalE(output, error_type, error_str);
        Q_EMIT patchVariablesIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchVariablesIDSignalError(output, error_type, error_str);
        Q_EMIT patchVariablesIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::postVariables(const OAIVariable &oai_variable, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postVariables"][_serverIndices.value("postVariables")].URL()+"/variables");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_variable.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::postVariablesCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::postVariablesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postVariablesSignal(output);
        Q_EMIT postVariablesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postVariablesSignalE(output, error_type, error_str);
        Q_EMIT postVariablesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postVariablesSignalError(output, error_type, error_str);
        Q_EMIT postVariablesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::postVariablesIDLabels(const QString &variable_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postVariablesIDLabels"][_serverIndices.value("postVariablesIDLabels")].URL()+"/variables/{variableID}/labels");
    
    
    {
        QString variable_idPathParam("{");
        variable_idPathParam.append("variableID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "variableID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"variableID"+pathSuffix : pathPrefix;
        fullPath.replace(variable_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(variable_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_label_mapping.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::postVariablesIDLabelsCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::postVariablesIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postVariablesIDLabelsSignal(output);
        Q_EMIT postVariablesIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postVariablesIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT postVariablesIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postVariablesIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT postVariablesIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::putVariablesID(const QString &variable_id, const OAIVariable &oai_variable, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["putVariablesID"][_serverIndices.value("putVariablesID")].URL()+"/variables/{variableID}");
    
    
    {
        QString variable_idPathParam("{");
        variable_idPathParam.append("variableID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "variableID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"variableID"+pathSuffix : pathPrefix;
        fullPath.replace(variable_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(variable_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_variable.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVariablesApi::putVariablesIDCallback);
    connect(this, &OAIVariablesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVariablesApi::putVariablesIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT putVariablesIDSignal(output);
        Q_EMIT putVariablesIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT putVariablesIDSignalE(output, error_type, error_str);
        Q_EMIT putVariablesIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT putVariablesIDSignalError(output, error_type, error_str);
        Q_EMIT putVariablesIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVariablesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
