/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalExpression::OAIConditionalExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalExpression::OAIConditionalExpression() {
    this->initializeModel();
}

OAIConditionalExpression::~OAIConditionalExpression() {}

void OAIConditionalExpression::initializeModel() {

    m_alternate_isSet = false;
    m_alternate_isValid = false;

    m_consequent_isSet = false;
    m_consequent_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConditionalExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalExpression::fromJsonObject(QJsonObject json) {

    m_alternate_isValid = ::OpenAPI::fromJsonValue(m_alternate, json[QString("alternate")]);
    m_alternate_isSet = !json[QString("alternate")].isNull() && m_alternate_isValid;

    m_consequent_isValid = ::OpenAPI::fromJsonValue(m_consequent, json[QString("consequent")]);
    m_consequent_isSet = !json[QString("consequent")].isNull() && m_consequent_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConditionalExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate.isSet()) {
        obj.insert(QString("alternate"), ::OpenAPI::toJsonValue(m_alternate));
    }
    if (m_consequent.isSet()) {
        obj.insert(QString("consequent"), ::OpenAPI::toJsonValue(m_consequent));
    }
    if (m_test.isSet()) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIExpression OAIConditionalExpression::getAlternate() const {
    return m_alternate;
}
void OAIConditionalExpression::setAlternate(const OAIExpression &alternate) {
    m_alternate = alternate;
    m_alternate_isSet = true;
}

bool OAIConditionalExpression::is_alternate_Set() const{
    return m_alternate_isSet;
}

bool OAIConditionalExpression::is_alternate_Valid() const{
    return m_alternate_isValid;
}

OAIExpression OAIConditionalExpression::getConsequent() const {
    return m_consequent;
}
void OAIConditionalExpression::setConsequent(const OAIExpression &consequent) {
    m_consequent = consequent;
    m_consequent_isSet = true;
}

bool OAIConditionalExpression::is_consequent_Set() const{
    return m_consequent_isSet;
}

bool OAIConditionalExpression::is_consequent_Valid() const{
    return m_consequent_isValid;
}

OAIExpression OAIConditionalExpression::getTest() const {
    return m_test;
}
void OAIConditionalExpression::setTest(const OAIExpression &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIConditionalExpression::is_test_Set() const{
    return m_test_isSet;
}

bool OAIConditionalExpression::is_test_Valid() const{
    return m_test_isValid;
}

QString OAIConditionalExpression::getType() const {
    return m_type;
}
void OAIConditionalExpression::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConditionalExpression::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConditionalExpression::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConditionalExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consequent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
