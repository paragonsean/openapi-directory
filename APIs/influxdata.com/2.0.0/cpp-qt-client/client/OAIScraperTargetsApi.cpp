/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScraperTargetsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIScraperTargetsApi::OAIScraperTargetsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIScraperTargetsApi::~OAIScraperTargetsApi() {
}

void OAIScraperTargetsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/api/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteScrapersID", defaultConf);
    _serverIndices.insert("deleteScrapersID", 0);
    _serverConfigs.insert("deleteScrapersIDLabelsID", defaultConf);
    _serverIndices.insert("deleteScrapersIDLabelsID", 0);
    _serverConfigs.insert("deleteScrapersIDMembersID", defaultConf);
    _serverIndices.insert("deleteScrapersIDMembersID", 0);
    _serverConfigs.insert("deleteScrapersIDOwnersID", defaultConf);
    _serverIndices.insert("deleteScrapersIDOwnersID", 0);
    _serverConfigs.insert("getScrapers", defaultConf);
    _serverIndices.insert("getScrapers", 0);
    _serverConfigs.insert("getScrapersID", defaultConf);
    _serverIndices.insert("getScrapersID", 0);
    _serverConfigs.insert("getScrapersIDLabels", defaultConf);
    _serverIndices.insert("getScrapersIDLabels", 0);
    _serverConfigs.insert("getScrapersIDMembers", defaultConf);
    _serverIndices.insert("getScrapersIDMembers", 0);
    _serverConfigs.insert("getScrapersIDOwners", defaultConf);
    _serverIndices.insert("getScrapersIDOwners", 0);
    _serverConfigs.insert("patchScrapersID", defaultConf);
    _serverIndices.insert("patchScrapersID", 0);
    _serverConfigs.insert("postScrapers", defaultConf);
    _serverIndices.insert("postScrapers", 0);
    _serverConfigs.insert("postScrapersIDLabels", defaultConf);
    _serverIndices.insert("postScrapersIDLabels", 0);
    _serverConfigs.insert("postScrapersIDMembers", defaultConf);
    _serverIndices.insert("postScrapersIDMembers", 0);
    _serverConfigs.insert("postScrapersIDOwners", defaultConf);
    _serverIndices.insert("postScrapersIDOwners", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIScraperTargetsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIScraperTargetsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIScraperTargetsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIScraperTargetsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIScraperTargetsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIScraperTargetsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIScraperTargetsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIScraperTargetsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIScraperTargetsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIScraperTargetsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIScraperTargetsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIScraperTargetsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIScraperTargetsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIScraperTargetsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIScraperTargetsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIScraperTargetsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIScraperTargetsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIScraperTargetsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIScraperTargetsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIScraperTargetsApi::deleteScrapersID(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteScrapersID"][_serverIndices.value("deleteScrapersID")].URL()+"/scrapers/{scraperTargetID}");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::deleteScrapersIDCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::deleteScrapersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteScrapersIDSignal();
        Q_EMIT deleteScrapersIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteScrapersIDSignalE(error_type, error_str);
        Q_EMIT deleteScrapersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteScrapersIDSignalError(error_type, error_str);
        Q_EMIT deleteScrapersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::deleteScrapersIDLabelsID(const QString &scraper_target_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteScrapersIDLabelsID"][_serverIndices.value("deleteScrapersIDLabelsID")].URL()+"/scrapers/{scraperTargetID}/labels/{labelID}");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    
    {
        QString label_idPathParam("{");
        label_idPathParam.append("labelID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labelID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labelID"+pathSuffix : pathPrefix;
        fullPath.replace(label_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(label_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::deleteScrapersIDLabelsIDCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::deleteScrapersIDLabelsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteScrapersIDLabelsIDSignal();
        Q_EMIT deleteScrapersIDLabelsIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteScrapersIDLabelsIDSignalE(error_type, error_str);
        Q_EMIT deleteScrapersIDLabelsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteScrapersIDLabelsIDSignalError(error_type, error_str);
        Q_EMIT deleteScrapersIDLabelsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::deleteScrapersIDMembersID(const QString &user_id, const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteScrapersIDMembersID"][_serverIndices.value("deleteScrapersIDMembersID")].URL()+"/scrapers/{scraperTargetID}/members/{userID}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userID"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::deleteScrapersIDMembersIDCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::deleteScrapersIDMembersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteScrapersIDMembersIDSignal();
        Q_EMIT deleteScrapersIDMembersIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteScrapersIDMembersIDSignalE(error_type, error_str);
        Q_EMIT deleteScrapersIDMembersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteScrapersIDMembersIDSignalError(error_type, error_str);
        Q_EMIT deleteScrapersIDMembersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::deleteScrapersIDOwnersID(const QString &user_id, const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteScrapersIDOwnersID"][_serverIndices.value("deleteScrapersIDOwnersID")].URL()+"/scrapers/{scraperTargetID}/owners/{userID}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userID"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::deleteScrapersIDOwnersIDCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::deleteScrapersIDOwnersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteScrapersIDOwnersIDSignal();
        Q_EMIT deleteScrapersIDOwnersIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteScrapersIDOwnersIDSignalE(error_type, error_str);
        Q_EMIT deleteScrapersIDOwnersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteScrapersIDOwnersIDSignalError(error_type, error_str);
        Q_EMIT deleteScrapersIDOwnersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::getScrapers(const ::OpenAPI::OptionalParam<QString> &zap_trace_span, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QList<QString>> &id, const ::OpenAPI::OptionalParam<QString> &org_id, const ::OpenAPI::OptionalParam<QString> &org) {
    QString fullPath = QString(_serverConfigs["getScrapers"][_serverIndices.value("getScrapers")].URL()+"/scrapers");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(name.stringValue()));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (id.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                for (QString t : id.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("id=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (org_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "orgID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("orgID")).append(querySuffix).append(QUrl::toPercentEncoding(org_id.stringValue()));
    }
    if (org.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "org", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("org")).append(querySuffix).append(QUrl::toPercentEncoding(org.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::getScrapersCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::getScrapersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScraperTargetResponses output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getScrapersSignal(output);
        Q_EMIT getScrapersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getScrapersSignalE(output, error_type, error_str);
        Q_EMIT getScrapersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getScrapersSignalError(output, error_type, error_str);
        Q_EMIT getScrapersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::getScrapersID(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getScrapersID"][_serverIndices.value("getScrapersID")].URL()+"/scrapers/{scraperTargetID}");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::getScrapersIDCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::getScrapersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScraperTargetResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getScrapersIDSignal(output);
        Q_EMIT getScrapersIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getScrapersIDSignalE(output, error_type, error_str);
        Q_EMIT getScrapersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getScrapersIDSignalError(output, error_type, error_str);
        Q_EMIT getScrapersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::getScrapersIDLabels(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getScrapersIDLabels"][_serverIndices.value("getScrapersIDLabels")].URL()+"/scrapers/{scraperTargetID}/labels");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::getScrapersIDLabelsCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::getScrapersIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getScrapersIDLabelsSignal(output);
        Q_EMIT getScrapersIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getScrapersIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT getScrapersIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getScrapersIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT getScrapersIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::getScrapersIDMembers(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getScrapersIDMembers"][_serverIndices.value("getScrapersIDMembers")].URL()+"/scrapers/{scraperTargetID}/members");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::getScrapersIDMembersCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::getScrapersIDMembersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceMembers output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getScrapersIDMembersSignal(output);
        Q_EMIT getScrapersIDMembersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getScrapersIDMembersSignalE(output, error_type, error_str);
        Q_EMIT getScrapersIDMembersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getScrapersIDMembersSignalError(output, error_type, error_str);
        Q_EMIT getScrapersIDMembersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::getScrapersIDOwners(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getScrapersIDOwners"][_serverIndices.value("getScrapersIDOwners")].URL()+"/scrapers/{scraperTargetID}/owners");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::getScrapersIDOwnersCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::getScrapersIDOwnersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceOwners output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getScrapersIDOwnersSignal(output);
        Q_EMIT getScrapersIDOwnersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getScrapersIDOwnersSignalE(output, error_type, error_str);
        Q_EMIT getScrapersIDOwnersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getScrapersIDOwnersSignalError(output, error_type, error_str);
        Q_EMIT getScrapersIDOwnersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::patchScrapersID(const QString &scraper_target_id, const OAIScraperTargetRequest &oai_scraper_target_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["patchScrapersID"][_serverIndices.value("patchScrapersID")].URL()+"/scrapers/{scraperTargetID}");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_scraper_target_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::patchScrapersIDCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::patchScrapersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScraperTargetResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchScrapersIDSignal(output);
        Q_EMIT patchScrapersIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchScrapersIDSignalE(output, error_type, error_str);
        Q_EMIT patchScrapersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchScrapersIDSignalError(output, error_type, error_str);
        Q_EMIT patchScrapersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::postScrapers(const OAIScraperTargetRequest &oai_scraper_target_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postScrapers"][_serverIndices.value("postScrapers")].URL()+"/scrapers");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_scraper_target_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::postScrapersCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::postScrapersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScraperTargetResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postScrapersSignal(output);
        Q_EMIT postScrapersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postScrapersSignalE(output, error_type, error_str);
        Q_EMIT postScrapersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postScrapersSignalError(output, error_type, error_str);
        Q_EMIT postScrapersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::postScrapersIDLabels(const QString &scraper_target_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postScrapersIDLabels"][_serverIndices.value("postScrapersIDLabels")].URL()+"/scrapers/{scraperTargetID}/labels");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_label_mapping.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::postScrapersIDLabelsCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::postScrapersIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postScrapersIDLabelsSignal(output);
        Q_EMIT postScrapersIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postScrapersIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT postScrapersIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postScrapersIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT postScrapersIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::postScrapersIDMembers(const QString &scraper_target_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postScrapersIDMembers"][_serverIndices.value("postScrapersIDMembers")].URL()+"/scrapers/{scraperTargetID}/members");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_add_resource_member_request_body.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::postScrapersIDMembersCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::postScrapersIDMembersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postScrapersIDMembersSignal(output);
        Q_EMIT postScrapersIDMembersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postScrapersIDMembersSignalE(output, error_type, error_str);
        Q_EMIT postScrapersIDMembersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postScrapersIDMembersSignalError(output, error_type, error_str);
        Q_EMIT postScrapersIDMembersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::postScrapersIDOwners(const QString &scraper_target_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postScrapersIDOwners"][_serverIndices.value("postScrapersIDOwners")].URL()+"/scrapers/{scraperTargetID}/owners");
    
    
    {
        QString scraper_target_idPathParam("{");
        scraper_target_idPathParam.append("scraperTargetID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scraperTargetID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scraperTargetID"+pathSuffix : pathPrefix;
        fullPath.replace(scraper_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scraper_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_add_resource_member_request_body.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScraperTargetsApi::postScrapersIDOwnersCallback);
    connect(this, &OAIScraperTargetsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScraperTargetsApi::postScrapersIDOwnersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceOwner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postScrapersIDOwnersSignal(output);
        Q_EMIT postScrapersIDOwnersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postScrapersIDOwnersSignalE(output, error_type, error_str);
        Q_EMIT postScrapersIDOwnersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postScrapersIDOwnersSignalError(output, error_type, error_str);
        Q_EMIT postScrapersIDOwnersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScraperTargetsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
