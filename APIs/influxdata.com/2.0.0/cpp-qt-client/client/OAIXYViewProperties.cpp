/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXYViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXYViewProperties::OAIXYViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXYViewProperties::OAIXYViewProperties() {
    this->initializeModel();
}

OAIXYViewProperties::~OAIXYViewProperties() {}

void OAIXYViewProperties::initializeModel() {

    m_axes_isSet = false;
    m_axes_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_generate_x_axis_ticks_isSet = false;
    m_generate_x_axis_ticks_isValid = false;

    m_generate_y_axis_ticks_isSet = false;
    m_generate_y_axis_ticks_isValid = false;

    m_geom_isSet = false;
    m_geom_isValid = false;

    m_hover_dimension_isSet = false;
    m_hover_dimension_isValid = false;

    m_legend_colorize_rows_isSet = false;
    m_legend_colorize_rows_isValid = false;

    m_legend_hide_isSet = false;
    m_legend_hide_isValid = false;

    m_legend_opacity_isSet = false;
    m_legend_opacity_isValid = false;

    m_legend_orientation_threshold_isSet = false;
    m_legend_orientation_threshold_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_shade_below_isSet = false;
    m_shade_below_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_show_note_when_empty_isSet = false;
    m_show_note_when_empty_isValid = false;

    m_static_legend_isSet = false;
    m_static_legend_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_x_column_isSet = false;
    m_x_column_isValid = false;

    m_x_tick_start_isSet = false;
    m_x_tick_start_isValid = false;

    m_x_tick_step_isSet = false;
    m_x_tick_step_isValid = false;

    m_x_total_ticks_isSet = false;
    m_x_total_ticks_isValid = false;

    m_y_column_isSet = false;
    m_y_column_isValid = false;

    m_y_tick_start_isSet = false;
    m_y_tick_start_isValid = false;

    m_y_tick_step_isSet = false;
    m_y_tick_step_isValid = false;

    m_y_total_ticks_isSet = false;
    m_y_total_ticks_isValid = false;
}

void OAIXYViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXYViewProperties::fromJsonObject(QJsonObject json) {

    m_axes_isValid = ::OpenAPI::fromJsonValue(m_axes, json[QString("axes")]);
    m_axes_isSet = !json[QString("axes")].isNull() && m_axes_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_generate_x_axis_ticks_isValid = ::OpenAPI::fromJsonValue(m_generate_x_axis_ticks, json[QString("generateXAxisTicks")]);
    m_generate_x_axis_ticks_isSet = !json[QString("generateXAxisTicks")].isNull() && m_generate_x_axis_ticks_isValid;

    m_generate_y_axis_ticks_isValid = ::OpenAPI::fromJsonValue(m_generate_y_axis_ticks, json[QString("generateYAxisTicks")]);
    m_generate_y_axis_ticks_isSet = !json[QString("generateYAxisTicks")].isNull() && m_generate_y_axis_ticks_isValid;

    m_geom_isValid = ::OpenAPI::fromJsonValue(m_geom, json[QString("geom")]);
    m_geom_isSet = !json[QString("geom")].isNull() && m_geom_isValid;

    m_hover_dimension_isValid = ::OpenAPI::fromJsonValue(m_hover_dimension, json[QString("hoverDimension")]);
    m_hover_dimension_isSet = !json[QString("hoverDimension")].isNull() && m_hover_dimension_isValid;

    m_legend_colorize_rows_isValid = ::OpenAPI::fromJsonValue(m_legend_colorize_rows, json[QString("legendColorizeRows")]);
    m_legend_colorize_rows_isSet = !json[QString("legendColorizeRows")].isNull() && m_legend_colorize_rows_isValid;

    m_legend_hide_isValid = ::OpenAPI::fromJsonValue(m_legend_hide, json[QString("legendHide")]);
    m_legend_hide_isSet = !json[QString("legendHide")].isNull() && m_legend_hide_isValid;

    m_legend_opacity_isValid = ::OpenAPI::fromJsonValue(m_legend_opacity, json[QString("legendOpacity")]);
    m_legend_opacity_isSet = !json[QString("legendOpacity")].isNull() && m_legend_opacity_isValid;

    m_legend_orientation_threshold_isValid = ::OpenAPI::fromJsonValue(m_legend_orientation_threshold, json[QString("legendOrientationThreshold")]);
    m_legend_orientation_threshold_isSet = !json[QString("legendOrientationThreshold")].isNull() && m_legend_orientation_threshold_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_shade_below_isValid = ::OpenAPI::fromJsonValue(m_shade_below, json[QString("shadeBelow")]);
    m_shade_below_isSet = !json[QString("shadeBelow")].isNull() && m_shade_below_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_show_note_when_empty_isValid = ::OpenAPI::fromJsonValue(m_show_note_when_empty, json[QString("showNoteWhenEmpty")]);
    m_show_note_when_empty_isSet = !json[QString("showNoteWhenEmpty")].isNull() && m_show_note_when_empty_isValid;

    m_static_legend_isValid = ::OpenAPI::fromJsonValue(m_static_legend, json[QString("staticLegend")]);
    m_static_legend_isSet = !json[QString("staticLegend")].isNull() && m_static_legend_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_x_column_isValid = ::OpenAPI::fromJsonValue(m_x_column, json[QString("xColumn")]);
    m_x_column_isSet = !json[QString("xColumn")].isNull() && m_x_column_isValid;

    m_x_tick_start_isValid = ::OpenAPI::fromJsonValue(m_x_tick_start, json[QString("xTickStart")]);
    m_x_tick_start_isSet = !json[QString("xTickStart")].isNull() && m_x_tick_start_isValid;

    m_x_tick_step_isValid = ::OpenAPI::fromJsonValue(m_x_tick_step, json[QString("xTickStep")]);
    m_x_tick_step_isSet = !json[QString("xTickStep")].isNull() && m_x_tick_step_isValid;

    m_x_total_ticks_isValid = ::OpenAPI::fromJsonValue(m_x_total_ticks, json[QString("xTotalTicks")]);
    m_x_total_ticks_isSet = !json[QString("xTotalTicks")].isNull() && m_x_total_ticks_isValid;

    m_y_column_isValid = ::OpenAPI::fromJsonValue(m_y_column, json[QString("yColumn")]);
    m_y_column_isSet = !json[QString("yColumn")].isNull() && m_y_column_isValid;

    m_y_tick_start_isValid = ::OpenAPI::fromJsonValue(m_y_tick_start, json[QString("yTickStart")]);
    m_y_tick_start_isSet = !json[QString("yTickStart")].isNull() && m_y_tick_start_isValid;

    m_y_tick_step_isValid = ::OpenAPI::fromJsonValue(m_y_tick_step, json[QString("yTickStep")]);
    m_y_tick_step_isSet = !json[QString("yTickStep")].isNull() && m_y_tick_step_isValid;

    m_y_total_ticks_isValid = ::OpenAPI::fromJsonValue(m_y_total_ticks, json[QString("yTotalTicks")]);
    m_y_total_ticks_isSet = !json[QString("yTotalTicks")].isNull() && m_y_total_ticks_isValid;
}

QString OAIXYViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXYViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_axes.isSet()) {
        obj.insert(QString("axes"), ::OpenAPI::toJsonValue(m_axes));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_generate_x_axis_ticks.size() > 0) {
        obj.insert(QString("generateXAxisTicks"), ::OpenAPI::toJsonValue(m_generate_x_axis_ticks));
    }
    if (m_generate_y_axis_ticks.size() > 0) {
        obj.insert(QString("generateYAxisTicks"), ::OpenAPI::toJsonValue(m_generate_y_axis_ticks));
    }
    if (m_geom.isSet()) {
        obj.insert(QString("geom"), ::OpenAPI::toJsonValue(m_geom));
    }
    if (m_hover_dimension_isSet) {
        obj.insert(QString("hoverDimension"), ::OpenAPI::toJsonValue(m_hover_dimension));
    }
    if (m_legend_colorize_rows_isSet) {
        obj.insert(QString("legendColorizeRows"), ::OpenAPI::toJsonValue(m_legend_colorize_rows));
    }
    if (m_legend_hide_isSet) {
        obj.insert(QString("legendHide"), ::OpenAPI::toJsonValue(m_legend_hide));
    }
    if (m_legend_opacity_isSet) {
        obj.insert(QString("legendOpacity"), ::OpenAPI::toJsonValue(m_legend_opacity));
    }
    if (m_legend_orientation_threshold_isSet) {
        obj.insert(QString("legendOrientationThreshold"), ::OpenAPI::toJsonValue(m_legend_orientation_threshold));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_shade_below_isSet) {
        obj.insert(QString("shadeBelow"), ::OpenAPI::toJsonValue(m_shade_below));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_show_note_when_empty_isSet) {
        obj.insert(QString("showNoteWhenEmpty"), ::OpenAPI::toJsonValue(m_show_note_when_empty));
    }
    if (m_static_legend.isSet()) {
        obj.insert(QString("staticLegend"), ::OpenAPI::toJsonValue(m_static_legend));
    }
    if (m_time_format_isSet) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_x_column_isSet) {
        obj.insert(QString("xColumn"), ::OpenAPI::toJsonValue(m_x_column));
    }
    if (m_x_tick_start_isSet) {
        obj.insert(QString("xTickStart"), ::OpenAPI::toJsonValue(m_x_tick_start));
    }
    if (m_x_tick_step_isSet) {
        obj.insert(QString("xTickStep"), ::OpenAPI::toJsonValue(m_x_tick_step));
    }
    if (m_x_total_ticks_isSet) {
        obj.insert(QString("xTotalTicks"), ::OpenAPI::toJsonValue(m_x_total_ticks));
    }
    if (m_y_column_isSet) {
        obj.insert(QString("yColumn"), ::OpenAPI::toJsonValue(m_y_column));
    }
    if (m_y_tick_start_isSet) {
        obj.insert(QString("yTickStart"), ::OpenAPI::toJsonValue(m_y_tick_start));
    }
    if (m_y_tick_step_isSet) {
        obj.insert(QString("yTickStep"), ::OpenAPI::toJsonValue(m_y_tick_step));
    }
    if (m_y_total_ticks_isSet) {
        obj.insert(QString("yTotalTicks"), ::OpenAPI::toJsonValue(m_y_total_ticks));
    }
    return obj;
}

OAIAxes OAIXYViewProperties::getAxes() const {
    return m_axes;
}
void OAIXYViewProperties::setAxes(const OAIAxes &axes) {
    m_axes = axes;
    m_axes_isSet = true;
}

bool OAIXYViewProperties::is_axes_Set() const{
    return m_axes_isSet;
}

bool OAIXYViewProperties::is_axes_Valid() const{
    return m_axes_isValid;
}

QList<OAIDashboardColor> OAIXYViewProperties::getColors() const {
    return m_colors;
}
void OAIXYViewProperties::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIXYViewProperties::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIXYViewProperties::is_colors_Valid() const{
    return m_colors_isValid;
}

QList<QString> OAIXYViewProperties::getGenerateXAxisTicks() const {
    return m_generate_x_axis_ticks;
}
void OAIXYViewProperties::setGenerateXAxisTicks(const QList<QString> &generate_x_axis_ticks) {
    m_generate_x_axis_ticks = generate_x_axis_ticks;
    m_generate_x_axis_ticks_isSet = true;
}

bool OAIXYViewProperties::is_generate_x_axis_ticks_Set() const{
    return m_generate_x_axis_ticks_isSet;
}

bool OAIXYViewProperties::is_generate_x_axis_ticks_Valid() const{
    return m_generate_x_axis_ticks_isValid;
}

QList<QString> OAIXYViewProperties::getGenerateYAxisTicks() const {
    return m_generate_y_axis_ticks;
}
void OAIXYViewProperties::setGenerateYAxisTicks(const QList<QString> &generate_y_axis_ticks) {
    m_generate_y_axis_ticks = generate_y_axis_ticks;
    m_generate_y_axis_ticks_isSet = true;
}

bool OAIXYViewProperties::is_generate_y_axis_ticks_Set() const{
    return m_generate_y_axis_ticks_isSet;
}

bool OAIXYViewProperties::is_generate_y_axis_ticks_Valid() const{
    return m_generate_y_axis_ticks_isValid;
}

OAIXYGeom OAIXYViewProperties::getGeom() const {
    return m_geom;
}
void OAIXYViewProperties::setGeom(const OAIXYGeom &geom) {
    m_geom = geom;
    m_geom_isSet = true;
}

bool OAIXYViewProperties::is_geom_Set() const{
    return m_geom_isSet;
}

bool OAIXYViewProperties::is_geom_Valid() const{
    return m_geom_isValid;
}

QString OAIXYViewProperties::getHoverDimension() const {
    return m_hover_dimension;
}
void OAIXYViewProperties::setHoverDimension(const QString &hover_dimension) {
    m_hover_dimension = hover_dimension;
    m_hover_dimension_isSet = true;
}

bool OAIXYViewProperties::is_hover_dimension_Set() const{
    return m_hover_dimension_isSet;
}

bool OAIXYViewProperties::is_hover_dimension_Valid() const{
    return m_hover_dimension_isValid;
}

bool OAIXYViewProperties::isLegendColorizeRows() const {
    return m_legend_colorize_rows;
}
void OAIXYViewProperties::setLegendColorizeRows(const bool &legend_colorize_rows) {
    m_legend_colorize_rows = legend_colorize_rows;
    m_legend_colorize_rows_isSet = true;
}

bool OAIXYViewProperties::is_legend_colorize_rows_Set() const{
    return m_legend_colorize_rows_isSet;
}

bool OAIXYViewProperties::is_legend_colorize_rows_Valid() const{
    return m_legend_colorize_rows_isValid;
}

bool OAIXYViewProperties::isLegendHide() const {
    return m_legend_hide;
}
void OAIXYViewProperties::setLegendHide(const bool &legend_hide) {
    m_legend_hide = legend_hide;
    m_legend_hide_isSet = true;
}

bool OAIXYViewProperties::is_legend_hide_Set() const{
    return m_legend_hide_isSet;
}

bool OAIXYViewProperties::is_legend_hide_Valid() const{
    return m_legend_hide_isValid;
}

float OAIXYViewProperties::getLegendOpacity() const {
    return m_legend_opacity;
}
void OAIXYViewProperties::setLegendOpacity(const float &legend_opacity) {
    m_legend_opacity = legend_opacity;
    m_legend_opacity_isSet = true;
}

bool OAIXYViewProperties::is_legend_opacity_Set() const{
    return m_legend_opacity_isSet;
}

bool OAIXYViewProperties::is_legend_opacity_Valid() const{
    return m_legend_opacity_isValid;
}

qint32 OAIXYViewProperties::getLegendOrientationThreshold() const {
    return m_legend_orientation_threshold;
}
void OAIXYViewProperties::setLegendOrientationThreshold(const qint32 &legend_orientation_threshold) {
    m_legend_orientation_threshold = legend_orientation_threshold;
    m_legend_orientation_threshold_isSet = true;
}

bool OAIXYViewProperties::is_legend_orientation_threshold_Set() const{
    return m_legend_orientation_threshold_isSet;
}

bool OAIXYViewProperties::is_legend_orientation_threshold_Valid() const{
    return m_legend_orientation_threshold_isValid;
}

QString OAIXYViewProperties::getNote() const {
    return m_note;
}
void OAIXYViewProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIXYViewProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIXYViewProperties::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIXYViewProperties::getPosition() const {
    return m_position;
}
void OAIXYViewProperties::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIXYViewProperties::is_position_Set() const{
    return m_position_isSet;
}

bool OAIXYViewProperties::is_position_Valid() const{
    return m_position_isValid;
}

QList<OAIDashboardQuery> OAIXYViewProperties::getQueries() const {
    return m_queries;
}
void OAIXYViewProperties::setQueries(const QList<OAIDashboardQuery> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIXYViewProperties::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIXYViewProperties::is_queries_Valid() const{
    return m_queries_isValid;
}

bool OAIXYViewProperties::isShadeBelow() const {
    return m_shade_below;
}
void OAIXYViewProperties::setShadeBelow(const bool &shade_below) {
    m_shade_below = shade_below;
    m_shade_below_isSet = true;
}

bool OAIXYViewProperties::is_shade_below_Set() const{
    return m_shade_below_isSet;
}

bool OAIXYViewProperties::is_shade_below_Valid() const{
    return m_shade_below_isValid;
}

QString OAIXYViewProperties::getShape() const {
    return m_shape;
}
void OAIXYViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIXYViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIXYViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

bool OAIXYViewProperties::isShowNoteWhenEmpty() const {
    return m_show_note_when_empty;
}
void OAIXYViewProperties::setShowNoteWhenEmpty(const bool &show_note_when_empty) {
    m_show_note_when_empty = show_note_when_empty;
    m_show_note_when_empty_isSet = true;
}

bool OAIXYViewProperties::is_show_note_when_empty_Set() const{
    return m_show_note_when_empty_isSet;
}

bool OAIXYViewProperties::is_show_note_when_empty_Valid() const{
    return m_show_note_when_empty_isValid;
}

OAIStaticLegend OAIXYViewProperties::getStaticLegend() const {
    return m_static_legend;
}
void OAIXYViewProperties::setStaticLegend(const OAIStaticLegend &static_legend) {
    m_static_legend = static_legend;
    m_static_legend_isSet = true;
}

bool OAIXYViewProperties::is_static_legend_Set() const{
    return m_static_legend_isSet;
}

bool OAIXYViewProperties::is_static_legend_Valid() const{
    return m_static_legend_isValid;
}

QString OAIXYViewProperties::getTimeFormat() const {
    return m_time_format;
}
void OAIXYViewProperties::setTimeFormat(const QString &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAIXYViewProperties::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAIXYViewProperties::is_time_format_Valid() const{
    return m_time_format_isValid;
}

QString OAIXYViewProperties::getType() const {
    return m_type;
}
void OAIXYViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIXYViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIXYViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIXYViewProperties::getXColumn() const {
    return m_x_column;
}
void OAIXYViewProperties::setXColumn(const QString &x_column) {
    m_x_column = x_column;
    m_x_column_isSet = true;
}

bool OAIXYViewProperties::is_x_column_Set() const{
    return m_x_column_isSet;
}

bool OAIXYViewProperties::is_x_column_Valid() const{
    return m_x_column_isValid;
}

float OAIXYViewProperties::getXTickStart() const {
    return m_x_tick_start;
}
void OAIXYViewProperties::setXTickStart(const float &x_tick_start) {
    m_x_tick_start = x_tick_start;
    m_x_tick_start_isSet = true;
}

bool OAIXYViewProperties::is_x_tick_start_Set() const{
    return m_x_tick_start_isSet;
}

bool OAIXYViewProperties::is_x_tick_start_Valid() const{
    return m_x_tick_start_isValid;
}

float OAIXYViewProperties::getXTickStep() const {
    return m_x_tick_step;
}
void OAIXYViewProperties::setXTickStep(const float &x_tick_step) {
    m_x_tick_step = x_tick_step;
    m_x_tick_step_isSet = true;
}

bool OAIXYViewProperties::is_x_tick_step_Set() const{
    return m_x_tick_step_isSet;
}

bool OAIXYViewProperties::is_x_tick_step_Valid() const{
    return m_x_tick_step_isValid;
}

qint32 OAIXYViewProperties::getXTotalTicks() const {
    return m_x_total_ticks;
}
void OAIXYViewProperties::setXTotalTicks(const qint32 &x_total_ticks) {
    m_x_total_ticks = x_total_ticks;
    m_x_total_ticks_isSet = true;
}

bool OAIXYViewProperties::is_x_total_ticks_Set() const{
    return m_x_total_ticks_isSet;
}

bool OAIXYViewProperties::is_x_total_ticks_Valid() const{
    return m_x_total_ticks_isValid;
}

QString OAIXYViewProperties::getYColumn() const {
    return m_y_column;
}
void OAIXYViewProperties::setYColumn(const QString &y_column) {
    m_y_column = y_column;
    m_y_column_isSet = true;
}

bool OAIXYViewProperties::is_y_column_Set() const{
    return m_y_column_isSet;
}

bool OAIXYViewProperties::is_y_column_Valid() const{
    return m_y_column_isValid;
}

float OAIXYViewProperties::getYTickStart() const {
    return m_y_tick_start;
}
void OAIXYViewProperties::setYTickStart(const float &y_tick_start) {
    m_y_tick_start = y_tick_start;
    m_y_tick_start_isSet = true;
}

bool OAIXYViewProperties::is_y_tick_start_Set() const{
    return m_y_tick_start_isSet;
}

bool OAIXYViewProperties::is_y_tick_start_Valid() const{
    return m_y_tick_start_isValid;
}

float OAIXYViewProperties::getYTickStep() const {
    return m_y_tick_step;
}
void OAIXYViewProperties::setYTickStep(const float &y_tick_step) {
    m_y_tick_step = y_tick_step;
    m_y_tick_step_isSet = true;
}

bool OAIXYViewProperties::is_y_tick_step_Set() const{
    return m_y_tick_step_isSet;
}

bool OAIXYViewProperties::is_y_tick_step_Valid() const{
    return m_y_tick_step_isValid;
}

qint32 OAIXYViewProperties::getYTotalTicks() const {
    return m_y_total_ticks;
}
void OAIXYViewProperties::setYTotalTicks(const qint32 &y_total_ticks) {
    m_y_total_ticks = y_total_ticks;
    m_y_total_ticks_isSet = true;
}

bool OAIXYViewProperties::is_y_total_ticks_Set() const{
    return m_y_total_ticks_isSet;
}

bool OAIXYViewProperties::is_y_total_ticks_Valid() const{
    return m_y_total_ticks_isValid;
}

bool OAIXYViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_x_axis_ticks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_y_axis_ticks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hover_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_colorize_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_hide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_orientation_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shade_below_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_note_when_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_tick_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_tick_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_total_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_tick_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_tick_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_total_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXYViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_axes_isValid && m_colors_isValid && m_geom_isValid && m_note_isValid && m_position_isValid && m_queries_isValid && m_shape_isValid && m_show_note_when_empty_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
