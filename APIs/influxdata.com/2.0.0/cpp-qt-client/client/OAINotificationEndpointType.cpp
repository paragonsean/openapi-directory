/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationEndpointType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationEndpointType::OAINotificationEndpointType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationEndpointType::OAINotificationEndpointType() {
    this->initializeModel();
}

OAINotificationEndpointType::~OAINotificationEndpointType() {}

void OAINotificationEndpointType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINotificationEndpointType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINotificationEndpointType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("slack", Qt::CaseInsensitive) == 0) {
        m_value = eOAINotificationEndpointType::SLACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pagerduty", Qt::CaseInsensitive) == 0) {
        m_value = eOAINotificationEndpointType::PAGERDUTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("http", Qt::CaseInsensitive) == 0) {
        m_value = eOAINotificationEndpointType::HTTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("telegram", Qt::CaseInsensitive) == 0) {
        m_value = eOAINotificationEndpointType::TELEGRAM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINotificationEndpointType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINotificationEndpointType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINotificationEndpointType::SLACK:
            val = "slack";
            break;
        case eOAINotificationEndpointType::PAGERDUTY:
            val = "pagerduty";
            break;
        case eOAINotificationEndpointType::HTTP:
            val = "http";
            break;
        case eOAINotificationEndpointType::TELEGRAM:
            val = "telegram";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINotificationEndpointType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINotificationEndpointType::eOAINotificationEndpointType OAINotificationEndpointType::getValue() const {
    return m_value;
}

void OAINotificationEndpointType::setValue(const OAINotificationEndpointType::eOAINotificationEndpointType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINotificationEndpointType::isSet() const {
    
    return m_value_isSet;
}

bool OAINotificationEndpointType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
