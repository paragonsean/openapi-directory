/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICellsApi_H
#define OAI_OAICellsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICell.h"
#include "OAICellUpdate.h"
#include "OAICreateCell.h"
#include "OAIDashboard.h"
#include "OAIError.h"
#include "OAIView.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICellsApi : public QObject {
    Q_OBJECT

public:
    OAICellsApi(const int timeOut = 0);
    ~OAICellsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  cell_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDashboardsIDCellsID(const QString &dashboard_id, const QString &cell_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  cell_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getDashboardsIDCellsIDView(const QString &dashboard_id, const QString &cell_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  cell_id QString [required]
    * @param[in]  oai_cell_update OAICellUpdate [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchDashboardsIDCellsID(const QString &dashboard_id, const QString &cell_id, const OAICellUpdate &oai_cell_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  cell_id QString [required]
    * @param[in]  oai_view OAIView [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchDashboardsIDCellsIDView(const QString &dashboard_id, const QString &cell_id, const OAIView &oai_view, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_create_cell OAICreateCell [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDashboardsIDCells(const QString &dashboard_id, const OAICreateCell &oai_create_cell, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_cell QList<OAICell> [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putDashboardsIDCells(const QString &dashboard_id, const QList<OAICell> &oai_cell, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteDashboardsIDCellsIDCallback(OAIHttpRequestWorker *worker);
    void getDashboardsIDCellsIDViewCallback(OAIHttpRequestWorker *worker);
    void patchDashboardsIDCellsIDCallback(OAIHttpRequestWorker *worker);
    void patchDashboardsIDCellsIDViewCallback(OAIHttpRequestWorker *worker);
    void postDashboardsIDCellsCallback(OAIHttpRequestWorker *worker);
    void putDashboardsIDCellsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteDashboardsIDCellsIDSignal();
    void getDashboardsIDCellsIDViewSignal(OAIView summary);
    void patchDashboardsIDCellsIDSignal(OAICell summary);
    void patchDashboardsIDCellsIDViewSignal(OAIView summary);
    void postDashboardsIDCellsSignal(OAICell summary);
    void putDashboardsIDCellsSignal(OAIDashboard summary);


    void deleteDashboardsIDCellsIDSignalFull(OAIHttpRequestWorker *worker);
    void getDashboardsIDCellsIDViewSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void patchDashboardsIDCellsIDSignalFull(OAIHttpRequestWorker *worker, OAICell summary);
    void patchDashboardsIDCellsIDViewSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void postDashboardsIDCellsSignalFull(OAIHttpRequestWorker *worker, OAICell summary);
    void putDashboardsIDCellsSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);

    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDCellsIDSignalError() instead")
    void deleteDashboardsIDCellsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDCellsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDCellsIDViewSignalError() instead")
    void getDashboardsIDCellsIDViewSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDCellsIDViewSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDCellsIDSignalError() instead")
    void patchDashboardsIDCellsIDSignalE(OAICell summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDCellsIDSignalError(OAICell summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDCellsIDViewSignalError() instead")
    void patchDashboardsIDCellsIDViewSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDCellsIDViewSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDCellsSignalError() instead")
    void postDashboardsIDCellsSignalE(OAICell summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDCellsSignalError(OAICell summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDashboardsIDCellsSignalError() instead")
    void putDashboardsIDCellsSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putDashboardsIDCellsSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDCellsIDSignalErrorFull() instead")
    void deleteDashboardsIDCellsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDCellsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDCellsIDViewSignalErrorFull() instead")
    void getDashboardsIDCellsIDViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDCellsIDViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDCellsIDSignalErrorFull() instead")
    void patchDashboardsIDCellsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDCellsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDCellsIDViewSignalErrorFull() instead")
    void patchDashboardsIDCellsIDViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDCellsIDViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDCellsSignalErrorFull() instead")
    void postDashboardsIDCellsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDCellsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDashboardsIDCellsSignalErrorFull() instead")
    void putDashboardsIDCellsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putDashboardsIDCellsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
