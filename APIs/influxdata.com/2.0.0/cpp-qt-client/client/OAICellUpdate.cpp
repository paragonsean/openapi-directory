/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICellUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICellUpdate::OAICellUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICellUpdate::OAICellUpdate() {
    this->initializeModel();
}

OAICellUpdate::~OAICellUpdate() {}

void OAICellUpdate::initializeModel() {

    m_h_isSet = false;
    m_h_isValid = false;

    m_w_isSet = false;
    m_w_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAICellUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICellUpdate::fromJsonObject(QJsonObject json) {

    m_h_isValid = ::OpenAPI::fromJsonValue(m_h, json[QString("h")]);
    m_h_isSet = !json[QString("h")].isNull() && m_h_isValid;

    m_w_isValid = ::OpenAPI::fromJsonValue(m_w, json[QString("w")]);
    m_w_isSet = !json[QString("w")].isNull() && m_w_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAICellUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICellUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_h_isSet) {
        obj.insert(QString("h"), ::OpenAPI::toJsonValue(m_h));
    }
    if (m_w_isSet) {
        obj.insert(QString("w"), ::OpenAPI::toJsonValue(m_w));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

qint32 OAICellUpdate::getH() const {
    return m_h;
}
void OAICellUpdate::setH(const qint32 &h) {
    m_h = h;
    m_h_isSet = true;
}

bool OAICellUpdate::is_h_Set() const{
    return m_h_isSet;
}

bool OAICellUpdate::is_h_Valid() const{
    return m_h_isValid;
}

qint32 OAICellUpdate::getW() const {
    return m_w;
}
void OAICellUpdate::setW(const qint32 &w) {
    m_w = w;
    m_w_isSet = true;
}

bool OAICellUpdate::is_w_Set() const{
    return m_w_isSet;
}

bool OAICellUpdate::is_w_Valid() const{
    return m_w_isValid;
}

qint32 OAICellUpdate::getX() const {
    return m_x;
}
void OAICellUpdate::setX(const qint32 &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAICellUpdate::is_x_Set() const{
    return m_x_isSet;
}

bool OAICellUpdate::is_x_Valid() const{
    return m_x_isValid;
}

qint32 OAICellUpdate::getY() const {
    return m_y;
}
void OAICellUpdate::setY(const qint32 &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAICellUpdate::is_y_Set() const{
    return m_y_isSet;
}

bool OAICellUpdate::is_y_Valid() const{
    return m_y_isValid;
}

bool OAICellUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_w_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICellUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
