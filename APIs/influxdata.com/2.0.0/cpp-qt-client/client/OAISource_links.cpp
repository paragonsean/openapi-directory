/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource_links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource_links::OAISource_links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource_links::OAISource_links() {
    this->initializeModel();
}

OAISource_links::~OAISource_links() {}

void OAISource_links::initializeModel() {

    m_buckets_isSet = false;
    m_buckets_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAISource_links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource_links::fromJsonObject(QJsonObject json) {

    m_buckets_isValid = ::OpenAPI::fromJsonValue(m_buckets, json[QString("buckets")]);
    m_buckets_isSet = !json[QString("buckets")].isNull() && m_buckets_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAISource_links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource_links::asJsonObject() const {
    QJsonObject obj;
    if (m_buckets_isSet) {
        obj.insert(QString("buckets"), ::OpenAPI::toJsonValue(m_buckets));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

QString OAISource_links::getBuckets() const {
    return m_buckets;
}
void OAISource_links::setBuckets(const QString &buckets) {
    m_buckets = buckets;
    m_buckets_isSet = true;
}

bool OAISource_links::is_buckets_Set() const{
    return m_buckets_isSet;
}

bool OAISource_links::is_buckets_Valid() const{
    return m_buckets_isValid;
}

QString OAISource_links::getHealth() const {
    return m_health;
}
void OAISource_links::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAISource_links::is_health_Set() const{
    return m_health_isSet;
}

bool OAISource_links::is_health_Valid() const{
    return m_health_isValid;
}

QString OAISource_links::getQuery() const {
    return m_query;
}
void OAISource_links::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISource_links::is_query_Set() const{
    return m_query_isSet;
}

bool OAISource_links::is_query_Valid() const{
    return m_query_isValid;
}

QString OAISource_links::getSelf() const {
    return m_self;
}
void OAISource_links::setSelf(const QString &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAISource_links::is_self_Set() const{
    return m_self_isSet;
}

bool OAISource_links::is_self_Valid() const{
    return m_self_isValid;
}

bool OAISource_links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buckets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource_links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
