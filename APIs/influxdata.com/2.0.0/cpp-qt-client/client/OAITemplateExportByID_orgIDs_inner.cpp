/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateExportByID_orgIDs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateExportByID_orgIDs_inner::OAITemplateExportByID_orgIDs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateExportByID_orgIDs_inner::OAITemplateExportByID_orgIDs_inner() {
    this->initializeModel();
}

OAITemplateExportByID_orgIDs_inner::~OAITemplateExportByID_orgIDs_inner() {}

void OAITemplateExportByID_orgIDs_inner::initializeModel() {

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_resource_filters_isSet = false;
    m_resource_filters_isValid = false;
}

void OAITemplateExportByID_orgIDs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateExportByID_orgIDs_inner::fromJsonObject(QJsonObject json) {

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_resource_filters_isValid = ::OpenAPI::fromJsonValue(m_resource_filters, json[QString("resourceFilters")]);
    m_resource_filters_isSet = !json[QString("resourceFilters")].isNull() && m_resource_filters_isValid;
}

QString OAITemplateExportByID_orgIDs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateExportByID_orgIDs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_resource_filters.isSet()) {
        obj.insert(QString("resourceFilters"), ::OpenAPI::toJsonValue(m_resource_filters));
    }
    return obj;
}

QString OAITemplateExportByID_orgIDs_inner::getOrgId() const {
    return m_org_id;
}
void OAITemplateExportByID_orgIDs_inner::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAITemplateExportByID_orgIDs_inner::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAITemplateExportByID_orgIDs_inner::is_org_id_Valid() const{
    return m_org_id_isValid;
}

OAITemplateExportByID_orgIDs_inner_resourceFilters OAITemplateExportByID_orgIDs_inner::getResourceFilters() const {
    return m_resource_filters;
}
void OAITemplateExportByID_orgIDs_inner::setResourceFilters(const OAITemplateExportByID_orgIDs_inner_resourceFilters &resource_filters) {
    m_resource_filters = resource_filters;
    m_resource_filters_isSet = true;
}

bool OAITemplateExportByID_orgIDs_inner::is_resource_filters_Set() const{
    return m_resource_filters_isSet;
}

bool OAITemplateExportByID_orgIDs_inner::is_resource_filters_Valid() const{
    return m_resource_filters_isValid;
}

bool OAITemplateExportByID_orgIDs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateExportByID_orgIDs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
