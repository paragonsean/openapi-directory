/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScraperTargetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScraperTargetRequest::OAIScraperTargetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScraperTargetRequest::OAIScraperTargetRequest() {
    this->initializeModel();
}

OAIScraperTargetRequest::~OAIScraperTargetRequest() {}

void OAIScraperTargetRequest::initializeModel() {

    m_allow_insecure_isSet = false;
    m_allow_insecure_isValid = false;

    m_bucket_id_isSet = false;
    m_bucket_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIScraperTargetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScraperTargetRequest::fromJsonObject(QJsonObject json) {

    m_allow_insecure_isValid = ::OpenAPI::fromJsonValue(m_allow_insecure, json[QString("allowInsecure")]);
    m_allow_insecure_isSet = !json[QString("allowInsecure")].isNull() && m_allow_insecure_isValid;

    m_bucket_id_isValid = ::OpenAPI::fromJsonValue(m_bucket_id, json[QString("bucketID")]);
    m_bucket_id_isSet = !json[QString("bucketID")].isNull() && m_bucket_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIScraperTargetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScraperTargetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_insecure_isSet) {
        obj.insert(QString("allowInsecure"), ::OpenAPI::toJsonValue(m_allow_insecure));
    }
    if (m_bucket_id_isSet) {
        obj.insert(QString("bucketID"), ::OpenAPI::toJsonValue(m_bucket_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIScraperTargetRequest::isAllowInsecure() const {
    return m_allow_insecure;
}
void OAIScraperTargetRequest::setAllowInsecure(const bool &allow_insecure) {
    m_allow_insecure = allow_insecure;
    m_allow_insecure_isSet = true;
}

bool OAIScraperTargetRequest::is_allow_insecure_Set() const{
    return m_allow_insecure_isSet;
}

bool OAIScraperTargetRequest::is_allow_insecure_Valid() const{
    return m_allow_insecure_isValid;
}

QString OAIScraperTargetRequest::getBucketId() const {
    return m_bucket_id;
}
void OAIScraperTargetRequest::setBucketId(const QString &bucket_id) {
    m_bucket_id = bucket_id;
    m_bucket_id_isSet = true;
}

bool OAIScraperTargetRequest::is_bucket_id_Set() const{
    return m_bucket_id_isSet;
}

bool OAIScraperTargetRequest::is_bucket_id_Valid() const{
    return m_bucket_id_isValid;
}

QString OAIScraperTargetRequest::getName() const {
    return m_name;
}
void OAIScraperTargetRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScraperTargetRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScraperTargetRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIScraperTargetRequest::getOrgId() const {
    return m_org_id;
}
void OAIScraperTargetRequest::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIScraperTargetRequest::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIScraperTargetRequest::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIScraperTargetRequest::getType() const {
    return m_type;
}
void OAIScraperTargetRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScraperTargetRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScraperTargetRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIScraperTargetRequest::getUrl() const {
    return m_url;
}
void OAIScraperTargetRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIScraperTargetRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIScraperTargetRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIScraperTargetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_insecure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScraperTargetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
