/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner() {
    this->initializeModel();
}

OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::~OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner() {}

void OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::initializeModel() {

    m_current_level_isSet = false;
    m_current_level_isValid = false;

    m_previous_level_isSet = false;
    m_previous_level_isValid = false;
}

void OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::fromJsonObject(QJsonObject json) {

    m_current_level_isValid = ::OpenAPI::fromJsonValue(m_current_level, json[QString("currentLevel")]);
    m_current_level_isSet = !json[QString("currentLevel")].isNull() && m_current_level_isValid;

    m_previous_level_isValid = ::OpenAPI::fromJsonValue(m_previous_level, json[QString("previousLevel")]);
    m_previous_level_isSet = !json[QString("previousLevel")].isNull() && m_previous_level_isValid;
}

QString OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_current_level_isSet) {
        obj.insert(QString("currentLevel"), ::OpenAPI::toJsonValue(m_current_level));
    }
    if (m_previous_level_isSet) {
        obj.insert(QString("previousLevel"), ::OpenAPI::toJsonValue(m_previous_level));
    }
    return obj;
}

QString OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::getCurrentLevel() const {
    return m_current_level;
}
void OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::setCurrentLevel(const QString &current_level) {
    m_current_level = current_level;
    m_current_level_isSet = true;
}

bool OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::is_current_level_Set() const{
    return m_current_level_isSet;
}

bool OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::is_current_level_Valid() const{
    return m_current_level_isValid;
}

QString OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::getPreviousLevel() const {
    return m_previous_level;
}
void OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::setPreviousLevel(const QString &previous_level) {
    m_previous_level = previous_level;
    m_previous_level_isSet = true;
}

bool OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::is_previous_level_Set() const{
    return m_previous_level_isSet;
}

bool OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::is_previous_level_Valid() const{
    return m_previous_level_isValid;
}

bool OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
