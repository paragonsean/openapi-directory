/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBinaryExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBinaryExpression::OAIBinaryExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBinaryExpression::OAIBinaryExpression() {
    this->initializeModel();
}

OAIBinaryExpression::~OAIBinaryExpression() {}

void OAIBinaryExpression::initializeModel() {

    m_left_isSet = false;
    m_left_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBinaryExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBinaryExpression::fromJsonObject(QJsonObject json) {

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_right_isValid = ::OpenAPI::fromJsonValue(m_right, json[QString("right")]);
    m_right_isSet = !json[QString("right")].isNull() && m_right_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBinaryExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBinaryExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_left.isSet()) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_right.isSet()) {
        obj.insert(QString("right"), ::OpenAPI::toJsonValue(m_right));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIExpression OAIBinaryExpression::getLeft() const {
    return m_left;
}
void OAIBinaryExpression::setLeft(const OAIExpression &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAIBinaryExpression::is_left_Set() const{
    return m_left_isSet;
}

bool OAIBinaryExpression::is_left_Valid() const{
    return m_left_isValid;
}

QString OAIBinaryExpression::getROperator() const {
    return m_r_operator;
}
void OAIBinaryExpression::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIBinaryExpression::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIBinaryExpression::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

OAIExpression OAIBinaryExpression::getRight() const {
    return m_right;
}
void OAIBinaryExpression::setRight(const OAIExpression &right) {
    m_right = right;
    m_right_isSet = true;
}

bool OAIBinaryExpression::is_right_Set() const{
    return m_right_isSet;
}

bool OAIBinaryExpression::is_right_Valid() const{
    return m_right_isValid;
}

QString OAIBinaryExpression::getType() const {
    return m_type;
}
void OAIBinaryExpression::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBinaryExpression::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBinaryExpression::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBinaryExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBinaryExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
