/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITelegrafsApi_H
#define OAI_OAITelegrafsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddResourceMemberRequestBody.h"
#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAIResourceMember.h"
#include "OAIResourceMembers.h"
#include "OAIResourceOwner.h"
#include "OAIResourceOwners.h"
#include "OAITelegraf.h"
#include "OAITelegrafRequest.h"
#include "OAITelegrafs.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITelegrafsApi : public QObject {
    Q_OBJECT

public:
    OAITelegrafsApi(const int timeOut = 0);
    ~OAITelegrafsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTelegrafsID(const QString &telegraf_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTelegrafsIDLabelsID(const QString &telegraf_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  telegraf_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTelegrafsIDMembersID(const QString &user_id, const QString &telegraf_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  telegraf_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTelegrafsIDOwnersID(const QString &user_id, const QString &telegraf_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  org_id QString [optional]
    */
    virtual void getTelegrafs(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  accept QString [optional]
    */
    virtual void getTelegrafsID(const QString &telegraf_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTelegrafsIDLabels(const QString &telegraf_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTelegrafsIDMembers(const QString &telegraf_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTelegrafsIDOwners(const QString &telegraf_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_telegraf_request OAITelegrafRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postTelegrafs(const OAITelegrafRequest &oai_telegraf_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postTelegrafsIDLabels(const QString &telegraf_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postTelegrafsIDMembers(const QString &telegraf_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postTelegrafsIDOwners(const QString &telegraf_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  telegraf_id QString [required]
    * @param[in]  oai_telegraf_request OAITelegrafRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putTelegrafsID(const QString &telegraf_id, const OAITelegrafRequest &oai_telegraf_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteTelegrafsIDCallback(OAIHttpRequestWorker *worker);
    void deleteTelegrafsIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void deleteTelegrafsIDMembersIDCallback(OAIHttpRequestWorker *worker);
    void deleteTelegrafsIDOwnersIDCallback(OAIHttpRequestWorker *worker);
    void getTelegrafsCallback(OAIHttpRequestWorker *worker);
    void getTelegrafsIDCallback(OAIHttpRequestWorker *worker);
    void getTelegrafsIDLabelsCallback(OAIHttpRequestWorker *worker);
    void getTelegrafsIDMembersCallback(OAIHttpRequestWorker *worker);
    void getTelegrafsIDOwnersCallback(OAIHttpRequestWorker *worker);
    void postTelegrafsCallback(OAIHttpRequestWorker *worker);
    void postTelegrafsIDLabelsCallback(OAIHttpRequestWorker *worker);
    void postTelegrafsIDMembersCallback(OAIHttpRequestWorker *worker);
    void postTelegrafsIDOwnersCallback(OAIHttpRequestWorker *worker);
    void putTelegrafsIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteTelegrafsIDSignal();
    void deleteTelegrafsIDLabelsIDSignal();
    void deleteTelegrafsIDMembersIDSignal();
    void deleteTelegrafsIDOwnersIDSignal();
    void getTelegrafsSignal(OAITelegrafs summary);
    void getTelegrafsIDSignal(OAITelegraf summary);
    void getTelegrafsIDLabelsSignal(OAILabelsResponse summary);
    void getTelegrafsIDMembersSignal(OAIResourceMembers summary);
    void getTelegrafsIDOwnersSignal(OAIResourceOwners summary);
    void postTelegrafsSignal(OAITelegraf summary);
    void postTelegrafsIDLabelsSignal(OAILabelResponse summary);
    void postTelegrafsIDMembersSignal(OAIResourceMember summary);
    void postTelegrafsIDOwnersSignal(OAIResourceOwner summary);
    void putTelegrafsIDSignal(OAITelegraf summary);


    void deleteTelegrafsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteTelegrafsIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteTelegrafsIDMembersIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteTelegrafsIDOwnersIDSignalFull(OAIHttpRequestWorker *worker);
    void getTelegrafsSignalFull(OAIHttpRequestWorker *worker, OAITelegrafs summary);
    void getTelegrafsIDSignalFull(OAIHttpRequestWorker *worker, OAITelegraf summary);
    void getTelegrafsIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void getTelegrafsIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMembers summary);
    void getTelegrafsIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwners summary);
    void postTelegrafsSignalFull(OAIHttpRequestWorker *worker, OAITelegraf summary);
    void postTelegrafsIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void postTelegrafsIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMember summary);
    void postTelegrafsIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwner summary);
    void putTelegrafsIDSignalFull(OAIHttpRequestWorker *worker, OAITelegraf summary);

    Q_DECL_DEPRECATED_X("Use deleteTelegrafsIDSignalError() instead")
    void deleteTelegrafsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTelegrafsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTelegrafsIDLabelsIDSignalError() instead")
    void deleteTelegrafsIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTelegrafsIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTelegrafsIDMembersIDSignalError() instead")
    void deleteTelegrafsIDMembersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTelegrafsIDMembersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTelegrafsIDOwnersIDSignalError() instead")
    void deleteTelegrafsIDOwnersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTelegrafsIDOwnersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsSignalError() instead")
    void getTelegrafsSignalE(OAITelegrafs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsSignalError(OAITelegrafs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsIDSignalError() instead")
    void getTelegrafsIDSignalE(OAITelegraf summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsIDSignalError(OAITelegraf summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsIDLabelsSignalError() instead")
    void getTelegrafsIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsIDMembersSignalError() instead")
    void getTelegrafsIDMembersSignalE(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsIDMembersSignalError(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsIDOwnersSignalError() instead")
    void getTelegrafsIDOwnersSignalE(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsIDOwnersSignalError(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTelegrafsSignalError() instead")
    void postTelegrafsSignalE(OAITelegraf summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTelegrafsSignalError(OAITelegraf summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTelegrafsIDLabelsSignalError() instead")
    void postTelegrafsIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTelegrafsIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTelegrafsIDMembersSignalError() instead")
    void postTelegrafsIDMembersSignalE(OAIResourceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTelegrafsIDMembersSignalError(OAIResourceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTelegrafsIDOwnersSignalError() instead")
    void postTelegrafsIDOwnersSignalE(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTelegrafsIDOwnersSignalError(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putTelegrafsIDSignalError() instead")
    void putTelegrafsIDSignalE(OAITelegraf summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putTelegrafsIDSignalError(OAITelegraf summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteTelegrafsIDSignalErrorFull() instead")
    void deleteTelegrafsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTelegrafsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTelegrafsIDLabelsIDSignalErrorFull() instead")
    void deleteTelegrafsIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTelegrafsIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTelegrafsIDMembersIDSignalErrorFull() instead")
    void deleteTelegrafsIDMembersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTelegrafsIDMembersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTelegrafsIDOwnersIDSignalErrorFull() instead")
    void deleteTelegrafsIDOwnersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTelegrafsIDOwnersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsSignalErrorFull() instead")
    void getTelegrafsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsIDSignalErrorFull() instead")
    void getTelegrafsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsIDLabelsSignalErrorFull() instead")
    void getTelegrafsIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsIDMembersSignalErrorFull() instead")
    void getTelegrafsIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTelegrafsIDOwnersSignalErrorFull() instead")
    void getTelegrafsIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTelegrafsIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTelegrafsSignalErrorFull() instead")
    void postTelegrafsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTelegrafsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTelegrafsIDLabelsSignalErrorFull() instead")
    void postTelegrafsIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTelegrafsIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTelegrafsIDMembersSignalErrorFull() instead")
    void postTelegrafsIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTelegrafsIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTelegrafsIDOwnersSignalErrorFull() instead")
    void postTelegrafsIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTelegrafsIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putTelegrafsIDSignalErrorFull() instead")
    void putTelegrafsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putTelegrafsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
