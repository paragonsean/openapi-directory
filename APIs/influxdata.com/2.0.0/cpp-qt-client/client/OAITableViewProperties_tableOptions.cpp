/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableViewProperties_tableOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableViewProperties_tableOptions::OAITableViewProperties_tableOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableViewProperties_tableOptions::OAITableViewProperties_tableOptions() {
    this->initializeModel();
}

OAITableViewProperties_tableOptions::~OAITableViewProperties_tableOptions() {}

void OAITableViewProperties_tableOptions::initializeModel() {

    m_fix_first_column_isSet = false;
    m_fix_first_column_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_vertical_time_axis_isSet = false;
    m_vertical_time_axis_isValid = false;

    m_wrapping_isSet = false;
    m_wrapping_isValid = false;
}

void OAITableViewProperties_tableOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableViewProperties_tableOptions::fromJsonObject(QJsonObject json) {

    m_fix_first_column_isValid = ::OpenAPI::fromJsonValue(m_fix_first_column, json[QString("fixFirstColumn")]);
    m_fix_first_column_isSet = !json[QString("fixFirstColumn")].isNull() && m_fix_first_column_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_vertical_time_axis_isValid = ::OpenAPI::fromJsonValue(m_vertical_time_axis, json[QString("verticalTimeAxis")]);
    m_vertical_time_axis_isSet = !json[QString("verticalTimeAxis")].isNull() && m_vertical_time_axis_isValid;

    m_wrapping_isValid = ::OpenAPI::fromJsonValue(m_wrapping, json[QString("wrapping")]);
    m_wrapping_isSet = !json[QString("wrapping")].isNull() && m_wrapping_isValid;
}

QString OAITableViewProperties_tableOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableViewProperties_tableOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_fix_first_column_isSet) {
        obj.insert(QString("fixFirstColumn"), ::OpenAPI::toJsonValue(m_fix_first_column));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_vertical_time_axis_isSet) {
        obj.insert(QString("verticalTimeAxis"), ::OpenAPI::toJsonValue(m_vertical_time_axis));
    }
    if (m_wrapping_isSet) {
        obj.insert(QString("wrapping"), ::OpenAPI::toJsonValue(m_wrapping));
    }
    return obj;
}

bool OAITableViewProperties_tableOptions::isFixFirstColumn() const {
    return m_fix_first_column;
}
void OAITableViewProperties_tableOptions::setFixFirstColumn(const bool &fix_first_column) {
    m_fix_first_column = fix_first_column;
    m_fix_first_column_isSet = true;
}

bool OAITableViewProperties_tableOptions::is_fix_first_column_Set() const{
    return m_fix_first_column_isSet;
}

bool OAITableViewProperties_tableOptions::is_fix_first_column_Valid() const{
    return m_fix_first_column_isValid;
}

OAIRenamableField OAITableViewProperties_tableOptions::getSortBy() const {
    return m_sort_by;
}
void OAITableViewProperties_tableOptions::setSortBy(const OAIRenamableField &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAITableViewProperties_tableOptions::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAITableViewProperties_tableOptions::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

bool OAITableViewProperties_tableOptions::isVerticalTimeAxis() const {
    return m_vertical_time_axis;
}
void OAITableViewProperties_tableOptions::setVerticalTimeAxis(const bool &vertical_time_axis) {
    m_vertical_time_axis = vertical_time_axis;
    m_vertical_time_axis_isSet = true;
}

bool OAITableViewProperties_tableOptions::is_vertical_time_axis_Set() const{
    return m_vertical_time_axis_isSet;
}

bool OAITableViewProperties_tableOptions::is_vertical_time_axis_Valid() const{
    return m_vertical_time_axis_isValid;
}

QString OAITableViewProperties_tableOptions::getWrapping() const {
    return m_wrapping;
}
void OAITableViewProperties_tableOptions::setWrapping(const QString &wrapping) {
    m_wrapping = wrapping;
    m_wrapping_isSet = true;
}

bool OAITableViewProperties_tableOptions::is_wrapping_Set() const{
    return m_wrapping_isSet;
}

bool OAITableViewProperties_tableOptions::is_wrapping_Valid() const{
    return m_wrapping_isValid;
}

bool OAITableViewProperties_tableOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fix_first_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_time_axis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapping_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableViewProperties_tableOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
