/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksApi_H
#define OAI_OAITasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddResourceMemberRequestBody.h"
#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAILogs.h"
#include "OAIObject.h"
#include "OAIResourceMember.h"
#include "OAIResourceMembers.h"
#include "OAIResourceOwner.h"
#include "OAIResourceOwners.h"
#include "OAIRun.h"
#include "OAIRunManually.h"
#include "OAIRuns.h"
#include "OAITask.h"
#include "OAITaskCreateRequest.h"
#include "OAITaskUpdateRequest.h"
#include "OAITasks.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksApi : public QObject {
    Q_OBJECT

public:
    OAITasksApi(const int timeOut = 0);
    ~OAITasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTasksID(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTasksIDLabelsID(const QString &task_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTasksIDMembersID(const QString &user_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTasksIDOwnersID(const QString &user_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  run_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteTasksIDRunsID(const QString &task_id, const QString &run_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  after QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  org QString [optional]
    * @param[in]  org_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getTasks(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTasksID(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTasksIDLabels(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTasksIDLogs(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTasksIDMembers(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTasksIDOwners(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  after QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  after_time QDateTime [optional]
    * @param[in]  before_time QDateTime [optional]
    */
    virtual void getTasksIDRuns(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &after_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  run_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTasksIDRunsID(const QString &task_id, const QString &run_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  run_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getTasksIDRunsIDLogs(const QString &task_id, const QString &run_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_task_update_request OAITaskUpdateRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchTasksID(const QString &task_id, const OAITaskUpdateRequest &oai_task_update_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_task_create_request OAITaskCreateRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postTasks(const OAITaskCreateRequest &oai_task_create_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postTasksIDLabels(const QString &task_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postTasksIDMembers(const QString &task_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postTasksIDOwners(const QString &task_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  oai_run_manually OAIRunManually [optional]
    */
    virtual void postTasksIDRuns(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRunManually> &oai_run_manually = ::OpenAPI::OptionalParam<OAIRunManually>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  run_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void postTasksIDRunsIDRetry(const QString &task_id, const QString &run_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteTasksIDCallback(OAIHttpRequestWorker *worker);
    void deleteTasksIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void deleteTasksIDMembersIDCallback(OAIHttpRequestWorker *worker);
    void deleteTasksIDOwnersIDCallback(OAIHttpRequestWorker *worker);
    void deleteTasksIDRunsIDCallback(OAIHttpRequestWorker *worker);
    void getTasksCallback(OAIHttpRequestWorker *worker);
    void getTasksIDCallback(OAIHttpRequestWorker *worker);
    void getTasksIDLabelsCallback(OAIHttpRequestWorker *worker);
    void getTasksIDLogsCallback(OAIHttpRequestWorker *worker);
    void getTasksIDMembersCallback(OAIHttpRequestWorker *worker);
    void getTasksIDOwnersCallback(OAIHttpRequestWorker *worker);
    void getTasksIDRunsCallback(OAIHttpRequestWorker *worker);
    void getTasksIDRunsIDCallback(OAIHttpRequestWorker *worker);
    void getTasksIDRunsIDLogsCallback(OAIHttpRequestWorker *worker);
    void patchTasksIDCallback(OAIHttpRequestWorker *worker);
    void postTasksCallback(OAIHttpRequestWorker *worker);
    void postTasksIDLabelsCallback(OAIHttpRequestWorker *worker);
    void postTasksIDMembersCallback(OAIHttpRequestWorker *worker);
    void postTasksIDOwnersCallback(OAIHttpRequestWorker *worker);
    void postTasksIDRunsCallback(OAIHttpRequestWorker *worker);
    void postTasksIDRunsIDRetryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteTasksIDSignal();
    void deleteTasksIDLabelsIDSignal();
    void deleteTasksIDMembersIDSignal();
    void deleteTasksIDOwnersIDSignal();
    void deleteTasksIDRunsIDSignal();
    void getTasksSignal(OAITasks summary);
    void getTasksIDSignal(OAITask summary);
    void getTasksIDLabelsSignal(OAILabelsResponse summary);
    void getTasksIDLogsSignal(OAILogs summary);
    void getTasksIDMembersSignal(OAIResourceMembers summary);
    void getTasksIDOwnersSignal(OAIResourceOwners summary);
    void getTasksIDRunsSignal(OAIRuns summary);
    void getTasksIDRunsIDSignal(OAIRun summary);
    void getTasksIDRunsIDLogsSignal(OAILogs summary);
    void patchTasksIDSignal(OAITask summary);
    void postTasksSignal(OAITask summary);
    void postTasksIDLabelsSignal(OAILabelResponse summary);
    void postTasksIDMembersSignal(OAIResourceMember summary);
    void postTasksIDOwnersSignal(OAIResourceOwner summary);
    void postTasksIDRunsSignal(OAIRun summary);
    void postTasksIDRunsIDRetrySignal(OAIRun summary);


    void deleteTasksIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteTasksIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteTasksIDMembersIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteTasksIDOwnersIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteTasksIDRunsIDSignalFull(OAIHttpRequestWorker *worker);
    void getTasksSignalFull(OAIHttpRequestWorker *worker, OAITasks summary);
    void getTasksIDSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void getTasksIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void getTasksIDLogsSignalFull(OAIHttpRequestWorker *worker, OAILogs summary);
    void getTasksIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMembers summary);
    void getTasksIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwners summary);
    void getTasksIDRunsSignalFull(OAIHttpRequestWorker *worker, OAIRuns summary);
    void getTasksIDRunsIDSignalFull(OAIHttpRequestWorker *worker, OAIRun summary);
    void getTasksIDRunsIDLogsSignalFull(OAIHttpRequestWorker *worker, OAILogs summary);
    void patchTasksIDSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void postTasksSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void postTasksIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void postTasksIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMember summary);
    void postTasksIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwner summary);
    void postTasksIDRunsSignalFull(OAIHttpRequestWorker *worker, OAIRun summary);
    void postTasksIDRunsIDRetrySignalFull(OAIHttpRequestWorker *worker, OAIRun summary);

    Q_DECL_DEPRECATED_X("Use deleteTasksIDSignalError() instead")
    void deleteTasksIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksIDLabelsIDSignalError() instead")
    void deleteTasksIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksIDMembersIDSignalError() instead")
    void deleteTasksIDMembersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDMembersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksIDOwnersIDSignalError() instead")
    void deleteTasksIDOwnersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDOwnersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksIDRunsIDSignalError() instead")
    void deleteTasksIDRunsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDRunsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksSignalError() instead")
    void getTasksSignalE(OAITasks summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksSignalError(OAITasks summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDSignalError() instead")
    void getTasksIDSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDLabelsSignalError() instead")
    void getTasksIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDLogsSignalError() instead")
    void getTasksIDLogsSignalE(OAILogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDLogsSignalError(OAILogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDMembersSignalError() instead")
    void getTasksIDMembersSignalE(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDMembersSignalError(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDOwnersSignalError() instead")
    void getTasksIDOwnersSignalE(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDOwnersSignalError(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDRunsSignalError() instead")
    void getTasksIDRunsSignalE(OAIRuns summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDRunsSignalError(OAIRuns summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDRunsIDSignalError() instead")
    void getTasksIDRunsIDSignalE(OAIRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDRunsIDSignalError(OAIRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDRunsIDLogsSignalError() instead")
    void getTasksIDRunsIDLogsSignalE(OAILogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDRunsIDLogsSignalError(OAILogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchTasksIDSignalError() instead")
    void patchTasksIDSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchTasksIDSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksSignalError() instead")
    void postTasksSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDLabelsSignalError() instead")
    void postTasksIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDMembersSignalError() instead")
    void postTasksIDMembersSignalE(OAIResourceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDMembersSignalError(OAIResourceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDOwnersSignalError() instead")
    void postTasksIDOwnersSignalE(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDOwnersSignalError(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDRunsSignalError() instead")
    void postTasksIDRunsSignalE(OAIRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDRunsSignalError(OAIRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDRunsIDRetrySignalError() instead")
    void postTasksIDRunsIDRetrySignalE(OAIRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDRunsIDRetrySignalError(OAIRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteTasksIDSignalErrorFull() instead")
    void deleteTasksIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksIDLabelsIDSignalErrorFull() instead")
    void deleteTasksIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksIDMembersIDSignalErrorFull() instead")
    void deleteTasksIDMembersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDMembersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksIDOwnersIDSignalErrorFull() instead")
    void deleteTasksIDOwnersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDOwnersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksIDRunsIDSignalErrorFull() instead")
    void deleteTasksIDRunsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksIDRunsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksSignalErrorFull() instead")
    void getTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDSignalErrorFull() instead")
    void getTasksIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDLabelsSignalErrorFull() instead")
    void getTasksIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDLogsSignalErrorFull() instead")
    void getTasksIDLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDMembersSignalErrorFull() instead")
    void getTasksIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDOwnersSignalErrorFull() instead")
    void getTasksIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDRunsSignalErrorFull() instead")
    void getTasksIDRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDRunsIDSignalErrorFull() instead")
    void getTasksIDRunsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDRunsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksIDRunsIDLogsSignalErrorFull() instead")
    void getTasksIDRunsIDLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksIDRunsIDLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchTasksIDSignalErrorFull() instead")
    void patchTasksIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchTasksIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksSignalErrorFull() instead")
    void postTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDLabelsSignalErrorFull() instead")
    void postTasksIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDMembersSignalErrorFull() instead")
    void postTasksIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDOwnersSignalErrorFull() instead")
    void postTasksIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDRunsSignalErrorFull() instead")
    void postTasksIDRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTasksIDRunsIDRetrySignalErrorFull() instead")
    void postTasksIDRunsIDRetrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTasksIDRunsIDRetrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
