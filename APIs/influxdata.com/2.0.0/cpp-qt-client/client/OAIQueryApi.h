/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueryApi_H
#define OAI_OAIQueryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIASTResponse.h"
#include "OAIAnalyzeQueryResponse.h"
#include "OAIError.h"
#include "OAIFluxSuggestion.h"
#include "OAIFluxSuggestions.h"
#include "OAIHttpFileElement.h"
#include "OAILanguageRequest.h"
#include "OAIPostQuery_request.h"
#include "OAIQuery.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueryApi : public QObject {
    Q_OBJECT

public:
    OAIQueryApi(const int timeOut = 0);
    ~OAIQueryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getQuerySuggestions(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getQuerySuggestionsName(const QString &name, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  accept_encoding QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  org QString [optional]
    * @param[in]  org_id QString [optional]
    * @param[in]  oai_post_query_request OAIPostQuery_request [optional]
    */
    virtual void postQuery(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPostQuery_request> &oai_post_query_request = ::OpenAPI::OptionalParam<OAIPostQuery_request>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  oai_query OAIQuery [optional]
    */
    virtual void postQueryAnalyze(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIQuery> &oai_query = ::OpenAPI::OptionalParam<OAIQuery>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  oai_language_request OAILanguageRequest [optional]
    */
    virtual void postQueryAst(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILanguageRequest> &oai_language_request = ::OpenAPI::OptionalParam<OAILanguageRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getQuerySuggestionsCallback(OAIHttpRequestWorker *worker);
    void getQuerySuggestionsNameCallback(OAIHttpRequestWorker *worker);
    void postQueryCallback(OAIHttpRequestWorker *worker);
    void postQueryAnalyzeCallback(OAIHttpRequestWorker *worker);
    void postQueryAstCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getQuerySuggestionsSignal(OAIFluxSuggestions summary);
    void getQuerySuggestionsNameSignal(OAIFluxSuggestion summary);
    void postQuerySignal(OAIHttpFileElement summary);
    void postQueryAnalyzeSignal(OAIAnalyzeQueryResponse summary);
    void postQueryAstSignal(OAIASTResponse summary);


    void getQuerySuggestionsSignalFull(OAIHttpRequestWorker *worker, OAIFluxSuggestions summary);
    void getQuerySuggestionsNameSignalFull(OAIHttpRequestWorker *worker, OAIFluxSuggestion summary);
    void postQuerySignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void postQueryAnalyzeSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeQueryResponse summary);
    void postQueryAstSignalFull(OAIHttpRequestWorker *worker, OAIASTResponse summary);

    Q_DECL_DEPRECATED_X("Use getQuerySuggestionsSignalError() instead")
    void getQuerySuggestionsSignalE(OAIFluxSuggestions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySuggestionsSignalError(OAIFluxSuggestions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuerySuggestionsNameSignalError() instead")
    void getQuerySuggestionsNameSignalE(OAIFluxSuggestion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySuggestionsNameSignalError(OAIFluxSuggestion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQuerySignalError() instead")
    void postQuerySignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postQuerySignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQueryAnalyzeSignalError() instead")
    void postQueryAnalyzeSignalE(OAIAnalyzeQueryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postQueryAnalyzeSignalError(OAIAnalyzeQueryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQueryAstSignalError() instead")
    void postQueryAstSignalE(OAIASTResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postQueryAstSignalError(OAIASTResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getQuerySuggestionsSignalErrorFull() instead")
    void getQuerySuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuerySuggestionsNameSignalErrorFull() instead")
    void getQuerySuggestionsNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySuggestionsNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQuerySignalErrorFull() instead")
    void postQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQueryAnalyzeSignalErrorFull() instead")
    void postQueryAnalyzeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postQueryAnalyzeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQueryAstSignalErrorFull() instead")
    void postQueryAstSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postQueryAstSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
