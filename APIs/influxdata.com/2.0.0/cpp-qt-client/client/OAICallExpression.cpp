/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallExpression::OAICallExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallExpression::OAICallExpression() {
    this->initializeModel();
}

OAICallExpression::~OAICallExpression() {}

void OAICallExpression::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_callee_isSet = false;
    m_callee_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICallExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallExpression::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_callee_isValid = ::OpenAPI::fromJsonValue(m_callee, json[QString("callee")]);
    m_callee_isSet = !json[QString("callee")].isNull() && m_callee_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICallExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_callee.isSet()) {
        obj.insert(QString("callee"), ::OpenAPI::toJsonValue(m_callee));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIExpression> OAICallExpression::getArguments() const {
    return m_arguments;
}
void OAICallExpression::setArguments(const QList<OAIExpression> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAICallExpression::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAICallExpression::is_arguments_Valid() const{
    return m_arguments_isValid;
}

OAIExpression OAICallExpression::getCallee() const {
    return m_callee;
}
void OAICallExpression::setCallee(const OAIExpression &callee) {
    m_callee = callee;
    m_callee_isSet = true;
}

bool OAICallExpression::is_callee_Set() const{
    return m_callee_isSet;
}

bool OAICallExpression::is_callee_Valid() const{
    return m_callee_isValid;
}

QString OAICallExpression::getType() const {
    return m_type;
}
void OAICallExpression::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICallExpression::is_type_Set() const{
    return m_type_isSet;
}

bool OAICallExpression::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICallExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_callee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
