/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutes_system.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutes_system::OAIRoutes_system(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutes_system::OAIRoutes_system() {
    this->initializeModel();
}

OAIRoutes_system::~OAIRoutes_system() {}

void OAIRoutes_system::initializeModel() {

    m_debug_isSet = false;
    m_debug_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIRoutes_system::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutes_system::fromJsonObject(QJsonObject json) {

    m_debug_isValid = ::OpenAPI::fromJsonValue(m_debug, json[QString("debug")]);
    m_debug_isSet = !json[QString("debug")].isNull() && m_debug_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIRoutes_system::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutes_system::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_isSet) {
        obj.insert(QString("debug"), ::OpenAPI::toJsonValue(m_debug));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_metrics_isSet) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QString OAIRoutes_system::getDebug() const {
    return m_debug;
}
void OAIRoutes_system::setDebug(const QString &debug) {
    m_debug = debug;
    m_debug_isSet = true;
}

bool OAIRoutes_system::is_debug_Set() const{
    return m_debug_isSet;
}

bool OAIRoutes_system::is_debug_Valid() const{
    return m_debug_isValid;
}

QString OAIRoutes_system::getHealth() const {
    return m_health;
}
void OAIRoutes_system::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIRoutes_system::is_health_Set() const{
    return m_health_isSet;
}

bool OAIRoutes_system::is_health_Valid() const{
    return m_health_isValid;
}

QString OAIRoutes_system::getMetrics() const {
    return m_metrics;
}
void OAIRoutes_system::setMetrics(const QString &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIRoutes_system::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIRoutes_system::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIRoutes_system::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutes_system::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
