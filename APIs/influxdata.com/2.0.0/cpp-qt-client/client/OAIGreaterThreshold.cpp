/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGreaterThreshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGreaterThreshold::OAIGreaterThreshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGreaterThreshold::OAIGreaterThreshold() {
    this->initializeModel();
}

OAIGreaterThreshold::~OAIGreaterThreshold() {}

void OAIGreaterThreshold::initializeModel() {

    m_all_values_isSet = false;
    m_all_values_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGreaterThreshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGreaterThreshold::fromJsonObject(QJsonObject json) {

    m_all_values_isValid = ::OpenAPI::fromJsonValue(m_all_values, json[QString("allValues")]);
    m_all_values_isSet = !json[QString("allValues")].isNull() && m_all_values_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGreaterThreshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGreaterThreshold::asJsonObject() const {
    QJsonObject obj;
    if (m_all_values_isSet) {
        obj.insert(QString("allValues"), ::OpenAPI::toJsonValue(m_all_values));
    }
    if (m_level.isSet()) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIGreaterThreshold::isAllValues() const {
    return m_all_values;
}
void OAIGreaterThreshold::setAllValues(const bool &all_values) {
    m_all_values = all_values;
    m_all_values_isSet = true;
}

bool OAIGreaterThreshold::is_all_values_Set() const{
    return m_all_values_isSet;
}

bool OAIGreaterThreshold::is_all_values_Valid() const{
    return m_all_values_isValid;
}

OAICheckStatusLevel OAIGreaterThreshold::getLevel() const {
    return m_level;
}
void OAIGreaterThreshold::setLevel(const OAICheckStatusLevel &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIGreaterThreshold::is_level_Set() const{
    return m_level_isSet;
}

bool OAIGreaterThreshold::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIGreaterThreshold::getType() const {
    return m_type;
}
void OAIGreaterThreshold::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGreaterThreshold::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGreaterThreshold::is_type_Valid() const{
    return m_type_isValid;
}

float OAIGreaterThreshold::getValue() const {
    return m_value;
}
void OAIGreaterThreshold::setValue(const float &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGreaterThreshold::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGreaterThreshold::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGreaterThreshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGreaterThreshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
