/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStack_events_inner_resources_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStack_events_inner_resources_inner::OAIStack_events_inner_resources_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStack_events_inner_resources_inner::OAIStack_events_inner_resources_inner() {
    this->initializeModel();
}

OAIStack_events_inner_resources_inner::~OAIStack_events_inner_resources_inner() {}

void OAIStack_events_inner_resources_inner::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_associations_isSet = false;
    m_associations_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_template_meta_name_isSet = false;
    m_template_meta_name_isValid = false;
}

void OAIStack_events_inner_resources_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStack_events_inner_resources_inner::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_associations_isValid = ::OpenAPI::fromJsonValue(m_associations, json[QString("associations")]);
    m_associations_isSet = !json[QString("associations")].isNull() && m_associations_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceID")]);
    m_resource_id_isSet = !json[QString("resourceID")].isNull() && m_resource_id_isValid;

    m_template_meta_name_isValid = ::OpenAPI::fromJsonValue(m_template_meta_name, json[QString("templateMetaName")]);
    m_template_meta_name_isSet = !json[QString("templateMetaName")].isNull() && m_template_meta_name_isValid;
}

QString OAIStack_events_inner_resources_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStack_events_inner_resources_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_associations.size() > 0) {
        obj.insert(QString("associations"), ::OpenAPI::toJsonValue(m_associations));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceID"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_template_meta_name_isSet) {
        obj.insert(QString("templateMetaName"), ::OpenAPI::toJsonValue(m_template_meta_name));
    }
    return obj;
}

QString OAIStack_events_inner_resources_inner::getApiVersion() const {
    return m_api_version;
}
void OAIStack_events_inner_resources_inner::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIStack_events_inner_resources_inner::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIStack_events_inner_resources_inner::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QList<OAIStack_events_inner_resources_inner_associations_inner> OAIStack_events_inner_resources_inner::getAssociations() const {
    return m_associations;
}
void OAIStack_events_inner_resources_inner::setAssociations(const QList<OAIStack_events_inner_resources_inner_associations_inner> &associations) {
    m_associations = associations;
    m_associations_isSet = true;
}

bool OAIStack_events_inner_resources_inner::is_associations_Set() const{
    return m_associations_isSet;
}

bool OAIStack_events_inner_resources_inner::is_associations_Valid() const{
    return m_associations_isValid;
}

OAITemplateKind OAIStack_events_inner_resources_inner::getKind() const {
    return m_kind;
}
void OAIStack_events_inner_resources_inner::setKind(const OAITemplateKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIStack_events_inner_resources_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIStack_events_inner_resources_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIStack_events_inner_resources_inner_links OAIStack_events_inner_resources_inner::getLinks() const {
    return m_links;
}
void OAIStack_events_inner_resources_inner::setLinks(const OAIStack_events_inner_resources_inner_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIStack_events_inner_resources_inner::is_links_Set() const{
    return m_links_isSet;
}

bool OAIStack_events_inner_resources_inner::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIStack_events_inner_resources_inner::getResourceId() const {
    return m_resource_id;
}
void OAIStack_events_inner_resources_inner::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIStack_events_inner_resources_inner::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIStack_events_inner_resources_inner::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIStack_events_inner_resources_inner::getTemplateMetaName() const {
    return m_template_meta_name;
}
void OAIStack_events_inner_resources_inner::setTemplateMetaName(const QString &template_meta_name) {
    m_template_meta_name = template_meta_name;
    m_template_meta_name_isSet = true;
}

bool OAIStack_events_inner_resources_inner::is_template_meta_name_Set() const{
    return m_template_meta_name_isSet;
}

bool OAIStack_events_inner_resources_inner::is_template_meta_name_Valid() const{
    return m_template_meta_name_isValid;
}

bool OAIStack_events_inner_resources_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_meta_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStack_events_inner_resources_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
