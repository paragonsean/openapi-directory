/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStaticLegend.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStaticLegend::OAIStaticLegend(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStaticLegend::OAIStaticLegend() {
    this->initializeModel();
}

OAIStaticLegend::~OAIStaticLegend() {}

void OAIStaticLegend::initializeModel() {

    m_colorize_rows_isSet = false;
    m_colorize_rows_isValid = false;

    m_height_ratio_isSet = false;
    m_height_ratio_isValid = false;

    m_hide_isSet = false;
    m_hide_isValid = false;

    m_opacity_isSet = false;
    m_opacity_isValid = false;

    m_orientation_threshold_isSet = false;
    m_orientation_threshold_isValid = false;

    m_value_axis_isSet = false;
    m_value_axis_isValid = false;

    m_width_ratio_isSet = false;
    m_width_ratio_isValid = false;
}

void OAIStaticLegend::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStaticLegend::fromJsonObject(QJsonObject json) {

    m_colorize_rows_isValid = ::OpenAPI::fromJsonValue(m_colorize_rows, json[QString("colorizeRows")]);
    m_colorize_rows_isSet = !json[QString("colorizeRows")].isNull() && m_colorize_rows_isValid;

    m_height_ratio_isValid = ::OpenAPI::fromJsonValue(m_height_ratio, json[QString("heightRatio")]);
    m_height_ratio_isSet = !json[QString("heightRatio")].isNull() && m_height_ratio_isValid;

    m_hide_isValid = ::OpenAPI::fromJsonValue(m_hide, json[QString("hide")]);
    m_hide_isSet = !json[QString("hide")].isNull() && m_hide_isValid;

    m_opacity_isValid = ::OpenAPI::fromJsonValue(m_opacity, json[QString("opacity")]);
    m_opacity_isSet = !json[QString("opacity")].isNull() && m_opacity_isValid;

    m_orientation_threshold_isValid = ::OpenAPI::fromJsonValue(m_orientation_threshold, json[QString("orientationThreshold")]);
    m_orientation_threshold_isSet = !json[QString("orientationThreshold")].isNull() && m_orientation_threshold_isValid;

    m_value_axis_isValid = ::OpenAPI::fromJsonValue(m_value_axis, json[QString("valueAxis")]);
    m_value_axis_isSet = !json[QString("valueAxis")].isNull() && m_value_axis_isValid;

    m_width_ratio_isValid = ::OpenAPI::fromJsonValue(m_width_ratio, json[QString("widthRatio")]);
    m_width_ratio_isSet = !json[QString("widthRatio")].isNull() && m_width_ratio_isValid;
}

QString OAIStaticLegend::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStaticLegend::asJsonObject() const {
    QJsonObject obj;
    if (m_colorize_rows_isSet) {
        obj.insert(QString("colorizeRows"), ::OpenAPI::toJsonValue(m_colorize_rows));
    }
    if (m_height_ratio_isSet) {
        obj.insert(QString("heightRatio"), ::OpenAPI::toJsonValue(m_height_ratio));
    }
    if (m_hide_isSet) {
        obj.insert(QString("hide"), ::OpenAPI::toJsonValue(m_hide));
    }
    if (m_opacity_isSet) {
        obj.insert(QString("opacity"), ::OpenAPI::toJsonValue(m_opacity));
    }
    if (m_orientation_threshold_isSet) {
        obj.insert(QString("orientationThreshold"), ::OpenAPI::toJsonValue(m_orientation_threshold));
    }
    if (m_value_axis_isSet) {
        obj.insert(QString("valueAxis"), ::OpenAPI::toJsonValue(m_value_axis));
    }
    if (m_width_ratio_isSet) {
        obj.insert(QString("widthRatio"), ::OpenAPI::toJsonValue(m_width_ratio));
    }
    return obj;
}

bool OAIStaticLegend::isColorizeRows() const {
    return m_colorize_rows;
}
void OAIStaticLegend::setColorizeRows(const bool &colorize_rows) {
    m_colorize_rows = colorize_rows;
    m_colorize_rows_isSet = true;
}

bool OAIStaticLegend::is_colorize_rows_Set() const{
    return m_colorize_rows_isSet;
}

bool OAIStaticLegend::is_colorize_rows_Valid() const{
    return m_colorize_rows_isValid;
}

float OAIStaticLegend::getHeightRatio() const {
    return m_height_ratio;
}
void OAIStaticLegend::setHeightRatio(const float &height_ratio) {
    m_height_ratio = height_ratio;
    m_height_ratio_isSet = true;
}

bool OAIStaticLegend::is_height_ratio_Set() const{
    return m_height_ratio_isSet;
}

bool OAIStaticLegend::is_height_ratio_Valid() const{
    return m_height_ratio_isValid;
}

bool OAIStaticLegend::isHide() const {
    return m_hide;
}
void OAIStaticLegend::setHide(const bool &hide) {
    m_hide = hide;
    m_hide_isSet = true;
}

bool OAIStaticLegend::is_hide_Set() const{
    return m_hide_isSet;
}

bool OAIStaticLegend::is_hide_Valid() const{
    return m_hide_isValid;
}

float OAIStaticLegend::getOpacity() const {
    return m_opacity;
}
void OAIStaticLegend::setOpacity(const float &opacity) {
    m_opacity = opacity;
    m_opacity_isSet = true;
}

bool OAIStaticLegend::is_opacity_Set() const{
    return m_opacity_isSet;
}

bool OAIStaticLegend::is_opacity_Valid() const{
    return m_opacity_isValid;
}

qint32 OAIStaticLegend::getOrientationThreshold() const {
    return m_orientation_threshold;
}
void OAIStaticLegend::setOrientationThreshold(const qint32 &orientation_threshold) {
    m_orientation_threshold = orientation_threshold;
    m_orientation_threshold_isSet = true;
}

bool OAIStaticLegend::is_orientation_threshold_Set() const{
    return m_orientation_threshold_isSet;
}

bool OAIStaticLegend::is_orientation_threshold_Valid() const{
    return m_orientation_threshold_isValid;
}

QString OAIStaticLegend::getValueAxis() const {
    return m_value_axis;
}
void OAIStaticLegend::setValueAxis(const QString &value_axis) {
    m_value_axis = value_axis;
    m_value_axis_isSet = true;
}

bool OAIStaticLegend::is_value_axis_Set() const{
    return m_value_axis_isSet;
}

bool OAIStaticLegend::is_value_axis_Valid() const{
    return m_value_axis_isValid;
}

float OAIStaticLegend::getWidthRatio() const {
    return m_width_ratio;
}
void OAIStaticLegend::setWidthRatio(const float &width_ratio) {
    m_width_ratio = width_ratio;
    m_width_ratio_isSet = true;
}

bool OAIStaticLegend::is_width_ratio_Set() const{
    return m_width_ratio_isSet;
}

bool OAIStaticLegend::is_width_ratio_Valid() const{
    return m_width_ratio_isValid;
}

bool OAIStaticLegend::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colorize_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_axis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStaticLegend::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
