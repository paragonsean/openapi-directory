/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINode::OAINode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINode::OAINode() {
    this->initializeModel();
}

OAINode::~OAINode() {}

void OAINode::initializeModel() {

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_callee_isSet = false;
    m_callee_isValid = false;

    m_alternate_isSet = false;
    m_alternate_isValid = false;

    m_consequent_isSet = false;
    m_consequent_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_array_isSet = false;
    m_array_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_argument_isSet = false;
    m_argument_isValid = false;

    m_call_isSet = false;
    m_call_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAINode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINode::fromJsonObject(QJsonObject json) {

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_right_isValid = ::OpenAPI::fromJsonValue(m_right, json[QString("right")]);
    m_right_isSet = !json[QString("right")].isNull() && m_right_isValid;

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_callee_isValid = ::OpenAPI::fromJsonValue(m_callee, json[QString("callee")]);
    m_callee_isSet = !json[QString("callee")].isNull() && m_callee_isValid;

    m_alternate_isValid = ::OpenAPI::fromJsonValue(m_alternate, json[QString("alternate")]);
    m_alternate_isSet = !json[QString("alternate")].isNull() && m_alternate_isValid;

    m_consequent_isValid = ::OpenAPI::fromJsonValue(m_consequent, json[QString("consequent")]);
    m_consequent_isSet = !json[QString("consequent")].isNull() && m_consequent_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_array_isValid = ::OpenAPI::fromJsonValue(m_array, json[QString("array")]);
    m_array_isSet = !json[QString("array")].isNull() && m_array_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_argument_isValid = ::OpenAPI::fromJsonValue(m_argument, json[QString("argument")]);
    m_argument_isSet = !json[QString("argument")].isNull() && m_argument_isValid;

    m_call_isValid = ::OpenAPI::fromJsonValue(m_call, json[QString("call")]);
    m_call_isSet = !json[QString("call")].isNull() && m_call_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAINode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINode::asJsonObject() const {
    QJsonObject obj;
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_body.size() > 0) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_left.isSet()) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_right.isSet()) {
        obj.insert(QString("right"), ::OpenAPI::toJsonValue(m_right));
    }
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_callee.isSet()) {
        obj.insert(QString("callee"), ::OpenAPI::toJsonValue(m_callee));
    }
    if (m_alternate.isSet()) {
        obj.insert(QString("alternate"), ::OpenAPI::toJsonValue(m_alternate));
    }
    if (m_consequent.isSet()) {
        obj.insert(QString("consequent"), ::OpenAPI::toJsonValue(m_consequent));
    }
    if (m_test.isSet()) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_property.isSet()) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_array.isSet()) {
        obj.insert(QString("array"), ::OpenAPI::toJsonValue(m_array));
    }
    if (m_index.isSet()) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_expression.isSet()) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_argument.isSet()) {
        obj.insert(QString("argument"), ::OpenAPI::toJsonValue(m_argument));
    }
    if (m_call.isSet()) {
        obj.insert(QString("call"), ::OpenAPI::toJsonValue(m_call));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAIDictItem> OAINode::getElements() const {
    return m_elements;
}
void OAINode::setElements(const QList<OAIDictItem> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAINode::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAINode::is_elements_Valid() const{
    return m_elements_isValid;
}

QString OAINode::getType() const {
    return m_type;
}
void OAINode::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINode::is_type_Set() const{
    return m_type_isSet;
}

bool OAINode::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIStatement> OAINode::getBody() const {
    return m_body;
}
void OAINode::setBody(const QList<OAIStatement> &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINode::is_body_Set() const{
    return m_body_isSet;
}

bool OAINode::is_body_Valid() const{
    return m_body_isValid;
}

QList<OAIProperty> OAINode::getParams() const {
    return m_params;
}
void OAINode::setParams(const QList<OAIProperty> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAINode::is_params_Set() const{
    return m_params_isSet;
}

bool OAINode::is_params_Valid() const{
    return m_params_isValid;
}

OAIExpression OAINode::getLeft() const {
    return m_left;
}
void OAINode::setLeft(const OAIExpression &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAINode::is_left_Set() const{
    return m_left_isSet;
}

bool OAINode::is_left_Valid() const{
    return m_left_isValid;
}

QString OAINode::getROperator() const {
    return m_r_operator;
}
void OAINode::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAINode::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAINode::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

OAIExpression OAINode::getRight() const {
    return m_right;
}
void OAINode::setRight(const OAIExpression &right) {
    m_right = right;
    m_right_isSet = true;
}

bool OAINode::is_right_Set() const{
    return m_right_isSet;
}

bool OAINode::is_right_Valid() const{
    return m_right_isValid;
}

QList<OAIExpression> OAINode::getArguments() const {
    return m_arguments;
}
void OAINode::setArguments(const QList<OAIExpression> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAINode::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAINode::is_arguments_Valid() const{
    return m_arguments_isValid;
}

OAIExpression OAINode::getCallee() const {
    return m_callee;
}
void OAINode::setCallee(const OAIExpression &callee) {
    m_callee = callee;
    m_callee_isSet = true;
}

bool OAINode::is_callee_Set() const{
    return m_callee_isSet;
}

bool OAINode::is_callee_Valid() const{
    return m_callee_isValid;
}

OAIExpression OAINode::getAlternate() const {
    return m_alternate;
}
void OAINode::setAlternate(const OAIExpression &alternate) {
    m_alternate = alternate;
    m_alternate_isSet = true;
}

bool OAINode::is_alternate_Set() const{
    return m_alternate_isSet;
}

bool OAINode::is_alternate_Valid() const{
    return m_alternate_isValid;
}

OAIExpression OAINode::getConsequent() const {
    return m_consequent;
}
void OAINode::setConsequent(const OAIExpression &consequent) {
    m_consequent = consequent;
    m_consequent_isSet = true;
}

bool OAINode::is_consequent_Set() const{
    return m_consequent_isSet;
}

bool OAINode::is_consequent_Valid() const{
    return m_consequent_isValid;
}

OAIExpression OAINode::getTest() const {
    return m_test;
}
void OAINode::setTest(const OAIExpression &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAINode::is_test_Set() const{
    return m_test_isSet;
}

bool OAINode::is_test_Valid() const{
    return m_test_isValid;
}

OAIExpression OAINode::getObject() const {
    return m_object;
}
void OAINode::setObject(const OAIExpression &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAINode::is_object_Set() const{
    return m_object_isSet;
}

bool OAINode::is_object_Valid() const{
    return m_object_isValid;
}

OAIPropertyKey OAINode::getProperty() const {
    return m_property;
}
void OAINode::setProperty(const OAIPropertyKey &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAINode::is_property_Set() const{
    return m_property_isSet;
}

bool OAINode::is_property_Valid() const{
    return m_property_isValid;
}

OAIExpression OAINode::getArray() const {
    return m_array;
}
void OAINode::setArray(const OAIExpression &array) {
    m_array = array;
    m_array_isSet = true;
}

bool OAINode::is_array_Set() const{
    return m_array_isSet;
}

bool OAINode::is_array_Valid() const{
    return m_array_isValid;
}

OAIExpression OAINode::getIndex() const {
    return m_index;
}
void OAINode::setIndex(const OAIExpression &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAINode::is_index_Set() const{
    return m_index_isSet;
}

bool OAINode::is_index_Valid() const{
    return m_index_isValid;
}

QList<OAIProperty> OAINode::getProperties() const {
    return m_properties;
}
void OAINode::setProperties(const QList<OAIProperty> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAINode::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAINode::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIExpression OAINode::getExpression() const {
    return m_expression;
}
void OAINode::setExpression(const OAIExpression &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAINode::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAINode::is_expression_Valid() const{
    return m_expression_isValid;
}

OAIExpression OAINode::getArgument() const {
    return m_argument;
}
void OAINode::setArgument(const OAIExpression &argument) {
    m_argument = argument;
    m_argument_isSet = true;
}

bool OAINode::is_argument_Set() const{
    return m_argument_isSet;
}

bool OAINode::is_argument_Valid() const{
    return m_argument_isValid;
}

OAICallExpression OAINode::getCall() const {
    return m_call;
}
void OAINode::setCall(const OAICallExpression &call) {
    m_call = call;
    m_call_isSet = true;
}

bool OAINode::is_call_Set() const{
    return m_call_isSet;
}

bool OAINode::is_call_Valid() const{
    return m_call_isValid;
}

QString OAINode::getValue() const {
    return m_value;
}
void OAINode::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAINode::is_value_Set() const{
    return m_value_isSet;
}

bool OAINode::is_value_Valid() const{
    return m_value_isValid;
}

QList<OAIDuration> OAINode::getValues() const {
    return m_values;
}
void OAINode::setValues(const QList<OAIDuration> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAINode::is_values_Set() const{
    return m_values_isSet;
}

bool OAINode::is_values_Valid() const{
    return m_values_isValid;
}

QString OAINode::getName() const {
    return m_name;
}
void OAINode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINode::is_name_Set() const{
    return m_name_isSet;
}

bool OAINode::is_name_Valid() const{
    return m_name_isValid;
}

bool OAINode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_callee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consequent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_array.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_argument.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
