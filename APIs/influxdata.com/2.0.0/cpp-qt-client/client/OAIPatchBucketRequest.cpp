/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchBucketRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchBucketRequest::OAIPatchBucketRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchBucketRequest::OAIPatchBucketRequest() {
    this->initializeModel();
}

OAIPatchBucketRequest::~OAIPatchBucketRequest() {}

void OAIPatchBucketRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_retention_rules_isSet = false;
    m_retention_rules_isValid = false;
}

void OAIPatchBucketRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchBucketRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_retention_rules_isValid = ::OpenAPI::fromJsonValue(m_retention_rules, json[QString("retentionRules")]);
    m_retention_rules_isSet = !json[QString("retentionRules")].isNull() && m_retention_rules_isValid;
}

QString OAIPatchBucketRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchBucketRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_retention_rules.size() > 0) {
        obj.insert(QString("retentionRules"), ::OpenAPI::toJsonValue(m_retention_rules));
    }
    return obj;
}

QString OAIPatchBucketRequest::getDescription() const {
    return m_description;
}
void OAIPatchBucketRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPatchBucketRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPatchBucketRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPatchBucketRequest::getName() const {
    return m_name;
}
void OAIPatchBucketRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPatchBucketRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPatchBucketRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPatchRetentionRule> OAIPatchBucketRequest::getRetentionRules() const {
    return m_retention_rules;
}
void OAIPatchBucketRequest::setRetentionRules(const QList<OAIPatchRetentionRule> &retention_rules) {
    m_retention_rules = retention_rules;
    m_retention_rules_isSet = true;
}

bool OAIPatchBucketRequest::is_retention_rules_Set() const{
    return m_retention_rules_isSet;
}

bool OAIPatchBucketRequest::is_retention_rules_Valid() const{
    return m_retention_rules_isValid;
}

bool OAIPatchBucketRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchBucketRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
