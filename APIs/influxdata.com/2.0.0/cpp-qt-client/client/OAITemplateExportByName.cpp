/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateExportByName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateExportByName::OAITemplateExportByName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateExportByName::OAITemplateExportByName() {
    this->initializeModel();
}

OAITemplateExportByName::~OAITemplateExportByName() {}

void OAITemplateExportByName::initializeModel() {

    m_org_ids_isSet = false;
    m_org_ids_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;
}

void OAITemplateExportByName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateExportByName::fromJsonObject(QJsonObject json) {

    m_org_ids_isValid = ::OpenAPI::fromJsonValue(m_org_ids, json[QString("orgIDs")]);
    m_org_ids_isSet = !json[QString("orgIDs")].isNull() && m_org_ids_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("stackID")]);
    m_stack_id_isSet = !json[QString("stackID")].isNull() && m_stack_id_isValid;
}

QString OAITemplateExportByName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateExportByName::asJsonObject() const {
    QJsonObject obj;
    if (m_org_ids.size() > 0) {
        obj.insert(QString("orgIDs"), ::OpenAPI::toJsonValue(m_org_ids));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("stackID"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    return obj;
}

QList<OAITemplateExportByID_orgIDs_inner> OAITemplateExportByName::getOrgIds() const {
    return m_org_ids;
}
void OAITemplateExportByName::setOrgIds(const QList<OAITemplateExportByID_orgIDs_inner> &org_ids) {
    m_org_ids = org_ids;
    m_org_ids_isSet = true;
}

bool OAITemplateExportByName::is_org_ids_Set() const{
    return m_org_ids_isSet;
}

bool OAITemplateExportByName::is_org_ids_Valid() const{
    return m_org_ids_isValid;
}

OAITemplateExportByName_resources OAITemplateExportByName::getResources() const {
    return m_resources;
}
void OAITemplateExportByName::setResources(const OAITemplateExportByName_resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAITemplateExportByName::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAITemplateExportByName::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAITemplateExportByName::getStackId() const {
    return m_stack_id;
}
void OAITemplateExportByName::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAITemplateExportByName::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAITemplateExportByName::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

bool OAITemplateExportByName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_org_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateExportByName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
