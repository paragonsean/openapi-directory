/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStack::OAIStack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStack::OAIStack() {
    this->initializeModel();
}

OAIStack::~OAIStack() {}

void OAIStack::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;
}

void OAIStack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStack::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;
}

QString OAIStack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStack::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    return obj;
}

QDateTime OAIStack::getCreatedAt() const {
    return m_created_at;
}
void OAIStack::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStack::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStack::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIStack_events_inner> OAIStack::getEvents() const {
    return m_events;
}
void OAIStack::setEvents(const QList<OAIStack_events_inner> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIStack::is_events_Set() const{
    return m_events_isSet;
}

bool OAIStack::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIStack::getId() const {
    return m_id;
}
void OAIStack::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStack::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStack::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStack::getOrgId() const {
    return m_org_id;
}
void OAIStack::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIStack::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIStack::is_org_id_Valid() const{
    return m_org_id_isValid;
}

bool OAIStack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStack::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
