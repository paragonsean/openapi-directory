/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBRP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBRP::OAIDBRP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBRP::OAIDBRP() {
    this->initializeModel();
}

OAIDBRP::~OAIDBRP() {}

void OAIDBRP::initializeModel() {

    m_bucket_id_isSet = false;
    m_bucket_id_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_retention_policy_isSet = false;
    m_retention_policy_isValid = false;
}

void OAIDBRP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBRP::fromJsonObject(QJsonObject json) {

    m_bucket_id_isValid = ::OpenAPI::fromJsonValue(m_bucket_id, json[QString("bucketID")]);
    m_bucket_id_isSet = !json[QString("bucketID")].isNull() && m_bucket_id_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_retention_policy_isValid = ::OpenAPI::fromJsonValue(m_retention_policy, json[QString("retention_policy")]);
    m_retention_policy_isSet = !json[QString("retention_policy")].isNull() && m_retention_policy_isValid;
}

QString OAIDBRP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBRP::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_id_isSet) {
        obj.insert(QString("bucketID"), ::OpenAPI::toJsonValue(m_bucket_id));
    }
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_retention_policy_isSet) {
        obj.insert(QString("retention_policy"), ::OpenAPI::toJsonValue(m_retention_policy));
    }
    return obj;
}

QString OAIDBRP::getBucketId() const {
    return m_bucket_id;
}
void OAIDBRP::setBucketId(const QString &bucket_id) {
    m_bucket_id = bucket_id;
    m_bucket_id_isSet = true;
}

bool OAIDBRP::is_bucket_id_Set() const{
    return m_bucket_id_isSet;
}

bool OAIDBRP::is_bucket_id_Valid() const{
    return m_bucket_id_isValid;
}

QString OAIDBRP::getDatabase() const {
    return m_database;
}
void OAIDBRP::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIDBRP::is_database_Set() const{
    return m_database_isSet;
}

bool OAIDBRP::is_database_Valid() const{
    return m_database_isValid;
}

bool OAIDBRP::isRDefault() const {
    return m_r_default;
}
void OAIDBRP::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIDBRP::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIDBRP::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIDBRP::getId() const {
    return m_id;
}
void OAIDBRP::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDBRP::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDBRP::is_id_Valid() const{
    return m_id_isValid;
}

OAILinks OAIDBRP::getLinks() const {
    return m_links;
}
void OAIDBRP::setLinks(const OAILinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDBRP::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDBRP::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIDBRP::getOrg() const {
    return m_org;
}
void OAIDBRP::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIDBRP::is_org_Set() const{
    return m_org_isSet;
}

bool OAIDBRP::is_org_Valid() const{
    return m_org_isValid;
}

QString OAIDBRP::getOrgId() const {
    return m_org_id;
}
void OAIDBRP::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIDBRP::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIDBRP::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIDBRP::getRetentionPolicy() const {
    return m_retention_policy;
}
void OAIDBRP::setRetentionPolicy(const QString &retention_policy) {
    m_retention_policy = retention_policy;
    m_retention_policy_isSet = true;
}

bool OAIDBRP::is_retention_policy_Set() const{
    return m_retention_policy_isSet;
}

bool OAIDBRP::is_retention_policy_Valid() const{
    return m_retention_policy_isValid;
}

bool OAIDBRP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBRP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
