/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorizationsApi_H
#define OAI_OAIAuthorizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthorization.h"
#include "OAIAuthorizationPostRequest.h"
#include "OAIAuthorizationUpdateRequest.h"
#include "OAIAuthorizations.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorizationsApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorizationsApi(const int timeOut = 0);
    ~OAIAuthorizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  auth_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteAuthorizationsID(const QString &auth_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  org_id QString [optional]
    * @param[in]  org QString [optional]
    */
    virtual void getAuthorizations(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getAuthorizationsID(const QString &auth_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_id QString [required]
    * @param[in]  oai_authorization_update_request OAIAuthorizationUpdateRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchAuthorizationsID(const QString &auth_id, const OAIAuthorizationUpdateRequest &oai_authorization_update_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_authorization_post_request OAIAuthorizationPostRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postAuthorizations(const OAIAuthorizationPostRequest &oai_authorization_post_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAuthorizationsIDCallback(OAIHttpRequestWorker *worker);
    void getAuthorizationsCallback(OAIHttpRequestWorker *worker);
    void getAuthorizationsIDCallback(OAIHttpRequestWorker *worker);
    void patchAuthorizationsIDCallback(OAIHttpRequestWorker *worker);
    void postAuthorizationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAuthorizationsIDSignal();
    void getAuthorizationsSignal(OAIAuthorizations summary);
    void getAuthorizationsIDSignal(OAIAuthorization summary);
    void patchAuthorizationsIDSignal(OAIAuthorization summary);
    void postAuthorizationsSignal(OAIAuthorization summary);


    void deleteAuthorizationsIDSignalFull(OAIHttpRequestWorker *worker);
    void getAuthorizationsSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizations summary);
    void getAuthorizationsIDSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void patchAuthorizationsIDSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void postAuthorizationsSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);

    Q_DECL_DEPRECATED_X("Use deleteAuthorizationsIDSignalError() instead")
    void deleteAuthorizationsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAuthorizationsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorizationsSignalError() instead")
    void getAuthorizationsSignalE(OAIAuthorizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorizationsSignalError(OAIAuthorizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorizationsIDSignalError() instead")
    void getAuthorizationsIDSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorizationsIDSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAuthorizationsIDSignalError() instead")
    void patchAuthorizationsIDSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAuthorizationsIDSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorizationsSignalError() instead")
    void postAuthorizationsSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorizationsSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAuthorizationsIDSignalErrorFull() instead")
    void deleteAuthorizationsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAuthorizationsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorizationsSignalErrorFull() instead")
    void getAuthorizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorizationsIDSignalErrorFull() instead")
    void getAuthorizationsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorizationsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAuthorizationsIDSignalErrorFull() instead")
    void patchAuthorizationsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAuthorizationsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorizationsSignalErrorFull() instead")
    void postAuthorizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
