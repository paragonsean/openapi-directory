/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGaugeViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGaugeViewProperties::OAIGaugeViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGaugeViewProperties::OAIGaugeViewProperties() {
    this->initializeModel();
}

OAIGaugeViewProperties::~OAIGaugeViewProperties() {}

void OAIGaugeViewProperties::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_decimal_places_isSet = false;
    m_decimal_places_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_show_note_when_empty_isSet = false;
    m_show_note_when_empty_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;

    m_tick_prefix_isSet = false;
    m_tick_prefix_isValid = false;

    m_tick_suffix_isSet = false;
    m_tick_suffix_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGaugeViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGaugeViewProperties::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_decimal_places_isValid = ::OpenAPI::fromJsonValue(m_decimal_places, json[QString("decimalPlaces")]);
    m_decimal_places_isSet = !json[QString("decimalPlaces")].isNull() && m_decimal_places_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_show_note_when_empty_isValid = ::OpenAPI::fromJsonValue(m_show_note_when_empty, json[QString("showNoteWhenEmpty")]);
    m_show_note_when_empty_isSet = !json[QString("showNoteWhenEmpty")].isNull() && m_show_note_when_empty_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("suffix")]);
    m_suffix_isSet = !json[QString("suffix")].isNull() && m_suffix_isValid;

    m_tick_prefix_isValid = ::OpenAPI::fromJsonValue(m_tick_prefix, json[QString("tickPrefix")]);
    m_tick_prefix_isSet = !json[QString("tickPrefix")].isNull() && m_tick_prefix_isValid;

    m_tick_suffix_isValid = ::OpenAPI::fromJsonValue(m_tick_suffix, json[QString("tickSuffix")]);
    m_tick_suffix_isSet = !json[QString("tickSuffix")].isNull() && m_tick_suffix_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGaugeViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGaugeViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_decimal_places.isSet()) {
        obj.insert(QString("decimalPlaces"), ::OpenAPI::toJsonValue(m_decimal_places));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_show_note_when_empty_isSet) {
        obj.insert(QString("showNoteWhenEmpty"), ::OpenAPI::toJsonValue(m_show_note_when_empty));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    if (m_tick_prefix_isSet) {
        obj.insert(QString("tickPrefix"), ::OpenAPI::toJsonValue(m_tick_prefix));
    }
    if (m_tick_suffix_isSet) {
        obj.insert(QString("tickSuffix"), ::OpenAPI::toJsonValue(m_tick_suffix));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIDashboardColor> OAIGaugeViewProperties::getColors() const {
    return m_colors;
}
void OAIGaugeViewProperties::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIGaugeViewProperties::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIGaugeViewProperties::is_colors_Valid() const{
    return m_colors_isValid;
}

OAIDecimalPlaces OAIGaugeViewProperties::getDecimalPlaces() const {
    return m_decimal_places;
}
void OAIGaugeViewProperties::setDecimalPlaces(const OAIDecimalPlaces &decimal_places) {
    m_decimal_places = decimal_places;
    m_decimal_places_isSet = true;
}

bool OAIGaugeViewProperties::is_decimal_places_Set() const{
    return m_decimal_places_isSet;
}

bool OAIGaugeViewProperties::is_decimal_places_Valid() const{
    return m_decimal_places_isValid;
}

QString OAIGaugeViewProperties::getNote() const {
    return m_note;
}
void OAIGaugeViewProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIGaugeViewProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIGaugeViewProperties::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIGaugeViewProperties::getPrefix() const {
    return m_prefix;
}
void OAIGaugeViewProperties::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIGaugeViewProperties::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIGaugeViewProperties::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QList<OAIDashboardQuery> OAIGaugeViewProperties::getQueries() const {
    return m_queries;
}
void OAIGaugeViewProperties::setQueries(const QList<OAIDashboardQuery> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIGaugeViewProperties::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIGaugeViewProperties::is_queries_Valid() const{
    return m_queries_isValid;
}

QString OAIGaugeViewProperties::getShape() const {
    return m_shape;
}
void OAIGaugeViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIGaugeViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIGaugeViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

bool OAIGaugeViewProperties::isShowNoteWhenEmpty() const {
    return m_show_note_when_empty;
}
void OAIGaugeViewProperties::setShowNoteWhenEmpty(const bool &show_note_when_empty) {
    m_show_note_when_empty = show_note_when_empty;
    m_show_note_when_empty_isSet = true;
}

bool OAIGaugeViewProperties::is_show_note_when_empty_Set() const{
    return m_show_note_when_empty_isSet;
}

bool OAIGaugeViewProperties::is_show_note_when_empty_Valid() const{
    return m_show_note_when_empty_isValid;
}

QString OAIGaugeViewProperties::getSuffix() const {
    return m_suffix;
}
void OAIGaugeViewProperties::setSuffix(const QString &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAIGaugeViewProperties::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAIGaugeViewProperties::is_suffix_Valid() const{
    return m_suffix_isValid;
}

QString OAIGaugeViewProperties::getTickPrefix() const {
    return m_tick_prefix;
}
void OAIGaugeViewProperties::setTickPrefix(const QString &tick_prefix) {
    m_tick_prefix = tick_prefix;
    m_tick_prefix_isSet = true;
}

bool OAIGaugeViewProperties::is_tick_prefix_Set() const{
    return m_tick_prefix_isSet;
}

bool OAIGaugeViewProperties::is_tick_prefix_Valid() const{
    return m_tick_prefix_isValid;
}

QString OAIGaugeViewProperties::getTickSuffix() const {
    return m_tick_suffix;
}
void OAIGaugeViewProperties::setTickSuffix(const QString &tick_suffix) {
    m_tick_suffix = tick_suffix;
    m_tick_suffix_isSet = true;
}

bool OAIGaugeViewProperties::is_tick_suffix_Set() const{
    return m_tick_suffix_isSet;
}

bool OAIGaugeViewProperties::is_tick_suffix_Valid() const{
    return m_tick_suffix_isValid;
}

QString OAIGaugeViewProperties::getType() const {
    return m_type;
}
void OAIGaugeViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGaugeViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGaugeViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGaugeViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_places.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_note_when_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tick_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tick_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGaugeViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_colors_isValid && m_decimal_places_isValid && m_note_isValid && m_prefix_isValid && m_queries_isValid && m_shape_isValid && m_show_note_when_empty_isValid && m_suffix_isValid && m_tick_prefix_isValid && m_tick_suffix_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
