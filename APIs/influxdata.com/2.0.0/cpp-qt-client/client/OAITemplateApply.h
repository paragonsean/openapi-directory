/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITemplateApply.h
 *
 * 
 */

#ifndef OAITemplateApply_H
#define OAITemplateApply_H

#include <QJsonObject>

#include "OAITemplateApply_actions_inner.h"
#include "OAITemplateApply_envRefs_value.h"
#include "OAITemplateApply_remotes_inner.h"
#include "OAITemplateApply_template.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITemplateApply_actions_inner;
class OAITemplateApply_remotes_inner;
class OAITemplateApply_template;

class OAITemplateApply : public OAIObject {
public:
    OAITemplateApply();
    OAITemplateApply(QString json);
    ~OAITemplateApply() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAITemplateApply_actions_inner> getActions() const;
    void setActions(const QList<OAITemplateApply_actions_inner> &actions);
    bool is_actions_Set() const;
    bool is_actions_Valid() const;

    bool isDryRun() const;
    void setDryRun(const bool &dry_run);
    bool is_dry_run_Set() const;
    bool is_dry_run_Valid() const;

    QMap<QString, OAITemplateApply_envRefs_value> getEnvRefs() const;
    void setEnvRefs(const QMap<QString, OAITemplateApply_envRefs_value> &env_refs);
    bool is_env_refs_Set() const;
    bool is_env_refs_Valid() const;

    QString getOrgId() const;
    void setOrgId(const QString &org_id);
    bool is_org_id_Set() const;
    bool is_org_id_Valid() const;

    QList<OAITemplateApply_remotes_inner> getRemotes() const;
    void setRemotes(const QList<OAITemplateApply_remotes_inner> &remotes);
    bool is_remotes_Set() const;
    bool is_remotes_Valid() const;

    QMap<QString, QString> getSecrets() const;
    void setSecrets(const QMap<QString, QString> &secrets);
    bool is_secrets_Set() const;
    bool is_secrets_Valid() const;

    QString getStackId() const;
    void setStackId(const QString &stack_id);
    bool is_stack_id_Set() const;
    bool is_stack_id_Valid() const;

    OAITemplateApply_template getRTemplate() const;
    void setRTemplate(const OAITemplateApply_template &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    QList<OAITemplateApply_template> getTemplates() const;
    void setTemplates(const QList<OAITemplateApply_template> &templates);
    bool is_templates_Set() const;
    bool is_templates_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAITemplateApply_actions_inner> m_actions;
    bool m_actions_isSet;
    bool m_actions_isValid;

    bool m_dry_run;
    bool m_dry_run_isSet;
    bool m_dry_run_isValid;

    QMap<QString, OAITemplateApply_envRefs_value> m_env_refs;
    bool m_env_refs_isSet;
    bool m_env_refs_isValid;

    QString m_org_id;
    bool m_org_id_isSet;
    bool m_org_id_isValid;

    QList<OAITemplateApply_remotes_inner> m_remotes;
    bool m_remotes_isSet;
    bool m_remotes_isValid;

    QMap<QString, QString> m_secrets;
    bool m_secrets_isSet;
    bool m_secrets_isValid;

    QString m_stack_id;
    bool m_stack_id_isSet;
    bool m_stack_id_isValid;

    OAITemplateApply_template m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    QList<OAITemplateApply_template> m_templates;
    bool m_templates_isSet;
    bool m_templates_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITemplateApply)

#endif // OAITemplateApply_H
