/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReady.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReady::OAIReady(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReady::OAIReady() {
    this->initializeModel();
}

OAIReady::~OAIReady() {}

void OAIReady::initializeModel() {

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_up_isSet = false;
    m_up_isValid = false;
}

void OAIReady::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReady::fromJsonObject(QJsonObject json) {

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_up_isValid = ::OpenAPI::fromJsonValue(m_up, json[QString("up")]);
    m_up_isSet = !json[QString("up")].isNull() && m_up_isValid;
}

QString OAIReady::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReady::asJsonObject() const {
    QJsonObject obj;
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_up_isSet) {
        obj.insert(QString("up"), ::OpenAPI::toJsonValue(m_up));
    }
    return obj;
}

QDateTime OAIReady::getStarted() const {
    return m_started;
}
void OAIReady::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIReady::is_started_Set() const{
    return m_started_isSet;
}

bool OAIReady::is_started_Valid() const{
    return m_started_isValid;
}

QString OAIReady::getStatus() const {
    return m_status;
}
void OAIReady::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReady::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReady::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIReady::getUp() const {
    return m_up;
}
void OAIReady::setUp(const QString &up) {
    m_up = up;
    m_up_isSet = true;
}

bool OAIReady::is_up_Set() const{
    return m_up_isSet;
}

bool OAIReady::is_up_Valid() const{
    return m_up_isValid;
}

bool OAIReady::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReady::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
