/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket::OAIBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket::OAIBucket() {
    this->initializeModel();
}

OAIBucket::~OAIBucket() {}

void OAIBucket::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_retention_rules_isSet = false;
    m_retention_rules_isValid = false;

    m_rp_isSet = false;
    m_rp_isValid = false;

    m_schema_type_isSet = false;
    m_schema_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_retention_rules_isValid = ::OpenAPI::fromJsonValue(m_retention_rules, json[QString("retentionRules")]);
    m_retention_rules_isSet = !json[QString("retentionRules")].isNull() && m_retention_rules_isValid;

    m_rp_isValid = ::OpenAPI::fromJsonValue(m_rp, json[QString("rp")]);
    m_rp_isSet = !json[QString("rp")].isNull() && m_rp_isValid;

    m_schema_type_isValid = ::OpenAPI::fromJsonValue(m_schema_type, json[QString("schemaType")]);
    m_schema_type_isSet = !json[QString("schemaType")].isNull() && m_schema_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_retention_rules.size() > 0) {
        obj.insert(QString("retentionRules"), ::OpenAPI::toJsonValue(m_retention_rules));
    }
    if (m_rp_isSet) {
        obj.insert(QString("rp"), ::OpenAPI::toJsonValue(m_rp));
    }
    if (m_schema_type.isSet()) {
        obj.insert(QString("schemaType"), ::OpenAPI::toJsonValue(m_schema_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIBucket::getCreatedAt() const {
    return m_created_at;
}
void OAIBucket::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBucket::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBucket::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBucket::getDescription() const {
    return m_description;
}
void OAIBucket::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBucket::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBucket::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBucket::getId() const {
    return m_id;
}
void OAIBucket::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBucket::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBucket::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILabel> OAIBucket::getLabels() const {
    return m_labels;
}
void OAIBucket::setLabels(const QList<OAILabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIBucket::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIBucket::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIBucket_links OAIBucket::getLinks() const {
    return m_links;
}
void OAIBucket::setLinks(const OAIBucket_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIBucket::is_links_Set() const{
    return m_links_isSet;
}

bool OAIBucket::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIBucket::getName() const {
    return m_name;
}
void OAIBucket::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBucket::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBucket::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBucket::getOrgId() const {
    return m_org_id;
}
void OAIBucket::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIBucket::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIBucket::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QList<OAIRetentionRule> OAIBucket::getRetentionRules() const {
    return m_retention_rules;
}
void OAIBucket::setRetentionRules(const QList<OAIRetentionRule> &retention_rules) {
    m_retention_rules = retention_rules;
    m_retention_rules_isSet = true;
}

bool OAIBucket::is_retention_rules_Set() const{
    return m_retention_rules_isSet;
}

bool OAIBucket::is_retention_rules_Valid() const{
    return m_retention_rules_isValid;
}

QString OAIBucket::getRp() const {
    return m_rp;
}
void OAIBucket::setRp(const QString &rp) {
    m_rp = rp;
    m_rp_isSet = true;
}

bool OAIBucket::is_rp_Set() const{
    return m_rp_isSet;
}

bool OAIBucket::is_rp_Valid() const{
    return m_rp_isValid;
}

OAISchemaType OAIBucket::getSchemaType() const {
    return m_schema_type;
}
void OAIBucket::setSchemaType(const OAISchemaType &schema_type) {
    m_schema_type = schema_type;
    m_schema_type_isSet = true;
}

bool OAIBucket::is_schema_type_Set() const{
    return m_schema_type_isSet;
}

bool OAIBucket::is_schema_type_Valid() const{
    return m_schema_type_isValid;
}

QString OAIBucket::getType() const {
    return m_type;
}
void OAIBucket::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBucket::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBucket::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIBucket::getUpdatedAt() const {
    return m_updated_at;
}
void OAIBucket::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIBucket::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIBucket::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_retention_rules_isValid && true;
}

} // namespace OpenAPI
