/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentMeta::OAIDocumentMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentMeta::OAIDocumentMeta() {
    this->initializeModel();
}

OAIDocumentMeta::~OAIDocumentMeta() {}

void OAIDocumentMeta::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDocumentMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentMeta::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("templateID")]);
    m_template_id_isSet = !json[QString("templateID")].isNull() && m_template_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDocumentMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("templateID"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QDateTime OAIDocumentMeta::getCreatedAt() const {
    return m_created_at;
}
void OAIDocumentMeta::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDocumentMeta::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDocumentMeta::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDocumentMeta::getDescription() const {
    return m_description;
}
void OAIDocumentMeta::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDocumentMeta::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDocumentMeta::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDocumentMeta::getName() const {
    return m_name;
}
void OAIDocumentMeta::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentMeta::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentMeta::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDocumentMeta::getTemplateId() const {
    return m_template_id;
}
void OAIDocumentMeta::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIDocumentMeta::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIDocumentMeta::is_template_id_Valid() const{
    return m_template_id_isValid;
}

QString OAIDocumentMeta::getType() const {
    return m_type;
}
void OAIDocumentMeta::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDocumentMeta::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDocumentMeta::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIDocumentMeta::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDocumentMeta::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDocumentMeta::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDocumentMeta::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIDocumentMeta::getVersion() const {
    return m_version;
}
void OAIDocumentMeta::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDocumentMeta::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDocumentMeta::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDocumentMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
