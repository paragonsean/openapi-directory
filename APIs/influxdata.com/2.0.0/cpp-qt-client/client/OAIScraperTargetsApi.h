/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScraperTargetsApi_H
#define OAI_OAIScraperTargetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddResourceMemberRequestBody.h"
#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAIResourceMember.h"
#include "OAIResourceMembers.h"
#include "OAIResourceOwner.h"
#include "OAIResourceOwners.h"
#include "OAIScraperTargetRequest.h"
#include "OAIScraperTargetResponse.h"
#include "OAIScraperTargetResponses.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScraperTargetsApi : public QObject {
    Q_OBJECT

public:
    OAIScraperTargetsApi(const int timeOut = 0);
    ~OAIScraperTargetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteScrapersID(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteScrapersIDLabelsID(const QString &scraper_target_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteScrapersIDMembersID(const QString &user_id, const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteScrapersIDOwnersID(const QString &user_id, const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  org_id QString [optional]
    * @param[in]  org QString [optional]
    */
    virtual void getScrapers(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getScrapersID(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getScrapersIDLabels(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getScrapersIDMembers(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getScrapersIDOwners(const QString &scraper_target_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  oai_scraper_target_request OAIScraperTargetRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchScrapersID(const QString &scraper_target_id, const OAIScraperTargetRequest &oai_scraper_target_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_scraper_target_request OAIScraperTargetRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postScrapers(const OAIScraperTargetRequest &oai_scraper_target_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postScrapersIDLabels(const QString &scraper_target_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postScrapersIDMembers(const QString &scraper_target_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scraper_target_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postScrapersIDOwners(const QString &scraper_target_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteScrapersIDCallback(OAIHttpRequestWorker *worker);
    void deleteScrapersIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void deleteScrapersIDMembersIDCallback(OAIHttpRequestWorker *worker);
    void deleteScrapersIDOwnersIDCallback(OAIHttpRequestWorker *worker);
    void getScrapersCallback(OAIHttpRequestWorker *worker);
    void getScrapersIDCallback(OAIHttpRequestWorker *worker);
    void getScrapersIDLabelsCallback(OAIHttpRequestWorker *worker);
    void getScrapersIDMembersCallback(OAIHttpRequestWorker *worker);
    void getScrapersIDOwnersCallback(OAIHttpRequestWorker *worker);
    void patchScrapersIDCallback(OAIHttpRequestWorker *worker);
    void postScrapersCallback(OAIHttpRequestWorker *worker);
    void postScrapersIDLabelsCallback(OAIHttpRequestWorker *worker);
    void postScrapersIDMembersCallback(OAIHttpRequestWorker *worker);
    void postScrapersIDOwnersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteScrapersIDSignal();
    void deleteScrapersIDLabelsIDSignal();
    void deleteScrapersIDMembersIDSignal();
    void deleteScrapersIDOwnersIDSignal();
    void getScrapersSignal(OAIScraperTargetResponses summary);
    void getScrapersIDSignal(OAIScraperTargetResponse summary);
    void getScrapersIDLabelsSignal(OAILabelsResponse summary);
    void getScrapersIDMembersSignal(OAIResourceMembers summary);
    void getScrapersIDOwnersSignal(OAIResourceOwners summary);
    void patchScrapersIDSignal(OAIScraperTargetResponse summary);
    void postScrapersSignal(OAIScraperTargetResponse summary);
    void postScrapersIDLabelsSignal(OAILabelResponse summary);
    void postScrapersIDMembersSignal(OAIResourceMember summary);
    void postScrapersIDOwnersSignal(OAIResourceOwner summary);


    void deleteScrapersIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteScrapersIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteScrapersIDMembersIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteScrapersIDOwnersIDSignalFull(OAIHttpRequestWorker *worker);
    void getScrapersSignalFull(OAIHttpRequestWorker *worker, OAIScraperTargetResponses summary);
    void getScrapersIDSignalFull(OAIHttpRequestWorker *worker, OAIScraperTargetResponse summary);
    void getScrapersIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void getScrapersIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMembers summary);
    void getScrapersIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwners summary);
    void patchScrapersIDSignalFull(OAIHttpRequestWorker *worker, OAIScraperTargetResponse summary);
    void postScrapersSignalFull(OAIHttpRequestWorker *worker, OAIScraperTargetResponse summary);
    void postScrapersIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void postScrapersIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMember summary);
    void postScrapersIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwner summary);

    Q_DECL_DEPRECATED_X("Use deleteScrapersIDSignalError() instead")
    void deleteScrapersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScrapersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScrapersIDLabelsIDSignalError() instead")
    void deleteScrapersIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScrapersIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScrapersIDMembersIDSignalError() instead")
    void deleteScrapersIDMembersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScrapersIDMembersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScrapersIDOwnersIDSignalError() instead")
    void deleteScrapersIDOwnersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScrapersIDOwnersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersSignalError() instead")
    void getScrapersSignalE(OAIScraperTargetResponses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersSignalError(OAIScraperTargetResponses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersIDSignalError() instead")
    void getScrapersIDSignalE(OAIScraperTargetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersIDSignalError(OAIScraperTargetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersIDLabelsSignalError() instead")
    void getScrapersIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersIDMembersSignalError() instead")
    void getScrapersIDMembersSignalE(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersIDMembersSignalError(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersIDOwnersSignalError() instead")
    void getScrapersIDOwnersSignalE(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersIDOwnersSignalError(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchScrapersIDSignalError() instead")
    void patchScrapersIDSignalE(OAIScraperTargetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchScrapersIDSignalError(OAIScraperTargetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScrapersSignalError() instead")
    void postScrapersSignalE(OAIScraperTargetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postScrapersSignalError(OAIScraperTargetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScrapersIDLabelsSignalError() instead")
    void postScrapersIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postScrapersIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScrapersIDMembersSignalError() instead")
    void postScrapersIDMembersSignalE(OAIResourceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postScrapersIDMembersSignalError(OAIResourceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScrapersIDOwnersSignalError() instead")
    void postScrapersIDOwnersSignalE(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postScrapersIDOwnersSignalError(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteScrapersIDSignalErrorFull() instead")
    void deleteScrapersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScrapersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScrapersIDLabelsIDSignalErrorFull() instead")
    void deleteScrapersIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScrapersIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScrapersIDMembersIDSignalErrorFull() instead")
    void deleteScrapersIDMembersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScrapersIDMembersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScrapersIDOwnersIDSignalErrorFull() instead")
    void deleteScrapersIDOwnersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScrapersIDOwnersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersSignalErrorFull() instead")
    void getScrapersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersIDSignalErrorFull() instead")
    void getScrapersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersIDLabelsSignalErrorFull() instead")
    void getScrapersIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersIDMembersSignalErrorFull() instead")
    void getScrapersIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrapersIDOwnersSignalErrorFull() instead")
    void getScrapersIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrapersIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchScrapersIDSignalErrorFull() instead")
    void patchScrapersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchScrapersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScrapersSignalErrorFull() instead")
    void postScrapersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postScrapersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScrapersIDLabelsSignalErrorFull() instead")
    void postScrapersIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postScrapersIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScrapersIDMembersSignalErrorFull() instead")
    void postScrapersIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postScrapersIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScrapersIDOwnersSignalErrorFull() instead")
    void postScrapersIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postScrapersIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
