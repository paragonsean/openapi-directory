/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnboardingResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnboardingResponse::OAIOnboardingResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnboardingResponse::OAIOnboardingResponse() {
    this->initializeModel();
}

OAIOnboardingResponse::~OAIOnboardingResponse() {}

void OAIOnboardingResponse::initializeModel() {

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIOnboardingResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnboardingResponse::fromJsonObject(QJsonObject json) {

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIOnboardingResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnboardingResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_auth.isSet()) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_bucket.isSet()) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_org.isSet()) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIAuthorization OAIOnboardingResponse::getAuth() const {
    return m_auth;
}
void OAIOnboardingResponse::setAuth(const OAIAuthorization &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIOnboardingResponse::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIOnboardingResponse::is_auth_Valid() const{
    return m_auth_isValid;
}

OAIBucket OAIOnboardingResponse::getBucket() const {
    return m_bucket;
}
void OAIOnboardingResponse::setBucket(const OAIBucket &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIOnboardingResponse::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIOnboardingResponse::is_bucket_Valid() const{
    return m_bucket_isValid;
}

OAIOrganization OAIOnboardingResponse::getOrg() const {
    return m_org;
}
void OAIOnboardingResponse::setOrg(const OAIOrganization &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIOnboardingResponse::is_org_Set() const{
    return m_org_isSet;
}

bool OAIOnboardingResponse::is_org_Valid() const{
    return m_org_isValid;
}

OAIUserResponse OAIOnboardingResponse::getUser() const {
    return m_user;
}
void OAIOnboardingResponse::setUser(const OAIUserResponse &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOnboardingResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOnboardingResponse::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIOnboardingResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnboardingResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
