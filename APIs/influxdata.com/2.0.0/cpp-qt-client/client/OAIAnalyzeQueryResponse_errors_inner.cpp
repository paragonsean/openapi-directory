/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeQueryResponse_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeQueryResponse_errors_inner::OAIAnalyzeQueryResponse_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeQueryResponse_errors_inner::OAIAnalyzeQueryResponse_errors_inner() {
    this->initializeModel();
}

OAIAnalyzeQueryResponse_errors_inner::~OAIAnalyzeQueryResponse_errors_inner() {}

void OAIAnalyzeQueryResponse_errors_inner::initializeModel() {

    m_character_isSet = false;
    m_character_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIAnalyzeQueryResponse_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeQueryResponse_errors_inner::fromJsonObject(QJsonObject json) {

    m_character_isValid = ::OpenAPI::fromJsonValue(m_character, json[QString("character")]);
    m_character_isSet = !json[QString("character")].isNull() && m_character_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIAnalyzeQueryResponse_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeQueryResponse_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_character_isSet) {
        obj.insert(QString("character"), ::OpenAPI::toJsonValue(m_character));
    }
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

qint32 OAIAnalyzeQueryResponse_errors_inner::getCharacter() const {
    return m_character;
}
void OAIAnalyzeQueryResponse_errors_inner::setCharacter(const qint32 &character) {
    m_character = character;
    m_character_isSet = true;
}

bool OAIAnalyzeQueryResponse_errors_inner::is_character_Set() const{
    return m_character_isSet;
}

bool OAIAnalyzeQueryResponse_errors_inner::is_character_Valid() const{
    return m_character_isValid;
}

qint32 OAIAnalyzeQueryResponse_errors_inner::getColumn() const {
    return m_column;
}
void OAIAnalyzeQueryResponse_errors_inner::setColumn(const qint32 &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIAnalyzeQueryResponse_errors_inner::is_column_Set() const{
    return m_column_isSet;
}

bool OAIAnalyzeQueryResponse_errors_inner::is_column_Valid() const{
    return m_column_isValid;
}

qint32 OAIAnalyzeQueryResponse_errors_inner::getLine() const {
    return m_line;
}
void OAIAnalyzeQueryResponse_errors_inner::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIAnalyzeQueryResponse_errors_inner::is_line_Set() const{
    return m_line_isSet;
}

bool OAIAnalyzeQueryResponse_errors_inner::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIAnalyzeQueryResponse_errors_inner::getMessage() const {
    return m_message;
}
void OAIAnalyzeQueryResponse_errors_inner::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAnalyzeQueryResponse_errors_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAnalyzeQueryResponse_errors_inner::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIAnalyzeQueryResponse_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeQueryResponse_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
