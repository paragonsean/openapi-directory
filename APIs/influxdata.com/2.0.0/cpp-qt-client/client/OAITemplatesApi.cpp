/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplatesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITemplatesApi::OAITemplatesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITemplatesApi::~OAITemplatesApi() {
}

void OAITemplatesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/api/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteDocumentsTemplatesID", defaultConf);
    _serverIndices.insert("deleteDocumentsTemplatesID", 0);
    _serverConfigs.insert("deleteDocumentsTemplatesIDLabelsID", defaultConf);
    _serverIndices.insert("deleteDocumentsTemplatesIDLabelsID", 0);
    _serverConfigs.insert("getDocumentsTemplates", defaultConf);
    _serverIndices.insert("getDocumentsTemplates", 0);
    _serverConfigs.insert("getDocumentsTemplatesID", defaultConf);
    _serverIndices.insert("getDocumentsTemplatesID", 0);
    _serverConfigs.insert("getDocumentsTemplatesIDLabels", defaultConf);
    _serverIndices.insert("getDocumentsTemplatesIDLabels", 0);
    _serverConfigs.insert("postDocumentsTemplates", defaultConf);
    _serverIndices.insert("postDocumentsTemplates", 0);
    _serverConfigs.insert("postDocumentsTemplatesIDLabels", defaultConf);
    _serverIndices.insert("postDocumentsTemplatesIDLabels", 0);
    _serverConfigs.insert("putDocumentsTemplatesID", defaultConf);
    _serverIndices.insert("putDocumentsTemplatesID", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITemplatesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITemplatesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITemplatesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITemplatesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITemplatesApi::setUsername(const QString &username) {
    _username = username;
}

void OAITemplatesApi::setPassword(const QString &password) {
    _password = password;
}


void OAITemplatesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITemplatesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITemplatesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITemplatesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITemplatesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITemplatesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITemplatesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITemplatesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITemplatesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITemplatesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITemplatesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITemplatesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITemplatesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITemplatesApi::deleteDocumentsTemplatesID(const QString &template_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteDocumentsTemplatesID"][_serverIndices.value("deleteDocumentsTemplatesID")].URL()+"/documents/templates/{templateID}");
    
    
    {
        QString template_idPathParam("{");
        template_idPathParam.append("templateID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "templateID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"templateID"+pathSuffix : pathPrefix;
        fullPath.replace(template_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITemplatesApi::deleteDocumentsTemplatesIDCallback);
    connect(this, &OAITemplatesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITemplatesApi::deleteDocumentsTemplatesIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteDocumentsTemplatesIDSignal();
        Q_EMIT deleteDocumentsTemplatesIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteDocumentsTemplatesIDSignalE(error_type, error_str);
        Q_EMIT deleteDocumentsTemplatesIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteDocumentsTemplatesIDSignalError(error_type, error_str);
        Q_EMIT deleteDocumentsTemplatesIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITemplatesApi::deleteDocumentsTemplatesIDLabelsID(const QString &template_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteDocumentsTemplatesIDLabelsID"][_serverIndices.value("deleteDocumentsTemplatesIDLabelsID")].URL()+"/documents/templates/{templateID}/labels/{labelID}");
    
    
    {
        QString template_idPathParam("{");
        template_idPathParam.append("templateID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "templateID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"templateID"+pathSuffix : pathPrefix;
        fullPath.replace(template_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_id)));
    }
    
    {
        QString label_idPathParam("{");
        label_idPathParam.append("labelID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labelID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labelID"+pathSuffix : pathPrefix;
        fullPath.replace(label_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(label_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITemplatesApi::deleteDocumentsTemplatesIDLabelsIDCallback);
    connect(this, &OAITemplatesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITemplatesApi::deleteDocumentsTemplatesIDLabelsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteDocumentsTemplatesIDLabelsIDSignal();
        Q_EMIT deleteDocumentsTemplatesIDLabelsIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteDocumentsTemplatesIDLabelsIDSignalE(error_type, error_str);
        Q_EMIT deleteDocumentsTemplatesIDLabelsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteDocumentsTemplatesIDLabelsIDSignalError(error_type, error_str);
        Q_EMIT deleteDocumentsTemplatesIDLabelsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITemplatesApi::getDocumentsTemplates(const ::OpenAPI::OptionalParam<QString> &zap_trace_span, const ::OpenAPI::OptionalParam<QString> &org, const ::OpenAPI::OptionalParam<QString> &org_id) {
    QString fullPath = QString(_serverConfigs["getDocumentsTemplates"][_serverIndices.value("getDocumentsTemplates")].URL()+"/documents/templates");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (org.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "org", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("org")).append(querySuffix).append(QUrl::toPercentEncoding(org.stringValue()));
    }
    if (org_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "orgID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("orgID")).append(querySuffix).append(QUrl::toPercentEncoding(org_id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITemplatesApi::getDocumentsTemplatesCallback);
    connect(this, &OAITemplatesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITemplatesApi::getDocumentsTemplatesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocuments output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDocumentsTemplatesSignal(output);
        Q_EMIT getDocumentsTemplatesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDocumentsTemplatesSignalE(output, error_type, error_str);
        Q_EMIT getDocumentsTemplatesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDocumentsTemplatesSignalError(output, error_type, error_str);
        Q_EMIT getDocumentsTemplatesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITemplatesApi::getDocumentsTemplatesID(const QString &template_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getDocumentsTemplatesID"][_serverIndices.value("getDocumentsTemplatesID")].URL()+"/documents/templates/{templateID}");
    
    
    {
        QString template_idPathParam("{");
        template_idPathParam.append("templateID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "templateID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"templateID"+pathSuffix : pathPrefix;
        fullPath.replace(template_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITemplatesApi::getDocumentsTemplatesIDCallback);
    connect(this, &OAITemplatesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITemplatesApi::getDocumentsTemplatesIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocument output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDocumentsTemplatesIDSignal(output);
        Q_EMIT getDocumentsTemplatesIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDocumentsTemplatesIDSignalE(output, error_type, error_str);
        Q_EMIT getDocumentsTemplatesIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDocumentsTemplatesIDSignalError(output, error_type, error_str);
        Q_EMIT getDocumentsTemplatesIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITemplatesApi::getDocumentsTemplatesIDLabels(const QString &template_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getDocumentsTemplatesIDLabels"][_serverIndices.value("getDocumentsTemplatesIDLabels")].URL()+"/documents/templates/{templateID}/labels");
    
    
    {
        QString template_idPathParam("{");
        template_idPathParam.append("templateID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "templateID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"templateID"+pathSuffix : pathPrefix;
        fullPath.replace(template_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITemplatesApi::getDocumentsTemplatesIDLabelsCallback);
    connect(this, &OAITemplatesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITemplatesApi::getDocumentsTemplatesIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDocumentsTemplatesIDLabelsSignal(output);
        Q_EMIT getDocumentsTemplatesIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDocumentsTemplatesIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT getDocumentsTemplatesIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDocumentsTemplatesIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT getDocumentsTemplatesIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITemplatesApi::postDocumentsTemplates(const OAIDocumentCreate &oai_document_create, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postDocumentsTemplates"][_serverIndices.value("postDocumentsTemplates")].URL()+"/documents/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_document_create.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITemplatesApi::postDocumentsTemplatesCallback);
    connect(this, &OAITemplatesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITemplatesApi::postDocumentsTemplatesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocument output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postDocumentsTemplatesSignal(output);
        Q_EMIT postDocumentsTemplatesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postDocumentsTemplatesSignalE(output, error_type, error_str);
        Q_EMIT postDocumentsTemplatesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postDocumentsTemplatesSignalError(output, error_type, error_str);
        Q_EMIT postDocumentsTemplatesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITemplatesApi::postDocumentsTemplatesIDLabels(const QString &template_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postDocumentsTemplatesIDLabels"][_serverIndices.value("postDocumentsTemplatesIDLabels")].URL()+"/documents/templates/{templateID}/labels");
    
    
    {
        QString template_idPathParam("{");
        template_idPathParam.append("templateID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "templateID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"templateID"+pathSuffix : pathPrefix;
        fullPath.replace(template_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_label_mapping.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITemplatesApi::postDocumentsTemplatesIDLabelsCallback);
    connect(this, &OAITemplatesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITemplatesApi::postDocumentsTemplatesIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postDocumentsTemplatesIDLabelsSignal(output);
        Q_EMIT postDocumentsTemplatesIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postDocumentsTemplatesIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT postDocumentsTemplatesIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postDocumentsTemplatesIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT postDocumentsTemplatesIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITemplatesApi::putDocumentsTemplatesID(const QString &template_id, const OAIDocumentUpdate &oai_document_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["putDocumentsTemplatesID"][_serverIndices.value("putDocumentsTemplatesID")].URL()+"/documents/templates/{templateID}");
    
    
    {
        QString template_idPathParam("{");
        template_idPathParam.append("templateID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "templateID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"templateID"+pathSuffix : pathPrefix;
        fullPath.replace(template_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_document_update.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITemplatesApi::putDocumentsTemplatesIDCallback);
    connect(this, &OAITemplatesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITemplatesApi::putDocumentsTemplatesIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocument output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT putDocumentsTemplatesIDSignal(output);
        Q_EMIT putDocumentsTemplatesIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT putDocumentsTemplatesIDSignalE(output, error_type, error_str);
        Q_EMIT putDocumentsTemplatesIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT putDocumentsTemplatesIDSignalError(output, error_type, error_str);
        Q_EMIT putDocumentsTemplatesIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITemplatesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
