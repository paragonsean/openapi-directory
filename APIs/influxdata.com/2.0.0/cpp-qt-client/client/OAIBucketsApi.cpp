/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIBucketsApi::OAIBucketsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIBucketsApi::~OAIBucketsApi() {
}

void OAIBucketsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/api/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteBucketsID", defaultConf);
    _serverIndices.insert("deleteBucketsID", 0);
    _serverConfigs.insert("deleteBucketsIDLabelsID", defaultConf);
    _serverIndices.insert("deleteBucketsIDLabelsID", 0);
    _serverConfigs.insert("deleteBucketsIDMembersID", defaultConf);
    _serverIndices.insert("deleteBucketsIDMembersID", 0);
    _serverConfigs.insert("deleteBucketsIDOwnersID", defaultConf);
    _serverIndices.insert("deleteBucketsIDOwnersID", 0);
    _serverConfigs.insert("getBuckets", defaultConf);
    _serverIndices.insert("getBuckets", 0);
    _serverConfigs.insert("getBucketsID", defaultConf);
    _serverIndices.insert("getBucketsID", 0);
    _serverConfigs.insert("getBucketsIDLabels", defaultConf);
    _serverIndices.insert("getBucketsIDLabels", 0);
    _serverConfigs.insert("getBucketsIDMembers", defaultConf);
    _serverIndices.insert("getBucketsIDMembers", 0);
    _serverConfigs.insert("getBucketsIDOwners", defaultConf);
    _serverIndices.insert("getBucketsIDOwners", 0);
    _serverConfigs.insert("getSourcesIDBuckets", defaultConf);
    _serverIndices.insert("getSourcesIDBuckets", 0);
    _serverConfigs.insert("patchBucketsID", defaultConf);
    _serverIndices.insert("patchBucketsID", 0);
    _serverConfigs.insert("postBuckets", defaultConf);
    _serverIndices.insert("postBuckets", 0);
    _serverConfigs.insert("postBucketsIDLabels", defaultConf);
    _serverIndices.insert("postBucketsIDLabels", 0);
    _serverConfigs.insert("postBucketsIDMembers", defaultConf);
    _serverIndices.insert("postBucketsIDMembers", 0);
    _serverConfigs.insert("postBucketsIDOwners", defaultConf);
    _serverIndices.insert("postBucketsIDOwners", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIBucketsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIBucketsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIBucketsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIBucketsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIBucketsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIBucketsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIBucketsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIBucketsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIBucketsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIBucketsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIBucketsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIBucketsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIBucketsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIBucketsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIBucketsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIBucketsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIBucketsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIBucketsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIBucketsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIBucketsApi::deleteBucketsID(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteBucketsID"][_serverIndices.value("deleteBucketsID")].URL()+"/buckets/{bucketID}");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::deleteBucketsIDCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::deleteBucketsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteBucketsIDSignal();
        Q_EMIT deleteBucketsIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteBucketsIDSignalE(error_type, error_str);
        Q_EMIT deleteBucketsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteBucketsIDSignalError(error_type, error_str);
        Q_EMIT deleteBucketsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::deleteBucketsIDLabelsID(const QString &bucket_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteBucketsIDLabelsID"][_serverIndices.value("deleteBucketsIDLabelsID")].URL()+"/buckets/{bucketID}/labels/{labelID}");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    
    {
        QString label_idPathParam("{");
        label_idPathParam.append("labelID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labelID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labelID"+pathSuffix : pathPrefix;
        fullPath.replace(label_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(label_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::deleteBucketsIDLabelsIDCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::deleteBucketsIDLabelsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteBucketsIDLabelsIDSignal();
        Q_EMIT deleteBucketsIDLabelsIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteBucketsIDLabelsIDSignalE(error_type, error_str);
        Q_EMIT deleteBucketsIDLabelsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteBucketsIDLabelsIDSignalError(error_type, error_str);
        Q_EMIT deleteBucketsIDLabelsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::deleteBucketsIDMembersID(const QString &user_id, const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteBucketsIDMembersID"][_serverIndices.value("deleteBucketsIDMembersID")].URL()+"/buckets/{bucketID}/members/{userID}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userID"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::deleteBucketsIDMembersIDCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::deleteBucketsIDMembersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteBucketsIDMembersIDSignal();
        Q_EMIT deleteBucketsIDMembersIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteBucketsIDMembersIDSignalE(error_type, error_str);
        Q_EMIT deleteBucketsIDMembersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteBucketsIDMembersIDSignalError(error_type, error_str);
        Q_EMIT deleteBucketsIDMembersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::deleteBucketsIDOwnersID(const QString &user_id, const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteBucketsIDOwnersID"][_serverIndices.value("deleteBucketsIDOwnersID")].URL()+"/buckets/{bucketID}/owners/{userID}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userID"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::deleteBucketsIDOwnersIDCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::deleteBucketsIDOwnersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteBucketsIDOwnersIDSignal();
        Q_EMIT deleteBucketsIDOwnersIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteBucketsIDOwnersIDSignalE(error_type, error_str);
        Q_EMIT deleteBucketsIDOwnersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteBucketsIDOwnersIDSignalError(error_type, error_str);
        Q_EMIT deleteBucketsIDOwnersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::getBuckets(const ::OpenAPI::OptionalParam<QString> &zap_trace_span, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<QString> &after, const ::OpenAPI::OptionalParam<QString> &org, const ::OpenAPI::OptionalParam<QString> &org_id, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &id) {
    QString fullPath = QString(_serverConfigs["getBuckets"][_serverIndices.value("getBuckets")].URL()+"/buckets");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "after", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("after")).append(querySuffix).append(QUrl::toPercentEncoding(after.stringValue()));
    }
    if (org.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "org", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("org")).append(querySuffix).append(QUrl::toPercentEncoding(org.stringValue()));
    }
    if (org_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "orgID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("orgID")).append(querySuffix).append(QUrl::toPercentEncoding(org_id.stringValue()));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(name.stringValue()));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::getBucketsCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::getBucketsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBuckets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBucketsSignal(output);
        Q_EMIT getBucketsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBucketsSignalE(output, error_type, error_str);
        Q_EMIT getBucketsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBucketsSignalError(output, error_type, error_str);
        Q_EMIT getBucketsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::getBucketsID(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getBucketsID"][_serverIndices.value("getBucketsID")].URL()+"/buckets/{bucketID}");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::getBucketsIDCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::getBucketsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBucket output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBucketsIDSignal(output);
        Q_EMIT getBucketsIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBucketsIDSignalE(output, error_type, error_str);
        Q_EMIT getBucketsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBucketsIDSignalError(output, error_type, error_str);
        Q_EMIT getBucketsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::getBucketsIDLabels(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getBucketsIDLabels"][_serverIndices.value("getBucketsIDLabels")].URL()+"/buckets/{bucketID}/labels");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::getBucketsIDLabelsCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::getBucketsIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBucketsIDLabelsSignal(output);
        Q_EMIT getBucketsIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBucketsIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT getBucketsIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBucketsIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT getBucketsIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::getBucketsIDMembers(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getBucketsIDMembers"][_serverIndices.value("getBucketsIDMembers")].URL()+"/buckets/{bucketID}/members");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::getBucketsIDMembersCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::getBucketsIDMembersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceMembers output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBucketsIDMembersSignal(output);
        Q_EMIT getBucketsIDMembersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBucketsIDMembersSignalE(output, error_type, error_str);
        Q_EMIT getBucketsIDMembersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBucketsIDMembersSignalError(output, error_type, error_str);
        Q_EMIT getBucketsIDMembersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::getBucketsIDOwners(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getBucketsIDOwners"][_serverIndices.value("getBucketsIDOwners")].URL()+"/buckets/{bucketID}/owners");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::getBucketsIDOwnersCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::getBucketsIDOwnersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceOwners output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBucketsIDOwnersSignal(output);
        Q_EMIT getBucketsIDOwnersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBucketsIDOwnersSignalE(output, error_type, error_str);
        Q_EMIT getBucketsIDOwnersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBucketsIDOwnersSignalError(output, error_type, error_str);
        Q_EMIT getBucketsIDOwnersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::getSourcesIDBuckets(const QString &source_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span, const ::OpenAPI::OptionalParam<QString> &org) {
    QString fullPath = QString(_serverConfigs["getSourcesIDBuckets"][_serverIndices.value("getSourcesIDBuckets")].URL()+"/sources/{sourceID}/buckets");
    
    
    {
        QString source_idPathParam("{");
        source_idPathParam.append("sourceID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sourceID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sourceID"+pathSuffix : pathPrefix;
        fullPath.replace(source_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(source_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (org.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "org", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("org")).append(querySuffix).append(QUrl::toPercentEncoding(org.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::getSourcesIDBucketsCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::getSourcesIDBucketsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBuckets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSourcesIDBucketsSignal(output);
        Q_EMIT getSourcesIDBucketsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSourcesIDBucketsSignalE(output, error_type, error_str);
        Q_EMIT getSourcesIDBucketsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSourcesIDBucketsSignalError(output, error_type, error_str);
        Q_EMIT getSourcesIDBucketsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::patchBucketsID(const QString &bucket_id, const OAIPatchBucketRequest &oai_patch_bucket_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["patchBucketsID"][_serverIndices.value("patchBucketsID")].URL()+"/buckets/{bucketID}");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_patch_bucket_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::patchBucketsIDCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::patchBucketsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBucket output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchBucketsIDSignal(output);
        Q_EMIT patchBucketsIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchBucketsIDSignalE(output, error_type, error_str);
        Q_EMIT patchBucketsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchBucketsIDSignalError(output, error_type, error_str);
        Q_EMIT patchBucketsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::postBuckets(const OAIPostBucketRequest &oai_post_bucket_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postBuckets"][_serverIndices.value("postBuckets")].URL()+"/buckets");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_post_bucket_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::postBucketsCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::postBucketsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBucket output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postBucketsSignal(output);
        Q_EMIT postBucketsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postBucketsSignalE(output, error_type, error_str);
        Q_EMIT postBucketsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postBucketsSignalError(output, error_type, error_str);
        Q_EMIT postBucketsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::postBucketsIDLabels(const QString &bucket_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postBucketsIDLabels"][_serverIndices.value("postBucketsIDLabels")].URL()+"/buckets/{bucketID}/labels");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_label_mapping.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::postBucketsIDLabelsCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::postBucketsIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postBucketsIDLabelsSignal(output);
        Q_EMIT postBucketsIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postBucketsIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT postBucketsIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postBucketsIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT postBucketsIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::postBucketsIDMembers(const QString &bucket_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postBucketsIDMembers"][_serverIndices.value("postBucketsIDMembers")].URL()+"/buckets/{bucketID}/members");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_add_resource_member_request_body.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::postBucketsIDMembersCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::postBucketsIDMembersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postBucketsIDMembersSignal(output);
        Q_EMIT postBucketsIDMembersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postBucketsIDMembersSignalE(output, error_type, error_str);
        Q_EMIT postBucketsIDMembersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postBucketsIDMembersSignalError(output, error_type, error_str);
        Q_EMIT postBucketsIDMembersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::postBucketsIDOwners(const QString &bucket_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postBucketsIDOwners"][_serverIndices.value("postBucketsIDOwners")].URL()+"/buckets/{bucketID}/owners");
    
    
    {
        QString bucket_idPathParam("{");
        bucket_idPathParam.append("bucketID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bucketID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bucketID"+pathSuffix : pathPrefix;
        fullPath.replace(bucket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bucket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_add_resource_member_request_body.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIBucketsApi::postBucketsIDOwnersCallback);
    connect(this, &OAIBucketsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIBucketsApi::postBucketsIDOwnersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceOwner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postBucketsIDOwnersSignal(output);
        Q_EMIT postBucketsIDOwnersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postBucketsIDOwnersSignalE(output, error_type, error_str);
        Q_EMIT postBucketsIDOwnersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postBucketsIDOwnersSignalError(output, error_type, error_str);
        Q_EMIT postBucketsIDOwnersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIBucketsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
