/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDecimalPlaces.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDecimalPlaces::OAIDecimalPlaces(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDecimalPlaces::OAIDecimalPlaces() {
    this->initializeModel();
}

OAIDecimalPlaces::~OAIDecimalPlaces() {}

void OAIDecimalPlaces::initializeModel() {

    m_digits_isSet = false;
    m_digits_isValid = false;

    m_is_enforced_isSet = false;
    m_is_enforced_isValid = false;
}

void OAIDecimalPlaces::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDecimalPlaces::fromJsonObject(QJsonObject json) {

    m_digits_isValid = ::OpenAPI::fromJsonValue(m_digits, json[QString("digits")]);
    m_digits_isSet = !json[QString("digits")].isNull() && m_digits_isValid;

    m_is_enforced_isValid = ::OpenAPI::fromJsonValue(m_is_enforced, json[QString("isEnforced")]);
    m_is_enforced_isSet = !json[QString("isEnforced")].isNull() && m_is_enforced_isValid;
}

QString OAIDecimalPlaces::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDecimalPlaces::asJsonObject() const {
    QJsonObject obj;
    if (m_digits_isSet) {
        obj.insert(QString("digits"), ::OpenAPI::toJsonValue(m_digits));
    }
    if (m_is_enforced_isSet) {
        obj.insert(QString("isEnforced"), ::OpenAPI::toJsonValue(m_is_enforced));
    }
    return obj;
}

qint32 OAIDecimalPlaces::getDigits() const {
    return m_digits;
}
void OAIDecimalPlaces::setDigits(const qint32 &digits) {
    m_digits = digits;
    m_digits_isSet = true;
}

bool OAIDecimalPlaces::is_digits_Set() const{
    return m_digits_isSet;
}

bool OAIDecimalPlaces::is_digits_Valid() const{
    return m_digits_isValid;
}

bool OAIDecimalPlaces::isIsEnforced() const {
    return m_is_enforced;
}
void OAIDecimalPlaces::setIsEnforced(const bool &is_enforced) {
    m_is_enforced = is_enforced;
    m_is_enforced_isSet = true;
}

bool OAIDecimalPlaces::is_is_enforced_Set() const{
    return m_is_enforced_isSet;
}

bool OAIDecimalPlaces::is_is_enforced_Valid() const{
    return m_is_enforced_isValid;
}

bool OAIDecimalPlaces::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enforced_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDecimalPlaces::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
