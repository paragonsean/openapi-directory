/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineProtocolLengthError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineProtocolLengthError::OAILineProtocolLengthError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineProtocolLengthError::OAILineProtocolLengthError() {
    this->initializeModel();
}

OAILineProtocolLengthError::~OAILineProtocolLengthError() {}

void OAILineProtocolLengthError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAILineProtocolLengthError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineProtocolLengthError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAILineProtocolLengthError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineProtocolLengthError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAILineProtocolLengthError::getCode() const {
    return m_code;
}
void OAILineProtocolLengthError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAILineProtocolLengthError::is_code_Set() const{
    return m_code_isSet;
}

bool OAILineProtocolLengthError::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAILineProtocolLengthError::getMaxLength() const {
    return m_max_length;
}
void OAILineProtocolLengthError::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAILineProtocolLengthError::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAILineProtocolLengthError::is_max_length_Valid() const{
    return m_max_length_isValid;
}

QString OAILineProtocolLengthError::getMessage() const {
    return m_message;
}
void OAILineProtocolLengthError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAILineProtocolLengthError::is_message_Set() const{
    return m_message_isSet;
}

bool OAILineProtocolLengthError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAILineProtocolLengthError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineProtocolLengthError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_max_length_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
