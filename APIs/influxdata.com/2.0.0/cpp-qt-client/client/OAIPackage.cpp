/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackage::OAIPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackage::OAIPackage() {
    this->initializeModel();
}

OAIPackage::~OAIPackage() {}

void OAIPackage::initializeModel() {

    m_files_isSet = false;
    m_files_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackage::fromJsonObject(QJsonObject json) {

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIFile> OAIPackage::getFiles() const {
    return m_files;
}
void OAIPackage::setFiles(const QList<OAIFile> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIPackage::is_files_Set() const{
    return m_files_isSet;
}

bool OAIPackage::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIPackage::getPackage() const {
    return m_package;
}
void OAIPackage::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIPackage::is_package_Set() const{
    return m_package_isSet;
}

bool OAIPackage::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIPackage::getPath() const {
    return m_path;
}
void OAIPackage::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPackage::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPackage::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPackage::getType() const {
    return m_type;
}
void OAIPackage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPackage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPackage::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
