/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchRetentionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchRetentionRule::OAIPatchRetentionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchRetentionRule::OAIPatchRetentionRule() {
    this->initializeModel();
}

OAIPatchRetentionRule::~OAIPatchRetentionRule() {}

void OAIPatchRetentionRule::initializeModel() {

    m_every_seconds_isSet = false;
    m_every_seconds_isValid = false;

    m_shard_group_duration_seconds_isSet = false;
    m_shard_group_duration_seconds_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPatchRetentionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchRetentionRule::fromJsonObject(QJsonObject json) {

    m_every_seconds_isValid = ::OpenAPI::fromJsonValue(m_every_seconds, json[QString("everySeconds")]);
    m_every_seconds_isSet = !json[QString("everySeconds")].isNull() && m_every_seconds_isValid;

    m_shard_group_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_shard_group_duration_seconds, json[QString("shardGroupDurationSeconds")]);
    m_shard_group_duration_seconds_isSet = !json[QString("shardGroupDurationSeconds")].isNull() && m_shard_group_duration_seconds_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPatchRetentionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchRetentionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_every_seconds_isSet) {
        obj.insert(QString("everySeconds"), ::OpenAPI::toJsonValue(m_every_seconds));
    }
    if (m_shard_group_duration_seconds_isSet) {
        obj.insert(QString("shardGroupDurationSeconds"), ::OpenAPI::toJsonValue(m_shard_group_duration_seconds));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAIPatchRetentionRule::getEverySeconds() const {
    return m_every_seconds;
}
void OAIPatchRetentionRule::setEverySeconds(const qint64 &every_seconds) {
    m_every_seconds = every_seconds;
    m_every_seconds_isSet = true;
}

bool OAIPatchRetentionRule::is_every_seconds_Set() const{
    return m_every_seconds_isSet;
}

bool OAIPatchRetentionRule::is_every_seconds_Valid() const{
    return m_every_seconds_isValid;
}

qint64 OAIPatchRetentionRule::getShardGroupDurationSeconds() const {
    return m_shard_group_duration_seconds;
}
void OAIPatchRetentionRule::setShardGroupDurationSeconds(const qint64 &shard_group_duration_seconds) {
    m_shard_group_duration_seconds = shard_group_duration_seconds;
    m_shard_group_duration_seconds_isSet = true;
}

bool OAIPatchRetentionRule::is_shard_group_duration_seconds_Set() const{
    return m_shard_group_duration_seconds_isSet;
}

bool OAIPatchRetentionRule::is_shard_group_duration_seconds_Valid() const{
    return m_shard_group_duration_seconds_isValid;
}

QString OAIPatchRetentionRule::getType() const {
    return m_type;
}
void OAIPatchRetentionRule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPatchRetentionRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPatchRetentionRule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPatchRetentionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_every_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_group_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchRetentionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
