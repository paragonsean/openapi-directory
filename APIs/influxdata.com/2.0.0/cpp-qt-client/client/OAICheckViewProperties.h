/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICheckViewProperties.h
 *
 * 
 */

#ifndef OAICheckViewProperties_H
#define OAICheckViewProperties_H

#include <QJsonObject>

#include "OAICheck.h"
#include "OAIDashboardColor.h"
#include "OAIDashboardQuery.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICheck;
class OAIDashboardColor;
class OAIDashboardQuery;

class OAICheckViewProperties : public OAIObject {
public:
    OAICheckViewProperties();
    OAICheckViewProperties(QString json);
    ~OAICheckViewProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICheck getCheck() const;
    void setCheck(const OAICheck &check);
    bool is_check_Set() const;
    bool is_check_Valid() const;

    QString getCheckId() const;
    void setCheckId(const QString &check_id);
    bool is_check_id_Set() const;
    bool is_check_id_Valid() const;

    QList<OAIDashboardColor> getColors() const;
    void setColors(const QList<OAIDashboardColor> &colors);
    bool is_colors_Set() const;
    bool is_colors_Valid() const;

    bool isLegendColorizeRows() const;
    void setLegendColorizeRows(const bool &legend_colorize_rows);
    bool is_legend_colorize_rows_Set() const;
    bool is_legend_colorize_rows_Valid() const;

    bool isLegendHide() const;
    void setLegendHide(const bool &legend_hide);
    bool is_legend_hide_Set() const;
    bool is_legend_hide_Valid() const;

    float getLegendOpacity() const;
    void setLegendOpacity(const float &legend_opacity);
    bool is_legend_opacity_Set() const;
    bool is_legend_opacity_Valid() const;

    qint32 getLegendOrientationThreshold() const;
    void setLegendOrientationThreshold(const qint32 &legend_orientation_threshold);
    bool is_legend_orientation_threshold_Set() const;
    bool is_legend_orientation_threshold_Valid() const;

    QList<OAIDashboardQuery> getQueries() const;
    void setQueries(const QList<OAIDashboardQuery> &queries);
    bool is_queries_Set() const;
    bool is_queries_Valid() const;

    QString getShape() const;
    void setShape(const QString &shape);
    bool is_shape_Set() const;
    bool is_shape_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICheck m_check;
    bool m_check_isSet;
    bool m_check_isValid;

    QString m_check_id;
    bool m_check_id_isSet;
    bool m_check_id_isValid;

    QList<OAIDashboardColor> m_colors;
    bool m_colors_isSet;
    bool m_colors_isValid;

    bool m_legend_colorize_rows;
    bool m_legend_colorize_rows_isSet;
    bool m_legend_colorize_rows_isValid;

    bool m_legend_hide;
    bool m_legend_hide_isSet;
    bool m_legend_hide_isValid;

    float m_legend_opacity;
    bool m_legend_opacity_isSet;
    bool m_legend_opacity_isValid;

    qint32 m_legend_orientation_threshold;
    bool m_legend_orientation_threshold_isSet;
    bool m_legend_orientation_threshold_isValid;

    QList<OAIDashboardQuery> m_queries;
    bool m_queries_isSet;
    bool m_queries_isValid;

    QString m_shape;
    bool m_shape_isSet;
    bool m_shape_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICheckViewProperties)

#endif // OAICheckViewProperties_H
