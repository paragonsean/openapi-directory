/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionExpression::OAIFunctionExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionExpression::OAIFunctionExpression() {
    this->initializeModel();
}

OAIFunctionExpression::~OAIFunctionExpression() {}

void OAIFunctionExpression::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFunctionExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionExpression::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFunctionExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_body.isSet()) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAINode OAIFunctionExpression::getBody() const {
    return m_body;
}
void OAIFunctionExpression::setBody(const OAINode &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIFunctionExpression::is_body_Set() const{
    return m_body_isSet;
}

bool OAIFunctionExpression::is_body_Valid() const{
    return m_body_isValid;
}

QList<OAIProperty> OAIFunctionExpression::getParams() const {
    return m_params;
}
void OAIFunctionExpression::setParams(const QList<OAIProperty> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIFunctionExpression::is_params_Set() const{
    return m_params_isSet;
}

bool OAIFunctionExpression::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIFunctionExpression::getType() const {
    return m_type;
}
void OAIFunctionExpression::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFunctionExpression::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFunctionExpression::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFunctionExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
