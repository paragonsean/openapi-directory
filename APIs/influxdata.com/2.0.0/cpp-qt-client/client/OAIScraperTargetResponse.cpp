/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScraperTargetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScraperTargetResponse::OAIScraperTargetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScraperTargetResponse::OAIScraperTargetResponse() {
    this->initializeModel();
}

OAIScraperTargetResponse::~OAIScraperTargetResponse() {}

void OAIScraperTargetResponse::initializeModel() {

    m_allow_insecure_isSet = false;
    m_allow_insecure_isValid = false;

    m_bucket_id_isSet = false;
    m_bucket_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;
}

void OAIScraperTargetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScraperTargetResponse::fromJsonObject(QJsonObject json) {

    m_allow_insecure_isValid = ::OpenAPI::fromJsonValue(m_allow_insecure, json[QString("allowInsecure")]);
    m_allow_insecure_isSet = !json[QString("allowInsecure")].isNull() && m_allow_insecure_isValid;

    m_bucket_id_isValid = ::OpenAPI::fromJsonValue(m_bucket_id, json[QString("bucketID")]);
    m_bucket_id_isSet = !json[QString("bucketID")].isNull() && m_bucket_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;
}

QString OAIScraperTargetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScraperTargetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_insecure_isSet) {
        obj.insert(QString("allowInsecure"), ::OpenAPI::toJsonValue(m_allow_insecure));
    }
    if (m_bucket_id_isSet) {
        obj.insert(QString("bucketID"), ::OpenAPI::toJsonValue(m_bucket_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    return obj;
}

bool OAIScraperTargetResponse::isAllowInsecure() const {
    return m_allow_insecure;
}
void OAIScraperTargetResponse::setAllowInsecure(const bool &allow_insecure) {
    m_allow_insecure = allow_insecure;
    m_allow_insecure_isSet = true;
}

bool OAIScraperTargetResponse::is_allow_insecure_Set() const{
    return m_allow_insecure_isSet;
}

bool OAIScraperTargetResponse::is_allow_insecure_Valid() const{
    return m_allow_insecure_isValid;
}

QString OAIScraperTargetResponse::getBucketId() const {
    return m_bucket_id;
}
void OAIScraperTargetResponse::setBucketId(const QString &bucket_id) {
    m_bucket_id = bucket_id;
    m_bucket_id_isSet = true;
}

bool OAIScraperTargetResponse::is_bucket_id_Set() const{
    return m_bucket_id_isSet;
}

bool OAIScraperTargetResponse::is_bucket_id_Valid() const{
    return m_bucket_id_isValid;
}

QString OAIScraperTargetResponse::getName() const {
    return m_name;
}
void OAIScraperTargetResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScraperTargetResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScraperTargetResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIScraperTargetResponse::getOrgId() const {
    return m_org_id;
}
void OAIScraperTargetResponse::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIScraperTargetResponse::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIScraperTargetResponse::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIScraperTargetResponse::getType() const {
    return m_type;
}
void OAIScraperTargetResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScraperTargetResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScraperTargetResponse::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIScraperTargetResponse::getUrl() const {
    return m_url;
}
void OAIScraperTargetResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIScraperTargetResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIScraperTargetResponse::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIScraperTargetResponse::getBucket() const {
    return m_bucket;
}
void OAIScraperTargetResponse::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIScraperTargetResponse::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIScraperTargetResponse::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIScraperTargetResponse::getId() const {
    return m_id;
}
void OAIScraperTargetResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScraperTargetResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScraperTargetResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIScraperTargetResponse_allOf_links OAIScraperTargetResponse::getLinks() const {
    return m_links;
}
void OAIScraperTargetResponse::setLinks(const OAIScraperTargetResponse_allOf_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIScraperTargetResponse::is_links_Set() const{
    return m_links_isSet;
}

bool OAIScraperTargetResponse::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIScraperTargetResponse::getOrg() const {
    return m_org;
}
void OAIScraperTargetResponse::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIScraperTargetResponse::is_org_Set() const{
    return m_org_isSet;
}

bool OAIScraperTargetResponse::is_org_Valid() const{
    return m_org_isValid;
}

bool OAIScraperTargetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_insecure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScraperTargetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
