/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoHeatMapViewLayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoHeatMapViewLayer::OAIGeoHeatMapViewLayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoHeatMapViewLayer::OAIGeoHeatMapViewLayer() {
    this->initializeModel();
}

OAIGeoHeatMapViewLayer::~OAIGeoHeatMapViewLayer() {}

void OAIGeoHeatMapViewLayer::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_blur_isSet = false;
    m_blur_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_intensity_dimension_isSet = false;
    m_intensity_dimension_isValid = false;

    m_intensity_field_isSet = false;
    m_intensity_field_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;
}

void OAIGeoHeatMapViewLayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoHeatMapViewLayer::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_blur_isValid = ::OpenAPI::fromJsonValue(m_blur, json[QString("blur")]);
    m_blur_isSet = !json[QString("blur")].isNull() && m_blur_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_intensity_dimension_isValid = ::OpenAPI::fromJsonValue(m_intensity_dimension, json[QString("intensityDimension")]);
    m_intensity_dimension_isSet = !json[QString("intensityDimension")].isNull() && m_intensity_dimension_isValid;

    m_intensity_field_isValid = ::OpenAPI::fromJsonValue(m_intensity_field, json[QString("intensityField")]);
    m_intensity_field_isSet = !json[QString("intensityField")].isNull() && m_intensity_field_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;
}

QString OAIGeoHeatMapViewLayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoHeatMapViewLayer::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_blur_isSet) {
        obj.insert(QString("blur"), ::OpenAPI::toJsonValue(m_blur));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_intensity_dimension.isSet()) {
        obj.insert(QString("intensityDimension"), ::OpenAPI::toJsonValue(m_intensity_dimension));
    }
    if (m_intensity_field_isSet) {
        obj.insert(QString("intensityField"), ::OpenAPI::toJsonValue(m_intensity_field));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    return obj;
}

QString OAIGeoHeatMapViewLayer::getType() const {
    return m_type;
}
void OAIGeoHeatMapViewLayer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGeoHeatMapViewLayer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGeoHeatMapViewLayer::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIGeoHeatMapViewLayer::getBlur() const {
    return m_blur;
}
void OAIGeoHeatMapViewLayer::setBlur(const qint32 &blur) {
    m_blur = blur;
    m_blur_isSet = true;
}

bool OAIGeoHeatMapViewLayer::is_blur_Set() const{
    return m_blur_isSet;
}

bool OAIGeoHeatMapViewLayer::is_blur_Valid() const{
    return m_blur_isValid;
}

QList<OAIDashboardColor> OAIGeoHeatMapViewLayer::getColors() const {
    return m_colors;
}
void OAIGeoHeatMapViewLayer::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIGeoHeatMapViewLayer::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIGeoHeatMapViewLayer::is_colors_Valid() const{
    return m_colors_isValid;
}

OAIAxis OAIGeoHeatMapViewLayer::getIntensityDimension() const {
    return m_intensity_dimension;
}
void OAIGeoHeatMapViewLayer::setIntensityDimension(const OAIAxis &intensity_dimension) {
    m_intensity_dimension = intensity_dimension;
    m_intensity_dimension_isSet = true;
}

bool OAIGeoHeatMapViewLayer::is_intensity_dimension_Set() const{
    return m_intensity_dimension_isSet;
}

bool OAIGeoHeatMapViewLayer::is_intensity_dimension_Valid() const{
    return m_intensity_dimension_isValid;
}

QString OAIGeoHeatMapViewLayer::getIntensityField() const {
    return m_intensity_field;
}
void OAIGeoHeatMapViewLayer::setIntensityField(const QString &intensity_field) {
    m_intensity_field = intensity_field;
    m_intensity_field_isSet = true;
}

bool OAIGeoHeatMapViewLayer::is_intensity_field_Set() const{
    return m_intensity_field_isSet;
}

bool OAIGeoHeatMapViewLayer::is_intensity_field_Valid() const{
    return m_intensity_field_isValid;
}

qint32 OAIGeoHeatMapViewLayer::getRadius() const {
    return m_radius;
}
void OAIGeoHeatMapViewLayer::setRadius(const qint32 &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIGeoHeatMapViewLayer::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIGeoHeatMapViewLayer::is_radius_Valid() const{
    return m_radius_isValid;
}

bool OAIGeoHeatMapViewLayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blur_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_intensity_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intensity_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoHeatMapViewLayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_blur_isValid && m_colors_isValid && m_intensity_dimension_isValid && m_intensity_field_isValid && m_radius_isValid && true;
}

} // namespace OpenAPI
