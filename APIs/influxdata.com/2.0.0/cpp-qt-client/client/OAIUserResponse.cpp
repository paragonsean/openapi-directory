/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserResponse::OAIUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserResponse::OAIUserResponse() {
    this->initializeModel();
}

OAIUserResponse::~OAIUserResponse() {}

void OAIUserResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oauth_id_isSet = false;
    m_oauth_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_oauth_id_isValid = ::OpenAPI::fromJsonValue(m_oauth_id, json[QString("oauthID")]);
    m_oauth_id_isSet = !json[QString("oauthID")].isNull() && m_oauth_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oauth_id_isSet) {
        obj.insert(QString("oauthID"), ::OpenAPI::toJsonValue(m_oauth_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUserResponse::getId() const {
    return m_id;
}
void OAIUserResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIUserResponse_links OAIUserResponse::getLinks() const {
    return m_links;
}
void OAIUserResponse::setLinks(const OAIUserResponse_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIUserResponse::is_links_Set() const{
    return m_links_isSet;
}

bool OAIUserResponse::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIUserResponse::getName() const {
    return m_name;
}
void OAIUserResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserResponse::getOauthId() const {
    return m_oauth_id;
}
void OAIUserResponse::setOauthId(const QString &oauth_id) {
    m_oauth_id = oauth_id;
    m_oauth_id_isSet = true;
}

bool OAIUserResponse::is_oauth_id_Set() const{
    return m_oauth_id_isSet;
}

bool OAIUserResponse::is_oauth_id_Valid() const{
    return m_oauth_id_isValid;
}

QString OAIUserResponse::getStatus() const {
    return m_status;
}
void OAIUserResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
