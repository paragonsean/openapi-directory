/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDashboardsApi::OAIDashboardsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDashboardsApi::~OAIDashboardsApi() {
}

void OAIDashboardsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/api/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteDashboardsID", defaultConf);
    _serverIndices.insert("deleteDashboardsID", 0);
    _serverConfigs.insert("deleteDashboardsIDCellsID", defaultConf);
    _serverIndices.insert("deleteDashboardsIDCellsID", 0);
    _serverConfigs.insert("deleteDashboardsIDLabelsID", defaultConf);
    _serverIndices.insert("deleteDashboardsIDLabelsID", 0);
    _serverConfigs.insert("deleteDashboardsIDMembersID", defaultConf);
    _serverIndices.insert("deleteDashboardsIDMembersID", 0);
    _serverConfigs.insert("deleteDashboardsIDOwnersID", defaultConf);
    _serverIndices.insert("deleteDashboardsIDOwnersID", 0);
    _serverConfigs.insert("getDashboards", defaultConf);
    _serverIndices.insert("getDashboards", 0);
    _serverConfigs.insert("getDashboardsID", defaultConf);
    _serverIndices.insert("getDashboardsID", 0);
    _serverConfigs.insert("getDashboardsIDCellsIDView", defaultConf);
    _serverIndices.insert("getDashboardsIDCellsIDView", 0);
    _serverConfigs.insert("getDashboardsIDLabels", defaultConf);
    _serverIndices.insert("getDashboardsIDLabels", 0);
    _serverConfigs.insert("getDashboardsIDMembers", defaultConf);
    _serverIndices.insert("getDashboardsIDMembers", 0);
    _serverConfigs.insert("getDashboardsIDOwners", defaultConf);
    _serverIndices.insert("getDashboardsIDOwners", 0);
    _serverConfigs.insert("patchDashboardsID", defaultConf);
    _serverIndices.insert("patchDashboardsID", 0);
    _serverConfigs.insert("patchDashboardsIDCellsIDView", defaultConf);
    _serverIndices.insert("patchDashboardsIDCellsIDView", 0);
    _serverConfigs.insert("patchDashboardsIDCellsID", defaultConf);
    _serverIndices.insert("patchDashboardsIDCellsID", 0);
    _serverConfigs.insert("postDashboards", defaultConf);
    _serverIndices.insert("postDashboards", 0);
    _serverConfigs.insert("postDashboardsIDCells", defaultConf);
    _serverIndices.insert("postDashboardsIDCells", 0);
    _serverConfigs.insert("postDashboardsIDLabels", defaultConf);
    _serverIndices.insert("postDashboardsIDLabels", 0);
    _serverConfigs.insert("postDashboardsIDMembers", defaultConf);
    _serverIndices.insert("postDashboardsIDMembers", 0);
    _serverConfigs.insert("postDashboardsIDOwners", defaultConf);
    _serverIndices.insert("postDashboardsIDOwners", 0);
    _serverConfigs.insert("putDashboardsIDCells", defaultConf);
    _serverIndices.insert("putDashboardsIDCells", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDashboardsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDashboardsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDashboardsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDashboardsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDashboardsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDashboardsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDashboardsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDashboardsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDashboardsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDashboardsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDashboardsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDashboardsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDashboardsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDashboardsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDashboardsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDashboardsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDashboardsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDashboardsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDashboardsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDashboardsApi::deleteDashboardsID(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteDashboardsID"][_serverIndices.value("deleteDashboardsID")].URL()+"/dashboards/{dashboardID}");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::deleteDashboardsIDCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::deleteDashboardsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteDashboardsIDSignal();
        Q_EMIT deleteDashboardsIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteDashboardsIDSignalE(error_type, error_str);
        Q_EMIT deleteDashboardsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteDashboardsIDSignalError(error_type, error_str);
        Q_EMIT deleteDashboardsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::deleteDashboardsIDCellsID(const QString &dashboard_id, const QString &cell_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteDashboardsIDCellsID"][_serverIndices.value("deleteDashboardsIDCellsID")].URL()+"/dashboards/{dashboardID}/cells/{cellID}");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    
    {
        QString cell_idPathParam("{");
        cell_idPathParam.append("cellID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cellID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cellID"+pathSuffix : pathPrefix;
        fullPath.replace(cell_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cell_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::deleteDashboardsIDCellsIDCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::deleteDashboardsIDCellsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteDashboardsIDCellsIDSignal();
        Q_EMIT deleteDashboardsIDCellsIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteDashboardsIDCellsIDSignalE(error_type, error_str);
        Q_EMIT deleteDashboardsIDCellsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteDashboardsIDCellsIDSignalError(error_type, error_str);
        Q_EMIT deleteDashboardsIDCellsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::deleteDashboardsIDLabelsID(const QString &dashboard_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteDashboardsIDLabelsID"][_serverIndices.value("deleteDashboardsIDLabelsID")].URL()+"/dashboards/{dashboardID}/labels/{labelID}");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    
    {
        QString label_idPathParam("{");
        label_idPathParam.append("labelID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "labelID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"labelID"+pathSuffix : pathPrefix;
        fullPath.replace(label_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(label_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::deleteDashboardsIDLabelsIDCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::deleteDashboardsIDLabelsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteDashboardsIDLabelsIDSignal();
        Q_EMIT deleteDashboardsIDLabelsIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteDashboardsIDLabelsIDSignalE(error_type, error_str);
        Q_EMIT deleteDashboardsIDLabelsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteDashboardsIDLabelsIDSignalError(error_type, error_str);
        Q_EMIT deleteDashboardsIDLabelsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::deleteDashboardsIDMembersID(const QString &user_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteDashboardsIDMembersID"][_serverIndices.value("deleteDashboardsIDMembersID")].URL()+"/dashboards/{dashboardID}/members/{userID}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userID"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::deleteDashboardsIDMembersIDCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::deleteDashboardsIDMembersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteDashboardsIDMembersIDSignal();
        Q_EMIT deleteDashboardsIDMembersIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteDashboardsIDMembersIDSignalE(error_type, error_str);
        Q_EMIT deleteDashboardsIDMembersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteDashboardsIDMembersIDSignalError(error_type, error_str);
        Q_EMIT deleteDashboardsIDMembersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::deleteDashboardsIDOwnersID(const QString &user_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["deleteDashboardsIDOwnersID"][_serverIndices.value("deleteDashboardsIDOwnersID")].URL()+"/dashboards/{dashboardID}/owners/{userID}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userID"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::deleteDashboardsIDOwnersIDCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::deleteDashboardsIDOwnersIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteDashboardsIDOwnersIDSignal();
        Q_EMIT deleteDashboardsIDOwnersIDSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteDashboardsIDOwnersIDSignalE(error_type, error_str);
        Q_EMIT deleteDashboardsIDOwnersIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteDashboardsIDOwnersIDSignalError(error_type, error_str);
        Q_EMIT deleteDashboardsIDOwnersIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::getDashboards(const ::OpenAPI::OptionalParam<QString> &zap_trace_span, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<bool> &descending, const ::OpenAPI::OptionalParam<QString> &owner, const ::OpenAPI::OptionalParam<QString> &sort_by, const ::OpenAPI::OptionalParam<QList<QString>> &id, const ::OpenAPI::OptionalParam<QString> &org_id, const ::OpenAPI::OptionalParam<QString> &org) {
    QString fullPath = QString(_serverConfigs["getDashboards"][_serverIndices.value("getDashboards")].URL()+"/dashboards");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (descending.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "descending", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("descending")).append(querySuffix).append(QUrl::toPercentEncoding(descending.stringValue()));
    }
    if (owner.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "owner", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("owner")).append(querySuffix).append(QUrl::toPercentEncoding(owner.stringValue()));
    }
    if (sort_by.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sortBy", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sortBy")).append(querySuffix).append(QUrl::toPercentEncoding(sort_by.stringValue()));
    }
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (id.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                for (QString t : id.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("id=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("id").append(querySuffix);
                qint32 count = 0;
                for (QString t : id.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (org_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "orgID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("orgID")).append(querySuffix).append(QUrl::toPercentEncoding(org_id.stringValue()));
    }
    if (org.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "org", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("org")).append(querySuffix).append(QUrl::toPercentEncoding(org.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::getDashboardsCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::getDashboardsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDashboards output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDashboardsSignal(output);
        Q_EMIT getDashboardsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDashboardsSignalE(output, error_type, error_str);
        Q_EMIT getDashboardsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDashboardsSignalError(output, error_type, error_str);
        Q_EMIT getDashboardsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::getDashboardsID(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span, const ::OpenAPI::OptionalParam<QString> &include) {
    QString fullPath = QString(_serverConfigs["getDashboardsID"][_serverIndices.value("getDashboardsID")].URL()+"/dashboards/{dashboardID}");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (include.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include")).append(querySuffix).append(QUrl::toPercentEncoding(include.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::getDashboardsIDCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::getDashboardsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPostDashboards_201_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDashboardsIDSignal(output);
        Q_EMIT getDashboardsIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDashboardsIDSignalE(output, error_type, error_str);
        Q_EMIT getDashboardsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDashboardsIDSignalError(output, error_type, error_str);
        Q_EMIT getDashboardsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::getDashboardsIDCellsIDView(const QString &dashboard_id, const QString &cell_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getDashboardsIDCellsIDView"][_serverIndices.value("getDashboardsIDCellsIDView")].URL()+"/dashboards/{dashboardID}/cells/{cellID}/view");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    
    {
        QString cell_idPathParam("{");
        cell_idPathParam.append("cellID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cellID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cellID"+pathSuffix : pathPrefix;
        fullPath.replace(cell_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cell_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::getDashboardsIDCellsIDViewCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::getDashboardsIDCellsIDViewCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIView output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDashboardsIDCellsIDViewSignal(output);
        Q_EMIT getDashboardsIDCellsIDViewSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDashboardsIDCellsIDViewSignalE(output, error_type, error_str);
        Q_EMIT getDashboardsIDCellsIDViewSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDashboardsIDCellsIDViewSignalError(output, error_type, error_str);
        Q_EMIT getDashboardsIDCellsIDViewSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::getDashboardsIDLabels(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getDashboardsIDLabels"][_serverIndices.value("getDashboardsIDLabels")].URL()+"/dashboards/{dashboardID}/labels");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::getDashboardsIDLabelsCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::getDashboardsIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDashboardsIDLabelsSignal(output);
        Q_EMIT getDashboardsIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDashboardsIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT getDashboardsIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDashboardsIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT getDashboardsIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::getDashboardsIDMembers(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getDashboardsIDMembers"][_serverIndices.value("getDashboardsIDMembers")].URL()+"/dashboards/{dashboardID}/members");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::getDashboardsIDMembersCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::getDashboardsIDMembersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceMembers output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDashboardsIDMembersSignal(output);
        Q_EMIT getDashboardsIDMembersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDashboardsIDMembersSignalE(output, error_type, error_str);
        Q_EMIT getDashboardsIDMembersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDashboardsIDMembersSignalError(output, error_type, error_str);
        Q_EMIT getDashboardsIDMembersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::getDashboardsIDOwners(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["getDashboardsIDOwners"][_serverIndices.value("getDashboardsIDOwners")].URL()+"/dashboards/{dashboardID}/owners");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::getDashboardsIDOwnersCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::getDashboardsIDOwnersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceOwners output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDashboardsIDOwnersSignal(output);
        Q_EMIT getDashboardsIDOwnersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDashboardsIDOwnersSignalE(output, error_type, error_str);
        Q_EMIT getDashboardsIDOwnersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDashboardsIDOwnersSignalError(output, error_type, error_str);
        Q_EMIT getDashboardsIDOwnersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::patchDashboardsID(const QString &dashboard_id, const OAIPatchDashboardRequest &oai_patch_dashboard_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["patchDashboardsID"][_serverIndices.value("patchDashboardsID")].URL()+"/dashboards/{dashboardID}");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_patch_dashboard_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::patchDashboardsIDCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::patchDashboardsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDashboard output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchDashboardsIDSignal(output);
        Q_EMIT patchDashboardsIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchDashboardsIDSignalE(output, error_type, error_str);
        Q_EMIT patchDashboardsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchDashboardsIDSignalError(output, error_type, error_str);
        Q_EMIT patchDashboardsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::patchDashboardsIDCellsIDView(const QString &dashboard_id, const QString &cell_id, const OAIView &oai_view, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["patchDashboardsIDCellsIDView"][_serverIndices.value("patchDashboardsIDCellsIDView")].URL()+"/dashboards/{dashboardID}/cells/{cellID}/view");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    
    {
        QString cell_idPathParam("{");
        cell_idPathParam.append("cellID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cellID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cellID"+pathSuffix : pathPrefix;
        fullPath.replace(cell_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cell_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_view.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::patchDashboardsIDCellsIDViewCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::patchDashboardsIDCellsIDViewCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIView output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchDashboardsIDCellsIDViewSignal(output);
        Q_EMIT patchDashboardsIDCellsIDViewSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchDashboardsIDCellsIDViewSignalE(output, error_type, error_str);
        Q_EMIT patchDashboardsIDCellsIDViewSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchDashboardsIDCellsIDViewSignalError(output, error_type, error_str);
        Q_EMIT patchDashboardsIDCellsIDViewSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::patchDashboardsIDCellsID(const QString &dashboard_id, const QString &cell_id, const OAICellUpdate &oai_cell_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["patchDashboardsIDCellsID"][_serverIndices.value("patchDashboardsIDCellsID")].URL()+"/dashboards/{dashboardID}/cells/{cellID}");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    
    {
        QString cell_idPathParam("{");
        cell_idPathParam.append("cellID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cellID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cellID"+pathSuffix : pathPrefix;
        fullPath.replace(cell_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cell_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_cell_update.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::patchDashboardsIDCellsIDCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::patchDashboardsIDCellsIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICell output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchDashboardsIDCellsIDSignal(output);
        Q_EMIT patchDashboardsIDCellsIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchDashboardsIDCellsIDSignalE(output, error_type, error_str);
        Q_EMIT patchDashboardsIDCellsIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchDashboardsIDCellsIDSignalError(output, error_type, error_str);
        Q_EMIT patchDashboardsIDCellsIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::postDashboards(const OAICreateDashboardRequest &oai_create_dashboard_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postDashboards"][_serverIndices.value("postDashboards")].URL()+"/dashboards");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_dashboard_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::postDashboardsCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::postDashboardsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPostDashboards_201_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postDashboardsSignal(output);
        Q_EMIT postDashboardsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postDashboardsSignalE(output, error_type, error_str);
        Q_EMIT postDashboardsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postDashboardsSignalError(output, error_type, error_str);
        Q_EMIT postDashboardsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::postDashboardsIDCells(const QString &dashboard_id, const OAICreateCell &oai_create_cell, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postDashboardsIDCells"][_serverIndices.value("postDashboardsIDCells")].URL()+"/dashboards/{dashboardID}/cells");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_cell.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::postDashboardsIDCellsCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::postDashboardsIDCellsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICell output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postDashboardsIDCellsSignal(output);
        Q_EMIT postDashboardsIDCellsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postDashboardsIDCellsSignalE(output, error_type, error_str);
        Q_EMIT postDashboardsIDCellsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postDashboardsIDCellsSignalError(output, error_type, error_str);
        Q_EMIT postDashboardsIDCellsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::postDashboardsIDLabels(const QString &dashboard_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postDashboardsIDLabels"][_serverIndices.value("postDashboardsIDLabels")].URL()+"/dashboards/{dashboardID}/labels");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_label_mapping.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::postDashboardsIDLabelsCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::postDashboardsIDLabelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILabelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postDashboardsIDLabelsSignal(output);
        Q_EMIT postDashboardsIDLabelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postDashboardsIDLabelsSignalE(output, error_type, error_str);
        Q_EMIT postDashboardsIDLabelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postDashboardsIDLabelsSignalError(output, error_type, error_str);
        Q_EMIT postDashboardsIDLabelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::postDashboardsIDMembers(const QString &dashboard_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postDashboardsIDMembers"][_serverIndices.value("postDashboardsIDMembers")].URL()+"/dashboards/{dashboardID}/members");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_add_resource_member_request_body.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::postDashboardsIDMembersCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::postDashboardsIDMembersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceMember output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postDashboardsIDMembersSignal(output);
        Q_EMIT postDashboardsIDMembersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postDashboardsIDMembersSignalE(output, error_type, error_str);
        Q_EMIT postDashboardsIDMembersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postDashboardsIDMembersSignalError(output, error_type, error_str);
        Q_EMIT postDashboardsIDMembersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::postDashboardsIDOwners(const QString &dashboard_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["postDashboardsIDOwners"][_serverIndices.value("postDashboardsIDOwners")].URL()+"/dashboards/{dashboardID}/owners");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_add_resource_member_request_body.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::postDashboardsIDOwnersCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::postDashboardsIDOwnersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIResourceOwner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postDashboardsIDOwnersSignal(output);
        Q_EMIT postDashboardsIDOwnersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postDashboardsIDOwnersSignalE(output, error_type, error_str);
        Q_EMIT postDashboardsIDOwnersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postDashboardsIDOwnersSignalError(output, error_type, error_str);
        Q_EMIT postDashboardsIDOwnersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::putDashboardsIDCells(const QString &dashboard_id, const QList<OAICell> &oai_cell, const ::OpenAPI::OptionalParam<QString> &zap_trace_span) {
    QString fullPath = QString(_serverConfigs["putDashboardsIDCells"][_serverIndices.value("putDashboardsIDCells")].URL()+"/dashboards/{dashboardID}/cells");
    
    
    {
        QString dashboard_idPathParam("{");
        dashboard_idPathParam.append("dashboardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dashboardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dashboardID"+pathSuffix : pathPrefix;
        fullPath.replace(dashboard_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dashboard_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_cell).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    if (zap_trace_span.hasValue())
    {
        if (!::OpenAPI::toStringValue(zap_trace_span.value()).isEmpty()) {
            input.headers.insert("Zap-Trace-Span", ::OpenAPI::toStringValue(zap_trace_span.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDashboardsApi::putDashboardsIDCellsCallback);
    connect(this, &OAIDashboardsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDashboardsApi::putDashboardsIDCellsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDashboard output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT putDashboardsIDCellsSignal(output);
        Q_EMIT putDashboardsIDCellsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT putDashboardsIDCellsSignalE(output, error_type, error_str);
        Q_EMIT putDashboardsIDCellsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT putDashboardsIDCellsSignalError(output, error_type, error_str);
        Q_EMIT putDashboardsIDCellsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDashboardsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
