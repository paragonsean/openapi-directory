/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummary_diff_tasks_inner_new.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummary_diff_tasks_inner_new::OAITemplateSummary_diff_tasks_inner_new(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummary_diff_tasks_inner_new::OAITemplateSummary_diff_tasks_inner_new() {
    this->initializeModel();
}

OAITemplateSummary_diff_tasks_inner_new::~OAITemplateSummary_diff_tasks_inner_new() {}

void OAITemplateSummary_diff_tasks_inner_new::initializeModel() {

    m_cron_isSet = false;
    m_cron_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_every_isSet = false;
    m_every_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITemplateSummary_diff_tasks_inner_new::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummary_diff_tasks_inner_new::fromJsonObject(QJsonObject json) {

    m_cron_isValid = ::OpenAPI::fromJsonValue(m_cron, json[QString("cron")]);
    m_cron_isSet = !json[QString("cron")].isNull() && m_cron_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_every_isValid = ::OpenAPI::fromJsonValue(m_every, json[QString("every")]);
    m_every_isSet = !json[QString("every")].isNull() && m_every_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITemplateSummary_diff_tasks_inner_new::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummary_diff_tasks_inner_new::asJsonObject() const {
    QJsonObject obj;
    if (m_cron_isSet) {
        obj.insert(QString("cron"), ::OpenAPI::toJsonValue(m_cron));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_every_isSet) {
        obj.insert(QString("every"), ::OpenAPI::toJsonValue(m_every));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAITemplateSummary_diff_tasks_inner_new::getCron() const {
    return m_cron;
}
void OAITemplateSummary_diff_tasks_inner_new::setCron(const QString &cron) {
    m_cron = cron;
    m_cron_isSet = true;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_cron_Set() const{
    return m_cron_isSet;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_cron_Valid() const{
    return m_cron_isValid;
}

QString OAITemplateSummary_diff_tasks_inner_new::getDescription() const {
    return m_description;
}
void OAITemplateSummary_diff_tasks_inner_new::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_description_Set() const{
    return m_description_isSet;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITemplateSummary_diff_tasks_inner_new::getEvery() const {
    return m_every;
}
void OAITemplateSummary_diff_tasks_inner_new::setEvery(const QString &every) {
    m_every = every;
    m_every_isSet = true;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_every_Set() const{
    return m_every_isSet;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_every_Valid() const{
    return m_every_isValid;
}

QString OAITemplateSummary_diff_tasks_inner_new::getName() const {
    return m_name;
}
void OAITemplateSummary_diff_tasks_inner_new::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITemplateSummary_diff_tasks_inner_new::getOffset() const {
    return m_offset;
}
void OAITemplateSummary_diff_tasks_inner_new::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAITemplateSummary_diff_tasks_inner_new::getQuery() const {
    return m_query;
}
void OAITemplateSummary_diff_tasks_inner_new::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_query_Set() const{
    return m_query_isSet;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_query_Valid() const{
    return m_query_isValid;
}

QString OAITemplateSummary_diff_tasks_inner_new::getStatus() const {
    return m_status;
}
void OAITemplateSummary_diff_tasks_inner_new::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_status_Set() const{
    return m_status_isSet;
}

bool OAITemplateSummary_diff_tasks_inner_new::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITemplateSummary_diff_tasks_inner_new::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cron_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_every_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummary_diff_tasks_inner_new::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
