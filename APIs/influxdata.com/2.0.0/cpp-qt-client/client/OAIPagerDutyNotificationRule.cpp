/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagerDutyNotificationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagerDutyNotificationRule::OAIPagerDutyNotificationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagerDutyNotificationRule::OAIPagerDutyNotificationRule() {
    this->initializeModel();
}

OAIPagerDutyNotificationRule::~OAIPagerDutyNotificationRule() {}

void OAIPagerDutyNotificationRule::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_id_isSet = false;
    m_endpoint_id_isValid = false;

    m_every_isSet = false;
    m_every_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_run_error_isSet = false;
    m_last_run_error_isValid = false;

    m_last_run_status_isSet = false;
    m_last_run_status_isValid = false;

    m_latest_completed_isSet = false;
    m_latest_completed_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_limit_every_isSet = false;
    m_limit_every_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_runbook_link_isSet = false;
    m_runbook_link_isValid = false;

    m_sleep_until_isSet = false;
    m_sleep_until_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_rules_isSet = false;
    m_status_rules_isValid = false;

    m_tag_rules_isSet = false;
    m_tag_rules_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_message_template_isSet = false;
    m_message_template_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPagerDutyNotificationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagerDutyNotificationRule::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_endpoint_id, json[QString("endpointID")]);
    m_endpoint_id_isSet = !json[QString("endpointID")].isNull() && m_endpoint_id_isValid;

    m_every_isValid = ::OpenAPI::fromJsonValue(m_every, json[QString("every")]);
    m_every_isSet = !json[QString("every")].isNull() && m_every_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_run_error_isValid = ::OpenAPI::fromJsonValue(m_last_run_error, json[QString("lastRunError")]);
    m_last_run_error_isSet = !json[QString("lastRunError")].isNull() && m_last_run_error_isValid;

    m_last_run_status_isValid = ::OpenAPI::fromJsonValue(m_last_run_status, json[QString("lastRunStatus")]);
    m_last_run_status_isSet = !json[QString("lastRunStatus")].isNull() && m_last_run_status_isValid;

    m_latest_completed_isValid = ::OpenAPI::fromJsonValue(m_latest_completed, json[QString("latestCompleted")]);
    m_latest_completed_isSet = !json[QString("latestCompleted")].isNull() && m_latest_completed_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_limit_every_isValid = ::OpenAPI::fromJsonValue(m_limit_every, json[QString("limitEvery")]);
    m_limit_every_isSet = !json[QString("limitEvery")].isNull() && m_limit_every_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerID")]);
    m_owner_id_isSet = !json[QString("ownerID")].isNull() && m_owner_id_isValid;

    m_runbook_link_isValid = ::OpenAPI::fromJsonValue(m_runbook_link, json[QString("runbookLink")]);
    m_runbook_link_isSet = !json[QString("runbookLink")].isNull() && m_runbook_link_isValid;

    m_sleep_until_isValid = ::OpenAPI::fromJsonValue(m_sleep_until, json[QString("sleepUntil")]);
    m_sleep_until_isSet = !json[QString("sleepUntil")].isNull() && m_sleep_until_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_rules_isValid = ::OpenAPI::fromJsonValue(m_status_rules, json[QString("statusRules")]);
    m_status_rules_isSet = !json[QString("statusRules")].isNull() && m_status_rules_isValid;

    m_tag_rules_isValid = ::OpenAPI::fromJsonValue(m_tag_rules, json[QString("tagRules")]);
    m_tag_rules_isSet = !json[QString("tagRules")].isNull() && m_tag_rules_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskID")]);
    m_task_id_isSet = !json[QString("taskID")].isNull() && m_task_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_message_template_isValid = ::OpenAPI::fromJsonValue(m_message_template, json[QString("messageTemplate")]);
    m_message_template_isSet = !json[QString("messageTemplate")].isNull() && m_message_template_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPagerDutyNotificationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagerDutyNotificationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_id_isSet) {
        obj.insert(QString("endpointID"), ::OpenAPI::toJsonValue(m_endpoint_id));
    }
    if (m_every_isSet) {
        obj.insert(QString("every"), ::OpenAPI::toJsonValue(m_every));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_run_error_isSet) {
        obj.insert(QString("lastRunError"), ::OpenAPI::toJsonValue(m_last_run_error));
    }
    if (m_last_run_status_isSet) {
        obj.insert(QString("lastRunStatus"), ::OpenAPI::toJsonValue(m_last_run_status));
    }
    if (m_latest_completed_isSet) {
        obj.insert(QString("latestCompleted"), ::OpenAPI::toJsonValue(m_latest_completed));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_limit_every_isSet) {
        obj.insert(QString("limitEvery"), ::OpenAPI::toJsonValue(m_limit_every));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerID"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_runbook_link_isSet) {
        obj.insert(QString("runbookLink"), ::OpenAPI::toJsonValue(m_runbook_link));
    }
    if (m_sleep_until_isSet) {
        obj.insert(QString("sleepUntil"), ::OpenAPI::toJsonValue(m_sleep_until));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_rules.size() > 0) {
        obj.insert(QString("statusRules"), ::OpenAPI::toJsonValue(m_status_rules));
    }
    if (m_tag_rules.size() > 0) {
        obj.insert(QString("tagRules"), ::OpenAPI::toJsonValue(m_tag_rules));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskID"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_message_template_isSet) {
        obj.insert(QString("messageTemplate"), ::OpenAPI::toJsonValue(m_message_template));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIPagerDutyNotificationRule::getCreatedAt() const {
    return m_created_at;
}
void OAIPagerDutyNotificationRule::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPagerDutyNotificationRule::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPagerDutyNotificationRule::getDescription() const {
    return m_description;
}
void OAIPagerDutyNotificationRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPagerDutyNotificationRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPagerDutyNotificationRule::getEndpointId() const {
    return m_endpoint_id;
}
void OAIPagerDutyNotificationRule::setEndpointId(const QString &endpoint_id) {
    m_endpoint_id = endpoint_id;
    m_endpoint_id_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_endpoint_id_Set() const{
    return m_endpoint_id_isSet;
}

bool OAIPagerDutyNotificationRule::is_endpoint_id_Valid() const{
    return m_endpoint_id_isValid;
}

QString OAIPagerDutyNotificationRule::getEvery() const {
    return m_every;
}
void OAIPagerDutyNotificationRule::setEvery(const QString &every) {
    m_every = every;
    m_every_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_every_Set() const{
    return m_every_isSet;
}

bool OAIPagerDutyNotificationRule::is_every_Valid() const{
    return m_every_isValid;
}

QString OAIPagerDutyNotificationRule::getId() const {
    return m_id;
}
void OAIPagerDutyNotificationRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPagerDutyNotificationRule::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILabel> OAIPagerDutyNotificationRule::getLabels() const {
    return m_labels;
}
void OAIPagerDutyNotificationRule::setLabels(const QList<OAILabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPagerDutyNotificationRule::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPagerDutyNotificationRule::getLastRunError() const {
    return m_last_run_error;
}
void OAIPagerDutyNotificationRule::setLastRunError(const QString &last_run_error) {
    m_last_run_error = last_run_error;
    m_last_run_error_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_last_run_error_Set() const{
    return m_last_run_error_isSet;
}

bool OAIPagerDutyNotificationRule::is_last_run_error_Valid() const{
    return m_last_run_error_isValid;
}

QString OAIPagerDutyNotificationRule::getLastRunStatus() const {
    return m_last_run_status;
}
void OAIPagerDutyNotificationRule::setLastRunStatus(const QString &last_run_status) {
    m_last_run_status = last_run_status;
    m_last_run_status_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_last_run_status_Set() const{
    return m_last_run_status_isSet;
}

bool OAIPagerDutyNotificationRule::is_last_run_status_Valid() const{
    return m_last_run_status_isValid;
}

QDateTime OAIPagerDutyNotificationRule::getLatestCompleted() const {
    return m_latest_completed;
}
void OAIPagerDutyNotificationRule::setLatestCompleted(const QDateTime &latest_completed) {
    m_latest_completed = latest_completed;
    m_latest_completed_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_latest_completed_Set() const{
    return m_latest_completed_isSet;
}

bool OAIPagerDutyNotificationRule::is_latest_completed_Valid() const{
    return m_latest_completed_isValid;
}

qint32 OAIPagerDutyNotificationRule::getLimit() const {
    return m_limit;
}
void OAIPagerDutyNotificationRule::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIPagerDutyNotificationRule::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIPagerDutyNotificationRule::getLimitEvery() const {
    return m_limit_every;
}
void OAIPagerDutyNotificationRule::setLimitEvery(const qint32 &limit_every) {
    m_limit_every = limit_every;
    m_limit_every_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_limit_every_Set() const{
    return m_limit_every_isSet;
}

bool OAIPagerDutyNotificationRule::is_limit_every_Valid() const{
    return m_limit_every_isValid;
}

OAINotificationRuleBase_links OAIPagerDutyNotificationRule::getLinks() const {
    return m_links;
}
void OAIPagerDutyNotificationRule::setLinks(const OAINotificationRuleBase_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPagerDutyNotificationRule::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIPagerDutyNotificationRule::getName() const {
    return m_name;
}
void OAIPagerDutyNotificationRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPagerDutyNotificationRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPagerDutyNotificationRule::getOffset() const {
    return m_offset;
}
void OAIPagerDutyNotificationRule::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPagerDutyNotificationRule::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIPagerDutyNotificationRule::getOrgId() const {
    return m_org_id;
}
void OAIPagerDutyNotificationRule::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIPagerDutyNotificationRule::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIPagerDutyNotificationRule::getOwnerId() const {
    return m_owner_id;
}
void OAIPagerDutyNotificationRule::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIPagerDutyNotificationRule::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIPagerDutyNotificationRule::getRunbookLink() const {
    return m_runbook_link;
}
void OAIPagerDutyNotificationRule::setRunbookLink(const QString &runbook_link) {
    m_runbook_link = runbook_link;
    m_runbook_link_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_runbook_link_Set() const{
    return m_runbook_link_isSet;
}

bool OAIPagerDutyNotificationRule::is_runbook_link_Valid() const{
    return m_runbook_link_isValid;
}

QString OAIPagerDutyNotificationRule::getSleepUntil() const {
    return m_sleep_until;
}
void OAIPagerDutyNotificationRule::setSleepUntil(const QString &sleep_until) {
    m_sleep_until = sleep_until;
    m_sleep_until_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_sleep_until_Set() const{
    return m_sleep_until_isSet;
}

bool OAIPagerDutyNotificationRule::is_sleep_until_Valid() const{
    return m_sleep_until_isValid;
}

OAITaskStatusType OAIPagerDutyNotificationRule::getStatus() const {
    return m_status;
}
void OAIPagerDutyNotificationRule::setStatus(const OAITaskStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPagerDutyNotificationRule::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIStatusRule> OAIPagerDutyNotificationRule::getStatusRules() const {
    return m_status_rules;
}
void OAIPagerDutyNotificationRule::setStatusRules(const QList<OAIStatusRule> &status_rules) {
    m_status_rules = status_rules;
    m_status_rules_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_status_rules_Set() const{
    return m_status_rules_isSet;
}

bool OAIPagerDutyNotificationRule::is_status_rules_Valid() const{
    return m_status_rules_isValid;
}

QList<OAITagRule> OAIPagerDutyNotificationRule::getTagRules() const {
    return m_tag_rules;
}
void OAIPagerDutyNotificationRule::setTagRules(const QList<OAITagRule> &tag_rules) {
    m_tag_rules = tag_rules;
    m_tag_rules_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_tag_rules_Set() const{
    return m_tag_rules_isSet;
}

bool OAIPagerDutyNotificationRule::is_tag_rules_Valid() const{
    return m_tag_rules_isValid;
}

QString OAIPagerDutyNotificationRule::getTaskId() const {
    return m_task_id;
}
void OAIPagerDutyNotificationRule::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIPagerDutyNotificationRule::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QDateTime OAIPagerDutyNotificationRule::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPagerDutyNotificationRule::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPagerDutyNotificationRule::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPagerDutyNotificationRule::getMessageTemplate() const {
    return m_message_template;
}
void OAIPagerDutyNotificationRule::setMessageTemplate(const QString &message_template) {
    m_message_template = message_template;
    m_message_template_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_message_template_Set() const{
    return m_message_template_isSet;
}

bool OAIPagerDutyNotificationRule::is_message_template_Valid() const{
    return m_message_template_isValid;
}

QString OAIPagerDutyNotificationRule::getType() const {
    return m_type;
}
void OAIPagerDutyNotificationRule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPagerDutyNotificationRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPagerDutyNotificationRule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPagerDutyNotificationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_every_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_every_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runbook_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sleep_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagerDutyNotificationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_id_isValid && m_name_isValid && m_org_id_isValid && m_status_isValid && m_status_rules_isValid && m_message_template_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
