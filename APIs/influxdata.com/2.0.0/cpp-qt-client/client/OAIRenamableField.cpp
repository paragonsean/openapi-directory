/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenamableField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenamableField::OAIRenamableField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenamableField::OAIRenamableField() {
    this->initializeModel();
}

OAIRenamableField::~OAIRenamableField() {}

void OAIRenamableField::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_internal_name_isSet = false;
    m_internal_name_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIRenamableField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRenamableField::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_internal_name_isValid = ::OpenAPI::fromJsonValue(m_internal_name, json[QString("internalName")]);
    m_internal_name_isSet = !json[QString("internalName")].isNull() && m_internal_name_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIRenamableField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRenamableField::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_internal_name_isSet) {
        obj.insert(QString("internalName"), ::OpenAPI::toJsonValue(m_internal_name));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

QString OAIRenamableField::getDisplayName() const {
    return m_display_name;
}
void OAIRenamableField::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRenamableField::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRenamableField::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIRenamableField::getInternalName() const {
    return m_internal_name;
}
void OAIRenamableField::setInternalName(const QString &internal_name) {
    m_internal_name = internal_name;
    m_internal_name_isSet = true;
}

bool OAIRenamableField::is_internal_name_Set() const{
    return m_internal_name_isSet;
}

bool OAIRenamableField::is_internal_name_Valid() const{
    return m_internal_name_isValid;
}

bool OAIRenamableField::isVisible() const {
    return m_visible;
}
void OAIRenamableField::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIRenamableField::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIRenamableField::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIRenamableField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRenamableField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
