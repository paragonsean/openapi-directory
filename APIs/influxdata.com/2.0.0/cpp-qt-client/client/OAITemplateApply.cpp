/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateApply.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateApply::OAITemplateApply(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateApply::OAITemplateApply() {
    this->initializeModel();
}

OAITemplateApply::~OAITemplateApply() {}

void OAITemplateApply::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;

    m_env_refs_isSet = false;
    m_env_refs_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_remotes_isSet = false;
    m_remotes_isValid = false;

    m_secrets_isSet = false;
    m_secrets_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_templates_isSet = false;
    m_templates_isValid = false;
}

void OAITemplateApply::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateApply::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("dryRun")]);
    m_dry_run_isSet = !json[QString("dryRun")].isNull() && m_dry_run_isValid;

    m_env_refs_isValid = ::OpenAPI::fromJsonValue(m_env_refs, json[QString("envRefs")]);
    m_env_refs_isSet = !json[QString("envRefs")].isNull() && m_env_refs_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_remotes_isValid = ::OpenAPI::fromJsonValue(m_remotes, json[QString("remotes")]);
    m_remotes_isSet = !json[QString("remotes")].isNull() && m_remotes_isValid;

    m_secrets_isValid = ::OpenAPI::fromJsonValue(m_secrets, json[QString("secrets")]);
    m_secrets_isSet = !json[QString("secrets")].isNull() && m_secrets_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("stackID")]);
    m_stack_id_isSet = !json[QString("stackID")].isNull() && m_stack_id_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_templates_isValid = ::OpenAPI::fromJsonValue(m_templates, json[QString("templates")]);
    m_templates_isSet = !json[QString("templates")].isNull() && m_templates_isValid;
}

QString OAITemplateApply::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateApply::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("dryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    if (m_env_refs.size() > 0) {
        obj.insert(QString("envRefs"), ::OpenAPI::toJsonValue(m_env_refs));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_remotes.size() > 0) {
        obj.insert(QString("remotes"), ::OpenAPI::toJsonValue(m_remotes));
    }
    if (m_secrets.size() > 0) {
        obj.insert(QString("secrets"), ::OpenAPI::toJsonValue(m_secrets));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("stackID"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_templates.size() > 0) {
        obj.insert(QString("templates"), ::OpenAPI::toJsonValue(m_templates));
    }
    return obj;
}

QList<OAITemplateApply_actions_inner> OAITemplateApply::getActions() const {
    return m_actions;
}
void OAITemplateApply::setActions(const QList<OAITemplateApply_actions_inner> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAITemplateApply::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAITemplateApply::is_actions_Valid() const{
    return m_actions_isValid;
}

bool OAITemplateApply::isDryRun() const {
    return m_dry_run;
}
void OAITemplateApply::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAITemplateApply::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAITemplateApply::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

QMap<QString, OAITemplateApply_envRefs_value> OAITemplateApply::getEnvRefs() const {
    return m_env_refs;
}
void OAITemplateApply::setEnvRefs(const QMap<QString, OAITemplateApply_envRefs_value> &env_refs) {
    m_env_refs = env_refs;
    m_env_refs_isSet = true;
}

bool OAITemplateApply::is_env_refs_Set() const{
    return m_env_refs_isSet;
}

bool OAITemplateApply::is_env_refs_Valid() const{
    return m_env_refs_isValid;
}

QString OAITemplateApply::getOrgId() const {
    return m_org_id;
}
void OAITemplateApply::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAITemplateApply::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAITemplateApply::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QList<OAITemplateApply_remotes_inner> OAITemplateApply::getRemotes() const {
    return m_remotes;
}
void OAITemplateApply::setRemotes(const QList<OAITemplateApply_remotes_inner> &remotes) {
    m_remotes = remotes;
    m_remotes_isSet = true;
}

bool OAITemplateApply::is_remotes_Set() const{
    return m_remotes_isSet;
}

bool OAITemplateApply::is_remotes_Valid() const{
    return m_remotes_isValid;
}

QMap<QString, QString> OAITemplateApply::getSecrets() const {
    return m_secrets;
}
void OAITemplateApply::setSecrets(const QMap<QString, QString> &secrets) {
    m_secrets = secrets;
    m_secrets_isSet = true;
}

bool OAITemplateApply::is_secrets_Set() const{
    return m_secrets_isSet;
}

bool OAITemplateApply::is_secrets_Valid() const{
    return m_secrets_isValid;
}

QString OAITemplateApply::getStackId() const {
    return m_stack_id;
}
void OAITemplateApply::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAITemplateApply::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAITemplateApply::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

OAITemplateApply_template OAITemplateApply::getRTemplate() const {
    return m_r_template;
}
void OAITemplateApply::setRTemplate(const OAITemplateApply_template &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAITemplateApply::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAITemplateApply::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QList<OAITemplateApply_template> OAITemplateApply::getTemplates() const {
    return m_templates;
}
void OAITemplateApply::setTemplates(const QList<OAITemplateApply_template> &templates) {
    m_templates = templates;
    m_templates_isSet = true;
}

bool OAITemplateApply::is_templates_Set() const{
    return m_templates_isSet;
}

bool OAITemplateApply::is_templates_Valid() const{
    return m_templates_isValid;
}

bool OAITemplateApply::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remotes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateApply::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
