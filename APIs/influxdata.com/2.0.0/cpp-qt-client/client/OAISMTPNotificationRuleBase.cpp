/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISMTPNotificationRuleBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISMTPNotificationRuleBase::OAISMTPNotificationRuleBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISMTPNotificationRuleBase::OAISMTPNotificationRuleBase() {
    this->initializeModel();
}

OAISMTPNotificationRuleBase::~OAISMTPNotificationRuleBase() {}

void OAISMTPNotificationRuleBase::initializeModel() {

    m_body_template_isSet = false;
    m_body_template_isValid = false;

    m_subject_template_isSet = false;
    m_subject_template_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISMTPNotificationRuleBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISMTPNotificationRuleBase::fromJsonObject(QJsonObject json) {

    m_body_template_isValid = ::OpenAPI::fromJsonValue(m_body_template, json[QString("bodyTemplate")]);
    m_body_template_isSet = !json[QString("bodyTemplate")].isNull() && m_body_template_isValid;

    m_subject_template_isValid = ::OpenAPI::fromJsonValue(m_subject_template, json[QString("subjectTemplate")]);
    m_subject_template_isSet = !json[QString("subjectTemplate")].isNull() && m_subject_template_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISMTPNotificationRuleBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISMTPNotificationRuleBase::asJsonObject() const {
    QJsonObject obj;
    if (m_body_template_isSet) {
        obj.insert(QString("bodyTemplate"), ::OpenAPI::toJsonValue(m_body_template));
    }
    if (m_subject_template_isSet) {
        obj.insert(QString("subjectTemplate"), ::OpenAPI::toJsonValue(m_subject_template));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISMTPNotificationRuleBase::getBodyTemplate() const {
    return m_body_template;
}
void OAISMTPNotificationRuleBase::setBodyTemplate(const QString &body_template) {
    m_body_template = body_template;
    m_body_template_isSet = true;
}

bool OAISMTPNotificationRuleBase::is_body_template_Set() const{
    return m_body_template_isSet;
}

bool OAISMTPNotificationRuleBase::is_body_template_Valid() const{
    return m_body_template_isValid;
}

QString OAISMTPNotificationRuleBase::getSubjectTemplate() const {
    return m_subject_template;
}
void OAISMTPNotificationRuleBase::setSubjectTemplate(const QString &subject_template) {
    m_subject_template = subject_template;
    m_subject_template_isSet = true;
}

bool OAISMTPNotificationRuleBase::is_subject_template_Set() const{
    return m_subject_template_isSet;
}

bool OAISMTPNotificationRuleBase::is_subject_template_Valid() const{
    return m_subject_template_isValid;
}

QString OAISMTPNotificationRuleBase::getTo() const {
    return m_to;
}
void OAISMTPNotificationRuleBase::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISMTPNotificationRuleBase::is_to_Set() const{
    return m_to_isSet;
}

bool OAISMTPNotificationRuleBase::is_to_Valid() const{
    return m_to_isValid;
}

QString OAISMTPNotificationRuleBase::getType() const {
    return m_type;
}
void OAISMTPNotificationRuleBase::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISMTPNotificationRuleBase::is_type_Set() const{
    return m_type_isSet;
}

bool OAISMTPNotificationRuleBase::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISMTPNotificationRuleBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISMTPNotificationRuleBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subject_template_isValid && m_to_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
