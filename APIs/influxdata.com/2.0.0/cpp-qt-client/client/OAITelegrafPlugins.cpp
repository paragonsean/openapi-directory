/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelegrafPlugins.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITelegrafPlugins::OAITelegrafPlugins(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITelegrafPlugins::OAITelegrafPlugins() {
    this->initializeModel();
}

OAITelegrafPlugins::~OAITelegrafPlugins() {}

void OAITelegrafPlugins::initializeModel() {

    m_os_isSet = false;
    m_os_isValid = false;

    m_plugins_isSet = false;
    m_plugins_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAITelegrafPlugins::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITelegrafPlugins::fromJsonObject(QJsonObject json) {

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_plugins_isValid = ::OpenAPI::fromJsonValue(m_plugins, json[QString("plugins")]);
    m_plugins_isSet = !json[QString("plugins")].isNull() && m_plugins_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAITelegrafPlugins::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITelegrafPlugins::asJsonObject() const {
    QJsonObject obj;
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_plugins.size() > 0) {
        obj.insert(QString("plugins"), ::OpenAPI::toJsonValue(m_plugins));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAITelegrafPlugins::getOs() const {
    return m_os;
}
void OAITelegrafPlugins::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAITelegrafPlugins::is_os_Set() const{
    return m_os_isSet;
}

bool OAITelegrafPlugins::is_os_Valid() const{
    return m_os_isValid;
}

QList<OAITelegrafPlugin> OAITelegrafPlugins::getPlugins() const {
    return m_plugins;
}
void OAITelegrafPlugins::setPlugins(const QList<OAITelegrafPlugin> &plugins) {
    m_plugins = plugins;
    m_plugins_isSet = true;
}

bool OAITelegrafPlugins::is_plugins_Set() const{
    return m_plugins_isSet;
}

bool OAITelegrafPlugins::is_plugins_Valid() const{
    return m_plugins_isValid;
}

QString OAITelegrafPlugins::getVersion() const {
    return m_version;
}
void OAITelegrafPlugins::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITelegrafPlugins::is_version_Set() const{
    return m_version_isSet;
}

bool OAITelegrafPlugins::is_version_Valid() const{
    return m_version_isValid;
}

bool OAITelegrafPlugins::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITelegrafPlugins::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
