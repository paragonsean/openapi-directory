/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatement::OAIStatement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatement::OAIStatement() {
    this->initializeModel();
}

OAIStatement::~OAIStatement() {}

void OAIStatement::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_init_isSet = false;
    m_init_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_argument_isSet = false;
    m_argument_isValid = false;

    m_assignment_isSet = false;
    m_assignment_isValid = false;
}

void OAIStatement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatement::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_init_isValid = ::OpenAPI::fromJsonValue(m_init, json[QString("init")]);
    m_init_isSet = !json[QString("init")].isNull() && m_init_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_argument_isValid = ::OpenAPI::fromJsonValue(m_argument, json[QString("argument")]);
    m_argument_isSet = !json[QString("argument")].isNull() && m_argument_isValid;

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;
}

QString OAIStatement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatement::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_init.isSet()) {
        obj.insert(QString("init"), ::OpenAPI::toJsonValue(m_init));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_expression.isSet()) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_argument.isSet()) {
        obj.insert(QString("argument"), ::OpenAPI::toJsonValue(m_argument));
    }
    if (m_assignment.isSet()) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    return obj;
}

QString OAIStatement::getText() const {
    return m_text;
}
void OAIStatement::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIStatement::is_text_Set() const{
    return m_text_isSet;
}

bool OAIStatement::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIStatement::getType() const {
    return m_type;
}
void OAIStatement::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStatement::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStatement::is_type_Valid() const{
    return m_type_isValid;
}

OAIIdentifier OAIStatement::getId() const {
    return m_id;
}
void OAIStatement::setId(const OAIIdentifier &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStatement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStatement::is_id_Valid() const{
    return m_id_isValid;
}

OAIExpression OAIStatement::getInit() const {
    return m_init;
}
void OAIStatement::setInit(const OAIExpression &init) {
    m_init = init;
    m_init_isSet = true;
}

bool OAIStatement::is_init_Set() const{
    return m_init_isSet;
}

bool OAIStatement::is_init_Valid() const{
    return m_init_isValid;
}

OAIMemberExpression OAIStatement::getMember() const {
    return m_member;
}
void OAIStatement::setMember(const OAIMemberExpression &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIStatement::is_member_Set() const{
    return m_member_isSet;
}

bool OAIStatement::is_member_Valid() const{
    return m_member_isValid;
}

OAIExpression OAIStatement::getExpression() const {
    return m_expression;
}
void OAIStatement::setExpression(const OAIExpression &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIStatement::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIStatement::is_expression_Valid() const{
    return m_expression_isValid;
}

OAIExpression OAIStatement::getArgument() const {
    return m_argument;
}
void OAIStatement::setArgument(const OAIExpression &argument) {
    m_argument = argument;
    m_argument_isSet = true;
}

bool OAIStatement::is_argument_Set() const{
    return m_argument_isSet;
}

bool OAIStatement::is_argument_Valid() const{
    return m_argument_isValid;
}

OAIVariableAssignment OAIStatement::getAssignment() const {
    return m_assignment;
}
void OAIStatement::setAssignment(const OAIVariableAssignment &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAIStatement::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAIStatement::is_assignment_Valid() const{
    return m_assignment_isValid;
}

bool OAIStatement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_init.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_argument.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
