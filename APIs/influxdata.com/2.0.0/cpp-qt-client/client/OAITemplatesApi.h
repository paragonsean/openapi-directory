/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITemplatesApi_H
#define OAI_OAITemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDocument.h"
#include "OAIDocumentCreate.h"
#include "OAIDocumentUpdate.h"
#include "OAIDocuments.h"
#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITemplatesApi : public QObject {
    Q_OBJECT

public:
    OAITemplatesApi(const int timeOut = 0);
    ~OAITemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDocumentsTemplatesID(const QString &template_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDocumentsTemplatesIDLabelsID(const QString &template_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  org QString [optional]
    * @param[in]  org_id QString [optional]
    */
    virtual void getDocumentsTemplates(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getDocumentsTemplatesID(const QString &template_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getDocumentsTemplatesIDLabels(const QString &template_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_document_create OAIDocumentCreate [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDocumentsTemplates(const OAIDocumentCreate &oai_document_create, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDocumentsTemplatesIDLabels(const QString &template_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  oai_document_update OAIDocumentUpdate [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putDocumentsTemplatesID(const QString &template_id, const OAIDocumentUpdate &oai_document_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteDocumentsTemplatesIDCallback(OAIHttpRequestWorker *worker);
    void deleteDocumentsTemplatesIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void getDocumentsTemplatesCallback(OAIHttpRequestWorker *worker);
    void getDocumentsTemplatesIDCallback(OAIHttpRequestWorker *worker);
    void getDocumentsTemplatesIDLabelsCallback(OAIHttpRequestWorker *worker);
    void postDocumentsTemplatesCallback(OAIHttpRequestWorker *worker);
    void postDocumentsTemplatesIDLabelsCallback(OAIHttpRequestWorker *worker);
    void putDocumentsTemplatesIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteDocumentsTemplatesIDSignal();
    void deleteDocumentsTemplatesIDLabelsIDSignal();
    void getDocumentsTemplatesSignal(OAIDocuments summary);
    void getDocumentsTemplatesIDSignal(OAIDocument summary);
    void getDocumentsTemplatesIDLabelsSignal(OAILabelsResponse summary);
    void postDocumentsTemplatesSignal(OAIDocument summary);
    void postDocumentsTemplatesIDLabelsSignal(OAILabelResponse summary);
    void putDocumentsTemplatesIDSignal(OAIDocument summary);


    void deleteDocumentsTemplatesIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteDocumentsTemplatesIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void getDocumentsTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIDocuments summary);
    void getDocumentsTemplatesIDSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void getDocumentsTemplatesIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void postDocumentsTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void postDocumentsTemplatesIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void putDocumentsTemplatesIDSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);

    Q_DECL_DEPRECATED_X("Use deleteDocumentsTemplatesIDSignalError() instead")
    void deleteDocumentsTemplatesIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentsTemplatesIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDocumentsTemplatesIDLabelsIDSignalError() instead")
    void deleteDocumentsTemplatesIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentsTemplatesIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsTemplatesSignalError() instead")
    void getDocumentsTemplatesSignalE(OAIDocuments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsTemplatesSignalError(OAIDocuments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsTemplatesIDSignalError() instead")
    void getDocumentsTemplatesIDSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsTemplatesIDSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsTemplatesIDLabelsSignalError() instead")
    void getDocumentsTemplatesIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsTemplatesIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDocumentsTemplatesSignalError() instead")
    void postDocumentsTemplatesSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDocumentsTemplatesSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDocumentsTemplatesIDLabelsSignalError() instead")
    void postDocumentsTemplatesIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDocumentsTemplatesIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDocumentsTemplatesIDSignalError() instead")
    void putDocumentsTemplatesIDSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putDocumentsTemplatesIDSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteDocumentsTemplatesIDSignalErrorFull() instead")
    void deleteDocumentsTemplatesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentsTemplatesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDocumentsTemplatesIDLabelsIDSignalErrorFull() instead")
    void deleteDocumentsTemplatesIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentsTemplatesIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsTemplatesSignalErrorFull() instead")
    void getDocumentsTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsTemplatesIDSignalErrorFull() instead")
    void getDocumentsTemplatesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsTemplatesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsTemplatesIDLabelsSignalErrorFull() instead")
    void getDocumentsTemplatesIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsTemplatesIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDocumentsTemplatesSignalErrorFull() instead")
    void postDocumentsTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDocumentsTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDocumentsTemplatesIDLabelsSignalErrorFull() instead")
    void postDocumentsTemplatesIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDocumentsTemplatesIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDocumentsTemplatesIDSignalErrorFull() instead")
    void putDocumentsTemplatesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putDocumentsTemplatesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
