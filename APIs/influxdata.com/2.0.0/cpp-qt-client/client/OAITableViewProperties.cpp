/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableViewProperties::OAITableViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableViewProperties::OAITableViewProperties() {
    this->initializeModel();
}

OAITableViewProperties::~OAITableViewProperties() {}

void OAITableViewProperties::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_decimal_places_isSet = false;
    m_decimal_places_isValid = false;

    m_field_options_isSet = false;
    m_field_options_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_show_note_when_empty_isSet = false;
    m_show_note_when_empty_isValid = false;

    m_table_options_isSet = false;
    m_table_options_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITableViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableViewProperties::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_decimal_places_isValid = ::OpenAPI::fromJsonValue(m_decimal_places, json[QString("decimalPlaces")]);
    m_decimal_places_isSet = !json[QString("decimalPlaces")].isNull() && m_decimal_places_isValid;

    m_field_options_isValid = ::OpenAPI::fromJsonValue(m_field_options, json[QString("fieldOptions")]);
    m_field_options_isSet = !json[QString("fieldOptions")].isNull() && m_field_options_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_show_note_when_empty_isValid = ::OpenAPI::fromJsonValue(m_show_note_when_empty, json[QString("showNoteWhenEmpty")]);
    m_show_note_when_empty_isSet = !json[QString("showNoteWhenEmpty")].isNull() && m_show_note_when_empty_isValid;

    m_table_options_isValid = ::OpenAPI::fromJsonValue(m_table_options, json[QString("tableOptions")]);
    m_table_options_isSet = !json[QString("tableOptions")].isNull() && m_table_options_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITableViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_decimal_places.isSet()) {
        obj.insert(QString("decimalPlaces"), ::OpenAPI::toJsonValue(m_decimal_places));
    }
    if (m_field_options.size() > 0) {
        obj.insert(QString("fieldOptions"), ::OpenAPI::toJsonValue(m_field_options));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_show_note_when_empty_isSet) {
        obj.insert(QString("showNoteWhenEmpty"), ::OpenAPI::toJsonValue(m_show_note_when_empty));
    }
    if (m_table_options.isSet()) {
        obj.insert(QString("tableOptions"), ::OpenAPI::toJsonValue(m_table_options));
    }
    if (m_time_format_isSet) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIDashboardColor> OAITableViewProperties::getColors() const {
    return m_colors;
}
void OAITableViewProperties::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAITableViewProperties::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAITableViewProperties::is_colors_Valid() const{
    return m_colors_isValid;
}

OAIDecimalPlaces OAITableViewProperties::getDecimalPlaces() const {
    return m_decimal_places;
}
void OAITableViewProperties::setDecimalPlaces(const OAIDecimalPlaces &decimal_places) {
    m_decimal_places = decimal_places;
    m_decimal_places_isSet = true;
}

bool OAITableViewProperties::is_decimal_places_Set() const{
    return m_decimal_places_isSet;
}

bool OAITableViewProperties::is_decimal_places_Valid() const{
    return m_decimal_places_isValid;
}

QList<OAIRenamableField> OAITableViewProperties::getFieldOptions() const {
    return m_field_options;
}
void OAITableViewProperties::setFieldOptions(const QList<OAIRenamableField> &field_options) {
    m_field_options = field_options;
    m_field_options_isSet = true;
}

bool OAITableViewProperties::is_field_options_Set() const{
    return m_field_options_isSet;
}

bool OAITableViewProperties::is_field_options_Valid() const{
    return m_field_options_isValid;
}

QString OAITableViewProperties::getNote() const {
    return m_note;
}
void OAITableViewProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAITableViewProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAITableViewProperties::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIDashboardQuery> OAITableViewProperties::getQueries() const {
    return m_queries;
}
void OAITableViewProperties::setQueries(const QList<OAIDashboardQuery> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAITableViewProperties::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAITableViewProperties::is_queries_Valid() const{
    return m_queries_isValid;
}

QString OAITableViewProperties::getShape() const {
    return m_shape;
}
void OAITableViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAITableViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAITableViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

bool OAITableViewProperties::isShowNoteWhenEmpty() const {
    return m_show_note_when_empty;
}
void OAITableViewProperties::setShowNoteWhenEmpty(const bool &show_note_when_empty) {
    m_show_note_when_empty = show_note_when_empty;
    m_show_note_when_empty_isSet = true;
}

bool OAITableViewProperties::is_show_note_when_empty_Set() const{
    return m_show_note_when_empty_isSet;
}

bool OAITableViewProperties::is_show_note_when_empty_Valid() const{
    return m_show_note_when_empty_isValid;
}

OAITableViewProperties_tableOptions OAITableViewProperties::getTableOptions() const {
    return m_table_options;
}
void OAITableViewProperties::setTableOptions(const OAITableViewProperties_tableOptions &table_options) {
    m_table_options = table_options;
    m_table_options_isSet = true;
}

bool OAITableViewProperties::is_table_options_Set() const{
    return m_table_options_isSet;
}

bool OAITableViewProperties::is_table_options_Valid() const{
    return m_table_options_isValid;
}

QString OAITableViewProperties::getTimeFormat() const {
    return m_time_format;
}
void OAITableViewProperties::setTimeFormat(const QString &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAITableViewProperties::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAITableViewProperties::is_time_format_Valid() const{
    return m_time_format_isValid;
}

QString OAITableViewProperties::getType() const {
    return m_type;
}
void OAITableViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITableViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAITableViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITableViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_places.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_note_when_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_colors_isValid && m_decimal_places_isValid && m_field_options_isValid && m_note_isValid && m_queries_isValid && m_shape_isValid && m_show_note_when_empty_isValid && m_table_options_isValid && m_time_format_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
