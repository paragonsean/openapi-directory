/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDBRPsApi_H
#define OAI_OAIDBRPsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDBRP.h"
#include "OAIDBRPUpdate.h"
#include "OAIDBRPs.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDBRPsApi : public QObject {
    Q_OBJECT

public:
    OAIDBRPsApi(const int timeOut = 0);
    ~OAIDBRPsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  dbrp_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDBRPID(const QString &org_id, const QString &dbrp_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  bucket_id QString [optional]
    * @param[in]  r_default bool [optional]
    * @param[in]  db QString [optional]
    * @param[in]  rp QString [optional]
    */
    virtual void getDBRPs(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bucket_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_default = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &db = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rp = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  dbrp_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getDBRPsID(const QString &org_id, const QString &dbrp_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  dbrp_id QString [required]
    * @param[in]  oaidbrp_update OAIDBRPUpdate [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchDBRPID(const QString &org_id, const QString &dbrp_id, const OAIDBRPUpdate &oaidbrp_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaidbrp OAIDBRP [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDBRP(const OAIDBRP &oaidbrp, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteDBRPIDCallback(OAIHttpRequestWorker *worker);
    void getDBRPsCallback(OAIHttpRequestWorker *worker);
    void getDBRPsIDCallback(OAIHttpRequestWorker *worker);
    void patchDBRPIDCallback(OAIHttpRequestWorker *worker);
    void postDBRPCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteDBRPIDSignal();
    void getDBRPsSignal(OAIDBRPs summary);
    void getDBRPsIDSignal(OAIDBRP summary);
    void patchDBRPIDSignal(OAIDBRP summary);
    void postDBRPSignal(OAIDBRP summary);


    void deleteDBRPIDSignalFull(OAIHttpRequestWorker *worker);
    void getDBRPsSignalFull(OAIHttpRequestWorker *worker, OAIDBRPs summary);
    void getDBRPsIDSignalFull(OAIHttpRequestWorker *worker, OAIDBRP summary);
    void patchDBRPIDSignalFull(OAIHttpRequestWorker *worker, OAIDBRP summary);
    void postDBRPSignalFull(OAIHttpRequestWorker *worker, OAIDBRP summary);

    Q_DECL_DEPRECATED_X("Use deleteDBRPIDSignalError() instead")
    void deleteDBRPIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDBRPIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDBRPsSignalError() instead")
    void getDBRPsSignalE(OAIDBRPs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDBRPsSignalError(OAIDBRPs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDBRPsIDSignalError() instead")
    void getDBRPsIDSignalE(OAIDBRP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDBRPsIDSignalError(OAIDBRP summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDBRPIDSignalError() instead")
    void patchDBRPIDSignalE(OAIDBRP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDBRPIDSignalError(OAIDBRP summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDBRPSignalError() instead")
    void postDBRPSignalE(OAIDBRP summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDBRPSignalError(OAIDBRP summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteDBRPIDSignalErrorFull() instead")
    void deleteDBRPIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDBRPIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDBRPsSignalErrorFull() instead")
    void getDBRPsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDBRPsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDBRPsIDSignalErrorFull() instead")
    void getDBRPsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDBRPsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDBRPIDSignalErrorFull() instead")
    void patchDBRPIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDBRPIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDBRPSignalErrorFull() instead")
    void postDBRPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDBRPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
