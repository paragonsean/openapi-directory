/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarkdownViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarkdownViewProperties::OAIMarkdownViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarkdownViewProperties::OAIMarkdownViewProperties() {
    this->initializeModel();
}

OAIMarkdownViewProperties::~OAIMarkdownViewProperties() {}

void OAIMarkdownViewProperties::initializeModel() {

    m_note_isSet = false;
    m_note_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMarkdownViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarkdownViewProperties::fromJsonObject(QJsonObject json) {

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMarkdownViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarkdownViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMarkdownViewProperties::getNote() const {
    return m_note;
}
void OAIMarkdownViewProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIMarkdownViewProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIMarkdownViewProperties::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIMarkdownViewProperties::getShape() const {
    return m_shape;
}
void OAIMarkdownViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIMarkdownViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIMarkdownViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

QString OAIMarkdownViewProperties::getType() const {
    return m_type;
}
void OAIMarkdownViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMarkdownViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMarkdownViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMarkdownViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarkdownViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_note_isValid && m_shape_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
