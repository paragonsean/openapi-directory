/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateKind.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateKind::OAITemplateKind(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateKind::OAITemplateKind() {
    this->initializeModel();
}

OAITemplateKind::~OAITemplateKind() {}

void OAITemplateKind::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITemplateKind::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITemplateKind::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Bucket", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::BUCKET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Check", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::CHECK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CheckDeadman", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::CHECKDEADMAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CheckThreshold", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::CHECKTHRESHOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Dashboard", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::DASHBOARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Label", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::LABEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotificationEndpoint", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::NOTIFICATIONENDPOINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotificationEndpointHTTP", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::NOTIFICATIONENDPOINTHTTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotificationEndpointPagerDuty", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::NOTIFICATIONENDPOINTPAGERDUTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotificationEndpointSlack", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::NOTIFICATIONENDPOINTSLACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotificationRule", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::NOTIFICATIONRULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Task", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::TASK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Telegraf", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::TELEGRAF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Variable", Qt::CaseInsensitive) == 0) {
        m_value = eOAITemplateKind::VARIABLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITemplateKind::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITemplateKind::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITemplateKind::BUCKET:
            val = "Bucket";
            break;
        case eOAITemplateKind::CHECK:
            val = "Check";
            break;
        case eOAITemplateKind::CHECKDEADMAN:
            val = "CheckDeadman";
            break;
        case eOAITemplateKind::CHECKTHRESHOLD:
            val = "CheckThreshold";
            break;
        case eOAITemplateKind::DASHBOARD:
            val = "Dashboard";
            break;
        case eOAITemplateKind::LABEL:
            val = "Label";
            break;
        case eOAITemplateKind::NOTIFICATIONENDPOINT:
            val = "NotificationEndpoint";
            break;
        case eOAITemplateKind::NOTIFICATIONENDPOINTHTTP:
            val = "NotificationEndpointHTTP";
            break;
        case eOAITemplateKind::NOTIFICATIONENDPOINTPAGERDUTY:
            val = "NotificationEndpointPagerDuty";
            break;
        case eOAITemplateKind::NOTIFICATIONENDPOINTSLACK:
            val = "NotificationEndpointSlack";
            break;
        case eOAITemplateKind::NOTIFICATIONRULE:
            val = "NotificationRule";
            break;
        case eOAITemplateKind::TASK:
            val = "Task";
            break;
        case eOAITemplateKind::TELEGRAF:
            val = "Telegraf";
            break;
        case eOAITemplateKind::VARIABLE:
            val = "Variable";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITemplateKind::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITemplateKind::eOAITemplateKind OAITemplateKind::getValue() const {
    return m_value;
}

void OAITemplateKind::setValue(const OAITemplateKind::eOAITemplateKind& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITemplateKind::isSet() const {
    
    return m_value_isSet;
}

bool OAITemplateKind::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
