/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPasswordResetBody.h"
#include "OAIUser.h"
#include "OAIUserResponse.h"
#include "OAIUsers.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteUsersID(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getFlags(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getMe(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  after QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  id QString [optional]
    */
    virtual void getUsers(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getUsersID(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user OAIUser [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchUsersID(const QString &user_id, const OAIUser &oai_user, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_user OAIUser [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postUsers(const OAIUser &oai_user, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_password_reset_body OAIPasswordResetBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postUsersIDPassword(const QString &user_id, const OAIPasswordResetBody &oai_password_reset_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_password_reset_body OAIPasswordResetBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putMePassword(const OAIPasswordResetBody &oai_password_reset_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUsersIDCallback(OAIHttpRequestWorker *worker);
    void getFlagsCallback(OAIHttpRequestWorker *worker);
    void getMeCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void getUsersIDCallback(OAIHttpRequestWorker *worker);
    void patchUsersIDCallback(OAIHttpRequestWorker *worker);
    void postUsersCallback(OAIHttpRequestWorker *worker);
    void postUsersIDPasswordCallback(OAIHttpRequestWorker *worker);
    void putMePasswordCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUsersIDSignal();
    void getFlagsSignal(QMap<QString, QJsonValue> summary);
    void getMeSignal(OAIUserResponse summary);
    void getUsersSignal(OAIUsers summary);
    void getUsersIDSignal(OAIUserResponse summary);
    void patchUsersIDSignal(OAIUserResponse summary);
    void postUsersSignal(OAIUserResponse summary);
    void postUsersIDPasswordSignal();
    void putMePasswordSignal();


    void deleteUsersIDSignalFull(OAIHttpRequestWorker *worker);
    void getFlagsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void getMeSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, OAIUsers summary);
    void getUsersIDSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void patchUsersIDSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void postUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void postUsersIDPasswordSignalFull(OAIHttpRequestWorker *worker);
    void putMePasswordSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteUsersIDSignalError() instead")
    void deleteUsersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlagsSignalError() instead")
    void getFlagsSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlagsSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalError() instead")
    void getMeSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(OAIUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(OAIUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIDSignalError() instead")
    void getUsersIDSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIDSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchUsersIDSignalError() instead")
    void patchUsersIDSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchUsersIDSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersSignalError() instead")
    void postUsersSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersIDPasswordSignalError() instead")
    void postUsersIDPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersIDPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putMePasswordSignalError() instead")
    void putMePasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putMePasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUsersIDSignalErrorFull() instead")
    void deleteUsersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlagsSignalErrorFull() instead")
    void getFlagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalErrorFull() instead")
    void getMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIDSignalErrorFull() instead")
    void getUsersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchUsersIDSignalErrorFull() instead")
    void patchUsersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchUsersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersSignalErrorFull() instead")
    void postUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersIDPasswordSignalErrorFull() instead")
    void postUsersIDPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersIDPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putMePasswordSignalErrorFull() instead")
    void putMePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putMePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
