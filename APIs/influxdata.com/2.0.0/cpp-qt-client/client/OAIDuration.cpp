/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDuration::OAIDuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDuration::OAIDuration() {
    this->initializeModel();
}

OAIDuration::~OAIDuration() {}

void OAIDuration::initializeModel() {

    m_magnitude_isSet = false;
    m_magnitude_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIDuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDuration::fromJsonObject(QJsonObject json) {

    m_magnitude_isValid = ::OpenAPI::fromJsonValue(m_magnitude, json[QString("magnitude")]);
    m_magnitude_isSet = !json[QString("magnitude")].isNull() && m_magnitude_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIDuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDuration::asJsonObject() const {
    QJsonObject obj;
    if (m_magnitude_isSet) {
        obj.insert(QString("magnitude"), ::OpenAPI::toJsonValue(m_magnitude));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

qint32 OAIDuration::getMagnitude() const {
    return m_magnitude;
}
void OAIDuration::setMagnitude(const qint32 &magnitude) {
    m_magnitude = magnitude;
    m_magnitude_isSet = true;
}

bool OAIDuration::is_magnitude_Set() const{
    return m_magnitude_isSet;
}

bool OAIDuration::is_magnitude_Valid() const{
    return m_magnitude_isValid;
}

QString OAIDuration::getType() const {
    return m_type;
}
void OAIDuration::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDuration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDuration::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDuration::getUnit() const {
    return m_unit;
}
void OAIDuration::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIDuration::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIDuration::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIDuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_magnitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
