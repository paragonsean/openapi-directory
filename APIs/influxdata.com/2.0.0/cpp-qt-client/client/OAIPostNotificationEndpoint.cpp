/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostNotificationEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostNotificationEndpoint::OAIPostNotificationEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostNotificationEndpoint::OAIPostNotificationEndpoint() {
    this->initializeModel();
}

OAIPostNotificationEndpoint::~OAIPostNotificationEndpoint() {}

void OAIPostNotificationEndpoint::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_client_url_isSet = false;
    m_client_url_isValid = false;

    m_routing_key_isSet = false;
    m_routing_key_isValid = false;

    m_auth_method_isSet = false;
    m_auth_method_isValid = false;

    m_content_template_isSet = false;
    m_content_template_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;
}

void OAIPostNotificationEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostNotificationEndpoint::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userID")]);
    m_user_id_isSet = !json[QString("userID")].isNull() && m_user_id_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_client_url_isValid = ::OpenAPI::fromJsonValue(m_client_url, json[QString("clientURL")]);
    m_client_url_isSet = !json[QString("clientURL")].isNull() && m_client_url_isValid;

    m_routing_key_isValid = ::OpenAPI::fromJsonValue(m_routing_key, json[QString("routingKey")]);
    m_routing_key_isSet = !json[QString("routingKey")].isNull() && m_routing_key_isValid;

    m_auth_method_isValid = ::OpenAPI::fromJsonValue(m_auth_method, json[QString("authMethod")]);
    m_auth_method_isSet = !json[QString("authMethod")].isNull() && m_auth_method_isValid;

    m_content_template_isValid = ::OpenAPI::fromJsonValue(m_content_template, json[QString("contentTemplate")]);
    m_content_template_isSet = !json[QString("contentTemplate")].isNull() && m_content_template_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;
}

QString OAIPostNotificationEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostNotificationEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_client_url_isSet) {
        obj.insert(QString("clientURL"), ::OpenAPI::toJsonValue(m_client_url));
    }
    if (m_routing_key_isSet) {
        obj.insert(QString("routingKey"), ::OpenAPI::toJsonValue(m_routing_key));
    }
    if (m_auth_method_isSet) {
        obj.insert(QString("authMethod"), ::OpenAPI::toJsonValue(m_auth_method));
    }
    if (m_content_template_isSet) {
        obj.insert(QString("contentTemplate"), ::OpenAPI::toJsonValue(m_content_template));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    return obj;
}

QDateTime OAIPostNotificationEndpoint::getCreatedAt() const {
    return m_created_at;
}
void OAIPostNotificationEndpoint::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPostNotificationEndpoint::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPostNotificationEndpoint::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPostNotificationEndpoint::getDescription() const {
    return m_description;
}
void OAIPostNotificationEndpoint::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPostNotificationEndpoint::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPostNotificationEndpoint::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPostNotificationEndpoint::getId() const {
    return m_id;
}
void OAIPostNotificationEndpoint::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPostNotificationEndpoint::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPostNotificationEndpoint::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILabel> OAIPostNotificationEndpoint::getLabels() const {
    return m_labels;
}
void OAIPostNotificationEndpoint::setLabels(const QList<OAILabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPostNotificationEndpoint::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPostNotificationEndpoint::is_labels_Valid() const{
    return m_labels_isValid;
}

OAINotificationEndpointBase_links OAIPostNotificationEndpoint::getLinks() const {
    return m_links;
}
void OAIPostNotificationEndpoint::setLinks(const OAINotificationEndpointBase_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPostNotificationEndpoint::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPostNotificationEndpoint::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIPostNotificationEndpoint::getName() const {
    return m_name;
}
void OAIPostNotificationEndpoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPostNotificationEndpoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPostNotificationEndpoint::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPostNotificationEndpoint::getOrgId() const {
    return m_org_id;
}
void OAIPostNotificationEndpoint::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIPostNotificationEndpoint::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIPostNotificationEndpoint::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIPostNotificationEndpoint::getStatus() const {
    return m_status;
}
void OAIPostNotificationEndpoint::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPostNotificationEndpoint::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPostNotificationEndpoint::is_status_Valid() const{
    return m_status_isValid;
}

OAINotificationEndpointType OAIPostNotificationEndpoint::getType() const {
    return m_type;
}
void OAIPostNotificationEndpoint::setType(const OAINotificationEndpointType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPostNotificationEndpoint::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPostNotificationEndpoint::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIPostNotificationEndpoint::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPostNotificationEndpoint::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPostNotificationEndpoint::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPostNotificationEndpoint::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPostNotificationEndpoint::getUserId() const {
    return m_user_id;
}
void OAIPostNotificationEndpoint::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPostNotificationEndpoint::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPostNotificationEndpoint::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIPostNotificationEndpoint::getToken() const {
    return m_token;
}
void OAIPostNotificationEndpoint::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIPostNotificationEndpoint::is_token_Set() const{
    return m_token_isSet;
}

bool OAIPostNotificationEndpoint::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIPostNotificationEndpoint::getUrl() const {
    return m_url;
}
void OAIPostNotificationEndpoint::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPostNotificationEndpoint::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPostNotificationEndpoint::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPostNotificationEndpoint::getClientUrl() const {
    return m_client_url;
}
void OAIPostNotificationEndpoint::setClientUrl(const QString &client_url) {
    m_client_url = client_url;
    m_client_url_isSet = true;
}

bool OAIPostNotificationEndpoint::is_client_url_Set() const{
    return m_client_url_isSet;
}

bool OAIPostNotificationEndpoint::is_client_url_Valid() const{
    return m_client_url_isValid;
}

QString OAIPostNotificationEndpoint::getRoutingKey() const {
    return m_routing_key;
}
void OAIPostNotificationEndpoint::setRoutingKey(const QString &routing_key) {
    m_routing_key = routing_key;
    m_routing_key_isSet = true;
}

bool OAIPostNotificationEndpoint::is_routing_key_Set() const{
    return m_routing_key_isSet;
}

bool OAIPostNotificationEndpoint::is_routing_key_Valid() const{
    return m_routing_key_isValid;
}

QString OAIPostNotificationEndpoint::getAuthMethod() const {
    return m_auth_method;
}
void OAIPostNotificationEndpoint::setAuthMethod(const QString &auth_method) {
    m_auth_method = auth_method;
    m_auth_method_isSet = true;
}

bool OAIPostNotificationEndpoint::is_auth_method_Set() const{
    return m_auth_method_isSet;
}

bool OAIPostNotificationEndpoint::is_auth_method_Valid() const{
    return m_auth_method_isValid;
}

QString OAIPostNotificationEndpoint::getContentTemplate() const {
    return m_content_template;
}
void OAIPostNotificationEndpoint::setContentTemplate(const QString &content_template) {
    m_content_template = content_template;
    m_content_template_isSet = true;
}

bool OAIPostNotificationEndpoint::is_content_template_Set() const{
    return m_content_template_isSet;
}

bool OAIPostNotificationEndpoint::is_content_template_Valid() const{
    return m_content_template_isValid;
}

QMap<QString, QString> OAIPostNotificationEndpoint::getHeaders() const {
    return m_headers;
}
void OAIPostNotificationEndpoint::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIPostNotificationEndpoint::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIPostNotificationEndpoint::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIPostNotificationEndpoint::getMethod() const {
    return m_method;
}
void OAIPostNotificationEndpoint::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIPostNotificationEndpoint::is_method_Set() const{
    return m_method_isSet;
}

bool OAIPostNotificationEndpoint::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIPostNotificationEndpoint::getPassword() const {
    return m_password;
}
void OAIPostNotificationEndpoint::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIPostNotificationEndpoint::is_password_Set() const{
    return m_password_isSet;
}

bool OAIPostNotificationEndpoint::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIPostNotificationEndpoint::getUsername() const {
    return m_username;
}
void OAIPostNotificationEndpoint::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIPostNotificationEndpoint::is_username_Set() const{
    return m_username_isSet;
}

bool OAIPostNotificationEndpoint::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIPostNotificationEndpoint::getChannel() const {
    return m_channel;
}
void OAIPostNotificationEndpoint::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIPostNotificationEndpoint::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIPostNotificationEndpoint::is_channel_Valid() const{
    return m_channel_isValid;
}

bool OAIPostNotificationEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostNotificationEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_token_isValid && m_url_isValid && m_routing_key_isValid && m_auth_method_isValid && m_method_isValid && m_channel_isValid && true;
}

} // namespace OpenAPI
