/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoTrackMapViewLayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoTrackMapViewLayer::OAIGeoTrackMapViewLayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoTrackMapViewLayer::OAIGeoTrackMapViewLayer() {
    this->initializeModel();
}

OAIGeoTrackMapViewLayer::~OAIGeoTrackMapViewLayer() {}

void OAIGeoTrackMapViewLayer::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_random_colors_isSet = false;
    m_random_colors_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_track_width_isSet = false;
    m_track_width_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGeoTrackMapViewLayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoTrackMapViewLayer::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_random_colors_isValid = ::OpenAPI::fromJsonValue(m_random_colors, json[QString("randomColors")]);
    m_random_colors_isSet = !json[QString("randomColors")].isNull() && m_random_colors_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;

    m_track_width_isValid = ::OpenAPI::fromJsonValue(m_track_width, json[QString("trackWidth")]);
    m_track_width_isSet = !json[QString("trackWidth")].isNull() && m_track_width_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGeoTrackMapViewLayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoTrackMapViewLayer::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_random_colors_isSet) {
        obj.insert(QString("randomColors"), ::OpenAPI::toJsonValue(m_random_colors));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    if (m_track_width_isSet) {
        obj.insert(QString("trackWidth"), ::OpenAPI::toJsonValue(m_track_width));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIDashboardColor> OAIGeoTrackMapViewLayer::getColors() const {
    return m_colors;
}
void OAIGeoTrackMapViewLayer::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIGeoTrackMapViewLayer::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIGeoTrackMapViewLayer::is_colors_Valid() const{
    return m_colors_isValid;
}

bool OAIGeoTrackMapViewLayer::isRandomColors() const {
    return m_random_colors;
}
void OAIGeoTrackMapViewLayer::setRandomColors(const bool &random_colors) {
    m_random_colors = random_colors;
    m_random_colors_isSet = true;
}

bool OAIGeoTrackMapViewLayer::is_random_colors_Set() const{
    return m_random_colors_isSet;
}

bool OAIGeoTrackMapViewLayer::is_random_colors_Valid() const{
    return m_random_colors_isValid;
}

qint32 OAIGeoTrackMapViewLayer::getSpeed() const {
    return m_speed;
}
void OAIGeoTrackMapViewLayer::setSpeed(const qint32 &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAIGeoTrackMapViewLayer::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIGeoTrackMapViewLayer::is_speed_Valid() const{
    return m_speed_isValid;
}

qint32 OAIGeoTrackMapViewLayer::getTrackWidth() const {
    return m_track_width;
}
void OAIGeoTrackMapViewLayer::setTrackWidth(const qint32 &track_width) {
    m_track_width = track_width;
    m_track_width_isSet = true;
}

bool OAIGeoTrackMapViewLayer::is_track_width_Set() const{
    return m_track_width_isSet;
}

bool OAIGeoTrackMapViewLayer::is_track_width_Valid() const{
    return m_track_width_isValid;
}

QString OAIGeoTrackMapViewLayer::getType() const {
    return m_type;
}
void OAIGeoTrackMapViewLayer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGeoTrackMapViewLayer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGeoTrackMapViewLayer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGeoTrackMapViewLayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_random_colors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoTrackMapViewLayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
