/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummary_diff_checks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummary_diff_checks_inner::OAITemplateSummary_diff_checks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummary_diff_checks_inner::OAITemplateSummary_diff_checks_inner() {
    this->initializeModel();
}

OAITemplateSummary_diff_checks_inner::~OAITemplateSummary_diff_checks_inner() {}

void OAITemplateSummary_diff_checks_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_r_new_isSet = false;
    m_r_new_isValid = false;

    m_old_isSet = false;
    m_old_isValid = false;

    m_state_status_isSet = false;
    m_state_status_isValid = false;

    m_template_meta_name_isSet = false;
    m_template_meta_name_isValid = false;
}

void OAITemplateSummary_diff_checks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummary_diff_checks_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_r_new_isValid = ::OpenAPI::fromJsonValue(m_r_new, json[QString("new")]);
    m_r_new_isSet = !json[QString("new")].isNull() && m_r_new_isValid;

    m_old_isValid = ::OpenAPI::fromJsonValue(m_old, json[QString("old")]);
    m_old_isSet = !json[QString("old")].isNull() && m_old_isValid;

    m_state_status_isValid = ::OpenAPI::fromJsonValue(m_state_status, json[QString("stateStatus")]);
    m_state_status_isSet = !json[QString("stateStatus")].isNull() && m_state_status_isValid;

    m_template_meta_name_isValid = ::OpenAPI::fromJsonValue(m_template_meta_name, json[QString("templateMetaName")]);
    m_template_meta_name_isSet = !json[QString("templateMetaName")].isNull() && m_template_meta_name_isValid;
}

QString OAITemplateSummary_diff_checks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummary_diff_checks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_r_new.isSet()) {
        obj.insert(QString("new"), ::OpenAPI::toJsonValue(m_r_new));
    }
    if (m_old.isSet()) {
        obj.insert(QString("old"), ::OpenAPI::toJsonValue(m_old));
    }
    if (m_state_status_isSet) {
        obj.insert(QString("stateStatus"), ::OpenAPI::toJsonValue(m_state_status));
    }
    if (m_template_meta_name_isSet) {
        obj.insert(QString("templateMetaName"), ::OpenAPI::toJsonValue(m_template_meta_name));
    }
    return obj;
}

QString OAITemplateSummary_diff_checks_inner::getId() const {
    return m_id;
}
void OAITemplateSummary_diff_checks_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITemplateSummary_diff_checks_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAITemplateSummary_diff_checks_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAITemplateKind OAITemplateSummary_diff_checks_inner::getKind() const {
    return m_kind;
}
void OAITemplateSummary_diff_checks_inner::setKind(const OAITemplateKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITemplateSummary_diff_checks_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITemplateSummary_diff_checks_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

OAICheckDiscriminator OAITemplateSummary_diff_checks_inner::getRNew() const {
    return m_r_new;
}
void OAITemplateSummary_diff_checks_inner::setRNew(const OAICheckDiscriminator &r_new) {
    m_r_new = r_new;
    m_r_new_isSet = true;
}

bool OAITemplateSummary_diff_checks_inner::is_r_new_Set() const{
    return m_r_new_isSet;
}

bool OAITemplateSummary_diff_checks_inner::is_r_new_Valid() const{
    return m_r_new_isValid;
}

OAICheckDiscriminator OAITemplateSummary_diff_checks_inner::getOld() const {
    return m_old;
}
void OAITemplateSummary_diff_checks_inner::setOld(const OAICheckDiscriminator &old) {
    m_old = old;
    m_old_isSet = true;
}

bool OAITemplateSummary_diff_checks_inner::is_old_Set() const{
    return m_old_isSet;
}

bool OAITemplateSummary_diff_checks_inner::is_old_Valid() const{
    return m_old_isValid;
}

QString OAITemplateSummary_diff_checks_inner::getStateStatus() const {
    return m_state_status;
}
void OAITemplateSummary_diff_checks_inner::setStateStatus(const QString &state_status) {
    m_state_status = state_status;
    m_state_status_isSet = true;
}

bool OAITemplateSummary_diff_checks_inner::is_state_status_Set() const{
    return m_state_status_isSet;
}

bool OAITemplateSummary_diff_checks_inner::is_state_status_Valid() const{
    return m_state_status_isValid;
}

QString OAITemplateSummary_diff_checks_inner::getTemplateMetaName() const {
    return m_template_meta_name;
}
void OAITemplateSummary_diff_checks_inner::setTemplateMetaName(const QString &template_meta_name) {
    m_template_meta_name = template_meta_name;
    m_template_meta_name_isSet = true;
}

bool OAITemplateSummary_diff_checks_inner::is_template_meta_name_Set() const{
    return m_template_meta_name_isSet;
}

bool OAITemplateSummary_diff_checks_inner::is_template_meta_name_Valid() const{
    return m_template_meta_name_isValid;
}

bool OAITemplateSummary_diff_checks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_new.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_meta_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummary_diff_checks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
