/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILabelsApi_H
#define OAI_OAILabelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAILabelCreateRequest.h"
#include "OAILabelResponse.h"
#include "OAILabelUpdate.h"
#include "OAILabelsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILabelsApi : public QObject {
    Q_OBJECT

public:
    OAILabelsApi(const int timeOut = 0);
    ~OAILabelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteLabelsID(const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  org_id QString [optional]
    */
    virtual void getLabels(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getLabelsID(const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  label_id QString [required]
    * @param[in]  oai_label_update OAILabelUpdate [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchLabelsID(const QString &label_id, const OAILabelUpdate &oai_label_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_label_create_request OAILabelCreateRequest [required]
    */
    virtual void postLabels(const OAILabelCreateRequest &oai_label_create_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteLabelsIDCallback(OAIHttpRequestWorker *worker);
    void getLabelsCallback(OAIHttpRequestWorker *worker);
    void getLabelsIDCallback(OAIHttpRequestWorker *worker);
    void patchLabelsIDCallback(OAIHttpRequestWorker *worker);
    void postLabelsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteLabelsIDSignal();
    void getLabelsSignal(OAILabelsResponse summary);
    void getLabelsIDSignal(OAILabelResponse summary);
    void patchLabelsIDSignal(OAILabelResponse summary);
    void postLabelsSignal(OAILabelResponse summary);


    void deleteLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void getLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void getLabelsIDSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void patchLabelsIDSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void postLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteLabelsIDSignalError() instead")
    void deleteLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsSignalError() instead")
    void getLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsIDSignalError() instead")
    void getLabelsIDSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsIDSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchLabelsIDSignalError() instead")
    void patchLabelsIDSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchLabelsIDSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postLabelsSignalError() instead")
    void postLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteLabelsIDSignalErrorFull() instead")
    void deleteLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsSignalErrorFull() instead")
    void getLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsIDSignalErrorFull() instead")
    void getLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchLabelsIDSignalErrorFull() instead")
    void patchLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postLabelsSignalErrorFull() instead")
    void postLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
