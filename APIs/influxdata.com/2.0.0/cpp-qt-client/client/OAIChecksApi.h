/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChecksApi_H
#define OAI_OAIChecksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheck.h"
#include "OAICheckPatch.h"
#include "OAIChecks.h"
#include "OAIError.h"
#include "OAIFluxResponse.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAIPostCheck.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChecksApi : public QObject {
    Q_OBJECT

public:
    OAIChecksApi(const int timeOut = 0);
    ~OAIChecksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_post_check OAIPostCheck [required]
    */
    virtual void createCheck(const OAIPostCheck &oai_post_check);

    /**
    * @param[in]  check_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteChecksID(const QString &check_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  check_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteChecksIDLabelsID(const QString &check_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getChecks(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  check_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getChecksID(const QString &check_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  check_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getChecksIDLabels(const QString &check_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  check_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getChecksIDQuery(const QString &check_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  check_id QString [required]
    * @param[in]  oai_check_patch OAICheckPatch [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchChecksID(const QString &check_id, const OAICheckPatch &oai_check_patch, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  check_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postChecksIDLabels(const QString &check_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  check_id QString [required]
    * @param[in]  oai_check OAICheck [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putChecksID(const QString &check_id, const OAICheck &oai_check, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCheckCallback(OAIHttpRequestWorker *worker);
    void deleteChecksIDCallback(OAIHttpRequestWorker *worker);
    void deleteChecksIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void getChecksCallback(OAIHttpRequestWorker *worker);
    void getChecksIDCallback(OAIHttpRequestWorker *worker);
    void getChecksIDLabelsCallback(OAIHttpRequestWorker *worker);
    void getChecksIDQueryCallback(OAIHttpRequestWorker *worker);
    void patchChecksIDCallback(OAIHttpRequestWorker *worker);
    void postChecksIDLabelsCallback(OAIHttpRequestWorker *worker);
    void putChecksIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCheckSignal(OAICheck summary);
    void deleteChecksIDSignal();
    void deleteChecksIDLabelsIDSignal();
    void getChecksSignal(OAIChecks summary);
    void getChecksIDSignal(OAICheck summary);
    void getChecksIDLabelsSignal(OAILabelsResponse summary);
    void getChecksIDQuerySignal(OAIFluxResponse summary);
    void patchChecksIDSignal(OAICheck summary);
    void postChecksIDLabelsSignal(OAILabelResponse summary);
    void putChecksIDSignal(OAICheck summary);


    void createCheckSignalFull(OAIHttpRequestWorker *worker, OAICheck summary);
    void deleteChecksIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteChecksIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void getChecksSignalFull(OAIHttpRequestWorker *worker, OAIChecks summary);
    void getChecksIDSignalFull(OAIHttpRequestWorker *worker, OAICheck summary);
    void getChecksIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void getChecksIDQuerySignalFull(OAIHttpRequestWorker *worker, OAIFluxResponse summary);
    void patchChecksIDSignalFull(OAIHttpRequestWorker *worker, OAICheck summary);
    void postChecksIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void putChecksIDSignalFull(OAIHttpRequestWorker *worker, OAICheck summary);

    Q_DECL_DEPRECATED_X("Use createCheckSignalError() instead")
    void createCheckSignalE(OAICheck summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCheckSignalError(OAICheck summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChecksIDSignalError() instead")
    void deleteChecksIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChecksIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChecksIDLabelsIDSignalError() instead")
    void deleteChecksIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChecksIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecksSignalError() instead")
    void getChecksSignalE(OAIChecks summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecksSignalError(OAIChecks summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecksIDSignalError() instead")
    void getChecksIDSignalE(OAICheck summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecksIDSignalError(OAICheck summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecksIDLabelsSignalError() instead")
    void getChecksIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecksIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecksIDQuerySignalError() instead")
    void getChecksIDQuerySignalE(OAIFluxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecksIDQuerySignalError(OAIFluxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchChecksIDSignalError() instead")
    void patchChecksIDSignalE(OAICheck summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchChecksIDSignalError(OAICheck summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postChecksIDLabelsSignalError() instead")
    void postChecksIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postChecksIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putChecksIDSignalError() instead")
    void putChecksIDSignalE(OAICheck summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putChecksIDSignalError(OAICheck summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCheckSignalErrorFull() instead")
    void createCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChecksIDSignalErrorFull() instead")
    void deleteChecksIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChecksIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChecksIDLabelsIDSignalErrorFull() instead")
    void deleteChecksIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChecksIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecksSignalErrorFull() instead")
    void getChecksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecksIDSignalErrorFull() instead")
    void getChecksIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecksIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecksIDLabelsSignalErrorFull() instead")
    void getChecksIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecksIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecksIDQuerySignalErrorFull() instead")
    void getChecksIDQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecksIDQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchChecksIDSignalErrorFull() instead")
    void patchChecksIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchChecksIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postChecksIDLabelsSignalErrorFull() instead")
    void postChecksIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postChecksIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putChecksIDSignalErrorFull() instead")
    void putChecksIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putChecksIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
