/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationPostRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationPostRequest::OAIAuthorizationPostRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationPostRequest::OAIAuthorizationPostRequest() {
    this->initializeModel();
}

OAIAuthorizationPostRequest::~OAIAuthorizationPostRequest() {}

void OAIAuthorizationPostRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAuthorizationPostRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationPostRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userID")]);
    m_user_id_isSet = !json[QString("userID")].isNull() && m_user_id_isValid;
}

QString OAIAuthorizationPostRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationPostRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAuthorizationPostRequest::getDescription() const {
    return m_description;
}
void OAIAuthorizationPostRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuthorizationPostRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuthorizationPostRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAuthorizationPostRequest::getStatus() const {
    return m_status;
}
void OAIAuthorizationPostRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAuthorizationPostRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAuthorizationPostRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAuthorizationPostRequest::getOrgId() const {
    return m_org_id;
}
void OAIAuthorizationPostRequest::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIAuthorizationPostRequest::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIAuthorizationPostRequest::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QList<OAIPermission> OAIAuthorizationPostRequest::getPermissions() const {
    return m_permissions;
}
void OAIAuthorizationPostRequest::setPermissions(const QList<OAIPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAuthorizationPostRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAuthorizationPostRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIAuthorizationPostRequest::getUserId() const {
    return m_user_id;
}
void OAIAuthorizationPostRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuthorizationPostRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuthorizationPostRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAuthorizationPostRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationPostRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_org_id_isValid && m_permissions_isValid && true;
}

} // namespace OpenAPI
