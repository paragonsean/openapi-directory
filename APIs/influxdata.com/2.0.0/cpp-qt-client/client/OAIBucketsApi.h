/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBucketsApi_H
#define OAI_OAIBucketsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddResourceMemberRequestBody.h"
#include "OAIBucket.h"
#include "OAIBuckets.h"
#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAIPatchBucketRequest.h"
#include "OAIPostBucketRequest.h"
#include "OAIResourceMember.h"
#include "OAIResourceMembers.h"
#include "OAIResourceOwner.h"
#include "OAIResourceOwners.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBucketsApi : public QObject {
    Q_OBJECT

public:
    OAIBucketsApi(const int timeOut = 0);
    ~OAIBucketsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteBucketsID(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteBucketsIDLabelsID(const QString &bucket_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  bucket_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteBucketsIDMembersID(const QString &user_id, const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  bucket_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteBucketsIDOwnersID(const QString &user_id, const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  after QString [optional]
    * @param[in]  org QString [optional]
    * @param[in]  org_id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  id QString [optional]
    */
    virtual void getBuckets(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getBucketsID(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getBucketsIDLabels(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getBucketsIDMembers(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getBucketsIDOwners(const QString &bucket_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  org QString [optional]
    */
    virtual void getSourcesIDBuckets(const QString &source_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  oai_patch_bucket_request OAIPatchBucketRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchBucketsID(const QString &bucket_id, const OAIPatchBucketRequest &oai_patch_bucket_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_post_bucket_request OAIPostBucketRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postBuckets(const OAIPostBucketRequest &oai_post_bucket_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postBucketsIDLabels(const QString &bucket_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postBucketsIDMembers(const QString &bucket_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postBucketsIDOwners(const QString &bucket_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteBucketsIDCallback(OAIHttpRequestWorker *worker);
    void deleteBucketsIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void deleteBucketsIDMembersIDCallback(OAIHttpRequestWorker *worker);
    void deleteBucketsIDOwnersIDCallback(OAIHttpRequestWorker *worker);
    void getBucketsCallback(OAIHttpRequestWorker *worker);
    void getBucketsIDCallback(OAIHttpRequestWorker *worker);
    void getBucketsIDLabelsCallback(OAIHttpRequestWorker *worker);
    void getBucketsIDMembersCallback(OAIHttpRequestWorker *worker);
    void getBucketsIDOwnersCallback(OAIHttpRequestWorker *worker);
    void getSourcesIDBucketsCallback(OAIHttpRequestWorker *worker);
    void patchBucketsIDCallback(OAIHttpRequestWorker *worker);
    void postBucketsCallback(OAIHttpRequestWorker *worker);
    void postBucketsIDLabelsCallback(OAIHttpRequestWorker *worker);
    void postBucketsIDMembersCallback(OAIHttpRequestWorker *worker);
    void postBucketsIDOwnersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteBucketsIDSignal();
    void deleteBucketsIDLabelsIDSignal();
    void deleteBucketsIDMembersIDSignal();
    void deleteBucketsIDOwnersIDSignal();
    void getBucketsSignal(OAIBuckets summary);
    void getBucketsIDSignal(OAIBucket summary);
    void getBucketsIDLabelsSignal(OAILabelsResponse summary);
    void getBucketsIDMembersSignal(OAIResourceMembers summary);
    void getBucketsIDOwnersSignal(OAIResourceOwners summary);
    void getSourcesIDBucketsSignal(OAIBuckets summary);
    void patchBucketsIDSignal(OAIBucket summary);
    void postBucketsSignal(OAIBucket summary);
    void postBucketsIDLabelsSignal(OAILabelResponse summary);
    void postBucketsIDMembersSignal(OAIResourceMember summary);
    void postBucketsIDOwnersSignal(OAIResourceOwner summary);


    void deleteBucketsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteBucketsIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteBucketsIDMembersIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteBucketsIDOwnersIDSignalFull(OAIHttpRequestWorker *worker);
    void getBucketsSignalFull(OAIHttpRequestWorker *worker, OAIBuckets summary);
    void getBucketsIDSignalFull(OAIHttpRequestWorker *worker, OAIBucket summary);
    void getBucketsIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void getBucketsIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMembers summary);
    void getBucketsIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwners summary);
    void getSourcesIDBucketsSignalFull(OAIHttpRequestWorker *worker, OAIBuckets summary);
    void patchBucketsIDSignalFull(OAIHttpRequestWorker *worker, OAIBucket summary);
    void postBucketsSignalFull(OAIHttpRequestWorker *worker, OAIBucket summary);
    void postBucketsIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void postBucketsIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMember summary);
    void postBucketsIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwner summary);

    Q_DECL_DEPRECATED_X("Use deleteBucketsIDSignalError() instead")
    void deleteBucketsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketsIDLabelsIDSignalError() instead")
    void deleteBucketsIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketsIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketsIDMembersIDSignalError() instead")
    void deleteBucketsIDMembersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketsIDMembersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketsIDOwnersIDSignalError() instead")
    void deleteBucketsIDOwnersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketsIDOwnersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsSignalError() instead")
    void getBucketsSignalE(OAIBuckets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsSignalError(OAIBuckets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsIDSignalError() instead")
    void getBucketsIDSignalE(OAIBucket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsIDSignalError(OAIBucket summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsIDLabelsSignalError() instead")
    void getBucketsIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsIDMembersSignalError() instead")
    void getBucketsIDMembersSignalE(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsIDMembersSignalError(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsIDOwnersSignalError() instead")
    void getBucketsIDOwnersSignalE(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsIDOwnersSignalError(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesIDBucketsSignalError() instead")
    void getSourcesIDBucketsSignalE(OAIBuckets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesIDBucketsSignalError(OAIBuckets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchBucketsIDSignalError() instead")
    void patchBucketsIDSignalE(OAIBucket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchBucketsIDSignalError(OAIBucket summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBucketsSignalError() instead")
    void postBucketsSignalE(OAIBucket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBucketsSignalError(OAIBucket summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBucketsIDLabelsSignalError() instead")
    void postBucketsIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBucketsIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBucketsIDMembersSignalError() instead")
    void postBucketsIDMembersSignalE(OAIResourceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBucketsIDMembersSignalError(OAIResourceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBucketsIDOwnersSignalError() instead")
    void postBucketsIDOwnersSignalE(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBucketsIDOwnersSignalError(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteBucketsIDSignalErrorFull() instead")
    void deleteBucketsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketsIDLabelsIDSignalErrorFull() instead")
    void deleteBucketsIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketsIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketsIDMembersIDSignalErrorFull() instead")
    void deleteBucketsIDMembersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketsIDMembersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketsIDOwnersIDSignalErrorFull() instead")
    void deleteBucketsIDOwnersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketsIDOwnersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsSignalErrorFull() instead")
    void getBucketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsIDSignalErrorFull() instead")
    void getBucketsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsIDLabelsSignalErrorFull() instead")
    void getBucketsIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsIDMembersSignalErrorFull() instead")
    void getBucketsIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketsIDOwnersSignalErrorFull() instead")
    void getBucketsIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketsIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesIDBucketsSignalErrorFull() instead")
    void getSourcesIDBucketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesIDBucketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchBucketsIDSignalErrorFull() instead")
    void patchBucketsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchBucketsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBucketsSignalErrorFull() instead")
    void postBucketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBucketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBucketsIDLabelsSignalErrorFull() instead")
    void postBucketsIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBucketsIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBucketsIDMembersSignalErrorFull() instead")
    void postBucketsIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBucketsIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBucketsIDOwnersSignalErrorFull() instead")
    void postBucketsIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBucketsIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
