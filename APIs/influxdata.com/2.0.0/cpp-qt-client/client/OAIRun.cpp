/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRun::OAIRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRun::OAIRun() {
    this->initializeModel();
}

OAIRun::~OAIRun() {}

void OAIRun::initializeModel() {

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_log_isSet = false;
    m_log_isValid = false;

    m_requested_at_isSet = false;
    m_requested_at_isValid = false;

    m_scheduled_for_isSet = false;
    m_scheduled_for_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAIRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRun::fromJsonObject(QJsonObject json) {

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finishedAt")]);
    m_finished_at_isSet = !json[QString("finishedAt")].isNull() && m_finished_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_log_isValid = ::OpenAPI::fromJsonValue(m_log, json[QString("log")]);
    m_log_isSet = !json[QString("log")].isNull() && m_log_isValid;

    m_requested_at_isValid = ::OpenAPI::fromJsonValue(m_requested_at, json[QString("requestedAt")]);
    m_requested_at_isSet = !json[QString("requestedAt")].isNull() && m_requested_at_isValid;

    m_scheduled_for_isValid = ::OpenAPI::fromJsonValue(m_scheduled_for, json[QString("scheduledFor")]);
    m_scheduled_for_isSet = !json[QString("scheduledFor")].isNull() && m_scheduled_for_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskID")]);
    m_task_id_isSet = !json[QString("taskID")].isNull() && m_task_id_isValid;
}

QString OAIRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRun::asJsonObject() const {
    QJsonObject obj;
    if (m_finished_at_isSet) {
        obj.insert(QString("finishedAt"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_log.size() > 0) {
        obj.insert(QString("log"), ::OpenAPI::toJsonValue(m_log));
    }
    if (m_requested_at_isSet) {
        obj.insert(QString("requestedAt"), ::OpenAPI::toJsonValue(m_requested_at));
    }
    if (m_scheduled_for_isSet) {
        obj.insert(QString("scheduledFor"), ::OpenAPI::toJsonValue(m_scheduled_for));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskID"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

QDateTime OAIRun::getFinishedAt() const {
    return m_finished_at;
}
void OAIRun::setFinishedAt(const QDateTime &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIRun::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIRun::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QString OAIRun::getId() const {
    return m_id;
}
void OAIRun::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRun::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRun::is_id_Valid() const{
    return m_id_isValid;
}

OAIRun_links OAIRun::getLinks() const {
    return m_links;
}
void OAIRun::setLinks(const OAIRun_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIRun::is_links_Set() const{
    return m_links_isSet;
}

bool OAIRun::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAILogEvent> OAIRun::getLog() const {
    return m_log;
}
void OAIRun::setLog(const QList<OAILogEvent> &log) {
    m_log = log;
    m_log_isSet = true;
}

bool OAIRun::is_log_Set() const{
    return m_log_isSet;
}

bool OAIRun::is_log_Valid() const{
    return m_log_isValid;
}

QDateTime OAIRun::getRequestedAt() const {
    return m_requested_at;
}
void OAIRun::setRequestedAt(const QDateTime &requested_at) {
    m_requested_at = requested_at;
    m_requested_at_isSet = true;
}

bool OAIRun::is_requested_at_Set() const{
    return m_requested_at_isSet;
}

bool OAIRun::is_requested_at_Valid() const{
    return m_requested_at_isValid;
}

QDateTime OAIRun::getScheduledFor() const {
    return m_scheduled_for;
}
void OAIRun::setScheduledFor(const QDateTime &scheduled_for) {
    m_scheduled_for = scheduled_for;
    m_scheduled_for_isSet = true;
}

bool OAIRun::is_scheduled_for_Set() const{
    return m_scheduled_for_isSet;
}

bool OAIRun::is_scheduled_for_Valid() const{
    return m_scheduled_for_isValid;
}

QDateTime OAIRun::getStartedAt() const {
    return m_started_at;
}
void OAIRun::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIRun::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIRun::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIRun::getStatus() const {
    return m_status;
}
void OAIRun::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRun::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRun::getTaskId() const {
    return m_task_id;
}
void OAIRun::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIRun::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIRun::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAIRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
