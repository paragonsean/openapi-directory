/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentCreate::OAIDocumentCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentCreate::OAIDocumentCreate() {
    this->initializeModel();
}

OAIDocumentCreate::~OAIDocumentCreate() {}

void OAIDocumentCreate::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;
}

void OAIDocumentCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentCreate::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;
}

QString OAIDocumentCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    return obj;
}

OAIObject OAIDocumentCreate::getContent() const {
    return m_content;
}
void OAIDocumentCreate::setContent(const OAIObject &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIDocumentCreate::is_content_Set() const{
    return m_content_isSet;
}

bool OAIDocumentCreate::is_content_Valid() const{
    return m_content_isValid;
}

QList<QString> OAIDocumentCreate::getLabels() const {
    return m_labels;
}
void OAIDocumentCreate::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDocumentCreate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDocumentCreate::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIDocumentMeta OAIDocumentCreate::getMeta() const {
    return m_meta;
}
void OAIDocumentCreate::setMeta(const OAIDocumentMeta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIDocumentCreate::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIDocumentCreate::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIDocumentCreate::getOrg() const {
    return m_org;
}
void OAIDocumentCreate::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIDocumentCreate::is_org_Set() const{
    return m_org_isSet;
}

bool OAIDocumentCreate::is_org_Valid() const{
    return m_org_isValid;
}

QString OAIDocumentCreate::getOrgId() const {
    return m_org_id;
}
void OAIDocumentCreate::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIDocumentCreate::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIDocumentCreate::is_org_id_Valid() const{
    return m_org_id_isValid;
}

bool OAIDocumentCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_meta_isValid && true;
}

} // namespace OpenAPI
