/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHistogramViewProperties.h
 *
 * 
 */

#ifndef OAIHistogramViewProperties_H
#define OAIHistogramViewProperties_H

#include <QJsonObject>

#include "OAIDashboardColor.h"
#include "OAIDashboardQuery.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDashboardColor;
class OAIDashboardQuery;

class OAIHistogramViewProperties : public OAIObject {
public:
    OAIHistogramViewProperties();
    OAIHistogramViewProperties(QString json);
    ~OAIHistogramViewProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBinCount() const;
    void setBinCount(const qint32 &bin_count);
    bool is_bin_count_Set() const;
    bool is_bin_count_Valid() const;

    QList<OAIDashboardColor> getColors() const;
    void setColors(const QList<OAIDashboardColor> &colors);
    bool is_colors_Set() const;
    bool is_colors_Valid() const;

    QList<QString> getFillColumns() const;
    void setFillColumns(const QList<QString> &fill_columns);
    bool is_fill_columns_Set() const;
    bool is_fill_columns_Valid() const;

    bool isLegendColorizeRows() const;
    void setLegendColorizeRows(const bool &legend_colorize_rows);
    bool is_legend_colorize_rows_Set() const;
    bool is_legend_colorize_rows_Valid() const;

    bool isLegendHide() const;
    void setLegendHide(const bool &legend_hide);
    bool is_legend_hide_Set() const;
    bool is_legend_hide_Valid() const;

    float getLegendOpacity() const;
    void setLegendOpacity(const float &legend_opacity);
    bool is_legend_opacity_Set() const;
    bool is_legend_opacity_Valid() const;

    qint32 getLegendOrientationThreshold() const;
    void setLegendOrientationThreshold(const qint32 &legend_orientation_threshold);
    bool is_legend_orientation_threshold_Set() const;
    bool is_legend_orientation_threshold_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QList<OAIDashboardQuery> getQueries() const;
    void setQueries(const QList<OAIDashboardQuery> &queries);
    bool is_queries_Set() const;
    bool is_queries_Valid() const;

    QString getShape() const;
    void setShape(const QString &shape);
    bool is_shape_Set() const;
    bool is_shape_Valid() const;

    bool isShowNoteWhenEmpty() const;
    void setShowNoteWhenEmpty(const bool &show_note_when_empty);
    bool is_show_note_when_empty_Set() const;
    bool is_show_note_when_empty_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getXAxisLabel() const;
    void setXAxisLabel(const QString &x_axis_label);
    bool is_x_axis_label_Set() const;
    bool is_x_axis_label_Valid() const;

    QString getXColumn() const;
    void setXColumn(const QString &x_column);
    bool is_x_column_Set() const;
    bool is_x_column_Valid() const;

    QList<float> getXDomain() const;
    void setXDomain(const QList<float> &x_domain);
    bool is_x_domain_Set() const;
    bool is_x_domain_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bin_count;
    bool m_bin_count_isSet;
    bool m_bin_count_isValid;

    QList<OAIDashboardColor> m_colors;
    bool m_colors_isSet;
    bool m_colors_isValid;

    QList<QString> m_fill_columns;
    bool m_fill_columns_isSet;
    bool m_fill_columns_isValid;

    bool m_legend_colorize_rows;
    bool m_legend_colorize_rows_isSet;
    bool m_legend_colorize_rows_isValid;

    bool m_legend_hide;
    bool m_legend_hide_isSet;
    bool m_legend_hide_isValid;

    float m_legend_opacity;
    bool m_legend_opacity_isSet;
    bool m_legend_opacity_isValid;

    qint32 m_legend_orientation_threshold;
    bool m_legend_orientation_threshold_isSet;
    bool m_legend_orientation_threshold_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QList<OAIDashboardQuery> m_queries;
    bool m_queries_isSet;
    bool m_queries_isValid;

    QString m_shape;
    bool m_shape_isSet;
    bool m_shape_isValid;

    bool m_show_note_when_empty;
    bool m_show_note_when_empty_isSet;
    bool m_show_note_when_empty_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_x_axis_label;
    bool m_x_axis_label_isSet;
    bool m_x_axis_label_isValid;

    QString m_x_column;
    bool m_x_column_isSet;
    bool m_x_column_isValid;

    QList<float> m_x_domain;
    bool m_x_domain_isSet;
    bool m_x_domain_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHistogramViewProperties)

#endif // OAIHistogramViewProperties_H
