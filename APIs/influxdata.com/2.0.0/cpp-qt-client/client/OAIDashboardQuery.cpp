/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardQuery::OAIDashboardQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardQuery::OAIDashboardQuery() {
    this->initializeModel();
}

OAIDashboardQuery::~OAIDashboardQuery() {}

void OAIDashboardQuery::initializeModel() {

    m_builder_config_isSet = false;
    m_builder_config_isValid = false;

    m_edit_mode_isSet = false;
    m_edit_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIDashboardQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardQuery::fromJsonObject(QJsonObject json) {

    m_builder_config_isValid = ::OpenAPI::fromJsonValue(m_builder_config, json[QString("builderConfig")]);
    m_builder_config_isSet = !json[QString("builderConfig")].isNull() && m_builder_config_isValid;

    m_edit_mode_isValid = ::OpenAPI::fromJsonValue(m_edit_mode, json[QString("editMode")]);
    m_edit_mode_isSet = !json[QString("editMode")].isNull() && m_edit_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIDashboardQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_builder_config.isSet()) {
        obj.insert(QString("builderConfig"), ::OpenAPI::toJsonValue(m_builder_config));
    }
    if (m_edit_mode.isSet()) {
        obj.insert(QString("editMode"), ::OpenAPI::toJsonValue(m_edit_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAIBuilderConfig OAIDashboardQuery::getBuilderConfig() const {
    return m_builder_config;
}
void OAIDashboardQuery::setBuilderConfig(const OAIBuilderConfig &builder_config) {
    m_builder_config = builder_config;
    m_builder_config_isSet = true;
}

bool OAIDashboardQuery::is_builder_config_Set() const{
    return m_builder_config_isSet;
}

bool OAIDashboardQuery::is_builder_config_Valid() const{
    return m_builder_config_isValid;
}

OAIQueryEditMode OAIDashboardQuery::getEditMode() const {
    return m_edit_mode;
}
void OAIDashboardQuery::setEditMode(const OAIQueryEditMode &edit_mode) {
    m_edit_mode = edit_mode;
    m_edit_mode_isSet = true;
}

bool OAIDashboardQuery::is_edit_mode_Set() const{
    return m_edit_mode_isSet;
}

bool OAIDashboardQuery::is_edit_mode_Valid() const{
    return m_edit_mode_isValid;
}

QString OAIDashboardQuery::getName() const {
    return m_name;
}
void OAIDashboardQuery::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDashboardQuery::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDashboardQuery::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDashboardQuery::getText() const {
    return m_text;
}
void OAIDashboardQuery::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDashboardQuery::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDashboardQuery::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDashboardQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builder_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
