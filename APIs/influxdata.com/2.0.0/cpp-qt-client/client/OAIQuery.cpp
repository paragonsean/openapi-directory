/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_dialect_isSet = false;
    m_dialect_isValid = false;

    m_r_extern_isSet = false;
    m_r_extern_isValid = false;

    m_now_isSet = false;
    m_now_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_dialect_isValid = ::OpenAPI::fromJsonValue(m_dialect, json[QString("dialect")]);
    m_dialect_isSet = !json[QString("dialect")].isNull() && m_dialect_isValid;

    m_r_extern_isValid = ::OpenAPI::fromJsonValue(m_r_extern, json[QString("extern")]);
    m_r_extern_isSet = !json[QString("extern")].isNull() && m_r_extern_isValid;

    m_now_isValid = ::OpenAPI::fromJsonValue(m_now, json[QString("now")]);
    m_now_isSet = !json[QString("now")].isNull() && m_now_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_dialect.isSet()) {
        obj.insert(QString("dialect"), ::OpenAPI::toJsonValue(m_dialect));
    }
    if (m_r_extern.isSet()) {
        obj.insert(QString("extern"), ::OpenAPI::toJsonValue(m_r_extern));
    }
    if (m_now_isSet) {
        obj.insert(QString("now"), ::OpenAPI::toJsonValue(m_now));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIDialect OAIQuery::getDialect() const {
    return m_dialect;
}
void OAIQuery::setDialect(const OAIDialect &dialect) {
    m_dialect = dialect;
    m_dialect_isSet = true;
}

bool OAIQuery::is_dialect_Set() const{
    return m_dialect_isSet;
}

bool OAIQuery::is_dialect_Valid() const{
    return m_dialect_isValid;
}

OAIFile OAIQuery::getRExtern() const {
    return m_r_extern;
}
void OAIQuery::setRExtern(const OAIFile &r_extern) {
    m_r_extern = r_extern;
    m_r_extern_isSet = true;
}

bool OAIQuery::is_r_extern_Set() const{
    return m_r_extern_isSet;
}

bool OAIQuery::is_r_extern_Valid() const{
    return m_r_extern_isValid;
}

QDateTime OAIQuery::getNow() const {
    return m_now;
}
void OAIQuery::setNow(const QDateTime &now) {
    m_now = now;
    m_now_isSet = true;
}

bool OAIQuery::is_now_Set() const{
    return m_now_isSet;
}

bool OAIQuery::is_now_Valid() const{
    return m_now_isValid;
}

QMap<QString, QJsonValue> OAIQuery::getParams() const {
    return m_params;
}
void OAIQuery::setParams(const QMap<QString, QJsonValue> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIQuery::is_params_Set() const{
    return m_params_isSet;
}

bool OAIQuery::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIQuery::getQuery() const {
    return m_query;
}
void OAIQuery::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIQuery::is_query_Set() const{
    return m_query_isSet;
}

bool OAIQuery::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIQuery::getType() const {
    return m_type;
}
void OAIQuery::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIQuery::is_type_Set() const{
    return m_type_isSet;
}

bool OAIQuery::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dialect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_extern.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_isValid && true;
}

} // namespace OpenAPI
