/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuilderConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuilderConfig::OAIBuilderConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuilderConfig::OAIBuilderConfig() {
    this->initializeModel();
}

OAIBuilderConfig::~OAIBuilderConfig() {}

void OAIBuilderConfig::initializeModel() {

    m_aggregate_window_isSet = false;
    m_aggregate_window_isValid = false;

    m_buckets_isSet = false;
    m_buckets_isValid = false;

    m_functions_isSet = false;
    m_functions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIBuilderConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuilderConfig::fromJsonObject(QJsonObject json) {

    m_aggregate_window_isValid = ::OpenAPI::fromJsonValue(m_aggregate_window, json[QString("aggregateWindow")]);
    m_aggregate_window_isSet = !json[QString("aggregateWindow")].isNull() && m_aggregate_window_isValid;

    m_buckets_isValid = ::OpenAPI::fromJsonValue(m_buckets, json[QString("buckets")]);
    m_buckets_isSet = !json[QString("buckets")].isNull() && m_buckets_isValid;

    m_functions_isValid = ::OpenAPI::fromJsonValue(m_functions, json[QString("functions")]);
    m_functions_isSet = !json[QString("functions")].isNull() && m_functions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIBuilderConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuilderConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_window.isSet()) {
        obj.insert(QString("aggregateWindow"), ::OpenAPI::toJsonValue(m_aggregate_window));
    }
    if (m_buckets.size() > 0) {
        obj.insert(QString("buckets"), ::OpenAPI::toJsonValue(m_buckets));
    }
    if (m_functions.size() > 0) {
        obj.insert(QString("functions"), ::OpenAPI::toJsonValue(m_functions));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIBuilderConfig_aggregateWindow OAIBuilderConfig::getAggregateWindow() const {
    return m_aggregate_window;
}
void OAIBuilderConfig::setAggregateWindow(const OAIBuilderConfig_aggregateWindow &aggregate_window) {
    m_aggregate_window = aggregate_window;
    m_aggregate_window_isSet = true;
}

bool OAIBuilderConfig::is_aggregate_window_Set() const{
    return m_aggregate_window_isSet;
}

bool OAIBuilderConfig::is_aggregate_window_Valid() const{
    return m_aggregate_window_isValid;
}

QList<QString> OAIBuilderConfig::getBuckets() const {
    return m_buckets;
}
void OAIBuilderConfig::setBuckets(const QList<QString> &buckets) {
    m_buckets = buckets;
    m_buckets_isSet = true;
}

bool OAIBuilderConfig::is_buckets_Set() const{
    return m_buckets_isSet;
}

bool OAIBuilderConfig::is_buckets_Valid() const{
    return m_buckets_isValid;
}

QList<OAIBuilderFunctionsType> OAIBuilderConfig::getFunctions() const {
    return m_functions;
}
void OAIBuilderConfig::setFunctions(const QList<OAIBuilderFunctionsType> &functions) {
    m_functions = functions;
    m_functions_isSet = true;
}

bool OAIBuilderConfig::is_functions_Set() const{
    return m_functions_isSet;
}

bool OAIBuilderConfig::is_functions_Valid() const{
    return m_functions_isValid;
}

QList<OAIBuilderTagsType> OAIBuilderConfig::getTags() const {
    return m_tags;
}
void OAIBuilderConfig::setTags(const QList<OAIBuilderTagsType> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIBuilderConfig::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIBuilderConfig::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIBuilderConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buckets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_functions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuilderConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
