/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummaryLabel_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummaryLabel_properties::OAITemplateSummaryLabel_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummaryLabel_properties::OAITemplateSummaryLabel_properties() {
    this->initializeModel();
}

OAITemplateSummaryLabel_properties::~OAITemplateSummaryLabel_properties() {}

void OAITemplateSummaryLabel_properties::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAITemplateSummaryLabel_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummaryLabel_properties::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAITemplateSummaryLabel_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummaryLabel_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAITemplateSummaryLabel_properties::getColor() const {
    return m_color;
}
void OAITemplateSummaryLabel_properties::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAITemplateSummaryLabel_properties::is_color_Set() const{
    return m_color_isSet;
}

bool OAITemplateSummaryLabel_properties::is_color_Valid() const{
    return m_color_isValid;
}

QString OAITemplateSummaryLabel_properties::getDescription() const {
    return m_description;
}
void OAITemplateSummaryLabel_properties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITemplateSummaryLabel_properties::is_description_Set() const{
    return m_description_isSet;
}

bool OAITemplateSummaryLabel_properties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAITemplateSummaryLabel_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummaryLabel_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
