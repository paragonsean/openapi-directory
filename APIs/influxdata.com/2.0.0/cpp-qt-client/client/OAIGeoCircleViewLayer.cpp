/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoCircleViewLayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoCircleViewLayer::OAIGeoCircleViewLayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoCircleViewLayer::OAIGeoCircleViewLayer() {
    this->initializeModel();
}

OAIGeoCircleViewLayer::~OAIGeoCircleViewLayer() {}

void OAIGeoCircleViewLayer::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_color_dimension_isSet = false;
    m_color_dimension_isValid = false;

    m_color_field_isSet = false;
    m_color_field_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_interpolate_colors_isSet = false;
    m_interpolate_colors_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_radius_dimension_isSet = false;
    m_radius_dimension_isValid = false;

    m_radius_field_isSet = false;
    m_radius_field_isValid = false;
}

void OAIGeoCircleViewLayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoCircleViewLayer::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_color_dimension_isValid = ::OpenAPI::fromJsonValue(m_color_dimension, json[QString("colorDimension")]);
    m_color_dimension_isSet = !json[QString("colorDimension")].isNull() && m_color_dimension_isValid;

    m_color_field_isValid = ::OpenAPI::fromJsonValue(m_color_field, json[QString("colorField")]);
    m_color_field_isSet = !json[QString("colorField")].isNull() && m_color_field_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_interpolate_colors_isValid = ::OpenAPI::fromJsonValue(m_interpolate_colors, json[QString("interpolateColors")]);
    m_interpolate_colors_isSet = !json[QString("interpolateColors")].isNull() && m_interpolate_colors_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;

    m_radius_dimension_isValid = ::OpenAPI::fromJsonValue(m_radius_dimension, json[QString("radiusDimension")]);
    m_radius_dimension_isSet = !json[QString("radiusDimension")].isNull() && m_radius_dimension_isValid;

    m_radius_field_isValid = ::OpenAPI::fromJsonValue(m_radius_field, json[QString("radiusField")]);
    m_radius_field_isSet = !json[QString("radiusField")].isNull() && m_radius_field_isValid;
}

QString OAIGeoCircleViewLayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoCircleViewLayer::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_color_dimension.isSet()) {
        obj.insert(QString("colorDimension"), ::OpenAPI::toJsonValue(m_color_dimension));
    }
    if (m_color_field_isSet) {
        obj.insert(QString("colorField"), ::OpenAPI::toJsonValue(m_color_field));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_interpolate_colors_isSet) {
        obj.insert(QString("interpolateColors"), ::OpenAPI::toJsonValue(m_interpolate_colors));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_radius_dimension.isSet()) {
        obj.insert(QString("radiusDimension"), ::OpenAPI::toJsonValue(m_radius_dimension));
    }
    if (m_radius_field_isSet) {
        obj.insert(QString("radiusField"), ::OpenAPI::toJsonValue(m_radius_field));
    }
    return obj;
}

QString OAIGeoCircleViewLayer::getType() const {
    return m_type;
}
void OAIGeoCircleViewLayer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGeoCircleViewLayer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGeoCircleViewLayer::is_type_Valid() const{
    return m_type_isValid;
}

OAIAxis OAIGeoCircleViewLayer::getColorDimension() const {
    return m_color_dimension;
}
void OAIGeoCircleViewLayer::setColorDimension(const OAIAxis &color_dimension) {
    m_color_dimension = color_dimension;
    m_color_dimension_isSet = true;
}

bool OAIGeoCircleViewLayer::is_color_dimension_Set() const{
    return m_color_dimension_isSet;
}

bool OAIGeoCircleViewLayer::is_color_dimension_Valid() const{
    return m_color_dimension_isValid;
}

QString OAIGeoCircleViewLayer::getColorField() const {
    return m_color_field;
}
void OAIGeoCircleViewLayer::setColorField(const QString &color_field) {
    m_color_field = color_field;
    m_color_field_isSet = true;
}

bool OAIGeoCircleViewLayer::is_color_field_Set() const{
    return m_color_field_isSet;
}

bool OAIGeoCircleViewLayer::is_color_field_Valid() const{
    return m_color_field_isValid;
}

QList<OAIDashboardColor> OAIGeoCircleViewLayer::getColors() const {
    return m_colors;
}
void OAIGeoCircleViewLayer::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIGeoCircleViewLayer::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIGeoCircleViewLayer::is_colors_Valid() const{
    return m_colors_isValid;
}

bool OAIGeoCircleViewLayer::isInterpolateColors() const {
    return m_interpolate_colors;
}
void OAIGeoCircleViewLayer::setInterpolateColors(const bool &interpolate_colors) {
    m_interpolate_colors = interpolate_colors;
    m_interpolate_colors_isSet = true;
}

bool OAIGeoCircleViewLayer::is_interpolate_colors_Set() const{
    return m_interpolate_colors_isSet;
}

bool OAIGeoCircleViewLayer::is_interpolate_colors_Valid() const{
    return m_interpolate_colors_isValid;
}

qint32 OAIGeoCircleViewLayer::getRadius() const {
    return m_radius;
}
void OAIGeoCircleViewLayer::setRadius(const qint32 &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIGeoCircleViewLayer::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIGeoCircleViewLayer::is_radius_Valid() const{
    return m_radius_isValid;
}

OAIAxis OAIGeoCircleViewLayer::getRadiusDimension() const {
    return m_radius_dimension;
}
void OAIGeoCircleViewLayer::setRadiusDimension(const OAIAxis &radius_dimension) {
    m_radius_dimension = radius_dimension;
    m_radius_dimension_isSet = true;
}

bool OAIGeoCircleViewLayer::is_radius_dimension_Set() const{
    return m_radius_dimension_isSet;
}

bool OAIGeoCircleViewLayer::is_radius_dimension_Valid() const{
    return m_radius_dimension_isValid;
}

QString OAIGeoCircleViewLayer::getRadiusField() const {
    return m_radius_field;
}
void OAIGeoCircleViewLayer::setRadiusField(const QString &radius_field) {
    m_radius_field = radius_field;
    m_radius_field_isSet = true;
}

bool OAIGeoCircleViewLayer::is_radius_field_Set() const{
    return m_radius_field_isSet;
}

bool OAIGeoCircleViewLayer::is_radius_field_Valid() const{
    return m_radius_field_isValid;
}

bool OAIGeoCircleViewLayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpolate_colors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_field_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoCircleViewLayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_color_dimension_isValid && m_color_field_isValid && m_colors_isValid && m_radius_dimension_isValid && m_radius_field_isValid && true;
}

} // namespace OpenAPI
