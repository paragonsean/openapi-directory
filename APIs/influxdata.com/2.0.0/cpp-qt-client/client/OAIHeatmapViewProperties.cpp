/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeatmapViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeatmapViewProperties::OAIHeatmapViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeatmapViewProperties::OAIHeatmapViewProperties() {
    this->initializeModel();
}

OAIHeatmapViewProperties::~OAIHeatmapViewProperties() {}

void OAIHeatmapViewProperties::initializeModel() {

    m_bin_size_isSet = false;
    m_bin_size_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_generate_x_axis_ticks_isSet = false;
    m_generate_x_axis_ticks_isValid = false;

    m_generate_y_axis_ticks_isSet = false;
    m_generate_y_axis_ticks_isValid = false;

    m_legend_colorize_rows_isSet = false;
    m_legend_colorize_rows_isValid = false;

    m_legend_hide_isSet = false;
    m_legend_hide_isValid = false;

    m_legend_opacity_isSet = false;
    m_legend_opacity_isValid = false;

    m_legend_orientation_threshold_isSet = false;
    m_legend_orientation_threshold_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_show_note_when_empty_isSet = false;
    m_show_note_when_empty_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_x_axis_label_isSet = false;
    m_x_axis_label_isValid = false;

    m_x_column_isSet = false;
    m_x_column_isValid = false;

    m_x_domain_isSet = false;
    m_x_domain_isValid = false;

    m_x_prefix_isSet = false;
    m_x_prefix_isValid = false;

    m_x_suffix_isSet = false;
    m_x_suffix_isValid = false;

    m_x_tick_start_isSet = false;
    m_x_tick_start_isValid = false;

    m_x_tick_step_isSet = false;
    m_x_tick_step_isValid = false;

    m_x_total_ticks_isSet = false;
    m_x_total_ticks_isValid = false;

    m_y_axis_label_isSet = false;
    m_y_axis_label_isValid = false;

    m_y_column_isSet = false;
    m_y_column_isValid = false;

    m_y_domain_isSet = false;
    m_y_domain_isValid = false;

    m_y_prefix_isSet = false;
    m_y_prefix_isValid = false;

    m_y_suffix_isSet = false;
    m_y_suffix_isValid = false;

    m_y_tick_start_isSet = false;
    m_y_tick_start_isValid = false;

    m_y_tick_step_isSet = false;
    m_y_tick_step_isValid = false;

    m_y_total_ticks_isSet = false;
    m_y_total_ticks_isValid = false;
}

void OAIHeatmapViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeatmapViewProperties::fromJsonObject(QJsonObject json) {

    m_bin_size_isValid = ::OpenAPI::fromJsonValue(m_bin_size, json[QString("binSize")]);
    m_bin_size_isSet = !json[QString("binSize")].isNull() && m_bin_size_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_generate_x_axis_ticks_isValid = ::OpenAPI::fromJsonValue(m_generate_x_axis_ticks, json[QString("generateXAxisTicks")]);
    m_generate_x_axis_ticks_isSet = !json[QString("generateXAxisTicks")].isNull() && m_generate_x_axis_ticks_isValid;

    m_generate_y_axis_ticks_isValid = ::OpenAPI::fromJsonValue(m_generate_y_axis_ticks, json[QString("generateYAxisTicks")]);
    m_generate_y_axis_ticks_isSet = !json[QString("generateYAxisTicks")].isNull() && m_generate_y_axis_ticks_isValid;

    m_legend_colorize_rows_isValid = ::OpenAPI::fromJsonValue(m_legend_colorize_rows, json[QString("legendColorizeRows")]);
    m_legend_colorize_rows_isSet = !json[QString("legendColorizeRows")].isNull() && m_legend_colorize_rows_isValid;

    m_legend_hide_isValid = ::OpenAPI::fromJsonValue(m_legend_hide, json[QString("legendHide")]);
    m_legend_hide_isSet = !json[QString("legendHide")].isNull() && m_legend_hide_isValid;

    m_legend_opacity_isValid = ::OpenAPI::fromJsonValue(m_legend_opacity, json[QString("legendOpacity")]);
    m_legend_opacity_isSet = !json[QString("legendOpacity")].isNull() && m_legend_opacity_isValid;

    m_legend_orientation_threshold_isValid = ::OpenAPI::fromJsonValue(m_legend_orientation_threshold, json[QString("legendOrientationThreshold")]);
    m_legend_orientation_threshold_isSet = !json[QString("legendOrientationThreshold")].isNull() && m_legend_orientation_threshold_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_show_note_when_empty_isValid = ::OpenAPI::fromJsonValue(m_show_note_when_empty, json[QString("showNoteWhenEmpty")]);
    m_show_note_when_empty_isSet = !json[QString("showNoteWhenEmpty")].isNull() && m_show_note_when_empty_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_x_axis_label_isValid = ::OpenAPI::fromJsonValue(m_x_axis_label, json[QString("xAxisLabel")]);
    m_x_axis_label_isSet = !json[QString("xAxisLabel")].isNull() && m_x_axis_label_isValid;

    m_x_column_isValid = ::OpenAPI::fromJsonValue(m_x_column, json[QString("xColumn")]);
    m_x_column_isSet = !json[QString("xColumn")].isNull() && m_x_column_isValid;

    m_x_domain_isValid = ::OpenAPI::fromJsonValue(m_x_domain, json[QString("xDomain")]);
    m_x_domain_isSet = !json[QString("xDomain")].isNull() && m_x_domain_isValid;

    m_x_prefix_isValid = ::OpenAPI::fromJsonValue(m_x_prefix, json[QString("xPrefix")]);
    m_x_prefix_isSet = !json[QString("xPrefix")].isNull() && m_x_prefix_isValid;

    m_x_suffix_isValid = ::OpenAPI::fromJsonValue(m_x_suffix, json[QString("xSuffix")]);
    m_x_suffix_isSet = !json[QString("xSuffix")].isNull() && m_x_suffix_isValid;

    m_x_tick_start_isValid = ::OpenAPI::fromJsonValue(m_x_tick_start, json[QString("xTickStart")]);
    m_x_tick_start_isSet = !json[QString("xTickStart")].isNull() && m_x_tick_start_isValid;

    m_x_tick_step_isValid = ::OpenAPI::fromJsonValue(m_x_tick_step, json[QString("xTickStep")]);
    m_x_tick_step_isSet = !json[QString("xTickStep")].isNull() && m_x_tick_step_isValid;

    m_x_total_ticks_isValid = ::OpenAPI::fromJsonValue(m_x_total_ticks, json[QString("xTotalTicks")]);
    m_x_total_ticks_isSet = !json[QString("xTotalTicks")].isNull() && m_x_total_ticks_isValid;

    m_y_axis_label_isValid = ::OpenAPI::fromJsonValue(m_y_axis_label, json[QString("yAxisLabel")]);
    m_y_axis_label_isSet = !json[QString("yAxisLabel")].isNull() && m_y_axis_label_isValid;

    m_y_column_isValid = ::OpenAPI::fromJsonValue(m_y_column, json[QString("yColumn")]);
    m_y_column_isSet = !json[QString("yColumn")].isNull() && m_y_column_isValid;

    m_y_domain_isValid = ::OpenAPI::fromJsonValue(m_y_domain, json[QString("yDomain")]);
    m_y_domain_isSet = !json[QString("yDomain")].isNull() && m_y_domain_isValid;

    m_y_prefix_isValid = ::OpenAPI::fromJsonValue(m_y_prefix, json[QString("yPrefix")]);
    m_y_prefix_isSet = !json[QString("yPrefix")].isNull() && m_y_prefix_isValid;

    m_y_suffix_isValid = ::OpenAPI::fromJsonValue(m_y_suffix, json[QString("ySuffix")]);
    m_y_suffix_isSet = !json[QString("ySuffix")].isNull() && m_y_suffix_isValid;

    m_y_tick_start_isValid = ::OpenAPI::fromJsonValue(m_y_tick_start, json[QString("yTickStart")]);
    m_y_tick_start_isSet = !json[QString("yTickStart")].isNull() && m_y_tick_start_isValid;

    m_y_tick_step_isValid = ::OpenAPI::fromJsonValue(m_y_tick_step, json[QString("yTickStep")]);
    m_y_tick_step_isSet = !json[QString("yTickStep")].isNull() && m_y_tick_step_isValid;

    m_y_total_ticks_isValid = ::OpenAPI::fromJsonValue(m_y_total_ticks, json[QString("yTotalTicks")]);
    m_y_total_ticks_isSet = !json[QString("yTotalTicks")].isNull() && m_y_total_ticks_isValid;
}

QString OAIHeatmapViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeatmapViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bin_size_isSet) {
        obj.insert(QString("binSize"), ::OpenAPI::toJsonValue(m_bin_size));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_generate_x_axis_ticks.size() > 0) {
        obj.insert(QString("generateXAxisTicks"), ::OpenAPI::toJsonValue(m_generate_x_axis_ticks));
    }
    if (m_generate_y_axis_ticks.size() > 0) {
        obj.insert(QString("generateYAxisTicks"), ::OpenAPI::toJsonValue(m_generate_y_axis_ticks));
    }
    if (m_legend_colorize_rows_isSet) {
        obj.insert(QString("legendColorizeRows"), ::OpenAPI::toJsonValue(m_legend_colorize_rows));
    }
    if (m_legend_hide_isSet) {
        obj.insert(QString("legendHide"), ::OpenAPI::toJsonValue(m_legend_hide));
    }
    if (m_legend_opacity_isSet) {
        obj.insert(QString("legendOpacity"), ::OpenAPI::toJsonValue(m_legend_opacity));
    }
    if (m_legend_orientation_threshold_isSet) {
        obj.insert(QString("legendOrientationThreshold"), ::OpenAPI::toJsonValue(m_legend_orientation_threshold));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_show_note_when_empty_isSet) {
        obj.insert(QString("showNoteWhenEmpty"), ::OpenAPI::toJsonValue(m_show_note_when_empty));
    }
    if (m_time_format_isSet) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_x_axis_label_isSet) {
        obj.insert(QString("xAxisLabel"), ::OpenAPI::toJsonValue(m_x_axis_label));
    }
    if (m_x_column_isSet) {
        obj.insert(QString("xColumn"), ::OpenAPI::toJsonValue(m_x_column));
    }
    if (m_x_domain.size() > 0) {
        obj.insert(QString("xDomain"), ::OpenAPI::toJsonValue(m_x_domain));
    }
    if (m_x_prefix_isSet) {
        obj.insert(QString("xPrefix"), ::OpenAPI::toJsonValue(m_x_prefix));
    }
    if (m_x_suffix_isSet) {
        obj.insert(QString("xSuffix"), ::OpenAPI::toJsonValue(m_x_suffix));
    }
    if (m_x_tick_start_isSet) {
        obj.insert(QString("xTickStart"), ::OpenAPI::toJsonValue(m_x_tick_start));
    }
    if (m_x_tick_step_isSet) {
        obj.insert(QString("xTickStep"), ::OpenAPI::toJsonValue(m_x_tick_step));
    }
    if (m_x_total_ticks_isSet) {
        obj.insert(QString("xTotalTicks"), ::OpenAPI::toJsonValue(m_x_total_ticks));
    }
    if (m_y_axis_label_isSet) {
        obj.insert(QString("yAxisLabel"), ::OpenAPI::toJsonValue(m_y_axis_label));
    }
    if (m_y_column_isSet) {
        obj.insert(QString("yColumn"), ::OpenAPI::toJsonValue(m_y_column));
    }
    if (m_y_domain.size() > 0) {
        obj.insert(QString("yDomain"), ::OpenAPI::toJsonValue(m_y_domain));
    }
    if (m_y_prefix_isSet) {
        obj.insert(QString("yPrefix"), ::OpenAPI::toJsonValue(m_y_prefix));
    }
    if (m_y_suffix_isSet) {
        obj.insert(QString("ySuffix"), ::OpenAPI::toJsonValue(m_y_suffix));
    }
    if (m_y_tick_start_isSet) {
        obj.insert(QString("yTickStart"), ::OpenAPI::toJsonValue(m_y_tick_start));
    }
    if (m_y_tick_step_isSet) {
        obj.insert(QString("yTickStep"), ::OpenAPI::toJsonValue(m_y_tick_step));
    }
    if (m_y_total_ticks_isSet) {
        obj.insert(QString("yTotalTicks"), ::OpenAPI::toJsonValue(m_y_total_ticks));
    }
    return obj;
}

double OAIHeatmapViewProperties::getBinSize() const {
    return m_bin_size;
}
void OAIHeatmapViewProperties::setBinSize(const double &bin_size) {
    m_bin_size = bin_size;
    m_bin_size_isSet = true;
}

bool OAIHeatmapViewProperties::is_bin_size_Set() const{
    return m_bin_size_isSet;
}

bool OAIHeatmapViewProperties::is_bin_size_Valid() const{
    return m_bin_size_isValid;
}

QList<QString> OAIHeatmapViewProperties::getColors() const {
    return m_colors;
}
void OAIHeatmapViewProperties::setColors(const QList<QString> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIHeatmapViewProperties::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIHeatmapViewProperties::is_colors_Valid() const{
    return m_colors_isValid;
}

QList<QString> OAIHeatmapViewProperties::getGenerateXAxisTicks() const {
    return m_generate_x_axis_ticks;
}
void OAIHeatmapViewProperties::setGenerateXAxisTicks(const QList<QString> &generate_x_axis_ticks) {
    m_generate_x_axis_ticks = generate_x_axis_ticks;
    m_generate_x_axis_ticks_isSet = true;
}

bool OAIHeatmapViewProperties::is_generate_x_axis_ticks_Set() const{
    return m_generate_x_axis_ticks_isSet;
}

bool OAIHeatmapViewProperties::is_generate_x_axis_ticks_Valid() const{
    return m_generate_x_axis_ticks_isValid;
}

QList<QString> OAIHeatmapViewProperties::getGenerateYAxisTicks() const {
    return m_generate_y_axis_ticks;
}
void OAIHeatmapViewProperties::setGenerateYAxisTicks(const QList<QString> &generate_y_axis_ticks) {
    m_generate_y_axis_ticks = generate_y_axis_ticks;
    m_generate_y_axis_ticks_isSet = true;
}

bool OAIHeatmapViewProperties::is_generate_y_axis_ticks_Set() const{
    return m_generate_y_axis_ticks_isSet;
}

bool OAIHeatmapViewProperties::is_generate_y_axis_ticks_Valid() const{
    return m_generate_y_axis_ticks_isValid;
}

bool OAIHeatmapViewProperties::isLegendColorizeRows() const {
    return m_legend_colorize_rows;
}
void OAIHeatmapViewProperties::setLegendColorizeRows(const bool &legend_colorize_rows) {
    m_legend_colorize_rows = legend_colorize_rows;
    m_legend_colorize_rows_isSet = true;
}

bool OAIHeatmapViewProperties::is_legend_colorize_rows_Set() const{
    return m_legend_colorize_rows_isSet;
}

bool OAIHeatmapViewProperties::is_legend_colorize_rows_Valid() const{
    return m_legend_colorize_rows_isValid;
}

bool OAIHeatmapViewProperties::isLegendHide() const {
    return m_legend_hide;
}
void OAIHeatmapViewProperties::setLegendHide(const bool &legend_hide) {
    m_legend_hide = legend_hide;
    m_legend_hide_isSet = true;
}

bool OAIHeatmapViewProperties::is_legend_hide_Set() const{
    return m_legend_hide_isSet;
}

bool OAIHeatmapViewProperties::is_legend_hide_Valid() const{
    return m_legend_hide_isValid;
}

float OAIHeatmapViewProperties::getLegendOpacity() const {
    return m_legend_opacity;
}
void OAIHeatmapViewProperties::setLegendOpacity(const float &legend_opacity) {
    m_legend_opacity = legend_opacity;
    m_legend_opacity_isSet = true;
}

bool OAIHeatmapViewProperties::is_legend_opacity_Set() const{
    return m_legend_opacity_isSet;
}

bool OAIHeatmapViewProperties::is_legend_opacity_Valid() const{
    return m_legend_opacity_isValid;
}

qint32 OAIHeatmapViewProperties::getLegendOrientationThreshold() const {
    return m_legend_orientation_threshold;
}
void OAIHeatmapViewProperties::setLegendOrientationThreshold(const qint32 &legend_orientation_threshold) {
    m_legend_orientation_threshold = legend_orientation_threshold;
    m_legend_orientation_threshold_isSet = true;
}

bool OAIHeatmapViewProperties::is_legend_orientation_threshold_Set() const{
    return m_legend_orientation_threshold_isSet;
}

bool OAIHeatmapViewProperties::is_legend_orientation_threshold_Valid() const{
    return m_legend_orientation_threshold_isValid;
}

QString OAIHeatmapViewProperties::getNote() const {
    return m_note;
}
void OAIHeatmapViewProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIHeatmapViewProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIHeatmapViewProperties::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIDashboardQuery> OAIHeatmapViewProperties::getQueries() const {
    return m_queries;
}
void OAIHeatmapViewProperties::setQueries(const QList<OAIDashboardQuery> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIHeatmapViewProperties::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIHeatmapViewProperties::is_queries_Valid() const{
    return m_queries_isValid;
}

QString OAIHeatmapViewProperties::getShape() const {
    return m_shape;
}
void OAIHeatmapViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIHeatmapViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIHeatmapViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

bool OAIHeatmapViewProperties::isShowNoteWhenEmpty() const {
    return m_show_note_when_empty;
}
void OAIHeatmapViewProperties::setShowNoteWhenEmpty(const bool &show_note_when_empty) {
    m_show_note_when_empty = show_note_when_empty;
    m_show_note_when_empty_isSet = true;
}

bool OAIHeatmapViewProperties::is_show_note_when_empty_Set() const{
    return m_show_note_when_empty_isSet;
}

bool OAIHeatmapViewProperties::is_show_note_when_empty_Valid() const{
    return m_show_note_when_empty_isValid;
}

QString OAIHeatmapViewProperties::getTimeFormat() const {
    return m_time_format;
}
void OAIHeatmapViewProperties::setTimeFormat(const QString &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAIHeatmapViewProperties::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAIHeatmapViewProperties::is_time_format_Valid() const{
    return m_time_format_isValid;
}

QString OAIHeatmapViewProperties::getType() const {
    return m_type;
}
void OAIHeatmapViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHeatmapViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHeatmapViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIHeatmapViewProperties::getXAxisLabel() const {
    return m_x_axis_label;
}
void OAIHeatmapViewProperties::setXAxisLabel(const QString &x_axis_label) {
    m_x_axis_label = x_axis_label;
    m_x_axis_label_isSet = true;
}

bool OAIHeatmapViewProperties::is_x_axis_label_Set() const{
    return m_x_axis_label_isSet;
}

bool OAIHeatmapViewProperties::is_x_axis_label_Valid() const{
    return m_x_axis_label_isValid;
}

QString OAIHeatmapViewProperties::getXColumn() const {
    return m_x_column;
}
void OAIHeatmapViewProperties::setXColumn(const QString &x_column) {
    m_x_column = x_column;
    m_x_column_isSet = true;
}

bool OAIHeatmapViewProperties::is_x_column_Set() const{
    return m_x_column_isSet;
}

bool OAIHeatmapViewProperties::is_x_column_Valid() const{
    return m_x_column_isValid;
}

QList<double> OAIHeatmapViewProperties::getXDomain() const {
    return m_x_domain;
}
void OAIHeatmapViewProperties::setXDomain(const QList<double> &x_domain) {
    m_x_domain = x_domain;
    m_x_domain_isSet = true;
}

bool OAIHeatmapViewProperties::is_x_domain_Set() const{
    return m_x_domain_isSet;
}

bool OAIHeatmapViewProperties::is_x_domain_Valid() const{
    return m_x_domain_isValid;
}

QString OAIHeatmapViewProperties::getXPrefix() const {
    return m_x_prefix;
}
void OAIHeatmapViewProperties::setXPrefix(const QString &x_prefix) {
    m_x_prefix = x_prefix;
    m_x_prefix_isSet = true;
}

bool OAIHeatmapViewProperties::is_x_prefix_Set() const{
    return m_x_prefix_isSet;
}

bool OAIHeatmapViewProperties::is_x_prefix_Valid() const{
    return m_x_prefix_isValid;
}

QString OAIHeatmapViewProperties::getXSuffix() const {
    return m_x_suffix;
}
void OAIHeatmapViewProperties::setXSuffix(const QString &x_suffix) {
    m_x_suffix = x_suffix;
    m_x_suffix_isSet = true;
}

bool OAIHeatmapViewProperties::is_x_suffix_Set() const{
    return m_x_suffix_isSet;
}

bool OAIHeatmapViewProperties::is_x_suffix_Valid() const{
    return m_x_suffix_isValid;
}

float OAIHeatmapViewProperties::getXTickStart() const {
    return m_x_tick_start;
}
void OAIHeatmapViewProperties::setXTickStart(const float &x_tick_start) {
    m_x_tick_start = x_tick_start;
    m_x_tick_start_isSet = true;
}

bool OAIHeatmapViewProperties::is_x_tick_start_Set() const{
    return m_x_tick_start_isSet;
}

bool OAIHeatmapViewProperties::is_x_tick_start_Valid() const{
    return m_x_tick_start_isValid;
}

float OAIHeatmapViewProperties::getXTickStep() const {
    return m_x_tick_step;
}
void OAIHeatmapViewProperties::setXTickStep(const float &x_tick_step) {
    m_x_tick_step = x_tick_step;
    m_x_tick_step_isSet = true;
}

bool OAIHeatmapViewProperties::is_x_tick_step_Set() const{
    return m_x_tick_step_isSet;
}

bool OAIHeatmapViewProperties::is_x_tick_step_Valid() const{
    return m_x_tick_step_isValid;
}

qint32 OAIHeatmapViewProperties::getXTotalTicks() const {
    return m_x_total_ticks;
}
void OAIHeatmapViewProperties::setXTotalTicks(const qint32 &x_total_ticks) {
    m_x_total_ticks = x_total_ticks;
    m_x_total_ticks_isSet = true;
}

bool OAIHeatmapViewProperties::is_x_total_ticks_Set() const{
    return m_x_total_ticks_isSet;
}

bool OAIHeatmapViewProperties::is_x_total_ticks_Valid() const{
    return m_x_total_ticks_isValid;
}

QString OAIHeatmapViewProperties::getYAxisLabel() const {
    return m_y_axis_label;
}
void OAIHeatmapViewProperties::setYAxisLabel(const QString &y_axis_label) {
    m_y_axis_label = y_axis_label;
    m_y_axis_label_isSet = true;
}

bool OAIHeatmapViewProperties::is_y_axis_label_Set() const{
    return m_y_axis_label_isSet;
}

bool OAIHeatmapViewProperties::is_y_axis_label_Valid() const{
    return m_y_axis_label_isValid;
}

QString OAIHeatmapViewProperties::getYColumn() const {
    return m_y_column;
}
void OAIHeatmapViewProperties::setYColumn(const QString &y_column) {
    m_y_column = y_column;
    m_y_column_isSet = true;
}

bool OAIHeatmapViewProperties::is_y_column_Set() const{
    return m_y_column_isSet;
}

bool OAIHeatmapViewProperties::is_y_column_Valid() const{
    return m_y_column_isValid;
}

QList<double> OAIHeatmapViewProperties::getYDomain() const {
    return m_y_domain;
}
void OAIHeatmapViewProperties::setYDomain(const QList<double> &y_domain) {
    m_y_domain = y_domain;
    m_y_domain_isSet = true;
}

bool OAIHeatmapViewProperties::is_y_domain_Set() const{
    return m_y_domain_isSet;
}

bool OAIHeatmapViewProperties::is_y_domain_Valid() const{
    return m_y_domain_isValid;
}

QString OAIHeatmapViewProperties::getYPrefix() const {
    return m_y_prefix;
}
void OAIHeatmapViewProperties::setYPrefix(const QString &y_prefix) {
    m_y_prefix = y_prefix;
    m_y_prefix_isSet = true;
}

bool OAIHeatmapViewProperties::is_y_prefix_Set() const{
    return m_y_prefix_isSet;
}

bool OAIHeatmapViewProperties::is_y_prefix_Valid() const{
    return m_y_prefix_isValid;
}

QString OAIHeatmapViewProperties::getYSuffix() const {
    return m_y_suffix;
}
void OAIHeatmapViewProperties::setYSuffix(const QString &y_suffix) {
    m_y_suffix = y_suffix;
    m_y_suffix_isSet = true;
}

bool OAIHeatmapViewProperties::is_y_suffix_Set() const{
    return m_y_suffix_isSet;
}

bool OAIHeatmapViewProperties::is_y_suffix_Valid() const{
    return m_y_suffix_isValid;
}

float OAIHeatmapViewProperties::getYTickStart() const {
    return m_y_tick_start;
}
void OAIHeatmapViewProperties::setYTickStart(const float &y_tick_start) {
    m_y_tick_start = y_tick_start;
    m_y_tick_start_isSet = true;
}

bool OAIHeatmapViewProperties::is_y_tick_start_Set() const{
    return m_y_tick_start_isSet;
}

bool OAIHeatmapViewProperties::is_y_tick_start_Valid() const{
    return m_y_tick_start_isValid;
}

float OAIHeatmapViewProperties::getYTickStep() const {
    return m_y_tick_step;
}
void OAIHeatmapViewProperties::setYTickStep(const float &y_tick_step) {
    m_y_tick_step = y_tick_step;
    m_y_tick_step_isSet = true;
}

bool OAIHeatmapViewProperties::is_y_tick_step_Set() const{
    return m_y_tick_step_isSet;
}

bool OAIHeatmapViewProperties::is_y_tick_step_Valid() const{
    return m_y_tick_step_isValid;
}

qint32 OAIHeatmapViewProperties::getYTotalTicks() const {
    return m_y_total_ticks;
}
void OAIHeatmapViewProperties::setYTotalTicks(const qint32 &y_total_ticks) {
    m_y_total_ticks = y_total_ticks;
    m_y_total_ticks_isSet = true;
}

bool OAIHeatmapViewProperties::is_y_total_ticks_Set() const{
    return m_y_total_ticks_isSet;
}

bool OAIHeatmapViewProperties::is_y_total_ticks_Valid() const{
    return m_y_total_ticks_isValid;
}

bool OAIHeatmapViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bin_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_x_axis_ticks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_y_axis_ticks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_colorize_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_hide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_orientation_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_note_when_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_domain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_tick_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_tick_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_total_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_domain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_tick_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_tick_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_total_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeatmapViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bin_size_isValid && m_colors_isValid && m_note_isValid && m_queries_isValid && m_shape_isValid && m_show_note_when_empty_isValid && m_type_isValid && m_x_axis_label_isValid && m_x_column_isValid && m_x_domain_isValid && m_x_prefix_isValid && m_x_suffix_isValid && m_y_axis_label_isValid && m_y_column_isValid && m_y_domain_isValid && m_y_prefix_isValid && m_y_suffix_isValid && true;
}

} // namespace OpenAPI
