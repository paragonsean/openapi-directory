/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeletePredicateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeletePredicateRequest::OAIDeletePredicateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeletePredicateRequest::OAIDeletePredicateRequest() {
    this->initializeModel();
}

OAIDeletePredicateRequest::~OAIDeletePredicateRequest() {}

void OAIDeletePredicateRequest::initializeModel() {

    m_predicate_isSet = false;
    m_predicate_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_stop_isSet = false;
    m_stop_isValid = false;
}

void OAIDeletePredicateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeletePredicateRequest::fromJsonObject(QJsonObject json) {

    m_predicate_isValid = ::OpenAPI::fromJsonValue(m_predicate, json[QString("predicate")]);
    m_predicate_isSet = !json[QString("predicate")].isNull() && m_predicate_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_stop_isValid = ::OpenAPI::fromJsonValue(m_stop, json[QString("stop")]);
    m_stop_isSet = !json[QString("stop")].isNull() && m_stop_isValid;
}

QString OAIDeletePredicateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeletePredicateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_predicate_isSet) {
        obj.insert(QString("predicate"), ::OpenAPI::toJsonValue(m_predicate));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_stop_isSet) {
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(m_stop));
    }
    return obj;
}

QString OAIDeletePredicateRequest::getPredicate() const {
    return m_predicate;
}
void OAIDeletePredicateRequest::setPredicate(const QString &predicate) {
    m_predicate = predicate;
    m_predicate_isSet = true;
}

bool OAIDeletePredicateRequest::is_predicate_Set() const{
    return m_predicate_isSet;
}

bool OAIDeletePredicateRequest::is_predicate_Valid() const{
    return m_predicate_isValid;
}

QDateTime OAIDeletePredicateRequest::getStart() const {
    return m_start;
}
void OAIDeletePredicateRequest::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIDeletePredicateRequest::is_start_Set() const{
    return m_start_isSet;
}

bool OAIDeletePredicateRequest::is_start_Valid() const{
    return m_start_isValid;
}

QDateTime OAIDeletePredicateRequest::getStop() const {
    return m_stop;
}
void OAIDeletePredicateRequest::setStop(const QDateTime &stop) {
    m_stop = stop;
    m_stop_isSet = true;
}

bool OAIDeletePredicateRequest::is_stop_Set() const{
    return m_stop_isSet;
}

bool OAIDeletePredicateRequest::is_stop_Valid() const{
    return m_stop_isValid;
}

bool OAIDeletePredicateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_predicate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeletePredicateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_isValid && m_stop_isValid && true;
}

} // namespace OpenAPI
