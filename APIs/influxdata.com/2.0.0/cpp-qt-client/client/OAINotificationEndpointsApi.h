/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationEndpointsApi_H
#define OAI_OAINotificationEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAINotificationEndpoint.h"
#include "OAINotificationEndpointUpdate.h"
#include "OAINotificationEndpoints.h"
#include "OAIPostNotificationEndpoint.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAINotificationEndpointsApi(const int timeOut = 0);
    ~OAINotificationEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_post_notification_endpoint OAIPostNotificationEndpoint [required]
    */
    virtual void createNotificationEndpoint(const OAIPostNotificationEndpoint &oai_post_notification_endpoint);

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteNotificationEndpointsID(const QString &endpoint_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteNotificationEndpointsIDLabelsID(const QString &endpoint_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getNotificationEndpoints(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getNotificationEndpointsID(const QString &endpoint_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getNotificationEndpointsIDLabels(const QString &endpoint_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_notification_endpoint_update OAINotificationEndpointUpdate [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchNotificationEndpointsID(const QString &endpoint_id, const OAINotificationEndpointUpdate &oai_notification_endpoint_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postNotificationEndpointIDLabels(const QString &endpoint_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_notification_endpoint OAINotificationEndpoint [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putNotificationEndpointsID(const QString &endpoint_id, const OAINotificationEndpoint &oai_notification_endpoint, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNotificationEndpointCallback(OAIHttpRequestWorker *worker);
    void deleteNotificationEndpointsIDCallback(OAIHttpRequestWorker *worker);
    void deleteNotificationEndpointsIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void getNotificationEndpointsCallback(OAIHttpRequestWorker *worker);
    void getNotificationEndpointsIDCallback(OAIHttpRequestWorker *worker);
    void getNotificationEndpointsIDLabelsCallback(OAIHttpRequestWorker *worker);
    void patchNotificationEndpointsIDCallback(OAIHttpRequestWorker *worker);
    void postNotificationEndpointIDLabelsCallback(OAIHttpRequestWorker *worker);
    void putNotificationEndpointsIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNotificationEndpointSignal(OAINotificationEndpoint summary);
    void deleteNotificationEndpointsIDSignal();
    void deleteNotificationEndpointsIDLabelsIDSignal();
    void getNotificationEndpointsSignal(OAINotificationEndpoints summary);
    void getNotificationEndpointsIDSignal(OAINotificationEndpoint summary);
    void getNotificationEndpointsIDLabelsSignal(OAILabelsResponse summary);
    void patchNotificationEndpointsIDSignal(OAINotificationEndpoint summary);
    void postNotificationEndpointIDLabelsSignal(OAILabelResponse summary);
    void putNotificationEndpointsIDSignal(OAINotificationEndpoint summary);


    void createNotificationEndpointSignalFull(OAIHttpRequestWorker *worker, OAINotificationEndpoint summary);
    void deleteNotificationEndpointsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteNotificationEndpointsIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationEndpointsSignalFull(OAIHttpRequestWorker *worker, OAINotificationEndpoints summary);
    void getNotificationEndpointsIDSignalFull(OAIHttpRequestWorker *worker, OAINotificationEndpoint summary);
    void getNotificationEndpointsIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void patchNotificationEndpointsIDSignalFull(OAIHttpRequestWorker *worker, OAINotificationEndpoint summary);
    void postNotificationEndpointIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void putNotificationEndpointsIDSignalFull(OAIHttpRequestWorker *worker, OAINotificationEndpoint summary);

    Q_DECL_DEPRECATED_X("Use createNotificationEndpointSignalError() instead")
    void createNotificationEndpointSignalE(OAINotificationEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNotificationEndpointSignalError(OAINotificationEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationEndpointsIDSignalError() instead")
    void deleteNotificationEndpointsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationEndpointsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationEndpointsIDLabelsIDSignalError() instead")
    void deleteNotificationEndpointsIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationEndpointsIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationEndpointsSignalError() instead")
    void getNotificationEndpointsSignalE(OAINotificationEndpoints summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationEndpointsSignalError(OAINotificationEndpoints summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationEndpointsIDSignalError() instead")
    void getNotificationEndpointsIDSignalE(OAINotificationEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationEndpointsIDSignalError(OAINotificationEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationEndpointsIDLabelsSignalError() instead")
    void getNotificationEndpointsIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationEndpointsIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchNotificationEndpointsIDSignalError() instead")
    void patchNotificationEndpointsIDSignalE(OAINotificationEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchNotificationEndpointsIDSignalError(OAINotificationEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNotificationEndpointIDLabelsSignalError() instead")
    void postNotificationEndpointIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNotificationEndpointIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putNotificationEndpointsIDSignalError() instead")
    void putNotificationEndpointsIDSignalE(OAINotificationEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putNotificationEndpointsIDSignalError(OAINotificationEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNotificationEndpointSignalErrorFull() instead")
    void createNotificationEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNotificationEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationEndpointsIDSignalErrorFull() instead")
    void deleteNotificationEndpointsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationEndpointsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationEndpointsIDLabelsIDSignalErrorFull() instead")
    void deleteNotificationEndpointsIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationEndpointsIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationEndpointsSignalErrorFull() instead")
    void getNotificationEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationEndpointsIDSignalErrorFull() instead")
    void getNotificationEndpointsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationEndpointsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationEndpointsIDLabelsSignalErrorFull() instead")
    void getNotificationEndpointsIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationEndpointsIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchNotificationEndpointsIDSignalErrorFull() instead")
    void patchNotificationEndpointsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchNotificationEndpointsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNotificationEndpointIDLabelsSignalErrorFull() instead")
    void postNotificationEndpointIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNotificationEndpointIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putNotificationEndpointsIDSignalErrorFull() instead")
    void putNotificationEndpointsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putNotificationEndpointsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
