/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberExpression::OAIMemberExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberExpression::OAIMemberExpression() {
    this->initializeModel();
}

OAIMemberExpression::~OAIMemberExpression() {}

void OAIMemberExpression::initializeModel() {

    m_object_isSet = false;
    m_object_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMemberExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberExpression::fromJsonObject(QJsonObject json) {

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMemberExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_property.isSet()) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIExpression OAIMemberExpression::getObject() const {
    return m_object;
}
void OAIMemberExpression::setObject(const OAIExpression &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIMemberExpression::is_object_Set() const{
    return m_object_isSet;
}

bool OAIMemberExpression::is_object_Valid() const{
    return m_object_isValid;
}

OAIPropertyKey OAIMemberExpression::getProperty() const {
    return m_property;
}
void OAIMemberExpression::setProperty(const OAIPropertyKey &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIMemberExpression::is_property_Set() const{
    return m_property_isSet;
}

bool OAIMemberExpression::is_property_Valid() const{
    return m_property_isValid;
}

QString OAIMemberExpression::getType() const {
    return m_type;
}
void OAIMemberExpression::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMemberExpression::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMemberExpression::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMemberExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
