/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnboardingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnboardingRequest::OAIOnboardingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnboardingRequest::OAIOnboardingRequest() {
    this->initializeModel();
}

OAIOnboardingRequest::~OAIOnboardingRequest() {}

void OAIOnboardingRequest::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_retention_period_hrs_isSet = false;
    m_retention_period_hrs_isValid = false;

    m_retention_period_seconds_isSet = false;
    m_retention_period_seconds_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIOnboardingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnboardingRequest::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_retention_period_hrs_isValid = ::OpenAPI::fromJsonValue(m_retention_period_hrs, json[QString("retentionPeriodHrs")]);
    m_retention_period_hrs_isSet = !json[QString("retentionPeriodHrs")].isNull() && m_retention_period_hrs_isValid;

    m_retention_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_retention_period_seconds, json[QString("retentionPeriodSeconds")]);
    m_retention_period_seconds_isSet = !json[QString("retentionPeriodSeconds")].isNull() && m_retention_period_seconds_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIOnboardingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnboardingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_retention_period_hrs_isSet) {
        obj.insert(QString("retentionPeriodHrs"), ::OpenAPI::toJsonValue(m_retention_period_hrs));
    }
    if (m_retention_period_seconds_isSet) {
        obj.insert(QString("retentionPeriodSeconds"), ::OpenAPI::toJsonValue(m_retention_period_seconds));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIOnboardingRequest::getBucket() const {
    return m_bucket;
}
void OAIOnboardingRequest::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIOnboardingRequest::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIOnboardingRequest::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIOnboardingRequest::getOrg() const {
    return m_org;
}
void OAIOnboardingRequest::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIOnboardingRequest::is_org_Set() const{
    return m_org_isSet;
}

bool OAIOnboardingRequest::is_org_Valid() const{
    return m_org_isValid;
}

QString OAIOnboardingRequest::getPassword() const {
    return m_password;
}
void OAIOnboardingRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIOnboardingRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIOnboardingRequest::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIOnboardingRequest::getRetentionPeriodHrs() const {
    return m_retention_period_hrs;
}
void OAIOnboardingRequest::setRetentionPeriodHrs(const qint32 &retention_period_hrs) {
    m_retention_period_hrs = retention_period_hrs;
    m_retention_period_hrs_isSet = true;
}

bool OAIOnboardingRequest::is_retention_period_hrs_Set() const{
    return m_retention_period_hrs_isSet;
}

bool OAIOnboardingRequest::is_retention_period_hrs_Valid() const{
    return m_retention_period_hrs_isValid;
}

qint64 OAIOnboardingRequest::getRetentionPeriodSeconds() const {
    return m_retention_period_seconds;
}
void OAIOnboardingRequest::setRetentionPeriodSeconds(const qint64 &retention_period_seconds) {
    m_retention_period_seconds = retention_period_seconds;
    m_retention_period_seconds_isSet = true;
}

bool OAIOnboardingRequest::is_retention_period_seconds_Set() const{
    return m_retention_period_seconds_isSet;
}

bool OAIOnboardingRequest::is_retention_period_seconds_Valid() const{
    return m_retention_period_seconds_isValid;
}

QString OAIOnboardingRequest::getToken() const {
    return m_token;
}
void OAIOnboardingRequest::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIOnboardingRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAIOnboardingRequest::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIOnboardingRequest::getUsername() const {
    return m_username;
}
void OAIOnboardingRequest::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIOnboardingRequest::is_username_Set() const{
    return m_username_isSet;
}

bool OAIOnboardingRequest::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIOnboardingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period_hrs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnboardingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_org_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
