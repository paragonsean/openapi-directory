/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummary_summary_notificationRules_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummary_summary_notificationRules_inner::OAITemplateSummary_summary_notificationRules_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummary_summary_notificationRules_inner::OAITemplateSummary_summary_notificationRules_inner() {
    this->initializeModel();
}

OAITemplateSummary_summary_notificationRules_inner::~OAITemplateSummary_summary_notificationRules_inner() {}

void OAITemplateSummary_summary_notificationRules_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_id_isSet = false;
    m_endpoint_id_isValid = false;

    m_endpoint_template_meta_name_isSet = false;
    m_endpoint_template_meta_name_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_env_references_isSet = false;
    m_env_references_isValid = false;

    m_every_isSet = false;
    m_every_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_label_associations_isSet = false;
    m_label_associations_isValid = false;

    m_message_template_isSet = false;
    m_message_template_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_rules_isSet = false;
    m_status_rules_isValid = false;

    m_tag_rules_isSet = false;
    m_tag_rules_isValid = false;

    m_template_meta_name_isSet = false;
    m_template_meta_name_isValid = false;
}

void OAITemplateSummary_summary_notificationRules_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummary_summary_notificationRules_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_endpoint_id, json[QString("endpointID")]);
    m_endpoint_id_isSet = !json[QString("endpointID")].isNull() && m_endpoint_id_isValid;

    m_endpoint_template_meta_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_template_meta_name, json[QString("endpointTemplateMetaName")]);
    m_endpoint_template_meta_name_isSet = !json[QString("endpointTemplateMetaName")].isNull() && m_endpoint_template_meta_name_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("endpointType")]);
    m_endpoint_type_isSet = !json[QString("endpointType")].isNull() && m_endpoint_type_isValid;

    m_env_references_isValid = ::OpenAPI::fromJsonValue(m_env_references, json[QString("envReferences")]);
    m_env_references_isSet = !json[QString("envReferences")].isNull() && m_env_references_isValid;

    m_every_isValid = ::OpenAPI::fromJsonValue(m_every, json[QString("every")]);
    m_every_isSet = !json[QString("every")].isNull() && m_every_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_label_associations_isValid = ::OpenAPI::fromJsonValue(m_label_associations, json[QString("labelAssociations")]);
    m_label_associations_isSet = !json[QString("labelAssociations")].isNull() && m_label_associations_isValid;

    m_message_template_isValid = ::OpenAPI::fromJsonValue(m_message_template, json[QString("messageTemplate")]);
    m_message_template_isSet = !json[QString("messageTemplate")].isNull() && m_message_template_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_rules_isValid = ::OpenAPI::fromJsonValue(m_status_rules, json[QString("statusRules")]);
    m_status_rules_isSet = !json[QString("statusRules")].isNull() && m_status_rules_isValid;

    m_tag_rules_isValid = ::OpenAPI::fromJsonValue(m_tag_rules, json[QString("tagRules")]);
    m_tag_rules_isSet = !json[QString("tagRules")].isNull() && m_tag_rules_isValid;

    m_template_meta_name_isValid = ::OpenAPI::fromJsonValue(m_template_meta_name, json[QString("templateMetaName")]);
    m_template_meta_name_isSet = !json[QString("templateMetaName")].isNull() && m_template_meta_name_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummary_summary_notificationRules_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_id_isSet) {
        obj.insert(QString("endpointID"), ::OpenAPI::toJsonValue(m_endpoint_id));
    }
    if (m_endpoint_template_meta_name_isSet) {
        obj.insert(QString("endpointTemplateMetaName"), ::OpenAPI::toJsonValue(m_endpoint_template_meta_name));
    }
    if (m_endpoint_type_isSet) {
        obj.insert(QString("endpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_env_references.size() > 0) {
        obj.insert(QString("envReferences"), ::OpenAPI::toJsonValue(m_env_references));
    }
    if (m_every_isSet) {
        obj.insert(QString("every"), ::OpenAPI::toJsonValue(m_every));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_label_associations.size() > 0) {
        obj.insert(QString("labelAssociations"), ::OpenAPI::toJsonValue(m_label_associations));
    }
    if (m_message_template_isSet) {
        obj.insert(QString("messageTemplate"), ::OpenAPI::toJsonValue(m_message_template));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_rules.size() > 0) {
        obj.insert(QString("statusRules"), ::OpenAPI::toJsonValue(m_status_rules));
    }
    if (m_tag_rules.size() > 0) {
        obj.insert(QString("tagRules"), ::OpenAPI::toJsonValue(m_tag_rules));
    }
    if (m_template_meta_name_isSet) {
        obj.insert(QString("templateMetaName"), ::OpenAPI::toJsonValue(m_template_meta_name));
    }
    return obj;
}

QString OAITemplateSummary_summary_notificationRules_inner::getDescription() const {
    return m_description;
}
void OAITemplateSummary_summary_notificationRules_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getEndpointId() const {
    return m_endpoint_id;
}
void OAITemplateSummary_summary_notificationRules_inner::setEndpointId(const QString &endpoint_id) {
    m_endpoint_id = endpoint_id;
    m_endpoint_id_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_endpoint_id_Set() const{
    return m_endpoint_id_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_endpoint_id_Valid() const{
    return m_endpoint_id_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getEndpointTemplateMetaName() const {
    return m_endpoint_template_meta_name;
}
void OAITemplateSummary_summary_notificationRules_inner::setEndpointTemplateMetaName(const QString &endpoint_template_meta_name) {
    m_endpoint_template_meta_name = endpoint_template_meta_name;
    m_endpoint_template_meta_name_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_endpoint_template_meta_name_Set() const{
    return m_endpoint_template_meta_name_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_endpoint_template_meta_name_Valid() const{
    return m_endpoint_template_meta_name_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getEndpointType() const {
    return m_endpoint_type;
}
void OAITemplateSummary_summary_notificationRules_inner::setEndpointType(const QString &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QList<OAITemplateEnvReferences_inner> OAITemplateSummary_summary_notificationRules_inner::getEnvReferences() const {
    return m_env_references;
}
void OAITemplateSummary_summary_notificationRules_inner::setEnvReferences(const QList<OAITemplateEnvReferences_inner> &env_references) {
    m_env_references = env_references;
    m_env_references_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_env_references_Set() const{
    return m_env_references_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_env_references_Valid() const{
    return m_env_references_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getEvery() const {
    return m_every;
}
void OAITemplateSummary_summary_notificationRules_inner::setEvery(const QString &every) {
    m_every = every;
    m_every_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_every_Set() const{
    return m_every_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_every_Valid() const{
    return m_every_isValid;
}

OAITemplateKind OAITemplateSummary_summary_notificationRules_inner::getKind() const {
    return m_kind;
}
void OAITemplateSummary_summary_notificationRules_inner::setKind(const OAITemplateKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAITemplateSummaryLabel> OAITemplateSummary_summary_notificationRules_inner::getLabelAssociations() const {
    return m_label_associations;
}
void OAITemplateSummary_summary_notificationRules_inner::setLabelAssociations(const QList<OAITemplateSummaryLabel> &label_associations) {
    m_label_associations = label_associations;
    m_label_associations_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_label_associations_Set() const{
    return m_label_associations_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_label_associations_Valid() const{
    return m_label_associations_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getMessageTemplate() const {
    return m_message_template;
}
void OAITemplateSummary_summary_notificationRules_inner::setMessageTemplate(const QString &message_template) {
    m_message_template = message_template;
    m_message_template_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_message_template_Set() const{
    return m_message_template_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_message_template_Valid() const{
    return m_message_template_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getName() const {
    return m_name;
}
void OAITemplateSummary_summary_notificationRules_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getOffset() const {
    return m_offset;
}
void OAITemplateSummary_summary_notificationRules_inner::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getStatus() const {
    return m_status;
}
void OAITemplateSummary_summary_notificationRules_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner> OAITemplateSummary_summary_notificationRules_inner::getStatusRules() const {
    return m_status_rules;
}
void OAITemplateSummary_summary_notificationRules_inner::setStatusRules(const QList<OAITemplateSummary_diff_notificationRules_inner_new_statusRules_inner> &status_rules) {
    m_status_rules = status_rules;
    m_status_rules_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_status_rules_Set() const{
    return m_status_rules_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_status_rules_Valid() const{
    return m_status_rules_isValid;
}

QList<OAITemplateSummary_diff_notificationRules_inner_new_tagRules_inner> OAITemplateSummary_summary_notificationRules_inner::getTagRules() const {
    return m_tag_rules;
}
void OAITemplateSummary_summary_notificationRules_inner::setTagRules(const QList<OAITemplateSummary_diff_notificationRules_inner_new_tagRules_inner> &tag_rules) {
    m_tag_rules = tag_rules;
    m_tag_rules_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_tag_rules_Set() const{
    return m_tag_rules_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_tag_rules_Valid() const{
    return m_tag_rules_isValid;
}

QString OAITemplateSummary_summary_notificationRules_inner::getTemplateMetaName() const {
    return m_template_meta_name;
}
void OAITemplateSummary_summary_notificationRules_inner::setTemplateMetaName(const QString &template_meta_name) {
    m_template_meta_name = template_meta_name;
    m_template_meta_name_isSet = true;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_template_meta_name_Set() const{
    return m_template_meta_name_isSet;
}

bool OAITemplateSummary_summary_notificationRules_inner::is_template_meta_name_Valid() const{
    return m_template_meta_name_isValid;
}

bool OAITemplateSummary_summary_notificationRules_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_template_meta_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_every_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_meta_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummary_summary_notificationRules_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
