/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoPointMapViewLayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoPointMapViewLayer::OAIGeoPointMapViewLayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoPointMapViewLayer::OAIGeoPointMapViewLayer() {
    this->initializeModel();
}

OAIGeoPointMapViewLayer::~OAIGeoPointMapViewLayer() {}

void OAIGeoPointMapViewLayer::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_color_dimension_isSet = false;
    m_color_dimension_isValid = false;

    m_color_field_isSet = false;
    m_color_field_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_is_clustered_isSet = false;
    m_is_clustered_isValid = false;
}

void OAIGeoPointMapViewLayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoPointMapViewLayer::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_color_dimension_isValid = ::OpenAPI::fromJsonValue(m_color_dimension, json[QString("colorDimension")]);
    m_color_dimension_isSet = !json[QString("colorDimension")].isNull() && m_color_dimension_isValid;

    m_color_field_isValid = ::OpenAPI::fromJsonValue(m_color_field, json[QString("colorField")]);
    m_color_field_isSet = !json[QString("colorField")].isNull() && m_color_field_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_is_clustered_isValid = ::OpenAPI::fromJsonValue(m_is_clustered, json[QString("isClustered")]);
    m_is_clustered_isSet = !json[QString("isClustered")].isNull() && m_is_clustered_isValid;
}

QString OAIGeoPointMapViewLayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoPointMapViewLayer::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_color_dimension.isSet()) {
        obj.insert(QString("colorDimension"), ::OpenAPI::toJsonValue(m_color_dimension));
    }
    if (m_color_field_isSet) {
        obj.insert(QString("colorField"), ::OpenAPI::toJsonValue(m_color_field));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_is_clustered_isSet) {
        obj.insert(QString("isClustered"), ::OpenAPI::toJsonValue(m_is_clustered));
    }
    return obj;
}

QString OAIGeoPointMapViewLayer::getType() const {
    return m_type;
}
void OAIGeoPointMapViewLayer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGeoPointMapViewLayer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGeoPointMapViewLayer::is_type_Valid() const{
    return m_type_isValid;
}

OAIAxis OAIGeoPointMapViewLayer::getColorDimension() const {
    return m_color_dimension;
}
void OAIGeoPointMapViewLayer::setColorDimension(const OAIAxis &color_dimension) {
    m_color_dimension = color_dimension;
    m_color_dimension_isSet = true;
}

bool OAIGeoPointMapViewLayer::is_color_dimension_Set() const{
    return m_color_dimension_isSet;
}

bool OAIGeoPointMapViewLayer::is_color_dimension_Valid() const{
    return m_color_dimension_isValid;
}

QString OAIGeoPointMapViewLayer::getColorField() const {
    return m_color_field;
}
void OAIGeoPointMapViewLayer::setColorField(const QString &color_field) {
    m_color_field = color_field;
    m_color_field_isSet = true;
}

bool OAIGeoPointMapViewLayer::is_color_field_Set() const{
    return m_color_field_isSet;
}

bool OAIGeoPointMapViewLayer::is_color_field_Valid() const{
    return m_color_field_isValid;
}

QList<OAIDashboardColor> OAIGeoPointMapViewLayer::getColors() const {
    return m_colors;
}
void OAIGeoPointMapViewLayer::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIGeoPointMapViewLayer::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIGeoPointMapViewLayer::is_colors_Valid() const{
    return m_colors_isValid;
}

bool OAIGeoPointMapViewLayer::isIsClustered() const {
    return m_is_clustered;
}
void OAIGeoPointMapViewLayer::setIsClustered(const bool &is_clustered) {
    m_is_clustered = is_clustered;
    m_is_clustered_isSet = true;
}

bool OAIGeoPointMapViewLayer::is_is_clustered_Set() const{
    return m_is_clustered_isSet;
}

bool OAIGeoPointMapViewLayer::is_is_clustered_Valid() const{
    return m_is_clustered_isValid;
}

bool OAIGeoPointMapViewLayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_clustered_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoPointMapViewLayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_color_dimension_isValid && m_color_field_isValid && m_colors_isValid && true;
}

} // namespace OpenAPI
