/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramViewProperties::OAIHistogramViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramViewProperties::OAIHistogramViewProperties() {
    this->initializeModel();
}

OAIHistogramViewProperties::~OAIHistogramViewProperties() {}

void OAIHistogramViewProperties::initializeModel() {

    m_bin_count_isSet = false;
    m_bin_count_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_fill_columns_isSet = false;
    m_fill_columns_isValid = false;

    m_legend_colorize_rows_isSet = false;
    m_legend_colorize_rows_isValid = false;

    m_legend_hide_isSet = false;
    m_legend_hide_isValid = false;

    m_legend_opacity_isSet = false;
    m_legend_opacity_isValid = false;

    m_legend_orientation_threshold_isSet = false;
    m_legend_orientation_threshold_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_show_note_when_empty_isSet = false;
    m_show_note_when_empty_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_x_axis_label_isSet = false;
    m_x_axis_label_isValid = false;

    m_x_column_isSet = false;
    m_x_column_isValid = false;

    m_x_domain_isSet = false;
    m_x_domain_isValid = false;
}

void OAIHistogramViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramViewProperties::fromJsonObject(QJsonObject json) {

    m_bin_count_isValid = ::OpenAPI::fromJsonValue(m_bin_count, json[QString("binCount")]);
    m_bin_count_isSet = !json[QString("binCount")].isNull() && m_bin_count_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_fill_columns_isValid = ::OpenAPI::fromJsonValue(m_fill_columns, json[QString("fillColumns")]);
    m_fill_columns_isSet = !json[QString("fillColumns")].isNull() && m_fill_columns_isValid;

    m_legend_colorize_rows_isValid = ::OpenAPI::fromJsonValue(m_legend_colorize_rows, json[QString("legendColorizeRows")]);
    m_legend_colorize_rows_isSet = !json[QString("legendColorizeRows")].isNull() && m_legend_colorize_rows_isValid;

    m_legend_hide_isValid = ::OpenAPI::fromJsonValue(m_legend_hide, json[QString("legendHide")]);
    m_legend_hide_isSet = !json[QString("legendHide")].isNull() && m_legend_hide_isValid;

    m_legend_opacity_isValid = ::OpenAPI::fromJsonValue(m_legend_opacity, json[QString("legendOpacity")]);
    m_legend_opacity_isSet = !json[QString("legendOpacity")].isNull() && m_legend_opacity_isValid;

    m_legend_orientation_threshold_isValid = ::OpenAPI::fromJsonValue(m_legend_orientation_threshold, json[QString("legendOrientationThreshold")]);
    m_legend_orientation_threshold_isSet = !json[QString("legendOrientationThreshold")].isNull() && m_legend_orientation_threshold_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_show_note_when_empty_isValid = ::OpenAPI::fromJsonValue(m_show_note_when_empty, json[QString("showNoteWhenEmpty")]);
    m_show_note_when_empty_isSet = !json[QString("showNoteWhenEmpty")].isNull() && m_show_note_when_empty_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_x_axis_label_isValid = ::OpenAPI::fromJsonValue(m_x_axis_label, json[QString("xAxisLabel")]);
    m_x_axis_label_isSet = !json[QString("xAxisLabel")].isNull() && m_x_axis_label_isValid;

    m_x_column_isValid = ::OpenAPI::fromJsonValue(m_x_column, json[QString("xColumn")]);
    m_x_column_isSet = !json[QString("xColumn")].isNull() && m_x_column_isValid;

    m_x_domain_isValid = ::OpenAPI::fromJsonValue(m_x_domain, json[QString("xDomain")]);
    m_x_domain_isSet = !json[QString("xDomain")].isNull() && m_x_domain_isValid;
}

QString OAIHistogramViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bin_count_isSet) {
        obj.insert(QString("binCount"), ::OpenAPI::toJsonValue(m_bin_count));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_fill_columns.size() > 0) {
        obj.insert(QString("fillColumns"), ::OpenAPI::toJsonValue(m_fill_columns));
    }
    if (m_legend_colorize_rows_isSet) {
        obj.insert(QString("legendColorizeRows"), ::OpenAPI::toJsonValue(m_legend_colorize_rows));
    }
    if (m_legend_hide_isSet) {
        obj.insert(QString("legendHide"), ::OpenAPI::toJsonValue(m_legend_hide));
    }
    if (m_legend_opacity_isSet) {
        obj.insert(QString("legendOpacity"), ::OpenAPI::toJsonValue(m_legend_opacity));
    }
    if (m_legend_orientation_threshold_isSet) {
        obj.insert(QString("legendOrientationThreshold"), ::OpenAPI::toJsonValue(m_legend_orientation_threshold));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_show_note_when_empty_isSet) {
        obj.insert(QString("showNoteWhenEmpty"), ::OpenAPI::toJsonValue(m_show_note_when_empty));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_x_axis_label_isSet) {
        obj.insert(QString("xAxisLabel"), ::OpenAPI::toJsonValue(m_x_axis_label));
    }
    if (m_x_column_isSet) {
        obj.insert(QString("xColumn"), ::OpenAPI::toJsonValue(m_x_column));
    }
    if (m_x_domain.size() > 0) {
        obj.insert(QString("xDomain"), ::OpenAPI::toJsonValue(m_x_domain));
    }
    return obj;
}

qint32 OAIHistogramViewProperties::getBinCount() const {
    return m_bin_count;
}
void OAIHistogramViewProperties::setBinCount(const qint32 &bin_count) {
    m_bin_count = bin_count;
    m_bin_count_isSet = true;
}

bool OAIHistogramViewProperties::is_bin_count_Set() const{
    return m_bin_count_isSet;
}

bool OAIHistogramViewProperties::is_bin_count_Valid() const{
    return m_bin_count_isValid;
}

QList<OAIDashboardColor> OAIHistogramViewProperties::getColors() const {
    return m_colors;
}
void OAIHistogramViewProperties::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIHistogramViewProperties::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIHistogramViewProperties::is_colors_Valid() const{
    return m_colors_isValid;
}

QList<QString> OAIHistogramViewProperties::getFillColumns() const {
    return m_fill_columns;
}
void OAIHistogramViewProperties::setFillColumns(const QList<QString> &fill_columns) {
    m_fill_columns = fill_columns;
    m_fill_columns_isSet = true;
}

bool OAIHistogramViewProperties::is_fill_columns_Set() const{
    return m_fill_columns_isSet;
}

bool OAIHistogramViewProperties::is_fill_columns_Valid() const{
    return m_fill_columns_isValid;
}

bool OAIHistogramViewProperties::isLegendColorizeRows() const {
    return m_legend_colorize_rows;
}
void OAIHistogramViewProperties::setLegendColorizeRows(const bool &legend_colorize_rows) {
    m_legend_colorize_rows = legend_colorize_rows;
    m_legend_colorize_rows_isSet = true;
}

bool OAIHistogramViewProperties::is_legend_colorize_rows_Set() const{
    return m_legend_colorize_rows_isSet;
}

bool OAIHistogramViewProperties::is_legend_colorize_rows_Valid() const{
    return m_legend_colorize_rows_isValid;
}

bool OAIHistogramViewProperties::isLegendHide() const {
    return m_legend_hide;
}
void OAIHistogramViewProperties::setLegendHide(const bool &legend_hide) {
    m_legend_hide = legend_hide;
    m_legend_hide_isSet = true;
}

bool OAIHistogramViewProperties::is_legend_hide_Set() const{
    return m_legend_hide_isSet;
}

bool OAIHistogramViewProperties::is_legend_hide_Valid() const{
    return m_legend_hide_isValid;
}

float OAIHistogramViewProperties::getLegendOpacity() const {
    return m_legend_opacity;
}
void OAIHistogramViewProperties::setLegendOpacity(const float &legend_opacity) {
    m_legend_opacity = legend_opacity;
    m_legend_opacity_isSet = true;
}

bool OAIHistogramViewProperties::is_legend_opacity_Set() const{
    return m_legend_opacity_isSet;
}

bool OAIHistogramViewProperties::is_legend_opacity_Valid() const{
    return m_legend_opacity_isValid;
}

qint32 OAIHistogramViewProperties::getLegendOrientationThreshold() const {
    return m_legend_orientation_threshold;
}
void OAIHistogramViewProperties::setLegendOrientationThreshold(const qint32 &legend_orientation_threshold) {
    m_legend_orientation_threshold = legend_orientation_threshold;
    m_legend_orientation_threshold_isSet = true;
}

bool OAIHistogramViewProperties::is_legend_orientation_threshold_Set() const{
    return m_legend_orientation_threshold_isSet;
}

bool OAIHistogramViewProperties::is_legend_orientation_threshold_Valid() const{
    return m_legend_orientation_threshold_isValid;
}

QString OAIHistogramViewProperties::getNote() const {
    return m_note;
}
void OAIHistogramViewProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIHistogramViewProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIHistogramViewProperties::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIHistogramViewProperties::getPosition() const {
    return m_position;
}
void OAIHistogramViewProperties::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIHistogramViewProperties::is_position_Set() const{
    return m_position_isSet;
}

bool OAIHistogramViewProperties::is_position_Valid() const{
    return m_position_isValid;
}

QList<OAIDashboardQuery> OAIHistogramViewProperties::getQueries() const {
    return m_queries;
}
void OAIHistogramViewProperties::setQueries(const QList<OAIDashboardQuery> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIHistogramViewProperties::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIHistogramViewProperties::is_queries_Valid() const{
    return m_queries_isValid;
}

QString OAIHistogramViewProperties::getShape() const {
    return m_shape;
}
void OAIHistogramViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIHistogramViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIHistogramViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

bool OAIHistogramViewProperties::isShowNoteWhenEmpty() const {
    return m_show_note_when_empty;
}
void OAIHistogramViewProperties::setShowNoteWhenEmpty(const bool &show_note_when_empty) {
    m_show_note_when_empty = show_note_when_empty;
    m_show_note_when_empty_isSet = true;
}

bool OAIHistogramViewProperties::is_show_note_when_empty_Set() const{
    return m_show_note_when_empty_isSet;
}

bool OAIHistogramViewProperties::is_show_note_when_empty_Valid() const{
    return m_show_note_when_empty_isValid;
}

QString OAIHistogramViewProperties::getType() const {
    return m_type;
}
void OAIHistogramViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHistogramViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHistogramViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIHistogramViewProperties::getXAxisLabel() const {
    return m_x_axis_label;
}
void OAIHistogramViewProperties::setXAxisLabel(const QString &x_axis_label) {
    m_x_axis_label = x_axis_label;
    m_x_axis_label_isSet = true;
}

bool OAIHistogramViewProperties::is_x_axis_label_Set() const{
    return m_x_axis_label_isSet;
}

bool OAIHistogramViewProperties::is_x_axis_label_Valid() const{
    return m_x_axis_label_isValid;
}

QString OAIHistogramViewProperties::getXColumn() const {
    return m_x_column;
}
void OAIHistogramViewProperties::setXColumn(const QString &x_column) {
    m_x_column = x_column;
    m_x_column_isSet = true;
}

bool OAIHistogramViewProperties::is_x_column_Set() const{
    return m_x_column_isSet;
}

bool OAIHistogramViewProperties::is_x_column_Valid() const{
    return m_x_column_isValid;
}

QList<float> OAIHistogramViewProperties::getXDomain() const {
    return m_x_domain;
}
void OAIHistogramViewProperties::setXDomain(const QList<float> &x_domain) {
    m_x_domain = x_domain;
    m_x_domain_isSet = true;
}

bool OAIHistogramViewProperties::is_x_domain_Set() const{
    return m_x_domain_isSet;
}

bool OAIHistogramViewProperties::is_x_domain_Valid() const{
    return m_x_domain_isValid;
}

bool OAIHistogramViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bin_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_colorize_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_hide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_orientation_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_note_when_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_domain.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bin_count_isValid && m_colors_isValid && m_fill_columns_isValid && m_note_isValid && m_position_isValid && m_queries_isValid && m_shape_isValid && m_show_note_when_empty_isValid && m_type_isValid && m_x_axis_label_isValid && m_x_column_isValid && m_x_domain_isValid && true;
}

} // namespace OpenAPI
