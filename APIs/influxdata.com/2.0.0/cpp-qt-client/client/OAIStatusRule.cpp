/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusRule::OAIStatusRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusRule::OAIStatusRule() {
    this->initializeModel();
}

OAIStatusRule::~OAIStatusRule() {}

void OAIStatusRule::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_current_level_isSet = false;
    m_current_level_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_previous_level_isSet = false;
    m_previous_level_isValid = false;
}

void OAIStatusRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusRule::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_current_level_isValid = ::OpenAPI::fromJsonValue(m_current_level, json[QString("currentLevel")]);
    m_current_level_isSet = !json[QString("currentLevel")].isNull() && m_current_level_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_previous_level_isValid = ::OpenAPI::fromJsonValue(m_previous_level, json[QString("previousLevel")]);
    m_previous_level_isSet = !json[QString("previousLevel")].isNull() && m_previous_level_isValid;
}

QString OAIStatusRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusRule::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_current_level.isSet()) {
        obj.insert(QString("currentLevel"), ::OpenAPI::toJsonValue(m_current_level));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_previous_level.isSet()) {
        obj.insert(QString("previousLevel"), ::OpenAPI::toJsonValue(m_previous_level));
    }
    return obj;
}

qint32 OAIStatusRule::getCount() const {
    return m_count;
}
void OAIStatusRule::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIStatusRule::is_count_Set() const{
    return m_count_isSet;
}

bool OAIStatusRule::is_count_Valid() const{
    return m_count_isValid;
}

OAIRuleStatusLevel OAIStatusRule::getCurrentLevel() const {
    return m_current_level;
}
void OAIStatusRule::setCurrentLevel(const OAIRuleStatusLevel &current_level) {
    m_current_level = current_level;
    m_current_level_isSet = true;
}

bool OAIStatusRule::is_current_level_Set() const{
    return m_current_level_isSet;
}

bool OAIStatusRule::is_current_level_Valid() const{
    return m_current_level_isValid;
}

QString OAIStatusRule::getPeriod() const {
    return m_period;
}
void OAIStatusRule::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIStatusRule::is_period_Set() const{
    return m_period_isSet;
}

bool OAIStatusRule::is_period_Valid() const{
    return m_period_isValid;
}

OAIRuleStatusLevel OAIStatusRule::getPreviousLevel() const {
    return m_previous_level;
}
void OAIStatusRule::setPreviousLevel(const OAIRuleStatusLevel &previous_level) {
    m_previous_level = previous_level;
    m_previous_level_isSet = true;
}

bool OAIStatusRule::is_previous_level_Set() const{
    return m_previous_level_isSet;
}

bool OAIStatusRule::is_previous_level_Valid() const{
    return m_previous_level_isValid;
}

bool OAIStatusRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_level.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
