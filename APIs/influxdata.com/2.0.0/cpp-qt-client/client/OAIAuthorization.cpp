/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorization::OAIAuthorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorization::OAIAuthorization() {
    this->initializeModel();
}

OAIAuthorization::~OAIAuthorization() {}

void OAIAuthorization::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAuthorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorization::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userID")]);
    m_user_id_isSet = !json[QString("userID")].isNull() && m_user_id_isValid;
}

QString OAIAuthorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorization::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAuthorization::getDescription() const {
    return m_description;
}
void OAIAuthorization::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuthorization::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuthorization::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAuthorization::getStatus() const {
    return m_status;
}
void OAIAuthorization::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAuthorization::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAuthorization::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIAuthorization::getCreatedAt() const {
    return m_created_at;
}
void OAIAuthorization::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAuthorization::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAuthorization::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAuthorization::getId() const {
    return m_id;
}
void OAIAuthorization::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthorization::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthorization::is_id_Valid() const{
    return m_id_isValid;
}

OAIAuthorization_allOf_links OAIAuthorization::getLinks() const {
    return m_links;
}
void OAIAuthorization::setLinks(const OAIAuthorization_allOf_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAuthorization::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAuthorization::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIAuthorization::getOrg() const {
    return m_org;
}
void OAIAuthorization::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIAuthorization::is_org_Set() const{
    return m_org_isSet;
}

bool OAIAuthorization::is_org_Valid() const{
    return m_org_isValid;
}

QString OAIAuthorization::getOrgId() const {
    return m_org_id;
}
void OAIAuthorization::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIAuthorization::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIAuthorization::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QList<OAIPermission> OAIAuthorization::getPermissions() const {
    return m_permissions;
}
void OAIAuthorization::setPermissions(const QList<OAIPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAuthorization::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAuthorization::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIAuthorization::getToken() const {
    return m_token;
}
void OAIAuthorization::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAuthorization::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAuthorization::is_token_Valid() const{
    return m_token_isValid;
}

QDateTime OAIAuthorization::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAuthorization::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAuthorization::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAuthorization::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIAuthorization::getUser() const {
    return m_user;
}
void OAIAuthorization::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAuthorization::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAuthorization::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIAuthorization::getUserId() const {
    return m_user_id;
}
void OAIAuthorization::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuthorization::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuthorization::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAuthorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_org_id_isValid && m_permissions_isValid && true;
}

} // namespace OpenAPI
