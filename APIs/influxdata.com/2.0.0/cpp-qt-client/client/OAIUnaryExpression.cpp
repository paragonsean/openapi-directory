/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnaryExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnaryExpression::OAIUnaryExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnaryExpression::OAIUnaryExpression() {
    this->initializeModel();
}

OAIUnaryExpression::~OAIUnaryExpression() {}

void OAIUnaryExpression::initializeModel() {

    m_argument_isSet = false;
    m_argument_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUnaryExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnaryExpression::fromJsonObject(QJsonObject json) {

    m_argument_isValid = ::OpenAPI::fromJsonValue(m_argument, json[QString("argument")]);
    m_argument_isSet = !json[QString("argument")].isNull() && m_argument_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUnaryExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnaryExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_argument.isSet()) {
        obj.insert(QString("argument"), ::OpenAPI::toJsonValue(m_argument));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIExpression OAIUnaryExpression::getArgument() const {
    return m_argument;
}
void OAIUnaryExpression::setArgument(const OAIExpression &argument) {
    m_argument = argument;
    m_argument_isSet = true;
}

bool OAIUnaryExpression::is_argument_Set() const{
    return m_argument_isSet;
}

bool OAIUnaryExpression::is_argument_Valid() const{
    return m_argument_isValid;
}

QString OAIUnaryExpression::getROperator() const {
    return m_r_operator;
}
void OAIUnaryExpression::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIUnaryExpression::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIUnaryExpression::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIUnaryExpression::getType() const {
    return m_type;
}
void OAIUnaryExpression::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUnaryExpression::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUnaryExpression::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUnaryExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_argument.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnaryExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
