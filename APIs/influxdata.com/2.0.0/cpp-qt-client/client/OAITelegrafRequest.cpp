/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelegrafRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITelegrafRequest::OAITelegrafRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITelegrafRequest::OAITelegrafRequest() {
    this->initializeModel();
}

OAITelegrafRequest::~OAITelegrafRequest() {}

void OAITelegrafRequest::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;
}

void OAITelegrafRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITelegrafRequest::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;
}

QString OAITelegrafRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITelegrafRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    return obj;
}

QString OAITelegrafRequest::getConfig() const {
    return m_config;
}
void OAITelegrafRequest::setConfig(const QString &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAITelegrafRequest::is_config_Set() const{
    return m_config_isSet;
}

bool OAITelegrafRequest::is_config_Valid() const{
    return m_config_isValid;
}

QString OAITelegrafRequest::getDescription() const {
    return m_description;
}
void OAITelegrafRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITelegrafRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAITelegrafRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAITelegrafRequest_metadata OAITelegrafRequest::getMetadata() const {
    return m_metadata;
}
void OAITelegrafRequest::setMetadata(const OAITelegrafRequest_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAITelegrafRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAITelegrafRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAITelegrafRequest::getName() const {
    return m_name;
}
void OAITelegrafRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITelegrafRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAITelegrafRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITelegrafRequest::getOrgId() const {
    return m_org_id;
}
void OAITelegrafRequest::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAITelegrafRequest::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAITelegrafRequest::is_org_id_Valid() const{
    return m_org_id_isValid;
}

bool OAITelegrafRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITelegrafRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
