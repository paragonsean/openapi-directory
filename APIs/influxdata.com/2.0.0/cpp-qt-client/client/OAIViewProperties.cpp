/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewProperties::OAIViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewProperties::OAIViewProperties() {
    this->initializeModel();
}

OAIViewProperties::~OAIViewProperties() {}

void OAIViewProperties::initializeModel() {

    m_axes_isSet = false;
    m_axes_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_decimal_places_isSet = false;
    m_decimal_places_isValid = false;

    m_generate_x_axis_ticks_isSet = false;
    m_generate_x_axis_ticks_isValid = false;

    m_generate_y_axis_ticks_isSet = false;
    m_generate_y_axis_ticks_isValid = false;

    m_hover_dimension_isSet = false;
    m_hover_dimension_isValid = false;

    m_legend_colorize_rows_isSet = false;
    m_legend_colorize_rows_isValid = false;

    m_legend_hide_isSet = false;
    m_legend_hide_isValid = false;

    m_legend_opacity_isSet = false;
    m_legend_opacity_isValid = false;

    m_legend_orientation_threshold_isSet = false;
    m_legend_orientation_threshold_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_shade_below_isSet = false;
    m_shade_below_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_show_note_when_empty_isSet = false;
    m_show_note_when_empty_isValid = false;

    m_static_legend_isSet = false;
    m_static_legend_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_x_column_isSet = false;
    m_x_column_isValid = false;

    m_x_tick_start_isSet = false;
    m_x_tick_start_isValid = false;

    m_x_tick_step_isSet = false;
    m_x_tick_step_isValid = false;

    m_x_total_ticks_isSet = false;
    m_x_total_ticks_isValid = false;

    m_y_column_isSet = false;
    m_y_column_isValid = false;

    m_y_tick_start_isSet = false;
    m_y_tick_start_isValid = false;

    m_y_tick_step_isSet = false;
    m_y_tick_step_isValid = false;

    m_y_total_ticks_isSet = false;
    m_y_total_ticks_isValid = false;

    m_geom_isSet = false;
    m_geom_isValid = false;

    m_tick_prefix_isSet = false;
    m_tick_prefix_isValid = false;

    m_tick_suffix_isSet = false;
    m_tick_suffix_isValid = false;

    m_bin_count_isSet = false;
    m_bin_count_isValid = false;

    m_fill_columns_isSet = false;
    m_fill_columns_isValid = false;

    m_x_axis_label_isSet = false;
    m_x_axis_label_isValid = false;

    m_x_domain_isSet = false;
    m_x_domain_isValid = false;

    m_field_options_isSet = false;
    m_field_options_isValid = false;

    m_table_options_isSet = false;
    m_table_options_isValid = false;

    m_check_isSet = false;
    m_check_isValid = false;

    m_check_id_isSet = false;
    m_check_id_isValid = false;

    m_symbol_columns_isSet = false;
    m_symbol_columns_isValid = false;

    m_x_prefix_isSet = false;
    m_x_prefix_isValid = false;

    m_x_suffix_isSet = false;
    m_x_suffix_isValid = false;

    m_y_axis_label_isSet = false;
    m_y_axis_label_isValid = false;

    m_y_domain_isSet = false;
    m_y_domain_isValid = false;

    m_y_prefix_isSet = false;
    m_y_prefix_isValid = false;

    m_y_suffix_isSet = false;
    m_y_suffix_isValid = false;

    m_bin_size_isSet = false;
    m_bin_size_isValid = false;

    m_y_label_column_separator_isSet = false;
    m_y_label_column_separator_isValid = false;

    m_y_label_columns_isSet = false;
    m_y_label_columns_isValid = false;

    m_y_series_columns_isSet = false;
    m_y_series_columns_isValid = false;

    m_lower_column_isSet = false;
    m_lower_column_isValid = false;

    m_main_column_isSet = false;
    m_main_column_isValid = false;

    m_upper_column_isSet = false;
    m_upper_column_isValid = false;

    m_allow_pan_and_zoom_isSet = false;
    m_allow_pan_and_zoom_isValid = false;

    m_center_isSet = false;
    m_center_isValid = false;

    m_detect_coordinate_fields_isSet = false;
    m_detect_coordinate_fields_isValid = false;

    m_layers_isSet = false;
    m_layers_isValid = false;

    m_map_style_isSet = false;
    m_map_style_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;
}

void OAIViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViewProperties::fromJsonObject(QJsonObject json) {

    m_axes_isValid = ::OpenAPI::fromJsonValue(m_axes, json[QString("axes")]);
    m_axes_isSet = !json[QString("axes")].isNull() && m_axes_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_decimal_places_isValid = ::OpenAPI::fromJsonValue(m_decimal_places, json[QString("decimalPlaces")]);
    m_decimal_places_isSet = !json[QString("decimalPlaces")].isNull() && m_decimal_places_isValid;

    m_generate_x_axis_ticks_isValid = ::OpenAPI::fromJsonValue(m_generate_x_axis_ticks, json[QString("generateXAxisTicks")]);
    m_generate_x_axis_ticks_isSet = !json[QString("generateXAxisTicks")].isNull() && m_generate_x_axis_ticks_isValid;

    m_generate_y_axis_ticks_isValid = ::OpenAPI::fromJsonValue(m_generate_y_axis_ticks, json[QString("generateYAxisTicks")]);
    m_generate_y_axis_ticks_isSet = !json[QString("generateYAxisTicks")].isNull() && m_generate_y_axis_ticks_isValid;

    m_hover_dimension_isValid = ::OpenAPI::fromJsonValue(m_hover_dimension, json[QString("hoverDimension")]);
    m_hover_dimension_isSet = !json[QString("hoverDimension")].isNull() && m_hover_dimension_isValid;

    m_legend_colorize_rows_isValid = ::OpenAPI::fromJsonValue(m_legend_colorize_rows, json[QString("legendColorizeRows")]);
    m_legend_colorize_rows_isSet = !json[QString("legendColorizeRows")].isNull() && m_legend_colorize_rows_isValid;

    m_legend_hide_isValid = ::OpenAPI::fromJsonValue(m_legend_hide, json[QString("legendHide")]);
    m_legend_hide_isSet = !json[QString("legendHide")].isNull() && m_legend_hide_isValid;

    m_legend_opacity_isValid = ::OpenAPI::fromJsonValue(m_legend_opacity, json[QString("legendOpacity")]);
    m_legend_opacity_isSet = !json[QString("legendOpacity")].isNull() && m_legend_opacity_isValid;

    m_legend_orientation_threshold_isValid = ::OpenAPI::fromJsonValue(m_legend_orientation_threshold, json[QString("legendOrientationThreshold")]);
    m_legend_orientation_threshold_isSet = !json[QString("legendOrientationThreshold")].isNull() && m_legend_orientation_threshold_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_shade_below_isValid = ::OpenAPI::fromJsonValue(m_shade_below, json[QString("shadeBelow")]);
    m_shade_below_isSet = !json[QString("shadeBelow")].isNull() && m_shade_below_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_show_note_when_empty_isValid = ::OpenAPI::fromJsonValue(m_show_note_when_empty, json[QString("showNoteWhenEmpty")]);
    m_show_note_when_empty_isSet = !json[QString("showNoteWhenEmpty")].isNull() && m_show_note_when_empty_isValid;

    m_static_legend_isValid = ::OpenAPI::fromJsonValue(m_static_legend, json[QString("staticLegend")]);
    m_static_legend_isSet = !json[QString("staticLegend")].isNull() && m_static_legend_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("suffix")]);
    m_suffix_isSet = !json[QString("suffix")].isNull() && m_suffix_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_x_column_isValid = ::OpenAPI::fromJsonValue(m_x_column, json[QString("xColumn")]);
    m_x_column_isSet = !json[QString("xColumn")].isNull() && m_x_column_isValid;

    m_x_tick_start_isValid = ::OpenAPI::fromJsonValue(m_x_tick_start, json[QString("xTickStart")]);
    m_x_tick_start_isSet = !json[QString("xTickStart")].isNull() && m_x_tick_start_isValid;

    m_x_tick_step_isValid = ::OpenAPI::fromJsonValue(m_x_tick_step, json[QString("xTickStep")]);
    m_x_tick_step_isSet = !json[QString("xTickStep")].isNull() && m_x_tick_step_isValid;

    m_x_total_ticks_isValid = ::OpenAPI::fromJsonValue(m_x_total_ticks, json[QString("xTotalTicks")]);
    m_x_total_ticks_isSet = !json[QString("xTotalTicks")].isNull() && m_x_total_ticks_isValid;

    m_y_column_isValid = ::OpenAPI::fromJsonValue(m_y_column, json[QString("yColumn")]);
    m_y_column_isSet = !json[QString("yColumn")].isNull() && m_y_column_isValid;

    m_y_tick_start_isValid = ::OpenAPI::fromJsonValue(m_y_tick_start, json[QString("yTickStart")]);
    m_y_tick_start_isSet = !json[QString("yTickStart")].isNull() && m_y_tick_start_isValid;

    m_y_tick_step_isValid = ::OpenAPI::fromJsonValue(m_y_tick_step, json[QString("yTickStep")]);
    m_y_tick_step_isSet = !json[QString("yTickStep")].isNull() && m_y_tick_step_isValid;

    m_y_total_ticks_isValid = ::OpenAPI::fromJsonValue(m_y_total_ticks, json[QString("yTotalTicks")]);
    m_y_total_ticks_isSet = !json[QString("yTotalTicks")].isNull() && m_y_total_ticks_isValid;

    m_geom_isValid = ::OpenAPI::fromJsonValue(m_geom, json[QString("geom")]);
    m_geom_isSet = !json[QString("geom")].isNull() && m_geom_isValid;

    m_tick_prefix_isValid = ::OpenAPI::fromJsonValue(m_tick_prefix, json[QString("tickPrefix")]);
    m_tick_prefix_isSet = !json[QString("tickPrefix")].isNull() && m_tick_prefix_isValid;

    m_tick_suffix_isValid = ::OpenAPI::fromJsonValue(m_tick_suffix, json[QString("tickSuffix")]);
    m_tick_suffix_isSet = !json[QString("tickSuffix")].isNull() && m_tick_suffix_isValid;

    m_bin_count_isValid = ::OpenAPI::fromJsonValue(m_bin_count, json[QString("binCount")]);
    m_bin_count_isSet = !json[QString("binCount")].isNull() && m_bin_count_isValid;

    m_fill_columns_isValid = ::OpenAPI::fromJsonValue(m_fill_columns, json[QString("fillColumns")]);
    m_fill_columns_isSet = !json[QString("fillColumns")].isNull() && m_fill_columns_isValid;

    m_x_axis_label_isValid = ::OpenAPI::fromJsonValue(m_x_axis_label, json[QString("xAxisLabel")]);
    m_x_axis_label_isSet = !json[QString("xAxisLabel")].isNull() && m_x_axis_label_isValid;

    m_x_domain_isValid = ::OpenAPI::fromJsonValue(m_x_domain, json[QString("xDomain")]);
    m_x_domain_isSet = !json[QString("xDomain")].isNull() && m_x_domain_isValid;

    m_field_options_isValid = ::OpenAPI::fromJsonValue(m_field_options, json[QString("fieldOptions")]);
    m_field_options_isSet = !json[QString("fieldOptions")].isNull() && m_field_options_isValid;

    m_table_options_isValid = ::OpenAPI::fromJsonValue(m_table_options, json[QString("tableOptions")]);
    m_table_options_isSet = !json[QString("tableOptions")].isNull() && m_table_options_isValid;

    m_check_isValid = ::OpenAPI::fromJsonValue(m_check, json[QString("check")]);
    m_check_isSet = !json[QString("check")].isNull() && m_check_isValid;

    m_check_id_isValid = ::OpenAPI::fromJsonValue(m_check_id, json[QString("checkID")]);
    m_check_id_isSet = !json[QString("checkID")].isNull() && m_check_id_isValid;

    m_symbol_columns_isValid = ::OpenAPI::fromJsonValue(m_symbol_columns, json[QString("symbolColumns")]);
    m_symbol_columns_isSet = !json[QString("symbolColumns")].isNull() && m_symbol_columns_isValid;

    m_x_prefix_isValid = ::OpenAPI::fromJsonValue(m_x_prefix, json[QString("xPrefix")]);
    m_x_prefix_isSet = !json[QString("xPrefix")].isNull() && m_x_prefix_isValid;

    m_x_suffix_isValid = ::OpenAPI::fromJsonValue(m_x_suffix, json[QString("xSuffix")]);
    m_x_suffix_isSet = !json[QString("xSuffix")].isNull() && m_x_suffix_isValid;

    m_y_axis_label_isValid = ::OpenAPI::fromJsonValue(m_y_axis_label, json[QString("yAxisLabel")]);
    m_y_axis_label_isSet = !json[QString("yAxisLabel")].isNull() && m_y_axis_label_isValid;

    m_y_domain_isValid = ::OpenAPI::fromJsonValue(m_y_domain, json[QString("yDomain")]);
    m_y_domain_isSet = !json[QString("yDomain")].isNull() && m_y_domain_isValid;

    m_y_prefix_isValid = ::OpenAPI::fromJsonValue(m_y_prefix, json[QString("yPrefix")]);
    m_y_prefix_isSet = !json[QString("yPrefix")].isNull() && m_y_prefix_isValid;

    m_y_suffix_isValid = ::OpenAPI::fromJsonValue(m_y_suffix, json[QString("ySuffix")]);
    m_y_suffix_isSet = !json[QString("ySuffix")].isNull() && m_y_suffix_isValid;

    m_bin_size_isValid = ::OpenAPI::fromJsonValue(m_bin_size, json[QString("binSize")]);
    m_bin_size_isSet = !json[QString("binSize")].isNull() && m_bin_size_isValid;

    m_y_label_column_separator_isValid = ::OpenAPI::fromJsonValue(m_y_label_column_separator, json[QString("yLabelColumnSeparator")]);
    m_y_label_column_separator_isSet = !json[QString("yLabelColumnSeparator")].isNull() && m_y_label_column_separator_isValid;

    m_y_label_columns_isValid = ::OpenAPI::fromJsonValue(m_y_label_columns, json[QString("yLabelColumns")]);
    m_y_label_columns_isSet = !json[QString("yLabelColumns")].isNull() && m_y_label_columns_isValid;

    m_y_series_columns_isValid = ::OpenAPI::fromJsonValue(m_y_series_columns, json[QString("ySeriesColumns")]);
    m_y_series_columns_isSet = !json[QString("ySeriesColumns")].isNull() && m_y_series_columns_isValid;

    m_lower_column_isValid = ::OpenAPI::fromJsonValue(m_lower_column, json[QString("lowerColumn")]);
    m_lower_column_isSet = !json[QString("lowerColumn")].isNull() && m_lower_column_isValid;

    m_main_column_isValid = ::OpenAPI::fromJsonValue(m_main_column, json[QString("mainColumn")]);
    m_main_column_isSet = !json[QString("mainColumn")].isNull() && m_main_column_isValid;

    m_upper_column_isValid = ::OpenAPI::fromJsonValue(m_upper_column, json[QString("upperColumn")]);
    m_upper_column_isSet = !json[QString("upperColumn")].isNull() && m_upper_column_isValid;

    m_allow_pan_and_zoom_isValid = ::OpenAPI::fromJsonValue(m_allow_pan_and_zoom, json[QString("allowPanAndZoom")]);
    m_allow_pan_and_zoom_isSet = !json[QString("allowPanAndZoom")].isNull() && m_allow_pan_and_zoom_isValid;

    m_center_isValid = ::OpenAPI::fromJsonValue(m_center, json[QString("center")]);
    m_center_isSet = !json[QString("center")].isNull() && m_center_isValid;

    m_detect_coordinate_fields_isValid = ::OpenAPI::fromJsonValue(m_detect_coordinate_fields, json[QString("detectCoordinateFields")]);
    m_detect_coordinate_fields_isSet = !json[QString("detectCoordinateFields")].isNull() && m_detect_coordinate_fields_isValid;

    m_layers_isValid = ::OpenAPI::fromJsonValue(m_layers, json[QString("layers")]);
    m_layers_isSet = !json[QString("layers")].isNull() && m_layers_isValid;

    m_map_style_isValid = ::OpenAPI::fromJsonValue(m_map_style, json[QString("mapStyle")]);
    m_map_style_isSet = !json[QString("mapStyle")].isNull() && m_map_style_isValid;

    m_zoom_isValid = ::OpenAPI::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;
}

QString OAIViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_axes.isSet()) {
        obj.insert(QString("axes"), ::OpenAPI::toJsonValue(m_axes));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_decimal_places.isSet()) {
        obj.insert(QString("decimalPlaces"), ::OpenAPI::toJsonValue(m_decimal_places));
    }
    if (m_generate_x_axis_ticks.size() > 0) {
        obj.insert(QString("generateXAxisTicks"), ::OpenAPI::toJsonValue(m_generate_x_axis_ticks));
    }
    if (m_generate_y_axis_ticks.size() > 0) {
        obj.insert(QString("generateYAxisTicks"), ::OpenAPI::toJsonValue(m_generate_y_axis_ticks));
    }
    if (m_hover_dimension_isSet) {
        obj.insert(QString("hoverDimension"), ::OpenAPI::toJsonValue(m_hover_dimension));
    }
    if (m_legend_colorize_rows_isSet) {
        obj.insert(QString("legendColorizeRows"), ::OpenAPI::toJsonValue(m_legend_colorize_rows));
    }
    if (m_legend_hide_isSet) {
        obj.insert(QString("legendHide"), ::OpenAPI::toJsonValue(m_legend_hide));
    }
    if (m_legend_opacity_isSet) {
        obj.insert(QString("legendOpacity"), ::OpenAPI::toJsonValue(m_legend_opacity));
    }
    if (m_legend_orientation_threshold_isSet) {
        obj.insert(QString("legendOrientationThreshold"), ::OpenAPI::toJsonValue(m_legend_orientation_threshold));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_shade_below_isSet) {
        obj.insert(QString("shadeBelow"), ::OpenAPI::toJsonValue(m_shade_below));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_show_note_when_empty_isSet) {
        obj.insert(QString("showNoteWhenEmpty"), ::OpenAPI::toJsonValue(m_show_note_when_empty));
    }
    if (m_static_legend.isSet()) {
        obj.insert(QString("staticLegend"), ::OpenAPI::toJsonValue(m_static_legend));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    if (m_time_format_isSet) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_x_column_isSet) {
        obj.insert(QString("xColumn"), ::OpenAPI::toJsonValue(m_x_column));
    }
    if (m_x_tick_start_isSet) {
        obj.insert(QString("xTickStart"), ::OpenAPI::toJsonValue(m_x_tick_start));
    }
    if (m_x_tick_step_isSet) {
        obj.insert(QString("xTickStep"), ::OpenAPI::toJsonValue(m_x_tick_step));
    }
    if (m_x_total_ticks_isSet) {
        obj.insert(QString("xTotalTicks"), ::OpenAPI::toJsonValue(m_x_total_ticks));
    }
    if (m_y_column_isSet) {
        obj.insert(QString("yColumn"), ::OpenAPI::toJsonValue(m_y_column));
    }
    if (m_y_tick_start_isSet) {
        obj.insert(QString("yTickStart"), ::OpenAPI::toJsonValue(m_y_tick_start));
    }
    if (m_y_tick_step_isSet) {
        obj.insert(QString("yTickStep"), ::OpenAPI::toJsonValue(m_y_tick_step));
    }
    if (m_y_total_ticks_isSet) {
        obj.insert(QString("yTotalTicks"), ::OpenAPI::toJsonValue(m_y_total_ticks));
    }
    if (m_geom.isSet()) {
        obj.insert(QString("geom"), ::OpenAPI::toJsonValue(m_geom));
    }
    if (m_tick_prefix_isSet) {
        obj.insert(QString("tickPrefix"), ::OpenAPI::toJsonValue(m_tick_prefix));
    }
    if (m_tick_suffix_isSet) {
        obj.insert(QString("tickSuffix"), ::OpenAPI::toJsonValue(m_tick_suffix));
    }
    if (m_bin_count_isSet) {
        obj.insert(QString("binCount"), ::OpenAPI::toJsonValue(m_bin_count));
    }
    if (m_fill_columns.size() > 0) {
        obj.insert(QString("fillColumns"), ::OpenAPI::toJsonValue(m_fill_columns));
    }
    if (m_x_axis_label_isSet) {
        obj.insert(QString("xAxisLabel"), ::OpenAPI::toJsonValue(m_x_axis_label));
    }
    if (m_x_domain.size() > 0) {
        obj.insert(QString("xDomain"), ::OpenAPI::toJsonValue(m_x_domain));
    }
    if (m_field_options.size() > 0) {
        obj.insert(QString("fieldOptions"), ::OpenAPI::toJsonValue(m_field_options));
    }
    if (m_table_options.isSet()) {
        obj.insert(QString("tableOptions"), ::OpenAPI::toJsonValue(m_table_options));
    }
    if (m_check.isSet()) {
        obj.insert(QString("check"), ::OpenAPI::toJsonValue(m_check));
    }
    if (m_check_id_isSet) {
        obj.insert(QString("checkID"), ::OpenAPI::toJsonValue(m_check_id));
    }
    if (m_symbol_columns.size() > 0) {
        obj.insert(QString("symbolColumns"), ::OpenAPI::toJsonValue(m_symbol_columns));
    }
    if (m_x_prefix_isSet) {
        obj.insert(QString("xPrefix"), ::OpenAPI::toJsonValue(m_x_prefix));
    }
    if (m_x_suffix_isSet) {
        obj.insert(QString("xSuffix"), ::OpenAPI::toJsonValue(m_x_suffix));
    }
    if (m_y_axis_label_isSet) {
        obj.insert(QString("yAxisLabel"), ::OpenAPI::toJsonValue(m_y_axis_label));
    }
    if (m_y_domain.size() > 0) {
        obj.insert(QString("yDomain"), ::OpenAPI::toJsonValue(m_y_domain));
    }
    if (m_y_prefix_isSet) {
        obj.insert(QString("yPrefix"), ::OpenAPI::toJsonValue(m_y_prefix));
    }
    if (m_y_suffix_isSet) {
        obj.insert(QString("ySuffix"), ::OpenAPI::toJsonValue(m_y_suffix));
    }
    if (m_bin_size_isSet) {
        obj.insert(QString("binSize"), ::OpenAPI::toJsonValue(m_bin_size));
    }
    if (m_y_label_column_separator_isSet) {
        obj.insert(QString("yLabelColumnSeparator"), ::OpenAPI::toJsonValue(m_y_label_column_separator));
    }
    if (m_y_label_columns.size() > 0) {
        obj.insert(QString("yLabelColumns"), ::OpenAPI::toJsonValue(m_y_label_columns));
    }
    if (m_y_series_columns.size() > 0) {
        obj.insert(QString("ySeriesColumns"), ::OpenAPI::toJsonValue(m_y_series_columns));
    }
    if (m_lower_column_isSet) {
        obj.insert(QString("lowerColumn"), ::OpenAPI::toJsonValue(m_lower_column));
    }
    if (m_main_column_isSet) {
        obj.insert(QString("mainColumn"), ::OpenAPI::toJsonValue(m_main_column));
    }
    if (m_upper_column_isSet) {
        obj.insert(QString("upperColumn"), ::OpenAPI::toJsonValue(m_upper_column));
    }
    if (m_allow_pan_and_zoom_isSet) {
        obj.insert(QString("allowPanAndZoom"), ::OpenAPI::toJsonValue(m_allow_pan_and_zoom));
    }
    if (m_center.isSet()) {
        obj.insert(QString("center"), ::OpenAPI::toJsonValue(m_center));
    }
    if (m_detect_coordinate_fields_isSet) {
        obj.insert(QString("detectCoordinateFields"), ::OpenAPI::toJsonValue(m_detect_coordinate_fields));
    }
    if (m_layers.size() > 0) {
        obj.insert(QString("layers"), ::OpenAPI::toJsonValue(m_layers));
    }
    if (m_map_style_isSet) {
        obj.insert(QString("mapStyle"), ::OpenAPI::toJsonValue(m_map_style));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OpenAPI::toJsonValue(m_zoom));
    }
    return obj;
}

OAIAxes OAIViewProperties::getAxes() const {
    return m_axes;
}
void OAIViewProperties::setAxes(const OAIAxes &axes) {
    m_axes = axes;
    m_axes_isSet = true;
}

bool OAIViewProperties::is_axes_Set() const{
    return m_axes_isSet;
}

bool OAIViewProperties::is_axes_Valid() const{
    return m_axes_isValid;
}

QList<OAIDashboardColor> OAIViewProperties::getColors() const {
    return m_colors;
}
void OAIViewProperties::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIViewProperties::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIViewProperties::is_colors_Valid() const{
    return m_colors_isValid;
}

OAIDecimalPlaces OAIViewProperties::getDecimalPlaces() const {
    return m_decimal_places;
}
void OAIViewProperties::setDecimalPlaces(const OAIDecimalPlaces &decimal_places) {
    m_decimal_places = decimal_places;
    m_decimal_places_isSet = true;
}

bool OAIViewProperties::is_decimal_places_Set() const{
    return m_decimal_places_isSet;
}

bool OAIViewProperties::is_decimal_places_Valid() const{
    return m_decimal_places_isValid;
}

QList<QString> OAIViewProperties::getGenerateXAxisTicks() const {
    return m_generate_x_axis_ticks;
}
void OAIViewProperties::setGenerateXAxisTicks(const QList<QString> &generate_x_axis_ticks) {
    m_generate_x_axis_ticks = generate_x_axis_ticks;
    m_generate_x_axis_ticks_isSet = true;
}

bool OAIViewProperties::is_generate_x_axis_ticks_Set() const{
    return m_generate_x_axis_ticks_isSet;
}

bool OAIViewProperties::is_generate_x_axis_ticks_Valid() const{
    return m_generate_x_axis_ticks_isValid;
}

QList<QString> OAIViewProperties::getGenerateYAxisTicks() const {
    return m_generate_y_axis_ticks;
}
void OAIViewProperties::setGenerateYAxisTicks(const QList<QString> &generate_y_axis_ticks) {
    m_generate_y_axis_ticks = generate_y_axis_ticks;
    m_generate_y_axis_ticks_isSet = true;
}

bool OAIViewProperties::is_generate_y_axis_ticks_Set() const{
    return m_generate_y_axis_ticks_isSet;
}

bool OAIViewProperties::is_generate_y_axis_ticks_Valid() const{
    return m_generate_y_axis_ticks_isValid;
}

QString OAIViewProperties::getHoverDimension() const {
    return m_hover_dimension;
}
void OAIViewProperties::setHoverDimension(const QString &hover_dimension) {
    m_hover_dimension = hover_dimension;
    m_hover_dimension_isSet = true;
}

bool OAIViewProperties::is_hover_dimension_Set() const{
    return m_hover_dimension_isSet;
}

bool OAIViewProperties::is_hover_dimension_Valid() const{
    return m_hover_dimension_isValid;
}

bool OAIViewProperties::isLegendColorizeRows() const {
    return m_legend_colorize_rows;
}
void OAIViewProperties::setLegendColorizeRows(const bool &legend_colorize_rows) {
    m_legend_colorize_rows = legend_colorize_rows;
    m_legend_colorize_rows_isSet = true;
}

bool OAIViewProperties::is_legend_colorize_rows_Set() const{
    return m_legend_colorize_rows_isSet;
}

bool OAIViewProperties::is_legend_colorize_rows_Valid() const{
    return m_legend_colorize_rows_isValid;
}

bool OAIViewProperties::isLegendHide() const {
    return m_legend_hide;
}
void OAIViewProperties::setLegendHide(const bool &legend_hide) {
    m_legend_hide = legend_hide;
    m_legend_hide_isSet = true;
}

bool OAIViewProperties::is_legend_hide_Set() const{
    return m_legend_hide_isSet;
}

bool OAIViewProperties::is_legend_hide_Valid() const{
    return m_legend_hide_isValid;
}

float OAIViewProperties::getLegendOpacity() const {
    return m_legend_opacity;
}
void OAIViewProperties::setLegendOpacity(const float &legend_opacity) {
    m_legend_opacity = legend_opacity;
    m_legend_opacity_isSet = true;
}

bool OAIViewProperties::is_legend_opacity_Set() const{
    return m_legend_opacity_isSet;
}

bool OAIViewProperties::is_legend_opacity_Valid() const{
    return m_legend_opacity_isValid;
}

qint32 OAIViewProperties::getLegendOrientationThreshold() const {
    return m_legend_orientation_threshold;
}
void OAIViewProperties::setLegendOrientationThreshold(const qint32 &legend_orientation_threshold) {
    m_legend_orientation_threshold = legend_orientation_threshold;
    m_legend_orientation_threshold_isSet = true;
}

bool OAIViewProperties::is_legend_orientation_threshold_Set() const{
    return m_legend_orientation_threshold_isSet;
}

bool OAIViewProperties::is_legend_orientation_threshold_Valid() const{
    return m_legend_orientation_threshold_isValid;
}

QString OAIViewProperties::getNote() const {
    return m_note;
}
void OAIViewProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIViewProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIViewProperties::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIViewProperties::getPosition() const {
    return m_position;
}
void OAIViewProperties::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIViewProperties::is_position_Set() const{
    return m_position_isSet;
}

bool OAIViewProperties::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIViewProperties::getPrefix() const {
    return m_prefix;
}
void OAIViewProperties::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIViewProperties::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIViewProperties::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QList<OAIDashboardQuery> OAIViewProperties::getQueries() const {
    return m_queries;
}
void OAIViewProperties::setQueries(const QList<OAIDashboardQuery> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIViewProperties::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIViewProperties::is_queries_Valid() const{
    return m_queries_isValid;
}

bool OAIViewProperties::isShadeBelow() const {
    return m_shade_below;
}
void OAIViewProperties::setShadeBelow(const bool &shade_below) {
    m_shade_below = shade_below;
    m_shade_below_isSet = true;
}

bool OAIViewProperties::is_shade_below_Set() const{
    return m_shade_below_isSet;
}

bool OAIViewProperties::is_shade_below_Valid() const{
    return m_shade_below_isValid;
}

QString OAIViewProperties::getShape() const {
    return m_shape;
}
void OAIViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

bool OAIViewProperties::isShowNoteWhenEmpty() const {
    return m_show_note_when_empty;
}
void OAIViewProperties::setShowNoteWhenEmpty(const bool &show_note_when_empty) {
    m_show_note_when_empty = show_note_when_empty;
    m_show_note_when_empty_isSet = true;
}

bool OAIViewProperties::is_show_note_when_empty_Set() const{
    return m_show_note_when_empty_isSet;
}

bool OAIViewProperties::is_show_note_when_empty_Valid() const{
    return m_show_note_when_empty_isValid;
}

OAIStaticLegend OAIViewProperties::getStaticLegend() const {
    return m_static_legend;
}
void OAIViewProperties::setStaticLegend(const OAIStaticLegend &static_legend) {
    m_static_legend = static_legend;
    m_static_legend_isSet = true;
}

bool OAIViewProperties::is_static_legend_Set() const{
    return m_static_legend_isSet;
}

bool OAIViewProperties::is_static_legend_Valid() const{
    return m_static_legend_isValid;
}

QString OAIViewProperties::getSuffix() const {
    return m_suffix;
}
void OAIViewProperties::setSuffix(const QString &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAIViewProperties::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAIViewProperties::is_suffix_Valid() const{
    return m_suffix_isValid;
}

QString OAIViewProperties::getTimeFormat() const {
    return m_time_format;
}
void OAIViewProperties::setTimeFormat(const QString &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAIViewProperties::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAIViewProperties::is_time_format_Valid() const{
    return m_time_format_isValid;
}

QString OAIViewProperties::getType() const {
    return m_type;
}
void OAIViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIViewProperties::getXColumn() const {
    return m_x_column;
}
void OAIViewProperties::setXColumn(const QString &x_column) {
    m_x_column = x_column;
    m_x_column_isSet = true;
}

bool OAIViewProperties::is_x_column_Set() const{
    return m_x_column_isSet;
}

bool OAIViewProperties::is_x_column_Valid() const{
    return m_x_column_isValid;
}

float OAIViewProperties::getXTickStart() const {
    return m_x_tick_start;
}
void OAIViewProperties::setXTickStart(const float &x_tick_start) {
    m_x_tick_start = x_tick_start;
    m_x_tick_start_isSet = true;
}

bool OAIViewProperties::is_x_tick_start_Set() const{
    return m_x_tick_start_isSet;
}

bool OAIViewProperties::is_x_tick_start_Valid() const{
    return m_x_tick_start_isValid;
}

float OAIViewProperties::getXTickStep() const {
    return m_x_tick_step;
}
void OAIViewProperties::setXTickStep(const float &x_tick_step) {
    m_x_tick_step = x_tick_step;
    m_x_tick_step_isSet = true;
}

bool OAIViewProperties::is_x_tick_step_Set() const{
    return m_x_tick_step_isSet;
}

bool OAIViewProperties::is_x_tick_step_Valid() const{
    return m_x_tick_step_isValid;
}

qint32 OAIViewProperties::getXTotalTicks() const {
    return m_x_total_ticks;
}
void OAIViewProperties::setXTotalTicks(const qint32 &x_total_ticks) {
    m_x_total_ticks = x_total_ticks;
    m_x_total_ticks_isSet = true;
}

bool OAIViewProperties::is_x_total_ticks_Set() const{
    return m_x_total_ticks_isSet;
}

bool OAIViewProperties::is_x_total_ticks_Valid() const{
    return m_x_total_ticks_isValid;
}

QString OAIViewProperties::getYColumn() const {
    return m_y_column;
}
void OAIViewProperties::setYColumn(const QString &y_column) {
    m_y_column = y_column;
    m_y_column_isSet = true;
}

bool OAIViewProperties::is_y_column_Set() const{
    return m_y_column_isSet;
}

bool OAIViewProperties::is_y_column_Valid() const{
    return m_y_column_isValid;
}

float OAIViewProperties::getYTickStart() const {
    return m_y_tick_start;
}
void OAIViewProperties::setYTickStart(const float &y_tick_start) {
    m_y_tick_start = y_tick_start;
    m_y_tick_start_isSet = true;
}

bool OAIViewProperties::is_y_tick_start_Set() const{
    return m_y_tick_start_isSet;
}

bool OAIViewProperties::is_y_tick_start_Valid() const{
    return m_y_tick_start_isValid;
}

float OAIViewProperties::getYTickStep() const {
    return m_y_tick_step;
}
void OAIViewProperties::setYTickStep(const float &y_tick_step) {
    m_y_tick_step = y_tick_step;
    m_y_tick_step_isSet = true;
}

bool OAIViewProperties::is_y_tick_step_Set() const{
    return m_y_tick_step_isSet;
}

bool OAIViewProperties::is_y_tick_step_Valid() const{
    return m_y_tick_step_isValid;
}

qint32 OAIViewProperties::getYTotalTicks() const {
    return m_y_total_ticks;
}
void OAIViewProperties::setYTotalTicks(const qint32 &y_total_ticks) {
    m_y_total_ticks = y_total_ticks;
    m_y_total_ticks_isSet = true;
}

bool OAIViewProperties::is_y_total_ticks_Set() const{
    return m_y_total_ticks_isSet;
}

bool OAIViewProperties::is_y_total_ticks_Valid() const{
    return m_y_total_ticks_isValid;
}

OAIXYGeom OAIViewProperties::getGeom() const {
    return m_geom;
}
void OAIViewProperties::setGeom(const OAIXYGeom &geom) {
    m_geom = geom;
    m_geom_isSet = true;
}

bool OAIViewProperties::is_geom_Set() const{
    return m_geom_isSet;
}

bool OAIViewProperties::is_geom_Valid() const{
    return m_geom_isValid;
}

QString OAIViewProperties::getTickPrefix() const {
    return m_tick_prefix;
}
void OAIViewProperties::setTickPrefix(const QString &tick_prefix) {
    m_tick_prefix = tick_prefix;
    m_tick_prefix_isSet = true;
}

bool OAIViewProperties::is_tick_prefix_Set() const{
    return m_tick_prefix_isSet;
}

bool OAIViewProperties::is_tick_prefix_Valid() const{
    return m_tick_prefix_isValid;
}

QString OAIViewProperties::getTickSuffix() const {
    return m_tick_suffix;
}
void OAIViewProperties::setTickSuffix(const QString &tick_suffix) {
    m_tick_suffix = tick_suffix;
    m_tick_suffix_isSet = true;
}

bool OAIViewProperties::is_tick_suffix_Set() const{
    return m_tick_suffix_isSet;
}

bool OAIViewProperties::is_tick_suffix_Valid() const{
    return m_tick_suffix_isValid;
}

qint32 OAIViewProperties::getBinCount() const {
    return m_bin_count;
}
void OAIViewProperties::setBinCount(const qint32 &bin_count) {
    m_bin_count = bin_count;
    m_bin_count_isSet = true;
}

bool OAIViewProperties::is_bin_count_Set() const{
    return m_bin_count_isSet;
}

bool OAIViewProperties::is_bin_count_Valid() const{
    return m_bin_count_isValid;
}

QList<QString> OAIViewProperties::getFillColumns() const {
    return m_fill_columns;
}
void OAIViewProperties::setFillColumns(const QList<QString> &fill_columns) {
    m_fill_columns = fill_columns;
    m_fill_columns_isSet = true;
}

bool OAIViewProperties::is_fill_columns_Set() const{
    return m_fill_columns_isSet;
}

bool OAIViewProperties::is_fill_columns_Valid() const{
    return m_fill_columns_isValid;
}

QString OAIViewProperties::getXAxisLabel() const {
    return m_x_axis_label;
}
void OAIViewProperties::setXAxisLabel(const QString &x_axis_label) {
    m_x_axis_label = x_axis_label;
    m_x_axis_label_isSet = true;
}

bool OAIViewProperties::is_x_axis_label_Set() const{
    return m_x_axis_label_isSet;
}

bool OAIViewProperties::is_x_axis_label_Valid() const{
    return m_x_axis_label_isValid;
}

QList<double> OAIViewProperties::getXDomain() const {
    return m_x_domain;
}
void OAIViewProperties::setXDomain(const QList<double> &x_domain) {
    m_x_domain = x_domain;
    m_x_domain_isSet = true;
}

bool OAIViewProperties::is_x_domain_Set() const{
    return m_x_domain_isSet;
}

bool OAIViewProperties::is_x_domain_Valid() const{
    return m_x_domain_isValid;
}

QList<OAIRenamableField> OAIViewProperties::getFieldOptions() const {
    return m_field_options;
}
void OAIViewProperties::setFieldOptions(const QList<OAIRenamableField> &field_options) {
    m_field_options = field_options;
    m_field_options_isSet = true;
}

bool OAIViewProperties::is_field_options_Set() const{
    return m_field_options_isSet;
}

bool OAIViewProperties::is_field_options_Valid() const{
    return m_field_options_isValid;
}

OAITableViewProperties_tableOptions OAIViewProperties::getTableOptions() const {
    return m_table_options;
}
void OAIViewProperties::setTableOptions(const OAITableViewProperties_tableOptions &table_options) {
    m_table_options = table_options;
    m_table_options_isSet = true;
}

bool OAIViewProperties::is_table_options_Set() const{
    return m_table_options_isSet;
}

bool OAIViewProperties::is_table_options_Valid() const{
    return m_table_options_isValid;
}

OAICheck OAIViewProperties::getCheck() const {
    return m_check;
}
void OAIViewProperties::setCheck(const OAICheck &check) {
    m_check = check;
    m_check_isSet = true;
}

bool OAIViewProperties::is_check_Set() const{
    return m_check_isSet;
}

bool OAIViewProperties::is_check_Valid() const{
    return m_check_isValid;
}

QString OAIViewProperties::getCheckId() const {
    return m_check_id;
}
void OAIViewProperties::setCheckId(const QString &check_id) {
    m_check_id = check_id;
    m_check_id_isSet = true;
}

bool OAIViewProperties::is_check_id_Set() const{
    return m_check_id_isSet;
}

bool OAIViewProperties::is_check_id_Valid() const{
    return m_check_id_isValid;
}

QList<QString> OAIViewProperties::getSymbolColumns() const {
    return m_symbol_columns;
}
void OAIViewProperties::setSymbolColumns(const QList<QString> &symbol_columns) {
    m_symbol_columns = symbol_columns;
    m_symbol_columns_isSet = true;
}

bool OAIViewProperties::is_symbol_columns_Set() const{
    return m_symbol_columns_isSet;
}

bool OAIViewProperties::is_symbol_columns_Valid() const{
    return m_symbol_columns_isValid;
}

QString OAIViewProperties::getXPrefix() const {
    return m_x_prefix;
}
void OAIViewProperties::setXPrefix(const QString &x_prefix) {
    m_x_prefix = x_prefix;
    m_x_prefix_isSet = true;
}

bool OAIViewProperties::is_x_prefix_Set() const{
    return m_x_prefix_isSet;
}

bool OAIViewProperties::is_x_prefix_Valid() const{
    return m_x_prefix_isValid;
}

QString OAIViewProperties::getXSuffix() const {
    return m_x_suffix;
}
void OAIViewProperties::setXSuffix(const QString &x_suffix) {
    m_x_suffix = x_suffix;
    m_x_suffix_isSet = true;
}

bool OAIViewProperties::is_x_suffix_Set() const{
    return m_x_suffix_isSet;
}

bool OAIViewProperties::is_x_suffix_Valid() const{
    return m_x_suffix_isValid;
}

QString OAIViewProperties::getYAxisLabel() const {
    return m_y_axis_label;
}
void OAIViewProperties::setYAxisLabel(const QString &y_axis_label) {
    m_y_axis_label = y_axis_label;
    m_y_axis_label_isSet = true;
}

bool OAIViewProperties::is_y_axis_label_Set() const{
    return m_y_axis_label_isSet;
}

bool OAIViewProperties::is_y_axis_label_Valid() const{
    return m_y_axis_label_isValid;
}

QList<double> OAIViewProperties::getYDomain() const {
    return m_y_domain;
}
void OAIViewProperties::setYDomain(const QList<double> &y_domain) {
    m_y_domain = y_domain;
    m_y_domain_isSet = true;
}

bool OAIViewProperties::is_y_domain_Set() const{
    return m_y_domain_isSet;
}

bool OAIViewProperties::is_y_domain_Valid() const{
    return m_y_domain_isValid;
}

QString OAIViewProperties::getYPrefix() const {
    return m_y_prefix;
}
void OAIViewProperties::setYPrefix(const QString &y_prefix) {
    m_y_prefix = y_prefix;
    m_y_prefix_isSet = true;
}

bool OAIViewProperties::is_y_prefix_Set() const{
    return m_y_prefix_isSet;
}

bool OAIViewProperties::is_y_prefix_Valid() const{
    return m_y_prefix_isValid;
}

QString OAIViewProperties::getYSuffix() const {
    return m_y_suffix;
}
void OAIViewProperties::setYSuffix(const QString &y_suffix) {
    m_y_suffix = y_suffix;
    m_y_suffix_isSet = true;
}

bool OAIViewProperties::is_y_suffix_Set() const{
    return m_y_suffix_isSet;
}

bool OAIViewProperties::is_y_suffix_Valid() const{
    return m_y_suffix_isValid;
}

double OAIViewProperties::getBinSize() const {
    return m_bin_size;
}
void OAIViewProperties::setBinSize(const double &bin_size) {
    m_bin_size = bin_size;
    m_bin_size_isSet = true;
}

bool OAIViewProperties::is_bin_size_Set() const{
    return m_bin_size_isSet;
}

bool OAIViewProperties::is_bin_size_Valid() const{
    return m_bin_size_isValid;
}

QString OAIViewProperties::getYLabelColumnSeparator() const {
    return m_y_label_column_separator;
}
void OAIViewProperties::setYLabelColumnSeparator(const QString &y_label_column_separator) {
    m_y_label_column_separator = y_label_column_separator;
    m_y_label_column_separator_isSet = true;
}

bool OAIViewProperties::is_y_label_column_separator_Set() const{
    return m_y_label_column_separator_isSet;
}

bool OAIViewProperties::is_y_label_column_separator_Valid() const{
    return m_y_label_column_separator_isValid;
}

QList<QString> OAIViewProperties::getYLabelColumns() const {
    return m_y_label_columns;
}
void OAIViewProperties::setYLabelColumns(const QList<QString> &y_label_columns) {
    m_y_label_columns = y_label_columns;
    m_y_label_columns_isSet = true;
}

bool OAIViewProperties::is_y_label_columns_Set() const{
    return m_y_label_columns_isSet;
}

bool OAIViewProperties::is_y_label_columns_Valid() const{
    return m_y_label_columns_isValid;
}

QList<QString> OAIViewProperties::getYSeriesColumns() const {
    return m_y_series_columns;
}
void OAIViewProperties::setYSeriesColumns(const QList<QString> &y_series_columns) {
    m_y_series_columns = y_series_columns;
    m_y_series_columns_isSet = true;
}

bool OAIViewProperties::is_y_series_columns_Set() const{
    return m_y_series_columns_isSet;
}

bool OAIViewProperties::is_y_series_columns_Valid() const{
    return m_y_series_columns_isValid;
}

QString OAIViewProperties::getLowerColumn() const {
    return m_lower_column;
}
void OAIViewProperties::setLowerColumn(const QString &lower_column) {
    m_lower_column = lower_column;
    m_lower_column_isSet = true;
}

bool OAIViewProperties::is_lower_column_Set() const{
    return m_lower_column_isSet;
}

bool OAIViewProperties::is_lower_column_Valid() const{
    return m_lower_column_isValid;
}

QString OAIViewProperties::getMainColumn() const {
    return m_main_column;
}
void OAIViewProperties::setMainColumn(const QString &main_column) {
    m_main_column = main_column;
    m_main_column_isSet = true;
}

bool OAIViewProperties::is_main_column_Set() const{
    return m_main_column_isSet;
}

bool OAIViewProperties::is_main_column_Valid() const{
    return m_main_column_isValid;
}

QString OAIViewProperties::getUpperColumn() const {
    return m_upper_column;
}
void OAIViewProperties::setUpperColumn(const QString &upper_column) {
    m_upper_column = upper_column;
    m_upper_column_isSet = true;
}

bool OAIViewProperties::is_upper_column_Set() const{
    return m_upper_column_isSet;
}

bool OAIViewProperties::is_upper_column_Valid() const{
    return m_upper_column_isValid;
}

bool OAIViewProperties::isAllowPanAndZoom() const {
    return m_allow_pan_and_zoom;
}
void OAIViewProperties::setAllowPanAndZoom(const bool &allow_pan_and_zoom) {
    m_allow_pan_and_zoom = allow_pan_and_zoom;
    m_allow_pan_and_zoom_isSet = true;
}

bool OAIViewProperties::is_allow_pan_and_zoom_Set() const{
    return m_allow_pan_and_zoom_isSet;
}

bool OAIViewProperties::is_allow_pan_and_zoom_Valid() const{
    return m_allow_pan_and_zoom_isValid;
}

OAIGeoViewProperties_center OAIViewProperties::getCenter() const {
    return m_center;
}
void OAIViewProperties::setCenter(const OAIGeoViewProperties_center &center) {
    m_center = center;
    m_center_isSet = true;
}

bool OAIViewProperties::is_center_Set() const{
    return m_center_isSet;
}

bool OAIViewProperties::is_center_Valid() const{
    return m_center_isValid;
}

bool OAIViewProperties::isDetectCoordinateFields() const {
    return m_detect_coordinate_fields;
}
void OAIViewProperties::setDetectCoordinateFields(const bool &detect_coordinate_fields) {
    m_detect_coordinate_fields = detect_coordinate_fields;
    m_detect_coordinate_fields_isSet = true;
}

bool OAIViewProperties::is_detect_coordinate_fields_Set() const{
    return m_detect_coordinate_fields_isSet;
}

bool OAIViewProperties::is_detect_coordinate_fields_Valid() const{
    return m_detect_coordinate_fields_isValid;
}

QList<OAIGeoViewLayer> OAIViewProperties::getLayers() const {
    return m_layers;
}
void OAIViewProperties::setLayers(const QList<OAIGeoViewLayer> &layers) {
    m_layers = layers;
    m_layers_isSet = true;
}

bool OAIViewProperties::is_layers_Set() const{
    return m_layers_isSet;
}

bool OAIViewProperties::is_layers_Valid() const{
    return m_layers_isValid;
}

QString OAIViewProperties::getMapStyle() const {
    return m_map_style;
}
void OAIViewProperties::setMapStyle(const QString &map_style) {
    m_map_style = map_style;
    m_map_style_isSet = true;
}

bool OAIViewProperties::is_map_style_Set() const{
    return m_map_style_isSet;
}

bool OAIViewProperties::is_map_style_Valid() const{
    return m_map_style_isValid;
}

double OAIViewProperties::getZoom() const {
    return m_zoom;
}
void OAIViewProperties::setZoom(const double &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OAIViewProperties::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OAIViewProperties::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OAIViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_places.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_x_axis_ticks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_y_axis_ticks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hover_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_colorize_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_hide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_orientation_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shade_below_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_note_when_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_tick_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_tick_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_total_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_tick_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_tick_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_total_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tick_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tick_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_domain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_domain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_label_column_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_label_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_series_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_pan_and_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_center.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_coordinate_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_axes_isValid && m_colors_isValid && m_decimal_places_isValid && m_note_isValid && m_position_isValid && m_prefix_isValid && m_queries_isValid && m_shape_isValid && m_show_note_when_empty_isValid && m_suffix_isValid && m_time_format_isValid && m_type_isValid && m_x_column_isValid && m_y_column_isValid && m_geom_isValid && m_tick_prefix_isValid && m_tick_suffix_isValid && m_bin_count_isValid && m_fill_columns_isValid && m_x_axis_label_isValid && m_x_domain_isValid && m_field_options_isValid && m_table_options_isValid && m_check_id_isValid && m_symbol_columns_isValid && m_x_prefix_isValid && m_x_suffix_isValid && m_y_axis_label_isValid && m_y_domain_isValid && m_y_prefix_isValid && m_y_suffix_isValid && m_bin_size_isValid && m_y_series_columns_isValid && m_allow_pan_and_zoom_isValid && m_center_isValid && m_detect_coordinate_fields_isValid && m_layers_isValid && m_zoom_isValid && true;
}

} // namespace OpenAPI
