/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVariablesApi_H
#define OAI_OAIVariablesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAIVariable.h"
#include "OAIVariables.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVariablesApi : public QObject {
    Q_OBJECT

public:
    OAIVariablesApi(const int timeOut = 0);
    ~OAIVariablesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  variable_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteVariablesID(const QString &variable_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  variable_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteVariablesIDLabelsID(const QString &variable_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  org QString [optional]
    * @param[in]  org_id QString [optional]
    */
    virtual void getVariables(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  variable_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getVariablesID(const QString &variable_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  variable_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getVariablesIDLabels(const QString &variable_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  variable_id QString [required]
    * @param[in]  oai_variable OAIVariable [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchVariablesID(const QString &variable_id, const OAIVariable &oai_variable, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_variable OAIVariable [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postVariables(const OAIVariable &oai_variable, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  variable_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postVariablesIDLabels(const QString &variable_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  variable_id QString [required]
    * @param[in]  oai_variable OAIVariable [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putVariablesID(const QString &variable_id, const OAIVariable &oai_variable, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteVariablesIDCallback(OAIHttpRequestWorker *worker);
    void deleteVariablesIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void getVariablesCallback(OAIHttpRequestWorker *worker);
    void getVariablesIDCallback(OAIHttpRequestWorker *worker);
    void getVariablesIDLabelsCallback(OAIHttpRequestWorker *worker);
    void patchVariablesIDCallback(OAIHttpRequestWorker *worker);
    void postVariablesCallback(OAIHttpRequestWorker *worker);
    void postVariablesIDLabelsCallback(OAIHttpRequestWorker *worker);
    void putVariablesIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteVariablesIDSignal();
    void deleteVariablesIDLabelsIDSignal();
    void getVariablesSignal(OAIVariables summary);
    void getVariablesIDSignal(OAIVariable summary);
    void getVariablesIDLabelsSignal(OAILabelsResponse summary);
    void patchVariablesIDSignal(OAIVariable summary);
    void postVariablesSignal(OAIVariable summary);
    void postVariablesIDLabelsSignal(OAILabelResponse summary);
    void putVariablesIDSignal(OAIVariable summary);


    void deleteVariablesIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteVariablesIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void getVariablesSignalFull(OAIHttpRequestWorker *worker, OAIVariables summary);
    void getVariablesIDSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void getVariablesIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void patchVariablesIDSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void postVariablesSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void postVariablesIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void putVariablesIDSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);

    Q_DECL_DEPRECATED_X("Use deleteVariablesIDSignalError() instead")
    void deleteVariablesIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVariablesIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVariablesIDLabelsIDSignalError() instead")
    void deleteVariablesIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVariablesIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesSignalError() instead")
    void getVariablesSignalE(OAIVariables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesSignalError(OAIVariables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesIDSignalError() instead")
    void getVariablesIDSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesIDSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesIDLabelsSignalError() instead")
    void getVariablesIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchVariablesIDSignalError() instead")
    void patchVariablesIDSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchVariablesIDSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVariablesSignalError() instead")
    void postVariablesSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postVariablesSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVariablesIDLabelsSignalError() instead")
    void postVariablesIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postVariablesIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVariablesIDSignalError() instead")
    void putVariablesIDSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putVariablesIDSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteVariablesIDSignalErrorFull() instead")
    void deleteVariablesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVariablesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVariablesIDLabelsIDSignalErrorFull() instead")
    void deleteVariablesIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVariablesIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesSignalErrorFull() instead")
    void getVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesIDSignalErrorFull() instead")
    void getVariablesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesIDLabelsSignalErrorFull() instead")
    void getVariablesIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchVariablesIDSignalErrorFull() instead")
    void patchVariablesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchVariablesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVariablesSignalErrorFull() instead")
    void postVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVariablesIDLabelsSignalErrorFull() instead")
    void postVariablesIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postVariablesIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVariablesIDSignalErrorFull() instead")
    void putVariablesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVariablesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
