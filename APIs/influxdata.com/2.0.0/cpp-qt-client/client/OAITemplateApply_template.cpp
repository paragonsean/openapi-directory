/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateApply_template.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateApply_template::OAITemplateApply_template(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateApply_template::OAITemplateApply_template() {
    this->initializeModel();
}

OAITemplateApply_template::~OAITemplateApply_template() {}

void OAITemplateApply_template::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAITemplateApply_template::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateApply_template::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAITemplateApply_template::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateApply_template::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_contents.size() > 0) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAITemplateApply_template::getContentType() const {
    return m_content_type;
}
void OAITemplateApply_template::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAITemplateApply_template::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAITemplateApply_template::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList<OAITemplate_inner> OAITemplateApply_template::getContents() const {
    return m_contents;
}
void OAITemplateApply_template::setContents(const QList<OAITemplate_inner> &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAITemplateApply_template::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAITemplateApply_template::is_contents_Valid() const{
    return m_contents_isValid;
}

QList<QString> OAITemplateApply_template::getSources() const {
    return m_sources;
}
void OAITemplateApply_template::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAITemplateApply_template::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAITemplateApply_template::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAITemplateApply_template::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateApply_template::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
