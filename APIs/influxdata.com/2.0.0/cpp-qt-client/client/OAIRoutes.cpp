/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutes::OAIRoutes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutes::OAIRoutes() {
    this->initializeModel();
}

OAIRoutes::~OAIRoutes() {}

void OAIRoutes::initializeModel() {

    m_authorizations_isSet = false;
    m_authorizations_isValid = false;

    m_buckets_isSet = false;
    m_buckets_isValid = false;

    m_dashboards_isSet = false;
    m_dashboards_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_me_isSet = false;
    m_me_isValid = false;

    m_orgs_isSet = false;
    m_orgs_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_setup_isSet = false;
    m_setup_isValid = false;

    m_signin_isSet = false;
    m_signin_isValid = false;

    m_signout_isSet = false;
    m_signout_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;

    m_telegrafs_isSet = false;
    m_telegrafs_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;

    m_write_isSet = false;
    m_write_isValid = false;
}

void OAIRoutes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutes::fromJsonObject(QJsonObject json) {

    m_authorizations_isValid = ::OpenAPI::fromJsonValue(m_authorizations, json[QString("authorizations")]);
    m_authorizations_isSet = !json[QString("authorizations")].isNull() && m_authorizations_isValid;

    m_buckets_isValid = ::OpenAPI::fromJsonValue(m_buckets, json[QString("buckets")]);
    m_buckets_isSet = !json[QString("buckets")].isNull() && m_buckets_isValid;

    m_dashboards_isValid = ::OpenAPI::fromJsonValue(m_dashboards, json[QString("dashboards")]);
    m_dashboards_isSet = !json[QString("dashboards")].isNull() && m_dashboards_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_me_isValid = ::OpenAPI::fromJsonValue(m_me, json[QString("me")]);
    m_me_isSet = !json[QString("me")].isNull() && m_me_isValid;

    m_orgs_isValid = ::OpenAPI::fromJsonValue(m_orgs, json[QString("orgs")]);
    m_orgs_isSet = !json[QString("orgs")].isNull() && m_orgs_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_setup_isValid = ::OpenAPI::fromJsonValue(m_setup, json[QString("setup")]);
    m_setup_isSet = !json[QString("setup")].isNull() && m_setup_isValid;

    m_signin_isValid = ::OpenAPI::fromJsonValue(m_signin, json[QString("signin")]);
    m_signin_isSet = !json[QString("signin")].isNull() && m_signin_isValid;

    m_signout_isValid = ::OpenAPI::fromJsonValue(m_signout, json[QString("signout")]);
    m_signout_isSet = !json[QString("signout")].isNull() && m_signout_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;

    m_telegrafs_isValid = ::OpenAPI::fromJsonValue(m_telegrafs, json[QString("telegrafs")]);
    m_telegrafs_isSet = !json[QString("telegrafs")].isNull() && m_telegrafs_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;

    m_write_isValid = ::OpenAPI::fromJsonValue(m_write, json[QString("write")]);
    m_write_isSet = !json[QString("write")].isNull() && m_write_isValid;
}

QString OAIRoutes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutes::asJsonObject() const {
    QJsonObject obj;
    if (m_authorizations_isSet) {
        obj.insert(QString("authorizations"), ::OpenAPI::toJsonValue(m_authorizations));
    }
    if (m_buckets_isSet) {
        obj.insert(QString("buckets"), ::OpenAPI::toJsonValue(m_buckets));
    }
    if (m_dashboards_isSet) {
        obj.insert(QString("dashboards"), ::OpenAPI::toJsonValue(m_dashboards));
    }
    if (m_external.isSet()) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_flags_isSet) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_me_isSet) {
        obj.insert(QString("me"), ::OpenAPI::toJsonValue(m_me));
    }
    if (m_orgs_isSet) {
        obj.insert(QString("orgs"), ::OpenAPI::toJsonValue(m_orgs));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_setup_isSet) {
        obj.insert(QString("setup"), ::OpenAPI::toJsonValue(m_setup));
    }
    if (m_signin_isSet) {
        obj.insert(QString("signin"), ::OpenAPI::toJsonValue(m_signin));
    }
    if (m_signout_isSet) {
        obj.insert(QString("signout"), ::OpenAPI::toJsonValue(m_signout));
    }
    if (m_sources_isSet) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_system.isSet()) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_tasks_isSet) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    if (m_telegrafs_isSet) {
        obj.insert(QString("telegrafs"), ::OpenAPI::toJsonValue(m_telegrafs));
    }
    if (m_users_isSet) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_variables_isSet) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    if (m_write_isSet) {
        obj.insert(QString("write"), ::OpenAPI::toJsonValue(m_write));
    }
    return obj;
}

QString OAIRoutes::getAuthorizations() const {
    return m_authorizations;
}
void OAIRoutes::setAuthorizations(const QString &authorizations) {
    m_authorizations = authorizations;
    m_authorizations_isSet = true;
}

bool OAIRoutes::is_authorizations_Set() const{
    return m_authorizations_isSet;
}

bool OAIRoutes::is_authorizations_Valid() const{
    return m_authorizations_isValid;
}

QString OAIRoutes::getBuckets() const {
    return m_buckets;
}
void OAIRoutes::setBuckets(const QString &buckets) {
    m_buckets = buckets;
    m_buckets_isSet = true;
}

bool OAIRoutes::is_buckets_Set() const{
    return m_buckets_isSet;
}

bool OAIRoutes::is_buckets_Valid() const{
    return m_buckets_isValid;
}

QString OAIRoutes::getDashboards() const {
    return m_dashboards;
}
void OAIRoutes::setDashboards(const QString &dashboards) {
    m_dashboards = dashboards;
    m_dashboards_isSet = true;
}

bool OAIRoutes::is_dashboards_Set() const{
    return m_dashboards_isSet;
}

bool OAIRoutes::is_dashboards_Valid() const{
    return m_dashboards_isValid;
}

OAIRoutes_external OAIRoutes::getExternal() const {
    return m_external;
}
void OAIRoutes::setExternal(const OAIRoutes_external &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIRoutes::is_external_Set() const{
    return m_external_isSet;
}

bool OAIRoutes::is_external_Valid() const{
    return m_external_isValid;
}

QString OAIRoutes::getFlags() const {
    return m_flags;
}
void OAIRoutes::setFlags(const QString &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIRoutes::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIRoutes::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIRoutes::getMe() const {
    return m_me;
}
void OAIRoutes::setMe(const QString &me) {
    m_me = me;
    m_me_isSet = true;
}

bool OAIRoutes::is_me_Set() const{
    return m_me_isSet;
}

bool OAIRoutes::is_me_Valid() const{
    return m_me_isValid;
}

QString OAIRoutes::getOrgs() const {
    return m_orgs;
}
void OAIRoutes::setOrgs(const QString &orgs) {
    m_orgs = orgs;
    m_orgs_isSet = true;
}

bool OAIRoutes::is_orgs_Set() const{
    return m_orgs_isSet;
}

bool OAIRoutes::is_orgs_Valid() const{
    return m_orgs_isValid;
}

OAIRoutes_query OAIRoutes::getQuery() const {
    return m_query;
}
void OAIRoutes::setQuery(const OAIRoutes_query &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIRoutes::is_query_Set() const{
    return m_query_isSet;
}

bool OAIRoutes::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIRoutes::getSetup() const {
    return m_setup;
}
void OAIRoutes::setSetup(const QString &setup) {
    m_setup = setup;
    m_setup_isSet = true;
}

bool OAIRoutes::is_setup_Set() const{
    return m_setup_isSet;
}

bool OAIRoutes::is_setup_Valid() const{
    return m_setup_isValid;
}

QString OAIRoutes::getSignin() const {
    return m_signin;
}
void OAIRoutes::setSignin(const QString &signin) {
    m_signin = signin;
    m_signin_isSet = true;
}

bool OAIRoutes::is_signin_Set() const{
    return m_signin_isSet;
}

bool OAIRoutes::is_signin_Valid() const{
    return m_signin_isValid;
}

QString OAIRoutes::getSignout() const {
    return m_signout;
}
void OAIRoutes::setSignout(const QString &signout) {
    m_signout = signout;
    m_signout_isSet = true;
}

bool OAIRoutes::is_signout_Set() const{
    return m_signout_isSet;
}

bool OAIRoutes::is_signout_Valid() const{
    return m_signout_isValid;
}

QString OAIRoutes::getSources() const {
    return m_sources;
}
void OAIRoutes::setSources(const QString &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIRoutes::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIRoutes::is_sources_Valid() const{
    return m_sources_isValid;
}

OAIRoutes_system OAIRoutes::getSystem() const {
    return m_system;
}
void OAIRoutes::setSystem(const OAIRoutes_system &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIRoutes::is_system_Set() const{
    return m_system_isSet;
}

bool OAIRoutes::is_system_Valid() const{
    return m_system_isValid;
}

QString OAIRoutes::getTasks() const {
    return m_tasks;
}
void OAIRoutes::setTasks(const QString &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIRoutes::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIRoutes::is_tasks_Valid() const{
    return m_tasks_isValid;
}

QString OAIRoutes::getTelegrafs() const {
    return m_telegrafs;
}
void OAIRoutes::setTelegrafs(const QString &telegrafs) {
    m_telegrafs = telegrafs;
    m_telegrafs_isSet = true;
}

bool OAIRoutes::is_telegrafs_Set() const{
    return m_telegrafs_isSet;
}

bool OAIRoutes::is_telegrafs_Valid() const{
    return m_telegrafs_isValid;
}

QString OAIRoutes::getUsers() const {
    return m_users;
}
void OAIRoutes::setUsers(const QString &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIRoutes::is_users_Set() const{
    return m_users_isSet;
}

bool OAIRoutes::is_users_Valid() const{
    return m_users_isValid;
}

QString OAIRoutes::getVariables() const {
    return m_variables;
}
void OAIRoutes::setVariables(const QString &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIRoutes::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIRoutes::is_variables_Valid() const{
    return m_variables_isValid;
}

QString OAIRoutes::getWrite() const {
    return m_write;
}
void OAIRoutes::setWrite(const QString &write) {
    m_write = write;
    m_write_isSet = true;
}

bool OAIRoutes::is_write_Set() const{
    return m_write_isSet;
}

bool OAIRoutes::is_write_Valid() const{
    return m_write_isValid;
}

bool OAIRoutes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorizations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buckets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orgs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telegrafs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
