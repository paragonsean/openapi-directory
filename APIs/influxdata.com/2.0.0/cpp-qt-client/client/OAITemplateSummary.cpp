/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummary::OAITemplateSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummary::OAITemplateSummary() {
    this->initializeModel();
}

OAITemplateSummary::~OAITemplateSummary() {}

void OAITemplateSummary::initializeModel() {

    m_diff_isSet = false;
    m_diff_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAITemplateSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummary::fromJsonObject(QJsonObject json) {

    m_diff_isValid = ::OpenAPI::fromJsonValue(m_diff, json[QString("diff")]);
    m_diff_isSet = !json[QString("diff")].isNull() && m_diff_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("stackID")]);
    m_stack_id_isSet = !json[QString("stackID")].isNull() && m_stack_id_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAITemplateSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_diff.isSet()) {
        obj.insert(QString("diff"), ::OpenAPI::toJsonValue(m_diff));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("stackID"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

OAITemplateSummary_diff OAITemplateSummary::getDiff() const {
    return m_diff;
}
void OAITemplateSummary::setDiff(const OAITemplateSummary_diff &diff) {
    m_diff = diff;
    m_diff_isSet = true;
}

bool OAITemplateSummary::is_diff_Set() const{
    return m_diff_isSet;
}

bool OAITemplateSummary::is_diff_Valid() const{
    return m_diff_isValid;
}

QList<OAITemplateSummary_errors_inner> OAITemplateSummary::getErrors() const {
    return m_errors;
}
void OAITemplateSummary::setErrors(const QList<OAITemplateSummary_errors_inner> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAITemplateSummary::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAITemplateSummary::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<QString> OAITemplateSummary::getSources() const {
    return m_sources;
}
void OAITemplateSummary::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAITemplateSummary::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAITemplateSummary::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAITemplateSummary::getStackId() const {
    return m_stack_id;
}
void OAITemplateSummary::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAITemplateSummary::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAITemplateSummary::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

OAITemplateSummary_summary OAITemplateSummary::getSummary() const {
    return m_summary;
}
void OAITemplateSummary::setSummary(const OAITemplateSummary_summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAITemplateSummary::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAITemplateSummary::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAITemplateSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
