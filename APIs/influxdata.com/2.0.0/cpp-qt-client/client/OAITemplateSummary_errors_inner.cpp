/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummary_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummary_errors_inner::OAITemplateSummary_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummary_errors_inner::OAITemplateSummary_errors_inner() {
    this->initializeModel();
}

OAITemplateSummary_errors_inner::~OAITemplateSummary_errors_inner() {}

void OAITemplateSummary_errors_inner::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_indexes_isSet = false;
    m_indexes_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAITemplateSummary_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummary_errors_inner::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_indexes_isValid = ::OpenAPI::fromJsonValue(m_indexes, json[QString("indexes")]);
    m_indexes_isSet = !json[QString("indexes")].isNull() && m_indexes_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAITemplateSummary_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummary_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_indexes.size() > 0) {
        obj.insert(QString("indexes"), ::OpenAPI::toJsonValue(m_indexes));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QList<QString> OAITemplateSummary_errors_inner::getFields() const {
    return m_fields;
}
void OAITemplateSummary_errors_inner::setFields(const QList<QString> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAITemplateSummary_errors_inner::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAITemplateSummary_errors_inner::is_fields_Valid() const{
    return m_fields_isValid;
}

QList<qint32> OAITemplateSummary_errors_inner::getIndexes() const {
    return m_indexes;
}
void OAITemplateSummary_errors_inner::setIndexes(const QList<qint32> &indexes) {
    m_indexes = indexes;
    m_indexes_isSet = true;
}

bool OAITemplateSummary_errors_inner::is_indexes_Set() const{
    return m_indexes_isSet;
}

bool OAITemplateSummary_errors_inner::is_indexes_Valid() const{
    return m_indexes_isValid;
}

OAITemplateKind OAITemplateSummary_errors_inner::getKind() const {
    return m_kind;
}
void OAITemplateSummary_errors_inner::setKind(const OAITemplateKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITemplateSummary_errors_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITemplateSummary_errors_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAITemplateSummary_errors_inner::getReason() const {
    return m_reason;
}
void OAITemplateSummary_errors_inner::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAITemplateSummary_errors_inner::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAITemplateSummary_errors_inner::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAITemplateSummary_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummary_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
