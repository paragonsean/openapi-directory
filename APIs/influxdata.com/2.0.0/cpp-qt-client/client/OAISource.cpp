/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_default_rp_isSet = false;
    m_default_rp_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_insecure_skip_verify_isSet = false;
    m_insecure_skip_verify_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_meta_url_isSet = false;
    m_meta_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_shared_secret_isSet = false;
    m_shared_secret_isValid = false;

    m_telegraf_isSet = false;
    m_telegraf_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_default_rp_isValid = ::OpenAPI::fromJsonValue(m_default_rp, json[QString("defaultRP")]);
    m_default_rp_isSet = !json[QString("defaultRP")].isNull() && m_default_rp_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_insecure_skip_verify_isValid = ::OpenAPI::fromJsonValue(m_insecure_skip_verify, json[QString("insecureSkipVerify")]);
    m_insecure_skip_verify_isSet = !json[QString("insecureSkipVerify")].isNull() && m_insecure_skip_verify_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_meta_url_isValid = ::OpenAPI::fromJsonValue(m_meta_url, json[QString("metaUrl")]);
    m_meta_url_isSet = !json[QString("metaUrl")].isNull() && m_meta_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_shared_secret_isValid = ::OpenAPI::fromJsonValue(m_shared_secret, json[QString("sharedSecret")]);
    m_shared_secret_isSet = !json[QString("sharedSecret")].isNull() && m_shared_secret_isValid;

    m_telegraf_isValid = ::OpenAPI::fromJsonValue(m_telegraf, json[QString("telegraf")]);
    m_telegraf_isSet = !json[QString("telegraf")].isNull() && m_telegraf_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_default_rp_isSet) {
        obj.insert(QString("defaultRP"), ::OpenAPI::toJsonValue(m_default_rp));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_insecure_skip_verify_isSet) {
        obj.insert(QString("insecureSkipVerify"), ::OpenAPI::toJsonValue(m_insecure_skip_verify));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_meta_url_isSet) {
        obj.insert(QString("metaUrl"), ::OpenAPI::toJsonValue(m_meta_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_shared_secret_isSet) {
        obj.insert(QString("sharedSecret"), ::OpenAPI::toJsonValue(m_shared_secret));
    }
    if (m_telegraf_isSet) {
        obj.insert(QString("telegraf"), ::OpenAPI::toJsonValue(m_telegraf));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAISource::isRDefault() const {
    return m_r_default;
}
void OAISource::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAISource::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAISource::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAISource::getDefaultRp() const {
    return m_default_rp;
}
void OAISource::setDefaultRp(const QString &default_rp) {
    m_default_rp = default_rp;
    m_default_rp_isSet = true;
}

bool OAISource::is_default_rp_Set() const{
    return m_default_rp_isSet;
}

bool OAISource::is_default_rp_Valid() const{
    return m_default_rp_isValid;
}

QString OAISource::getId() const {
    return m_id;
}
void OAISource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISource::is_id_Set() const{
    return m_id_isSet;
}

bool OAISource::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISource::isInsecureSkipVerify() const {
    return m_insecure_skip_verify;
}
void OAISource::setInsecureSkipVerify(const bool &insecure_skip_verify) {
    m_insecure_skip_verify = insecure_skip_verify;
    m_insecure_skip_verify_isSet = true;
}

bool OAISource::is_insecure_skip_verify_Set() const{
    return m_insecure_skip_verify_isSet;
}

bool OAISource::is_insecure_skip_verify_Valid() const{
    return m_insecure_skip_verify_isValid;
}

QList<QString> OAISource::getLanguages() const {
    return m_languages;
}
void OAISource::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAISource::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAISource::is_languages_Valid() const{
    return m_languages_isValid;
}

OAISource_links OAISource::getLinks() const {
    return m_links;
}
void OAISource::setLinks(const OAISource_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAISource::is_links_Set() const{
    return m_links_isSet;
}

bool OAISource::is_links_Valid() const{
    return m_links_isValid;
}

QString OAISource::getMetaUrl() const {
    return m_meta_url;
}
void OAISource::setMetaUrl(const QString &meta_url) {
    m_meta_url = meta_url;
    m_meta_url_isSet = true;
}

bool OAISource::is_meta_url_Set() const{
    return m_meta_url_isSet;
}

bool OAISource::is_meta_url_Valid() const{
    return m_meta_url_isValid;
}

QString OAISource::getName() const {
    return m_name;
}
void OAISource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISource::is_name_Set() const{
    return m_name_isSet;
}

bool OAISource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISource::getOrgId() const {
    return m_org_id;
}
void OAISource::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAISource::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAISource::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAISource::getPassword() const {
    return m_password;
}
void OAISource::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAISource::is_password_Set() const{
    return m_password_isSet;
}

bool OAISource::is_password_Valid() const{
    return m_password_isValid;
}

QString OAISource::getSharedSecret() const {
    return m_shared_secret;
}
void OAISource::setSharedSecret(const QString &shared_secret) {
    m_shared_secret = shared_secret;
    m_shared_secret_isSet = true;
}

bool OAISource::is_shared_secret_Set() const{
    return m_shared_secret_isSet;
}

bool OAISource::is_shared_secret_Valid() const{
    return m_shared_secret_isValid;
}

QString OAISource::getTelegraf() const {
    return m_telegraf;
}
void OAISource::setTelegraf(const QString &telegraf) {
    m_telegraf = telegraf;
    m_telegraf_isSet = true;
}

bool OAISource::is_telegraf_Set() const{
    return m_telegraf_isSet;
}

bool OAISource::is_telegraf_Valid() const{
    return m_telegraf_isValid;
}

QString OAISource::getToken() const {
    return m_token;
}
void OAISource::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAISource::is_token_Set() const{
    return m_token_isSet;
}

bool OAISource::is_token_Valid() const{
    return m_token_isValid;
}

QString OAISource::getType() const {
    return m_type;
}
void OAISource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISource::is_type_Set() const{
    return m_type_isSet;
}

bool OAISource::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISource::getUrl() const {
    return m_url;
}
void OAISource::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISource::is_url_Set() const{
    return m_url_isSet;
}

bool OAISource::is_url_Valid() const{
    return m_url_isValid;
}

QString OAISource::getUsername() const {
    return m_username;
}
void OAISource::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISource::is_username_Set() const{
    return m_username_isSet;
}

bool OAISource::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_rp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insecure_skip_verify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telegraf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
