/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoViewProperties::OAIGeoViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoViewProperties::OAIGeoViewProperties() {
    this->initializeModel();
}

OAIGeoViewProperties::~OAIGeoViewProperties() {}

void OAIGeoViewProperties::initializeModel() {

    m_allow_pan_and_zoom_isSet = false;
    m_allow_pan_and_zoom_isValid = false;

    m_center_isSet = false;
    m_center_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_detect_coordinate_fields_isSet = false;
    m_detect_coordinate_fields_isValid = false;

    m_layers_isSet = false;
    m_layers_isValid = false;

    m_map_style_isSet = false;
    m_map_style_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_show_note_when_empty_isSet = false;
    m_show_note_when_empty_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;
}

void OAIGeoViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoViewProperties::fromJsonObject(QJsonObject json) {

    m_allow_pan_and_zoom_isValid = ::OpenAPI::fromJsonValue(m_allow_pan_and_zoom, json[QString("allowPanAndZoom")]);
    m_allow_pan_and_zoom_isSet = !json[QString("allowPanAndZoom")].isNull() && m_allow_pan_and_zoom_isValid;

    m_center_isValid = ::OpenAPI::fromJsonValue(m_center, json[QString("center")]);
    m_center_isSet = !json[QString("center")].isNull() && m_center_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_detect_coordinate_fields_isValid = ::OpenAPI::fromJsonValue(m_detect_coordinate_fields, json[QString("detectCoordinateFields")]);
    m_detect_coordinate_fields_isSet = !json[QString("detectCoordinateFields")].isNull() && m_detect_coordinate_fields_isValid;

    m_layers_isValid = ::OpenAPI::fromJsonValue(m_layers, json[QString("layers")]);
    m_layers_isSet = !json[QString("layers")].isNull() && m_layers_isValid;

    m_map_style_isValid = ::OpenAPI::fromJsonValue(m_map_style, json[QString("mapStyle")]);
    m_map_style_isSet = !json[QString("mapStyle")].isNull() && m_map_style_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_show_note_when_empty_isValid = ::OpenAPI::fromJsonValue(m_show_note_when_empty, json[QString("showNoteWhenEmpty")]);
    m_show_note_when_empty_isSet = !json[QString("showNoteWhenEmpty")].isNull() && m_show_note_when_empty_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_zoom_isValid = ::OpenAPI::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;
}

QString OAIGeoViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_pan_and_zoom_isSet) {
        obj.insert(QString("allowPanAndZoom"), ::OpenAPI::toJsonValue(m_allow_pan_and_zoom));
    }
    if (m_center.isSet()) {
        obj.insert(QString("center"), ::OpenAPI::toJsonValue(m_center));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_detect_coordinate_fields_isSet) {
        obj.insert(QString("detectCoordinateFields"), ::OpenAPI::toJsonValue(m_detect_coordinate_fields));
    }
    if (m_layers.size() > 0) {
        obj.insert(QString("layers"), ::OpenAPI::toJsonValue(m_layers));
    }
    if (m_map_style_isSet) {
        obj.insert(QString("mapStyle"), ::OpenAPI::toJsonValue(m_map_style));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_show_note_when_empty_isSet) {
        obj.insert(QString("showNoteWhenEmpty"), ::OpenAPI::toJsonValue(m_show_note_when_empty));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OpenAPI::toJsonValue(m_zoom));
    }
    return obj;
}

bool OAIGeoViewProperties::isAllowPanAndZoom() const {
    return m_allow_pan_and_zoom;
}
void OAIGeoViewProperties::setAllowPanAndZoom(const bool &allow_pan_and_zoom) {
    m_allow_pan_and_zoom = allow_pan_and_zoom;
    m_allow_pan_and_zoom_isSet = true;
}

bool OAIGeoViewProperties::is_allow_pan_and_zoom_Set() const{
    return m_allow_pan_and_zoom_isSet;
}

bool OAIGeoViewProperties::is_allow_pan_and_zoom_Valid() const{
    return m_allow_pan_and_zoom_isValid;
}

OAIGeoViewProperties_center OAIGeoViewProperties::getCenter() const {
    return m_center;
}
void OAIGeoViewProperties::setCenter(const OAIGeoViewProperties_center &center) {
    m_center = center;
    m_center_isSet = true;
}

bool OAIGeoViewProperties::is_center_Set() const{
    return m_center_isSet;
}

bool OAIGeoViewProperties::is_center_Valid() const{
    return m_center_isValid;
}

QList<OAIDashboardColor> OAIGeoViewProperties::getColors() const {
    return m_colors;
}
void OAIGeoViewProperties::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIGeoViewProperties::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIGeoViewProperties::is_colors_Valid() const{
    return m_colors_isValid;
}

bool OAIGeoViewProperties::isDetectCoordinateFields() const {
    return m_detect_coordinate_fields;
}
void OAIGeoViewProperties::setDetectCoordinateFields(const bool &detect_coordinate_fields) {
    m_detect_coordinate_fields = detect_coordinate_fields;
    m_detect_coordinate_fields_isSet = true;
}

bool OAIGeoViewProperties::is_detect_coordinate_fields_Set() const{
    return m_detect_coordinate_fields_isSet;
}

bool OAIGeoViewProperties::is_detect_coordinate_fields_Valid() const{
    return m_detect_coordinate_fields_isValid;
}

QList<OAIGeoViewLayer> OAIGeoViewProperties::getLayers() const {
    return m_layers;
}
void OAIGeoViewProperties::setLayers(const QList<OAIGeoViewLayer> &layers) {
    m_layers = layers;
    m_layers_isSet = true;
}

bool OAIGeoViewProperties::is_layers_Set() const{
    return m_layers_isSet;
}

bool OAIGeoViewProperties::is_layers_Valid() const{
    return m_layers_isValid;
}

QString OAIGeoViewProperties::getMapStyle() const {
    return m_map_style;
}
void OAIGeoViewProperties::setMapStyle(const QString &map_style) {
    m_map_style = map_style;
    m_map_style_isSet = true;
}

bool OAIGeoViewProperties::is_map_style_Set() const{
    return m_map_style_isSet;
}

bool OAIGeoViewProperties::is_map_style_Valid() const{
    return m_map_style_isValid;
}

QString OAIGeoViewProperties::getNote() const {
    return m_note;
}
void OAIGeoViewProperties::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIGeoViewProperties::is_note_Set() const{
    return m_note_isSet;
}

bool OAIGeoViewProperties::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIDashboardQuery> OAIGeoViewProperties::getQueries() const {
    return m_queries;
}
void OAIGeoViewProperties::setQueries(const QList<OAIDashboardQuery> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIGeoViewProperties::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIGeoViewProperties::is_queries_Valid() const{
    return m_queries_isValid;
}

QString OAIGeoViewProperties::getShape() const {
    return m_shape;
}
void OAIGeoViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIGeoViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIGeoViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

bool OAIGeoViewProperties::isShowNoteWhenEmpty() const {
    return m_show_note_when_empty;
}
void OAIGeoViewProperties::setShowNoteWhenEmpty(const bool &show_note_when_empty) {
    m_show_note_when_empty = show_note_when_empty;
    m_show_note_when_empty_isSet = true;
}

bool OAIGeoViewProperties::is_show_note_when_empty_Set() const{
    return m_show_note_when_empty_isSet;
}

bool OAIGeoViewProperties::is_show_note_when_empty_Valid() const{
    return m_show_note_when_empty_isValid;
}

QString OAIGeoViewProperties::getType() const {
    return m_type;
}
void OAIGeoViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGeoViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGeoViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

double OAIGeoViewProperties::getZoom() const {
    return m_zoom;
}
void OAIGeoViewProperties::setZoom(const double &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OAIGeoViewProperties::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OAIGeoViewProperties::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OAIGeoViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_pan_and_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_center.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_coordinate_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_note_when_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_pan_and_zoom_isValid && m_center_isValid && m_detect_coordinate_fields_isValid && m_layers_isValid && m_note_isValid && m_queries_isValid && m_shape_isValid && m_show_note_when_empty_isValid && m_type_isValid && m_zoom_isValid && true;
}

} // namespace OpenAPI
