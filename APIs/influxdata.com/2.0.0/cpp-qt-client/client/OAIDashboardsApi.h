/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDashboardsApi_H
#define OAI_OAIDashboardsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddResourceMemberRequestBody.h"
#include "OAICell.h"
#include "OAICellUpdate.h"
#include "OAICreateCell.h"
#include "OAICreateDashboardRequest.h"
#include "OAIDashboard.h"
#include "OAIDashboards.h"
#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAIPatchDashboardRequest.h"
#include "OAIPostDashboards_201_response.h"
#include "OAIResourceMember.h"
#include "OAIResourceMembers.h"
#include "OAIResourceOwner.h"
#include "OAIResourceOwners.h"
#include "OAIView.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDashboardsApi : public QObject {
    Q_OBJECT

public:
    OAIDashboardsApi(const int timeOut = 0);
    ~OAIDashboardsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDashboardsID(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  cell_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDashboardsIDCellsID(const QString &dashboard_id, const QString &cell_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDashboardsIDLabelsID(const QString &dashboard_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDashboardsIDMembersID(const QString &user_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteDashboardsIDOwnersID(const QString &user_id, const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  descending bool [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  org_id QString [optional]
    * @param[in]  org QString [optional]
    */
    virtual void getDashboards(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &descending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  include QString [optional]
    */
    virtual void getDashboardsID(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  cell_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getDashboardsIDCellsIDView(const QString &dashboard_id, const QString &cell_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getDashboardsIDLabels(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getDashboardsIDMembers(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getDashboardsIDOwners(const QString &dashboard_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_patch_dashboard_request OAIPatchDashboardRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchDashboardsID(const QString &dashboard_id, const OAIPatchDashboardRequest &oai_patch_dashboard_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  cell_id QString [required]
    * @param[in]  oai_view OAIView [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchDashboardsIDCellsIDView(const QString &dashboard_id, const QString &cell_id, const OAIView &oai_view, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  cell_id QString [required]
    * @param[in]  oai_cell_update OAICellUpdate [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchDashboardsIDCellsID(const QString &dashboard_id, const QString &cell_id, const OAICellUpdate &oai_cell_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_dashboard_request OAICreateDashboardRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDashboards(const OAICreateDashboardRequest &oai_create_dashboard_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_create_cell OAICreateCell [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDashboardsIDCells(const QString &dashboard_id, const OAICreateCell &oai_create_cell, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDashboardsIDLabels(const QString &dashboard_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDashboardsIDMembers(const QString &dashboard_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postDashboardsIDOwners(const QString &dashboard_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dashboard_id QString [required]
    * @param[in]  oai_cell QList<OAICell> [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putDashboardsIDCells(const QString &dashboard_id, const QList<OAICell> &oai_cell, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteDashboardsIDCallback(OAIHttpRequestWorker *worker);
    void deleteDashboardsIDCellsIDCallback(OAIHttpRequestWorker *worker);
    void deleteDashboardsIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void deleteDashboardsIDMembersIDCallback(OAIHttpRequestWorker *worker);
    void deleteDashboardsIDOwnersIDCallback(OAIHttpRequestWorker *worker);
    void getDashboardsCallback(OAIHttpRequestWorker *worker);
    void getDashboardsIDCallback(OAIHttpRequestWorker *worker);
    void getDashboardsIDCellsIDViewCallback(OAIHttpRequestWorker *worker);
    void getDashboardsIDLabelsCallback(OAIHttpRequestWorker *worker);
    void getDashboardsIDMembersCallback(OAIHttpRequestWorker *worker);
    void getDashboardsIDOwnersCallback(OAIHttpRequestWorker *worker);
    void patchDashboardsIDCallback(OAIHttpRequestWorker *worker);
    void patchDashboardsIDCellsIDViewCallback(OAIHttpRequestWorker *worker);
    void patchDashboardsIDCellsIDCallback(OAIHttpRequestWorker *worker);
    void postDashboardsCallback(OAIHttpRequestWorker *worker);
    void postDashboardsIDCellsCallback(OAIHttpRequestWorker *worker);
    void postDashboardsIDLabelsCallback(OAIHttpRequestWorker *worker);
    void postDashboardsIDMembersCallback(OAIHttpRequestWorker *worker);
    void postDashboardsIDOwnersCallback(OAIHttpRequestWorker *worker);
    void putDashboardsIDCellsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteDashboardsIDSignal();
    void deleteDashboardsIDCellsIDSignal();
    void deleteDashboardsIDLabelsIDSignal();
    void deleteDashboardsIDMembersIDSignal();
    void deleteDashboardsIDOwnersIDSignal();
    void getDashboardsSignal(OAIDashboards summary);
    void getDashboardsIDSignal(OAIPostDashboards_201_response summary);
    void getDashboardsIDCellsIDViewSignal(OAIView summary);
    void getDashboardsIDLabelsSignal(OAILabelsResponse summary);
    void getDashboardsIDMembersSignal(OAIResourceMembers summary);
    void getDashboardsIDOwnersSignal(OAIResourceOwners summary);
    void patchDashboardsIDSignal(OAIDashboard summary);
    void patchDashboardsIDCellsIDViewSignal(OAIView summary);
    void patchDashboardsIDCellsIDSignal(OAICell summary);
    void postDashboardsSignal(OAIPostDashboards_201_response summary);
    void postDashboardsIDCellsSignal(OAICell summary);
    void postDashboardsIDLabelsSignal(OAILabelResponse summary);
    void postDashboardsIDMembersSignal(OAIResourceMember summary);
    void postDashboardsIDOwnersSignal(OAIResourceOwner summary);
    void putDashboardsIDCellsSignal(OAIDashboard summary);


    void deleteDashboardsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteDashboardsIDCellsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteDashboardsIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteDashboardsIDMembersIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteDashboardsIDOwnersIDSignalFull(OAIHttpRequestWorker *worker);
    void getDashboardsSignalFull(OAIHttpRequestWorker *worker, OAIDashboards summary);
    void getDashboardsIDSignalFull(OAIHttpRequestWorker *worker, OAIPostDashboards_201_response summary);
    void getDashboardsIDCellsIDViewSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void getDashboardsIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void getDashboardsIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMembers summary);
    void getDashboardsIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwners summary);
    void patchDashboardsIDSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void patchDashboardsIDCellsIDViewSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void patchDashboardsIDCellsIDSignalFull(OAIHttpRequestWorker *worker, OAICell summary);
    void postDashboardsSignalFull(OAIHttpRequestWorker *worker, OAIPostDashboards_201_response summary);
    void postDashboardsIDCellsSignalFull(OAIHttpRequestWorker *worker, OAICell summary);
    void postDashboardsIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void postDashboardsIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMember summary);
    void postDashboardsIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwner summary);
    void putDashboardsIDCellsSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);

    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDSignalError() instead")
    void deleteDashboardsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDCellsIDSignalError() instead")
    void deleteDashboardsIDCellsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDCellsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDLabelsIDSignalError() instead")
    void deleteDashboardsIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDMembersIDSignalError() instead")
    void deleteDashboardsIDMembersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDMembersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDOwnersIDSignalError() instead")
    void deleteDashboardsIDOwnersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDOwnersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsSignalError() instead")
    void getDashboardsSignalE(OAIDashboards summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsSignalError(OAIDashboards summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDSignalError() instead")
    void getDashboardsIDSignalE(OAIPostDashboards_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDSignalError(OAIPostDashboards_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDCellsIDViewSignalError() instead")
    void getDashboardsIDCellsIDViewSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDCellsIDViewSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDLabelsSignalError() instead")
    void getDashboardsIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDMembersSignalError() instead")
    void getDashboardsIDMembersSignalE(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDMembersSignalError(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDOwnersSignalError() instead")
    void getDashboardsIDOwnersSignalE(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDOwnersSignalError(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDSignalError() instead")
    void patchDashboardsIDSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDCellsIDViewSignalError() instead")
    void patchDashboardsIDCellsIDViewSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDCellsIDViewSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDCellsIDSignalError() instead")
    void patchDashboardsIDCellsIDSignalE(OAICell summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDCellsIDSignalError(OAICell summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsSignalError() instead")
    void postDashboardsSignalE(OAIPostDashboards_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsSignalError(OAIPostDashboards_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDCellsSignalError() instead")
    void postDashboardsIDCellsSignalE(OAICell summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDCellsSignalError(OAICell summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDLabelsSignalError() instead")
    void postDashboardsIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDMembersSignalError() instead")
    void postDashboardsIDMembersSignalE(OAIResourceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDMembersSignalError(OAIResourceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDOwnersSignalError() instead")
    void postDashboardsIDOwnersSignalE(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDOwnersSignalError(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDashboardsIDCellsSignalError() instead")
    void putDashboardsIDCellsSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putDashboardsIDCellsSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDSignalErrorFull() instead")
    void deleteDashboardsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDCellsIDSignalErrorFull() instead")
    void deleteDashboardsIDCellsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDCellsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDLabelsIDSignalErrorFull() instead")
    void deleteDashboardsIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDMembersIDSignalErrorFull() instead")
    void deleteDashboardsIDMembersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDMembersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDashboardsIDOwnersIDSignalErrorFull() instead")
    void deleteDashboardsIDOwnersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDashboardsIDOwnersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsSignalErrorFull() instead")
    void getDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDSignalErrorFull() instead")
    void getDashboardsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDCellsIDViewSignalErrorFull() instead")
    void getDashboardsIDCellsIDViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDCellsIDViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDLabelsSignalErrorFull() instead")
    void getDashboardsIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDMembersSignalErrorFull() instead")
    void getDashboardsIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardsIDOwnersSignalErrorFull() instead")
    void getDashboardsIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardsIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDSignalErrorFull() instead")
    void patchDashboardsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDCellsIDViewSignalErrorFull() instead")
    void patchDashboardsIDCellsIDViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDCellsIDViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDashboardsIDCellsIDSignalErrorFull() instead")
    void patchDashboardsIDCellsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDashboardsIDCellsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsSignalErrorFull() instead")
    void postDashboardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDCellsSignalErrorFull() instead")
    void postDashboardsIDCellsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDCellsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDLabelsSignalErrorFull() instead")
    void postDashboardsIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDMembersSignalErrorFull() instead")
    void postDashboardsIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDashboardsIDOwnersSignalErrorFull() instead")
    void postDashboardsIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDashboardsIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDashboardsIDCellsSignalErrorFull() instead")
    void putDashboardsIDCellsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putDashboardsIDCellsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
