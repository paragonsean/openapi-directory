/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationsApi_H
#define OAI_OAIOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddResourceMemberRequestBody.h"
#include "OAIError.h"
#include "OAIOrganization.h"
#include "OAIOrganizations.h"
#include "OAIPatchOrganizationRequest.h"
#include "OAIPostOrganizationRequest.h"
#include "OAIResourceMember.h"
#include "OAIResourceMembers.h"
#include "OAIResourceOwner.h"
#include "OAIResourceOwners.h"
#include "OAISecretKeys.h"
#include "OAISecretKeysResponse.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationsApi(const int timeOut = 0);
    ~OAIOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteOrgsID(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteOrgsIDMembersID(const QString &user_id, const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteOrgsIDOwnersID(const QString &user_id, const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  descending bool [optional]
    * @param[in]  org QString [optional]
    * @param[in]  org_id QString [optional]
    * @param[in]  user_id QString [optional]
    */
    virtual void getOrgs(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &descending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getOrgsID(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getOrgsIDMembers(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getOrgsIDOwners(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getOrgsIDSecrets(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  oai_patch_organization_request OAIPatchOrganizationRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchOrgsID(const QString &org_id, const OAIPatchOrganizationRequest &oai_patch_organization_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  request_body QMap<QString, QString> [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchOrgsIDSecrets(const QString &org_id, const QMap<QString, QString> &request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_post_organization_request OAIPostOrganizationRequest [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postOrgs(const OAIPostOrganizationRequest &oai_post_organization_request, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postOrgsIDMembers(const QString &org_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  oai_add_resource_member_request_body OAIAddResourceMemberRequestBody [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postOrgsIDOwners(const QString &org_id, const OAIAddResourceMemberRequestBody &oai_add_resource_member_request_body, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  oai_secret_keys OAISecretKeys [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postOrgsIDSecrets(const QString &org_id, const OAISecretKeys &oai_secret_keys, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteOrgsIDCallback(OAIHttpRequestWorker *worker);
    void deleteOrgsIDMembersIDCallback(OAIHttpRequestWorker *worker);
    void deleteOrgsIDOwnersIDCallback(OAIHttpRequestWorker *worker);
    void getOrgsCallback(OAIHttpRequestWorker *worker);
    void getOrgsIDCallback(OAIHttpRequestWorker *worker);
    void getOrgsIDMembersCallback(OAIHttpRequestWorker *worker);
    void getOrgsIDOwnersCallback(OAIHttpRequestWorker *worker);
    void getOrgsIDSecretsCallback(OAIHttpRequestWorker *worker);
    void patchOrgsIDCallback(OAIHttpRequestWorker *worker);
    void patchOrgsIDSecretsCallback(OAIHttpRequestWorker *worker);
    void postOrgsCallback(OAIHttpRequestWorker *worker);
    void postOrgsIDMembersCallback(OAIHttpRequestWorker *worker);
    void postOrgsIDOwnersCallback(OAIHttpRequestWorker *worker);
    void postOrgsIDSecretsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteOrgsIDSignal();
    void deleteOrgsIDMembersIDSignal();
    void deleteOrgsIDOwnersIDSignal();
    void getOrgsSignal(OAIOrganizations summary);
    void getOrgsIDSignal(OAIOrganization summary);
    void getOrgsIDMembersSignal(OAIResourceMembers summary);
    void getOrgsIDOwnersSignal(OAIResourceOwners summary);
    void getOrgsIDSecretsSignal(OAISecretKeysResponse summary);
    void patchOrgsIDSignal(OAIOrganization summary);
    void patchOrgsIDSecretsSignal();
    void postOrgsSignal(OAIOrganization summary);
    void postOrgsIDMembersSignal(OAIResourceMember summary);
    void postOrgsIDOwnersSignal(OAIResourceOwner summary);
    void postOrgsIDSecretsSignal();


    void deleteOrgsIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrgsIDMembersIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrgsIDOwnersIDSignalFull(OAIHttpRequestWorker *worker);
    void getOrgsSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations summary);
    void getOrgsIDSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void getOrgsIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMembers summary);
    void getOrgsIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwners summary);
    void getOrgsIDSecretsSignalFull(OAIHttpRequestWorker *worker, OAISecretKeysResponse summary);
    void patchOrgsIDSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void patchOrgsIDSecretsSignalFull(OAIHttpRequestWorker *worker);
    void postOrgsSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void postOrgsIDMembersSignalFull(OAIHttpRequestWorker *worker, OAIResourceMember summary);
    void postOrgsIDOwnersSignalFull(OAIHttpRequestWorker *worker, OAIResourceOwner summary);
    void postOrgsIDSecretsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteOrgsIDSignalError() instead")
    void deleteOrgsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrgsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrgsIDMembersIDSignalError() instead")
    void deleteOrgsIDMembersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrgsIDMembersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrgsIDOwnersIDSignalError() instead")
    void deleteOrgsIDOwnersIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrgsIDOwnersIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsSignalError() instead")
    void getOrgsSignalE(OAIOrganizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsSignalError(OAIOrganizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsIDSignalError() instead")
    void getOrgsIDSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsIDSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsIDMembersSignalError() instead")
    void getOrgsIDMembersSignalE(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsIDMembersSignalError(OAIResourceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsIDOwnersSignalError() instead")
    void getOrgsIDOwnersSignalE(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsIDOwnersSignalError(OAIResourceOwners summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsIDSecretsSignalError() instead")
    void getOrgsIDSecretsSignalE(OAISecretKeysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsIDSecretsSignalError(OAISecretKeysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchOrgsIDSignalError() instead")
    void patchOrgsIDSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchOrgsIDSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchOrgsIDSecretsSignalError() instead")
    void patchOrgsIDSecretsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchOrgsIDSecretsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrgsSignalError() instead")
    void postOrgsSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrgsSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrgsIDMembersSignalError() instead")
    void postOrgsIDMembersSignalE(OAIResourceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrgsIDMembersSignalError(OAIResourceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrgsIDOwnersSignalError() instead")
    void postOrgsIDOwnersSignalE(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrgsIDOwnersSignalError(OAIResourceOwner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrgsIDSecretsSignalError() instead")
    void postOrgsIDSecretsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrgsIDSecretsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteOrgsIDSignalErrorFull() instead")
    void deleteOrgsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrgsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrgsIDMembersIDSignalErrorFull() instead")
    void deleteOrgsIDMembersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrgsIDMembersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrgsIDOwnersIDSignalErrorFull() instead")
    void deleteOrgsIDOwnersIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrgsIDOwnersIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsSignalErrorFull() instead")
    void getOrgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsIDSignalErrorFull() instead")
    void getOrgsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsIDMembersSignalErrorFull() instead")
    void getOrgsIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsIDOwnersSignalErrorFull() instead")
    void getOrgsIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrgsIDSecretsSignalErrorFull() instead")
    void getOrgsIDSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrgsIDSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchOrgsIDSignalErrorFull() instead")
    void patchOrgsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchOrgsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchOrgsIDSecretsSignalErrorFull() instead")
    void patchOrgsIDSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchOrgsIDSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrgsSignalErrorFull() instead")
    void postOrgsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrgsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrgsIDMembersSignalErrorFull() instead")
    void postOrgsIDMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrgsIDMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrgsIDOwnersSignalErrorFull() instead")
    void postOrgsIDOwnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrgsIDOwnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrgsIDSecretsSignalErrorFull() instead")
    void postOrgsIDSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrgsIDSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
