/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberAssignment::OAIMemberAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberAssignment::OAIMemberAssignment() {
    this->initializeModel();
}

OAIMemberAssignment::~OAIMemberAssignment() {}

void OAIMemberAssignment::initializeModel() {

    m_init_isSet = false;
    m_init_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMemberAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberAssignment::fromJsonObject(QJsonObject json) {

    m_init_isValid = ::OpenAPI::fromJsonValue(m_init, json[QString("init")]);
    m_init_isSet = !json[QString("init")].isNull() && m_init_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMemberAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_init.isSet()) {
        obj.insert(QString("init"), ::OpenAPI::toJsonValue(m_init));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIExpression OAIMemberAssignment::getInit() const {
    return m_init;
}
void OAIMemberAssignment::setInit(const OAIExpression &init) {
    m_init = init;
    m_init_isSet = true;
}

bool OAIMemberAssignment::is_init_Set() const{
    return m_init_isSet;
}

bool OAIMemberAssignment::is_init_Valid() const{
    return m_init_isValid;
}

OAIMemberExpression OAIMemberAssignment::getMember() const {
    return m_member;
}
void OAIMemberAssignment::setMember(const OAIMemberExpression &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIMemberAssignment::is_member_Set() const{
    return m_member_isSet;
}

bool OAIMemberAssignment::is_member_Valid() const{
    return m_member_isValid;
}

QString OAIMemberAssignment::getType() const {
    return m_type;
}
void OAIMemberAssignment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMemberAssignment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMemberAssignment::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMemberAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_init.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
