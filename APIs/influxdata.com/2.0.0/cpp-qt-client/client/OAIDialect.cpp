/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDialect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDialect::OAIDialect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDialect::OAIDialect() {
    this->initializeModel();
}

OAIDialect::~OAIDialect() {}

void OAIDialect::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_comment_prefix_isSet = false;
    m_comment_prefix_isValid = false;

    m_date_time_format_isSet = false;
    m_date_time_format_isValid = false;

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;
}

void OAIDialect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDialect::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_comment_prefix_isValid = ::OpenAPI::fromJsonValue(m_comment_prefix, json[QString("commentPrefix")]);
    m_comment_prefix_isSet = !json[QString("commentPrefix")].isNull() && m_comment_prefix_isValid;

    m_date_time_format_isValid = ::OpenAPI::fromJsonValue(m_date_time_format, json[QString("dateTimeFormat")]);
    m_date_time_format_isSet = !json[QString("dateTimeFormat")].isNull() && m_date_time_format_isValid;

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("delimiter")]);
    m_delimiter_isSet = !json[QString("delimiter")].isNull() && m_delimiter_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;
}

QString OAIDialect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDialect::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_comment_prefix_isSet) {
        obj.insert(QString("commentPrefix"), ::OpenAPI::toJsonValue(m_comment_prefix));
    }
    if (m_date_time_format_isSet) {
        obj.insert(QString("dateTimeFormat"), ::OpenAPI::toJsonValue(m_date_time_format));
    }
    if (m_delimiter_isSet) {
        obj.insert(QString("delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    return obj;
}

QSet<QString> OAIDialect::getAnnotations() const {
    return m_annotations;
}
void OAIDialect::setAnnotations(const QSet<QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIDialect::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIDialect::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIDialect::getCommentPrefix() const {
    return m_comment_prefix;
}
void OAIDialect::setCommentPrefix(const QString &comment_prefix) {
    m_comment_prefix = comment_prefix;
    m_comment_prefix_isSet = true;
}

bool OAIDialect::is_comment_prefix_Set() const{
    return m_comment_prefix_isSet;
}

bool OAIDialect::is_comment_prefix_Valid() const{
    return m_comment_prefix_isValid;
}

QString OAIDialect::getDateTimeFormat() const {
    return m_date_time_format;
}
void OAIDialect::setDateTimeFormat(const QString &date_time_format) {
    m_date_time_format = date_time_format;
    m_date_time_format_isSet = true;
}

bool OAIDialect::is_date_time_format_Set() const{
    return m_date_time_format_isSet;
}

bool OAIDialect::is_date_time_format_Valid() const{
    return m_date_time_format_isValid;
}

QString OAIDialect::getDelimiter() const {
    return m_delimiter;
}
void OAIDialect::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIDialect::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIDialect::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

bool OAIDialect::isHeader() const {
    return m_header;
}
void OAIDialect::setHeader(const bool &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIDialect::is_header_Set() const{
    return m_header_isSet;
}

bool OAIDialect::is_header_Valid() const{
    return m_header_isValid;
}

bool OAIDialect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDialect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
