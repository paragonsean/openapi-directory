/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISourcesApi_H
#define OAI_OAISourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBuckets.h"
#include "OAIError.h"
#include "OAIHealthCheck.h"
#include "OAISource.h"
#include "OAISources.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISourcesApi : public QObject {
    Q_OBJECT

public:
    OAISourcesApi(const int timeOut = 0);
    ~OAISourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  source_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteSourcesID(const QString &source_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  org QString [optional]
    */
    virtual void getSources(const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getSourcesID(const QString &source_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  org QString [optional]
    */
    virtual void getSourcesIDBuckets(const QString &source_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getSourcesIDHealth(const QString &source_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_id QString [required]
    * @param[in]  oai_source OAISource [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchSourcesID(const QString &source_id, const OAISource &oai_source, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_source OAISource [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postSources(const OAISource &oai_source, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteSourcesIDCallback(OAIHttpRequestWorker *worker);
    void getSourcesCallback(OAIHttpRequestWorker *worker);
    void getSourcesIDCallback(OAIHttpRequestWorker *worker);
    void getSourcesIDBucketsCallback(OAIHttpRequestWorker *worker);
    void getSourcesIDHealthCallback(OAIHttpRequestWorker *worker);
    void patchSourcesIDCallback(OAIHttpRequestWorker *worker);
    void postSourcesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteSourcesIDSignal();
    void getSourcesSignal(OAISources summary);
    void getSourcesIDSignal(OAISource summary);
    void getSourcesIDBucketsSignal(OAIBuckets summary);
    void getSourcesIDHealthSignal(OAIHealthCheck summary);
    void patchSourcesIDSignal(OAISource summary);
    void postSourcesSignal(OAISource summary);


    void deleteSourcesIDSignalFull(OAIHttpRequestWorker *worker);
    void getSourcesSignalFull(OAIHttpRequestWorker *worker, OAISources summary);
    void getSourcesIDSignalFull(OAIHttpRequestWorker *worker, OAISource summary);
    void getSourcesIDBucketsSignalFull(OAIHttpRequestWorker *worker, OAIBuckets summary);
    void getSourcesIDHealthSignalFull(OAIHttpRequestWorker *worker, OAIHealthCheck summary);
    void patchSourcesIDSignalFull(OAIHttpRequestWorker *worker, OAISource summary);
    void postSourcesSignalFull(OAIHttpRequestWorker *worker, OAISource summary);

    Q_DECL_DEPRECATED_X("Use deleteSourcesIDSignalError() instead")
    void deleteSourcesIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSourcesIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesSignalError() instead")
    void getSourcesSignalE(OAISources summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesSignalError(OAISources summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesIDSignalError() instead")
    void getSourcesIDSignalE(OAISource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesIDSignalError(OAISource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesIDBucketsSignalError() instead")
    void getSourcesIDBucketsSignalE(OAIBuckets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesIDBucketsSignalError(OAIBuckets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesIDHealthSignalError() instead")
    void getSourcesIDHealthSignalE(OAIHealthCheck summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesIDHealthSignalError(OAIHealthCheck summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSourcesIDSignalError() instead")
    void patchSourcesIDSignalE(OAISource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSourcesIDSignalError(OAISource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSourcesSignalError() instead")
    void postSourcesSignalE(OAISource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSourcesSignalError(OAISource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteSourcesIDSignalErrorFull() instead")
    void deleteSourcesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSourcesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesSignalErrorFull() instead")
    void getSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesIDSignalErrorFull() instead")
    void getSourcesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesIDBucketsSignalErrorFull() instead")
    void getSourcesIDBucketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesIDBucketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourcesIDHealthSignalErrorFull() instead")
    void getSourcesIDHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourcesIDHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSourcesIDSignalErrorFull() instead")
    void patchSourcesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSourcesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSourcesSignalErrorFull() instead")
    void postSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
