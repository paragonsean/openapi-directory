/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckViewProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckViewProperties::OAICheckViewProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckViewProperties::OAICheckViewProperties() {
    this->initializeModel();
}

OAICheckViewProperties::~OAICheckViewProperties() {}

void OAICheckViewProperties::initializeModel() {

    m_check_isSet = false;
    m_check_isValid = false;

    m_check_id_isSet = false;
    m_check_id_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_legend_colorize_rows_isSet = false;
    m_legend_colorize_rows_isValid = false;

    m_legend_hide_isSet = false;
    m_legend_hide_isValid = false;

    m_legend_opacity_isSet = false;
    m_legend_opacity_isValid = false;

    m_legend_orientation_threshold_isSet = false;
    m_legend_orientation_threshold_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICheckViewProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckViewProperties::fromJsonObject(QJsonObject json) {

    m_check_isValid = ::OpenAPI::fromJsonValue(m_check, json[QString("check")]);
    m_check_isSet = !json[QString("check")].isNull() && m_check_isValid;

    m_check_id_isValid = ::OpenAPI::fromJsonValue(m_check_id, json[QString("checkID")]);
    m_check_id_isSet = !json[QString("checkID")].isNull() && m_check_id_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_legend_colorize_rows_isValid = ::OpenAPI::fromJsonValue(m_legend_colorize_rows, json[QString("legendColorizeRows")]);
    m_legend_colorize_rows_isSet = !json[QString("legendColorizeRows")].isNull() && m_legend_colorize_rows_isValid;

    m_legend_hide_isValid = ::OpenAPI::fromJsonValue(m_legend_hide, json[QString("legendHide")]);
    m_legend_hide_isSet = !json[QString("legendHide")].isNull() && m_legend_hide_isValid;

    m_legend_opacity_isValid = ::OpenAPI::fromJsonValue(m_legend_opacity, json[QString("legendOpacity")]);
    m_legend_opacity_isSet = !json[QString("legendOpacity")].isNull() && m_legend_opacity_isValid;

    m_legend_orientation_threshold_isValid = ::OpenAPI::fromJsonValue(m_legend_orientation_threshold, json[QString("legendOrientationThreshold")]);
    m_legend_orientation_threshold_isSet = !json[QString("legendOrientationThreshold")].isNull() && m_legend_orientation_threshold_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICheckViewProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckViewProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_check.isSet()) {
        obj.insert(QString("check"), ::OpenAPI::toJsonValue(m_check));
    }
    if (m_check_id_isSet) {
        obj.insert(QString("checkID"), ::OpenAPI::toJsonValue(m_check_id));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_legend_colorize_rows_isSet) {
        obj.insert(QString("legendColorizeRows"), ::OpenAPI::toJsonValue(m_legend_colorize_rows));
    }
    if (m_legend_hide_isSet) {
        obj.insert(QString("legendHide"), ::OpenAPI::toJsonValue(m_legend_hide));
    }
    if (m_legend_opacity_isSet) {
        obj.insert(QString("legendOpacity"), ::OpenAPI::toJsonValue(m_legend_opacity));
    }
    if (m_legend_orientation_threshold_isSet) {
        obj.insert(QString("legendOrientationThreshold"), ::OpenAPI::toJsonValue(m_legend_orientation_threshold));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_shape_isSet) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICheck OAICheckViewProperties::getCheck() const {
    return m_check;
}
void OAICheckViewProperties::setCheck(const OAICheck &check) {
    m_check = check;
    m_check_isSet = true;
}

bool OAICheckViewProperties::is_check_Set() const{
    return m_check_isSet;
}

bool OAICheckViewProperties::is_check_Valid() const{
    return m_check_isValid;
}

QString OAICheckViewProperties::getCheckId() const {
    return m_check_id;
}
void OAICheckViewProperties::setCheckId(const QString &check_id) {
    m_check_id = check_id;
    m_check_id_isSet = true;
}

bool OAICheckViewProperties::is_check_id_Set() const{
    return m_check_id_isSet;
}

bool OAICheckViewProperties::is_check_id_Valid() const{
    return m_check_id_isValid;
}

QList<OAIDashboardColor> OAICheckViewProperties::getColors() const {
    return m_colors;
}
void OAICheckViewProperties::setColors(const QList<OAIDashboardColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAICheckViewProperties::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAICheckViewProperties::is_colors_Valid() const{
    return m_colors_isValid;
}

bool OAICheckViewProperties::isLegendColorizeRows() const {
    return m_legend_colorize_rows;
}
void OAICheckViewProperties::setLegendColorizeRows(const bool &legend_colorize_rows) {
    m_legend_colorize_rows = legend_colorize_rows;
    m_legend_colorize_rows_isSet = true;
}

bool OAICheckViewProperties::is_legend_colorize_rows_Set() const{
    return m_legend_colorize_rows_isSet;
}

bool OAICheckViewProperties::is_legend_colorize_rows_Valid() const{
    return m_legend_colorize_rows_isValid;
}

bool OAICheckViewProperties::isLegendHide() const {
    return m_legend_hide;
}
void OAICheckViewProperties::setLegendHide(const bool &legend_hide) {
    m_legend_hide = legend_hide;
    m_legend_hide_isSet = true;
}

bool OAICheckViewProperties::is_legend_hide_Set() const{
    return m_legend_hide_isSet;
}

bool OAICheckViewProperties::is_legend_hide_Valid() const{
    return m_legend_hide_isValid;
}

float OAICheckViewProperties::getLegendOpacity() const {
    return m_legend_opacity;
}
void OAICheckViewProperties::setLegendOpacity(const float &legend_opacity) {
    m_legend_opacity = legend_opacity;
    m_legend_opacity_isSet = true;
}

bool OAICheckViewProperties::is_legend_opacity_Set() const{
    return m_legend_opacity_isSet;
}

bool OAICheckViewProperties::is_legend_opacity_Valid() const{
    return m_legend_opacity_isValid;
}

qint32 OAICheckViewProperties::getLegendOrientationThreshold() const {
    return m_legend_orientation_threshold;
}
void OAICheckViewProperties::setLegendOrientationThreshold(const qint32 &legend_orientation_threshold) {
    m_legend_orientation_threshold = legend_orientation_threshold;
    m_legend_orientation_threshold_isSet = true;
}

bool OAICheckViewProperties::is_legend_orientation_threshold_Set() const{
    return m_legend_orientation_threshold_isSet;
}

bool OAICheckViewProperties::is_legend_orientation_threshold_Valid() const{
    return m_legend_orientation_threshold_isValid;
}

QList<OAIDashboardQuery> OAICheckViewProperties::getQueries() const {
    return m_queries;
}
void OAICheckViewProperties::setQueries(const QList<OAIDashboardQuery> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAICheckViewProperties::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAICheckViewProperties::is_queries_Valid() const{
    return m_queries_isValid;
}

QString OAICheckViewProperties::getShape() const {
    return m_shape;
}
void OAICheckViewProperties::setShape(const QString &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAICheckViewProperties::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAICheckViewProperties::is_shape_Valid() const{
    return m_shape_isValid;
}

QString OAICheckViewProperties::getType() const {
    return m_type;
}
void OAICheckViewProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICheckViewProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAICheckViewProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICheckViewProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_colorize_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_hide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_orientation_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckViewProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_check_id_isValid && m_colors_isValid && m_queries_isValid && m_shape_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
