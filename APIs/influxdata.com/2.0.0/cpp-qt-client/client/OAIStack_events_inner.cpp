/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStack_events_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStack_events_inner::OAIStack_events_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStack_events_inner::OAIStack_events_inner() {
    this->initializeModel();
}

OAIStack_events_inner::~OAIStack_events_inner() {}

void OAIStack_events_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIStack_events_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStack_events_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIStack_events_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStack_events_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QString OAIStack_events_inner::getDescription() const {
    return m_description;
}
void OAIStack_events_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStack_events_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStack_events_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStack_events_inner::getEventType() const {
    return m_event_type;
}
void OAIStack_events_inner::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIStack_events_inner::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIStack_events_inner::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIStack_events_inner::getName() const {
    return m_name;
}
void OAIStack_events_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStack_events_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStack_events_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIStack_events_inner_resources_inner> OAIStack_events_inner::getResources() const {
    return m_resources;
}
void OAIStack_events_inner::setResources(const QList<OAIStack_events_inner_resources_inner> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIStack_events_inner::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIStack_events_inner::is_resources_Valid() const{
    return m_resources_isValid;
}

QList<QString> OAIStack_events_inner::getSources() const {
    return m_sources;
}
void OAIStack_events_inner::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIStack_events_inner::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIStack_events_inner::is_sources_Valid() const{
    return m_sources_isValid;
}

QDateTime OAIStack_events_inner::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStack_events_inner::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStack_events_inner::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStack_events_inner::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<QString> OAIStack_events_inner::getUrls() const {
    return m_urls;
}
void OAIStack_events_inner::setUrls(const QList<QString> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIStack_events_inner::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIStack_events_inner::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIStack_events_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStack_events_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
