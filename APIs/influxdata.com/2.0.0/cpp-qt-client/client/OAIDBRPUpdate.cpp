/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBRPUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBRPUpdate::OAIDBRPUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBRPUpdate::OAIDBRPUpdate() {
    this->initializeModel();
}

OAIDBRPUpdate::~OAIDBRPUpdate() {}

void OAIDBRPUpdate::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_retention_policy_isSet = false;
    m_retention_policy_isValid = false;
}

void OAIDBRPUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBRPUpdate::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_retention_policy_isValid = ::OpenAPI::fromJsonValue(m_retention_policy, json[QString("retention_policy")]);
    m_retention_policy_isSet = !json[QString("retention_policy")].isNull() && m_retention_policy_isValid;
}

QString OAIDBRPUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBRPUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_retention_policy_isSet) {
        obj.insert(QString("retention_policy"), ::OpenAPI::toJsonValue(m_retention_policy));
    }
    return obj;
}

QString OAIDBRPUpdate::getDatabase() const {
    return m_database;
}
void OAIDBRPUpdate::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIDBRPUpdate::is_database_Set() const{
    return m_database_isSet;
}

bool OAIDBRPUpdate::is_database_Valid() const{
    return m_database_isValid;
}

bool OAIDBRPUpdate::isRDefault() const {
    return m_r_default;
}
void OAIDBRPUpdate::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIDBRPUpdate::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIDBRPUpdate::is_r_default_Valid() const{
    return m_r_default_isValid;
}

OAILinks OAIDBRPUpdate::getLinks() const {
    return m_links;
}
void OAIDBRPUpdate::setLinks(const OAILinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDBRPUpdate::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDBRPUpdate::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIDBRPUpdate::getRetentionPolicy() const {
    return m_retention_policy;
}
void OAIDBRPUpdate::setRetentionPolicy(const QString &retention_policy) {
    m_retention_policy = retention_policy;
    m_retention_policy_isSet = true;
}

bool OAIDBRPUpdate::is_retention_policy_Set() const{
    return m_retention_policy_isSet;
}

bool OAIDBRPUpdate::is_retention_policy_Valid() const{
    return m_retention_policy_isValid;
}

bool OAIDBRPUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBRPUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
