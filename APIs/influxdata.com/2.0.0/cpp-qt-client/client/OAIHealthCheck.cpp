/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthCheck::OAIHealthCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthCheck::OAIHealthCheck() {
    this->initializeModel();
}

OAIHealthCheck::~OAIHealthCheck() {}

void OAIHealthCheck::initializeModel() {

    m_checks_isSet = false;
    m_checks_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIHealthCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthCheck::fromJsonObject(QJsonObject json) {

    m_checks_isValid = ::OpenAPI::fromJsonValue(m_checks, json[QString("checks")]);
    m_checks_isSet = !json[QString("checks")].isNull() && m_checks_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIHealthCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_checks.size() > 0) {
        obj.insert(QString("checks"), ::OpenAPI::toJsonValue(m_checks));
    }
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIHealthCheck> OAIHealthCheck::getChecks() const {
    return m_checks;
}
void OAIHealthCheck::setChecks(const QList<OAIHealthCheck> &checks) {
    m_checks = checks;
    m_checks_isSet = true;
}

bool OAIHealthCheck::is_checks_Set() const{
    return m_checks_isSet;
}

bool OAIHealthCheck::is_checks_Valid() const{
    return m_checks_isValid;
}

QString OAIHealthCheck::getCommit() const {
    return m_commit;
}
void OAIHealthCheck::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIHealthCheck::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIHealthCheck::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAIHealthCheck::getMessage() const {
    return m_message;
}
void OAIHealthCheck::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIHealthCheck::is_message_Set() const{
    return m_message_isSet;
}

bool OAIHealthCheck::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIHealthCheck::getName() const {
    return m_name;
}
void OAIHealthCheck::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHealthCheck::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHealthCheck::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIHealthCheck::getStatus() const {
    return m_status;
}
void OAIHealthCheck::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHealthCheck::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHealthCheck::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIHealthCheck::getVersion() const {
    return m_version;
}
void OAIHealthCheck::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIHealthCheck::is_version_Set() const{
    return m_version_isSet;
}

bool OAIHealthCheck::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIHealthCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
