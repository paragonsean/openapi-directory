/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationRulesApi_H
#define OAI_OAINotificationRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAILabelMapping.h"
#include "OAILabelResponse.h"
#include "OAILabelsResponse.h"
#include "OAINotificationRule.h"
#include "OAINotificationRuleUpdate.h"
#include "OAINotificationRules.h"
#include "OAIPostNotificationRule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationRulesApi : public QObject {
    Q_OBJECT

public:
    OAINotificationRulesApi(const int timeOut = 0);
    ~OAINotificationRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_post_notification_rule OAIPostNotificationRule [required]
    */
    virtual void createNotificationRule(const OAIPostNotificationRule &oai_post_notification_rule);

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteNotificationRulesID(const QString &rule_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  label_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void deleteNotificationRulesIDLabelsID(const QString &rule_id, const QString &label_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  check_id QString [optional]
    * @param[in]  tag QString [optional]
    */
    virtual void getNotificationRules(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &check_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getNotificationRulesID(const QString &rule_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void getNotificationRulesIDLabels(const QString &rule_id, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  oai_notification_rule_update OAINotificationRuleUpdate [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void patchNotificationRulesID(const QString &rule_id, const OAINotificationRuleUpdate &oai_notification_rule_update, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  oai_label_mapping OAILabelMapping [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void postNotificationRuleIDLabels(const QString &rule_id, const OAILabelMapping &oai_label_mapping, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  oai_notification_rule OAINotificationRule [required]
    * @param[in]  zap_trace_span QString [optional]
    */
    virtual void putNotificationRulesID(const QString &rule_id, const OAINotificationRule &oai_notification_rule, const ::OpenAPI::OptionalParam<QString> &zap_trace_span = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNotificationRuleCallback(OAIHttpRequestWorker *worker);
    void deleteNotificationRulesIDCallback(OAIHttpRequestWorker *worker);
    void deleteNotificationRulesIDLabelsIDCallback(OAIHttpRequestWorker *worker);
    void getNotificationRulesCallback(OAIHttpRequestWorker *worker);
    void getNotificationRulesIDCallback(OAIHttpRequestWorker *worker);
    void getNotificationRulesIDLabelsCallback(OAIHttpRequestWorker *worker);
    void patchNotificationRulesIDCallback(OAIHttpRequestWorker *worker);
    void postNotificationRuleIDLabelsCallback(OAIHttpRequestWorker *worker);
    void putNotificationRulesIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNotificationRuleSignal(OAINotificationRule summary);
    void deleteNotificationRulesIDSignal();
    void deleteNotificationRulesIDLabelsIDSignal();
    void getNotificationRulesSignal(OAINotificationRules summary);
    void getNotificationRulesIDSignal(OAINotificationRule summary);
    void getNotificationRulesIDLabelsSignal(OAILabelsResponse summary);
    void patchNotificationRulesIDSignal(OAINotificationRule summary);
    void postNotificationRuleIDLabelsSignal(OAILabelResponse summary);
    void putNotificationRulesIDSignal(OAINotificationRule summary);


    void createNotificationRuleSignalFull(OAIHttpRequestWorker *worker, OAINotificationRule summary);
    void deleteNotificationRulesIDSignalFull(OAIHttpRequestWorker *worker);
    void deleteNotificationRulesIDLabelsIDSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationRulesSignalFull(OAIHttpRequestWorker *worker, OAINotificationRules summary);
    void getNotificationRulesIDSignalFull(OAIHttpRequestWorker *worker, OAINotificationRule summary);
    void getNotificationRulesIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelsResponse summary);
    void patchNotificationRulesIDSignalFull(OAIHttpRequestWorker *worker, OAINotificationRule summary);
    void postNotificationRuleIDLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelResponse summary);
    void putNotificationRulesIDSignalFull(OAIHttpRequestWorker *worker, OAINotificationRule summary);

    Q_DECL_DEPRECATED_X("Use createNotificationRuleSignalError() instead")
    void createNotificationRuleSignalE(OAINotificationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNotificationRuleSignalError(OAINotificationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationRulesIDSignalError() instead")
    void deleteNotificationRulesIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationRulesIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationRulesIDLabelsIDSignalError() instead")
    void deleteNotificationRulesIDLabelsIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationRulesIDLabelsIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationRulesSignalError() instead")
    void getNotificationRulesSignalE(OAINotificationRules summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationRulesSignalError(OAINotificationRules summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationRulesIDSignalError() instead")
    void getNotificationRulesIDSignalE(OAINotificationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationRulesIDSignalError(OAINotificationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationRulesIDLabelsSignalError() instead")
    void getNotificationRulesIDLabelsSignalE(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationRulesIDLabelsSignalError(OAILabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchNotificationRulesIDSignalError() instead")
    void patchNotificationRulesIDSignalE(OAINotificationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchNotificationRulesIDSignalError(OAINotificationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNotificationRuleIDLabelsSignalError() instead")
    void postNotificationRuleIDLabelsSignalE(OAILabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNotificationRuleIDLabelsSignalError(OAILabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putNotificationRulesIDSignalError() instead")
    void putNotificationRulesIDSignalE(OAINotificationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putNotificationRulesIDSignalError(OAINotificationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNotificationRuleSignalErrorFull() instead")
    void createNotificationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNotificationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationRulesIDSignalErrorFull() instead")
    void deleteNotificationRulesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationRulesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationRulesIDLabelsIDSignalErrorFull() instead")
    void deleteNotificationRulesIDLabelsIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationRulesIDLabelsIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationRulesSignalErrorFull() instead")
    void getNotificationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationRulesIDSignalErrorFull() instead")
    void getNotificationRulesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationRulesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationRulesIDLabelsSignalErrorFull() instead")
    void getNotificationRulesIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationRulesIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchNotificationRulesIDSignalErrorFull() instead")
    void patchNotificationRulesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchNotificationRulesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNotificationRuleIDLabelsSignalErrorFull() instead")
    void postNotificationRuleIDLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNotificationRuleIDLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putNotificationRulesIDSignalErrorFull() instead")
    void putNotificationRulesIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putNotificationRulesIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
