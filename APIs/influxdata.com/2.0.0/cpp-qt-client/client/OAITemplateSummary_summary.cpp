/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSummary_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSummary_summary::OAITemplateSummary_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSummary_summary::OAITemplateSummary_summary() {
    this->initializeModel();
}

OAITemplateSummary_summary::~OAITemplateSummary_summary() {}

void OAITemplateSummary_summary::initializeModel() {

    m_buckets_isSet = false;
    m_buckets_isValid = false;

    m_checks_isSet = false;
    m_checks_isValid = false;

    m_dashboards_isSet = false;
    m_dashboards_isValid = false;

    m_label_mappings_isSet = false;
    m_label_mappings_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_missing_env_refs_isSet = false;
    m_missing_env_refs_isValid = false;

    m_missing_secrets_isSet = false;
    m_missing_secrets_isValid = false;

    m_notification_endpoints_isSet = false;
    m_notification_endpoints_isValid = false;

    m_notification_rules_isSet = false;
    m_notification_rules_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;

    m_telegraf_configs_isSet = false;
    m_telegraf_configs_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;
}

void OAITemplateSummary_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSummary_summary::fromJsonObject(QJsonObject json) {

    m_buckets_isValid = ::OpenAPI::fromJsonValue(m_buckets, json[QString("buckets")]);
    m_buckets_isSet = !json[QString("buckets")].isNull() && m_buckets_isValid;

    m_checks_isValid = ::OpenAPI::fromJsonValue(m_checks, json[QString("checks")]);
    m_checks_isSet = !json[QString("checks")].isNull() && m_checks_isValid;

    m_dashboards_isValid = ::OpenAPI::fromJsonValue(m_dashboards, json[QString("dashboards")]);
    m_dashboards_isSet = !json[QString("dashboards")].isNull() && m_dashboards_isValid;

    m_label_mappings_isValid = ::OpenAPI::fromJsonValue(m_label_mappings, json[QString("labelMappings")]);
    m_label_mappings_isSet = !json[QString("labelMappings")].isNull() && m_label_mappings_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_missing_env_refs_isValid = ::OpenAPI::fromJsonValue(m_missing_env_refs, json[QString("missingEnvRefs")]);
    m_missing_env_refs_isSet = !json[QString("missingEnvRefs")].isNull() && m_missing_env_refs_isValid;

    m_missing_secrets_isValid = ::OpenAPI::fromJsonValue(m_missing_secrets, json[QString("missingSecrets")]);
    m_missing_secrets_isSet = !json[QString("missingSecrets")].isNull() && m_missing_secrets_isValid;

    m_notification_endpoints_isValid = ::OpenAPI::fromJsonValue(m_notification_endpoints, json[QString("notificationEndpoints")]);
    m_notification_endpoints_isSet = !json[QString("notificationEndpoints")].isNull() && m_notification_endpoints_isValid;

    m_notification_rules_isValid = ::OpenAPI::fromJsonValue(m_notification_rules, json[QString("notificationRules")]);
    m_notification_rules_isSet = !json[QString("notificationRules")].isNull() && m_notification_rules_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;

    m_telegraf_configs_isValid = ::OpenAPI::fromJsonValue(m_telegraf_configs, json[QString("telegrafConfigs")]);
    m_telegraf_configs_isSet = !json[QString("telegrafConfigs")].isNull() && m_telegraf_configs_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;
}

QString OAITemplateSummary_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSummary_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_buckets.size() > 0) {
        obj.insert(QString("buckets"), ::OpenAPI::toJsonValue(m_buckets));
    }
    if (m_checks.size() > 0) {
        obj.insert(QString("checks"), ::OpenAPI::toJsonValue(m_checks));
    }
    if (m_dashboards.size() > 0) {
        obj.insert(QString("dashboards"), ::OpenAPI::toJsonValue(m_dashboards));
    }
    if (m_label_mappings.size() > 0) {
        obj.insert(QString("labelMappings"), ::OpenAPI::toJsonValue(m_label_mappings));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_missing_env_refs.size() > 0) {
        obj.insert(QString("missingEnvRefs"), ::OpenAPI::toJsonValue(m_missing_env_refs));
    }
    if (m_missing_secrets.size() > 0) {
        obj.insert(QString("missingSecrets"), ::OpenAPI::toJsonValue(m_missing_secrets));
    }
    if (m_notification_endpoints.size() > 0) {
        obj.insert(QString("notificationEndpoints"), ::OpenAPI::toJsonValue(m_notification_endpoints));
    }
    if (m_notification_rules.size() > 0) {
        obj.insert(QString("notificationRules"), ::OpenAPI::toJsonValue(m_notification_rules));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    if (m_telegraf_configs.size() > 0) {
        obj.insert(QString("telegrafConfigs"), ::OpenAPI::toJsonValue(m_telegraf_configs));
    }
    if (m_variables.size() > 0) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    return obj;
}

QList<OAITemplateSummary_summary_buckets_inner> OAITemplateSummary_summary::getBuckets() const {
    return m_buckets;
}
void OAITemplateSummary_summary::setBuckets(const QList<OAITemplateSummary_summary_buckets_inner> &buckets) {
    m_buckets = buckets;
    m_buckets_isSet = true;
}

bool OAITemplateSummary_summary::is_buckets_Set() const{
    return m_buckets_isSet;
}

bool OAITemplateSummary_summary::is_buckets_Valid() const{
    return m_buckets_isValid;
}

QList<OAITemplateSummary_summary_checks_inner> OAITemplateSummary_summary::getChecks() const {
    return m_checks;
}
void OAITemplateSummary_summary::setChecks(const QList<OAITemplateSummary_summary_checks_inner> &checks) {
    m_checks = checks;
    m_checks_isSet = true;
}

bool OAITemplateSummary_summary::is_checks_Set() const{
    return m_checks_isSet;
}

bool OAITemplateSummary_summary::is_checks_Valid() const{
    return m_checks_isValid;
}

QList<OAITemplateSummary_summary_dashboards_inner> OAITemplateSummary_summary::getDashboards() const {
    return m_dashboards;
}
void OAITemplateSummary_summary::setDashboards(const QList<OAITemplateSummary_summary_dashboards_inner> &dashboards) {
    m_dashboards = dashboards;
    m_dashboards_isSet = true;
}

bool OAITemplateSummary_summary::is_dashboards_Set() const{
    return m_dashboards_isSet;
}

bool OAITemplateSummary_summary::is_dashboards_Valid() const{
    return m_dashboards_isValid;
}

QList<OAITemplateSummary_diff_labelMappings_inner> OAITemplateSummary_summary::getLabelMappings() const {
    return m_label_mappings;
}
void OAITemplateSummary_summary::setLabelMappings(const QList<OAITemplateSummary_diff_labelMappings_inner> &label_mappings) {
    m_label_mappings = label_mappings;
    m_label_mappings_isSet = true;
}

bool OAITemplateSummary_summary::is_label_mappings_Set() const{
    return m_label_mappings_isSet;
}

bool OAITemplateSummary_summary::is_label_mappings_Valid() const{
    return m_label_mappings_isValid;
}

QList<OAITemplateSummaryLabel> OAITemplateSummary_summary::getLabels() const {
    return m_labels;
}
void OAITemplateSummary_summary::setLabels(const QList<OAITemplateSummaryLabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITemplateSummary_summary::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITemplateSummary_summary::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAITemplateSummary_summary::getMissingEnvRefs() const {
    return m_missing_env_refs;
}
void OAITemplateSummary_summary::setMissingEnvRefs(const QList<QString> &missing_env_refs) {
    m_missing_env_refs = missing_env_refs;
    m_missing_env_refs_isSet = true;
}

bool OAITemplateSummary_summary::is_missing_env_refs_Set() const{
    return m_missing_env_refs_isSet;
}

bool OAITemplateSummary_summary::is_missing_env_refs_Valid() const{
    return m_missing_env_refs_isValid;
}

QList<QString> OAITemplateSummary_summary::getMissingSecrets() const {
    return m_missing_secrets;
}
void OAITemplateSummary_summary::setMissingSecrets(const QList<QString> &missing_secrets) {
    m_missing_secrets = missing_secrets;
    m_missing_secrets_isSet = true;
}

bool OAITemplateSummary_summary::is_missing_secrets_Set() const{
    return m_missing_secrets_isSet;
}

bool OAITemplateSummary_summary::is_missing_secrets_Valid() const{
    return m_missing_secrets_isValid;
}

QList<OAITemplateSummary_summary_notificationEndpoints_inner> OAITemplateSummary_summary::getNotificationEndpoints() const {
    return m_notification_endpoints;
}
void OAITemplateSummary_summary::setNotificationEndpoints(const QList<OAITemplateSummary_summary_notificationEndpoints_inner> &notification_endpoints) {
    m_notification_endpoints = notification_endpoints;
    m_notification_endpoints_isSet = true;
}

bool OAITemplateSummary_summary::is_notification_endpoints_Set() const{
    return m_notification_endpoints_isSet;
}

bool OAITemplateSummary_summary::is_notification_endpoints_Valid() const{
    return m_notification_endpoints_isValid;
}

QList<OAITemplateSummary_summary_notificationRules_inner> OAITemplateSummary_summary::getNotificationRules() const {
    return m_notification_rules;
}
void OAITemplateSummary_summary::setNotificationRules(const QList<OAITemplateSummary_summary_notificationRules_inner> &notification_rules) {
    m_notification_rules = notification_rules;
    m_notification_rules_isSet = true;
}

bool OAITemplateSummary_summary::is_notification_rules_Set() const{
    return m_notification_rules_isSet;
}

bool OAITemplateSummary_summary::is_notification_rules_Valid() const{
    return m_notification_rules_isValid;
}

QList<OAITemplateSummary_summary_tasks_inner> OAITemplateSummary_summary::getTasks() const {
    return m_tasks;
}
void OAITemplateSummary_summary::setTasks(const QList<OAITemplateSummary_summary_tasks_inner> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAITemplateSummary_summary::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAITemplateSummary_summary::is_tasks_Valid() const{
    return m_tasks_isValid;
}

QList<OAITemplateSummary_summary_telegrafConfigs_inner> OAITemplateSummary_summary::getTelegrafConfigs() const {
    return m_telegraf_configs;
}
void OAITemplateSummary_summary::setTelegrafConfigs(const QList<OAITemplateSummary_summary_telegrafConfigs_inner> &telegraf_configs) {
    m_telegraf_configs = telegraf_configs;
    m_telegraf_configs_isSet = true;
}

bool OAITemplateSummary_summary::is_telegraf_configs_Set() const{
    return m_telegraf_configs_isSet;
}

bool OAITemplateSummary_summary::is_telegraf_configs_Valid() const{
    return m_telegraf_configs_isValid;
}

QList<OAITemplateSummary_summary_variables_inner> OAITemplateSummary_summary::getVariables() const {
    return m_variables;
}
void OAITemplateSummary_summary::setVariables(const QList<OAITemplateSummary_summary_variables_inner> &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAITemplateSummary_summary::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAITemplateSummary_summary::is_variables_Valid() const{
    return m_variables_isValid;
}

bool OAITemplateSummary_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buckets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_env_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_telegraf_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSummary_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
