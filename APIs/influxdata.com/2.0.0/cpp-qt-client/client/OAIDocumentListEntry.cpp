/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentListEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentListEntry::OAIDocumentListEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentListEntry::OAIDocumentListEntry() {
    this->initializeModel();
}

OAIDocumentListEntry::~OAIDocumentListEntry() {}

void OAIDocumentListEntry::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIDocumentListEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentListEntry::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIDocumentListEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentListEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

QString OAIDocumentListEntry::getId() const {
    return m_id;
}
void OAIDocumentListEntry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentListEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentListEntry::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILabel> OAIDocumentListEntry::getLabels() const {
    return m_labels;
}
void OAIDocumentListEntry::setLabels(const QList<OAILabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDocumentListEntry::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDocumentListEntry::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIDocument_links OAIDocumentListEntry::getLinks() const {
    return m_links;
}
void OAIDocumentListEntry::setLinks(const OAIDocument_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDocumentListEntry::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDocumentListEntry::is_links_Valid() const{
    return m_links_isValid;
}

OAIDocumentMeta OAIDocumentListEntry::getMeta() const {
    return m_meta;
}
void OAIDocumentListEntry::setMeta(const OAIDocumentMeta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIDocumentListEntry::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIDocumentListEntry::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIDocumentListEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentListEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_meta_isValid && true;
}

} // namespace OpenAPI
