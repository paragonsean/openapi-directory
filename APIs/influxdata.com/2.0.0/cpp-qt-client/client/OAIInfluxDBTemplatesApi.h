/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInfluxDBTemplatesApi_H
#define OAI_OAIInfluxDBTemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIExportTemplate_request.h"
#include "OAIListStacks_200_response.h"
#include "OAIPatchStackRequest.h"
#include "OAIPostStackRequest.h"
#include "OAIStack.h"
#include "OAITemplateApply.h"
#include "OAITemplateSummary.h"
#include "OAITemplate_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInfluxDBTemplatesApi : public QObject {
    Q_OBJECT

public:
    OAIInfluxDBTemplatesApi(const int timeOut = 0);
    ~OAIInfluxDBTemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_template_apply OAITemplateApply [required]
    */
    virtual void applyTemplate(const OAITemplateApply &oai_template_apply);

    /**
    * @param[in]  oai_post_stack_request OAIPostStackRequest [required]
    */
    virtual void createStack(const OAIPostStackRequest &oai_post_stack_request);

    /**
    * @param[in]  stack_id QString [required]
    * @param[in]  org_id QString [required]
    */
    virtual void deleteStack(const QString &stack_id, const QString &org_id);

    /**
    * @param[in]  oai_export_template_request OAIExportTemplate_request [optional]
    */
    virtual void exportTemplate(const ::OpenAPI::OptionalParam<OAIExportTemplate_request> &oai_export_template_request = ::OpenAPI::OptionalParam<OAIExportTemplate_request>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  stack_id QString [optional]
    */
    virtual void listStacks(const QString &org_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_id QString [required]
    */
    virtual void readStack(const QString &stack_id);

    /**
    * @param[in]  stack_id QString [required]
    */
    virtual void uninstallStack(const QString &stack_id);

    /**
    * @param[in]  stack_id QString [required]
    * @param[in]  oai_patch_stack_request OAIPatchStackRequest [required]
    */
    virtual void updateStack(const QString &stack_id, const OAIPatchStackRequest &oai_patch_stack_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applyTemplateCallback(OAIHttpRequestWorker *worker);
    void createStackCallback(OAIHttpRequestWorker *worker);
    void deleteStackCallback(OAIHttpRequestWorker *worker);
    void exportTemplateCallback(OAIHttpRequestWorker *worker);
    void listStacksCallback(OAIHttpRequestWorker *worker);
    void readStackCallback(OAIHttpRequestWorker *worker);
    void uninstallStackCallback(OAIHttpRequestWorker *worker);
    void updateStackCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applyTemplateSignal(OAITemplateSummary summary);
    void createStackSignal(OAIStack summary);
    void deleteStackSignal();
    void exportTemplateSignal(QList<OAITemplate_inner> summary);
    void listStacksSignal(OAIListStacks_200_response summary);
    void readStackSignal(OAIStack summary);
    void uninstallStackSignal(OAIStack summary);
    void updateStackSignal(OAIStack summary);


    void applyTemplateSignalFull(OAIHttpRequestWorker *worker, OAITemplateSummary summary);
    void createStackSignalFull(OAIHttpRequestWorker *worker, OAIStack summary);
    void deleteStackSignalFull(OAIHttpRequestWorker *worker);
    void exportTemplateSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplate_inner> summary);
    void listStacksSignalFull(OAIHttpRequestWorker *worker, OAIListStacks_200_response summary);
    void readStackSignalFull(OAIHttpRequestWorker *worker, OAIStack summary);
    void uninstallStackSignalFull(OAIHttpRequestWorker *worker, OAIStack summary);
    void updateStackSignalFull(OAIHttpRequestWorker *worker, OAIStack summary);

    Q_DECL_DEPRECATED_X("Use applyTemplateSignalError() instead")
    void applyTemplateSignalE(OAITemplateSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applyTemplateSignalError(OAITemplateSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStackSignalError() instead")
    void createStackSignalE(OAIStack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStackSignalError(OAIStack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStackSignalError() instead")
    void deleteStackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportTemplateSignalError() instead")
    void exportTemplateSignalE(QList<OAITemplate_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportTemplateSignalError(QList<OAITemplate_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStacksSignalError() instead")
    void listStacksSignalE(OAIListStacks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStacksSignalError(OAIListStacks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStackSignalError() instead")
    void readStackSignalE(OAIStack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readStackSignalError(OAIStack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uninstallStackSignalError() instead")
    void uninstallStackSignalE(OAIStack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uninstallStackSignalError(OAIStack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStackSignalError() instead")
    void updateStackSignalE(OAIStack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStackSignalError(OAIStack summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applyTemplateSignalErrorFull() instead")
    void applyTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applyTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStackSignalErrorFull() instead")
    void createStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStackSignalErrorFull() instead")
    void deleteStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportTemplateSignalErrorFull() instead")
    void exportTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStacksSignalErrorFull() instead")
    void listStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readStackSignalErrorFull() instead")
    void readStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uninstallStackSignalErrorFull() instead")
    void uninstallStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uninstallStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStackSignalErrorFull() instead")
    void updateStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
