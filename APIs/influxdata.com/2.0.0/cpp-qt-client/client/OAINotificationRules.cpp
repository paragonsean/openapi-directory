/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationRules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationRules::OAINotificationRules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationRules::OAINotificationRules() {
    this->initializeModel();
}

OAINotificationRules::~OAINotificationRules() {}

void OAINotificationRules::initializeModel() {

    m_links_isSet = false;
    m_links_isValid = false;

    m_notification_rules_isSet = false;
    m_notification_rules_isValid = false;
}

void OAINotificationRules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationRules::fromJsonObject(QJsonObject json) {

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_notification_rules_isValid = ::OpenAPI::fromJsonValue(m_notification_rules, json[QString("notificationRules")]);
    m_notification_rules_isSet = !json[QString("notificationRules")].isNull() && m_notification_rules_isValid;
}

QString OAINotificationRules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationRules::asJsonObject() const {
    QJsonObject obj;
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_notification_rules.size() > 0) {
        obj.insert(QString("notificationRules"), ::OpenAPI::toJsonValue(m_notification_rules));
    }
    return obj;
}

OAILinks OAINotificationRules::getLinks() const {
    return m_links;
}
void OAINotificationRules::setLinks(const OAILinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAINotificationRules::is_links_Set() const{
    return m_links_isSet;
}

bool OAINotificationRules::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAINotificationRule> OAINotificationRules::getNotificationRules() const {
    return m_notification_rules;
}
void OAINotificationRules::setNotificationRules(const QList<OAINotificationRule> &notification_rules) {
    m_notification_rules = notification_rules;
    m_notification_rules_isSet = true;
}

bool OAINotificationRules::is_notification_rules_Set() const{
    return m_notification_rules_isSet;
}

bool OAINotificationRules::is_notification_rules_Valid() const{
    return m_notification_rules_isValid;
}

bool OAINotificationRules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationRules::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
