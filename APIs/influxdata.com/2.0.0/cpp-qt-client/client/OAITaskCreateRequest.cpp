/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskCreateRequest::OAITaskCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskCreateRequest::OAITaskCreateRequest() {
    this->initializeModel();
}

OAITaskCreateRequest::~OAITaskCreateRequest() {}

void OAITaskCreateRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_flux_isSet = false;
    m_flux_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITaskCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskCreateRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_flux_isValid = ::OpenAPI::fromJsonValue(m_flux, json[QString("flux")]);
    m_flux_isSet = !json[QString("flux")].isNull() && m_flux_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgID")]);
    m_org_id_isSet = !json[QString("orgID")].isNull() && m_org_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITaskCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_flux_isSet) {
        obj.insert(QString("flux"), ::OpenAPI::toJsonValue(m_flux));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgID"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAITaskCreateRequest::getDescription() const {
    return m_description;
}
void OAITaskCreateRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITaskCreateRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAITaskCreateRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITaskCreateRequest::getFlux() const {
    return m_flux;
}
void OAITaskCreateRequest::setFlux(const QString &flux) {
    m_flux = flux;
    m_flux_isSet = true;
}

bool OAITaskCreateRequest::is_flux_Set() const{
    return m_flux_isSet;
}

bool OAITaskCreateRequest::is_flux_Valid() const{
    return m_flux_isValid;
}

QString OAITaskCreateRequest::getOrg() const {
    return m_org;
}
void OAITaskCreateRequest::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAITaskCreateRequest::is_org_Set() const{
    return m_org_isSet;
}

bool OAITaskCreateRequest::is_org_Valid() const{
    return m_org_isValid;
}

QString OAITaskCreateRequest::getOrgId() const {
    return m_org_id;
}
void OAITaskCreateRequest::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAITaskCreateRequest::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAITaskCreateRequest::is_org_id_Valid() const{
    return m_org_id_isValid;
}

OAITaskStatusType OAITaskCreateRequest::getStatus() const {
    return m_status;
}
void OAITaskCreateRequest::setStatus(const OAITaskStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskCreateRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskCreateRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITaskCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flux_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_flux_isValid && true;
}

} // namespace OpenAPI
