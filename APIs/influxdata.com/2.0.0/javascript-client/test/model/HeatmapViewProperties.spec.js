/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfluxOssApiService);
  }
}(this, function(expect, InfluxOssApiService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfluxOssApiService.HeatmapViewProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HeatmapViewProperties', function() {
    it('should create an instance of HeatmapViewProperties', function() {
      // uncomment below and update the code to test HeatmapViewProperties
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be.a(InfluxOssApiService.HeatmapViewProperties);
    });

    it('should have the property binSize (base name: "binSize")', function() {
      // uncomment below and update the code to test the property binSize
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property colors (base name: "colors")', function() {
      // uncomment below and update the code to test the property colors
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property generateXAxisTicks (base name: "generateXAxisTicks")', function() {
      // uncomment below and update the code to test the property generateXAxisTicks
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property generateYAxisTicks (base name: "generateYAxisTicks")', function() {
      // uncomment below and update the code to test the property generateYAxisTicks
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property legendColorizeRows (base name: "legendColorizeRows")', function() {
      // uncomment below and update the code to test the property legendColorizeRows
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property legendHide (base name: "legendHide")', function() {
      // uncomment below and update the code to test the property legendHide
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property legendOpacity (base name: "legendOpacity")', function() {
      // uncomment below and update the code to test the property legendOpacity
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property legendOrientationThreshold (base name: "legendOrientationThreshold")', function() {
      // uncomment below and update the code to test the property legendOrientationThreshold
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property queries (base name: "queries")', function() {
      // uncomment below and update the code to test the property queries
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property shape (base name: "shape")', function() {
      // uncomment below and update the code to test the property shape
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property showNoteWhenEmpty (base name: "showNoteWhenEmpty")', function() {
      // uncomment below and update the code to test the property showNoteWhenEmpty
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property timeFormat (base name: "timeFormat")', function() {
      // uncomment below and update the code to test the property timeFormat
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property xAxisLabel (base name: "xAxisLabel")', function() {
      // uncomment below and update the code to test the property xAxisLabel
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property xColumn (base name: "xColumn")', function() {
      // uncomment below and update the code to test the property xColumn
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property xDomain (base name: "xDomain")', function() {
      // uncomment below and update the code to test the property xDomain
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property xPrefix (base name: "xPrefix")', function() {
      // uncomment below and update the code to test the property xPrefix
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property xSuffix (base name: "xSuffix")', function() {
      // uncomment below and update the code to test the property xSuffix
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property xTickStart (base name: "xTickStart")', function() {
      // uncomment below and update the code to test the property xTickStart
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property xTickStep (base name: "xTickStep")', function() {
      // uncomment below and update the code to test the property xTickStep
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property xTotalTicks (base name: "xTotalTicks")', function() {
      // uncomment below and update the code to test the property xTotalTicks
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property yAxisLabel (base name: "yAxisLabel")', function() {
      // uncomment below and update the code to test the property yAxisLabel
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property yColumn (base name: "yColumn")', function() {
      // uncomment below and update the code to test the property yColumn
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property yDomain (base name: "yDomain")', function() {
      // uncomment below and update the code to test the property yDomain
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property yPrefix (base name: "yPrefix")', function() {
      // uncomment below and update the code to test the property yPrefix
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property ySuffix (base name: "ySuffix")', function() {
      // uncomment below and update the code to test the property ySuffix
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property yTickStart (base name: "yTickStart")', function() {
      // uncomment below and update the code to test the property yTickStart
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property yTickStep (base name: "yTickStep")', function() {
      // uncomment below and update the code to test the property yTickStep
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

    it('should have the property yTotalTicks (base name: "yTotalTicks")', function() {
      // uncomment below and update the code to test the property yTotalTicks
      //var instance = new InfluxOssApiService.HeatmapViewProperties();
      //expect(instance).to.be();
    });

  });

}));
