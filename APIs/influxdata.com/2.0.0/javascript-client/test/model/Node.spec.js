/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfluxOssApiService);
  }
}(this, function(expect, InfluxOssApiService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfluxOssApiService.Node();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Node', function() {
    it('should create an instance of Node', function() {
      // uncomment below and update the code to test Node
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be.a(InfluxOssApiService.Node);
    });

    it('should have the property elements (base name: "elements")', function() {
      // uncomment below and update the code to test the property elements
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property params (base name: "params")', function() {
      // uncomment below and update the code to test the property params
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property left (base name: "left")', function() {
      // uncomment below and update the code to test the property left
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property operator (base name: "operator")', function() {
      // uncomment below and update the code to test the property operator
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property right (base name: "right")', function() {
      // uncomment below and update the code to test the property right
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property _arguments (base name: "arguments")', function() {
      // uncomment below and update the code to test the property _arguments
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property callee (base name: "callee")', function() {
      // uncomment below and update the code to test the property callee
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property alternate (base name: "alternate")', function() {
      // uncomment below and update the code to test the property alternate
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property consequent (base name: "consequent")', function() {
      // uncomment below and update the code to test the property consequent
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property test (base name: "test")', function() {
      // uncomment below and update the code to test the property test
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property object (base name: "object")', function() {
      // uncomment below and update the code to test the property object
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property property (base name: "property")', function() {
      // uncomment below and update the code to test the property property
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property array (base name: "array")', function() {
      // uncomment below and update the code to test the property array
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property index (base name: "index")', function() {
      // uncomment below and update the code to test the property index
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property properties (base name: "properties")', function() {
      // uncomment below and update the code to test the property properties
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property expression (base name: "expression")', function() {
      // uncomment below and update the code to test the property expression
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property argument (base name: "argument")', function() {
      // uncomment below and update the code to test the property argument
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property call (base name: "call")', function() {
      // uncomment below and update the code to test the property call
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property values (base name: "values")', function() {
      // uncomment below and update the code to test the property values
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new InfluxOssApiService.Node();
      //expect(instance).to.be();
    });

  });

}));
