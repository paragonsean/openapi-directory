/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';
import NotificationRuleBaseLinks from './NotificationRuleBaseLinks';
import NotificationRuleDiscriminator from './NotificationRuleDiscriminator';
import StatusRule from './StatusRule';
import TagRule from './TagRule';
import TaskStatusType from './TaskStatusType';

/**
 * The NotificationRule model module.
 * @module model/NotificationRule
 * @version 2.0.0
 */
class NotificationRule {
    /**
     * Constructs a new <code>NotificationRule</code>.
     * @alias module:model/NotificationRule
     * @extends module:model/NotificationRuleDiscriminator
     * @implements module:model/NotificationRuleDiscriminator
     * @param endpointID {String} 
     * @param name {String} Human-readable name describing the notification rule.
     * @param orgID {String} The ID of the organization that owns this notification rule.
     * @param status {module:model/TaskStatusType} 
     * @param statusRules {Array.<module:model/StatusRule>} List of status rules the notification rule attempts to match.
     * @param channel {String} 
     * @param messageTemplate {String} The message template as a flux interpolated string.
     * @param type {module:model/NotificationRule.TypeEnum} The discriminator between other types of notification rules is \"telegram\".
     * @param subjectTemplate {String} 
     * @param to {String} 
     */
    constructor(endpointID, name, orgID, status, statusRules, channel, messageTemplate, type, subjectTemplate, to) { 
        NotificationRuleDiscriminator.initialize(this, endpointID, name, orgID, status, statusRules, channel, messageTemplate, type, subjectTemplate, to);
        NotificationRule.initialize(this, endpointID, name, orgID, status, statusRules, channel, messageTemplate, type, subjectTemplate, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endpointID, name, orgID, status, statusRules, channel, messageTemplate, type, subjectTemplate, to) { 
    }

    /**
     * Constructs a <code>NotificationRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationRule} obj Optional instance to populate.
     * @return {module:model/NotificationRule} The populated <code>NotificationRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationRule();
            NotificationRuleDiscriminator.constructFromObject(data, obj);
            NotificationRuleDiscriminator.constructFromObject(data, obj);

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

NotificationRule.RequiredProperties = ["endpointID", "name", "orgID", "status", "statusRules", "channel", "messageTemplate", "type", "subjectTemplate", "to"];


// Implement NotificationRuleDiscriminator interface:
/**
 * @member {Date} createdAt
 */
NotificationRuleDiscriminator.prototype['createdAt'] = undefined;
/**
 * An optional description of the notification rule.
 * @member {String} description
 */
NotificationRuleDiscriminator.prototype['description'] = undefined;
/**
 * @member {String} endpointID
 */
NotificationRuleDiscriminator.prototype['endpointID'] = undefined;
/**
 * The notification repetition interval.
 * @member {String} every
 */
NotificationRuleDiscriminator.prototype['every'] = undefined;
/**
 * @member {String} id
 */
NotificationRuleDiscriminator.prototype['id'] = undefined;
/**
 * @member {Array.<module:model/Label>} labels
 */
NotificationRuleDiscriminator.prototype['labels'] = undefined;
/**
 * @member {String} lastRunError
 */
NotificationRuleDiscriminator.prototype['lastRunError'] = undefined;
/**
 * @member {module:model/NotificationRuleDiscriminator.LastRunStatusEnum} lastRunStatus
 */
NotificationRuleDiscriminator.prototype['lastRunStatus'] = undefined;
/**
 * Timestamp of latest scheduled, completed run, RFC3339.
 * @member {Date} latestCompleted
 */
NotificationRuleDiscriminator.prototype['latestCompleted'] = undefined;
/**
 * Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty.
 * @member {Number} limit
 */
NotificationRuleDiscriminator.prototype['limit'] = undefined;
/**
 * Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty.
 * @member {Number} limitEvery
 */
NotificationRuleDiscriminator.prototype['limitEvery'] = undefined;
/**
 * @member {module:model/NotificationRuleBaseLinks} links
 */
NotificationRuleDiscriminator.prototype['links'] = undefined;
/**
 * Human-readable name describing the notification rule.
 * @member {String} name
 */
NotificationRuleDiscriminator.prototype['name'] = undefined;
/**
 * Duration to delay after the schedule, before executing check.
 * @member {String} offset
 */
NotificationRuleDiscriminator.prototype['offset'] = undefined;
/**
 * The ID of the organization that owns this notification rule.
 * @member {String} orgID
 */
NotificationRuleDiscriminator.prototype['orgID'] = undefined;
/**
 * The ID of creator used to create this notification rule.
 * @member {String} ownerID
 */
NotificationRuleDiscriminator.prototype['ownerID'] = undefined;
/**
 * @member {String} runbookLink
 */
NotificationRuleDiscriminator.prototype['runbookLink'] = undefined;
/**
 * @member {String} sleepUntil
 */
NotificationRuleDiscriminator.prototype['sleepUntil'] = undefined;
/**
 * @member {module:model/TaskStatusType} status
 */
NotificationRuleDiscriminator.prototype['status'] = undefined;
/**
 * List of status rules the notification rule attempts to match.
 * @member {Array.<module:model/StatusRule>} statusRules
 */
NotificationRuleDiscriminator.prototype['statusRules'] = undefined;
/**
 * List of tag rules the notification rule attempts to match.
 * @member {Array.<module:model/TagRule>} tagRules
 */
NotificationRuleDiscriminator.prototype['tagRules'] = undefined;
/**
 * The ID of the task associated with this notification rule.
 * @member {String} taskID
 */
NotificationRuleDiscriminator.prototype['taskID'] = undefined;
/**
 * @member {Date} updatedAt
 */
NotificationRuleDiscriminator.prototype['updatedAt'] = undefined;
/**
 * @member {String} channel
 */
NotificationRuleDiscriminator.prototype['channel'] = undefined;
/**
 * The message template as a flux interpolated string.
 * @member {String} messageTemplate
 */
NotificationRuleDiscriminator.prototype['messageTemplate'] = undefined;
/**
 * @member {module:model/NotificationRuleDiscriminator.TypeEnum} type
 */
NotificationRuleDiscriminator.prototype['type'] = undefined;
/**
 * @member {String} bodyTemplate
 */
NotificationRuleDiscriminator.prototype['bodyTemplate'] = undefined;
/**
 * @member {String} subjectTemplate
 */
NotificationRuleDiscriminator.prototype['subjectTemplate'] = undefined;
/**
 * @member {String} to
 */
NotificationRuleDiscriminator.prototype['to'] = undefined;
/**
 * @member {String} url
 */
NotificationRuleDiscriminator.prototype['url'] = undefined;
/**
 * Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .
 * @member {Boolean} disableWebPagePreview
 */
NotificationRuleDiscriminator.prototype['disableWebPagePreview'] = undefined;
/**
 * Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .
 * @member {module:model/NotificationRuleDiscriminator.ParseModeEnum} parseMode
 */
NotificationRuleDiscriminator.prototype['parseMode'] = undefined;




export default NotificationRule;

