/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RoutesQuery model module.
 * @module model/RoutesQuery
 * @version 2.0.0
 */
class RoutesQuery {
    /**
     * Constructs a new <code>RoutesQuery</code>.
     * @alias module:model/RoutesQuery
     */
    constructor() { 
        
        RoutesQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoutesQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoutesQuery} obj Optional instance to populate.
     * @return {module:model/RoutesQuery} The populated <code>RoutesQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoutesQuery();

            if (data.hasOwnProperty('analyze')) {
                obj['analyze'] = ApiClient.convertToType(data['analyze'], 'String');
            }
            if (data.hasOwnProperty('ast')) {
                obj['ast'] = ApiClient.convertToType(data['ast'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('suggestions')) {
                obj['suggestions'] = ApiClient.convertToType(data['suggestions'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoutesQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoutesQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['analyze'] && !(typeof data['analyze'] === 'string' || data['analyze'] instanceof String)) {
            throw new Error("Expected the field `analyze` to be a primitive type in the JSON string but got " + data['analyze']);
        }
        // ensure the json data is a string
        if (data['ast'] && !(typeof data['ast'] === 'string' || data['ast'] instanceof String)) {
            throw new Error("Expected the field `ast` to be a primitive type in the JSON string but got " + data['ast']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // ensure the json data is a string
        if (data['suggestions'] && !(typeof data['suggestions'] === 'string' || data['suggestions'] instanceof String)) {
            throw new Error("Expected the field `suggestions` to be a primitive type in the JSON string but got " + data['suggestions']);
        }

        return true;
    }


}



/**
 * @member {String} analyze
 */
RoutesQuery.prototype['analyze'] = undefined;

/**
 * @member {String} ast
 */
RoutesQuery.prototype['ast'] = undefined;

/**
 * @member {String} self
 */
RoutesQuery.prototype['self'] = undefined;

/**
 * @member {String} suggestions
 */
RoutesQuery.prototype['suggestions'] = undefined;






export default RoutesQuery;

