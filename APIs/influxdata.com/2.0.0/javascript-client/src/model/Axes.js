/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Axis from './Axis';

/**
 * The Axes model module.
 * @module model/Axes
 * @version 2.0.0
 */
class Axes {
    /**
     * Constructs a new <code>Axes</code>.
     * The viewport for a View&#39;s visualizations
     * @alias module:model/Axes
     * @param x {module:model/Axis} 
     * @param y {module:model/Axis} 
     */
    constructor(x, y) { 
        
        Axes.initialize(this, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, x, y) { 
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>Axes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Axes} obj Optional instance to populate.
     * @return {module:model/Axes} The populated <code>Axes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Axes();

            if (data.hasOwnProperty('x')) {
                obj['x'] = Axis.constructFromObject(data['x']);
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = Axis.constructFromObject(data['y']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Axes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Axes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Axes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `x`
        if (data['x']) { // data not null
          Axis.validateJSON(data['x']);
        }
        // validate the optional field `y`
        if (data['y']) { // data not null
          Axis.validateJSON(data['y']);
        }

        return true;
    }


}

Axes.RequiredProperties = ["x", "y"];

/**
 * @member {module:model/Axis} x
 */
Axes.prototype['x'] = undefined;

/**
 * @member {module:model/Axis} y
 */
Axes.prototype['y'] = undefined;






export default Axes;

