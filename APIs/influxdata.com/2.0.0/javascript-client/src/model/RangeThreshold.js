/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckStatusLevel from './CheckStatusLevel';
import ThresholdBase from './ThresholdBase';

/**
 * The RangeThreshold model module.
 * @module model/RangeThreshold
 * @version 2.0.0
 */
class RangeThreshold {
    /**
     * Constructs a new <code>RangeThreshold</code>.
     * @alias module:model/RangeThreshold
     * @implements module:model/ThresholdBase
     * @param max {Number} 
     * @param min {Number} 
     * @param type {module:model/RangeThreshold.TypeEnum} 
     * @param within {Boolean} 
     */
    constructor(max, min, type, within) { 
        ThresholdBase.initialize(this);
        RangeThreshold.initialize(this, max, min, type, within);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, max, min, type, within) { 
        obj['max'] = max;
        obj['min'] = min;
        obj['type'] = type;
        obj['within'] = within;
    }

    /**
     * Constructs a <code>RangeThreshold</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RangeThreshold} obj Optional instance to populate.
     * @return {module:model/RangeThreshold} The populated <code>RangeThreshold</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RangeThreshold();
            ThresholdBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('allValues')) {
                obj['allValues'] = ApiClient.convertToType(data['allValues'], 'Boolean');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = CheckStatusLevel.constructFromObject(data['level']);
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('min')) {
                obj['min'] = ApiClient.convertToType(data['min'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('within')) {
                obj['within'] = ApiClient.convertToType(data['within'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RangeThreshold</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RangeThreshold</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RangeThreshold.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RangeThreshold.RequiredProperties = ["max", "min", "type", "within"];

/**
 * If true, only alert if all values meet threshold.
 * @member {Boolean} allValues
 */
RangeThreshold.prototype['allValues'] = undefined;

/**
 * @member {module:model/CheckStatusLevel} level
 */
RangeThreshold.prototype['level'] = undefined;

/**
 * @member {Number} max
 */
RangeThreshold.prototype['max'] = undefined;

/**
 * @member {Number} min
 */
RangeThreshold.prototype['min'] = undefined;

/**
 * @member {module:model/RangeThreshold.TypeEnum} type
 */
RangeThreshold.prototype['type'] = undefined;

/**
 * @member {Boolean} within
 */
RangeThreshold.prototype['within'] = undefined;


// Implement ThresholdBase interface:
/**
 * If true, only alert if all values meet threshold.
 * @member {Boolean} allValues
 */
ThresholdBase.prototype['allValues'] = undefined;
/**
 * @member {module:model/CheckStatusLevel} level
 */
ThresholdBase.prototype['level'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RangeThreshold['TypeEnum'] = {

    /**
     * value: "range"
     * @const
     */
    "range": "range"
};



export default RangeThreshold;

