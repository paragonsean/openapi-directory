/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Expression from './Expression';
import Identifier from './Identifier';
import MemberAssignment from './MemberAssignment';
import MemberExpression from './MemberExpression';
import VariableAssignment from './VariableAssignment';

/**
 * The OptionStatementAssignment model module.
 * @module model/OptionStatementAssignment
 * @version 2.0.0
 */
class OptionStatementAssignment {
    /**
     * Constructs a new <code>OptionStatementAssignment</code>.
     * @alias module:model/OptionStatementAssignment
     * @param {(module:model/MemberAssignment|module:model/VariableAssignment)} instance The actual instance to initialize OptionStatementAssignment.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "VariableAssignment") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VariableAssignment.validateJSON(instance); // throw an exception if no match
                // create VariableAssignment from JS object
                this.actualInstance = VariableAssignment.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VariableAssignment
            errorMessages.push("Failed to construct VariableAssignment: " + err)
        }

        try {
            if (typeof instance === "MemberAssignment") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MemberAssignment.validateJSON(instance); // throw an exception if no match
                // create MemberAssignment from JS object
                this.actualInstance = MemberAssignment.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MemberAssignment
            errorMessages.push("Failed to construct MemberAssignment: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `OptionStatementAssignment` with oneOf schemas MemberAssignment, VariableAssignment. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `OptionStatementAssignment` with oneOf schemas MemberAssignment, VariableAssignment. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>OptionStatementAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OptionStatementAssignment} obj Optional instance to populate.
     * @return {module:model/OptionStatementAssignment} The populated <code>OptionStatementAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        return new OptionStatementAssignment(data);
    }

    /**
     * Gets the actual instance, which can be <code>MemberAssignment</code>, <code>VariableAssignment</code>.
     * @return {(module:model/MemberAssignment|module:model/VariableAssignment)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>MemberAssignment</code>, <code>VariableAssignment</code>.
     * @param {(module:model/MemberAssignment|module:model/VariableAssignment)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = OptionStatementAssignment.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of OptionStatementAssignment from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/OptionStatementAssignment} An instance of OptionStatementAssignment.
     */
    static fromJSON = function(json_string){
        return OptionStatementAssignment.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/Identifier} id
 */
OptionStatementAssignment.prototype['id'] = undefined;

/**
 * @member {module:model/Expression} init
 */
OptionStatementAssignment.prototype['init'] = undefined;

/**
 * Type of AST node
 * @member {String} type
 */
OptionStatementAssignment.prototype['type'] = undefined;

/**
 * @member {module:model/MemberExpression} member
 */
OptionStatementAssignment.prototype['member'] = undefined;


OptionStatementAssignment.OneOf = ["MemberAssignment", "VariableAssignment"];

export default OptionStatementAssignment;

