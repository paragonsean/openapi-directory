/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuilderConfig from './BuilderConfig';
import QueryEditMode from './QueryEditMode';

/**
 * The DashboardQuery model module.
 * @module model/DashboardQuery
 * @version 2.0.0
 */
class DashboardQuery {
    /**
     * Constructs a new <code>DashboardQuery</code>.
     * @alias module:model/DashboardQuery
     */
    constructor() { 
        
        DashboardQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DashboardQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardQuery} obj Optional instance to populate.
     * @return {module:model/DashboardQuery} The populated <code>DashboardQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardQuery();

            if (data.hasOwnProperty('builderConfig')) {
                obj['builderConfig'] = BuilderConfig.constructFromObject(data['builderConfig']);
            }
            if (data.hasOwnProperty('editMode')) {
                obj['editMode'] = QueryEditMode.constructFromObject(data['editMode']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardQuery</code>.
     */
    static validateJSON(data) {
        // validate the optional field `builderConfig`
        if (data['builderConfig']) { // data not null
          BuilderConfig.validateJSON(data['builderConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * @member {module:model/BuilderConfig} builderConfig
 */
DashboardQuery.prototype['builderConfig'] = undefined;

/**
 * @member {module:model/QueryEditMode} editMode
 */
DashboardQuery.prototype['editMode'] = undefined;

/**
 * @member {String} name
 */
DashboardQuery.prototype['name'] = undefined;

/**
 * The text of the Flux query.
 * @member {String} text
 */
DashboardQuery.prototype['text'] = undefined;






export default DashboardQuery;

