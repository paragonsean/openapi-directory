/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Error model module.
 * @module model/Error
 * @version 2.0.0
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * @alias module:model/Error
     * @param code {module:model/Error.CodeEnum} code is the machine-readable error code.
     * @param message {String} message is a human-readable message.
     */
    constructor(code, message) { 
        
        Error.initialize(this, code, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, message) { 
        obj['code'] = code;
        obj['message'] = message;
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('err')) {
                obj['err'] = ApiClient.convertToType(data['err'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Error.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['err'] && !(typeof data['err'] === 'string' || data['err'] instanceof String)) {
            throw new Error("Expected the field `err` to be a primitive type in the JSON string but got " + data['err']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }

        return true;
    }


}

Error.RequiredProperties = ["code", "message"];

/**
 * code is the machine-readable error code.
 * @member {module:model/Error.CodeEnum} code
 */
Error.prototype['code'] = undefined;

/**
 * err is a stack of errors that occurred during processing of the request. Useful for debugging.
 * @member {String} err
 */
Error.prototype['err'] = undefined;

/**
 * message is a human-readable message.
 * @member {String} message
 */
Error.prototype['message'] = undefined;

/**
 * op describes the logical code operation during error. Useful for debugging.
 * @member {String} op
 */
Error.prototype['op'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
Error['CodeEnum'] = {

    /**
     * value: "internal error"
     * @const
     */
    "internal error": "internal error",

    /**
     * value: "not found"
     * @const
     */
    "not found": "not found",

    /**
     * value: "conflict"
     * @const
     */
    "conflict": "conflict",

    /**
     * value: "invalid"
     * @const
     */
    "invalid": "invalid",

    /**
     * value: "unprocessable entity"
     * @const
     */
    "unprocessable entity": "unprocessable entity",

    /**
     * value: "empty value"
     * @const
     */
    "empty value": "empty value",

    /**
     * value: "unavailable"
     * @const
     */
    "unavailable": "unavailable",

    /**
     * value: "forbidden"
     * @const
     */
    "forbidden": "forbidden",

    /**
     * value: "too many requests"
     * @const
     */
    "too many requests": "too many requests",

    /**
     * value: "unauthorized"
     * @const
     */
    "unauthorized": "unauthorized",

    /**
     * value: "method not allowed"
     * @const
     */
    "method not allowed": "method not allowed",

    /**
     * value: "request too large"
     * @const
     */
    "request too large": "request too large",

    /**
     * value: "unsupported media type"
     * @const
     */
    "unsupported media type": "unsupported media type"
};



export default Error;

