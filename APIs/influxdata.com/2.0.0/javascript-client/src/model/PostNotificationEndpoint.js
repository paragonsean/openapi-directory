/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';
import NotificationEndpointBaseLinks from './NotificationEndpointBaseLinks';
import NotificationEndpointDiscriminator from './NotificationEndpointDiscriminator';
import NotificationEndpointType from './NotificationEndpointType';

/**
 * The PostNotificationEndpoint model module.
 * @module model/PostNotificationEndpoint
 * @version 2.0.0
 */
class PostNotificationEndpoint {
    /**
     * Constructs a new <code>PostNotificationEndpoint</code>.
     * @alias module:model/PostNotificationEndpoint
     * @extends module:model/NotificationEndpointDiscriminator
     * @implements module:model/NotificationEndpointDiscriminator
     * @param name {String} 
     * @param type {module:model/NotificationEndpointType} 
     * @param token {String} Specifies the Telegram bot token. See https://core.telegram.org/bots#creating-a-new-bot .
     * @param url {String} 
     * @param routingKey {String} 
     * @param authMethod {module:model/PostNotificationEndpoint.AuthMethodEnum} 
     * @param method {module:model/PostNotificationEndpoint.MethodEnum} 
     * @param channel {String} ID of the telegram channel, a chat_id in https://core.telegram.org/bots/api#sendmessage .
     */
    constructor(name, type, token, url, routingKey, authMethod, method, channel) { 
        NotificationEndpointDiscriminator.initialize(this, name, type, token, url, routingKey, authMethod, method, channel);
        PostNotificationEndpoint.initialize(this, name, type, token, url, routingKey, authMethod, method, channel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, token, url, routingKey, authMethod, method, channel) { 
    }

    /**
     * Constructs a <code>PostNotificationEndpoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostNotificationEndpoint} obj Optional instance to populate.
     * @return {module:model/PostNotificationEndpoint} The populated <code>PostNotificationEndpoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostNotificationEndpoint();
            NotificationEndpointDiscriminator.constructFromObject(data, obj);
            NotificationEndpointDiscriminator.constructFromObject(data, obj);

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostNotificationEndpoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostNotificationEndpoint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostNotificationEndpoint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

PostNotificationEndpoint.RequiredProperties = ["name", "type", "token", "url", "routingKey", "authMethod", "method", "channel"];


// Implement NotificationEndpointDiscriminator interface:
/**
 * @member {Date} createdAt
 */
NotificationEndpointDiscriminator.prototype['createdAt'] = undefined;
/**
 * An optional description of the notification endpoint.
 * @member {String} description
 */
NotificationEndpointDiscriminator.prototype['description'] = undefined;
/**
 * @member {String} id
 */
NotificationEndpointDiscriminator.prototype['id'] = undefined;
/**
 * @member {Array.<module:model/Label>} labels
 */
NotificationEndpointDiscriminator.prototype['labels'] = undefined;
/**
 * @member {module:model/NotificationEndpointBaseLinks} links
 */
NotificationEndpointDiscriminator.prototype['links'] = undefined;
/**
 * @member {String} name
 */
NotificationEndpointDiscriminator.prototype['name'] = undefined;
/**
 * @member {String} orgID
 */
NotificationEndpointDiscriminator.prototype['orgID'] = undefined;
/**
 * The status of the endpoint.
 * @member {module:model/NotificationEndpointDiscriminator.StatusEnum} status
 * @default 'active'
 */
NotificationEndpointDiscriminator.prototype['status'] = 'active';
/**
 * @member {module:model/NotificationEndpointType} type
 */
NotificationEndpointDiscriminator.prototype['type'] = undefined;
/**
 * @member {Date} updatedAt
 */
NotificationEndpointDiscriminator.prototype['updatedAt'] = undefined;
/**
 * @member {String} userID
 */
NotificationEndpointDiscriminator.prototype['userID'] = undefined;
/**
 * Specifies the Telegram bot token. See https://core.telegram.org/bots#creating-a-new-bot .
 * @member {String} token
 */
NotificationEndpointDiscriminator.prototype['token'] = undefined;
/**
 * @member {String} url
 */
NotificationEndpointDiscriminator.prototype['url'] = undefined;
/**
 * @member {String} clientURL
 */
NotificationEndpointDiscriminator.prototype['clientURL'] = undefined;
/**
 * @member {String} routingKey
 */
NotificationEndpointDiscriminator.prototype['routingKey'] = undefined;
/**
 * @member {module:model/NotificationEndpointDiscriminator.AuthMethodEnum} authMethod
 */
NotificationEndpointDiscriminator.prototype['authMethod'] = undefined;
/**
 * @member {String} contentTemplate
 */
NotificationEndpointDiscriminator.prototype['contentTemplate'] = undefined;
/**
 * Customized headers.
 * @member {Object.<String, String>} headers
 */
NotificationEndpointDiscriminator.prototype['headers'] = undefined;
/**
 * @member {module:model/NotificationEndpointDiscriminator.MethodEnum} method
 */
NotificationEndpointDiscriminator.prototype['method'] = undefined;
/**
 * @member {String} password
 */
NotificationEndpointDiscriminator.prototype['password'] = undefined;
/**
 * @member {String} username
 */
NotificationEndpointDiscriminator.prototype['username'] = undefined;
/**
 * ID of the telegram channel, a chat_id in https://core.telegram.org/bots/api#sendmessage .
 * @member {String} channel
 */
NotificationEndpointDiscriminator.prototype['channel'] = undefined;




export default PostNotificationEndpoint;

