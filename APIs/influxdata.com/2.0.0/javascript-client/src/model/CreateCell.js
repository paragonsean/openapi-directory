/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateCell model module.
 * @module model/CreateCell
 * @version 2.0.0
 */
class CreateCell {
    /**
     * Constructs a new <code>CreateCell</code>.
     * @alias module:model/CreateCell
     */
    constructor() { 
        
        CreateCell.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateCell</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCell} obj Optional instance to populate.
     * @return {module:model/CreateCell} The populated <code>CreateCell</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCell();

            if (data.hasOwnProperty('h')) {
                obj['h'] = ApiClient.convertToType(data['h'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('usingView')) {
                obj['usingView'] = ApiClient.convertToType(data['usingView'], 'String');
            }
            if (data.hasOwnProperty('w')) {
                obj['w'] = ApiClient.convertToType(data['w'], 'Number');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCell</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCell</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['usingView'] && !(typeof data['usingView'] === 'string' || data['usingView'] instanceof String)) {
            throw new Error("Expected the field `usingView` to be a primitive type in the JSON string but got " + data['usingView']);
        }

        return true;
    }


}



/**
 * @member {Number} h
 */
CreateCell.prototype['h'] = undefined;

/**
 * @member {String} name
 */
CreateCell.prototype['name'] = undefined;

/**
 * Makes a copy of the provided view.
 * @member {String} usingView
 */
CreateCell.prototype['usingView'] = undefined;

/**
 * @member {Number} w
 */
CreateCell.prototype['w'] = undefined;

/**
 * @member {Number} x
 */
CreateCell.prototype['x'] = undefined;

/**
 * @member {Number} y
 */
CreateCell.prototype['y'] = undefined;






export default CreateCell;

