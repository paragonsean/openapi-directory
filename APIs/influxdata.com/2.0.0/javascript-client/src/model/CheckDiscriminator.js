/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckBaseLinks from './CheckBaseLinks';
import CheckStatusLevel from './CheckStatusLevel';
import CustomCheck from './CustomCheck';
import DashboardQuery from './DashboardQuery';
import DeadmanCheck from './DeadmanCheck';
import DeadmanCheckAllOfTags from './DeadmanCheckAllOfTags';
import Label from './Label';
import TaskStatusType from './TaskStatusType';
import Threshold from './Threshold';
import ThresholdCheck from './ThresholdCheck';

/**
 * The CheckDiscriminator model module.
 * @module model/CheckDiscriminator
 * @version 2.0.0
 */
class CheckDiscriminator {
    /**
     * Constructs a new <code>CheckDiscriminator</code>.
     * @alias module:model/CheckDiscriminator
     * @param {(module:model/CustomCheck|module:model/DeadmanCheck|module:model/ThresholdCheck)} instance The actual instance to initialize CheckDiscriminator.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "DeadmanCheck") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DeadmanCheck.validateJSON(instance); // throw an exception if no match
                // create DeadmanCheck from JS object
                this.actualInstance = DeadmanCheck.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DeadmanCheck
            errorMessages.push("Failed to construct DeadmanCheck: " + err)
        }

        try {
            if (typeof instance === "ThresholdCheck") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ThresholdCheck.validateJSON(instance); // throw an exception if no match
                // create ThresholdCheck from JS object
                this.actualInstance = ThresholdCheck.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ThresholdCheck
            errorMessages.push("Failed to construct ThresholdCheck: " + err)
        }

        try {
            if (typeof instance === "CustomCheck") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CustomCheck.validateJSON(instance); // throw an exception if no match
                // create CustomCheck from JS object
                this.actualInstance = CustomCheck.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CustomCheck
            errorMessages.push("Failed to construct CustomCheck: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CheckDiscriminator` with oneOf schemas CustomCheck, DeadmanCheck, ThresholdCheck. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CheckDiscriminator` with oneOf schemas CustomCheck, DeadmanCheck, ThresholdCheck. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CheckDiscriminator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckDiscriminator} obj Optional instance to populate.
     * @return {module:model/CheckDiscriminator} The populated <code>CheckDiscriminator</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CheckDiscriminator(data);
    }

    /**
     * Gets the actual instance, which can be <code>CustomCheck</code>, <code>DeadmanCheck</code>, <code>ThresholdCheck</code>.
     * @return {(module:model/CustomCheck|module:model/DeadmanCheck|module:model/ThresholdCheck)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CustomCheck</code>, <code>DeadmanCheck</code>, <code>ThresholdCheck</code>.
     * @param {(module:model/CustomCheck|module:model/DeadmanCheck|module:model/ThresholdCheck)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CheckDiscriminator.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CheckDiscriminator from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CheckDiscriminator} An instance of CheckDiscriminator.
     */
    static fromJSON = function(json_string){
        return CheckDiscriminator.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Date} createdAt
 */
CheckDiscriminator.prototype['createdAt'] = undefined;

/**
 * An optional description of the check.
 * @member {String} description
 */
CheckDiscriminator.prototype['description'] = undefined;

/**
 * @member {String} id
 */
CheckDiscriminator.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
CheckDiscriminator.prototype['labels'] = undefined;

/**
 * @member {String} lastRunError
 */
CheckDiscriminator.prototype['lastRunError'] = undefined;

/**
 * @member {module:model/CheckDiscriminator.LastRunStatusEnum} lastRunStatus
 */
CheckDiscriminator.prototype['lastRunStatus'] = undefined;

/**
 * Timestamp of latest scheduled, completed run, RFC3339.
 * @member {Date} latestCompleted
 */
CheckDiscriminator.prototype['latestCompleted'] = undefined;

/**
 * @member {module:model/CheckBaseLinks} links
 */
CheckDiscriminator.prototype['links'] = undefined;

/**
 * @member {String} name
 */
CheckDiscriminator.prototype['name'] = undefined;

/**
 * The ID of the organization that owns this check.
 * @member {String} orgID
 */
CheckDiscriminator.prototype['orgID'] = undefined;

/**
 * The ID of creator used to create this check.
 * @member {String} ownerID
 */
CheckDiscriminator.prototype['ownerID'] = undefined;

/**
 * @member {module:model/DashboardQuery} query
 */
CheckDiscriminator.prototype['query'] = undefined;

/**
 * @member {module:model/TaskStatusType} status
 */
CheckDiscriminator.prototype['status'] = undefined;

/**
 * The ID of the task associated with this check.
 * @member {String} taskID
 */
CheckDiscriminator.prototype['taskID'] = undefined;

/**
 * @member {Date} updatedAt
 */
CheckDiscriminator.prototype['updatedAt'] = undefined;

/**
 * Check repetition interval.
 * @member {String} every
 */
CheckDiscriminator.prototype['every'] = undefined;

/**
 * @member {module:model/CheckStatusLevel} level
 */
CheckDiscriminator.prototype['level'] = undefined;

/**
 * Duration to delay after the schedule, before executing check.
 * @member {String} offset
 */
CheckDiscriminator.prototype['offset'] = undefined;

/**
 * If only zero values reported since time, trigger an alert
 * @member {Boolean} reportZero
 */
CheckDiscriminator.prototype['reportZero'] = undefined;

/**
 * String duration for time that a series is considered stale and should not trigger deadman.
 * @member {String} staleTime
 */
CheckDiscriminator.prototype['staleTime'] = undefined;

/**
 * The template used to generate and write a status message.
 * @member {String} statusMessageTemplate
 */
CheckDiscriminator.prototype['statusMessageTemplate'] = undefined;

/**
 * List of tags to write to each status.
 * @member {Array.<module:model/DeadmanCheckAllOfTags>} tags
 */
CheckDiscriminator.prototype['tags'] = undefined;

/**
 * String duration before deadman triggers.
 * @member {String} timeSince
 */
CheckDiscriminator.prototype['timeSince'] = undefined;

/**
 * @member {module:model/CheckDiscriminator.TypeEnum} type
 */
CheckDiscriminator.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/Threshold>} thresholds
 */
CheckDiscriminator.prototype['thresholds'] = undefined;


CheckDiscriminator.OneOf = ["CustomCheck", "DeadmanCheck", "ThresholdCheck"];

export default CheckDiscriminator;

