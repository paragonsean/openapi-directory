/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateDashboardRequest model module.
 * @module model/CreateDashboardRequest
 * @version 2.0.0
 */
class CreateDashboardRequest {
    /**
     * Constructs a new <code>CreateDashboardRequest</code>.
     * @alias module:model/CreateDashboardRequest
     * @param name {String} The user-facing name of the dashboard.
     * @param orgID {String} The ID of the organization that owns the dashboard.
     */
    constructor(name, orgID) { 
        
        CreateDashboardRequest.initialize(this, name, orgID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, orgID) { 
        obj['name'] = name;
        obj['orgID'] = orgID;
    }

    /**
     * Constructs a <code>CreateDashboardRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDashboardRequest} obj Optional instance to populate.
     * @return {module:model/CreateDashboardRequest} The populated <code>CreateDashboardRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDashboardRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDashboardRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDashboardRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDashboardRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }

        return true;
    }


}

CreateDashboardRequest.RequiredProperties = ["name", "orgID"];

/**
 * The user-facing description of the dashboard.
 * @member {String} description
 */
CreateDashboardRequest.prototype['description'] = undefined;

/**
 * The user-facing name of the dashboard.
 * @member {String} name
 */
CreateDashboardRequest.prototype['name'] = undefined;

/**
 * The ID of the organization that owns the dashboard.
 * @member {String} orgID
 */
CreateDashboardRequest.prototype['orgID'] = undefined;






export default CreateDashboardRequest;

