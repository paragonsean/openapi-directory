/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Check from './Check';
import DashboardColor from './DashboardColor';
import DashboardQuery from './DashboardQuery';

/**
 * The CheckViewProperties model module.
 * @module model/CheckViewProperties
 * @version 2.0.0
 */
class CheckViewProperties {
    /**
     * Constructs a new <code>CheckViewProperties</code>.
     * @alias module:model/CheckViewProperties
     * @param checkID {String} 
     * @param colors {Array.<module:model/DashboardColor>} Colors define color encoding of data into a visualization
     * @param queries {Array.<module:model/DashboardQuery>} 
     * @param shape {module:model/CheckViewProperties.ShapeEnum} 
     * @param type {module:model/CheckViewProperties.TypeEnum} 
     */
    constructor(checkID, colors, queries, shape, type) { 
        
        CheckViewProperties.initialize(this, checkID, colors, queries, shape, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, checkID, colors, queries, shape, type) { 
        obj['checkID'] = checkID;
        obj['colors'] = colors;
        obj['queries'] = queries;
        obj['shape'] = shape;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CheckViewProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckViewProperties} obj Optional instance to populate.
     * @return {module:model/CheckViewProperties} The populated <code>CheckViewProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckViewProperties();

            if (data.hasOwnProperty('check')) {
                obj['check'] = Check.constructFromObject(data['check']);
            }
            if (data.hasOwnProperty('checkID')) {
                obj['checkID'] = ApiClient.convertToType(data['checkID'], 'String');
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], [DashboardColor]);
            }
            if (data.hasOwnProperty('legendColorizeRows')) {
                obj['legendColorizeRows'] = ApiClient.convertToType(data['legendColorizeRows'], 'Boolean');
            }
            if (data.hasOwnProperty('legendHide')) {
                obj['legendHide'] = ApiClient.convertToType(data['legendHide'], 'Boolean');
            }
            if (data.hasOwnProperty('legendOpacity')) {
                obj['legendOpacity'] = ApiClient.convertToType(data['legendOpacity'], 'Number');
            }
            if (data.hasOwnProperty('legendOrientationThreshold')) {
                obj['legendOrientationThreshold'] = ApiClient.convertToType(data['legendOrientationThreshold'], 'Number');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], [DashboardQuery]);
            }
            if (data.hasOwnProperty('shape')) {
                obj['shape'] = ApiClient.convertToType(data['shape'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckViewProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckViewProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckViewProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `check`
        if (data['check']) { // data not null
          Check.validateJSON(data['check']);
        }
        // ensure the json data is a string
        if (data['checkID'] && !(typeof data['checkID'] === 'string' || data['checkID'] instanceof String)) {
            throw new Error("Expected the field `checkID` to be a primitive type in the JSON string but got " + data['checkID']);
        }
        if (data['colors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['colors'])) {
                throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
            }
            // validate the optional field `colors` (array)
            for (const item of data['colors']) {
                DashboardColor.validateJSON(item);
            };
        }
        if (data['queries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queries'])) {
                throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
            }
            // validate the optional field `queries` (array)
            for (const item of data['queries']) {
                DashboardQuery.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shape'] && !(typeof data['shape'] === 'string' || data['shape'] instanceof String)) {
            throw new Error("Expected the field `shape` to be a primitive type in the JSON string but got " + data['shape']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CheckViewProperties.RequiredProperties = ["checkID", "colors", "queries", "shape", "type"];

/**
 * @member {module:model/Check} check
 */
CheckViewProperties.prototype['check'] = undefined;

/**
 * @member {String} checkID
 */
CheckViewProperties.prototype['checkID'] = undefined;

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<module:model/DashboardColor>} colors
 */
CheckViewProperties.prototype['colors'] = undefined;

/**
 * @member {Boolean} legendColorizeRows
 */
CheckViewProperties.prototype['legendColorizeRows'] = undefined;

/**
 * @member {Boolean} legendHide
 */
CheckViewProperties.prototype['legendHide'] = undefined;

/**
 * @member {Number} legendOpacity
 */
CheckViewProperties.prototype['legendOpacity'] = undefined;

/**
 * @member {Number} legendOrientationThreshold
 */
CheckViewProperties.prototype['legendOrientationThreshold'] = undefined;

/**
 * @member {Array.<module:model/DashboardQuery>} queries
 */
CheckViewProperties.prototype['queries'] = undefined;

/**
 * @member {module:model/CheckViewProperties.ShapeEnum} shape
 */
CheckViewProperties.prototype['shape'] = undefined;

/**
 * @member {module:model/CheckViewProperties.TypeEnum} type
 */
CheckViewProperties.prototype['type'] = undefined;





/**
 * Allowed values for the <code>shape</code> property.
 * @enum {String}
 * @readonly
 */
CheckViewProperties['ShapeEnum'] = {

    /**
     * value: "chronograf-v2"
     * @const
     */
    "chronograf-v2": "chronograf-v2"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CheckViewProperties['TypeEnum'] = {

    /**
     * value: "check"
     * @const
     */
    "check": "check"
};



export default CheckViewProperties;

