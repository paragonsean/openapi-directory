/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dialect from './Dialect';
import InfluxQLQuery from './InfluxQLQuery';
import Query from './Query';

/**
 * The PostQueryRequest model module.
 * @module model/PostQueryRequest
 * @version 2.0.0
 */
class PostQueryRequest {
    /**
     * Constructs a new <code>PostQueryRequest</code>.
     * @alias module:model/PostQueryRequest
     * @param {(module:model/InfluxQLQuery|module:model/Query)} instance The actual instance to initialize PostQueryRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Query") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Query.validateJSON(instance); // throw an exception if no match
                // create Query from JS object
                this.actualInstance = Query.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Query
            errorMessages.push("Failed to construct Query: " + err)
        }

        try {
            if (typeof instance === "InfluxQLQuery") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                InfluxQLQuery.validateJSON(instance); // throw an exception if no match
                // create InfluxQLQuery from JS object
                this.actualInstance = InfluxQLQuery.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into InfluxQLQuery
            errorMessages.push("Failed to construct InfluxQLQuery: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PostQueryRequest` with oneOf schemas InfluxQLQuery, Query. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PostQueryRequest` with oneOf schemas InfluxQLQuery, Query. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PostQueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostQueryRequest} obj Optional instance to populate.
     * @return {module:model/PostQueryRequest} The populated <code>PostQueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PostQueryRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>InfluxQLQuery</code>, <code>Query</code>.
     * @return {(module:model/InfluxQLQuery|module:model/Query)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>InfluxQLQuery</code>, <code>Query</code>.
     * @param {(module:model/InfluxQLQuery|module:model/Query)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PostQueryRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PostQueryRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PostQueryRequest} An instance of PostQueryRequest.
     */
    static fromJSON = function(json_string){
        return PostQueryRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/Dialect} dialect
 */
PostQueryRequest.prototype['dialect'] = undefined;

/**
 * @member {File} extern
 */
PostQueryRequest.prototype['extern'] = undefined;

/**
 * Specifies the time that should be reported as \"now\" in the query. Default is the server's now time.
 * @member {Date} now
 */
PostQueryRequest.prototype['now'] = undefined;

/**
 * Enumeration of key/value pairs that respresent parameters to be injected into query (can only specify either this field or extern and not both) 
 * @member {Object.<String, Object>} params
 */
PostQueryRequest.prototype['params'] = undefined;

/**
 * InfluxQL query execute.
 * @member {String} query
 */
PostQueryRequest.prototype['query'] = undefined;

/**
 * The type of query. Must be \"flux\".
 * @member {module:model/PostQueryRequest.TypeEnum} type
 */
PostQueryRequest.prototype['type'] = undefined;

/**
 * Bucket is to be used instead of the database and retention policy specified in the InfluxQL query.
 * @member {String} bucket
 */
PostQueryRequest.prototype['bucket'] = undefined;


PostQueryRequest.OneOf = ["InfluxQLQuery", "Query"];

export default PostQueryRequest;

