/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateApplyActionsInner from './TemplateApplyActionsInner';
import TemplateApplyEnvRefsValue from './TemplateApplyEnvRefsValue';
import TemplateApplyRemotesInner from './TemplateApplyRemotesInner';
import TemplateApplyTemplate from './TemplateApplyTemplate';

/**
 * The TemplateApply model module.
 * @module model/TemplateApply
 * @version 2.0.0
 */
class TemplateApply {
    /**
     * Constructs a new <code>TemplateApply</code>.
     * @alias module:model/TemplateApply
     */
    constructor() { 
        
        TemplateApply.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TemplateApply</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateApply} obj Optional instance to populate.
     * @return {module:model/TemplateApply} The populated <code>TemplateApply</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateApply();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [TemplateApplyActionsInner]);
            }
            if (data.hasOwnProperty('dryRun')) {
                obj['dryRun'] = ApiClient.convertToType(data['dryRun'], 'Boolean');
            }
            if (data.hasOwnProperty('envRefs')) {
                obj['envRefs'] = ApiClient.convertToType(data['envRefs'], {'String': TemplateApplyEnvRefsValue});
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('remotes')) {
                obj['remotes'] = ApiClient.convertToType(data['remotes'], [TemplateApplyRemotesInner]);
            }
            if (data.hasOwnProperty('secrets')) {
                obj['secrets'] = ApiClient.convertToType(data['secrets'], {'String': 'String'});
            }
            if (data.hasOwnProperty('stackID')) {
                obj['stackID'] = ApiClient.convertToType(data['stackID'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = TemplateApplyTemplate.constructFromObject(data['template']);
            }
            if (data.hasOwnProperty('templates')) {
                obj['templates'] = ApiClient.convertToType(data['templates'], [TemplateApplyTemplate]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateApply</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateApply</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                TemplateApplyActionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        if (data['remotes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['remotes'])) {
                throw new Error("Expected the field `remotes` to be an array in the JSON data but got " + data['remotes']);
            }
            // validate the optional field `remotes` (array)
            for (const item of data['remotes']) {
                TemplateApplyRemotesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stackID'] && !(typeof data['stackID'] === 'string' || data['stackID'] instanceof String)) {
            throw new Error("Expected the field `stackID` to be a primitive type in the JSON string but got " + data['stackID']);
        }
        // validate the optional field `template`
        if (data['template']) { // data not null
          TemplateApplyTemplate.validateJSON(data['template']);
        }
        if (data['templates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['templates'])) {
                throw new Error("Expected the field `templates` to be an array in the JSON data but got " + data['templates']);
            }
            // validate the optional field `templates` (array)
            for (const item of data['templates']) {
                TemplateApplyTemplate.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/TemplateApplyActionsInner>} actions
 */
TemplateApply.prototype['actions'] = undefined;

/**
 * @member {Boolean} dryRun
 */
TemplateApply.prototype['dryRun'] = undefined;

/**
 * @member {Object.<String, module:model/TemplateApplyEnvRefsValue>} envRefs
 */
TemplateApply.prototype['envRefs'] = undefined;

/**
 * @member {String} orgID
 */
TemplateApply.prototype['orgID'] = undefined;

/**
 * @member {Array.<module:model/TemplateApplyRemotesInner>} remotes
 */
TemplateApply.prototype['remotes'] = undefined;

/**
 * @member {Object.<String, String>} secrets
 */
TemplateApply.prototype['secrets'] = undefined;

/**
 * @member {String} stackID
 */
TemplateApply.prototype['stackID'] = undefined;

/**
 * @member {module:model/TemplateApplyTemplate} template
 */
TemplateApply.prototype['template'] = undefined;

/**
 * @member {Array.<module:model/TemplateApplyTemplate>} templates
 */
TemplateApply.prototype['templates'] = undefined;






export default TemplateApply;

