/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TagRule model module.
 * @module model/TagRule
 * @version 2.0.0
 */
class TagRule {
    /**
     * Constructs a new <code>TagRule</code>.
     * @alias module:model/TagRule
     */
    constructor() { 
        
        TagRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagRule} obj Optional instance to populate.
     * @return {module:model/TagRule} The populated <code>TagRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagRule();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {String} key
 */
TagRule.prototype['key'] = undefined;

/**
 * @member {module:model/TagRule.OperatorEnum} operator
 */
TagRule.prototype['operator'] = undefined;

/**
 * @member {String} value
 */
TagRule.prototype['value'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
TagRule['OperatorEnum'] = {

    /**
     * value: "equal"
     * @const
     */
    "equal": "equal",

    /**
     * value: "notequal"
     * @const
     */
    "notequal": "notequal",

    /**
     * value: "equalregex"
     * @const
     */
    "equalregex": "equalregex",

    /**
     * value: "notequalregex"
     * @const
     */
    "notequalregex": "notequalregex"
};



export default TagRule;

