/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Axes from './Axes';
import BandViewProperties from './BandViewProperties';
import Check from './Check';
import CheckViewProperties from './CheckViewProperties';
import DashboardColor from './DashboardColor';
import DashboardQuery from './DashboardQuery';
import DecimalPlaces from './DecimalPlaces';
import GaugeViewProperties from './GaugeViewProperties';
import GeoViewLayer from './GeoViewLayer';
import GeoViewProperties from './GeoViewProperties';
import GeoViewPropertiesCenter from './GeoViewPropertiesCenter';
import HeatmapViewProperties from './HeatmapViewProperties';
import HistogramViewProperties from './HistogramViewProperties';
import LinePlusSingleStatProperties from './LinePlusSingleStatProperties';
import MarkdownViewProperties from './MarkdownViewProperties';
import MosaicViewProperties from './MosaicViewProperties';
import RenamableField from './RenamableField';
import ScatterViewProperties from './ScatterViewProperties';
import SingleStatViewProperties from './SingleStatViewProperties';
import StaticLegend from './StaticLegend';
import TableViewProperties from './TableViewProperties';
import TableViewPropertiesTableOptions from './TableViewPropertiesTableOptions';
import XYGeom from './XYGeom';
import XYViewProperties from './XYViewProperties';

/**
 * The ViewProperties model module.
 * @module model/ViewProperties
 * @version 2.0.0
 */
class ViewProperties {
    /**
     * Constructs a new <code>ViewProperties</code>.
     * @alias module:model/ViewProperties
     * @param {(module:model/BandViewProperties|module:model/CheckViewProperties|module:model/GaugeViewProperties|module:model/GeoViewProperties|module:model/HeatmapViewProperties|module:model/HistogramViewProperties|module:model/LinePlusSingleStatProperties|module:model/MarkdownViewProperties|module:model/MosaicViewProperties|module:model/ScatterViewProperties|module:model/SingleStatViewProperties|module:model/TableViewProperties|module:model/XYViewProperties)} instance The actual instance to initialize ViewProperties.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "LinePlusSingleStatProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                LinePlusSingleStatProperties.validateJSON(instance); // throw an exception if no match
                // create LinePlusSingleStatProperties from JS object
                this.actualInstance = LinePlusSingleStatProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into LinePlusSingleStatProperties
            errorMessages.push("Failed to construct LinePlusSingleStatProperties: " + err)
        }

        try {
            if (typeof instance === "XYViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                XYViewProperties.validateJSON(instance); // throw an exception if no match
                // create XYViewProperties from JS object
                this.actualInstance = XYViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into XYViewProperties
            errorMessages.push("Failed to construct XYViewProperties: " + err)
        }

        try {
            if (typeof instance === "SingleStatViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SingleStatViewProperties.validateJSON(instance); // throw an exception if no match
                // create SingleStatViewProperties from JS object
                this.actualInstance = SingleStatViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SingleStatViewProperties
            errorMessages.push("Failed to construct SingleStatViewProperties: " + err)
        }

        try {
            if (typeof instance === "HistogramViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HistogramViewProperties.validateJSON(instance); // throw an exception if no match
                // create HistogramViewProperties from JS object
                this.actualInstance = HistogramViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HistogramViewProperties
            errorMessages.push("Failed to construct HistogramViewProperties: " + err)
        }

        try {
            if (typeof instance === "GaugeViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GaugeViewProperties.validateJSON(instance); // throw an exception if no match
                // create GaugeViewProperties from JS object
                this.actualInstance = GaugeViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GaugeViewProperties
            errorMessages.push("Failed to construct GaugeViewProperties: " + err)
        }

        try {
            if (typeof instance === "TableViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TableViewProperties.validateJSON(instance); // throw an exception if no match
                // create TableViewProperties from JS object
                this.actualInstance = TableViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TableViewProperties
            errorMessages.push("Failed to construct TableViewProperties: " + err)
        }

        try {
            if (typeof instance === "MarkdownViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MarkdownViewProperties.validateJSON(instance); // throw an exception if no match
                // create MarkdownViewProperties from JS object
                this.actualInstance = MarkdownViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MarkdownViewProperties
            errorMessages.push("Failed to construct MarkdownViewProperties: " + err)
        }

        try {
            if (typeof instance === "CheckViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckViewProperties.validateJSON(instance); // throw an exception if no match
                // create CheckViewProperties from JS object
                this.actualInstance = CheckViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckViewProperties
            errorMessages.push("Failed to construct CheckViewProperties: " + err)
        }

        try {
            if (typeof instance === "ScatterViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ScatterViewProperties.validateJSON(instance); // throw an exception if no match
                // create ScatterViewProperties from JS object
                this.actualInstance = ScatterViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ScatterViewProperties
            errorMessages.push("Failed to construct ScatterViewProperties: " + err)
        }

        try {
            if (typeof instance === "HeatmapViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HeatmapViewProperties.validateJSON(instance); // throw an exception if no match
                // create HeatmapViewProperties from JS object
                this.actualInstance = HeatmapViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HeatmapViewProperties
            errorMessages.push("Failed to construct HeatmapViewProperties: " + err)
        }

        try {
            if (typeof instance === "MosaicViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MosaicViewProperties.validateJSON(instance); // throw an exception if no match
                // create MosaicViewProperties from JS object
                this.actualInstance = MosaicViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MosaicViewProperties
            errorMessages.push("Failed to construct MosaicViewProperties: " + err)
        }

        try {
            if (typeof instance === "BandViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BandViewProperties.validateJSON(instance); // throw an exception if no match
                // create BandViewProperties from JS object
                this.actualInstance = BandViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BandViewProperties
            errorMessages.push("Failed to construct BandViewProperties: " + err)
        }

        try {
            if (typeof instance === "GeoViewProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GeoViewProperties.validateJSON(instance); // throw an exception if no match
                // create GeoViewProperties from JS object
                this.actualInstance = GeoViewProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GeoViewProperties
            errorMessages.push("Failed to construct GeoViewProperties: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ViewProperties` with oneOf schemas BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ViewProperties` with oneOf schemas BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ViewProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViewProperties} obj Optional instance to populate.
     * @return {module:model/ViewProperties} The populated <code>ViewProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ViewProperties(data);
    }

    /**
     * Gets the actual instance, which can be <code>BandViewProperties</code>, <code>CheckViewProperties</code>, <code>GaugeViewProperties</code>, <code>GeoViewProperties</code>, <code>HeatmapViewProperties</code>, <code>HistogramViewProperties</code>, <code>LinePlusSingleStatProperties</code>, <code>MarkdownViewProperties</code>, <code>MosaicViewProperties</code>, <code>ScatterViewProperties</code>, <code>SingleStatViewProperties</code>, <code>TableViewProperties</code>, <code>XYViewProperties</code>.
     * @return {(module:model/BandViewProperties|module:model/CheckViewProperties|module:model/GaugeViewProperties|module:model/GeoViewProperties|module:model/HeatmapViewProperties|module:model/HistogramViewProperties|module:model/LinePlusSingleStatProperties|module:model/MarkdownViewProperties|module:model/MosaicViewProperties|module:model/ScatterViewProperties|module:model/SingleStatViewProperties|module:model/TableViewProperties|module:model/XYViewProperties)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BandViewProperties</code>, <code>CheckViewProperties</code>, <code>GaugeViewProperties</code>, <code>GeoViewProperties</code>, <code>HeatmapViewProperties</code>, <code>HistogramViewProperties</code>, <code>LinePlusSingleStatProperties</code>, <code>MarkdownViewProperties</code>, <code>MosaicViewProperties</code>, <code>ScatterViewProperties</code>, <code>SingleStatViewProperties</code>, <code>TableViewProperties</code>, <code>XYViewProperties</code>.
     * @param {(module:model/BandViewProperties|module:model/CheckViewProperties|module:model/GaugeViewProperties|module:model/GeoViewProperties|module:model/HeatmapViewProperties|module:model/HistogramViewProperties|module:model/LinePlusSingleStatProperties|module:model/MarkdownViewProperties|module:model/MosaicViewProperties|module:model/ScatterViewProperties|module:model/SingleStatViewProperties|module:model/TableViewProperties|module:model/XYViewProperties)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ViewProperties.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ViewProperties from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ViewProperties} An instance of ViewProperties.
     */
    static fromJSON = function(json_string){
        return ViewProperties.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/Axes} axes
 */
ViewProperties.prototype['axes'] = undefined;

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<module:model/DashboardColor>} colors
 */
ViewProperties.prototype['colors'] = undefined;

/**
 * @member {module:model/DecimalPlaces} decimalPlaces
 */
ViewProperties.prototype['decimalPlaces'] = undefined;

/**
 * @member {Array.<String>} generateXAxisTicks
 */
ViewProperties.prototype['generateXAxisTicks'] = undefined;

/**
 * @member {Array.<String>} generateYAxisTicks
 */
ViewProperties.prototype['generateYAxisTicks'] = undefined;

/**
 * @member {module:model/ViewProperties.HoverDimensionEnum} hoverDimension
 */
ViewProperties.prototype['hoverDimension'] = undefined;

/**
 * @member {Boolean} legendColorizeRows
 */
ViewProperties.prototype['legendColorizeRows'] = undefined;

/**
 * @member {Boolean} legendHide
 */
ViewProperties.prototype['legendHide'] = undefined;

/**
 * @member {Number} legendOpacity
 */
ViewProperties.prototype['legendOpacity'] = undefined;

/**
 * @member {Number} legendOrientationThreshold
 */
ViewProperties.prototype['legendOrientationThreshold'] = undefined;

/**
 * @member {String} note
 */
ViewProperties.prototype['note'] = undefined;

/**
 * @member {module:model/ViewProperties.PositionEnum} position
 */
ViewProperties.prototype['position'] = undefined;

/**
 * @member {String} prefix
 */
ViewProperties.prototype['prefix'] = undefined;

/**
 * @member {Array.<module:model/DashboardQuery>} queries
 */
ViewProperties.prototype['queries'] = undefined;

/**
 * @member {Boolean} shadeBelow
 */
ViewProperties.prototype['shadeBelow'] = undefined;

/**
 * @member {module:model/ViewProperties.ShapeEnum} shape
 */
ViewProperties.prototype['shape'] = undefined;

/**
 * If true, will display note when empty
 * @member {Boolean} showNoteWhenEmpty
 */
ViewProperties.prototype['showNoteWhenEmpty'] = undefined;

/**
 * @member {module:model/StaticLegend} staticLegend
 */
ViewProperties.prototype['staticLegend'] = undefined;

/**
 * @member {String} suffix
 */
ViewProperties.prototype['suffix'] = undefined;

/**
 * @member {String} timeFormat
 */
ViewProperties.prototype['timeFormat'] = undefined;

/**
 * @member {module:model/ViewProperties.TypeEnum} type
 */
ViewProperties.prototype['type'] = undefined;

/**
 * @member {String} xColumn
 */
ViewProperties.prototype['xColumn'] = undefined;

/**
 * @member {Number} xTickStart
 */
ViewProperties.prototype['xTickStart'] = undefined;

/**
 * @member {Number} xTickStep
 */
ViewProperties.prototype['xTickStep'] = undefined;

/**
 * @member {Number} xTotalTicks
 */
ViewProperties.prototype['xTotalTicks'] = undefined;

/**
 * @member {String} yColumn
 */
ViewProperties.prototype['yColumn'] = undefined;

/**
 * @member {Number} yTickStart
 */
ViewProperties.prototype['yTickStart'] = undefined;

/**
 * @member {Number} yTickStep
 */
ViewProperties.prototype['yTickStep'] = undefined;

/**
 * @member {Number} yTotalTicks
 */
ViewProperties.prototype['yTotalTicks'] = undefined;

/**
 * @member {module:model/XYGeom} geom
 */
ViewProperties.prototype['geom'] = undefined;

/**
 * @member {String} tickPrefix
 */
ViewProperties.prototype['tickPrefix'] = undefined;

/**
 * @member {String} tickSuffix
 */
ViewProperties.prototype['tickSuffix'] = undefined;

/**
 * @member {Number} binCount
 */
ViewProperties.prototype['binCount'] = undefined;

/**
 * @member {Array.<String>} fillColumns
 */
ViewProperties.prototype['fillColumns'] = undefined;

/**
 * @member {String} xAxisLabel
 */
ViewProperties.prototype['xAxisLabel'] = undefined;

/**
 * @member {Array.<Number>} xDomain
 */
ViewProperties.prototype['xDomain'] = undefined;

/**
 * fieldOptions represent the fields retrieved by the query with customization options
 * @member {Array.<module:model/RenamableField>} fieldOptions
 */
ViewProperties.prototype['fieldOptions'] = undefined;

/**
 * @member {module:model/TableViewPropertiesTableOptions} tableOptions
 */
ViewProperties.prototype['tableOptions'] = undefined;

/**
 * @member {module:model/Check} check
 */
ViewProperties.prototype['check'] = undefined;

/**
 * @member {String} checkID
 */
ViewProperties.prototype['checkID'] = undefined;

/**
 * @member {Array.<String>} symbolColumns
 */
ViewProperties.prototype['symbolColumns'] = undefined;

/**
 * @member {String} xPrefix
 */
ViewProperties.prototype['xPrefix'] = undefined;

/**
 * @member {String} xSuffix
 */
ViewProperties.prototype['xSuffix'] = undefined;

/**
 * @member {String} yAxisLabel
 */
ViewProperties.prototype['yAxisLabel'] = undefined;

/**
 * @member {Array.<Number>} yDomain
 */
ViewProperties.prototype['yDomain'] = undefined;

/**
 * @member {String} yPrefix
 */
ViewProperties.prototype['yPrefix'] = undefined;

/**
 * @member {String} ySuffix
 */
ViewProperties.prototype['ySuffix'] = undefined;

/**
 * @member {Number} binSize
 */
ViewProperties.prototype['binSize'] = undefined;

/**
 * @member {String} yLabelColumnSeparator
 */
ViewProperties.prototype['yLabelColumnSeparator'] = undefined;

/**
 * @member {Array.<String>} yLabelColumns
 */
ViewProperties.prototype['yLabelColumns'] = undefined;

/**
 * @member {Array.<String>} ySeriesColumns
 */
ViewProperties.prototype['ySeriesColumns'] = undefined;

/**
 * @member {String} lowerColumn
 */
ViewProperties.prototype['lowerColumn'] = undefined;

/**
 * @member {String} mainColumn
 */
ViewProperties.prototype['mainColumn'] = undefined;

/**
 * @member {String} upperColumn
 */
ViewProperties.prototype['upperColumn'] = undefined;

/**
 * If true, map zoom and pan controls are enabled on the dashboard view
 * @member {Boolean} allowPanAndZoom
 * @default true
 */
ViewProperties.prototype['allowPanAndZoom'] = true;

/**
 * @member {module:model/GeoViewPropertiesCenter} center
 */
ViewProperties.prototype['center'] = undefined;

/**
 * If true, search results get automatically regroupped so that lon,lat and value are treated as columns
 * @member {Boolean} detectCoordinateFields
 * @default true
 */
ViewProperties.prototype['detectCoordinateFields'] = true;

/**
 * List of individual layers shown in the map
 * @member {Array.<module:model/GeoViewLayer>} layers
 */
ViewProperties.prototype['layers'] = undefined;

/**
 * Define map type - regular, satellite etc.
 * @member {String} mapStyle
 */
ViewProperties.prototype['mapStyle'] = undefined;

/**
 * Zoom level used for initial display of the map
 * @member {Number} zoom
 */
ViewProperties.prototype['zoom'] = undefined;


ViewProperties.OneOf = ["BandViewProperties", "CheckViewProperties", "GaugeViewProperties", "GeoViewProperties", "HeatmapViewProperties", "HistogramViewProperties", "LinePlusSingleStatProperties", "MarkdownViewProperties", "MosaicViewProperties", "ScatterViewProperties", "SingleStatViewProperties", "TableViewProperties", "XYViewProperties"];

export default ViewProperties;

