/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TelegramNotificationRuleBase model module.
 * @module model/TelegramNotificationRuleBase
 * @version 2.0.0
 */
class TelegramNotificationRuleBase {
    /**
     * Constructs a new <code>TelegramNotificationRuleBase</code>.
     * @alias module:model/TelegramNotificationRuleBase
     * @param messageTemplate {String} The message template as a flux interpolated string.
     * @param type {module:model/TelegramNotificationRuleBase.TypeEnum} The discriminator between other types of notification rules is \"telegram\".
     */
    constructor(messageTemplate, type) { 
        
        TelegramNotificationRuleBase.initialize(this, messageTemplate, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageTemplate, type) { 
        obj['messageTemplate'] = messageTemplate;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>TelegramNotificationRuleBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TelegramNotificationRuleBase} obj Optional instance to populate.
     * @return {module:model/TelegramNotificationRuleBase} The populated <code>TelegramNotificationRuleBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TelegramNotificationRuleBase();

            if (data.hasOwnProperty('disableWebPagePreview')) {
                obj['disableWebPagePreview'] = ApiClient.convertToType(data['disableWebPagePreview'], 'Boolean');
            }
            if (data.hasOwnProperty('messageTemplate')) {
                obj['messageTemplate'] = ApiClient.convertToType(data['messageTemplate'], 'String');
            }
            if (data.hasOwnProperty('parseMode')) {
                obj['parseMode'] = ApiClient.convertToType(data['parseMode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TelegramNotificationRuleBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TelegramNotificationRuleBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TelegramNotificationRuleBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['messageTemplate'] && !(typeof data['messageTemplate'] === 'string' || data['messageTemplate'] instanceof String)) {
            throw new Error("Expected the field `messageTemplate` to be a primitive type in the JSON string but got " + data['messageTemplate']);
        }
        // ensure the json data is a string
        if (data['parseMode'] && !(typeof data['parseMode'] === 'string' || data['parseMode'] instanceof String)) {
            throw new Error("Expected the field `parseMode` to be a primitive type in the JSON string but got " + data['parseMode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

TelegramNotificationRuleBase.RequiredProperties = ["messageTemplate", "type"];

/**
 * Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .
 * @member {Boolean} disableWebPagePreview
 */
TelegramNotificationRuleBase.prototype['disableWebPagePreview'] = undefined;

/**
 * The message template as a flux interpolated string.
 * @member {String} messageTemplate
 */
TelegramNotificationRuleBase.prototype['messageTemplate'] = undefined;

/**
 * Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .
 * @member {module:model/TelegramNotificationRuleBase.ParseModeEnum} parseMode
 */
TelegramNotificationRuleBase.prototype['parseMode'] = undefined;

/**
 * The discriminator between other types of notification rules is \"telegram\".
 * @member {module:model/TelegramNotificationRuleBase.TypeEnum} type
 */
TelegramNotificationRuleBase.prototype['type'] = undefined;





/**
 * Allowed values for the <code>parseMode</code> property.
 * @enum {String}
 * @readonly
 */
TelegramNotificationRuleBase['ParseModeEnum'] = {

    /**
     * value: "MarkdownV2"
     * @const
     */
    "MarkdownV2": "MarkdownV2",

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML",

    /**
     * value: "Markdown"
     * @const
     */
    "Markdown": "Markdown"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TelegramNotificationRuleBase['TypeEnum'] = {

    /**
     * value: "telegram"
     * @const
     */
    "telegram": "telegram"
};



export default TelegramNotificationRuleBase;

