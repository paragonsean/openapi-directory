/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScraperTargetRequest from './ScraperTargetRequest';
import ScraperTargetResponseAllOfLinks from './ScraperTargetResponseAllOfLinks';

/**
 * The ScraperTargetResponse model module.
 * @module model/ScraperTargetResponse
 * @version 2.0.0
 */
class ScraperTargetResponse {
    /**
     * Constructs a new <code>ScraperTargetResponse</code>.
     * @alias module:model/ScraperTargetResponse
     * @implements module:model/ScraperTargetRequest
     */
    constructor() { 
        ScraperTargetRequest.initialize(this);
        ScraperTargetResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['allowInsecure'] = false;
    }

    /**
     * Constructs a <code>ScraperTargetResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScraperTargetResponse} obj Optional instance to populate.
     * @return {module:model/ScraperTargetResponse} The populated <code>ScraperTargetResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScraperTargetResponse();
            ScraperTargetRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('allowInsecure')) {
                obj['allowInsecure'] = ApiClient.convertToType(data['allowInsecure'], 'Boolean');
            }
            if (data.hasOwnProperty('bucketID')) {
                obj['bucketID'] = ApiClient.convertToType(data['bucketID'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ScraperTargetResponseAllOfLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('org')) {
                obj['org'] = ApiClient.convertToType(data['org'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScraperTargetResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScraperTargetResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bucketID'] && !(typeof data['bucketID'] === 'string' || data['bucketID'] instanceof String)) {
            throw new Error("Expected the field `bucketID` to be a primitive type in the JSON string but got " + data['bucketID']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          ScraperTargetResponseAllOfLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['org'] && !(typeof data['org'] === 'string' || data['org'] instanceof String)) {
            throw new Error("Expected the field `org` to be a primitive type in the JSON string but got " + data['org']);
        }

        return true;
    }


}



/**
 * Skip TLS verification on endpoint.
 * @member {Boolean} allowInsecure
 * @default false
 */
ScraperTargetResponse.prototype['allowInsecure'] = false;

/**
 * The ID of the bucket to write to.
 * @member {String} bucketID
 */
ScraperTargetResponse.prototype['bucketID'] = undefined;

/**
 * The name of the scraper target.
 * @member {String} name
 */
ScraperTargetResponse.prototype['name'] = undefined;

/**
 * The organization ID.
 * @member {String} orgID
 */
ScraperTargetResponse.prototype['orgID'] = undefined;

/**
 * The type of the metrics to be parsed.
 * @member {module:model/ScraperTargetResponse.TypeEnum} type
 */
ScraperTargetResponse.prototype['type'] = undefined;

/**
 * The URL of the metrics endpoint.
 * @member {String} url
 */
ScraperTargetResponse.prototype['url'] = undefined;

/**
 * The bucket name.
 * @member {String} bucket
 */
ScraperTargetResponse.prototype['bucket'] = undefined;

/**
 * @member {String} id
 */
ScraperTargetResponse.prototype['id'] = undefined;

/**
 * @member {module:model/ScraperTargetResponseAllOfLinks} links
 */
ScraperTargetResponse.prototype['links'] = undefined;

/**
 * The name of the organization.
 * @member {String} org
 */
ScraperTargetResponse.prototype['org'] = undefined;


// Implement ScraperTargetRequest interface:
/**
 * Skip TLS verification on endpoint.
 * @member {Boolean} allowInsecure
 * @default false
 */
ScraperTargetRequest.prototype['allowInsecure'] = false;
/**
 * The ID of the bucket to write to.
 * @member {String} bucketID
 */
ScraperTargetRequest.prototype['bucketID'] = undefined;
/**
 * The name of the scraper target.
 * @member {String} name
 */
ScraperTargetRequest.prototype['name'] = undefined;
/**
 * The organization ID.
 * @member {String} orgID
 */
ScraperTargetRequest.prototype['orgID'] = undefined;
/**
 * The type of the metrics to be parsed.
 * @member {module:model/ScraperTargetRequest.TypeEnum} type
 */
ScraperTargetRequest.prototype['type'] = undefined;
/**
 * The URL of the metrics endpoint.
 * @member {String} url
 */
ScraperTargetRequest.prototype['url'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ScraperTargetResponse['TypeEnum'] = {

    /**
     * value: "prometheus"
     * @const
     */
    "prometheus": "prometheus"
};



export default ScraperTargetResponse;

