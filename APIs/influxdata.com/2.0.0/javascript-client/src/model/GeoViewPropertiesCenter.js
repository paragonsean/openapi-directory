/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeoViewPropertiesCenter model module.
 * @module model/GeoViewPropertiesCenter
 * @version 2.0.0
 */
class GeoViewPropertiesCenter {
    /**
     * Constructs a new <code>GeoViewPropertiesCenter</code>.
     * Coordinates of the center of the map
     * @alias module:model/GeoViewPropertiesCenter
     * @param lat {Number} Latitude of the center of the map
     * @param lon {Number} Longitude of the center of the map
     */
    constructor(lat, lon) { 
        
        GeoViewPropertiesCenter.initialize(this, lat, lon);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lat, lon) { 
        obj['lat'] = lat;
        obj['lon'] = lon;
    }

    /**
     * Constructs a <code>GeoViewPropertiesCenter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoViewPropertiesCenter} obj Optional instance to populate.
     * @return {module:model/GeoViewPropertiesCenter} The populated <code>GeoViewPropertiesCenter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoViewPropertiesCenter();

            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoViewPropertiesCenter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoViewPropertiesCenter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeoViewPropertiesCenter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

GeoViewPropertiesCenter.RequiredProperties = ["lat", "lon"];

/**
 * Latitude of the center of the map
 * @member {Number} lat
 */
GeoViewPropertiesCenter.prototype['lat'] = undefined;

/**
 * Longitude of the center of the map
 * @member {Number} lon
 */
GeoViewPropertiesCenter.prototype['lon'] = undefined;






export default GeoViewPropertiesCenter;

