/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RoutesExternal from './RoutesExternal';
import RoutesQuery from './RoutesQuery';
import RoutesSystem from './RoutesSystem';

/**
 * The Routes model module.
 * @module model/Routes
 * @version 2.0.0
 */
class Routes {
    /**
     * Constructs a new <code>Routes</code>.
     * @alias module:model/Routes
     */
    constructor() { 
        
        Routes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Routes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Routes} obj Optional instance to populate.
     * @return {module:model/Routes} The populated <code>Routes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Routes();

            if (data.hasOwnProperty('authorizations')) {
                obj['authorizations'] = ApiClient.convertToType(data['authorizations'], 'String');
            }
            if (data.hasOwnProperty('buckets')) {
                obj['buckets'] = ApiClient.convertToType(data['buckets'], 'String');
            }
            if (data.hasOwnProperty('dashboards')) {
                obj['dashboards'] = ApiClient.convertToType(data['dashboards'], 'String');
            }
            if (data.hasOwnProperty('external')) {
                obj['external'] = RoutesExternal.constructFromObject(data['external']);
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], 'String');
            }
            if (data.hasOwnProperty('me')) {
                obj['me'] = ApiClient.convertToType(data['me'], 'String');
            }
            if (data.hasOwnProperty('orgs')) {
                obj['orgs'] = ApiClient.convertToType(data['orgs'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = RoutesQuery.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('setup')) {
                obj['setup'] = ApiClient.convertToType(data['setup'], 'String');
            }
            if (data.hasOwnProperty('signin')) {
                obj['signin'] = ApiClient.convertToType(data['signin'], 'String');
            }
            if (data.hasOwnProperty('signout')) {
                obj['signout'] = ApiClient.convertToType(data['signout'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], 'String');
            }
            if (data.hasOwnProperty('system')) {
                obj['system'] = RoutesSystem.constructFromObject(data['system']);
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], 'String');
            }
            if (data.hasOwnProperty('telegrafs')) {
                obj['telegrafs'] = ApiClient.convertToType(data['telegrafs'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], 'String');
            }
            if (data.hasOwnProperty('write')) {
                obj['write'] = ApiClient.convertToType(data['write'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Routes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Routes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorizations'] && !(typeof data['authorizations'] === 'string' || data['authorizations'] instanceof String)) {
            throw new Error("Expected the field `authorizations` to be a primitive type in the JSON string but got " + data['authorizations']);
        }
        // ensure the json data is a string
        if (data['buckets'] && !(typeof data['buckets'] === 'string' || data['buckets'] instanceof String)) {
            throw new Error("Expected the field `buckets` to be a primitive type in the JSON string but got " + data['buckets']);
        }
        // ensure the json data is a string
        if (data['dashboards'] && !(typeof data['dashboards'] === 'string' || data['dashboards'] instanceof String)) {
            throw new Error("Expected the field `dashboards` to be a primitive type in the JSON string but got " + data['dashboards']);
        }
        // validate the optional field `external`
        if (data['external']) { // data not null
          RoutesExternal.validateJSON(data['external']);
        }
        // ensure the json data is a string
        if (data['flags'] && !(typeof data['flags'] === 'string' || data['flags'] instanceof String)) {
            throw new Error("Expected the field `flags` to be a primitive type in the JSON string but got " + data['flags']);
        }
        // ensure the json data is a string
        if (data['me'] && !(typeof data['me'] === 'string' || data['me'] instanceof String)) {
            throw new Error("Expected the field `me` to be a primitive type in the JSON string but got " + data['me']);
        }
        // ensure the json data is a string
        if (data['orgs'] && !(typeof data['orgs'] === 'string' || data['orgs'] instanceof String)) {
            throw new Error("Expected the field `orgs` to be a primitive type in the JSON string but got " + data['orgs']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          RoutesQuery.validateJSON(data['query']);
        }
        // ensure the json data is a string
        if (data['setup'] && !(typeof data['setup'] === 'string' || data['setup'] instanceof String)) {
            throw new Error("Expected the field `setup` to be a primitive type in the JSON string but got " + data['setup']);
        }
        // ensure the json data is a string
        if (data['signin'] && !(typeof data['signin'] === 'string' || data['signin'] instanceof String)) {
            throw new Error("Expected the field `signin` to be a primitive type in the JSON string but got " + data['signin']);
        }
        // ensure the json data is a string
        if (data['signout'] && !(typeof data['signout'] === 'string' || data['signout'] instanceof String)) {
            throw new Error("Expected the field `signout` to be a primitive type in the JSON string but got " + data['signout']);
        }
        // ensure the json data is a string
        if (data['sources'] && !(typeof data['sources'] === 'string' || data['sources'] instanceof String)) {
            throw new Error("Expected the field `sources` to be a primitive type in the JSON string but got " + data['sources']);
        }
        // validate the optional field `system`
        if (data['system']) { // data not null
          RoutesSystem.validateJSON(data['system']);
        }
        // ensure the json data is a string
        if (data['tasks'] && !(typeof data['tasks'] === 'string' || data['tasks'] instanceof String)) {
            throw new Error("Expected the field `tasks` to be a primitive type in the JSON string but got " + data['tasks']);
        }
        // ensure the json data is a string
        if (data['telegrafs'] && !(typeof data['telegrafs'] === 'string' || data['telegrafs'] instanceof String)) {
            throw new Error("Expected the field `telegrafs` to be a primitive type in the JSON string but got " + data['telegrafs']);
        }
        // ensure the json data is a string
        if (data['users'] && !(typeof data['users'] === 'string' || data['users'] instanceof String)) {
            throw new Error("Expected the field `users` to be a primitive type in the JSON string but got " + data['users']);
        }
        // ensure the json data is a string
        if (data['variables'] && !(typeof data['variables'] === 'string' || data['variables'] instanceof String)) {
            throw new Error("Expected the field `variables` to be a primitive type in the JSON string but got " + data['variables']);
        }
        // ensure the json data is a string
        if (data['write'] && !(typeof data['write'] === 'string' || data['write'] instanceof String)) {
            throw new Error("Expected the field `write` to be a primitive type in the JSON string but got " + data['write']);
        }

        return true;
    }


}



/**
 * @member {String} authorizations
 */
Routes.prototype['authorizations'] = undefined;

/**
 * @member {String} buckets
 */
Routes.prototype['buckets'] = undefined;

/**
 * @member {String} dashboards
 */
Routes.prototype['dashboards'] = undefined;

/**
 * @member {module:model/RoutesExternal} external
 */
Routes.prototype['external'] = undefined;

/**
 * @member {String} flags
 */
Routes.prototype['flags'] = undefined;

/**
 * @member {String} me
 */
Routes.prototype['me'] = undefined;

/**
 * @member {String} orgs
 */
Routes.prototype['orgs'] = undefined;

/**
 * @member {module:model/RoutesQuery} query
 */
Routes.prototype['query'] = undefined;

/**
 * @member {String} setup
 */
Routes.prototype['setup'] = undefined;

/**
 * @member {String} signin
 */
Routes.prototype['signin'] = undefined;

/**
 * @member {String} signout
 */
Routes.prototype['signout'] = undefined;

/**
 * @member {String} sources
 */
Routes.prototype['sources'] = undefined;

/**
 * @member {module:model/RoutesSystem} system
 */
Routes.prototype['system'] = undefined;

/**
 * @member {String} tasks
 */
Routes.prototype['tasks'] = undefined;

/**
 * @member {String} telegrafs
 */
Routes.prototype['telegrafs'] = undefined;

/**
 * @member {String} users
 */
Routes.prototype['users'] = undefined;

/**
 * @member {String} variables
 */
Routes.prototype['variables'] = undefined;

/**
 * @member {String} write
 */
Routes.prototype['write'] = undefined;






export default Routes;

