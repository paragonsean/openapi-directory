/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cell from './Cell';
import CellLinks from './CellLinks';
import ViewProperties from './ViewProperties';

/**
 * The CellWithViewProperties model module.
 * @module model/CellWithViewProperties
 * @version 2.0.0
 */
class CellWithViewProperties {
    /**
     * Constructs a new <code>CellWithViewProperties</code>.
     * @alias module:model/CellWithViewProperties
     * @implements module:model/Cell
     */
    constructor() { 
        Cell.initialize(this);
        CellWithViewProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CellWithViewProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CellWithViewProperties} obj Optional instance to populate.
     * @return {module:model/CellWithViewProperties} The populated <code>CellWithViewProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CellWithViewProperties();
            Cell.constructFromObject(data, obj);

            if (data.hasOwnProperty('h')) {
                obj['h'] = ApiClient.convertToType(data['h'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = CellLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('viewID')) {
                obj['viewID'] = ApiClient.convertToType(data['viewID'], 'String');
            }
            if (data.hasOwnProperty('w')) {
                obj['w'] = ApiClient.convertToType(data['w'], 'Number');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ViewProperties.constructFromObject(data['properties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CellWithViewProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CellWithViewProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          CellLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['viewID'] && !(typeof data['viewID'] === 'string' || data['viewID'] instanceof String)) {
            throw new Error("Expected the field `viewID` to be a primitive type in the JSON string but got " + data['viewID']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          ViewProperties.validateJSON(data['properties']);
        }

        return true;
    }


}



/**
 * @member {Number} h
 */
CellWithViewProperties.prototype['h'] = undefined;

/**
 * @member {String} id
 */
CellWithViewProperties.prototype['id'] = undefined;

/**
 * @member {module:model/CellLinks} links
 */
CellWithViewProperties.prototype['links'] = undefined;

/**
 * The reference to a view from the views API.
 * @member {String} viewID
 */
CellWithViewProperties.prototype['viewID'] = undefined;

/**
 * @member {Number} w
 */
CellWithViewProperties.prototype['w'] = undefined;

/**
 * @member {Number} x
 */
CellWithViewProperties.prototype['x'] = undefined;

/**
 * @member {Number} y
 */
CellWithViewProperties.prototype['y'] = undefined;

/**
 * @member {String} name
 */
CellWithViewProperties.prototype['name'] = undefined;

/**
 * @member {module:model/ViewProperties} properties
 */
CellWithViewProperties.prototype['properties'] = undefined;


// Implement Cell interface:
/**
 * @member {Number} h
 */
Cell.prototype['h'] = undefined;
/**
 * @member {String} id
 */
Cell.prototype['id'] = undefined;
/**
 * @member {module:model/CellLinks} links
 */
Cell.prototype['links'] = undefined;
/**
 * The reference to a view from the views API.
 * @member {String} viewID
 */
Cell.prototype['viewID'] = undefined;
/**
 * @member {Number} w
 */
Cell.prototype['w'] = undefined;
/**
 * @member {Number} x
 */
Cell.prototype['x'] = undefined;
/**
 * @member {Number} y
 */
Cell.prototype['y'] = undefined;




export default CellWithViewProperties;

