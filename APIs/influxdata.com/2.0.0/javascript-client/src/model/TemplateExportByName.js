/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateExportByIDOrgIDsInner from './TemplateExportByIDOrgIDsInner';
import TemplateExportByNameResources from './TemplateExportByNameResources';

/**
 * The TemplateExportByName model module.
 * @module model/TemplateExportByName
 * @version 2.0.0
 */
class TemplateExportByName {
    /**
     * Constructs a new <code>TemplateExportByName</code>.
     * @alias module:model/TemplateExportByName
     */
    constructor() { 
        
        TemplateExportByName.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TemplateExportByName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateExportByName} obj Optional instance to populate.
     * @return {module:model/TemplateExportByName} The populated <code>TemplateExportByName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateExportByName();

            if (data.hasOwnProperty('orgIDs')) {
                obj['orgIDs'] = ApiClient.convertToType(data['orgIDs'], [TemplateExportByIDOrgIDsInner]);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = TemplateExportByNameResources.constructFromObject(data['resources']);
            }
            if (data.hasOwnProperty('stackID')) {
                obj['stackID'] = ApiClient.convertToType(data['stackID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateExportByName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateExportByName</code>.
     */
    static validateJSON(data) {
        if (data['orgIDs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orgIDs'])) {
                throw new Error("Expected the field `orgIDs` to be an array in the JSON data but got " + data['orgIDs']);
            }
            // validate the optional field `orgIDs` (array)
            for (const item of data['orgIDs']) {
                TemplateExportByIDOrgIDsInner.validateJSON(item);
            };
        }
        // validate the optional field `resources`
        if (data['resources']) { // data not null
          TemplateExportByNameResources.validateJSON(data['resources']);
        }
        // ensure the json data is a string
        if (data['stackID'] && !(typeof data['stackID'] === 'string' || data['stackID'] instanceof String)) {
            throw new Error("Expected the field `stackID` to be a primitive type in the JSON string but got " + data['stackID']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/TemplateExportByIDOrgIDsInner>} orgIDs
 */
TemplateExportByName.prototype['orgIDs'] = undefined;

/**
 * @member {module:model/TemplateExportByNameResources} resources
 */
TemplateExportByName.prototype['resources'] = undefined;

/**
 * @member {String} stackID
 */
TemplateExportByName.prototype['stackID'] = undefined;






export default TemplateExportByName;

