/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Resource model module.
 * @module model/Resource
 * @version 2.0.0
 */
class Resource {
    /**
     * Constructs a new <code>Resource</code>.
     * @alias module:model/Resource
     * @param type {module:model/Resource.TypeEnum} 
     */
    constructor(type) { 
        
        Resource.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Resource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Resource} obj Optional instance to populate.
     * @return {module:model/Resource} The populated <code>Resource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Resource();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('org')) {
                obj['org'] = ApiClient.convertToType(data['org'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Resource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Resource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Resource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['org'] && !(typeof data['org'] === 'string' || data['org'] instanceof String)) {
            throw new Error("Expected the field `org` to be a primitive type in the JSON string but got " + data['org']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Resource.RequiredProperties = ["type"];

/**
 * If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.
 * @member {String} id
 */
Resource.prototype['id'] = undefined;

/**
 * Optional name of the resource if the resource has a name field.
 * @member {String} name
 */
Resource.prototype['name'] = undefined;

/**
 * Optional name of the organization of the organization with orgID.
 * @member {String} org
 */
Resource.prototype['org'] = undefined;

/**
 * If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.
 * @member {String} orgID
 */
Resource.prototype['orgID'] = undefined;

/**
 * @member {module:model/Resource.TypeEnum} type
 */
Resource.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Resource['TypeEnum'] = {

    /**
     * value: "authorizations"
     * @const
     */
    "authorizations": "authorizations",

    /**
     * value: "buckets"
     * @const
     */
    "buckets": "buckets",

    /**
     * value: "dashboards"
     * @const
     */
    "dashboards": "dashboards",

    /**
     * value: "orgs"
     * @const
     */
    "orgs": "orgs",

    /**
     * value: "sources"
     * @const
     */
    "sources": "sources",

    /**
     * value: "tasks"
     * @const
     */
    "tasks": "tasks",

    /**
     * value: "telegrafs"
     * @const
     */
    "telegrafs": "telegrafs",

    /**
     * value: "users"
     * @const
     */
    "users": "users",

    /**
     * value: "variables"
     * @const
     */
    "variables": "variables",

    /**
     * value: "scrapers"
     * @const
     */
    "scrapers": "scrapers",

    /**
     * value: "secrets"
     * @const
     */
    "secrets": "secrets",

    /**
     * value: "labels"
     * @const
     */
    "labels": "labels",

    /**
     * value: "views"
     * @const
     */
    "views": "views",

    /**
     * value: "documents"
     * @const
     */
    "documents": "documents",

    /**
     * value: "notificationRules"
     * @const
     */
    "notificationRules": "notificationRules",

    /**
     * value: "notificationEndpoints"
     * @const
     */
    "notificationEndpoints": "notificationEndpoints",

    /**
     * value: "checks"
     * @const
     */
    "checks": "checks",

    /**
     * value: "dbrp"
     * @const
     */
    "dbrp": "dbrp",

    /**
     * value: "notebooks"
     * @const
     */
    "notebooks": "notebooks"
};



export default Resource;

