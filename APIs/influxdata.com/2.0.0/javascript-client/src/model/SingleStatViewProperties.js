/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DashboardColor from './DashboardColor';
import DashboardQuery from './DashboardQuery';
import DecimalPlaces from './DecimalPlaces';
import StaticLegend from './StaticLegend';

/**
 * The SingleStatViewProperties model module.
 * @module model/SingleStatViewProperties
 * @version 2.0.0
 */
class SingleStatViewProperties {
    /**
     * Constructs a new <code>SingleStatViewProperties</code>.
     * @alias module:model/SingleStatViewProperties
     * @param colors {Array.<module:model/DashboardColor>} Colors define color encoding of data into a visualization
     * @param decimalPlaces {module:model/DecimalPlaces} 
     * @param note {String} 
     * @param prefix {String} 
     * @param queries {Array.<module:model/DashboardQuery>} 
     * @param shape {module:model/SingleStatViewProperties.ShapeEnum} 
     * @param showNoteWhenEmpty {Boolean} If true, will display note when empty
     * @param suffix {String} 
     * @param tickPrefix {String} 
     * @param tickSuffix {String} 
     * @param type {module:model/SingleStatViewProperties.TypeEnum} 
     */
    constructor(colors, decimalPlaces, note, prefix, queries, shape, showNoteWhenEmpty, suffix, tickPrefix, tickSuffix, type) { 
        
        SingleStatViewProperties.initialize(this, colors, decimalPlaces, note, prefix, queries, shape, showNoteWhenEmpty, suffix, tickPrefix, tickSuffix, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, colors, decimalPlaces, note, prefix, queries, shape, showNoteWhenEmpty, suffix, tickPrefix, tickSuffix, type) { 
        obj['colors'] = colors;
        obj['decimalPlaces'] = decimalPlaces;
        obj['note'] = note;
        obj['prefix'] = prefix;
        obj['queries'] = queries;
        obj['shape'] = shape;
        obj['showNoteWhenEmpty'] = showNoteWhenEmpty;
        obj['suffix'] = suffix;
        obj['tickPrefix'] = tickPrefix;
        obj['tickSuffix'] = tickSuffix;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SingleStatViewProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleStatViewProperties} obj Optional instance to populate.
     * @return {module:model/SingleStatViewProperties} The populated <code>SingleStatViewProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleStatViewProperties();

            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], [DashboardColor]);
            }
            if (data.hasOwnProperty('decimalPlaces')) {
                obj['decimalPlaces'] = DecimalPlaces.constructFromObject(data['decimalPlaces']);
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], [DashboardQuery]);
            }
            if (data.hasOwnProperty('shape')) {
                obj['shape'] = ApiClient.convertToType(data['shape'], 'String');
            }
            if (data.hasOwnProperty('showNoteWhenEmpty')) {
                obj['showNoteWhenEmpty'] = ApiClient.convertToType(data['showNoteWhenEmpty'], 'Boolean');
            }
            if (data.hasOwnProperty('staticLegend')) {
                obj['staticLegend'] = StaticLegend.constructFromObject(data['staticLegend']);
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
            if (data.hasOwnProperty('tickPrefix')) {
                obj['tickPrefix'] = ApiClient.convertToType(data['tickPrefix'], 'String');
            }
            if (data.hasOwnProperty('tickSuffix')) {
                obj['tickSuffix'] = ApiClient.convertToType(data['tickSuffix'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleStatViewProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleStatViewProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SingleStatViewProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['colors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['colors'])) {
                throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
            }
            // validate the optional field `colors` (array)
            for (const item of data['colors']) {
                DashboardColor.validateJSON(item);
            };
        }
        // validate the optional field `decimalPlaces`
        if (data['decimalPlaces']) { // data not null
          DecimalPlaces.validateJSON(data['decimalPlaces']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        if (data['queries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queries'])) {
                throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
            }
            // validate the optional field `queries` (array)
            for (const item of data['queries']) {
                DashboardQuery.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shape'] && !(typeof data['shape'] === 'string' || data['shape'] instanceof String)) {
            throw new Error("Expected the field `shape` to be a primitive type in the JSON string but got " + data['shape']);
        }
        // validate the optional field `staticLegend`
        if (data['staticLegend']) { // data not null
          StaticLegend.validateJSON(data['staticLegend']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }
        // ensure the json data is a string
        if (data['tickPrefix'] && !(typeof data['tickPrefix'] === 'string' || data['tickPrefix'] instanceof String)) {
            throw new Error("Expected the field `tickPrefix` to be a primitive type in the JSON string but got " + data['tickPrefix']);
        }
        // ensure the json data is a string
        if (data['tickSuffix'] && !(typeof data['tickSuffix'] === 'string' || data['tickSuffix'] instanceof String)) {
            throw new Error("Expected the field `tickSuffix` to be a primitive type in the JSON string but got " + data['tickSuffix']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SingleStatViewProperties.RequiredProperties = ["colors", "decimalPlaces", "note", "prefix", "queries", "shape", "showNoteWhenEmpty", "suffix", "tickPrefix", "tickSuffix", "type"];

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<module:model/DashboardColor>} colors
 */
SingleStatViewProperties.prototype['colors'] = undefined;

/**
 * @member {module:model/DecimalPlaces} decimalPlaces
 */
SingleStatViewProperties.prototype['decimalPlaces'] = undefined;

/**
 * @member {String} note
 */
SingleStatViewProperties.prototype['note'] = undefined;

/**
 * @member {String} prefix
 */
SingleStatViewProperties.prototype['prefix'] = undefined;

/**
 * @member {Array.<module:model/DashboardQuery>} queries
 */
SingleStatViewProperties.prototype['queries'] = undefined;

/**
 * @member {module:model/SingleStatViewProperties.ShapeEnum} shape
 */
SingleStatViewProperties.prototype['shape'] = undefined;

/**
 * If true, will display note when empty
 * @member {Boolean} showNoteWhenEmpty
 */
SingleStatViewProperties.prototype['showNoteWhenEmpty'] = undefined;

/**
 * @member {module:model/StaticLegend} staticLegend
 */
SingleStatViewProperties.prototype['staticLegend'] = undefined;

/**
 * @member {String} suffix
 */
SingleStatViewProperties.prototype['suffix'] = undefined;

/**
 * @member {String} tickPrefix
 */
SingleStatViewProperties.prototype['tickPrefix'] = undefined;

/**
 * @member {String} tickSuffix
 */
SingleStatViewProperties.prototype['tickSuffix'] = undefined;

/**
 * @member {module:model/SingleStatViewProperties.TypeEnum} type
 */
SingleStatViewProperties.prototype['type'] = undefined;





/**
 * Allowed values for the <code>shape</code> property.
 * @enum {String}
 * @readonly
 */
SingleStatViewProperties['ShapeEnum'] = {

    /**
     * value: "chronograf-v2"
     * @const
     */
    "chronograf-v2": "chronograf-v2"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SingleStatViewProperties['TypeEnum'] = {

    /**
     * value: "single-stat"
     * @const
     */
    "single-stat": "single-stat"
};



export default SingleStatViewProperties;

