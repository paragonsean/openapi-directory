/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Axis from './Axis';
import DashboardColor from './DashboardColor';
import GeoViewLayerProperties from './GeoViewLayerProperties';

/**
 * The GeoHeatMapViewLayer model module.
 * @module model/GeoHeatMapViewLayer
 * @version 2.0.0
 */
class GeoHeatMapViewLayer {
    /**
     * Constructs a new <code>GeoHeatMapViewLayer</code>.
     * @alias module:model/GeoHeatMapViewLayer
     * @implements module:model/GeoViewLayerProperties
     * @param type {module:model/GeoHeatMapViewLayer.TypeEnum} 
     * @param blur {Number} Blur for heatmap points
     * @param colors {Array.<module:model/DashboardColor>} Colors define color encoding of data into a visualization
     * @param intensityDimension {module:model/Axis} 
     * @param intensityField {String} Intensity field
     * @param radius {Number} Radius size in pixels
     */
    constructor(type, blur, colors, intensityDimension, intensityField, radius) { 
        GeoViewLayerProperties.initialize(this, type);
        GeoHeatMapViewLayer.initialize(this, type, blur, colors, intensityDimension, intensityField, radius);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, blur, colors, intensityDimension, intensityField, radius) { 
        obj['type'] = type;
        obj['blur'] = blur;
        obj['colors'] = colors;
        obj['intensityDimension'] = intensityDimension;
        obj['intensityField'] = intensityField;
        obj['radius'] = radius;
    }

    /**
     * Constructs a <code>GeoHeatMapViewLayer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoHeatMapViewLayer} obj Optional instance to populate.
     * @return {module:model/GeoHeatMapViewLayer} The populated <code>GeoHeatMapViewLayer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoHeatMapViewLayer();
            GeoViewLayerProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('blur')) {
                obj['blur'] = ApiClient.convertToType(data['blur'], 'Number');
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], [DashboardColor]);
            }
            if (data.hasOwnProperty('intensityDimension')) {
                obj['intensityDimension'] = Axis.constructFromObject(data['intensityDimension']);
            }
            if (data.hasOwnProperty('intensityField')) {
                obj['intensityField'] = ApiClient.convertToType(data['intensityField'], 'String');
            }
            if (data.hasOwnProperty('radius')) {
                obj['radius'] = ApiClient.convertToType(data['radius'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoHeatMapViewLayer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoHeatMapViewLayer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeoHeatMapViewLayer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['colors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['colors'])) {
                throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
            }
            // validate the optional field `colors` (array)
            for (const item of data['colors']) {
                DashboardColor.validateJSON(item);
            };
        }
        // validate the optional field `intensityDimension`
        if (data['intensityDimension']) { // data not null
          Axis.validateJSON(data['intensityDimension']);
        }
        // ensure the json data is a string
        if (data['intensityField'] && !(typeof data['intensityField'] === 'string' || data['intensityField'] instanceof String)) {
            throw new Error("Expected the field `intensityField` to be a primitive type in the JSON string but got " + data['intensityField']);
        }

        return true;
    }


}

GeoHeatMapViewLayer.RequiredProperties = ["type", "blur", "colors", "intensityDimension", "intensityField", "radius"];

/**
 * @member {module:model/GeoHeatMapViewLayer.TypeEnum} type
 */
GeoHeatMapViewLayer.prototype['type'] = undefined;

/**
 * Blur for heatmap points
 * @member {Number} blur
 */
GeoHeatMapViewLayer.prototype['blur'] = undefined;

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<module:model/DashboardColor>} colors
 */
GeoHeatMapViewLayer.prototype['colors'] = undefined;

/**
 * @member {module:model/Axis} intensityDimension
 */
GeoHeatMapViewLayer.prototype['intensityDimension'] = undefined;

/**
 * Intensity field
 * @member {String} intensityField
 */
GeoHeatMapViewLayer.prototype['intensityField'] = undefined;

/**
 * Radius size in pixels
 * @member {Number} radius
 */
GeoHeatMapViewLayer.prototype['radius'] = undefined;


// Implement GeoViewLayerProperties interface:
/**
 * @member {module:model/GeoViewLayerProperties.TypeEnum} type
 */
GeoViewLayerProperties.prototype['type'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GeoHeatMapViewLayer['TypeEnum'] = {

    /**
     * value: "heatmap"
     * @const
     */
    "heatmap": "heatmap",

    /**
     * value: "circleMap"
     * @const
     */
    "circleMap": "circleMap",

    /**
     * value: "pointMap"
     * @const
     */
    "pointMap": "pointMap",

    /**
     * value: "trackMap"
     * @const
     */
    "trackMap": "trackMap"
};



export default GeoHeatMapViewLayer;

