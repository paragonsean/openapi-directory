/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dialect model module.
 * @module model/Dialect
 * @version 2.0.0
 */
class Dialect {
    /**
     * Constructs a new <code>Dialect</code>.
     * Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions
     * @alias module:model/Dialect
     */
    constructor() { 
        
        Dialect.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['commentPrefix'] = '#';
        obj['dateTimeFormat'] = 'RFC3339';
        obj['delimiter'] = ',';
        obj['header'] = true;
    }

    /**
     * Constructs a <code>Dialect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dialect} obj Optional instance to populate.
     * @return {module:model/Dialect} The populated <code>Dialect</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dialect();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], ['String']);
            }
            if (data.hasOwnProperty('commentPrefix')) {
                obj['commentPrefix'] = ApiClient.convertToType(data['commentPrefix'], 'String');
            }
            if (data.hasOwnProperty('dateTimeFormat')) {
                obj['dateTimeFormat'] = ApiClient.convertToType(data['dateTimeFormat'], 'String');
            }
            if (data.hasOwnProperty('delimiter')) {
                obj['delimiter'] = ApiClient.convertToType(data['delimiter'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dialect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dialect</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['annotations'])) {
            throw new Error("Expected the field `annotations` to be an array in the JSON data but got " + data['annotations']);
        }
        // ensure the json data is a string
        if (data['commentPrefix'] && !(typeof data['commentPrefix'] === 'string' || data['commentPrefix'] instanceof String)) {
            throw new Error("Expected the field `commentPrefix` to be a primitive type in the JSON string but got " + data['commentPrefix']);
        }
        // ensure the json data is a string
        if (data['dateTimeFormat'] && !(typeof data['dateTimeFormat'] === 'string' || data['dateTimeFormat'] instanceof String)) {
            throw new Error("Expected the field `dateTimeFormat` to be a primitive type in the JSON string but got " + data['dateTimeFormat']);
        }
        // ensure the json data is a string
        if (data['delimiter'] && !(typeof data['delimiter'] === 'string' || data['delimiter'] instanceof String)) {
            throw new Error("Expected the field `delimiter` to be a primitive type in the JSON string but got " + data['delimiter']);
        }

        return true;
    }


}



/**
 * https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns
 * @member {Array.<module:model/Dialect.AnnotationsEnum>} annotations
 */
Dialect.prototype['annotations'] = undefined;

/**
 * Character prefixed to comment strings
 * @member {String} commentPrefix
 * @default '#'
 */
Dialect.prototype['commentPrefix'] = '#';

/**
 * Format of timestamps
 * @member {module:model/Dialect.DateTimeFormatEnum} dateTimeFormat
 * @default 'RFC3339'
 */
Dialect.prototype['dateTimeFormat'] = 'RFC3339';

/**
 * Separator between cells; the default is ,
 * @member {String} delimiter
 * @default ','
 */
Dialect.prototype['delimiter'] = ',';

/**
 * If true, the results will contain a header row
 * @member {Boolean} header
 * @default true
 */
Dialect.prototype['header'] = true;





/**
 * Allowed values for the <code>annotations</code> property.
 * @enum {String}
 * @readonly
 */
Dialect['AnnotationsEnum'] = {

    /**
     * value: "group"
     * @const
     */
    "group": "group",

    /**
     * value: "datatype"
     * @const
     */
    "datatype": "datatype",

    /**
     * value: "default"
     * @const
     */
    "default": "default"
};


/**
 * Allowed values for the <code>dateTimeFormat</code> property.
 * @enum {String}
 * @readonly
 */
Dialect['DateTimeFormatEnum'] = {

    /**
     * value: "RFC3339"
     * @const
     */
    "RFC3339": "RFC3339",

    /**
     * value: "RFC3339Nano"
     * @const
     */
    "RFC3339Nano": "RFC3339Nano"
};



export default Dialect;

