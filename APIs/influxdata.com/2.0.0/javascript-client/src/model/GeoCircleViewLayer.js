/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Axis from './Axis';
import DashboardColor from './DashboardColor';
import GeoViewLayerProperties from './GeoViewLayerProperties';

/**
 * The GeoCircleViewLayer model module.
 * @module model/GeoCircleViewLayer
 * @version 2.0.0
 */
class GeoCircleViewLayer {
    /**
     * Constructs a new <code>GeoCircleViewLayer</code>.
     * @alias module:model/GeoCircleViewLayer
     * @implements module:model/GeoViewLayerProperties
     * @param type {module:model/GeoCircleViewLayer.TypeEnum} 
     * @param colorDimension {module:model/Axis} 
     * @param colorField {String} Circle color field
     * @param colors {Array.<module:model/DashboardColor>} Colors define color encoding of data into a visualization
     * @param radiusDimension {module:model/Axis} 
     * @param radiusField {String} Radius field
     */
    constructor(type, colorDimension, colorField, colors, radiusDimension, radiusField) { 
        GeoViewLayerProperties.initialize(this, type);
        GeoCircleViewLayer.initialize(this, type, colorDimension, colorField, colors, radiusDimension, radiusField);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, colorDimension, colorField, colors, radiusDimension, radiusField) { 
        obj['type'] = type;
        obj['colorDimension'] = colorDimension;
        obj['colorField'] = colorField;
        obj['colors'] = colors;
        obj['radiusDimension'] = radiusDimension;
        obj['radiusField'] = radiusField;
    }

    /**
     * Constructs a <code>GeoCircleViewLayer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoCircleViewLayer} obj Optional instance to populate.
     * @return {module:model/GeoCircleViewLayer} The populated <code>GeoCircleViewLayer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoCircleViewLayer();
            GeoViewLayerProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('colorDimension')) {
                obj['colorDimension'] = Axis.constructFromObject(data['colorDimension']);
            }
            if (data.hasOwnProperty('colorField')) {
                obj['colorField'] = ApiClient.convertToType(data['colorField'], 'String');
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], [DashboardColor]);
            }
            if (data.hasOwnProperty('interpolateColors')) {
                obj['interpolateColors'] = ApiClient.convertToType(data['interpolateColors'], 'Boolean');
            }
            if (data.hasOwnProperty('radius')) {
                obj['radius'] = ApiClient.convertToType(data['radius'], 'Number');
            }
            if (data.hasOwnProperty('radiusDimension')) {
                obj['radiusDimension'] = Axis.constructFromObject(data['radiusDimension']);
            }
            if (data.hasOwnProperty('radiusField')) {
                obj['radiusField'] = ApiClient.convertToType(data['radiusField'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoCircleViewLayer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoCircleViewLayer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeoCircleViewLayer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `colorDimension`
        if (data['colorDimension']) { // data not null
          Axis.validateJSON(data['colorDimension']);
        }
        // ensure the json data is a string
        if (data['colorField'] && !(typeof data['colorField'] === 'string' || data['colorField'] instanceof String)) {
            throw new Error("Expected the field `colorField` to be a primitive type in the JSON string but got " + data['colorField']);
        }
        if (data['colors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['colors'])) {
                throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
            }
            // validate the optional field `colors` (array)
            for (const item of data['colors']) {
                DashboardColor.validateJSON(item);
            };
        }
        // validate the optional field `radiusDimension`
        if (data['radiusDimension']) { // data not null
          Axis.validateJSON(data['radiusDimension']);
        }
        // ensure the json data is a string
        if (data['radiusField'] && !(typeof data['radiusField'] === 'string' || data['radiusField'] instanceof String)) {
            throw new Error("Expected the field `radiusField` to be a primitive type in the JSON string but got " + data['radiusField']);
        }

        return true;
    }


}

GeoCircleViewLayer.RequiredProperties = ["type", "colorDimension", "colorField", "colors", "radiusDimension", "radiusField"];

/**
 * @member {module:model/GeoCircleViewLayer.TypeEnum} type
 */
GeoCircleViewLayer.prototype['type'] = undefined;

/**
 * @member {module:model/Axis} colorDimension
 */
GeoCircleViewLayer.prototype['colorDimension'] = undefined;

/**
 * Circle color field
 * @member {String} colorField
 */
GeoCircleViewLayer.prototype['colorField'] = undefined;

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<module:model/DashboardColor>} colors
 */
GeoCircleViewLayer.prototype['colors'] = undefined;

/**
 * Interpolate circle color based on displayed value
 * @member {Boolean} interpolateColors
 */
GeoCircleViewLayer.prototype['interpolateColors'] = undefined;

/**
 * Maximum radius size in pixels
 * @member {Number} radius
 */
GeoCircleViewLayer.prototype['radius'] = undefined;

/**
 * @member {module:model/Axis} radiusDimension
 */
GeoCircleViewLayer.prototype['radiusDimension'] = undefined;

/**
 * Radius field
 * @member {String} radiusField
 */
GeoCircleViewLayer.prototype['radiusField'] = undefined;


// Implement GeoViewLayerProperties interface:
/**
 * @member {module:model/GeoViewLayerProperties.TypeEnum} type
 */
GeoViewLayerProperties.prototype['type'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GeoCircleViewLayer['TypeEnum'] = {

    /**
     * value: "heatmap"
     * @const
     */
    "heatmap": "heatmap",

    /**
     * value: "circleMap"
     * @const
     */
    "circleMap": "circleMap",

    /**
     * value: "pointMap"
     * @const
     */
    "pointMap": "pointMap",

    /**
     * value: "trackMap"
     * @const
     */
    "trackMap": "trackMap"
};



export default GeoCircleViewLayer;

