/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentMeta from './DocumentMeta';

/**
 * The DocumentCreate model module.
 * @module model/DocumentCreate
 * @version 2.0.0
 */
class DocumentCreate {
    /**
     * Constructs a new <code>DocumentCreate</code>.
     * @alias module:model/DocumentCreate
     * @param content {Object} 
     * @param meta {module:model/DocumentMeta} 
     */
    constructor(content, meta) { 
        
        DocumentCreate.initialize(this, content, meta);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, meta) { 
        obj['content'] = content;
        obj['meta'] = meta;
    }

    /**
     * Constructs a <code>DocumentCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentCreate} obj Optional instance to populate.
     * @return {module:model/DocumentCreate} The populated <code>DocumentCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentCreate();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], Object);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = DocumentMeta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('org')) {
                obj['org'] = ApiClient.convertToType(data['org'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          DocumentMeta.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['org'] && !(typeof data['org'] === 'string' || data['org'] instanceof String)) {
            throw new Error("Expected the field `org` to be a primitive type in the JSON string but got " + data['org']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }

        return true;
    }


}

DocumentCreate.RequiredProperties = ["content", "meta"];

/**
 * @member {Object} content
 */
DocumentCreate.prototype['content'] = undefined;

/**
 * An array of label IDs to be added as labels to the document.
 * @member {Array.<String>} labels
 */
DocumentCreate.prototype['labels'] = undefined;

/**
 * @member {module:model/DocumentMeta} meta
 */
DocumentCreate.prototype['meta'] = undefined;

/**
 * The organization Name. Specify either `orgID` or `org`.
 * @member {String} org
 */
DocumentCreate.prototype['org'] = undefined;

/**
 * The organization Name. Specify either `orgID` or `org`.
 * @member {String} orgID
 */
DocumentCreate.prototype['orgID'] = undefined;






export default DocumentCreate;

