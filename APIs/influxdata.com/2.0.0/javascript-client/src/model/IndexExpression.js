/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Expression from './Expression';

/**
 * The IndexExpression model module.
 * @module model/IndexExpression
 * @version 2.0.0
 */
class IndexExpression {
    /**
     * Constructs a new <code>IndexExpression</code>.
     * Represents indexing into an array
     * @alias module:model/IndexExpression
     */
    constructor() { 
        
        IndexExpression.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IndexExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndexExpression} obj Optional instance to populate.
     * @return {module:model/IndexExpression} The populated <code>IndexExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndexExpression();

            if (data.hasOwnProperty('array')) {
                obj['array'] = Expression.constructFromObject(data['array']);
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = Expression.constructFromObject(data['index']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IndexExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IndexExpression</code>.
     */
    static validateJSON(data) {
        // validate the optional field `array`
        if (data['array']) { // data not null
          Expression.validateJSON(data['array']);
        }
        // validate the optional field `index`
        if (data['index']) { // data not null
          Expression.validateJSON(data['index']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Expression} array
 */
IndexExpression.prototype['array'] = undefined;

/**
 * @member {module:model/Expression} index
 */
IndexExpression.prototype['index'] = undefined;

/**
 * Type of AST node
 * @member {String} type
 */
IndexExpression.prototype['type'] = undefined;






export default IndexExpression;

