/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserResponse from './UserResponse';
import UserResponseLinks from './UserResponseLinks';

/**
 * The ResourceMember model module.
 * @module model/ResourceMember
 * @version 2.0.0
 */
class ResourceMember {
    /**
     * Constructs a new <code>ResourceMember</code>.
     * @alias module:model/ResourceMember
     * @implements module:model/UserResponse
     * @param name {String} 
     */
    constructor(name) { 
        UserResponse.initialize(this, name);
        ResourceMember.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
        obj['status'] = 'active';
        obj['role'] = 'member';
    }

    /**
     * Constructs a <code>ResourceMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceMember} obj Optional instance to populate.
     * @return {module:model/ResourceMember} The populated <code>ResourceMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceMember();
            UserResponse.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = UserResponseLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oauthID')) {
                obj['oauthID'] = ApiClient.convertToType(data['oauthID'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceMember</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceMember.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          UserResponseLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['oauthID'] && !(typeof data['oauthID'] === 'string' || data['oauthID'] instanceof String)) {
            throw new Error("Expected the field `oauthID` to be a primitive type in the JSON string but got " + data['oauthID']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

ResourceMember.RequiredProperties = ["name"];

/**
 * @member {String} id
 */
ResourceMember.prototype['id'] = undefined;

/**
 * @member {module:model/UserResponseLinks} links
 */
ResourceMember.prototype['links'] = undefined;

/**
 * @member {String} name
 */
ResourceMember.prototype['name'] = undefined;

/**
 * @member {String} oauthID
 */
ResourceMember.prototype['oauthID'] = undefined;

/**
 * If inactive the user is inactive.
 * @member {module:model/ResourceMember.StatusEnum} status
 * @default 'active'
 */
ResourceMember.prototype['status'] = 'active';

/**
 * @member {module:model/ResourceMember.RoleEnum} role
 * @default 'member'
 */
ResourceMember.prototype['role'] = 'member';


// Implement UserResponse interface:
/**
 * @member {String} id
 */
UserResponse.prototype['id'] = undefined;
/**
 * @member {module:model/UserResponseLinks} links
 */
UserResponse.prototype['links'] = undefined;
/**
 * @member {String} name
 */
UserResponse.prototype['name'] = undefined;
/**
 * @member {String} oauthID
 */
UserResponse.prototype['oauthID'] = undefined;
/**
 * If inactive the user is inactive.
 * @member {module:model/UserResponse.StatusEnum} status
 * @default 'active'
 */
UserResponse.prototype['status'] = 'active';



/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ResourceMember['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
ResourceMember['RoleEnum'] = {

    /**
     * value: "member"
     * @const
     */
    "member": "member"
};



export default ResourceMember;

