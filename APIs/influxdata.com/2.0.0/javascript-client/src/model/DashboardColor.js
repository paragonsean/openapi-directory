/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DashboardColor model module.
 * @module model/DashboardColor
 * @version 2.0.0
 */
class DashboardColor {
    /**
     * Constructs a new <code>DashboardColor</code>.
     * Defines an encoding of data value into color space.
     * @alias module:model/DashboardColor
     * @param hex {String} The hex number of the color
     * @param id {String} The unique ID of the view color.
     * @param name {String} The user-facing name of the hex color.
     * @param type {module:model/DashboardColor.TypeEnum} Type is how the color is used.
     * @param value {Number} The data value mapped to this color.
     */
    constructor(hex, id, name, type, value) { 
        
        DashboardColor.initialize(this, hex, id, name, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hex, id, name, type, value) { 
        obj['hex'] = hex;
        obj['id'] = id;
        obj['name'] = name;
        obj['type'] = type;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>DashboardColor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardColor} obj Optional instance to populate.
     * @return {module:model/DashboardColor} The populated <code>DashboardColor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardColor();

            if (data.hasOwnProperty('hex')) {
                obj['hex'] = ApiClient.convertToType(data['hex'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardColor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardColor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DashboardColor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['hex'] && !(typeof data['hex'] === 'string' || data['hex'] instanceof String)) {
            throw new Error("Expected the field `hex` to be a primitive type in the JSON string but got " + data['hex']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

DashboardColor.RequiredProperties = ["hex", "id", "name", "type", "value"];

/**
 * The hex number of the color
 * @member {String} hex
 */
DashboardColor.prototype['hex'] = undefined;

/**
 * The unique ID of the view color.
 * @member {String} id
 */
DashboardColor.prototype['id'] = undefined;

/**
 * The user-facing name of the hex color.
 * @member {String} name
 */
DashboardColor.prototype['name'] = undefined;

/**
 * Type is how the color is used.
 * @member {module:model/DashboardColor.TypeEnum} type
 */
DashboardColor.prototype['type'] = undefined;

/**
 * The data value mapped to this color.
 * @member {Number} value
 */
DashboardColor.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DashboardColor['TypeEnum'] = {

    /**
     * value: "min"
     * @const
     */
    "min": "min",

    /**
     * value: "max"
     * @const
     */
    "max": "max",

    /**
     * value: "threshold"
     * @const
     */
    "threshold": "threshold",

    /**
     * value: "scale"
     * @const
     */
    "scale": "scale",

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "background"
     * @const
     */
    "background": "background"
};



export default DashboardColor;

