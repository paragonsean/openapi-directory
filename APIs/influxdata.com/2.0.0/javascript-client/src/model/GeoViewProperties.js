/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DashboardColor from './DashboardColor';
import DashboardQuery from './DashboardQuery';
import GeoViewLayer from './GeoViewLayer';
import GeoViewPropertiesCenter from './GeoViewPropertiesCenter';

/**
 * The GeoViewProperties model module.
 * @module model/GeoViewProperties
 * @version 2.0.0
 */
class GeoViewProperties {
    /**
     * Constructs a new <code>GeoViewProperties</code>.
     * @alias module:model/GeoViewProperties
     * @param allowPanAndZoom {Boolean} If true, map zoom and pan controls are enabled on the dashboard view
     * @param center {module:model/GeoViewPropertiesCenter} 
     * @param detectCoordinateFields {Boolean} If true, search results get automatically regroupped so that lon,lat and value are treated as columns
     * @param layers {Array.<module:model/GeoViewLayer>} List of individual layers shown in the map
     * @param note {String} 
     * @param queries {Array.<module:model/DashboardQuery>} 
     * @param shape {module:model/GeoViewProperties.ShapeEnum} 
     * @param showNoteWhenEmpty {Boolean} If true, will display note when empty
     * @param type {module:model/GeoViewProperties.TypeEnum} 
     * @param zoom {Number} Zoom level used for initial display of the map
     */
    constructor(allowPanAndZoom, center, detectCoordinateFields, layers, note, queries, shape, showNoteWhenEmpty, type, zoom) { 
        
        GeoViewProperties.initialize(this, allowPanAndZoom, center, detectCoordinateFields, layers, note, queries, shape, showNoteWhenEmpty, type, zoom);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowPanAndZoom, center, detectCoordinateFields, layers, note, queries, shape, showNoteWhenEmpty, type, zoom) { 
        obj['allowPanAndZoom'] = allowPanAndZoom || true;
        obj['center'] = center;
        obj['detectCoordinateFields'] = detectCoordinateFields || true;
        obj['layers'] = layers;
        obj['note'] = note;
        obj['queries'] = queries;
        obj['shape'] = shape;
        obj['showNoteWhenEmpty'] = showNoteWhenEmpty;
        obj['type'] = type;
        obj['zoom'] = zoom;
    }

    /**
     * Constructs a <code>GeoViewProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoViewProperties} obj Optional instance to populate.
     * @return {module:model/GeoViewProperties} The populated <code>GeoViewProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoViewProperties();

            if (data.hasOwnProperty('allowPanAndZoom')) {
                obj['allowPanAndZoom'] = ApiClient.convertToType(data['allowPanAndZoom'], 'Boolean');
            }
            if (data.hasOwnProperty('center')) {
                obj['center'] = GeoViewPropertiesCenter.constructFromObject(data['center']);
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], [DashboardColor]);
            }
            if (data.hasOwnProperty('detectCoordinateFields')) {
                obj['detectCoordinateFields'] = ApiClient.convertToType(data['detectCoordinateFields'], 'Boolean');
            }
            if (data.hasOwnProperty('layers')) {
                obj['layers'] = ApiClient.convertToType(data['layers'], [GeoViewLayer]);
            }
            if (data.hasOwnProperty('mapStyle')) {
                obj['mapStyle'] = ApiClient.convertToType(data['mapStyle'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], [DashboardQuery]);
            }
            if (data.hasOwnProperty('shape')) {
                obj['shape'] = ApiClient.convertToType(data['shape'], 'String');
            }
            if (data.hasOwnProperty('showNoteWhenEmpty')) {
                obj['showNoteWhenEmpty'] = ApiClient.convertToType(data['showNoteWhenEmpty'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('zoom')) {
                obj['zoom'] = ApiClient.convertToType(data['zoom'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoViewProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoViewProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeoViewProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `center`
        if (data['center']) { // data not null
          GeoViewPropertiesCenter.validateJSON(data['center']);
        }
        if (data['colors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['colors'])) {
                throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
            }
            // validate the optional field `colors` (array)
            for (const item of data['colors']) {
                DashboardColor.validateJSON(item);
            };
        }
        if (data['layers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['layers'])) {
                throw new Error("Expected the field `layers` to be an array in the JSON data but got " + data['layers']);
            }
            // validate the optional field `layers` (array)
            for (const item of data['layers']) {
                GeoViewLayer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mapStyle'] && !(typeof data['mapStyle'] === 'string' || data['mapStyle'] instanceof String)) {
            throw new Error("Expected the field `mapStyle` to be a primitive type in the JSON string but got " + data['mapStyle']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        if (data['queries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queries'])) {
                throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
            }
            // validate the optional field `queries` (array)
            for (const item of data['queries']) {
                DashboardQuery.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shape'] && !(typeof data['shape'] === 'string' || data['shape'] instanceof String)) {
            throw new Error("Expected the field `shape` to be a primitive type in the JSON string but got " + data['shape']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

GeoViewProperties.RequiredProperties = ["allowPanAndZoom", "center", "detectCoordinateFields", "layers", "note", "queries", "shape", "showNoteWhenEmpty", "type", "zoom"];

/**
 * If true, map zoom and pan controls are enabled on the dashboard view
 * @member {Boolean} allowPanAndZoom
 * @default true
 */
GeoViewProperties.prototype['allowPanAndZoom'] = true;

/**
 * @member {module:model/GeoViewPropertiesCenter} center
 */
GeoViewProperties.prototype['center'] = undefined;

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<module:model/DashboardColor>} colors
 */
GeoViewProperties.prototype['colors'] = undefined;

/**
 * If true, search results get automatically regroupped so that lon,lat and value are treated as columns
 * @member {Boolean} detectCoordinateFields
 * @default true
 */
GeoViewProperties.prototype['detectCoordinateFields'] = true;

/**
 * List of individual layers shown in the map
 * @member {Array.<module:model/GeoViewLayer>} layers
 */
GeoViewProperties.prototype['layers'] = undefined;

/**
 * Define map type - regular, satellite etc.
 * @member {String} mapStyle
 */
GeoViewProperties.prototype['mapStyle'] = undefined;

/**
 * @member {String} note
 */
GeoViewProperties.prototype['note'] = undefined;

/**
 * @member {Array.<module:model/DashboardQuery>} queries
 */
GeoViewProperties.prototype['queries'] = undefined;

/**
 * @member {module:model/GeoViewProperties.ShapeEnum} shape
 */
GeoViewProperties.prototype['shape'] = undefined;

/**
 * If true, will display note when empty
 * @member {Boolean} showNoteWhenEmpty
 */
GeoViewProperties.prototype['showNoteWhenEmpty'] = undefined;

/**
 * @member {module:model/GeoViewProperties.TypeEnum} type
 */
GeoViewProperties.prototype['type'] = undefined;

/**
 * Zoom level used for initial display of the map
 * @member {Number} zoom
 */
GeoViewProperties.prototype['zoom'] = undefined;





/**
 * Allowed values for the <code>shape</code> property.
 * @enum {String}
 * @readonly
 */
GeoViewProperties['ShapeEnum'] = {

    /**
     * value: "chronograf-v2"
     * @const
     */
    "chronograf-v2": "chronograf-v2"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GeoViewProperties['TypeEnum'] = {

    /**
     * value: "geo"
     * @const
     */
    "geo": "geo"
};



export default GeoViewProperties;

