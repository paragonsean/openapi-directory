/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DashboardColor from './DashboardColor';
import GeoViewLayerProperties from './GeoViewLayerProperties';

/**
 * The GeoTrackMapViewLayer model module.
 * @module model/GeoTrackMapViewLayer
 * @version 2.0.0
 */
class GeoTrackMapViewLayer {
    /**
     * Constructs a new <code>GeoTrackMapViewLayer</code>.
     * @alias module:model/GeoTrackMapViewLayer
     * @implements module:model/GeoViewLayerProperties
     * @param type {module:model/GeoTrackMapViewLayer.TypeEnum} 
     */
    constructor(type) { 
        GeoViewLayerProperties.initialize(this, type);
        GeoTrackMapViewLayer.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>GeoTrackMapViewLayer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoTrackMapViewLayer} obj Optional instance to populate.
     * @return {module:model/GeoTrackMapViewLayer} The populated <code>GeoTrackMapViewLayer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoTrackMapViewLayer();
            GeoViewLayerProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], [DashboardColor]);
            }
            if (data.hasOwnProperty('randomColors')) {
                obj['randomColors'] = ApiClient.convertToType(data['randomColors'], 'Boolean');
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'Number');
            }
            if (data.hasOwnProperty('trackWidth')) {
                obj['trackWidth'] = ApiClient.convertToType(data['trackWidth'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoTrackMapViewLayer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoTrackMapViewLayer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeoTrackMapViewLayer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['colors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['colors'])) {
                throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
            }
            // validate the optional field `colors` (array)
            for (const item of data['colors']) {
                DashboardColor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

GeoTrackMapViewLayer.RequiredProperties = ["type"];

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<module:model/DashboardColor>} colors
 */
GeoTrackMapViewLayer.prototype['colors'] = undefined;

/**
 * Assign different colors to different tracks
 * @member {Boolean} randomColors
 */
GeoTrackMapViewLayer.prototype['randomColors'] = undefined;

/**
 * Speed of the track animation
 * @member {Number} speed
 */
GeoTrackMapViewLayer.prototype['speed'] = undefined;

/**
 * Width of the track
 * @member {Number} trackWidth
 */
GeoTrackMapViewLayer.prototype['trackWidth'] = undefined;

/**
 * @member {module:model/GeoTrackMapViewLayer.TypeEnum} type
 */
GeoTrackMapViewLayer.prototype['type'] = undefined;


// Implement GeoViewLayerProperties interface:
/**
 * @member {module:model/GeoViewLayerProperties.TypeEnum} type
 */
GeoViewLayerProperties.prototype['type'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GeoTrackMapViewLayer['TypeEnum'] = {

    /**
     * value: "heatmap"
     * @const
     */
    "heatmap": "heatmap",

    /**
     * value: "circleMap"
     * @const
     */
    "circleMap": "circleMap",

    /**
     * value: "pointMap"
     * @const
     */
    "pointMap": "pointMap",

    /**
     * value: "trackMap"
     * @const
     */
    "trackMap": "trackMap"
};



export default GeoTrackMapViewLayer;

