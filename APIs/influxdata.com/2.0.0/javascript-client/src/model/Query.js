/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dialect from './Dialect';

/**
 * The Query model module.
 * @module model/Query
 * @version 2.0.0
 */
class Query {
    /**
     * Constructs a new <code>Query</code>.
     * Query influx using the Flux language
     * @alias module:model/Query
     * @param query {String} Query script to execute.
     */
    constructor(query) { 
        
        Query.initialize(this, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, query) { 
        obj['query'] = query;
    }

    /**
     * Constructs a <code>Query</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Query} obj Optional instance to populate.
     * @return {module:model/Query} The populated <code>Query</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Query();

            if (data.hasOwnProperty('dialect')) {
                obj['dialect'] = Dialect.constructFromObject(data['dialect']);
            }
            if (data.hasOwnProperty('extern')) {
                obj['extern'] = File.constructFromObject(data['extern']);
            }
            if (data.hasOwnProperty('now')) {
                obj['now'] = ApiClient.convertToType(data['now'], 'Date');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': Object});
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Query</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Query</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Query.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `dialect`
        if (data['dialect']) { // data not null
          Dialect.validateJSON(data['dialect']);
        }
        // validate the optional field `extern`
        if (data['extern']) { // data not null
          File.validateJSON(data['extern']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Query.RequiredProperties = ["query"];

/**
 * @member {module:model/Dialect} dialect
 */
Query.prototype['dialect'] = undefined;

/**
 * @member {File} extern
 */
Query.prototype['extern'] = undefined;

/**
 * Specifies the time that should be reported as \"now\" in the query. Default is the server's now time.
 * @member {Date} now
 */
Query.prototype['now'] = undefined;

/**
 * Enumeration of key/value pairs that respresent parameters to be injected into query (can only specify either this field or extern and not both) 
 * @member {Object.<String, Object>} params
 */
Query.prototype['params'] = undefined;

/**
 * Query script to execute.
 * @member {String} query
 */
Query.prototype['query'] = undefined;

/**
 * The type of query. Must be \"flux\".
 * @member {module:model/Query.TypeEnum} type
 */
Query.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Query['TypeEnum'] = {

    /**
     * value: "flux"
     * @const
     */
    "flux": "flux"
};



export default Query;

