/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HTTPNotificationRule from './HTTPNotificationRule';
import Label from './Label';
import NotificationRuleBaseLinks from './NotificationRuleBaseLinks';
import PagerDutyNotificationRule from './PagerDutyNotificationRule';
import SMTPNotificationRule from './SMTPNotificationRule';
import SlackNotificationRule from './SlackNotificationRule';
import StatusRule from './StatusRule';
import TagRule from './TagRule';
import TaskStatusType from './TaskStatusType';
import TelegramNotificationRule from './TelegramNotificationRule';

/**
 * The NotificationRuleDiscriminator model module.
 * @module model/NotificationRuleDiscriminator
 * @version 2.0.0
 */
class NotificationRuleDiscriminator {
    /**
     * Constructs a new <code>NotificationRuleDiscriminator</code>.
     * @alias module:model/NotificationRuleDiscriminator
     * @param {(module:model/HTTPNotificationRule|module:model/PagerDutyNotificationRule|module:model/SMTPNotificationRule|module:model/SlackNotificationRule|module:model/TelegramNotificationRule)} instance The actual instance to initialize NotificationRuleDiscriminator.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SlackNotificationRule") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SlackNotificationRule.validateJSON(instance); // throw an exception if no match
                // create SlackNotificationRule from JS object
                this.actualInstance = SlackNotificationRule.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SlackNotificationRule
            errorMessages.push("Failed to construct SlackNotificationRule: " + err)
        }

        try {
            if (typeof instance === "SMTPNotificationRule") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SMTPNotificationRule.validateJSON(instance); // throw an exception if no match
                // create SMTPNotificationRule from JS object
                this.actualInstance = SMTPNotificationRule.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SMTPNotificationRule
            errorMessages.push("Failed to construct SMTPNotificationRule: " + err)
        }

        try {
            if (typeof instance === "PagerDutyNotificationRule") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PagerDutyNotificationRule.validateJSON(instance); // throw an exception if no match
                // create PagerDutyNotificationRule from JS object
                this.actualInstance = PagerDutyNotificationRule.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PagerDutyNotificationRule
            errorMessages.push("Failed to construct PagerDutyNotificationRule: " + err)
        }

        try {
            if (typeof instance === "HTTPNotificationRule") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HTTPNotificationRule.validateJSON(instance); // throw an exception if no match
                // create HTTPNotificationRule from JS object
                this.actualInstance = HTTPNotificationRule.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HTTPNotificationRule
            errorMessages.push("Failed to construct HTTPNotificationRule: " + err)
        }

        try {
            if (typeof instance === "TelegramNotificationRule") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TelegramNotificationRule.validateJSON(instance); // throw an exception if no match
                // create TelegramNotificationRule from JS object
                this.actualInstance = TelegramNotificationRule.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TelegramNotificationRule
            errorMessages.push("Failed to construct TelegramNotificationRule: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `NotificationRuleDiscriminator` with oneOf schemas HTTPNotificationRule, PagerDutyNotificationRule, SMTPNotificationRule, SlackNotificationRule, TelegramNotificationRule. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `NotificationRuleDiscriminator` with oneOf schemas HTTPNotificationRule, PagerDutyNotificationRule, SMTPNotificationRule, SlackNotificationRule, TelegramNotificationRule. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>NotificationRuleDiscriminator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationRuleDiscriminator} obj Optional instance to populate.
     * @return {module:model/NotificationRuleDiscriminator} The populated <code>NotificationRuleDiscriminator</code> instance.
     */
    static constructFromObject(data, obj) {
        return new NotificationRuleDiscriminator(data);
    }

    /**
     * Gets the actual instance, which can be <code>HTTPNotificationRule</code>, <code>PagerDutyNotificationRule</code>, <code>SMTPNotificationRule</code>, <code>SlackNotificationRule</code>, <code>TelegramNotificationRule</code>.
     * @return {(module:model/HTTPNotificationRule|module:model/PagerDutyNotificationRule|module:model/SMTPNotificationRule|module:model/SlackNotificationRule|module:model/TelegramNotificationRule)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>HTTPNotificationRule</code>, <code>PagerDutyNotificationRule</code>, <code>SMTPNotificationRule</code>, <code>SlackNotificationRule</code>, <code>TelegramNotificationRule</code>.
     * @param {(module:model/HTTPNotificationRule|module:model/PagerDutyNotificationRule|module:model/SMTPNotificationRule|module:model/SlackNotificationRule|module:model/TelegramNotificationRule)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = NotificationRuleDiscriminator.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of NotificationRuleDiscriminator from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/NotificationRuleDiscriminator} An instance of NotificationRuleDiscriminator.
     */
    static fromJSON = function(json_string){
        return NotificationRuleDiscriminator.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Date} createdAt
 */
NotificationRuleDiscriminator.prototype['createdAt'] = undefined;

/**
 * An optional description of the notification rule.
 * @member {String} description
 */
NotificationRuleDiscriminator.prototype['description'] = undefined;

/**
 * @member {String} endpointID
 */
NotificationRuleDiscriminator.prototype['endpointID'] = undefined;

/**
 * The notification repetition interval.
 * @member {String} every
 */
NotificationRuleDiscriminator.prototype['every'] = undefined;

/**
 * @member {String} id
 */
NotificationRuleDiscriminator.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
NotificationRuleDiscriminator.prototype['labels'] = undefined;

/**
 * @member {String} lastRunError
 */
NotificationRuleDiscriminator.prototype['lastRunError'] = undefined;

/**
 * @member {module:model/NotificationRuleDiscriminator.LastRunStatusEnum} lastRunStatus
 */
NotificationRuleDiscriminator.prototype['lastRunStatus'] = undefined;

/**
 * Timestamp of latest scheduled, completed run, RFC3339.
 * @member {Date} latestCompleted
 */
NotificationRuleDiscriminator.prototype['latestCompleted'] = undefined;

/**
 * Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty.
 * @member {Number} limit
 */
NotificationRuleDiscriminator.prototype['limit'] = undefined;

/**
 * Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty.
 * @member {Number} limitEvery
 */
NotificationRuleDiscriminator.prototype['limitEvery'] = undefined;

/**
 * @member {module:model/NotificationRuleBaseLinks} links
 */
NotificationRuleDiscriminator.prototype['links'] = undefined;

/**
 * Human-readable name describing the notification rule.
 * @member {String} name
 */
NotificationRuleDiscriminator.prototype['name'] = undefined;

/**
 * Duration to delay after the schedule, before executing check.
 * @member {String} offset
 */
NotificationRuleDiscriminator.prototype['offset'] = undefined;

/**
 * The ID of the organization that owns this notification rule.
 * @member {String} orgID
 */
NotificationRuleDiscriminator.prototype['orgID'] = undefined;

/**
 * The ID of creator used to create this notification rule.
 * @member {String} ownerID
 */
NotificationRuleDiscriminator.prototype['ownerID'] = undefined;

/**
 * @member {String} runbookLink
 */
NotificationRuleDiscriminator.prototype['runbookLink'] = undefined;

/**
 * @member {String} sleepUntil
 */
NotificationRuleDiscriminator.prototype['sleepUntil'] = undefined;

/**
 * @member {module:model/TaskStatusType} status
 */
NotificationRuleDiscriminator.prototype['status'] = undefined;

/**
 * List of status rules the notification rule attempts to match.
 * @member {Array.<module:model/StatusRule>} statusRules
 */
NotificationRuleDiscriminator.prototype['statusRules'] = undefined;

/**
 * List of tag rules the notification rule attempts to match.
 * @member {Array.<module:model/TagRule>} tagRules
 */
NotificationRuleDiscriminator.prototype['tagRules'] = undefined;

/**
 * The ID of the task associated with this notification rule.
 * @member {String} taskID
 */
NotificationRuleDiscriminator.prototype['taskID'] = undefined;

/**
 * @member {Date} updatedAt
 */
NotificationRuleDiscriminator.prototype['updatedAt'] = undefined;

/**
 * @member {String} channel
 */
NotificationRuleDiscriminator.prototype['channel'] = undefined;

/**
 * The message template as a flux interpolated string.
 * @member {String} messageTemplate
 */
NotificationRuleDiscriminator.prototype['messageTemplate'] = undefined;

/**
 * @member {module:model/NotificationRuleDiscriminator.TypeEnum} type
 */
NotificationRuleDiscriminator.prototype['type'] = undefined;

/**
 * @member {String} bodyTemplate
 */
NotificationRuleDiscriminator.prototype['bodyTemplate'] = undefined;

/**
 * @member {String} subjectTemplate
 */
NotificationRuleDiscriminator.prototype['subjectTemplate'] = undefined;

/**
 * @member {String} to
 */
NotificationRuleDiscriminator.prototype['to'] = undefined;

/**
 * @member {String} url
 */
NotificationRuleDiscriminator.prototype['url'] = undefined;

/**
 * Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .
 * @member {Boolean} disableWebPagePreview
 */
NotificationRuleDiscriminator.prototype['disableWebPagePreview'] = undefined;

/**
 * Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .
 * @member {module:model/NotificationRuleDiscriminator.ParseModeEnum} parseMode
 */
NotificationRuleDiscriminator.prototype['parseMode'] = undefined;


NotificationRuleDiscriminator.OneOf = ["HTTPNotificationRule", "PagerDutyNotificationRule", "SMTPNotificationRule", "SlackNotificationRule", "TelegramNotificationRule"];

export default NotificationRuleDiscriminator;

