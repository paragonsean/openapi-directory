/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HTTPNotificationEndpoint from './HTTPNotificationEndpoint';
import Label from './Label';
import NotificationEndpointBaseLinks from './NotificationEndpointBaseLinks';
import NotificationEndpointType from './NotificationEndpointType';
import PagerDutyNotificationEndpoint from './PagerDutyNotificationEndpoint';
import SlackNotificationEndpoint from './SlackNotificationEndpoint';
import TelegramNotificationEndpoint from './TelegramNotificationEndpoint';

/**
 * The NotificationEndpointDiscriminator model module.
 * @module model/NotificationEndpointDiscriminator
 * @version 2.0.0
 */
class NotificationEndpointDiscriminator {
    /**
     * Constructs a new <code>NotificationEndpointDiscriminator</code>.
     * @alias module:model/NotificationEndpointDiscriminator
     * @param {(module:model/HTTPNotificationEndpoint|module:model/PagerDutyNotificationEndpoint|module:model/SlackNotificationEndpoint|module:model/TelegramNotificationEndpoint)} instance The actual instance to initialize NotificationEndpointDiscriminator.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SlackNotificationEndpoint") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SlackNotificationEndpoint.validateJSON(instance); // throw an exception if no match
                // create SlackNotificationEndpoint from JS object
                this.actualInstance = SlackNotificationEndpoint.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SlackNotificationEndpoint
            errorMessages.push("Failed to construct SlackNotificationEndpoint: " + err)
        }

        try {
            if (typeof instance === "PagerDutyNotificationEndpoint") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PagerDutyNotificationEndpoint.validateJSON(instance); // throw an exception if no match
                // create PagerDutyNotificationEndpoint from JS object
                this.actualInstance = PagerDutyNotificationEndpoint.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PagerDutyNotificationEndpoint
            errorMessages.push("Failed to construct PagerDutyNotificationEndpoint: " + err)
        }

        try {
            if (typeof instance === "HTTPNotificationEndpoint") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HTTPNotificationEndpoint.validateJSON(instance); // throw an exception if no match
                // create HTTPNotificationEndpoint from JS object
                this.actualInstance = HTTPNotificationEndpoint.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HTTPNotificationEndpoint
            errorMessages.push("Failed to construct HTTPNotificationEndpoint: " + err)
        }

        try {
            if (typeof instance === "TelegramNotificationEndpoint") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TelegramNotificationEndpoint.validateJSON(instance); // throw an exception if no match
                // create TelegramNotificationEndpoint from JS object
                this.actualInstance = TelegramNotificationEndpoint.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TelegramNotificationEndpoint
            errorMessages.push("Failed to construct TelegramNotificationEndpoint: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `NotificationEndpointDiscriminator` with oneOf schemas HTTPNotificationEndpoint, PagerDutyNotificationEndpoint, SlackNotificationEndpoint, TelegramNotificationEndpoint. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `NotificationEndpointDiscriminator` with oneOf schemas HTTPNotificationEndpoint, PagerDutyNotificationEndpoint, SlackNotificationEndpoint, TelegramNotificationEndpoint. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>NotificationEndpointDiscriminator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationEndpointDiscriminator} obj Optional instance to populate.
     * @return {module:model/NotificationEndpointDiscriminator} The populated <code>NotificationEndpointDiscriminator</code> instance.
     */
    static constructFromObject(data, obj) {
        return new NotificationEndpointDiscriminator(data);
    }

    /**
     * Gets the actual instance, which can be <code>HTTPNotificationEndpoint</code>, <code>PagerDutyNotificationEndpoint</code>, <code>SlackNotificationEndpoint</code>, <code>TelegramNotificationEndpoint</code>.
     * @return {(module:model/HTTPNotificationEndpoint|module:model/PagerDutyNotificationEndpoint|module:model/SlackNotificationEndpoint|module:model/TelegramNotificationEndpoint)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>HTTPNotificationEndpoint</code>, <code>PagerDutyNotificationEndpoint</code>, <code>SlackNotificationEndpoint</code>, <code>TelegramNotificationEndpoint</code>.
     * @param {(module:model/HTTPNotificationEndpoint|module:model/PagerDutyNotificationEndpoint|module:model/SlackNotificationEndpoint|module:model/TelegramNotificationEndpoint)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = NotificationEndpointDiscriminator.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of NotificationEndpointDiscriminator from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/NotificationEndpointDiscriminator} An instance of NotificationEndpointDiscriminator.
     */
    static fromJSON = function(json_string){
        return NotificationEndpointDiscriminator.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Date} createdAt
 */
NotificationEndpointDiscriminator.prototype['createdAt'] = undefined;

/**
 * An optional description of the notification endpoint.
 * @member {String} description
 */
NotificationEndpointDiscriminator.prototype['description'] = undefined;

/**
 * @member {String} id
 */
NotificationEndpointDiscriminator.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
NotificationEndpointDiscriminator.prototype['labels'] = undefined;

/**
 * @member {module:model/NotificationEndpointBaseLinks} links
 */
NotificationEndpointDiscriminator.prototype['links'] = undefined;

/**
 * @member {String} name
 */
NotificationEndpointDiscriminator.prototype['name'] = undefined;

/**
 * @member {String} orgID
 */
NotificationEndpointDiscriminator.prototype['orgID'] = undefined;

/**
 * The status of the endpoint.
 * @member {module:model/NotificationEndpointDiscriminator.StatusEnum} status
 * @default 'active'
 */
NotificationEndpointDiscriminator.prototype['status'] = 'active';

/**
 * @member {module:model/NotificationEndpointType} type
 */
NotificationEndpointDiscriminator.prototype['type'] = undefined;

/**
 * @member {Date} updatedAt
 */
NotificationEndpointDiscriminator.prototype['updatedAt'] = undefined;

/**
 * @member {String} userID
 */
NotificationEndpointDiscriminator.prototype['userID'] = undefined;

/**
 * Specifies the Telegram bot token. See https://core.telegram.org/bots#creating-a-new-bot .
 * @member {String} token
 */
NotificationEndpointDiscriminator.prototype['token'] = undefined;

/**
 * @member {String} url
 */
NotificationEndpointDiscriminator.prototype['url'] = undefined;

/**
 * @member {String} clientURL
 */
NotificationEndpointDiscriminator.prototype['clientURL'] = undefined;

/**
 * @member {String} routingKey
 */
NotificationEndpointDiscriminator.prototype['routingKey'] = undefined;

/**
 * @member {module:model/NotificationEndpointDiscriminator.AuthMethodEnum} authMethod
 */
NotificationEndpointDiscriminator.prototype['authMethod'] = undefined;

/**
 * @member {String} contentTemplate
 */
NotificationEndpointDiscriminator.prototype['contentTemplate'] = undefined;

/**
 * Customized headers.
 * @member {Object.<String, String>} headers
 */
NotificationEndpointDiscriminator.prototype['headers'] = undefined;

/**
 * @member {module:model/NotificationEndpointDiscriminator.MethodEnum} method
 */
NotificationEndpointDiscriminator.prototype['method'] = undefined;

/**
 * @member {String} password
 */
NotificationEndpointDiscriminator.prototype['password'] = undefined;

/**
 * @member {String} username
 */
NotificationEndpointDiscriminator.prototype['username'] = undefined;

/**
 * ID of the telegram channel, a chat_id in https://core.telegram.org/bots/api#sendmessage .
 * @member {String} channel
 */
NotificationEndpointDiscriminator.prototype['channel'] = undefined;


NotificationEndpointDiscriminator.OneOf = ["HTTPNotificationEndpoint", "PagerDutyNotificationEndpoint", "SlackNotificationEndpoint", "TelegramNotificationEndpoint"];

export default NotificationEndpointDiscriminator;

