/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SMTPNotificationRuleBase model module.
 * @module model/SMTPNotificationRuleBase
 * @version 2.0.0
 */
class SMTPNotificationRuleBase {
    /**
     * Constructs a new <code>SMTPNotificationRuleBase</code>.
     * @alias module:model/SMTPNotificationRuleBase
     * @param subjectTemplate {String} 
     * @param to {String} 
     * @param type {module:model/SMTPNotificationRuleBase.TypeEnum} 
     */
    constructor(subjectTemplate, to, type) { 
        
        SMTPNotificationRuleBase.initialize(this, subjectTemplate, to, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subjectTemplate, to, type) { 
        obj['subjectTemplate'] = subjectTemplate;
        obj['to'] = to;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SMTPNotificationRuleBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SMTPNotificationRuleBase} obj Optional instance to populate.
     * @return {module:model/SMTPNotificationRuleBase} The populated <code>SMTPNotificationRuleBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SMTPNotificationRuleBase();

            if (data.hasOwnProperty('bodyTemplate')) {
                obj['bodyTemplate'] = ApiClient.convertToType(data['bodyTemplate'], 'String');
            }
            if (data.hasOwnProperty('subjectTemplate')) {
                obj['subjectTemplate'] = ApiClient.convertToType(data['subjectTemplate'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SMTPNotificationRuleBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SMTPNotificationRuleBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SMTPNotificationRuleBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bodyTemplate'] && !(typeof data['bodyTemplate'] === 'string' || data['bodyTemplate'] instanceof String)) {
            throw new Error("Expected the field `bodyTemplate` to be a primitive type in the JSON string but got " + data['bodyTemplate']);
        }
        // ensure the json data is a string
        if (data['subjectTemplate'] && !(typeof data['subjectTemplate'] === 'string' || data['subjectTemplate'] instanceof String)) {
            throw new Error("Expected the field `subjectTemplate` to be a primitive type in the JSON string but got " + data['subjectTemplate']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SMTPNotificationRuleBase.RequiredProperties = ["subjectTemplate", "to", "type"];

/**
 * @member {String} bodyTemplate
 */
SMTPNotificationRuleBase.prototype['bodyTemplate'] = undefined;

/**
 * @member {String} subjectTemplate
 */
SMTPNotificationRuleBase.prototype['subjectTemplate'] = undefined;

/**
 * @member {String} to
 */
SMTPNotificationRuleBase.prototype['to'] = undefined;

/**
 * @member {module:model/SMTPNotificationRuleBase.TypeEnum} type
 */
SMTPNotificationRuleBase.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SMTPNotificationRuleBase['TypeEnum'] = {

    /**
     * value: "smtp"
     * @const
     */
    "smtp": "smtp"
};



export default SMTPNotificationRuleBase;

