/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckBase from './CheckBase';
import CheckBaseLinks from './CheckBaseLinks';
import DashboardQuery from './DashboardQuery';
import DeadmanCheckAllOfTags from './DeadmanCheckAllOfTags';
import Label from './Label';
import TaskStatusType from './TaskStatusType';
import Threshold from './Threshold';

/**
 * The ThresholdCheck model module.
 * @module model/ThresholdCheck
 * @version 2.0.0
 */
class ThresholdCheck {
    /**
     * Constructs a new <code>ThresholdCheck</code>.
     * @alias module:model/ThresholdCheck
     * @implements module:model/CheckBase
     * @param name {String} 
     * @param orgID {String} The ID of the organization that owns this check.
     * @param query {module:model/DashboardQuery} 
     * @param type {module:model/ThresholdCheck.TypeEnum} 
     */
    constructor(name, orgID, query, type) { 
        CheckBase.initialize(this, name, orgID, query);
        ThresholdCheck.initialize(this, name, orgID, query, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, orgID, query, type) { 
        obj['name'] = name;
        obj['orgID'] = orgID;
        obj['query'] = query;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ThresholdCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThresholdCheck} obj Optional instance to populate.
     * @return {module:model/ThresholdCheck} The populated <code>ThresholdCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThresholdCheck();
            CheckBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('lastRunError')) {
                obj['lastRunError'] = ApiClient.convertToType(data['lastRunError'], 'String');
            }
            if (data.hasOwnProperty('lastRunStatus')) {
                obj['lastRunStatus'] = ApiClient.convertToType(data['lastRunStatus'], 'String');
            }
            if (data.hasOwnProperty('latestCompleted')) {
                obj['latestCompleted'] = ApiClient.convertToType(data['latestCompleted'], 'Date');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = CheckBaseLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('ownerID')) {
                obj['ownerID'] = ApiClient.convertToType(data['ownerID'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = DashboardQuery.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TaskStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('taskID')) {
                obj['taskID'] = ApiClient.convertToType(data['taskID'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('every')) {
                obj['every'] = ApiClient.convertToType(data['every'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
            if (data.hasOwnProperty('statusMessageTemplate')) {
                obj['statusMessageTemplate'] = ApiClient.convertToType(data['statusMessageTemplate'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [DeadmanCheckAllOfTags]);
            }
            if (data.hasOwnProperty('thresholds')) {
                obj['thresholds'] = ApiClient.convertToType(data['thresholds'], [Threshold]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThresholdCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThresholdCheck</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ThresholdCheck.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastRunError'] && !(typeof data['lastRunError'] === 'string' || data['lastRunError'] instanceof String)) {
            throw new Error("Expected the field `lastRunError` to be a primitive type in the JSON string but got " + data['lastRunError']);
        }
        // ensure the json data is a string
        if (data['lastRunStatus'] && !(typeof data['lastRunStatus'] === 'string' || data['lastRunStatus'] instanceof String)) {
            throw new Error("Expected the field `lastRunStatus` to be a primitive type in the JSON string but got " + data['lastRunStatus']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          CheckBaseLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        // ensure the json data is a string
        if (data['ownerID'] && !(typeof data['ownerID'] === 'string' || data['ownerID'] instanceof String)) {
            throw new Error("Expected the field `ownerID` to be a primitive type in the JSON string but got " + data['ownerID']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          DashboardQuery.validateJSON(data['query']);
        }
        // ensure the json data is a string
        if (data['taskID'] && !(typeof data['taskID'] === 'string' || data['taskID'] instanceof String)) {
            throw new Error("Expected the field `taskID` to be a primitive type in the JSON string but got " + data['taskID']);
        }
        // ensure the json data is a string
        if (data['every'] && !(typeof data['every'] === 'string' || data['every'] instanceof String)) {
            throw new Error("Expected the field `every` to be a primitive type in the JSON string but got " + data['every']);
        }
        // ensure the json data is a string
        if (data['offset'] && !(typeof data['offset'] === 'string' || data['offset'] instanceof String)) {
            throw new Error("Expected the field `offset` to be a primitive type in the JSON string but got " + data['offset']);
        }
        // ensure the json data is a string
        if (data['statusMessageTemplate'] && !(typeof data['statusMessageTemplate'] === 'string' || data['statusMessageTemplate'] instanceof String)) {
            throw new Error("Expected the field `statusMessageTemplate` to be a primitive type in the JSON string but got " + data['statusMessageTemplate']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                DeadmanCheckAllOfTags.validateJSON(item);
            };
        }
        if (data['thresholds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thresholds'])) {
                throw new Error("Expected the field `thresholds` to be an array in the JSON data but got " + data['thresholds']);
            }
            // validate the optional field `thresholds` (array)
            for (const item of data['thresholds']) {
                Threshold.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ThresholdCheck.RequiredProperties = ["name", "orgID", "query", "type"];

/**
 * @member {Date} createdAt
 */
ThresholdCheck.prototype['createdAt'] = undefined;

/**
 * An optional description of the check.
 * @member {String} description
 */
ThresholdCheck.prototype['description'] = undefined;

/**
 * @member {String} id
 */
ThresholdCheck.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
ThresholdCheck.prototype['labels'] = undefined;

/**
 * @member {String} lastRunError
 */
ThresholdCheck.prototype['lastRunError'] = undefined;

/**
 * @member {module:model/ThresholdCheck.LastRunStatusEnum} lastRunStatus
 */
ThresholdCheck.prototype['lastRunStatus'] = undefined;

/**
 * Timestamp of latest scheduled, completed run, RFC3339.
 * @member {Date} latestCompleted
 */
ThresholdCheck.prototype['latestCompleted'] = undefined;

/**
 * @member {module:model/CheckBaseLinks} links
 */
ThresholdCheck.prototype['links'] = undefined;

/**
 * @member {String} name
 */
ThresholdCheck.prototype['name'] = undefined;

/**
 * The ID of the organization that owns this check.
 * @member {String} orgID
 */
ThresholdCheck.prototype['orgID'] = undefined;

/**
 * The ID of creator used to create this check.
 * @member {String} ownerID
 */
ThresholdCheck.prototype['ownerID'] = undefined;

/**
 * @member {module:model/DashboardQuery} query
 */
ThresholdCheck.prototype['query'] = undefined;

/**
 * @member {module:model/TaskStatusType} status
 */
ThresholdCheck.prototype['status'] = undefined;

/**
 * The ID of the task associated with this check.
 * @member {String} taskID
 */
ThresholdCheck.prototype['taskID'] = undefined;

/**
 * @member {Date} updatedAt
 */
ThresholdCheck.prototype['updatedAt'] = undefined;

/**
 * Check repetition interval.
 * @member {String} every
 */
ThresholdCheck.prototype['every'] = undefined;

/**
 * Duration to delay after the schedule, before executing check.
 * @member {String} offset
 */
ThresholdCheck.prototype['offset'] = undefined;

/**
 * The template used to generate and write a status message.
 * @member {String} statusMessageTemplate
 */
ThresholdCheck.prototype['statusMessageTemplate'] = undefined;

/**
 * List of tags to write to each status.
 * @member {Array.<module:model/DeadmanCheckAllOfTags>} tags
 */
ThresholdCheck.prototype['tags'] = undefined;

/**
 * @member {Array.<module:model/Threshold>} thresholds
 */
ThresholdCheck.prototype['thresholds'] = undefined;

/**
 * @member {module:model/ThresholdCheck.TypeEnum} type
 */
ThresholdCheck.prototype['type'] = undefined;


// Implement CheckBase interface:
/**
 * @member {Date} createdAt
 */
CheckBase.prototype['createdAt'] = undefined;
/**
 * An optional description of the check.
 * @member {String} description
 */
CheckBase.prototype['description'] = undefined;
/**
 * @member {String} id
 */
CheckBase.prototype['id'] = undefined;
/**
 * @member {Array.<module:model/Label>} labels
 */
CheckBase.prototype['labels'] = undefined;
/**
 * @member {String} lastRunError
 */
CheckBase.prototype['lastRunError'] = undefined;
/**
 * @member {module:model/CheckBase.LastRunStatusEnum} lastRunStatus
 */
CheckBase.prototype['lastRunStatus'] = undefined;
/**
 * Timestamp of latest scheduled, completed run, RFC3339.
 * @member {Date} latestCompleted
 */
CheckBase.prototype['latestCompleted'] = undefined;
/**
 * @member {module:model/CheckBaseLinks} links
 */
CheckBase.prototype['links'] = undefined;
/**
 * @member {String} name
 */
CheckBase.prototype['name'] = undefined;
/**
 * The ID of the organization that owns this check.
 * @member {String} orgID
 */
CheckBase.prototype['orgID'] = undefined;
/**
 * The ID of creator used to create this check.
 * @member {String} ownerID
 */
CheckBase.prototype['ownerID'] = undefined;
/**
 * @member {module:model/DashboardQuery} query
 */
CheckBase.prototype['query'] = undefined;
/**
 * @member {module:model/TaskStatusType} status
 */
CheckBase.prototype['status'] = undefined;
/**
 * The ID of the task associated with this check.
 * @member {String} taskID
 */
CheckBase.prototype['taskID'] = undefined;
/**
 * @member {Date} updatedAt
 */
CheckBase.prototype['updatedAt'] = undefined;



/**
 * Allowed values for the <code>lastRunStatus</code> property.
 * @enum {String}
 * @readonly
 */
ThresholdCheck['LastRunStatusEnum'] = {

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ThresholdCheck['TypeEnum'] = {

    /**
     * value: "threshold"
     * @const
     */
    "threshold": "threshold"
};



export default ThresholdCheck;

