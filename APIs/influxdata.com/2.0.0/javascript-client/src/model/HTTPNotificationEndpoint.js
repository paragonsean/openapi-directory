/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';
import NotificationEndpointBase from './NotificationEndpointBase';
import NotificationEndpointBaseLinks from './NotificationEndpointBaseLinks';
import NotificationEndpointType from './NotificationEndpointType';

/**
 * The HTTPNotificationEndpoint model module.
 * @module model/HTTPNotificationEndpoint
 * @version 2.0.0
 */
class HTTPNotificationEndpoint {
    /**
     * Constructs a new <code>HTTPNotificationEndpoint</code>.
     * @alias module:model/HTTPNotificationEndpoint
     * @implements module:model/NotificationEndpointBase
     * @param name {String} 
     * @param type {module:model/NotificationEndpointType} 
     * @param authMethod {module:model/HTTPNotificationEndpoint.AuthMethodEnum} 
     * @param method {module:model/HTTPNotificationEndpoint.MethodEnum} 
     * @param url {String} 
     */
    constructor(name, type, authMethod, method, url) { 
        NotificationEndpointBase.initialize(this, name, type);
        HTTPNotificationEndpoint.initialize(this, name, type, authMethod, method, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, authMethod, method, url) { 
        obj['name'] = name;
        obj['status'] = 'active';
        obj['type'] = type;
        obj['authMethod'] = authMethod;
        obj['method'] = method;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>HTTPNotificationEndpoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HTTPNotificationEndpoint} obj Optional instance to populate.
     * @return {module:model/HTTPNotificationEndpoint} The populated <code>HTTPNotificationEndpoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HTTPNotificationEndpoint();
            NotificationEndpointBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = NotificationEndpointBaseLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = NotificationEndpointType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('userID')) {
                obj['userID'] = ApiClient.convertToType(data['userID'], 'String');
            }
            if (data.hasOwnProperty('authMethod')) {
                obj['authMethod'] = ApiClient.convertToType(data['authMethod'], 'String');
            }
            if (data.hasOwnProperty('contentTemplate')) {
                obj['contentTemplate'] = ApiClient.convertToType(data['contentTemplate'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HTTPNotificationEndpoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HTTPNotificationEndpoint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HTTPNotificationEndpoint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          NotificationEndpointBaseLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['userID'] && !(typeof data['userID'] === 'string' || data['userID'] instanceof String)) {
            throw new Error("Expected the field `userID` to be a primitive type in the JSON string but got " + data['userID']);
        }
        // ensure the json data is a string
        if (data['authMethod'] && !(typeof data['authMethod'] === 'string' || data['authMethod'] instanceof String)) {
            throw new Error("Expected the field `authMethod` to be a primitive type in the JSON string but got " + data['authMethod']);
        }
        // ensure the json data is a string
        if (data['contentTemplate'] && !(typeof data['contentTemplate'] === 'string' || data['contentTemplate'] instanceof String)) {
            throw new Error("Expected the field `contentTemplate` to be a primitive type in the JSON string but got " + data['contentTemplate']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

HTTPNotificationEndpoint.RequiredProperties = ["name", "type", "authMethod", "method", "url"];

/**
 * @member {Date} createdAt
 */
HTTPNotificationEndpoint.prototype['createdAt'] = undefined;

/**
 * An optional description of the notification endpoint.
 * @member {String} description
 */
HTTPNotificationEndpoint.prototype['description'] = undefined;

/**
 * @member {String} id
 */
HTTPNotificationEndpoint.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
HTTPNotificationEndpoint.prototype['labels'] = undefined;

/**
 * @member {module:model/NotificationEndpointBaseLinks} links
 */
HTTPNotificationEndpoint.prototype['links'] = undefined;

/**
 * @member {String} name
 */
HTTPNotificationEndpoint.prototype['name'] = undefined;

/**
 * @member {String} orgID
 */
HTTPNotificationEndpoint.prototype['orgID'] = undefined;

/**
 * The status of the endpoint.
 * @member {module:model/HTTPNotificationEndpoint.StatusEnum} status
 * @default 'active'
 */
HTTPNotificationEndpoint.prototype['status'] = 'active';

/**
 * @member {module:model/NotificationEndpointType} type
 */
HTTPNotificationEndpoint.prototype['type'] = undefined;

/**
 * @member {Date} updatedAt
 */
HTTPNotificationEndpoint.prototype['updatedAt'] = undefined;

/**
 * @member {String} userID
 */
HTTPNotificationEndpoint.prototype['userID'] = undefined;

/**
 * @member {module:model/HTTPNotificationEndpoint.AuthMethodEnum} authMethod
 */
HTTPNotificationEndpoint.prototype['authMethod'] = undefined;

/**
 * @member {String} contentTemplate
 */
HTTPNotificationEndpoint.prototype['contentTemplate'] = undefined;

/**
 * Customized headers.
 * @member {Object.<String, String>} headers
 */
HTTPNotificationEndpoint.prototype['headers'] = undefined;

/**
 * @member {module:model/HTTPNotificationEndpoint.MethodEnum} method
 */
HTTPNotificationEndpoint.prototype['method'] = undefined;

/**
 * @member {String} password
 */
HTTPNotificationEndpoint.prototype['password'] = undefined;

/**
 * @member {String} token
 */
HTTPNotificationEndpoint.prototype['token'] = undefined;

/**
 * @member {String} url
 */
HTTPNotificationEndpoint.prototype['url'] = undefined;

/**
 * @member {String} username
 */
HTTPNotificationEndpoint.prototype['username'] = undefined;


// Implement NotificationEndpointBase interface:
/**
 * @member {Date} createdAt
 */
NotificationEndpointBase.prototype['createdAt'] = undefined;
/**
 * An optional description of the notification endpoint.
 * @member {String} description
 */
NotificationEndpointBase.prototype['description'] = undefined;
/**
 * @member {String} id
 */
NotificationEndpointBase.prototype['id'] = undefined;
/**
 * @member {Array.<module:model/Label>} labels
 */
NotificationEndpointBase.prototype['labels'] = undefined;
/**
 * @member {module:model/NotificationEndpointBaseLinks} links
 */
NotificationEndpointBase.prototype['links'] = undefined;
/**
 * @member {String} name
 */
NotificationEndpointBase.prototype['name'] = undefined;
/**
 * @member {String} orgID
 */
NotificationEndpointBase.prototype['orgID'] = undefined;
/**
 * The status of the endpoint.
 * @member {module:model/NotificationEndpointBase.StatusEnum} status
 * @default 'active'
 */
NotificationEndpointBase.prototype['status'] = 'active';
/**
 * @member {module:model/NotificationEndpointType} type
 */
NotificationEndpointBase.prototype['type'] = undefined;
/**
 * @member {Date} updatedAt
 */
NotificationEndpointBase.prototype['updatedAt'] = undefined;
/**
 * @member {String} userID
 */
NotificationEndpointBase.prototype['userID'] = undefined;



/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
HTTPNotificationEndpoint['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};


/**
 * Allowed values for the <code>authMethod</code> property.
 * @enum {String}
 * @readonly
 */
HTTPNotificationEndpoint['AuthMethodEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "basic"
     * @const
     */
    "basic": "basic",

    /**
     * value: "bearer"
     * @const
     */
    "bearer": "bearer"
};


/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
HTTPNotificationEndpoint['MethodEnum'] = {

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT"
};



export default HTTPNotificationEndpoint;

