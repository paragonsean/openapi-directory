/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogEvent from './LogEvent';
import RunLinks from './RunLinks';

/**
 * The Run model module.
 * @module model/Run
 * @version 2.0.0
 */
class Run {
    /**
     * Constructs a new <code>Run</code>.
     * @alias module:model/Run
     */
    constructor() { 
        
        Run.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Run</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Run} obj Optional instance to populate.
     * @return {module:model/Run} The populated <code>Run</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Run();

            if (data.hasOwnProperty('finishedAt')) {
                obj['finishedAt'] = ApiClient.convertToType(data['finishedAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = RunLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('log')) {
                obj['log'] = ApiClient.convertToType(data['log'], [LogEvent]);
            }
            if (data.hasOwnProperty('requestedAt')) {
                obj['requestedAt'] = ApiClient.convertToType(data['requestedAt'], 'Date');
            }
            if (data.hasOwnProperty('scheduledFor')) {
                obj['scheduledFor'] = ApiClient.convertToType(data['scheduledFor'], 'Date');
            }
            if (data.hasOwnProperty('startedAt')) {
                obj['startedAt'] = ApiClient.convertToType(data['startedAt'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taskID')) {
                obj['taskID'] = ApiClient.convertToType(data['taskID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Run</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Run</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          RunLinks.validateJSON(data['links']);
        }
        if (data['log']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['log'])) {
                throw new Error("Expected the field `log` to be an array in the JSON data but got " + data['log']);
            }
            // validate the optional field `log` (array)
            for (const item of data['log']) {
                LogEvent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['taskID'] && !(typeof data['taskID'] === 'string' || data['taskID'] instanceof String)) {
            throw new Error("Expected the field `taskID` to be a primitive type in the JSON string but got " + data['taskID']);
        }

        return true;
    }


}



/**
 * Time run finished executing, RFC3339Nano.
 * @member {Date} finishedAt
 */
Run.prototype['finishedAt'] = undefined;

/**
 * @member {String} id
 */
Run.prototype['id'] = undefined;

/**
 * @member {module:model/RunLinks} links
 */
Run.prototype['links'] = undefined;

/**
 * An array of logs associated with the run.
 * @member {Array.<module:model/LogEvent>} log
 */
Run.prototype['log'] = undefined;

/**
 * Time run was manually requested, RFC3339Nano.
 * @member {Date} requestedAt
 */
Run.prototype['requestedAt'] = undefined;

/**
 * Time used for run's \"now\" option, RFC3339.
 * @member {Date} scheduledFor
 */
Run.prototype['scheduledFor'] = undefined;

/**
 * Time run started executing, RFC3339Nano.
 * @member {Date} startedAt
 */
Run.prototype['startedAt'] = undefined;

/**
 * @member {module:model/Run.StatusEnum} status
 */
Run.prototype['status'] = undefined;

/**
 * @member {String} taskID
 */
Run.prototype['taskID'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Run['StatusEnum'] = {

    /**
     * value: "scheduled"
     * @const
     */
    "scheduled": "scheduled",

    /**
     * value: "started"
     * @const
     */
    "started": "started",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled"
};



export default Run;

