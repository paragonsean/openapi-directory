/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatchRetentionRule model module.
 * @module model/PatchRetentionRule
 * @version 2.0.0
 */
class PatchRetentionRule {
    /**
     * Constructs a new <code>PatchRetentionRule</code>.
     * Updates to a rule to expire or retain data.
     * @alias module:model/PatchRetentionRule
     * @param type {module:model/PatchRetentionRule.TypeEnum} 
     */
    constructor(type) { 
        
        PatchRetentionRule.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type || 'expire';
    }

    /**
     * Constructs a <code>PatchRetentionRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchRetentionRule} obj Optional instance to populate.
     * @return {module:model/PatchRetentionRule} The populated <code>PatchRetentionRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchRetentionRule();

            if (data.hasOwnProperty('everySeconds')) {
                obj['everySeconds'] = ApiClient.convertToType(data['everySeconds'], 'Number');
            }
            if (data.hasOwnProperty('shardGroupDurationSeconds')) {
                obj['shardGroupDurationSeconds'] = ApiClient.convertToType(data['shardGroupDurationSeconds'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchRetentionRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchRetentionRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatchRetentionRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PatchRetentionRule.RequiredProperties = ["type"];

/**
 * Duration in seconds for how long data will be kept in the database. 0 means infinite.
 * @member {Number} everySeconds
 */
PatchRetentionRule.prototype['everySeconds'] = undefined;

/**
 * Shard duration measured in seconds.
 * @member {Number} shardGroupDurationSeconds
 */
PatchRetentionRule.prototype['shardGroupDurationSeconds'] = undefined;

/**
 * @member {module:model/PatchRetentionRule.TypeEnum} type
 * @default 'expire'
 */
PatchRetentionRule.prototype['type'] = 'expire';





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PatchRetentionRule['TypeEnum'] = {

    /**
     * value: "expire"
     * @const
     */
    "expire": "expire"
};



export default PatchRetentionRule;

