/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SourceLinks from './SourceLinks';

/**
 * The Source model module.
 * @module model/Source
 * @version 2.0.0
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * @alias module:model/Source
     */
    constructor() { 
        
        Source.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultRP')) {
                obj['defaultRP'] = ApiClient.convertToType(data['defaultRP'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('insecureSkipVerify')) {
                obj['insecureSkipVerify'] = ApiClient.convertToType(data['insecureSkipVerify'], 'Boolean');
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], ['String']);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = SourceLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('metaUrl')) {
                obj['metaUrl'] = ApiClient.convertToType(data['metaUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('sharedSecret')) {
                obj['sharedSecret'] = ApiClient.convertToType(data['sharedSecret'], 'String');
            }
            if (data.hasOwnProperty('telegraf')) {
                obj['telegraf'] = ApiClient.convertToType(data['telegraf'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['defaultRP'] && !(typeof data['defaultRP'] === 'string' || data['defaultRP'] instanceof String)) {
            throw new Error("Expected the field `defaultRP` to be a primitive type in the JSON string but got " + data['defaultRP']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languages'])) {
            throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          SourceLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['metaUrl'] && !(typeof data['metaUrl'] === 'string' || data['metaUrl'] instanceof String)) {
            throw new Error("Expected the field `metaUrl` to be a primitive type in the JSON string but got " + data['metaUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['sharedSecret'] && !(typeof data['sharedSecret'] === 'string' || data['sharedSecret'] instanceof String)) {
            throw new Error("Expected the field `sharedSecret` to be a primitive type in the JSON string but got " + data['sharedSecret']);
        }
        // ensure the json data is a string
        if (data['telegraf'] && !(typeof data['telegraf'] === 'string' || data['telegraf'] instanceof String)) {
            throw new Error("Expected the field `telegraf` to be a primitive type in the JSON string but got " + data['telegraf']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {Boolean} default
 */
Source.prototype['default'] = undefined;

/**
 * @member {String} defaultRP
 */
Source.prototype['defaultRP'] = undefined;

/**
 * @member {String} id
 */
Source.prototype['id'] = undefined;

/**
 * @member {Boolean} insecureSkipVerify
 */
Source.prototype['insecureSkipVerify'] = undefined;

/**
 * @member {Array.<module:model/Source.LanguagesEnum>} languages
 */
Source.prototype['languages'] = undefined;

/**
 * @member {module:model/SourceLinks} links
 */
Source.prototype['links'] = undefined;

/**
 * @member {String} metaUrl
 */
Source.prototype['metaUrl'] = undefined;

/**
 * @member {String} name
 */
Source.prototype['name'] = undefined;

/**
 * @member {String} orgID
 */
Source.prototype['orgID'] = undefined;

/**
 * @member {String} password
 */
Source.prototype['password'] = undefined;

/**
 * @member {String} sharedSecret
 */
Source.prototype['sharedSecret'] = undefined;

/**
 * @member {String} telegraf
 */
Source.prototype['telegraf'] = undefined;

/**
 * @member {String} token
 */
Source.prototype['token'] = undefined;

/**
 * @member {module:model/Source.TypeEnum} type
 */
Source.prototype['type'] = undefined;

/**
 * @member {String} url
 */
Source.prototype['url'] = undefined;

/**
 * @member {String} username
 */
Source.prototype['username'] = undefined;





/**
 * Allowed values for the <code>languages</code> property.
 * @enum {String}
 * @readonly
 */
Source['LanguagesEnum'] = {

    /**
     * value: "flux"
     * @const
     */
    "flux": "flux",

    /**
     * value: "influxql"
     * @const
     */
    "influxql": "influxql"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Source['TypeEnum'] = {

    /**
     * value: "v1"
     * @const
     */
    "v1": "v1",

    /**
     * value: "v2"
     * @const
     */
    "v2": "v2",

    /**
     * value: "self"
     * @const
     */
    "self": "self"
};



export default Source;

