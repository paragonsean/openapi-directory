/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DashboardQuery from './DashboardQuery';

/**
 * The MosaicViewProperties model module.
 * @module model/MosaicViewProperties
 * @version 2.0.0
 */
class MosaicViewProperties {
    /**
     * Constructs a new <code>MosaicViewProperties</code>.
     * @alias module:model/MosaicViewProperties
     * @param colors {Array.<String>} Colors define color encoding of data into a visualization
     * @param fillColumns {Array.<String>} 
     * @param note {String} 
     * @param queries {Array.<module:model/DashboardQuery>} 
     * @param shape {module:model/MosaicViewProperties.ShapeEnum} 
     * @param showNoteWhenEmpty {Boolean} If true, will display note when empty
     * @param type {module:model/MosaicViewProperties.TypeEnum} 
     * @param xAxisLabel {String} 
     * @param xColumn {String} 
     * @param xDomain {Array.<Number>} 
     * @param xPrefix {String} 
     * @param xSuffix {String} 
     * @param yAxisLabel {String} 
     * @param yDomain {Array.<Number>} 
     * @param yPrefix {String} 
     * @param ySeriesColumns {Array.<String>} 
     * @param ySuffix {String} 
     */
    constructor(colors, fillColumns, note, queries, shape, showNoteWhenEmpty, type, xAxisLabel, xColumn, xDomain, xPrefix, xSuffix, yAxisLabel, yDomain, yPrefix, ySeriesColumns, ySuffix) { 
        
        MosaicViewProperties.initialize(this, colors, fillColumns, note, queries, shape, showNoteWhenEmpty, type, xAxisLabel, xColumn, xDomain, xPrefix, xSuffix, yAxisLabel, yDomain, yPrefix, ySeriesColumns, ySuffix);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, colors, fillColumns, note, queries, shape, showNoteWhenEmpty, type, xAxisLabel, xColumn, xDomain, xPrefix, xSuffix, yAxisLabel, yDomain, yPrefix, ySeriesColumns, ySuffix) { 
        obj['colors'] = colors;
        obj['fillColumns'] = fillColumns;
        obj['note'] = note;
        obj['queries'] = queries;
        obj['shape'] = shape;
        obj['showNoteWhenEmpty'] = showNoteWhenEmpty;
        obj['type'] = type;
        obj['xAxisLabel'] = xAxisLabel;
        obj['xColumn'] = xColumn;
        obj['xDomain'] = xDomain;
        obj['xPrefix'] = xPrefix;
        obj['xSuffix'] = xSuffix;
        obj['yAxisLabel'] = yAxisLabel;
        obj['yDomain'] = yDomain;
        obj['yPrefix'] = yPrefix;
        obj['ySeriesColumns'] = ySeriesColumns;
        obj['ySuffix'] = ySuffix;
    }

    /**
     * Constructs a <code>MosaicViewProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MosaicViewProperties} obj Optional instance to populate.
     * @return {module:model/MosaicViewProperties} The populated <code>MosaicViewProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MosaicViewProperties();

            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], ['String']);
            }
            if (data.hasOwnProperty('fillColumns')) {
                obj['fillColumns'] = ApiClient.convertToType(data['fillColumns'], ['String']);
            }
            if (data.hasOwnProperty('generateXAxisTicks')) {
                obj['generateXAxisTicks'] = ApiClient.convertToType(data['generateXAxisTicks'], ['String']);
            }
            if (data.hasOwnProperty('hoverDimension')) {
                obj['hoverDimension'] = ApiClient.convertToType(data['hoverDimension'], 'String');
            }
            if (data.hasOwnProperty('legendColorizeRows')) {
                obj['legendColorizeRows'] = ApiClient.convertToType(data['legendColorizeRows'], 'Boolean');
            }
            if (data.hasOwnProperty('legendHide')) {
                obj['legendHide'] = ApiClient.convertToType(data['legendHide'], 'Boolean');
            }
            if (data.hasOwnProperty('legendOpacity')) {
                obj['legendOpacity'] = ApiClient.convertToType(data['legendOpacity'], 'Number');
            }
            if (data.hasOwnProperty('legendOrientationThreshold')) {
                obj['legendOrientationThreshold'] = ApiClient.convertToType(data['legendOrientationThreshold'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], [DashboardQuery]);
            }
            if (data.hasOwnProperty('shape')) {
                obj['shape'] = ApiClient.convertToType(data['shape'], 'String');
            }
            if (data.hasOwnProperty('showNoteWhenEmpty')) {
                obj['showNoteWhenEmpty'] = ApiClient.convertToType(data['showNoteWhenEmpty'], 'Boolean');
            }
            if (data.hasOwnProperty('timeFormat')) {
                obj['timeFormat'] = ApiClient.convertToType(data['timeFormat'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('xAxisLabel')) {
                obj['xAxisLabel'] = ApiClient.convertToType(data['xAxisLabel'], 'String');
            }
            if (data.hasOwnProperty('xColumn')) {
                obj['xColumn'] = ApiClient.convertToType(data['xColumn'], 'String');
            }
            if (data.hasOwnProperty('xDomain')) {
                obj['xDomain'] = ApiClient.convertToType(data['xDomain'], ['Number']);
            }
            if (data.hasOwnProperty('xPrefix')) {
                obj['xPrefix'] = ApiClient.convertToType(data['xPrefix'], 'String');
            }
            if (data.hasOwnProperty('xSuffix')) {
                obj['xSuffix'] = ApiClient.convertToType(data['xSuffix'], 'String');
            }
            if (data.hasOwnProperty('xTickStart')) {
                obj['xTickStart'] = ApiClient.convertToType(data['xTickStart'], 'Number');
            }
            if (data.hasOwnProperty('xTickStep')) {
                obj['xTickStep'] = ApiClient.convertToType(data['xTickStep'], 'Number');
            }
            if (data.hasOwnProperty('xTotalTicks')) {
                obj['xTotalTicks'] = ApiClient.convertToType(data['xTotalTicks'], 'Number');
            }
            if (data.hasOwnProperty('yAxisLabel')) {
                obj['yAxisLabel'] = ApiClient.convertToType(data['yAxisLabel'], 'String');
            }
            if (data.hasOwnProperty('yDomain')) {
                obj['yDomain'] = ApiClient.convertToType(data['yDomain'], ['Number']);
            }
            if (data.hasOwnProperty('yLabelColumnSeparator')) {
                obj['yLabelColumnSeparator'] = ApiClient.convertToType(data['yLabelColumnSeparator'], 'String');
            }
            if (data.hasOwnProperty('yLabelColumns')) {
                obj['yLabelColumns'] = ApiClient.convertToType(data['yLabelColumns'], ['String']);
            }
            if (data.hasOwnProperty('yPrefix')) {
                obj['yPrefix'] = ApiClient.convertToType(data['yPrefix'], 'String');
            }
            if (data.hasOwnProperty('ySeriesColumns')) {
                obj['ySeriesColumns'] = ApiClient.convertToType(data['ySeriesColumns'], ['String']);
            }
            if (data.hasOwnProperty('ySuffix')) {
                obj['ySuffix'] = ApiClient.convertToType(data['ySuffix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MosaicViewProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MosaicViewProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MosaicViewProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['colors'])) {
            throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fillColumns'])) {
            throw new Error("Expected the field `fillColumns` to be an array in the JSON data but got " + data['fillColumns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['generateXAxisTicks'])) {
            throw new Error("Expected the field `generateXAxisTicks` to be an array in the JSON data but got " + data['generateXAxisTicks']);
        }
        // ensure the json data is a string
        if (data['hoverDimension'] && !(typeof data['hoverDimension'] === 'string' || data['hoverDimension'] instanceof String)) {
            throw new Error("Expected the field `hoverDimension` to be a primitive type in the JSON string but got " + data['hoverDimension']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        if (data['queries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queries'])) {
                throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
            }
            // validate the optional field `queries` (array)
            for (const item of data['queries']) {
                DashboardQuery.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shape'] && !(typeof data['shape'] === 'string' || data['shape'] instanceof String)) {
            throw new Error("Expected the field `shape` to be a primitive type in the JSON string but got " + data['shape']);
        }
        // ensure the json data is a string
        if (data['timeFormat'] && !(typeof data['timeFormat'] === 'string' || data['timeFormat'] instanceof String)) {
            throw new Error("Expected the field `timeFormat` to be a primitive type in the JSON string but got " + data['timeFormat']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['xAxisLabel'] && !(typeof data['xAxisLabel'] === 'string' || data['xAxisLabel'] instanceof String)) {
            throw new Error("Expected the field `xAxisLabel` to be a primitive type in the JSON string but got " + data['xAxisLabel']);
        }
        // ensure the json data is a string
        if (data['xColumn'] && !(typeof data['xColumn'] === 'string' || data['xColumn'] instanceof String)) {
            throw new Error("Expected the field `xColumn` to be a primitive type in the JSON string but got " + data['xColumn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['xDomain'])) {
            throw new Error("Expected the field `xDomain` to be an array in the JSON data but got " + data['xDomain']);
        }
        // ensure the json data is a string
        if (data['xPrefix'] && !(typeof data['xPrefix'] === 'string' || data['xPrefix'] instanceof String)) {
            throw new Error("Expected the field `xPrefix` to be a primitive type in the JSON string but got " + data['xPrefix']);
        }
        // ensure the json data is a string
        if (data['xSuffix'] && !(typeof data['xSuffix'] === 'string' || data['xSuffix'] instanceof String)) {
            throw new Error("Expected the field `xSuffix` to be a primitive type in the JSON string but got " + data['xSuffix']);
        }
        // ensure the json data is a string
        if (data['yAxisLabel'] && !(typeof data['yAxisLabel'] === 'string' || data['yAxisLabel'] instanceof String)) {
            throw new Error("Expected the field `yAxisLabel` to be a primitive type in the JSON string but got " + data['yAxisLabel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['yDomain'])) {
            throw new Error("Expected the field `yDomain` to be an array in the JSON data but got " + data['yDomain']);
        }
        // ensure the json data is a string
        if (data['yLabelColumnSeparator'] && !(typeof data['yLabelColumnSeparator'] === 'string' || data['yLabelColumnSeparator'] instanceof String)) {
            throw new Error("Expected the field `yLabelColumnSeparator` to be a primitive type in the JSON string but got " + data['yLabelColumnSeparator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['yLabelColumns'])) {
            throw new Error("Expected the field `yLabelColumns` to be an array in the JSON data but got " + data['yLabelColumns']);
        }
        // ensure the json data is a string
        if (data['yPrefix'] && !(typeof data['yPrefix'] === 'string' || data['yPrefix'] instanceof String)) {
            throw new Error("Expected the field `yPrefix` to be a primitive type in the JSON string but got " + data['yPrefix']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ySeriesColumns'])) {
            throw new Error("Expected the field `ySeriesColumns` to be an array in the JSON data but got " + data['ySeriesColumns']);
        }
        // ensure the json data is a string
        if (data['ySuffix'] && !(typeof data['ySuffix'] === 'string' || data['ySuffix'] instanceof String)) {
            throw new Error("Expected the field `ySuffix` to be a primitive type in the JSON string but got " + data['ySuffix']);
        }

        return true;
    }


}

MosaicViewProperties.RequiredProperties = ["colors", "fillColumns", "note", "queries", "shape", "showNoteWhenEmpty", "type", "xAxisLabel", "xColumn", "xDomain", "xPrefix", "xSuffix", "yAxisLabel", "yDomain", "yPrefix", "ySeriesColumns", "ySuffix"];

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<String>} colors
 */
MosaicViewProperties.prototype['colors'] = undefined;

/**
 * @member {Array.<String>} fillColumns
 */
MosaicViewProperties.prototype['fillColumns'] = undefined;

/**
 * @member {Array.<String>} generateXAxisTicks
 */
MosaicViewProperties.prototype['generateXAxisTicks'] = undefined;

/**
 * @member {module:model/MosaicViewProperties.HoverDimensionEnum} hoverDimension
 */
MosaicViewProperties.prototype['hoverDimension'] = undefined;

/**
 * @member {Boolean} legendColorizeRows
 */
MosaicViewProperties.prototype['legendColorizeRows'] = undefined;

/**
 * @member {Boolean} legendHide
 */
MosaicViewProperties.prototype['legendHide'] = undefined;

/**
 * @member {Number} legendOpacity
 */
MosaicViewProperties.prototype['legendOpacity'] = undefined;

/**
 * @member {Number} legendOrientationThreshold
 */
MosaicViewProperties.prototype['legendOrientationThreshold'] = undefined;

/**
 * @member {String} note
 */
MosaicViewProperties.prototype['note'] = undefined;

/**
 * @member {Array.<module:model/DashboardQuery>} queries
 */
MosaicViewProperties.prototype['queries'] = undefined;

/**
 * @member {module:model/MosaicViewProperties.ShapeEnum} shape
 */
MosaicViewProperties.prototype['shape'] = undefined;

/**
 * If true, will display note when empty
 * @member {Boolean} showNoteWhenEmpty
 */
MosaicViewProperties.prototype['showNoteWhenEmpty'] = undefined;

/**
 * @member {String} timeFormat
 */
MosaicViewProperties.prototype['timeFormat'] = undefined;

/**
 * @member {module:model/MosaicViewProperties.TypeEnum} type
 */
MosaicViewProperties.prototype['type'] = undefined;

/**
 * @member {String} xAxisLabel
 */
MosaicViewProperties.prototype['xAxisLabel'] = undefined;

/**
 * @member {String} xColumn
 */
MosaicViewProperties.prototype['xColumn'] = undefined;

/**
 * @member {Array.<Number>} xDomain
 */
MosaicViewProperties.prototype['xDomain'] = undefined;

/**
 * @member {String} xPrefix
 */
MosaicViewProperties.prototype['xPrefix'] = undefined;

/**
 * @member {String} xSuffix
 */
MosaicViewProperties.prototype['xSuffix'] = undefined;

/**
 * @member {Number} xTickStart
 */
MosaicViewProperties.prototype['xTickStart'] = undefined;

/**
 * @member {Number} xTickStep
 */
MosaicViewProperties.prototype['xTickStep'] = undefined;

/**
 * @member {Number} xTotalTicks
 */
MosaicViewProperties.prototype['xTotalTicks'] = undefined;

/**
 * @member {String} yAxisLabel
 */
MosaicViewProperties.prototype['yAxisLabel'] = undefined;

/**
 * @member {Array.<Number>} yDomain
 */
MosaicViewProperties.prototype['yDomain'] = undefined;

/**
 * @member {String} yLabelColumnSeparator
 */
MosaicViewProperties.prototype['yLabelColumnSeparator'] = undefined;

/**
 * @member {Array.<String>} yLabelColumns
 */
MosaicViewProperties.prototype['yLabelColumns'] = undefined;

/**
 * @member {String} yPrefix
 */
MosaicViewProperties.prototype['yPrefix'] = undefined;

/**
 * @member {Array.<String>} ySeriesColumns
 */
MosaicViewProperties.prototype['ySeriesColumns'] = undefined;

/**
 * @member {String} ySuffix
 */
MosaicViewProperties.prototype['ySuffix'] = undefined;





/**
 * Allowed values for the <code>hoverDimension</code> property.
 * @enum {String}
 * @readonly
 */
MosaicViewProperties['HoverDimensionEnum'] = {

    /**
     * value: "auto"
     * @const
     */
    "auto": "auto",

    /**
     * value: "x"
     * @const
     */
    "x": "x",

    /**
     * value: "y"
     * @const
     */
    "y": "y",

    /**
     * value: "xy"
     * @const
     */
    "xy": "xy"
};


/**
 * Allowed values for the <code>shape</code> property.
 * @enum {String}
 * @readonly
 */
MosaicViewProperties['ShapeEnum'] = {

    /**
     * value: "chronograf-v2"
     * @const
     */
    "chronograf-v2": "chronograf-v2"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MosaicViewProperties['TypeEnum'] = {

    /**
     * value: "mosaic"
     * @const
     */
    "mosaic": "mosaic"
};



export default MosaicViewProperties;

