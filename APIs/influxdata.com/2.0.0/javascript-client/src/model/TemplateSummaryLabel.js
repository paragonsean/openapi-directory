/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateEnvReferencesInner from './TemplateEnvReferencesInner';
import TemplateKind from './TemplateKind';
import TemplateSummaryLabelProperties from './TemplateSummaryLabelProperties';

/**
 * The TemplateSummaryLabel model module.
 * @module model/TemplateSummaryLabel
 * @version 2.0.0
 */
class TemplateSummaryLabel {
    /**
     * Constructs a new <code>TemplateSummaryLabel</code>.
     * @alias module:model/TemplateSummaryLabel
     */
    constructor() { 
        
        TemplateSummaryLabel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TemplateSummaryLabel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateSummaryLabel} obj Optional instance to populate.
     * @return {module:model/TemplateSummaryLabel} The populated <code>TemplateSummaryLabel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateSummaryLabel();

            if (data.hasOwnProperty('envReferences')) {
                obj['envReferences'] = ApiClient.convertToType(data['envReferences'], [TemplateEnvReferencesInner]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = TemplateKind.constructFromObject(data['kind']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = TemplateSummaryLabelProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('templateMetaName')) {
                obj['templateMetaName'] = ApiClient.convertToType(data['templateMetaName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateSummaryLabel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateSummaryLabel</code>.
     */
    static validateJSON(data) {
        if (data['envReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['envReferences'])) {
                throw new Error("Expected the field `envReferences` to be an array in the JSON data but got " + data['envReferences']);
            }
            // validate the optional field `envReferences` (array)
            for (const item of data['envReferences']) {
                TemplateEnvReferencesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          TemplateSummaryLabelProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['templateMetaName'] && !(typeof data['templateMetaName'] === 'string' || data['templateMetaName'] instanceof String)) {
            throw new Error("Expected the field `templateMetaName` to be a primitive type in the JSON string but got " + data['templateMetaName']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/TemplateEnvReferencesInner>} envReferences
 */
TemplateSummaryLabel.prototype['envReferences'] = undefined;

/**
 * @member {String} id
 */
TemplateSummaryLabel.prototype['id'] = undefined;

/**
 * @member {module:model/TemplateKind} kind
 */
TemplateSummaryLabel.prototype['kind'] = undefined;

/**
 * @member {String} name
 */
TemplateSummaryLabel.prototype['name'] = undefined;

/**
 * @member {String} orgID
 */
TemplateSummaryLabel.prototype['orgID'] = undefined;

/**
 * @member {module:model/TemplateSummaryLabelProperties} properties
 */
TemplateSummaryLabel.prototype['properties'] = undefined;

/**
 * @member {String} templateMetaName
 */
TemplateSummaryLabel.prototype['templateMetaName'] = undefined;






export default TemplateSummaryLabel;

