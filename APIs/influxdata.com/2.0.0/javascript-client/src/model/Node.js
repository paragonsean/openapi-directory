/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Block from './Block';
import CallExpression from './CallExpression';
import DictItem from './DictItem';
import Duration from './Duration';
import Expression from './Expression';
import Property from './Property';
import PropertyKey from './PropertyKey';
import Statement from './Statement';

/**
 * The Node model module.
 * @module model/Node
 * @version 2.0.0
 */
class Node {
    /**
     * Constructs a new <code>Node</code>.
     * @alias module:model/Node
     * @param {(module:model/Block|module:model/Expression)} instance The actual instance to initialize Node.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Expression") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Expression.validateJSON(instance); // throw an exception if no match
                // create Expression from JS object
                this.actualInstance = Expression.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Expression
            errorMessages.push("Failed to construct Expression: " + err)
        }

        try {
            if (typeof instance === "Block") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Block.validateJSON(instance); // throw an exception if no match
                // create Block from JS object
                this.actualInstance = Block.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Block
            errorMessages.push("Failed to construct Block: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `Node` with oneOf schemas Block, Expression. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `Node` with oneOf schemas Block, Expression. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>Node</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Node} obj Optional instance to populate.
     * @return {module:model/Node} The populated <code>Node</code> instance.
     */
    static constructFromObject(data, obj) {
        return new Node(data);
    }

    /**
     * Gets the actual instance, which can be <code>Block</code>, <code>Expression</code>.
     * @return {(module:model/Block|module:model/Expression)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Block</code>, <code>Expression</code>.
     * @param {(module:model/Block|module:model/Expression)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = Node.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of Node from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/Node} An instance of Node.
     */
    static fromJSON = function(json_string){
        return Node.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Elements of the dictionary
 * @member {Array.<module:model/DictItem>} elements
 */
Node.prototype['elements'] = undefined;

/**
 * Type of AST node
 * @member {String} type
 */
Node.prototype['type'] = undefined;

/**
 * Block body
 * @member {Array.<module:model/Statement>} body
 */
Node.prototype['body'] = undefined;

/**
 * Function parameters
 * @member {Array.<module:model/Property>} params
 */
Node.prototype['params'] = undefined;

/**
 * @member {module:model/Expression} left
 */
Node.prototype['left'] = undefined;

/**
 * @member {String} operator
 */
Node.prototype['operator'] = undefined;

/**
 * @member {module:model/Expression} right
 */
Node.prototype['right'] = undefined;

/**
 * Function arguments
 * @member {Array.<module:model/Expression>} arguments
 */
Node.prototype['arguments'] = undefined;

/**
 * @member {module:model/Expression} callee
 */
Node.prototype['callee'] = undefined;

/**
 * @member {module:model/Expression} alternate
 */
Node.prototype['alternate'] = undefined;

/**
 * @member {module:model/Expression} consequent
 */
Node.prototype['consequent'] = undefined;

/**
 * @member {module:model/Expression} test
 */
Node.prototype['test'] = undefined;

/**
 * @member {module:model/Expression} object
 */
Node.prototype['object'] = undefined;

/**
 * @member {module:model/PropertyKey} property
 */
Node.prototype['property'] = undefined;

/**
 * @member {module:model/Expression} array
 */
Node.prototype['array'] = undefined;

/**
 * @member {module:model/Expression} index
 */
Node.prototype['index'] = undefined;

/**
 * Object properties
 * @member {Array.<module:model/Property>} properties
 */
Node.prototype['properties'] = undefined;

/**
 * @member {module:model/Expression} expression
 */
Node.prototype['expression'] = undefined;

/**
 * @member {module:model/Expression} argument
 */
Node.prototype['argument'] = undefined;

/**
 * @member {module:model/CallExpression} call
 */
Node.prototype['call'] = undefined;

/**
 * @member {String} value
 */
Node.prototype['value'] = undefined;

/**
 * Duration values
 * @member {Array.<module:model/Duration>} values
 */
Node.prototype['values'] = undefined;

/**
 * @member {String} name
 */
Node.prototype['name'] = undefined;


Node.OneOf = ["Block", "Expression"];

export default Node;

