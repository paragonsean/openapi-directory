/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Axis from './Axis';
import DashboardColor from './DashboardColor';
import GeoCircleViewLayer from './GeoCircleViewLayer';
import GeoHeatMapViewLayer from './GeoHeatMapViewLayer';
import GeoPointMapViewLayer from './GeoPointMapViewLayer';
import GeoTrackMapViewLayer from './GeoTrackMapViewLayer';

/**
 * The GeoViewLayer model module.
 * @module model/GeoViewLayer
 * @version 2.0.0
 */
class GeoViewLayer {
    /**
     * Constructs a new <code>GeoViewLayer</code>.
     * @alias module:model/GeoViewLayer
     * @param {(module:model/GeoCircleViewLayer|module:model/GeoHeatMapViewLayer|module:model/GeoPointMapViewLayer|module:model/GeoTrackMapViewLayer)} instance The actual instance to initialize GeoViewLayer.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "GeoCircleViewLayer") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GeoCircleViewLayer.validateJSON(instance); // throw an exception if no match
                // create GeoCircleViewLayer from JS object
                this.actualInstance = GeoCircleViewLayer.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GeoCircleViewLayer
            errorMessages.push("Failed to construct GeoCircleViewLayer: " + err)
        }

        try {
            if (typeof instance === "GeoHeatMapViewLayer") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GeoHeatMapViewLayer.validateJSON(instance); // throw an exception if no match
                // create GeoHeatMapViewLayer from JS object
                this.actualInstance = GeoHeatMapViewLayer.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GeoHeatMapViewLayer
            errorMessages.push("Failed to construct GeoHeatMapViewLayer: " + err)
        }

        try {
            if (typeof instance === "GeoPointMapViewLayer") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GeoPointMapViewLayer.validateJSON(instance); // throw an exception if no match
                // create GeoPointMapViewLayer from JS object
                this.actualInstance = GeoPointMapViewLayer.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GeoPointMapViewLayer
            errorMessages.push("Failed to construct GeoPointMapViewLayer: " + err)
        }

        try {
            if (typeof instance === "GeoTrackMapViewLayer") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GeoTrackMapViewLayer.validateJSON(instance); // throw an exception if no match
                // create GeoTrackMapViewLayer from JS object
                this.actualInstance = GeoTrackMapViewLayer.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GeoTrackMapViewLayer
            errorMessages.push("Failed to construct GeoTrackMapViewLayer: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GeoViewLayer` with oneOf schemas GeoCircleViewLayer, GeoHeatMapViewLayer, GeoPointMapViewLayer, GeoTrackMapViewLayer. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GeoViewLayer` with oneOf schemas GeoCircleViewLayer, GeoHeatMapViewLayer, GeoPointMapViewLayer, GeoTrackMapViewLayer. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GeoViewLayer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoViewLayer} obj Optional instance to populate.
     * @return {module:model/GeoViewLayer} The populated <code>GeoViewLayer</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GeoViewLayer(data);
    }

    /**
     * Gets the actual instance, which can be <code>GeoCircleViewLayer</code>, <code>GeoHeatMapViewLayer</code>, <code>GeoPointMapViewLayer</code>, <code>GeoTrackMapViewLayer</code>.
     * @return {(module:model/GeoCircleViewLayer|module:model/GeoHeatMapViewLayer|module:model/GeoPointMapViewLayer|module:model/GeoTrackMapViewLayer)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>GeoCircleViewLayer</code>, <code>GeoHeatMapViewLayer</code>, <code>GeoPointMapViewLayer</code>, <code>GeoTrackMapViewLayer</code>.
     * @param {(module:model/GeoCircleViewLayer|module:model/GeoHeatMapViewLayer|module:model/GeoPointMapViewLayer|module:model/GeoTrackMapViewLayer)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GeoViewLayer.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GeoViewLayer from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GeoViewLayer} An instance of GeoViewLayer.
     */
    static fromJSON = function(json_string){
        return GeoViewLayer.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/GeoViewLayer.TypeEnum} type
 */
GeoViewLayer.prototype['type'] = undefined;

/**
 * @member {module:model/Axis} colorDimension
 */
GeoViewLayer.prototype['colorDimension'] = undefined;

/**
 * Marker color field
 * @member {String} colorField
 */
GeoViewLayer.prototype['colorField'] = undefined;

/**
 * Colors define color encoding of data into a visualization
 * @member {Array.<module:model/DashboardColor>} colors
 */
GeoViewLayer.prototype['colors'] = undefined;

/**
 * Interpolate circle color based on displayed value
 * @member {Boolean} interpolateColors
 */
GeoViewLayer.prototype['interpolateColors'] = undefined;

/**
 * Radius size in pixels
 * @member {Number} radius
 */
GeoViewLayer.prototype['radius'] = undefined;

/**
 * @member {module:model/Axis} radiusDimension
 */
GeoViewLayer.prototype['radiusDimension'] = undefined;

/**
 * Radius field
 * @member {String} radiusField
 */
GeoViewLayer.prototype['radiusField'] = undefined;

/**
 * Blur for heatmap points
 * @member {Number} blur
 */
GeoViewLayer.prototype['blur'] = undefined;

/**
 * @member {module:model/Axis} intensityDimension
 */
GeoViewLayer.prototype['intensityDimension'] = undefined;

/**
 * Intensity field
 * @member {String} intensityField
 */
GeoViewLayer.prototype['intensityField'] = undefined;

/**
 * Cluster close markers together
 * @member {Boolean} isClustered
 */
GeoViewLayer.prototype['isClustered'] = undefined;

/**
 * Assign different colors to different tracks
 * @member {Boolean} randomColors
 */
GeoViewLayer.prototype['randomColors'] = undefined;

/**
 * Speed of the track animation
 * @member {Number} speed
 */
GeoViewLayer.prototype['speed'] = undefined;

/**
 * Width of the track
 * @member {Number} trackWidth
 */
GeoViewLayer.prototype['trackWidth'] = undefined;


GeoViewLayer.OneOf = ["GeoCircleViewLayer", "GeoHeatMapViewLayer", "GeoPointMapViewLayer", "GeoTrackMapViewLayer"];

export default GeoViewLayer;

