/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckBaseLinks from './CheckBaseLinks';
import CheckDiscriminator from './CheckDiscriminator';
import CheckStatusLevel from './CheckStatusLevel';
import DashboardQuery from './DashboardQuery';
import DeadmanCheckAllOfTags from './DeadmanCheckAllOfTags';
import Label from './Label';
import TaskStatusType from './TaskStatusType';
import TemplateEnvReferencesInner from './TemplateEnvReferencesInner';
import TemplateKind from './TemplateKind';
import TemplateSummaryLabel from './TemplateSummaryLabel';
import Threshold from './Threshold';

/**
 * The TemplateSummarySummaryChecksInner model module.
 * @module model/TemplateSummarySummaryChecksInner
 * @version 2.0.0
 */
class TemplateSummarySummaryChecksInner {
    /**
     * Constructs a new <code>TemplateSummarySummaryChecksInner</code>.
     * @alias module:model/TemplateSummarySummaryChecksInner
     * @extends module:model/CheckDiscriminator
     * @implements module:model/CheckDiscriminator
     * @param name {String} 
     * @param orgID {String} The ID of the organization that owns this check.
     * @param query {module:model/DashboardQuery} 
     * @param type {module:model/TemplateSummarySummaryChecksInner.TypeEnum} 
     */
    constructor(name, orgID, query, type) { 
        CheckDiscriminator.initialize(this, name, orgID, query, type);
        TemplateSummarySummaryChecksInner.initialize(this, name, orgID, query, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, orgID, query, type) { 
    }

    /**
     * Constructs a <code>TemplateSummarySummaryChecksInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateSummarySummaryChecksInner} obj Optional instance to populate.
     * @return {module:model/TemplateSummarySummaryChecksInner} The populated <code>TemplateSummarySummaryChecksInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateSummarySummaryChecksInner();
            CheckDiscriminator.constructFromObject(data, obj);
            CheckDiscriminator.constructFromObject(data, obj);

            if (data.hasOwnProperty('envReferences')) {
                obj['envReferences'] = ApiClient.convertToType(data['envReferences'], [TemplateEnvReferencesInner]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = TemplateKind.constructFromObject(data['kind']);
            }
            if (data.hasOwnProperty('labelAssociations')) {
                obj['labelAssociations'] = ApiClient.convertToType(data['labelAssociations'], [TemplateSummaryLabel]);
            }
            if (data.hasOwnProperty('templateMetaName')) {
                obj['templateMetaName'] = ApiClient.convertToType(data['templateMetaName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateSummarySummaryChecksInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateSummarySummaryChecksInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TemplateSummarySummaryChecksInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['envReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['envReferences'])) {
                throw new Error("Expected the field `envReferences` to be an array in the JSON data but got " + data['envReferences']);
            }
            // validate the optional field `envReferences` (array)
            for (const item of data['envReferences']) {
                TemplateEnvReferencesInner.validateJSON(item);
            };
        }
        if (data['labelAssociations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelAssociations'])) {
                throw new Error("Expected the field `labelAssociations` to be an array in the JSON data but got " + data['labelAssociations']);
            }
            // validate the optional field `labelAssociations` (array)
            for (const item of data['labelAssociations']) {
                TemplateSummaryLabel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['templateMetaName'] && !(typeof data['templateMetaName'] === 'string' || data['templateMetaName'] instanceof String)) {
            throw new Error("Expected the field `templateMetaName` to be a primitive type in the JSON string but got " + data['templateMetaName']);
        }

        return true;
    }


}

TemplateSummarySummaryChecksInner.RequiredProperties = ["name", "orgID", "query", "type"];

/**
 * @member {Array.<module:model/TemplateEnvReferencesInner>} envReferences
 */
TemplateSummarySummaryChecksInner.prototype['envReferences'] = undefined;

/**
 * @member {module:model/TemplateKind} kind
 */
TemplateSummarySummaryChecksInner.prototype['kind'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryLabel>} labelAssociations
 */
TemplateSummarySummaryChecksInner.prototype['labelAssociations'] = undefined;

/**
 * @member {String} templateMetaName
 */
TemplateSummarySummaryChecksInner.prototype['templateMetaName'] = undefined;


// Implement CheckDiscriminator interface:
/**
 * @member {Date} createdAt
 */
CheckDiscriminator.prototype['createdAt'] = undefined;
/**
 * An optional description of the check.
 * @member {String} description
 */
CheckDiscriminator.prototype['description'] = undefined;
/**
 * @member {String} id
 */
CheckDiscriminator.prototype['id'] = undefined;
/**
 * @member {Array.<module:model/Label>} labels
 */
CheckDiscriminator.prototype['labels'] = undefined;
/**
 * @member {String} lastRunError
 */
CheckDiscriminator.prototype['lastRunError'] = undefined;
/**
 * @member {module:model/CheckDiscriminator.LastRunStatusEnum} lastRunStatus
 */
CheckDiscriminator.prototype['lastRunStatus'] = undefined;
/**
 * Timestamp of latest scheduled, completed run, RFC3339.
 * @member {Date} latestCompleted
 */
CheckDiscriminator.prototype['latestCompleted'] = undefined;
/**
 * @member {module:model/CheckBaseLinks} links
 */
CheckDiscriminator.prototype['links'] = undefined;
/**
 * @member {String} name
 */
CheckDiscriminator.prototype['name'] = undefined;
/**
 * The ID of the organization that owns this check.
 * @member {String} orgID
 */
CheckDiscriminator.prototype['orgID'] = undefined;
/**
 * The ID of creator used to create this check.
 * @member {String} ownerID
 */
CheckDiscriminator.prototype['ownerID'] = undefined;
/**
 * @member {module:model/DashboardQuery} query
 */
CheckDiscriminator.prototype['query'] = undefined;
/**
 * @member {module:model/TaskStatusType} status
 */
CheckDiscriminator.prototype['status'] = undefined;
/**
 * The ID of the task associated with this check.
 * @member {String} taskID
 */
CheckDiscriminator.prototype['taskID'] = undefined;
/**
 * @member {Date} updatedAt
 */
CheckDiscriminator.prototype['updatedAt'] = undefined;
/**
 * Check repetition interval.
 * @member {String} every
 */
CheckDiscriminator.prototype['every'] = undefined;
/**
 * @member {module:model/CheckStatusLevel} level
 */
CheckDiscriminator.prototype['level'] = undefined;
/**
 * Duration to delay after the schedule, before executing check.
 * @member {String} offset
 */
CheckDiscriminator.prototype['offset'] = undefined;
/**
 * If only zero values reported since time, trigger an alert
 * @member {Boolean} reportZero
 */
CheckDiscriminator.prototype['reportZero'] = undefined;
/**
 * String duration for time that a series is considered stale and should not trigger deadman.
 * @member {String} staleTime
 */
CheckDiscriminator.prototype['staleTime'] = undefined;
/**
 * The template used to generate and write a status message.
 * @member {String} statusMessageTemplate
 */
CheckDiscriminator.prototype['statusMessageTemplate'] = undefined;
/**
 * List of tags to write to each status.
 * @member {Array.<module:model/DeadmanCheckAllOfTags>} tags
 */
CheckDiscriminator.prototype['tags'] = undefined;
/**
 * String duration before deadman triggers.
 * @member {String} timeSince
 */
CheckDiscriminator.prototype['timeSince'] = undefined;
/**
 * @member {module:model/CheckDiscriminator.TypeEnum} type
 */
CheckDiscriminator.prototype['type'] = undefined;
/**
 * @member {Array.<module:model/Threshold>} thresholds
 */
CheckDiscriminator.prototype['thresholds'] = undefined;




export default TemplateSummarySummaryChecksInner;

