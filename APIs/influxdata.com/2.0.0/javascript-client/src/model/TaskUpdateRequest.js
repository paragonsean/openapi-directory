/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskStatusType from './TaskStatusType';

/**
 * The TaskUpdateRequest model module.
 * @module model/TaskUpdateRequest
 * @version 2.0.0
 */
class TaskUpdateRequest {
    /**
     * Constructs a new <code>TaskUpdateRequest</code>.
     * @alias module:model/TaskUpdateRequest
     */
    constructor() { 
        
        TaskUpdateRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskUpdateRequest} obj Optional instance to populate.
     * @return {module:model/TaskUpdateRequest} The populated <code>TaskUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskUpdateRequest();

            if (data.hasOwnProperty('cron')) {
                obj['cron'] = ApiClient.convertToType(data['cron'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('every')) {
                obj['every'] = ApiClient.convertToType(data['every'], 'String');
            }
            if (data.hasOwnProperty('flux')) {
                obj['flux'] = ApiClient.convertToType(data['flux'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TaskStatusType.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskUpdateRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cron'] && !(typeof data['cron'] === 'string' || data['cron'] instanceof String)) {
            throw new Error("Expected the field `cron` to be a primitive type in the JSON string but got " + data['cron']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['every'] && !(typeof data['every'] === 'string' || data['every'] instanceof String)) {
            throw new Error("Expected the field `every` to be a primitive type in the JSON string but got " + data['every']);
        }
        // ensure the json data is a string
        if (data['flux'] && !(typeof data['flux'] === 'string' || data['flux'] instanceof String)) {
            throw new Error("Expected the field `flux` to be a primitive type in the JSON string but got " + data['flux']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['offset'] && !(typeof data['offset'] === 'string' || data['offset'] instanceof String)) {
            throw new Error("Expected the field `offset` to be a primitive type in the JSON string but got " + data['offset']);
        }

        return true;
    }


}



/**
 * Override the 'cron' option in the flux script.
 * @member {String} cron
 */
TaskUpdateRequest.prototype['cron'] = undefined;

/**
 * An optional description of the task.
 * @member {String} description
 */
TaskUpdateRequest.prototype['description'] = undefined;

/**
 * Override the 'every' option in the flux script.
 * @member {String} every
 */
TaskUpdateRequest.prototype['every'] = undefined;

/**
 * The Flux script to run for this task.
 * @member {String} flux
 */
TaskUpdateRequest.prototype['flux'] = undefined;

/**
 * Override the 'name' option in the flux script.
 * @member {String} name
 */
TaskUpdateRequest.prototype['name'] = undefined;

/**
 * Override the 'offset' option in the flux script.
 * @member {String} offset
 */
TaskUpdateRequest.prototype['offset'] = undefined;

/**
 * @member {module:model/TaskStatusType} status
 */
TaskUpdateRequest.prototype['status'] = undefined;






export default TaskUpdateRequest;

