/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RetentionRule from './RetentionRule';
import SchemaType from './SchemaType';

/**
 * The PostBucketRequest model module.
 * @module model/PostBucketRequest
 * @version 2.0.0
 */
class PostBucketRequest {
    /**
     * Constructs a new <code>PostBucketRequest</code>.
     * @alias module:model/PostBucketRequest
     * @param name {String} 
     * @param orgID {String} 
     * @param retentionRules {Array.<module:model/RetentionRule>} Rules to expire or retain data.  No rules means data never expires.
     */
    constructor(name, orgID, retentionRules) { 
        
        PostBucketRequest.initialize(this, name, orgID, retentionRules);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, orgID, retentionRules) { 
        obj['name'] = name;
        obj['orgID'] = orgID;
        obj['retentionRules'] = retentionRules;
    }

    /**
     * Constructs a <code>PostBucketRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostBucketRequest} obj Optional instance to populate.
     * @return {module:model/PostBucketRequest} The populated <code>PostBucketRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostBucketRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('retentionRules')) {
                obj['retentionRules'] = ApiClient.convertToType(data['retentionRules'], [RetentionRule]);
            }
            if (data.hasOwnProperty('rp')) {
                obj['rp'] = ApiClient.convertToType(data['rp'], 'String');
            }
            if (data.hasOwnProperty('schemaType')) {
                obj['schemaType'] = SchemaType.constructFromObject(data['schemaType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostBucketRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostBucketRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostBucketRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        if (data['retentionRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['retentionRules'])) {
                throw new Error("Expected the field `retentionRules` to be an array in the JSON data but got " + data['retentionRules']);
            }
            // validate the optional field `retentionRules` (array)
            for (const item of data['retentionRules']) {
                RetentionRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['rp'] && !(typeof data['rp'] === 'string' || data['rp'] instanceof String)) {
            throw new Error("Expected the field `rp` to be a primitive type in the JSON string but got " + data['rp']);
        }

        return true;
    }


}

PostBucketRequest.RequiredProperties = ["name", "orgID", "retentionRules"];

/**
 * @member {String} description
 */
PostBucketRequest.prototype['description'] = undefined;

/**
 * @member {String} name
 */
PostBucketRequest.prototype['name'] = undefined;

/**
 * @member {String} orgID
 */
PostBucketRequest.prototype['orgID'] = undefined;

/**
 * Rules to expire or retain data.  No rules means data never expires.
 * @member {Array.<module:model/RetentionRule>} retentionRules
 */
PostBucketRequest.prototype['retentionRules'] = undefined;

/**
 * @member {String} rp
 */
PostBucketRequest.prototype['rp'] = undefined;

/**
 * @member {module:model/SchemaType} schemaType
 */
PostBucketRequest.prototype['schemaType'] = undefined;






export default PostBucketRequest;

