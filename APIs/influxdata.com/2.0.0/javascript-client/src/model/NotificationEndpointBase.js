/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';
import NotificationEndpointBaseLinks from './NotificationEndpointBaseLinks';
import NotificationEndpointType from './NotificationEndpointType';

/**
 * The NotificationEndpointBase model module.
 * @module model/NotificationEndpointBase
 * @version 2.0.0
 */
class NotificationEndpointBase {
    /**
     * Constructs a new <code>NotificationEndpointBase</code>.
     * @alias module:model/NotificationEndpointBase
     * @param name {String} 
     * @param type {module:model/NotificationEndpointType} 
     */
    constructor(name, type) { 
        
        NotificationEndpointBase.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['name'] = name;
        obj['status'] = 'active';
        obj['type'] = type;
    }

    /**
     * Constructs a <code>NotificationEndpointBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationEndpointBase} obj Optional instance to populate.
     * @return {module:model/NotificationEndpointBase} The populated <code>NotificationEndpointBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationEndpointBase();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = NotificationEndpointBaseLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = NotificationEndpointType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('userID')) {
                obj['userID'] = ApiClient.convertToType(data['userID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationEndpointBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationEndpointBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationEndpointBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          NotificationEndpointBaseLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['userID'] && !(typeof data['userID'] === 'string' || data['userID'] instanceof String)) {
            throw new Error("Expected the field `userID` to be a primitive type in the JSON string but got " + data['userID']);
        }

        return true;
    }


}

NotificationEndpointBase.RequiredProperties = ["name", "type"];

/**
 * @member {Date} createdAt
 */
NotificationEndpointBase.prototype['createdAt'] = undefined;

/**
 * An optional description of the notification endpoint.
 * @member {String} description
 */
NotificationEndpointBase.prototype['description'] = undefined;

/**
 * @member {String} id
 */
NotificationEndpointBase.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
NotificationEndpointBase.prototype['labels'] = undefined;

/**
 * @member {module:model/NotificationEndpointBaseLinks} links
 */
NotificationEndpointBase.prototype['links'] = undefined;

/**
 * @member {String} name
 */
NotificationEndpointBase.prototype['name'] = undefined;

/**
 * @member {String} orgID
 */
NotificationEndpointBase.prototype['orgID'] = undefined;

/**
 * The status of the endpoint.
 * @member {module:model/NotificationEndpointBase.StatusEnum} status
 * @default 'active'
 */
NotificationEndpointBase.prototype['status'] = 'active';

/**
 * @member {module:model/NotificationEndpointType} type
 */
NotificationEndpointBase.prototype['type'] = undefined;

/**
 * @member {Date} updatedAt
 */
NotificationEndpointBase.prototype['updatedAt'] = undefined;

/**
 * @member {String} userID
 */
NotificationEndpointBase.prototype['userID'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
NotificationEndpointBase['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};



export default NotificationEndpointBase;

