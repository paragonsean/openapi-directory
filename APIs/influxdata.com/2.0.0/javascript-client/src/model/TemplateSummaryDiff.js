/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateSummaryDiffBucketsInner from './TemplateSummaryDiffBucketsInner';
import TemplateSummaryDiffChecksInner from './TemplateSummaryDiffChecksInner';
import TemplateSummaryDiffDashboardsInner from './TemplateSummaryDiffDashboardsInner';
import TemplateSummaryDiffLabelMappingsInner from './TemplateSummaryDiffLabelMappingsInner';
import TemplateSummaryDiffLabelsInner from './TemplateSummaryDiffLabelsInner';
import TemplateSummaryDiffNotificationEndpointsInner from './TemplateSummaryDiffNotificationEndpointsInner';
import TemplateSummaryDiffNotificationRulesInner from './TemplateSummaryDiffNotificationRulesInner';
import TemplateSummaryDiffTasksInner from './TemplateSummaryDiffTasksInner';
import TemplateSummaryDiffTelegrafConfigsInner from './TemplateSummaryDiffTelegrafConfigsInner';
import TemplateSummaryDiffVariablesInner from './TemplateSummaryDiffVariablesInner';

/**
 * The TemplateSummaryDiff model module.
 * @module model/TemplateSummaryDiff
 * @version 2.0.0
 */
class TemplateSummaryDiff {
    /**
     * Constructs a new <code>TemplateSummaryDiff</code>.
     * @alias module:model/TemplateSummaryDiff
     */
    constructor() { 
        
        TemplateSummaryDiff.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TemplateSummaryDiff</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateSummaryDiff} obj Optional instance to populate.
     * @return {module:model/TemplateSummaryDiff} The populated <code>TemplateSummaryDiff</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateSummaryDiff();

            if (data.hasOwnProperty('buckets')) {
                obj['buckets'] = ApiClient.convertToType(data['buckets'], [TemplateSummaryDiffBucketsInner]);
            }
            if (data.hasOwnProperty('checks')) {
                obj['checks'] = ApiClient.convertToType(data['checks'], [TemplateSummaryDiffChecksInner]);
            }
            if (data.hasOwnProperty('dashboards')) {
                obj['dashboards'] = ApiClient.convertToType(data['dashboards'], [TemplateSummaryDiffDashboardsInner]);
            }
            if (data.hasOwnProperty('labelMappings')) {
                obj['labelMappings'] = ApiClient.convertToType(data['labelMappings'], [TemplateSummaryDiffLabelMappingsInner]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [TemplateSummaryDiffLabelsInner]);
            }
            if (data.hasOwnProperty('notificationEndpoints')) {
                obj['notificationEndpoints'] = ApiClient.convertToType(data['notificationEndpoints'], [TemplateSummaryDiffNotificationEndpointsInner]);
            }
            if (data.hasOwnProperty('notificationRules')) {
                obj['notificationRules'] = ApiClient.convertToType(data['notificationRules'], [TemplateSummaryDiffNotificationRulesInner]);
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [TemplateSummaryDiffTasksInner]);
            }
            if (data.hasOwnProperty('telegrafConfigs')) {
                obj['telegrafConfigs'] = ApiClient.convertToType(data['telegrafConfigs'], [TemplateSummaryDiffTelegrafConfigsInner]);
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], [TemplateSummaryDiffVariablesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateSummaryDiff</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateSummaryDiff</code>.
     */
    static validateJSON(data) {
        if (data['buckets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buckets'])) {
                throw new Error("Expected the field `buckets` to be an array in the JSON data but got " + data['buckets']);
            }
            // validate the optional field `buckets` (array)
            for (const item of data['buckets']) {
                TemplateSummaryDiffBucketsInner.validateJSON(item);
            };
        }
        if (data['checks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['checks'])) {
                throw new Error("Expected the field `checks` to be an array in the JSON data but got " + data['checks']);
            }
            // validate the optional field `checks` (array)
            for (const item of data['checks']) {
                TemplateSummaryDiffChecksInner.validateJSON(item);
            };
        }
        if (data['dashboards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dashboards'])) {
                throw new Error("Expected the field `dashboards` to be an array in the JSON data but got " + data['dashboards']);
            }
            // validate the optional field `dashboards` (array)
            for (const item of data['dashboards']) {
                TemplateSummaryDiffDashboardsInner.validateJSON(item);
            };
        }
        if (data['labelMappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelMappings'])) {
                throw new Error("Expected the field `labelMappings` to be an array in the JSON data but got " + data['labelMappings']);
            }
            // validate the optional field `labelMappings` (array)
            for (const item of data['labelMappings']) {
                TemplateSummaryDiffLabelMappingsInner.validateJSON(item);
            };
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                TemplateSummaryDiffLabelsInner.validateJSON(item);
            };
        }
        if (data['notificationEndpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notificationEndpoints'])) {
                throw new Error("Expected the field `notificationEndpoints` to be an array in the JSON data but got " + data['notificationEndpoints']);
            }
            // validate the optional field `notificationEndpoints` (array)
            for (const item of data['notificationEndpoints']) {
                TemplateSummaryDiffNotificationEndpointsInner.validateJSON(item);
            };
        }
        if (data['notificationRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notificationRules'])) {
                throw new Error("Expected the field `notificationRules` to be an array in the JSON data but got " + data['notificationRules']);
            }
            // validate the optional field `notificationRules` (array)
            for (const item of data['notificationRules']) {
                TemplateSummaryDiffNotificationRulesInner.validateJSON(item);
            };
        }
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                TemplateSummaryDiffTasksInner.validateJSON(item);
            };
        }
        if (data['telegrafConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['telegrafConfigs'])) {
                throw new Error("Expected the field `telegrafConfigs` to be an array in the JSON data but got " + data['telegrafConfigs']);
            }
            // validate the optional field `telegrafConfigs` (array)
            for (const item of data['telegrafConfigs']) {
                TemplateSummaryDiffTelegrafConfigsInner.validateJSON(item);
            };
        }
        if (data['variables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variables'])) {
                throw new Error("Expected the field `variables` to be an array in the JSON data but got " + data['variables']);
            }
            // validate the optional field `variables` (array)
            for (const item of data['variables']) {
                TemplateSummaryDiffVariablesInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/TemplateSummaryDiffBucketsInner>} buckets
 */
TemplateSummaryDiff.prototype['buckets'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffChecksInner>} checks
 */
TemplateSummaryDiff.prototype['checks'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffDashboardsInner>} dashboards
 */
TemplateSummaryDiff.prototype['dashboards'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffLabelMappingsInner>} labelMappings
 */
TemplateSummaryDiff.prototype['labelMappings'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffLabelsInner>} labels
 */
TemplateSummaryDiff.prototype['labels'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffNotificationEndpointsInner>} notificationEndpoints
 */
TemplateSummaryDiff.prototype['notificationEndpoints'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffNotificationRulesInner>} notificationRules
 */
TemplateSummaryDiff.prototype['notificationRules'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffTasksInner>} tasks
 */
TemplateSummaryDiff.prototype['tasks'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffTelegrafConfigsInner>} telegrafConfigs
 */
TemplateSummaryDiff.prototype['telegrafConfigs'] = undefined;

/**
 * @member {Array.<module:model/TemplateSummaryDiffVariablesInner>} variables
 */
TemplateSummaryDiff.prototype['variables'] = undefined;






export default TemplateSummaryDiff;

