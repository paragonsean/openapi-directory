/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportDeclaration from './ImportDeclaration';
import PackageClause from './PackageClause';
import Statement from './Statement';

/**
 * The File model module.
 * @module model/File
 * @version 2.0.0
 */
class File {
    /**
     * Constructs a new <code>File</code>.
     * Represents a source from a single file
     * @alias module:model/File
     */
    constructor() { 
        
        File.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>File</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/File} obj Optional instance to populate.
     * @return {module:model/File} The populated <code>File</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new File();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], [Statement]);
            }
            if (data.hasOwnProperty('imports')) {
                obj['imports'] = ApiClient.convertToType(data['imports'], [ImportDeclaration]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = PackageClause.constructFromObject(data['package']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>File</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>File</code>.
     */
    static validateJSON(data) {
        if (data['body']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['body'])) {
                throw new Error("Expected the field `body` to be an array in the JSON data but got " + data['body']);
            }
            // validate the optional field `body` (array)
            for (const item of data['body']) {
                Statement.validateJSON(item);
            };
        }
        if (data['imports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['imports'])) {
                throw new Error("Expected the field `imports` to be an array in the JSON data but got " + data['imports']);
            }
            // validate the optional field `imports` (array)
            for (const item of data['imports']) {
                ImportDeclaration.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `package`
        if (data['package']) { // data not null
          PackageClause.validateJSON(data['package']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * List of Flux statements
 * @member {Array.<module:model/Statement>} body
 */
File.prototype['body'] = undefined;

/**
 * A list of package imports
 * @member {Array.<module:model/ImportDeclaration>} imports
 */
File.prototype['imports'] = undefined;

/**
 * The name of the file.
 * @member {String} name
 */
File.prototype['name'] = undefined;

/**
 * @member {module:model/PackageClause} package
 */
File.prototype['package'] = undefined;

/**
 * Type of AST node
 * @member {String} type
 */
File.prototype['type'] = undefined;






export default File;

