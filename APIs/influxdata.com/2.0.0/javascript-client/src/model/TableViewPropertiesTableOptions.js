/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RenamableField from './RenamableField';

/**
 * The TableViewPropertiesTableOptions model module.
 * @module model/TableViewPropertiesTableOptions
 * @version 2.0.0
 */
class TableViewPropertiesTableOptions {
    /**
     * Constructs a new <code>TableViewPropertiesTableOptions</code>.
     * @alias module:model/TableViewPropertiesTableOptions
     */
    constructor() { 
        
        TableViewPropertiesTableOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableViewPropertiesTableOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableViewPropertiesTableOptions} obj Optional instance to populate.
     * @return {module:model/TableViewPropertiesTableOptions} The populated <code>TableViewPropertiesTableOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableViewPropertiesTableOptions();

            if (data.hasOwnProperty('fixFirstColumn')) {
                obj['fixFirstColumn'] = ApiClient.convertToType(data['fixFirstColumn'], 'Boolean');
            }
            if (data.hasOwnProperty('sortBy')) {
                obj['sortBy'] = RenamableField.constructFromObject(data['sortBy']);
            }
            if (data.hasOwnProperty('verticalTimeAxis')) {
                obj['verticalTimeAxis'] = ApiClient.convertToType(data['verticalTimeAxis'], 'Boolean');
            }
            if (data.hasOwnProperty('wrapping')) {
                obj['wrapping'] = ApiClient.convertToType(data['wrapping'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableViewPropertiesTableOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableViewPropertiesTableOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `sortBy`
        if (data['sortBy']) { // data not null
          RenamableField.validateJSON(data['sortBy']);
        }
        // ensure the json data is a string
        if (data['wrapping'] && !(typeof data['wrapping'] === 'string' || data['wrapping'] instanceof String)) {
            throw new Error("Expected the field `wrapping` to be a primitive type in the JSON string but got " + data['wrapping']);
        }

        return true;
    }


}



/**
 * fixFirstColumn indicates whether the first column of the table should be locked
 * @member {Boolean} fixFirstColumn
 */
TableViewPropertiesTableOptions.prototype['fixFirstColumn'] = undefined;

/**
 * @member {module:model/RenamableField} sortBy
 */
TableViewPropertiesTableOptions.prototype['sortBy'] = undefined;

/**
 * verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically
 * @member {Boolean} verticalTimeAxis
 */
TableViewPropertiesTableOptions.prototype['verticalTimeAxis'] = undefined;

/**
 * Wrapping describes the text wrapping style to be used in table views
 * @member {module:model/TableViewPropertiesTableOptions.WrappingEnum} wrapping
 */
TableViewPropertiesTableOptions.prototype['wrapping'] = undefined;





/**
 * Allowed values for the <code>wrapping</code> property.
 * @enum {String}
 * @readonly
 */
TableViewPropertiesTableOptions['WrappingEnum'] = {

    /**
     * value: "truncate"
     * @const
     */
    "truncate": "truncate",

    /**
     * value: "wrap"
     * @const
     */
    "wrap": "wrap",

    /**
     * value: "single-line"
     * @const
     */
    "single-line": "single-line"
};



export default TableViewPropertiesTableOptions;

