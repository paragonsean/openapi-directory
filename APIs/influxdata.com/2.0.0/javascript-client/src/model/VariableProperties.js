/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConstantVariableProperties from './ConstantVariableProperties';
import MapVariableProperties from './MapVariableProperties';
import QueryVariableProperties from './QueryVariableProperties';

/**
 * The VariableProperties model module.
 * @module model/VariableProperties
 * @version 2.0.0
 */
class VariableProperties {
    /**
     * Constructs a new <code>VariableProperties</code>.
     * @alias module:model/VariableProperties
     * @param {(module:model/ConstantVariableProperties|module:model/MapVariableProperties|module:model/QueryVariableProperties)} instance The actual instance to initialize VariableProperties.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "QueryVariableProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                QueryVariableProperties.validateJSON(instance); // throw an exception if no match
                // create QueryVariableProperties from JS object
                this.actualInstance = QueryVariableProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into QueryVariableProperties
            errorMessages.push("Failed to construct QueryVariableProperties: " + err)
        }

        try {
            if (typeof instance === "ConstantVariableProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConstantVariableProperties.validateJSON(instance); // throw an exception if no match
                // create ConstantVariableProperties from JS object
                this.actualInstance = ConstantVariableProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConstantVariableProperties
            errorMessages.push("Failed to construct ConstantVariableProperties: " + err)
        }

        try {
            if (typeof instance === "MapVariableProperties") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MapVariableProperties.validateJSON(instance); // throw an exception if no match
                // create MapVariableProperties from JS object
                this.actualInstance = MapVariableProperties.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MapVariableProperties
            errorMessages.push("Failed to construct MapVariableProperties: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `VariableProperties` with oneOf schemas ConstantVariableProperties, MapVariableProperties, QueryVariableProperties. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `VariableProperties` with oneOf schemas ConstantVariableProperties, MapVariableProperties, QueryVariableProperties. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>VariableProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VariableProperties} obj Optional instance to populate.
     * @return {module:model/VariableProperties} The populated <code>VariableProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        return new VariableProperties(data);
    }

    /**
     * Gets the actual instance, which can be <code>ConstantVariableProperties</code>, <code>MapVariableProperties</code>, <code>QueryVariableProperties</code>.
     * @return {(module:model/ConstantVariableProperties|module:model/MapVariableProperties|module:model/QueryVariableProperties)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ConstantVariableProperties</code>, <code>MapVariableProperties</code>, <code>QueryVariableProperties</code>.
     * @param {(module:model/ConstantVariableProperties|module:model/MapVariableProperties|module:model/QueryVariableProperties)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = VariableProperties.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of VariableProperties from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/VariableProperties} An instance of VariableProperties.
     */
    static fromJSON = function(json_string){
        return VariableProperties.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/VariableProperties.TypeEnum} type
 */
VariableProperties.prototype['type'] = undefined;

/**
 * @member {Object.<String, String>} values
 */
VariableProperties.prototype['values'] = undefined;


VariableProperties.OneOf = ["ConstantVariableProperties", "MapVariableProperties", "QueryVariableProperties"];

export default VariableProperties;

