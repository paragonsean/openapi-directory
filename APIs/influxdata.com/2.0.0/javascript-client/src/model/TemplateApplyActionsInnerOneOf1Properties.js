/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateKind from './TemplateKind';

/**
 * The TemplateApplyActionsInnerOneOf1Properties model module.
 * @module model/TemplateApplyActionsInnerOneOf1Properties
 * @version 2.0.0
 */
class TemplateApplyActionsInnerOneOf1Properties {
    /**
     * Constructs a new <code>TemplateApplyActionsInnerOneOf1Properties</code>.
     * @alias module:model/TemplateApplyActionsInnerOneOf1Properties
     * @param kind {module:model/TemplateKind} 
     * @param resourceTemplateName {String} 
     */
    constructor(kind, resourceTemplateName) { 
        
        TemplateApplyActionsInnerOneOf1Properties.initialize(this, kind, resourceTemplateName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, resourceTemplateName) { 
        obj['kind'] = kind;
        obj['resourceTemplateName'] = resourceTemplateName;
    }

    /**
     * Constructs a <code>TemplateApplyActionsInnerOneOf1Properties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateApplyActionsInnerOneOf1Properties} obj Optional instance to populate.
     * @return {module:model/TemplateApplyActionsInnerOneOf1Properties} The populated <code>TemplateApplyActionsInnerOneOf1Properties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateApplyActionsInnerOneOf1Properties();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = TemplateKind.constructFromObject(data['kind']);
            }
            if (data.hasOwnProperty('resourceTemplateName')) {
                obj['resourceTemplateName'] = ApiClient.convertToType(data['resourceTemplateName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateApplyActionsInnerOneOf1Properties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateApplyActionsInnerOneOf1Properties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TemplateApplyActionsInnerOneOf1Properties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['resourceTemplateName'] && !(typeof data['resourceTemplateName'] === 'string' || data['resourceTemplateName'] instanceof String)) {
            throw new Error("Expected the field `resourceTemplateName` to be a primitive type in the JSON string but got " + data['resourceTemplateName']);
        }

        return true;
    }


}

TemplateApplyActionsInnerOneOf1Properties.RequiredProperties = ["kind", "resourceTemplateName"];

/**
 * @member {module:model/TemplateKind} kind
 */
TemplateApplyActionsInnerOneOf1Properties.prototype['kind'] = undefined;

/**
 * @member {String} resourceTemplateName
 */
TemplateApplyActionsInnerOneOf1Properties.prototype['resourceTemplateName'] = undefined;






export default TemplateApplyActionsInnerOneOf1Properties;

