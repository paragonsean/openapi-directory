/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AxisScale from './AxisScale';

/**
 * The Axis model module.
 * @module model/Axis
 * @version 2.0.0
 */
class Axis {
    /**
     * Constructs a new <code>Axis</code>.
     * The description of a particular axis for a visualization.
     * @alias module:model/Axis
     */
    constructor() { 
        
        Axis.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Axis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Axis} obj Optional instance to populate.
     * @return {module:model/Axis} The populated <code>Axis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Axis();

            if (data.hasOwnProperty('base')) {
                obj['base'] = ApiClient.convertToType(data['base'], 'String');
            }
            if (data.hasOwnProperty('bounds')) {
                obj['bounds'] = ApiClient.convertToType(data['bounds'], ['String']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = AxisScale.constructFromObject(data['scale']);
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Axis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Axis</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base'] && !(typeof data['base'] === 'string' || data['base'] instanceof String)) {
            throw new Error("Expected the field `base` to be a primitive type in the JSON string but got " + data['base']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bounds'])) {
            throw new Error("Expected the field `bounds` to be an array in the JSON data but got " + data['bounds']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }

        return true;
    }


}



/**
 * Base represents the radix for formatting axis values.
 * @member {module:model/Axis.BaseEnum} base
 */
Axis.prototype['base'] = undefined;

/**
 * The extents of an axis in the form [lower, upper]. Clients determine whether bounds are to be inclusive or exclusive of their limits
 * @member {Array.<String>} bounds
 */
Axis.prototype['bounds'] = undefined;

/**
 * Label is a description of this Axis
 * @member {String} label
 */
Axis.prototype['label'] = undefined;

/**
 * Prefix represents a label prefix for formatting axis values.
 * @member {String} prefix
 */
Axis.prototype['prefix'] = undefined;

/**
 * @member {module:model/AxisScale} scale
 */
Axis.prototype['scale'] = undefined;

/**
 * Suffix represents a label suffix for formatting axis values.
 * @member {String} suffix
 */
Axis.prototype['suffix'] = undefined;





/**
 * Allowed values for the <code>base</code> property.
 * @enum {String}
 * @readonly
 */
Axis['BaseEnum'] = {

    /**
     * value: ""
     * @const
     */
    "empty": "",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "10"
     * @const
     */
    "10": "10"
};



export default Axis;

