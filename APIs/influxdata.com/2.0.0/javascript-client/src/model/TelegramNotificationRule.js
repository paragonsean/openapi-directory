/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';
import NotificationRuleBase from './NotificationRuleBase';
import NotificationRuleBaseLinks from './NotificationRuleBaseLinks';
import StatusRule from './StatusRule';
import TagRule from './TagRule';
import TaskStatusType from './TaskStatusType';
import TelegramNotificationRuleBase from './TelegramNotificationRuleBase';

/**
 * The TelegramNotificationRule model module.
 * @module model/TelegramNotificationRule
 * @version 2.0.0
 */
class TelegramNotificationRule {
    /**
     * Constructs a new <code>TelegramNotificationRule</code>.
     * @alias module:model/TelegramNotificationRule
     * @implements module:model/NotificationRuleBase
     * @implements module:model/TelegramNotificationRuleBase
     * @param endpointID {String} 
     * @param name {String} Human-readable name describing the notification rule.
     * @param orgID {String} The ID of the organization that owns this notification rule.
     * @param status {module:model/TaskStatusType} 
     * @param statusRules {Array.<module:model/StatusRule>} List of status rules the notification rule attempts to match.
     * @param messageTemplate {String} The message template as a flux interpolated string.
     * @param type {module:model/TelegramNotificationRule.TypeEnum} The discriminator between other types of notification rules is \"telegram\".
     */
    constructor(endpointID, name, orgID, status, statusRules, messageTemplate, type) { 
        NotificationRuleBase.initialize(this, endpointID, name, orgID, status, statusRules);TelegramNotificationRuleBase.initialize(this, messageTemplate, type);
        TelegramNotificationRule.initialize(this, endpointID, name, orgID, status, statusRules, messageTemplate, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endpointID, name, orgID, status, statusRules, messageTemplate, type) { 
        obj['endpointID'] = endpointID;
        obj['name'] = name;
        obj['orgID'] = orgID;
        obj['status'] = status;
        obj['statusRules'] = statusRules;
        obj['messageTemplate'] = messageTemplate;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>TelegramNotificationRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TelegramNotificationRule} obj Optional instance to populate.
     * @return {module:model/TelegramNotificationRule} The populated <code>TelegramNotificationRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TelegramNotificationRule();
            NotificationRuleBase.constructFromObject(data, obj);
            TelegramNotificationRuleBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endpointID')) {
                obj['endpointID'] = ApiClient.convertToType(data['endpointID'], 'String');
            }
            if (data.hasOwnProperty('every')) {
                obj['every'] = ApiClient.convertToType(data['every'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('lastRunError')) {
                obj['lastRunError'] = ApiClient.convertToType(data['lastRunError'], 'String');
            }
            if (data.hasOwnProperty('lastRunStatus')) {
                obj['lastRunStatus'] = ApiClient.convertToType(data['lastRunStatus'], 'String');
            }
            if (data.hasOwnProperty('latestCompleted')) {
                obj['latestCompleted'] = ApiClient.convertToType(data['latestCompleted'], 'Date');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('limitEvery')) {
                obj['limitEvery'] = ApiClient.convertToType(data['limitEvery'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = NotificationRuleBaseLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'String');
            }
            if (data.hasOwnProperty('orgID')) {
                obj['orgID'] = ApiClient.convertToType(data['orgID'], 'String');
            }
            if (data.hasOwnProperty('ownerID')) {
                obj['ownerID'] = ApiClient.convertToType(data['ownerID'], 'String');
            }
            if (data.hasOwnProperty('runbookLink')) {
                obj['runbookLink'] = ApiClient.convertToType(data['runbookLink'], 'String');
            }
            if (data.hasOwnProperty('sleepUntil')) {
                obj['sleepUntil'] = ApiClient.convertToType(data['sleepUntil'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TaskStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('statusRules')) {
                obj['statusRules'] = ApiClient.convertToType(data['statusRules'], [StatusRule]);
            }
            if (data.hasOwnProperty('tagRules')) {
                obj['tagRules'] = ApiClient.convertToType(data['tagRules'], [TagRule]);
            }
            if (data.hasOwnProperty('taskID')) {
                obj['taskID'] = ApiClient.convertToType(data['taskID'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('disableWebPagePreview')) {
                obj['disableWebPagePreview'] = ApiClient.convertToType(data['disableWebPagePreview'], 'Boolean');
            }
            if (data.hasOwnProperty('messageTemplate')) {
                obj['messageTemplate'] = ApiClient.convertToType(data['messageTemplate'], 'String');
            }
            if (data.hasOwnProperty('parseMode')) {
                obj['parseMode'] = ApiClient.convertToType(data['parseMode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TelegramNotificationRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TelegramNotificationRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TelegramNotificationRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endpointID'] && !(typeof data['endpointID'] === 'string' || data['endpointID'] instanceof String)) {
            throw new Error("Expected the field `endpointID` to be a primitive type in the JSON string but got " + data['endpointID']);
        }
        // ensure the json data is a string
        if (data['every'] && !(typeof data['every'] === 'string' || data['every'] instanceof String)) {
            throw new Error("Expected the field `every` to be a primitive type in the JSON string but got " + data['every']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastRunError'] && !(typeof data['lastRunError'] === 'string' || data['lastRunError'] instanceof String)) {
            throw new Error("Expected the field `lastRunError` to be a primitive type in the JSON string but got " + data['lastRunError']);
        }
        // ensure the json data is a string
        if (data['lastRunStatus'] && !(typeof data['lastRunStatus'] === 'string' || data['lastRunStatus'] instanceof String)) {
            throw new Error("Expected the field `lastRunStatus` to be a primitive type in the JSON string but got " + data['lastRunStatus']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          NotificationRuleBaseLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['offset'] && !(typeof data['offset'] === 'string' || data['offset'] instanceof String)) {
            throw new Error("Expected the field `offset` to be a primitive type in the JSON string but got " + data['offset']);
        }
        // ensure the json data is a string
        if (data['orgID'] && !(typeof data['orgID'] === 'string' || data['orgID'] instanceof String)) {
            throw new Error("Expected the field `orgID` to be a primitive type in the JSON string but got " + data['orgID']);
        }
        // ensure the json data is a string
        if (data['ownerID'] && !(typeof data['ownerID'] === 'string' || data['ownerID'] instanceof String)) {
            throw new Error("Expected the field `ownerID` to be a primitive type in the JSON string but got " + data['ownerID']);
        }
        // ensure the json data is a string
        if (data['runbookLink'] && !(typeof data['runbookLink'] === 'string' || data['runbookLink'] instanceof String)) {
            throw new Error("Expected the field `runbookLink` to be a primitive type in the JSON string but got " + data['runbookLink']);
        }
        // ensure the json data is a string
        if (data['sleepUntil'] && !(typeof data['sleepUntil'] === 'string' || data['sleepUntil'] instanceof String)) {
            throw new Error("Expected the field `sleepUntil` to be a primitive type in the JSON string but got " + data['sleepUntil']);
        }
        if (data['statusRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statusRules'])) {
                throw new Error("Expected the field `statusRules` to be an array in the JSON data but got " + data['statusRules']);
            }
            // validate the optional field `statusRules` (array)
            for (const item of data['statusRules']) {
                StatusRule.validateJSON(item);
            };
        }
        if (data['tagRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tagRules'])) {
                throw new Error("Expected the field `tagRules` to be an array in the JSON data but got " + data['tagRules']);
            }
            // validate the optional field `tagRules` (array)
            for (const item of data['tagRules']) {
                TagRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['taskID'] && !(typeof data['taskID'] === 'string' || data['taskID'] instanceof String)) {
            throw new Error("Expected the field `taskID` to be a primitive type in the JSON string but got " + data['taskID']);
        }
        // ensure the json data is a string
        if (data['messageTemplate'] && !(typeof data['messageTemplate'] === 'string' || data['messageTemplate'] instanceof String)) {
            throw new Error("Expected the field `messageTemplate` to be a primitive type in the JSON string but got " + data['messageTemplate']);
        }
        // ensure the json data is a string
        if (data['parseMode'] && !(typeof data['parseMode'] === 'string' || data['parseMode'] instanceof String)) {
            throw new Error("Expected the field `parseMode` to be a primitive type in the JSON string but got " + data['parseMode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

TelegramNotificationRule.RequiredProperties = ["endpointID", "name", "orgID", "status", "statusRules", "messageTemplate", "type"];

/**
 * @member {Date} createdAt
 */
TelegramNotificationRule.prototype['createdAt'] = undefined;

/**
 * An optional description of the notification rule.
 * @member {String} description
 */
TelegramNotificationRule.prototype['description'] = undefined;

/**
 * @member {String} endpointID
 */
TelegramNotificationRule.prototype['endpointID'] = undefined;

/**
 * The notification repetition interval.
 * @member {String} every
 */
TelegramNotificationRule.prototype['every'] = undefined;

/**
 * @member {String} id
 */
TelegramNotificationRule.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
TelegramNotificationRule.prototype['labels'] = undefined;

/**
 * @member {String} lastRunError
 */
TelegramNotificationRule.prototype['lastRunError'] = undefined;

/**
 * @member {module:model/TelegramNotificationRule.LastRunStatusEnum} lastRunStatus
 */
TelegramNotificationRule.prototype['lastRunStatus'] = undefined;

/**
 * Timestamp of latest scheduled, completed run, RFC3339.
 * @member {Date} latestCompleted
 */
TelegramNotificationRule.prototype['latestCompleted'] = undefined;

/**
 * Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty.
 * @member {Number} limit
 */
TelegramNotificationRule.prototype['limit'] = undefined;

/**
 * Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty.
 * @member {Number} limitEvery
 */
TelegramNotificationRule.prototype['limitEvery'] = undefined;

/**
 * @member {module:model/NotificationRuleBaseLinks} links
 */
TelegramNotificationRule.prototype['links'] = undefined;

/**
 * Human-readable name describing the notification rule.
 * @member {String} name
 */
TelegramNotificationRule.prototype['name'] = undefined;

/**
 * Duration to delay after the schedule, before executing check.
 * @member {String} offset
 */
TelegramNotificationRule.prototype['offset'] = undefined;

/**
 * The ID of the organization that owns this notification rule.
 * @member {String} orgID
 */
TelegramNotificationRule.prototype['orgID'] = undefined;

/**
 * The ID of creator used to create this notification rule.
 * @member {String} ownerID
 */
TelegramNotificationRule.prototype['ownerID'] = undefined;

/**
 * @member {String} runbookLink
 */
TelegramNotificationRule.prototype['runbookLink'] = undefined;

/**
 * @member {String} sleepUntil
 */
TelegramNotificationRule.prototype['sleepUntil'] = undefined;

/**
 * @member {module:model/TaskStatusType} status
 */
TelegramNotificationRule.prototype['status'] = undefined;

/**
 * List of status rules the notification rule attempts to match.
 * @member {Array.<module:model/StatusRule>} statusRules
 */
TelegramNotificationRule.prototype['statusRules'] = undefined;

/**
 * List of tag rules the notification rule attempts to match.
 * @member {Array.<module:model/TagRule>} tagRules
 */
TelegramNotificationRule.prototype['tagRules'] = undefined;

/**
 * The ID of the task associated with this notification rule.
 * @member {String} taskID
 */
TelegramNotificationRule.prototype['taskID'] = undefined;

/**
 * @member {Date} updatedAt
 */
TelegramNotificationRule.prototype['updatedAt'] = undefined;

/**
 * Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .
 * @member {Boolean} disableWebPagePreview
 */
TelegramNotificationRule.prototype['disableWebPagePreview'] = undefined;

/**
 * The message template as a flux interpolated string.
 * @member {String} messageTemplate
 */
TelegramNotificationRule.prototype['messageTemplate'] = undefined;

/**
 * Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .
 * @member {module:model/TelegramNotificationRule.ParseModeEnum} parseMode
 */
TelegramNotificationRule.prototype['parseMode'] = undefined;

/**
 * The discriminator between other types of notification rules is \"telegram\".
 * @member {module:model/TelegramNotificationRule.TypeEnum} type
 */
TelegramNotificationRule.prototype['type'] = undefined;


// Implement NotificationRuleBase interface:
/**
 * @member {Date} createdAt
 */
NotificationRuleBase.prototype['createdAt'] = undefined;
/**
 * An optional description of the notification rule.
 * @member {String} description
 */
NotificationRuleBase.prototype['description'] = undefined;
/**
 * @member {String} endpointID
 */
NotificationRuleBase.prototype['endpointID'] = undefined;
/**
 * The notification repetition interval.
 * @member {String} every
 */
NotificationRuleBase.prototype['every'] = undefined;
/**
 * @member {String} id
 */
NotificationRuleBase.prototype['id'] = undefined;
/**
 * @member {Array.<module:model/Label>} labels
 */
NotificationRuleBase.prototype['labels'] = undefined;
/**
 * @member {String} lastRunError
 */
NotificationRuleBase.prototype['lastRunError'] = undefined;
/**
 * @member {module:model/NotificationRuleBase.LastRunStatusEnum} lastRunStatus
 */
NotificationRuleBase.prototype['lastRunStatus'] = undefined;
/**
 * Timestamp of latest scheduled, completed run, RFC3339.
 * @member {Date} latestCompleted
 */
NotificationRuleBase.prototype['latestCompleted'] = undefined;
/**
 * Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty.
 * @member {Number} limit
 */
NotificationRuleBase.prototype['limit'] = undefined;
/**
 * Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty.
 * @member {Number} limitEvery
 */
NotificationRuleBase.prototype['limitEvery'] = undefined;
/**
 * @member {module:model/NotificationRuleBaseLinks} links
 */
NotificationRuleBase.prototype['links'] = undefined;
/**
 * Human-readable name describing the notification rule.
 * @member {String} name
 */
NotificationRuleBase.prototype['name'] = undefined;
/**
 * Duration to delay after the schedule, before executing check.
 * @member {String} offset
 */
NotificationRuleBase.prototype['offset'] = undefined;
/**
 * The ID of the organization that owns this notification rule.
 * @member {String} orgID
 */
NotificationRuleBase.prototype['orgID'] = undefined;
/**
 * The ID of creator used to create this notification rule.
 * @member {String} ownerID
 */
NotificationRuleBase.prototype['ownerID'] = undefined;
/**
 * @member {String} runbookLink
 */
NotificationRuleBase.prototype['runbookLink'] = undefined;
/**
 * @member {String} sleepUntil
 */
NotificationRuleBase.prototype['sleepUntil'] = undefined;
/**
 * @member {module:model/TaskStatusType} status
 */
NotificationRuleBase.prototype['status'] = undefined;
/**
 * List of status rules the notification rule attempts to match.
 * @member {Array.<module:model/StatusRule>} statusRules
 */
NotificationRuleBase.prototype['statusRules'] = undefined;
/**
 * List of tag rules the notification rule attempts to match.
 * @member {Array.<module:model/TagRule>} tagRules
 */
NotificationRuleBase.prototype['tagRules'] = undefined;
/**
 * The ID of the task associated with this notification rule.
 * @member {String} taskID
 */
NotificationRuleBase.prototype['taskID'] = undefined;
/**
 * @member {Date} updatedAt
 */
NotificationRuleBase.prototype['updatedAt'] = undefined;
// Implement TelegramNotificationRuleBase interface:
/**
 * Disables preview of web links in the sent messages when \"true\". Defaults to \"false\" .
 * @member {Boolean} disableWebPagePreview
 */
TelegramNotificationRuleBase.prototype['disableWebPagePreview'] = undefined;
/**
 * The message template as a flux interpolated string.
 * @member {String} messageTemplate
 */
TelegramNotificationRuleBase.prototype['messageTemplate'] = undefined;
/**
 * Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\" .
 * @member {module:model/TelegramNotificationRuleBase.ParseModeEnum} parseMode
 */
TelegramNotificationRuleBase.prototype['parseMode'] = undefined;
/**
 * The discriminator between other types of notification rules is \"telegram\".
 * @member {module:model/TelegramNotificationRuleBase.TypeEnum} type
 */
TelegramNotificationRuleBase.prototype['type'] = undefined;



/**
 * Allowed values for the <code>lastRunStatus</code> property.
 * @enum {String}
 * @readonly
 */
TelegramNotificationRule['LastRunStatusEnum'] = {

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled"
};


/**
 * Allowed values for the <code>parseMode</code> property.
 * @enum {String}
 * @readonly
 */
TelegramNotificationRule['ParseModeEnum'] = {

    /**
     * value: "MarkdownV2"
     * @const
     */
    "MarkdownV2": "MarkdownV2",

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML",

    /**
     * value: "Markdown"
     * @const
     */
    "Markdown": "Markdown"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TelegramNotificationRule['TypeEnum'] = {

    /**
     * value: "telegram"
     * @const
     */
    "telegram": "telegram"
};



export default TelegramNotificationRule;

