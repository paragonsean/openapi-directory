/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Authorization from '../model/Authorization';
import AuthorizationPostRequest from '../model/AuthorizationPostRequest';
import AuthorizationUpdateRequest from '../model/AuthorizationUpdateRequest';
import Authorizations from '../model/Authorizations';
import Error from '../model/Error';

/**
* Authorizations service.
* @module api/AuthorizationsApi
* @version 2.0.0
*/
export default class AuthorizationsApi {

    /**
    * Constructs a new AuthorizationsApi. 
    * @alias module:api/AuthorizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAuthorizationsID operation.
     * @callback module:api/AuthorizationsApi~deleteAuthorizationsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an authorization
     * @param {String} authID The ID of the authorization to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/AuthorizationsApi~deleteAuthorizationsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAuthorizationsID(authID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authID' is set
      if (authID === undefined || authID === null) {
        throw new Error("Missing the required parameter 'authID' when calling deleteAuthorizationsID");
      }

      let pathParams = {
        'authID': authID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/authorizations/{authID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizations operation.
     * @callback module:api/AuthorizationsApi~getAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all authorizations
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [userID] Only show authorizations that belong to a user ID.
     * @param {String} [user] Only show authorizations that belong to a user name.
     * @param {String} [orgID] Only show authorizations that belong to an organization ID.
     * @param {String} [org] Only show authorizations that belong to a organization name.
     * @param {module:api/AuthorizationsApi~getAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorizations}
     */
    getAuthorizations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userID': opts['userID'],
        'user': opts['user'],
        'orgID': opts['orgID'],
        'org': opts['org']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Authorizations;
      return this.apiClient.callApi(
        '/authorizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizationsID operation.
     * @callback module:api/AuthorizationsApi~getAuthorizationsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an authorization
     * @param {String} authID The ID of the authorization to get.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/AuthorizationsApi~getAuthorizationsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorization}
     */
    getAuthorizationsID(authID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authID' is set
      if (authID === undefined || authID === null) {
        throw new Error("Missing the required parameter 'authID' when calling getAuthorizationsID");
      }

      let pathParams = {
        'authID': authID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Authorization;
      return this.apiClient.callApi(
        '/authorizations/{authID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationsID operation.
     * @callback module:api/AuthorizationsApi~patchAuthorizationsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an authorization to be active or inactive
     * @param {String} authID The ID of the authorization to update.
     * @param {module:model/AuthorizationUpdateRequest} authorizationUpdateRequest Authorization to update
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/AuthorizationsApi~patchAuthorizationsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorization}
     */
    patchAuthorizationsID(authID, authorizationUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = authorizationUpdateRequest;
      // verify the required parameter 'authID' is set
      if (authID === undefined || authID === null) {
        throw new Error("Missing the required parameter 'authID' when calling patchAuthorizationsID");
      }
      // verify the required parameter 'authorizationUpdateRequest' is set
      if (authorizationUpdateRequest === undefined || authorizationUpdateRequest === null) {
        throw new Error("Missing the required parameter 'authorizationUpdateRequest' when calling patchAuthorizationsID");
      }

      let pathParams = {
        'authID': authID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Authorization;
      return this.apiClient.callApi(
        '/authorizations/{authID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAuthorizations operation.
     * @callback module:api/AuthorizationsApi~postAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an authorization
     * @param {module:model/AuthorizationPostRequest} authorizationPostRequest Authorization to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/AuthorizationsApi~postAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorization}
     */
    postAuthorizations(authorizationPostRequest, opts, callback) {
      opts = opts || {};
      let postBody = authorizationPostRequest;
      // verify the required parameter 'authorizationPostRequest' is set
      if (authorizationPostRequest === undefined || authorizationPostRequest === null) {
        throw new Error("Missing the required parameter 'authorizationPostRequest' when calling postAuthorizations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Authorization;
      return this.apiClient.callApi(
        '/authorizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
