/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ExportTemplateRequest from '../model/ExportTemplateRequest';
import ListStacks200Response from '../model/ListStacks200Response';
import PatchStackRequest from '../model/PatchStackRequest';
import PostStackRequest from '../model/PostStackRequest';
import Stack from '../model/Stack';
import TemplateApply from '../model/TemplateApply';
import TemplateInner from '../model/TemplateInner';
import TemplateSummary from '../model/TemplateSummary';

/**
* InfluxDBTemplates service.
* @module api/InfluxDBTemplatesApi
* @version 2.0.0
*/
export default class InfluxDBTemplatesApi {

    /**
    * Constructs a new InfluxDBTemplatesApi. 
    * @alias module:api/InfluxDBTemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applyTemplate operation.
     * @callback module:api/InfluxDBTemplatesApi~applyTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply or dry-run an InfluxDB Template
     * @param {module:model/TemplateApply} templateApply 
     * @param {module:api/InfluxDBTemplatesApi~applyTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateSummary}
     */
    applyTemplate(templateApply, callback) {
      let postBody = templateApply;
      // verify the required parameter 'templateApply' is set
      if (templateApply === undefined || templateApply === null) {
        throw new Error("Missing the required parameter 'templateApply' when calling applyTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-jsonnet', 'text/yml'];
      let accepts = ['application/json'];
      let returnType = TemplateSummary;
      return this.apiClient.callApi(
        '/templates/apply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStack operation.
     * @callback module:api/InfluxDBTemplatesApi~createStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new stack
     * @param {module:model/PostStackRequest} postStackRequest Stack to create.
     * @param {module:api/InfluxDBTemplatesApi~createStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stack}
     */
    createStack(postStackRequest, callback) {
      let postBody = postStackRequest;
      // verify the required parameter 'postStackRequest' is set
      if (postStackRequest === undefined || postStackRequest === null) {
        throw new Error("Missing the required parameter 'postStackRequest' when calling createStack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Stack;
      return this.apiClient.callApi(
        '/stacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStack operation.
     * @callback module:api/InfluxDBTemplatesApi~deleteStackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stack and associated resources
     * @param {String} stackId Theidentifier of the stack.
     * @param {String} orgID The identifier of the organization.
     * @param {module:api/InfluxDBTemplatesApi~deleteStackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStack(stackId, orgID, callback) {
      let postBody = null;
      // verify the required parameter 'stackId' is set
      if (stackId === undefined || stackId === null) {
        throw new Error("Missing the required parameter 'stackId' when calling deleteStack");
      }
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling deleteStack");
      }

      let pathParams = {
        'stack_id': stackId
      };
      let queryParams = {
        'orgID': orgID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/stacks/{stack_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportTemplate operation.
     * @callback module:api/InfluxDBTemplatesApi~exportTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TemplateInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a new Influx Template
     * @param {Object} opts Optional parameters
     * @param {module:model/ExportTemplateRequest} [exportTemplateRequest] Export resources as an InfluxDB template.
     * @param {module:api/InfluxDBTemplatesApi~exportTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TemplateInner>}
     */
    exportTemplate(opts, callback) {
      opts = opts || {};
      let postBody = opts['exportTemplateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/x-yaml'];
      let returnType = [TemplateInner];
      return this.apiClient.callApi(
        '/templates/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStacks operation.
     * @callback module:api/InfluxDBTemplatesApi~listStacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStacks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all installed InfluxDB templates
     * @param {String} orgID The organization id of the stacks
     * @param {Object} opts Optional parameters
     * @param {String} [name] A collection of names to filter the list by.
     * @param {String} [stackID] A collection of stackIDs to filter the list by.
     * @param {module:api/InfluxDBTemplatesApi~listStacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStacks200Response}
     */
    listStacks(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling listStacks");
      }

      let pathParams = {
      };
      let queryParams = {
        'orgID': orgID,
        'name': opts['name'],
        'stackID': opts['stackID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStacks200Response;
      return this.apiClient.callApi(
        '/stacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readStack operation.
     * @callback module:api/InfluxDBTemplatesApi~readStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a stack
     * @param {String} stackId Theidentifier of the stack.
     * @param {module:api/InfluxDBTemplatesApi~readStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stack}
     */
    readStack(stackId, callback) {
      let postBody = null;
      // verify the required parameter 'stackId' is set
      if (stackId === undefined || stackId === null) {
        throw new Error("Missing the required parameter 'stackId' when calling readStack");
      }

      let pathParams = {
        'stack_id': stackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stack;
      return this.apiClient.callApi(
        '/stacks/{stack_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uninstallStack operation.
     * @callback module:api/InfluxDBTemplatesApi~uninstallStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uninstall an InfluxDB Stack
     * @param {String} stackId The stack id
     * @param {module:api/InfluxDBTemplatesApi~uninstallStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stack}
     */
    uninstallStack(stackId, callback) {
      let postBody = null;
      // verify the required parameter 'stackId' is set
      if (stackId === undefined || stackId === null) {
        throw new Error("Missing the required parameter 'stackId' when calling uninstallStack");
      }

      let pathParams = {
        'stack_id': stackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stack;
      return this.apiClient.callApi(
        '/stacks/{stack_id}/uninstall', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStack operation.
     * @callback module:api/InfluxDBTemplatesApi~updateStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an InfluxDB Stack
     * @param {String} stackId Theidentifier of the stack.
     * @param {module:model/PatchStackRequest} patchStackRequest Influx stack to update.
     * @param {module:api/InfluxDBTemplatesApi~updateStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stack}
     */
    updateStack(stackId, patchStackRequest, callback) {
      let postBody = patchStackRequest;
      // verify the required parameter 'stackId' is set
      if (stackId === undefined || stackId === null) {
        throw new Error("Missing the required parameter 'stackId' when calling updateStack");
      }
      // verify the required parameter 'patchStackRequest' is set
      if (patchStackRequest === undefined || patchStackRequest === null) {
        throw new Error("Missing the required parameter 'patchStackRequest' when calling updateStack");
      }

      let pathParams = {
        'stack_id': stackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Stack;
      return this.apiClient.callApi(
        '/stacks/{stack_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
