/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import NotificationEndpoint from '../model/NotificationEndpoint';
import NotificationEndpointDiscriminator from '../model/NotificationEndpointDiscriminator';
import NotificationEndpointUpdate from '../model/NotificationEndpointUpdate';
import NotificationEndpoints from '../model/NotificationEndpoints';
import PostNotificationEndpoint from '../model/PostNotificationEndpoint';

/**
* NotificationEndpoints service.
* @module api/NotificationEndpointsApi
* @version 2.0.0
*/
export default class NotificationEndpointsApi {

    /**
    * Constructs a new NotificationEndpointsApi. 
    * @alias module:api/NotificationEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNotificationEndpoint operation.
     * @callback module:api/NotificationEndpointsApi~createNotificationEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a notification endpoint
     * @param {module:model/PostNotificationEndpoint} postNotificationEndpoint Notification endpoint to create
     * @param {module:api/NotificationEndpointsApi~createNotificationEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationEndpoint}
     */
    createNotificationEndpoint(postNotificationEndpoint, callback) {
      let postBody = postNotificationEndpoint;
      // verify the required parameter 'postNotificationEndpoint' is set
      if (postNotificationEndpoint === undefined || postNotificationEndpoint === null) {
        throw new Error("Missing the required parameter 'postNotificationEndpoint' when calling createNotificationEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationEndpoint;
      return this.apiClient.callApi(
        '/notificationEndpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationEndpointsID operation.
     * @callback module:api/NotificationEndpointsApi~deleteNotificationEndpointsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification endpoint
     * @param {String} endpointID The notification endpoint ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationEndpointsApi~deleteNotificationEndpointsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNotificationEndpointsID(endpointID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointID' is set
      if (endpointID === undefined || endpointID === null) {
        throw new Error("Missing the required parameter 'endpointID' when calling deleteNotificationEndpointsID");
      }

      let pathParams = {
        'endpointID': endpointID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationEndpoints/{endpointID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationEndpointsIDLabelsID operation.
     * @callback module:api/NotificationEndpointsApi~deleteNotificationEndpointsIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label from a notification endpoint
     * @param {String} endpointID The notification endpoint ID.
     * @param {String} labelID The ID of the label to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationEndpointsApi~deleteNotificationEndpointsIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNotificationEndpointsIDLabelsID(endpointID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointID' is set
      if (endpointID === undefined || endpointID === null) {
        throw new Error("Missing the required parameter 'endpointID' when calling deleteNotificationEndpointsIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteNotificationEndpointsIDLabelsID");
      }

      let pathParams = {
        'endpointID': endpointID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationEndpoints/{endpointID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationEndpoints operation.
     * @callback module:api/NotificationEndpointsApi~getNotificationEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationEndpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all notification endpoints
     * @param {String} orgID Only show notification endpoints that belong to specific organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {Number} [offset] 
     * @param {Number} [limit = 20)] 
     * @param {module:api/NotificationEndpointsApi~getNotificationEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationEndpoints}
     */
    getNotificationEndpoints(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getNotificationEndpoints");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'orgID': orgID
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationEndpoints;
      return this.apiClient.callApi(
        '/notificationEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationEndpointsID operation.
     * @callback module:api/NotificationEndpointsApi~getNotificationEndpointsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a notification endpoint
     * @param {String} endpointID The notification endpoint ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationEndpointsApi~getNotificationEndpointsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationEndpoint}
     */
    getNotificationEndpointsID(endpointID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointID' is set
      if (endpointID === undefined || endpointID === null) {
        throw new Error("Missing the required parameter 'endpointID' when calling getNotificationEndpointsID");
      }

      let pathParams = {
        'endpointID': endpointID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationEndpoint;
      return this.apiClient.callApi(
        '/notificationEndpoints/{endpointID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationEndpointsIDLabels operation.
     * @callback module:api/NotificationEndpointsApi~getNotificationEndpointsIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a notification endpoint
     * @param {String} endpointID The notification endpoint ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationEndpointsApi~getNotificationEndpointsIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getNotificationEndpointsIDLabels(endpointID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointID' is set
      if (endpointID === undefined || endpointID === null) {
        throw new Error("Missing the required parameter 'endpointID' when calling getNotificationEndpointsIDLabels");
      }

      let pathParams = {
        'endpointID': endpointID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/notificationEndpoints/{endpointID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNotificationEndpointsID operation.
     * @callback module:api/NotificationEndpointsApi~patchNotificationEndpointsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a notification endpoint
     * @param {String} endpointID The notification endpoint ID.
     * @param {module:model/NotificationEndpointUpdate} notificationEndpointUpdate Check update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationEndpointsApi~patchNotificationEndpointsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationEndpoint}
     */
    patchNotificationEndpointsID(endpointID, notificationEndpointUpdate, opts, callback) {
      opts = opts || {};
      let postBody = notificationEndpointUpdate;
      // verify the required parameter 'endpointID' is set
      if (endpointID === undefined || endpointID === null) {
        throw new Error("Missing the required parameter 'endpointID' when calling patchNotificationEndpointsID");
      }
      // verify the required parameter 'notificationEndpointUpdate' is set
      if (notificationEndpointUpdate === undefined || notificationEndpointUpdate === null) {
        throw new Error("Missing the required parameter 'notificationEndpointUpdate' when calling patchNotificationEndpointsID");
      }

      let pathParams = {
        'endpointID': endpointID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationEndpoint;
      return this.apiClient.callApi(
        '/notificationEndpoints/{endpointID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNotificationEndpointIDLabels operation.
     * @callback module:api/NotificationEndpointsApi~postNotificationEndpointIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a notification endpoint
     * @param {String} endpointID The notification endpoint ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationEndpointsApi~postNotificationEndpointIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postNotificationEndpointIDLabels(endpointID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'endpointID' is set
      if (endpointID === undefined || endpointID === null) {
        throw new Error("Missing the required parameter 'endpointID' when calling postNotificationEndpointIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postNotificationEndpointIDLabels");
      }

      let pathParams = {
        'endpointID': endpointID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/notificationEndpoints/{endpointID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putNotificationEndpointsID operation.
     * @callback module:api/NotificationEndpointsApi~putNotificationEndpointsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a notification endpoint
     * @param {String} endpointID The notification endpoint ID.
     * @param {module:model/NotificationEndpoint} notificationEndpoint A new notification endpoint to replace the existing endpoint with
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationEndpointsApi~putNotificationEndpointsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationEndpoint}
     */
    putNotificationEndpointsID(endpointID, notificationEndpoint, opts, callback) {
      opts = opts || {};
      let postBody = notificationEndpoint;
      // verify the required parameter 'endpointID' is set
      if (endpointID === undefined || endpointID === null) {
        throw new Error("Missing the required parameter 'endpointID' when calling putNotificationEndpointsID");
      }
      // verify the required parameter 'notificationEndpoint' is set
      if (notificationEndpoint === undefined || notificationEndpoint === null) {
        throw new Error("Missing the required parameter 'notificationEndpoint' when calling putNotificationEndpointsID");
      }

      let pathParams = {
        'endpointID': endpointID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationEndpoint;
      return this.apiClient.callApi(
        '/notificationEndpoints/{endpointID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
