/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddResourceMemberRequestBody from '../model/AddResourceMemberRequestBody';
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import ResourceMember from '../model/ResourceMember';
import ResourceMembers from '../model/ResourceMembers';
import ResourceOwner from '../model/ResourceOwner';
import ResourceOwners from '../model/ResourceOwners';
import Telegraf from '../model/Telegraf';
import TelegrafRequest from '../model/TelegrafRequest';
import Telegrafs from '../model/Telegrafs';

/**
* Telegrafs service.
* @module api/TelegrafsApi
* @version 2.0.0
*/
export default class TelegrafsApi {

    /**
    * Constructs a new TelegrafsApi. 
    * @alias module:api/TelegrafsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTelegrafsID operation.
     * @callback module:api/TelegrafsApi~deleteTelegrafsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Telegraf configuration
     * @param {String} telegrafID The Telegraf configuration ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~deleteTelegrafsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTelegrafsID(telegrafID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling deleteTelegrafsID");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTelegrafsIDLabelsID operation.
     * @callback module:api/TelegrafsApi~deleteTelegrafsIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label from a Telegraf config
     * @param {String} telegrafID The Telegraf config ID.
     * @param {String} labelID The label ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~deleteTelegrafsIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTelegrafsIDLabelsID(telegrafID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling deleteTelegrafsIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteTelegrafsIDLabelsID");
      }

      let pathParams = {
        'telegrafID': telegrafID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTelegrafsIDMembersID operation.
     * @callback module:api/TelegrafsApi~deleteTelegrafsIDMembersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a member from a Telegraf config
     * @param {String} userID The ID of the member to remove.
     * @param {String} telegrafID The Telegraf config ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~deleteTelegrafsIDMembersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTelegrafsIDMembersID(userID, telegrafID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteTelegrafsIDMembersID");
      }
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling deleteTelegrafsIDMembersID");
      }

      let pathParams = {
        'userID': userID,
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/members/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTelegrafsIDOwnersID operation.
     * @callback module:api/TelegrafsApi~deleteTelegrafsIDOwnersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an owner from a Telegraf config
     * @param {String} userID The ID of the owner to remove.
     * @param {String} telegrafID The Telegraf config ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~deleteTelegrafsIDOwnersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTelegrafsIDOwnersID(userID, telegrafID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteTelegrafsIDOwnersID");
      }
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling deleteTelegrafsIDOwnersID");
      }

      let pathParams = {
        'userID': userID,
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/owners/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTelegrafs operation.
     * @callback module:api/TelegrafsApi~getTelegrafsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Telegrafs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Telegraf configurations
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [orgID] The organization ID the Telegraf config belongs to.
     * @param {module:api/TelegrafsApi~getTelegrafsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Telegrafs}
     */
    getTelegrafs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'orgID': opts['orgID']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Telegrafs;
      return this.apiClient.callApi(
        '/telegrafs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTelegrafsID operation.
     * @callback module:api/TelegrafsApi~getTelegrafsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Telegraf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Telegraf configuration
     * @param {String} telegrafID The Telegraf configuration ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:model/String} [accept = 'application/toml')] 
     * @param {module:api/TelegrafsApi~getTelegrafsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Telegraf}
     */
    getTelegrafsID(telegrafID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling getTelegrafsID");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan'],
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'application/toml'];
      let returnType = Telegraf;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTelegrafsIDLabels operation.
     * @callback module:api/TelegrafsApi~getTelegrafsIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a Telegraf config
     * @param {String} telegrafID The Telegraf config ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~getTelegrafsIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getTelegrafsIDLabels(telegrafID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling getTelegrafsIDLabels");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTelegrafsIDMembers operation.
     * @callback module:api/TelegrafsApi~getTelegrafsIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users with member privileges for a Telegraf config
     * @param {String} telegrafID The Telegraf config ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~getTelegrafsIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMembers}
     */
    getTelegrafsIDMembers(telegrafID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling getTelegrafsIDMembers");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMembers;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTelegrafsIDOwners operation.
     * @callback module:api/TelegrafsApi~getTelegrafsIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwners} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all owners of a Telegraf configuration
     * @param {String} telegrafID The Telegraf configuration ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~getTelegrafsIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwners}
     */
    getTelegrafsIDOwners(telegrafID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling getTelegrafsIDOwners");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOwners;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/owners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTelegrafs operation.
     * @callback module:api/TelegrafsApi~postTelegrafsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Telegraf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Telegraf configuration
     * @param {module:model/TelegrafRequest} telegrafRequest Telegraf configuration to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~postTelegrafsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Telegraf}
     */
    postTelegrafs(telegrafRequest, opts, callback) {
      opts = opts || {};
      let postBody = telegrafRequest;
      // verify the required parameter 'telegrafRequest' is set
      if (telegrafRequest === undefined || telegrafRequest === null) {
        throw new Error("Missing the required parameter 'telegrafRequest' when calling postTelegrafs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Telegraf;
      return this.apiClient.callApi(
        '/telegrafs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTelegrafsIDLabels operation.
     * @callback module:api/TelegrafsApi~postTelegrafsIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a Telegraf config
     * @param {String} telegrafID The Telegraf config ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~postTelegrafsIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postTelegrafsIDLabels(telegrafID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling postTelegrafsIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postTelegrafsIDLabels");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTelegrafsIDMembers operation.
     * @callback module:api/TelegrafsApi~postTelegrafsIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a member to a Telegraf config
     * @param {String} telegrafID The Telegraf config ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as member
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~postTelegrafsIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMember}
     */
    postTelegrafsIDMembers(telegrafID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling postTelegrafsIDMembers");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postTelegrafsIDMembers");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceMember;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTelegrafsIDOwners operation.
     * @callback module:api/TelegrafsApi~postTelegrafsIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an owner to a Telegraf configuration
     * @param {String} telegrafID The Telegraf configuration ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as owner
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~postTelegrafsIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwner}
     */
    postTelegrafsIDOwners(telegrafID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling postTelegrafsIDOwners");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postTelegrafsIDOwners");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceOwner;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}/owners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTelegrafsID operation.
     * @callback module:api/TelegrafsApi~putTelegrafsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Telegraf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Telegraf configuration
     * @param {String} telegrafID The Telegraf config ID.
     * @param {module:model/TelegrafRequest} telegrafRequest Telegraf configuration update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TelegrafsApi~putTelegrafsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Telegraf}
     */
    putTelegrafsID(telegrafID, telegrafRequest, opts, callback) {
      opts = opts || {};
      let postBody = telegrafRequest;
      // verify the required parameter 'telegrafID' is set
      if (telegrafID === undefined || telegrafID === null) {
        throw new Error("Missing the required parameter 'telegrafID' when calling putTelegrafsID");
      }
      // verify the required parameter 'telegrafRequest' is set
      if (telegrafRequest === undefined || telegrafRequest === null) {
        throw new Error("Missing the required parameter 'telegrafRequest' when calling putTelegrafsID");
      }

      let pathParams = {
        'telegrafID': telegrafID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Telegraf;
      return this.apiClient.callApi(
        '/telegrafs/{telegrafID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
