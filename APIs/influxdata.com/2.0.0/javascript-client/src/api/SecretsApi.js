/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SecretKeys from '../model/SecretKeys';
import SecretKeysResponse from '../model/SecretKeysResponse';

/**
* Secrets service.
* @module api/SecretsApi
* @version 2.0.0
*/
export default class SecretsApi {

    /**
    * Constructs a new SecretsApi. 
    * @alias module:api/SecretsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOrgsIDSecrets operation.
     * @callback module:api/SecretsApi~getOrgsIDSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all secret keys for an organization
     * @param {String} orgID The organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SecretsApi~getOrgsIDSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretKeysResponse}
     */
    getOrgsIDSecrets(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getOrgsIDSecrets");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretKeysResponse;
      return this.apiClient.callApi(
        '/orgs/{orgID}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOrgsIDSecrets operation.
     * @callback module:api/SecretsApi~patchOrgsIDSecretsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update secrets in an organization
     * @param {String} orgID The organization ID.
     * @param {Object.<String, {String: String}>} requestBody Secret key value pairs to update/add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SecretsApi~patchOrgsIDSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchOrgsIDSecrets(orgID, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling patchOrgsIDSecrets");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling patchOrgsIDSecrets");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{orgID}/secrets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrgsIDSecrets operation.
     * @callback module:api/SecretsApi~postOrgsIDSecretsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete secrets from an organization
     * @param {String} orgID The organization ID.
     * @param {module:model/SecretKeys} secretKeys Secret key to delete
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SecretsApi~postOrgsIDSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrgsIDSecrets(orgID, secretKeys, opts, callback) {
      opts = opts || {};
      let postBody = secretKeys;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling postOrgsIDSecrets");
      }
      // verify the required parameter 'secretKeys' is set
      if (secretKeys === undefined || secretKeys === null) {
        throw new Error("Missing the required parameter 'secretKeys' when calling postOrgsIDSecrets");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{orgID}/secrets/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
