/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import LineProtocolError from '../model/LineProtocolError';
import LineProtocolLengthError from '../model/LineProtocolLengthError';
import WritePrecision from '../model/WritePrecision';

/**
* Write service.
* @module api/WriteApi
* @version 2.0.0
*/
export default class WriteApi {

    /**
    * Constructs a new WriteApi. 
    * @alias module:api/WriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postWrite operation.
     * @callback module:api/WriteApi~postWriteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write time series data into InfluxDB
     * @param {String} org Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.
     * @param {String} bucket The destination bucket for writes.
     * @param {Blob} body Line protocol body
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:model/String} [contentEncoding = 'identity')] When present, its value indicates to the database that compression is applied to the line-protocol body.
     * @param {module:model/String} [contentType = 'text/plain; charset=utf-8')] Content-Type is used to indicate the format of the data sent to the server.
     * @param {Number} [contentLength] Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.
     * @param {module:model/String} [accept = 'application/json')] Specifies the return content format.
     * @param {String} [orgID] Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.
     * @param {module:model/WritePrecision} [precision] The precision for the unix timestamps within the body line-protocol.
     * @param {module:api/WriteApi~postWriteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postWrite(org, bucket, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling postWrite");
      }
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling postWrite");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postWrite");
      }

      let pathParams = {
      };
      let queryParams = {
        'org': org,
        'orgID': opts['orgID'],
        'bucket': bucket,
        'precision': opts['precision']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan'],
        'Content-Encoding': opts['contentEncoding'],
        'Content-Type': opts['contentType'],
        'Content-Length': opts['contentLength'],
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/write', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
