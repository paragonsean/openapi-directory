/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Document from '../model/Document';
import DocumentCreate from '../model/DocumentCreate';
import DocumentUpdate from '../model/DocumentUpdate';
import Documents from '../model/Documents';
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';

/**
* Templates service.
* @module api/TemplatesApi
* @version 2.0.0
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDocumentsTemplatesID operation.
     * @callback module:api/TemplatesApi~deleteDocumentsTemplatesIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a template
     * @param {String} templateID The template ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TemplatesApi~deleteDocumentsTemplatesIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocumentsTemplatesID(templateID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateID' is set
      if (templateID === undefined || templateID === null) {
        throw new Error("Missing the required parameter 'templateID' when calling deleteDocumentsTemplatesID");
      }

      let pathParams = {
        'templateID': templateID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents/templates/{templateID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocumentsTemplatesIDLabelsID operation.
     * @callback module:api/TemplatesApi~deleteDocumentsTemplatesIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label from a template
     * @param {String} templateID The template ID.
     * @param {String} labelID The label ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TemplatesApi~deleteDocumentsTemplatesIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocumentsTemplatesIDLabelsID(templateID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateID' is set
      if (templateID === undefined || templateID === null) {
        throw new Error("Missing the required parameter 'templateID' when calling deleteDocumentsTemplatesIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteDocumentsTemplatesIDLabelsID");
      }

      let pathParams = {
        'templateID': templateID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents/templates/{templateID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentsTemplates operation.
     * @callback module:api/TemplatesApi~getDocumentsTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Documents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all templates
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [org] Specifies the name of the organization of the template.
     * @param {String} [orgID] Specifies the organization ID of the template.
     * @param {module:api/TemplatesApi~getDocumentsTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Documents}
     */
    getDocumentsTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'org': opts['org'],
        'orgID': opts['orgID']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Documents;
      return this.apiClient.callApi(
        '/documents/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentsTemplatesID operation.
     * @callback module:api/TemplatesApi~getDocumentsTemplatesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a template
     * @param {String} templateID The template ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TemplatesApi~getDocumentsTemplatesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    getDocumentsTemplatesID(templateID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateID' is set
      if (templateID === undefined || templateID === null) {
        throw new Error("Missing the required parameter 'templateID' when calling getDocumentsTemplatesID");
      }

      let pathParams = {
        'templateID': templateID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/templates/{templateID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentsTemplatesIDLabels operation.
     * @callback module:api/TemplatesApi~getDocumentsTemplatesIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a template
     * @param {String} templateID The template ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TemplatesApi~getDocumentsTemplatesIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getDocumentsTemplatesIDLabels(templateID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateID' is set
      if (templateID === undefined || templateID === null) {
        throw new Error("Missing the required parameter 'templateID' when calling getDocumentsTemplatesIDLabels");
      }

      let pathParams = {
        'templateID': templateID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/documents/templates/{templateID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDocumentsTemplates operation.
     * @callback module:api/TemplatesApi~postDocumentsTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a template
     * @param {module:model/DocumentCreate} documentCreate Template that will be created
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TemplatesApi~postDocumentsTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    postDocumentsTemplates(documentCreate, opts, callback) {
      opts = opts || {};
      let postBody = documentCreate;
      // verify the required parameter 'documentCreate' is set
      if (documentCreate === undefined || documentCreate === null) {
        throw new Error("Missing the required parameter 'documentCreate' when calling postDocumentsTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDocumentsTemplatesIDLabels operation.
     * @callback module:api/TemplatesApi~postDocumentsTemplatesIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a template
     * @param {String} templateID The template ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TemplatesApi~postDocumentsTemplatesIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postDocumentsTemplatesIDLabels(templateID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'templateID' is set
      if (templateID === undefined || templateID === null) {
        throw new Error("Missing the required parameter 'templateID' when calling postDocumentsTemplatesIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postDocumentsTemplatesIDLabels");
      }

      let pathParams = {
        'templateID': templateID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/documents/templates/{templateID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDocumentsTemplatesID operation.
     * @callback module:api/TemplatesApi~putDocumentsTemplatesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a template
     * @param {String} templateID The template ID.
     * @param {module:model/DocumentUpdate} documentUpdate Template that will be updated
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TemplatesApi~putDocumentsTemplatesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    putDocumentsTemplatesID(templateID, documentUpdate, opts, callback) {
      opts = opts || {};
      let postBody = documentUpdate;
      // verify the required parameter 'templateID' is set
      if (templateID === undefined || templateID === null) {
        throw new Error("Missing the required parameter 'templateID' when calling putDocumentsTemplatesID");
      }
      // verify the required parameter 'documentUpdate' is set
      if (documentUpdate === undefined || documentUpdate === null) {
        throw new Error("Missing the required parameter 'documentUpdate' when calling putDocumentsTemplatesID");
      }

      let pathParams = {
        'templateID': templateID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/templates/{templateID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
