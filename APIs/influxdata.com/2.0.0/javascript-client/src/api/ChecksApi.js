/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Check from '../model/Check';
import CheckDiscriminator from '../model/CheckDiscriminator';
import CheckPatch from '../model/CheckPatch';
import Checks from '../model/Checks';
import Error from '../model/Error';
import FluxResponse from '../model/FluxResponse';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import PostCheck from '../model/PostCheck';

/**
* Checks service.
* @module api/ChecksApi
* @version 2.0.0
*/
export default class ChecksApi {

    /**
    * Constructs a new ChecksApi. 
    * @alias module:api/ChecksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCheck operation.
     * @callback module:api/ChecksApi~createCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Check} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new check
     * @param {module:model/PostCheck} postCheck Check to create
     * @param {module:api/ChecksApi~createCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Check}
     */
    createCheck(postCheck, callback) {
      let postBody = postCheck;
      // verify the required parameter 'postCheck' is set
      if (postCheck === undefined || postCheck === null) {
        throw new Error("Missing the required parameter 'postCheck' when calling createCheck");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Check;
      return this.apiClient.callApi(
        '/checks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChecksID operation.
     * @callback module:api/ChecksApi~deleteChecksIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a check
     * @param {String} checkID The check ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ChecksApi~deleteChecksIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChecksID(checkID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'checkID' is set
      if (checkID === undefined || checkID === null) {
        throw new Error("Missing the required parameter 'checkID' when calling deleteChecksID");
      }

      let pathParams = {
        'checkID': checkID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/checks/{checkID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChecksIDLabelsID operation.
     * @callback module:api/ChecksApi~deleteChecksIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete label from a check
     * @param {String} checkID The check ID.
     * @param {String} labelID The ID of the label to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ChecksApi~deleteChecksIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChecksIDLabelsID(checkID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'checkID' is set
      if (checkID === undefined || checkID === null) {
        throw new Error("Missing the required parameter 'checkID' when calling deleteChecksIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteChecksIDLabelsID");
      }

      let pathParams = {
        'checkID': checkID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/checks/{checkID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecks operation.
     * @callback module:api/ChecksApi~getChecksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Checks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all checks
     * @param {String} orgID Only show checks that belong to a specific organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {Number} [offset] 
     * @param {Number} [limit = 20)] 
     * @param {module:api/ChecksApi~getChecksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Checks}
     */
    getChecks(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getChecks");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'orgID': orgID
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Checks;
      return this.apiClient.callApi(
        '/checks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecksID operation.
     * @callback module:api/ChecksApi~getChecksIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Check} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a check
     * @param {String} checkID The check ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ChecksApi~getChecksIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Check}
     */
    getChecksID(checkID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'checkID' is set
      if (checkID === undefined || checkID === null) {
        throw new Error("Missing the required parameter 'checkID' when calling getChecksID");
      }

      let pathParams = {
        'checkID': checkID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Check;
      return this.apiClient.callApi(
        '/checks/{checkID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecksIDLabels operation.
     * @callback module:api/ChecksApi~getChecksIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a check
     * @param {String} checkID The check ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ChecksApi~getChecksIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getChecksIDLabels(checkID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'checkID' is set
      if (checkID === undefined || checkID === null) {
        throw new Error("Missing the required parameter 'checkID' when calling getChecksIDLabels");
      }

      let pathParams = {
        'checkID': checkID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/checks/{checkID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecksIDQuery operation.
     * @callback module:api/ChecksApi~getChecksIDQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FluxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a check query
     * @param {String} checkID The check ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ChecksApi~getChecksIDQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FluxResponse}
     */
    getChecksIDQuery(checkID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'checkID' is set
      if (checkID === undefined || checkID === null) {
        throw new Error("Missing the required parameter 'checkID' when calling getChecksIDQuery");
      }

      let pathParams = {
        'checkID': checkID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FluxResponse;
      return this.apiClient.callApi(
        '/checks/{checkID}/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchChecksID operation.
     * @callback module:api/ChecksApi~patchChecksIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Check} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a check
     * @param {String} checkID The check ID.
     * @param {module:model/CheckPatch} checkPatch Check update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ChecksApi~patchChecksIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Check}
     */
    patchChecksID(checkID, checkPatch, opts, callback) {
      opts = opts || {};
      let postBody = checkPatch;
      // verify the required parameter 'checkID' is set
      if (checkID === undefined || checkID === null) {
        throw new Error("Missing the required parameter 'checkID' when calling patchChecksID");
      }
      // verify the required parameter 'checkPatch' is set
      if (checkPatch === undefined || checkPatch === null) {
        throw new Error("Missing the required parameter 'checkPatch' when calling patchChecksID");
      }

      let pathParams = {
        'checkID': checkID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Check;
      return this.apiClient.callApi(
        '/checks/{checkID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postChecksIDLabels operation.
     * @callback module:api/ChecksApi~postChecksIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a check
     * @param {String} checkID The check ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ChecksApi~postChecksIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postChecksIDLabels(checkID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'checkID' is set
      if (checkID === undefined || checkID === null) {
        throw new Error("Missing the required parameter 'checkID' when calling postChecksIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postChecksIDLabels");
      }

      let pathParams = {
        'checkID': checkID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/checks/{checkID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putChecksID operation.
     * @callback module:api/ChecksApi~putChecksIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Check} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a check
     * @param {String} checkID The check ID.
     * @param {module:model/Check} check Check update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ChecksApi~putChecksIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Check}
     */
    putChecksID(checkID, check, opts, callback) {
      opts = opts || {};
      let postBody = check;
      // verify the required parameter 'checkID' is set
      if (checkID === undefined || checkID === null) {
        throw new Error("Missing the required parameter 'checkID' when calling putChecksID");
      }
      // verify the required parameter 'check' is set
      if (check === undefined || check === null) {
        throw new Error("Missing the required parameter 'check' when calling putChecksID");
      }

      let pathParams = {
        'checkID': checkID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Check;
      return this.apiClient.callApi(
        '/checks/{checkID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
