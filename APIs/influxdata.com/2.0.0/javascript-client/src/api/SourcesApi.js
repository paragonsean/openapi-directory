/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Buckets from '../model/Buckets';
import Error from '../model/Error';
import HealthCheck from '../model/HealthCheck';
import Source from '../model/Source';
import Sources from '../model/Sources';

/**
* Sources service.
* @module api/SourcesApi
* @version 2.0.0
*/
export default class SourcesApi {

    /**
    * Constructs a new SourcesApi. 
    * @alias module:api/SourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSourcesID operation.
     * @callback module:api/SourcesApi~deleteSourcesIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a source
     * @param {String} sourceID The source ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SourcesApi~deleteSourcesIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSourcesID(sourceID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceID' is set
      if (sourceID === undefined || sourceID === null) {
        throw new Error("Missing the required parameter 'sourceID' when calling deleteSourcesID");
      }

      let pathParams = {
        'sourceID': sourceID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sources/{sourceID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSources operation.
     * @callback module:api/SourcesApi~getSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sources} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all sources
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [org] The name of the organization.
     * @param {module:api/SourcesApi~getSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sources}
     */
    getSources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'org': opts['org']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sources;
      return this.apiClient.callApi(
        '/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourcesID operation.
     * @callback module:api/SourcesApi~getSourcesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a source
     * @param {String} sourceID The source ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SourcesApi~getSourcesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    getSourcesID(sourceID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceID' is set
      if (sourceID === undefined || sourceID === null) {
        throw new Error("Missing the required parameter 'sourceID' when calling getSourcesID");
      }

      let pathParams = {
        'sourceID': sourceID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/sources/{sourceID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourcesIDBuckets operation.
     * @callback module:api/SourcesApi~getSourcesIDBucketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Buckets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get buckets in a source
     * @param {String} sourceID The source ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [org] The name of the organization.
     * @param {module:api/SourcesApi~getSourcesIDBucketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Buckets}
     */
    getSourcesIDBuckets(sourceID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceID' is set
      if (sourceID === undefined || sourceID === null) {
        throw new Error("Missing the required parameter 'sourceID' when calling getSourcesIDBuckets");
      }

      let pathParams = {
        'sourceID': sourceID
      };
      let queryParams = {
        'org': opts['org']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Buckets;
      return this.apiClient.callApi(
        '/sources/{sourceID}/buckets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourcesIDHealth operation.
     * @callback module:api/SourcesApi~getSourcesIDHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthCheck} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the health of a source
     * @param {String} sourceID The source ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SourcesApi~getSourcesIDHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthCheck}
     */
    getSourcesIDHealth(sourceID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceID' is set
      if (sourceID === undefined || sourceID === null) {
        throw new Error("Missing the required parameter 'sourceID' when calling getSourcesIDHealth");
      }

      let pathParams = {
        'sourceID': sourceID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthCheck;
      return this.apiClient.callApi(
        '/sources/{sourceID}/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchSourcesID operation.
     * @callback module:api/SourcesApi~patchSourcesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Source
     * @param {String} sourceID The source ID.
     * @param {module:model/Source} source Source update
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SourcesApi~patchSourcesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    patchSourcesID(sourceID, source, opts, callback) {
      opts = opts || {};
      let postBody = source;
      // verify the required parameter 'sourceID' is set
      if (sourceID === undefined || sourceID === null) {
        throw new Error("Missing the required parameter 'sourceID' when calling patchSourcesID");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling patchSourcesID");
      }

      let pathParams = {
        'sourceID': sourceID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/sources/{sourceID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSources operation.
     * @callback module:api/SourcesApi~postSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a source
     * @param {module:model/Source} source Source to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SourcesApi~postSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    postSources(source, opts, callback) {
      opts = opts || {};
      let postBody = source;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling postSources");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
