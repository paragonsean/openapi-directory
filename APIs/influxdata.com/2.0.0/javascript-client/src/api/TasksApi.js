/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddResourceMemberRequestBody from '../model/AddResourceMemberRequestBody';
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import Logs from '../model/Logs';
import ResourceMember from '../model/ResourceMember';
import ResourceMembers from '../model/ResourceMembers';
import ResourceOwner from '../model/ResourceOwner';
import ResourceOwners from '../model/ResourceOwners';
import Run from '../model/Run';
import RunManually from '../model/RunManually';
import Runs from '../model/Runs';
import Task from '../model/Task';
import TaskCreateRequest from '../model/TaskCreateRequest';
import TaskUpdateRequest from '../model/TaskUpdateRequest';
import Tasks from '../model/Tasks';

/**
* Tasks service.
* @module api/TasksApi
* @version 2.0.0
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTasksID operation.
     * @callback module:api/TasksApi~deleteTasksIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a task
     * Deletes a task and all associated records
     * @param {String} taskID The ID of the task to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~deleteTasksIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTasksID(taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling deleteTasksID");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{taskID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTasksIDLabelsID operation.
     * @callback module:api/TasksApi~deleteTasksIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label from a task
     * @param {String} taskID The task ID.
     * @param {String} labelID The label ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~deleteTasksIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTasksIDLabelsID(taskID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling deleteTasksIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteTasksIDLabelsID");
      }

      let pathParams = {
        'taskID': taskID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{taskID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTasksIDMembersID operation.
     * @callback module:api/TasksApi~deleteTasksIDMembersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a member from a task
     * @param {String} userID The ID of the member to remove.
     * @param {String} taskID The task ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~deleteTasksIDMembersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTasksIDMembersID(userID, taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteTasksIDMembersID");
      }
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling deleteTasksIDMembersID");
      }

      let pathParams = {
        'userID': userID,
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{taskID}/members/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTasksIDOwnersID operation.
     * @callback module:api/TasksApi~deleteTasksIDOwnersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an owner from a task
     * @param {String} userID The ID of the owner to remove.
     * @param {String} taskID The task ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~deleteTasksIDOwnersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTasksIDOwnersID(userID, taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteTasksIDOwnersID");
      }
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling deleteTasksIDOwnersID");
      }

      let pathParams = {
        'userID': userID,
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{taskID}/owners/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTasksIDRunsID operation.
     * @callback module:api/TasksApi~deleteTasksIDRunsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a running task
     * @param {String} taskID The task ID.
     * @param {String} runID The run ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~deleteTasksIDRunsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTasksIDRunsID(taskID, runID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling deleteTasksIDRunsID");
      }
      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling deleteTasksIDRunsID");
      }

      let pathParams = {
        'taskID': taskID,
        'runID': runID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{taskID}/runs/{runID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasks operation.
     * @callback module:api/TasksApi~getTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tasks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all tasks
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [name] Returns task with a specific name.
     * @param {String} [after] Return tasks after a specified ID.
     * @param {String} [user] Filter tasks to a specific user ID.
     * @param {String} [org] Filter tasks to a specific organization name.
     * @param {String} [orgID] Filter tasks to a specific organization ID.
     * @param {module:model/String} [status] Filter tasks by a status--\"inactive\" or \"active\".
     * @param {Number} [limit = 100)] The number of tasks to return
     * @param {module:api/TasksApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tasks}
     */
    getTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'after': opts['after'],
        'user': opts['user'],
        'org': opts['org'],
        'orgID': opts['orgID'],
        'status': opts['status'],
        'limit': opts['limit']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tasks;
      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksID operation.
     * @callback module:api/TasksApi~getTasksIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a task
     * @param {String} taskID The task ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~getTasksIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    getTasksID(taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling getTasksID");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/tasks/{taskID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksIDLabels operation.
     * @callback module:api/TasksApi~getTasksIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a task
     * @param {String} taskID The task ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~getTasksIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getTasksIDLabels(taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling getTasksIDLabels");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/tasks/{taskID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksIDLogs operation.
     * @callback module:api/TasksApi~getTasksIDLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Logs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all logs for a task
     * @param {String} taskID The task ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~getTasksIDLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Logs}
     */
    getTasksIDLogs(taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling getTasksIDLogs");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Logs;
      return this.apiClient.callApi(
        '/tasks/{taskID}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksIDMembers operation.
     * @callback module:api/TasksApi~getTasksIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all task members
     * @param {String} taskID The task ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~getTasksIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMembers}
     */
    getTasksIDMembers(taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling getTasksIDMembers");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMembers;
      return this.apiClient.callApi(
        '/tasks/{taskID}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksIDOwners operation.
     * @callback module:api/TasksApi~getTasksIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwners} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all owners of a task
     * @param {String} taskID The task ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~getTasksIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwners}
     */
    getTasksIDOwners(taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling getTasksIDOwners");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOwners;
      return this.apiClient.callApi(
        '/tasks/{taskID}/owners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksIDRuns operation.
     * @callback module:api/TasksApi~getTasksIDRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List runs for a task
     * @param {String} taskID The ID of the task to get runs for.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [after] Returns runs after a specific ID.
     * @param {Number} [limit = 100)] The number of runs to return
     * @param {Date} [afterTime] Filter runs to those scheduled after this time, RFC3339
     * @param {Date} [beforeTime] Filter runs to those scheduled before this time, RFC3339
     * @param {module:api/TasksApi~getTasksIDRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runs}
     */
    getTasksIDRuns(taskID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling getTasksIDRuns");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
        'after': opts['after'],
        'limit': opts['limit'],
        'afterTime': opts['afterTime'],
        'beforeTime': opts['beforeTime']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runs;
      return this.apiClient.callApi(
        '/tasks/{taskID}/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksIDRunsID operation.
     * @callback module:api/TasksApi~getTasksIDRunsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single run for a task
     * @param {String} taskID The task ID.
     * @param {String} runID The run ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~getTasksIDRunsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Run}
     */
    getTasksIDRunsID(taskID, runID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling getTasksIDRunsID");
      }
      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling getTasksIDRunsID");
      }

      let pathParams = {
        'taskID': taskID,
        'runID': runID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Run;
      return this.apiClient.callApi(
        '/tasks/{taskID}/runs/{runID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksIDRunsIDLogs operation.
     * @callback module:api/TasksApi~getTasksIDRunsIDLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Logs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all logs for a run
     * @param {String} taskID ID of task to get logs for.
     * @param {String} runID ID of run to get logs for.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~getTasksIDRunsIDLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Logs}
     */
    getTasksIDRunsIDLogs(taskID, runID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling getTasksIDRunsIDLogs");
      }
      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling getTasksIDRunsIDLogs");
      }

      let pathParams = {
        'taskID': taskID,
        'runID': runID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Logs;
      return this.apiClient.callApi(
        '/tasks/{taskID}/runs/{runID}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchTasksID operation.
     * @callback module:api/TasksApi~patchTasksIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a task
     * Update a task. This will cancel all queued runs.
     * @param {String} taskID The task ID.
     * @param {module:model/TaskUpdateRequest} taskUpdateRequest Task update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~patchTasksIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    patchTasksID(taskID, taskUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = taskUpdateRequest;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling patchTasksID");
      }
      // verify the required parameter 'taskUpdateRequest' is set
      if (taskUpdateRequest === undefined || taskUpdateRequest === null) {
        throw new Error("Missing the required parameter 'taskUpdateRequest' when calling patchTasksID");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/tasks/{taskID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTasks operation.
     * @callback module:api/TasksApi~postTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new task
     * @param {module:model/TaskCreateRequest} taskCreateRequest Task to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~postTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    postTasks(taskCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = taskCreateRequest;
      // verify the required parameter 'taskCreateRequest' is set
      if (taskCreateRequest === undefined || taskCreateRequest === null) {
        throw new Error("Missing the required parameter 'taskCreateRequest' when calling postTasks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTasksIDLabels operation.
     * @callback module:api/TasksApi~postTasksIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a task
     * @param {String} taskID The task ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~postTasksIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postTasksIDLabels(taskID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling postTasksIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postTasksIDLabels");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/tasks/{taskID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTasksIDMembers operation.
     * @callback module:api/TasksApi~postTasksIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a member to a task
     * @param {String} taskID The task ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as member
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~postTasksIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMember}
     */
    postTasksIDMembers(taskID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling postTasksIDMembers");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postTasksIDMembers");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceMember;
      return this.apiClient.callApi(
        '/tasks/{taskID}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTasksIDOwners operation.
     * @callback module:api/TasksApi~postTasksIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an owner to a task
     * @param {String} taskID The task ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as owner
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/TasksApi~postTasksIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwner}
     */
    postTasksIDOwners(taskID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling postTasksIDOwners");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postTasksIDOwners");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceOwner;
      return this.apiClient.callApi(
        '/tasks/{taskID}/owners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTasksIDRuns operation.
     * @callback module:api/TasksApi~postTasksIDRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually start a task run, overriding the current schedule
     * @param {String} taskID 
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:model/RunManually} [runManually] 
     * @param {module:api/TasksApi~postTasksIDRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Run}
     */
    postTasksIDRuns(taskID, opts, callback) {
      opts = opts || {};
      let postBody = opts['runManually'];
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling postTasksIDRuns");
      }

      let pathParams = {
        'taskID': taskID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Run;
      return this.apiClient.callApi(
        '/tasks/{taskID}/runs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTasksIDRunsIDRetry operation.
     * @callback module:api/TasksApi~postTasksIDRunsIDRetryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry a task run
     * @param {String} taskID The task ID.
     * @param {String} runID The run ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/TasksApi~postTasksIDRunsIDRetryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Run}
     */
    postTasksIDRunsIDRetry(taskID, runID, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'taskID' is set
      if (taskID === undefined || taskID === null) {
        throw new Error("Missing the required parameter 'taskID' when calling postTasksIDRunsIDRetry");
      }
      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling postTasksIDRunsIDRetry");
      }

      let pathParams = {
        'taskID': taskID,
        'runID': runID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json'];
      let returnType = Run;
      return this.apiClient.callApi(
        '/tasks/{taskID}/runs/{runID}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
