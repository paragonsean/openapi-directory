/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddResourceMemberRequestBody from '../model/AddResourceMemberRequestBody';
import Cell from '../model/Cell';
import CellUpdate from '../model/CellUpdate';
import CreateCell from '../model/CreateCell';
import CreateDashboardRequest from '../model/CreateDashboardRequest';
import Dashboard from '../model/Dashboard';
import Dashboards from '../model/Dashboards';
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import PatchDashboardRequest from '../model/PatchDashboardRequest';
import PostDashboards201Response from '../model/PostDashboards201Response';
import ResourceMember from '../model/ResourceMember';
import ResourceMembers from '../model/ResourceMembers';
import ResourceOwner from '../model/ResourceOwner';
import ResourceOwners from '../model/ResourceOwners';
import View from '../model/View';

/**
* Dashboards service.
* @module api/DashboardsApi
* @version 2.0.0
*/
export default class DashboardsApi {

    /**
    * Constructs a new DashboardsApi. 
    * @alias module:api/DashboardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDashboardsID operation.
     * @callback module:api/DashboardsApi~deleteDashboardsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dashboard
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~deleteDashboardsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboardsID(dashboardID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling deleteDashboardsID");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardsIDCellsID_0 operation.
     * @callback module:api/DashboardsApi~deleteDashboardsIDCellsID_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dashboard cell
     * @param {String} dashboardID The ID of the dashboard to delete.
     * @param {String} cellID The ID of the cell to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~deleteDashboardsIDCellsID_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboardsIDCellsID_0(dashboardID, cellID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDCellsID_0");
      }
      // verify the required parameter 'cellID' is set
      if (cellID === undefined || cellID === null) {
        throw new Error("Missing the required parameter 'cellID' when calling deleteDashboardsIDCellsID_0");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'cellID': cellID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells/{cellID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardsIDLabelsID operation.
     * @callback module:api/DashboardsApi~deleteDashboardsIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label from a dashboard
     * @param {String} dashboardID The dashboard ID.
     * @param {String} labelID The ID of the label to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~deleteDashboardsIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboardsIDLabelsID(dashboardID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteDashboardsIDLabelsID");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardsIDMembersID operation.
     * @callback module:api/DashboardsApi~deleteDashboardsIDMembersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a member from a dashboard
     * @param {String} userID The ID of the member to remove.
     * @param {String} dashboardID The dashboard ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~deleteDashboardsIDMembersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboardsIDMembersID(userID, dashboardID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteDashboardsIDMembersID");
      }
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDMembersID");
      }

      let pathParams = {
        'userID': userID,
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/members/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardsIDOwnersID operation.
     * @callback module:api/DashboardsApi~deleteDashboardsIDOwnersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an owner from a dashboard
     * @param {String} userID The ID of the owner to remove.
     * @param {String} dashboardID The dashboard ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~deleteDashboardsIDOwnersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboardsIDOwnersID(userID, dashboardID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteDashboardsIDOwnersID");
      }
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDOwnersID");
      }

      let pathParams = {
        'userID': userID,
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/owners/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboards operation.
     * @callback module:api/DashboardsApi~getDashboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all dashboards
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {Number} [offset] 
     * @param {Number} [limit = 20)] 
     * @param {Boolean} [descending = false)] 
     * @param {String} [owner] A user identifier. Returns only dashboards where this user has the `owner` role.
     * @param {module:model/String} [sortBy] The column to sort by.
     * @param {Array.<String>} [id] A list of dashboard identifiers. Returns only the listed dashboards. If both `id` and `owner` are specified, only `id` is used.
     * @param {String} [orgID] The identifier of the organization.
     * @param {String} [org] The name of the organization.
     * @param {module:api/DashboardsApi~getDashboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboards}
     */
    getDashboards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'descending': opts['descending'],
        'owner': opts['owner'],
        'sortBy': opts['sortBy'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'orgID': opts['orgID'],
        'org': opts['org']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dashboards;
      return this.apiClient.callApi(
        '/dashboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardsID operation.
     * @callback module:api/DashboardsApi~getDashboardsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostDashboards201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Dashboard
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:model/String} [include] Includes the cell view properties in the response if set to `properties`
     * @param {module:api/DashboardsApi~getDashboardsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostDashboards201Response}
     */
    getDashboardsID(dashboardID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling getDashboardsID");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostDashboards201Response;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardsIDCellsIDView_0 operation.
     * @callback module:api/DashboardsApi~getDashboardsIDCellsIDView_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the view for a cell
     * @param {String} dashboardID The dashboard ID.
     * @param {String} cellID The cell ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~getDashboardsIDCellsIDView_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    getDashboardsIDCellsIDView_0(dashboardID, cellID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling getDashboardsIDCellsIDView_0");
      }
      // verify the required parameter 'cellID' is set
      if (cellID === undefined || cellID === null) {
        throw new Error("Missing the required parameter 'cellID' when calling getDashboardsIDCellsIDView_0");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'cellID': cellID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells/{cellID}/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardsIDLabels operation.
     * @callback module:api/DashboardsApi~getDashboardsIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a dashboard
     * @param {String} dashboardID The dashboard ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~getDashboardsIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getDashboardsIDLabels(dashboardID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling getDashboardsIDLabels");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardsIDMembers operation.
     * @callback module:api/DashboardsApi~getDashboardsIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all dashboard members
     * @param {String} dashboardID The dashboard ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~getDashboardsIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMembers}
     */
    getDashboardsIDMembers(dashboardID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling getDashboardsIDMembers");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMembers;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardsIDOwners operation.
     * @callback module:api/DashboardsApi~getDashboardsIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwners} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all dashboard owners
     * @param {String} dashboardID The dashboard ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~getDashboardsIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwners}
     */
    getDashboardsIDOwners(dashboardID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling getDashboardsIDOwners");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOwners;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/owners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDashboardsID operation.
     * @callback module:api/DashboardsApi~patchDashboardsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a dashboard
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {module:model/PatchDashboardRequest} patchDashboardRequest Patching of a dashboard
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~patchDashboardsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    patchDashboardsID(dashboardID, patchDashboardRequest, opts, callback) {
      opts = opts || {};
      let postBody = patchDashboardRequest;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling patchDashboardsID");
      }
      // verify the required parameter 'patchDashboardRequest' is set
      if (patchDashboardRequest === undefined || patchDashboardRequest === null) {
        throw new Error("Missing the required parameter 'patchDashboardRequest' when calling patchDashboardsID");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDashboardsIDCellsIDView_0 operation.
     * @callback module:api/DashboardsApi~patchDashboardsIDCellsIDView_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the view for a cell
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {String} cellID The ID of the cell to update.
     * @param {module:model/View} view 
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~patchDashboardsIDCellsIDView_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    patchDashboardsIDCellsIDView_0(dashboardID, cellID, view, opts, callback) {
      opts = opts || {};
      let postBody = view;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsIDView_0");
      }
      // verify the required parameter 'cellID' is set
      if (cellID === undefined || cellID === null) {
        throw new Error("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsIDView_0");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling patchDashboardsIDCellsIDView_0");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'cellID': cellID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells/{cellID}/view', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDashboardsIDCellsID_0 operation.
     * @callback module:api/DashboardsApi~patchDashboardsIDCellsID_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Cell} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the non-positional information related to a cell
     * Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {String} cellID The ID of the cell to update.
     * @param {module:model/CellUpdate} cellUpdate 
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~patchDashboardsIDCellsID_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cell}
     */
    patchDashboardsIDCellsID_0(dashboardID, cellID, cellUpdate, opts, callback) {
      opts = opts || {};
      let postBody = cellUpdate;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsID_0");
      }
      // verify the required parameter 'cellID' is set
      if (cellID === undefined || cellID === null) {
        throw new Error("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsID_0");
      }
      // verify the required parameter 'cellUpdate' is set
      if (cellUpdate === undefined || cellUpdate === null) {
        throw new Error("Missing the required parameter 'cellUpdate' when calling patchDashboardsIDCellsID_0");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'cellID': cellID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cell;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells/{cellID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDashboards operation.
     * @callback module:api/DashboardsApi~postDashboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostDashboards201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dashboard
     * @param {module:model/CreateDashboardRequest} createDashboardRequest Dashboard to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~postDashboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostDashboards201Response}
     */
    postDashboards(createDashboardRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDashboardRequest;
      // verify the required parameter 'createDashboardRequest' is set
      if (createDashboardRequest === undefined || createDashboardRequest === null) {
        throw new Error("Missing the required parameter 'createDashboardRequest' when calling postDashboards");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostDashboards201Response;
      return this.apiClient.callApi(
        '/dashboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDashboardsIDCells_0 operation.
     * @callback module:api/DashboardsApi~postDashboardsIDCells_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Cell} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dashboard cell
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {module:model/CreateCell} createCell Cell that will be added
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~postDashboardsIDCells_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cell}
     */
    postDashboardsIDCells_0(dashboardID, createCell, opts, callback) {
      opts = opts || {};
      let postBody = createCell;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling postDashboardsIDCells_0");
      }
      // verify the required parameter 'createCell' is set
      if (createCell === undefined || createCell === null) {
        throw new Error("Missing the required parameter 'createCell' when calling postDashboardsIDCells_0");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cell;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDashboardsIDLabels operation.
     * @callback module:api/DashboardsApi~postDashboardsIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a dashboard
     * @param {String} dashboardID The dashboard ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~postDashboardsIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postDashboardsIDLabels(dashboardID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling postDashboardsIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postDashboardsIDLabels");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDashboardsIDMembers operation.
     * @callback module:api/DashboardsApi~postDashboardsIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a member to a dashboard
     * @param {String} dashboardID The dashboard ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as member
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~postDashboardsIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMember}
     */
    postDashboardsIDMembers(dashboardID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling postDashboardsIDMembers");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postDashboardsIDMembers");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceMember;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDashboardsIDOwners operation.
     * @callback module:api/DashboardsApi~postDashboardsIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an owner to a dashboard
     * @param {String} dashboardID The dashboard ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as owner
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~postDashboardsIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwner}
     */
    postDashboardsIDOwners(dashboardID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling postDashboardsIDOwners");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postDashboardsIDOwners");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceOwner;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/owners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDashboardsIDCells_0 operation.
     * @callback module:api/DashboardsApi~putDashboardsIDCells_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace cells in a dashboard
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {Array.<module:model/Cell>} cell 
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DashboardsApi~putDashboardsIDCells_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    putDashboardsIDCells_0(dashboardID, cell, opts, callback) {
      opts = opts || {};
      let postBody = cell;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling putDashboardsIDCells_0");
      }
      // verify the required parameter 'cell' is set
      if (cell === undefined || cell === null) {
        throw new Error("Missing the required parameter 'cell' when calling putDashboardsIDCells_0");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
