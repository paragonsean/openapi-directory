/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ASTResponse from '../model/ASTResponse';
import AnalyzeQueryResponse from '../model/AnalyzeQueryResponse';
import Error from '../model/Error';
import FluxSuggestion from '../model/FluxSuggestion';
import FluxSuggestions from '../model/FluxSuggestions';
import LanguageRequest from '../model/LanguageRequest';
import PostQueryRequest from '../model/PostQueryRequest';
import Query from '../model/Query';

/**
* Query service.
* @module api/QueryApi
* @version 2.0.0
*/
export default class QueryApi {

    /**
    * Constructs a new QueryApi. 
    * @alias module:api/QueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getQuerySuggestions operation.
     * @callback module:api/QueryApi~getQuerySuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FluxSuggestions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve query suggestions
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/QueryApi~getQuerySuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FluxSuggestions}
     */
    getQuerySuggestions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FluxSuggestions;
      return this.apiClient.callApi(
        '/query/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuerySuggestionsName operation.
     * @callback module:api/QueryApi~getQuerySuggestionsNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FluxSuggestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve query suggestions for a branching suggestion
     * @param {String} name The name of the branching suggestion.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/QueryApi~getQuerySuggestionsNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FluxSuggestion}
     */
    getQuerySuggestionsName(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getQuerySuggestionsName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FluxSuggestion;
      return this.apiClient.callApi(
        '/query/suggestions/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postQuery operation.
     * @callback module:api/QueryApi~postQueryCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query InfluxDB
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:model/String} [acceptEncoding = 'identity')] The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, the client is able to understand.
     * @param {module:model/String} [contentType] 
     * @param {String} [org] Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.
     * @param {String} [orgID] Specifies the ID of the organization executing the query. If both `orgID` and `org` are specified, `org` takes precedence.
     * @param {module:model/PostQueryRequest} [postQueryRequest] Flux query or specification to execute
     * @param {module:api/QueryApi~postQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    postQuery(opts, callback) {
      opts = opts || {};
      let postBody = opts['postQueryRequest'];

      let pathParams = {
      };
      let queryParams = {
        'org': opts['org'],
        'orgID': opts['orgID']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan'],
        'Accept-Encoding': opts['acceptEncoding'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/vnd.flux'];
      let accepts = ['application/vnd.influx.arrow', 'text/csv', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postQueryAnalyze operation.
     * @callback module:api/QueryApi~postQueryAnalyzeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyzeQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze an InfluxQL or Flux query
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:model/String} [contentType] 
     * @param {module:model/Query} [query] Flux or InfluxQL query to analyze
     * @param {module:api/QueryApi~postQueryAnalyzeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyzeQueryResponse}
     */
    postQueryAnalyze(opts, callback) {
      opts = opts || {};
      let postBody = opts['query'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalyzeQueryResponse;
      return this.apiClient.callApi(
        '/query/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postQueryAst operation.
     * @callback module:api/QueryApi~postQueryAstCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASTResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate an Abstract Syntax Tree (AST) from a query
     * Analyzes flux query and generates a query specification.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:model/String} [contentType] 
     * @param {module:model/LanguageRequest} [languageRequest] Analyzed Flux query to generate abstract syntax tree.
     * @param {module:api/QueryApi~postQueryAstCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASTResponse}
     */
    postQueryAst(opts, callback) {
      opts = opts || {};
      let postBody = opts['languageRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ASTResponse;
      return this.apiClient.callApi(
        '/query/ast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
