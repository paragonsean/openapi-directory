/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import NotificationRule from '../model/NotificationRule';
import NotificationRuleDiscriminator from '../model/NotificationRuleDiscriminator';
import NotificationRuleUpdate from '../model/NotificationRuleUpdate';
import NotificationRules from '../model/NotificationRules';
import PostNotificationRule from '../model/PostNotificationRule';

/**
* NotificationRules service.
* @module api/NotificationRulesApi
* @version 2.0.0
*/
export default class NotificationRulesApi {

    /**
    * Constructs a new NotificationRulesApi. 
    * @alias module:api/NotificationRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNotificationRule operation.
     * @callback module:api/NotificationRulesApi~createNotificationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a notification rule
     * @param {module:model/PostNotificationRule} postNotificationRule Notification rule to create
     * @param {module:api/NotificationRulesApi~createNotificationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationRule}
     */
    createNotificationRule(postNotificationRule, callback) {
      let postBody = postNotificationRule;
      // verify the required parameter 'postNotificationRule' is set
      if (postNotificationRule === undefined || postNotificationRule === null) {
        throw new Error("Missing the required parameter 'postNotificationRule' when calling createNotificationRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationRule;
      return this.apiClient.callApi(
        '/notificationRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationRulesID operation.
     * @callback module:api/NotificationRulesApi~deleteNotificationRulesIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification rule
     * @param {String} ruleID The notification rule ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationRulesApi~deleteNotificationRulesIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNotificationRulesID(ruleID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling deleteNotificationRulesID");
      }

      let pathParams = {
        'ruleID': ruleID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationRules/{ruleID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationRulesIDLabelsID operation.
     * @callback module:api/NotificationRulesApi~deleteNotificationRulesIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete label from a notification rule
     * @param {String} ruleID The notification rule ID.
     * @param {String} labelID The ID of the label to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationRulesApi~deleteNotificationRulesIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNotificationRulesIDLabelsID(ruleID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling deleteNotificationRulesIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteNotificationRulesIDLabelsID");
      }

      let pathParams = {
        'ruleID': ruleID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationRules/{ruleID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationRules operation.
     * @callback module:api/NotificationRulesApi~getNotificationRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationRules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all notification rules
     * @param {String} orgID Only show notification rules that belong to a specific organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {Number} [offset] 
     * @param {Number} [limit = 20)] 
     * @param {String} [checkID] Only show notifications that belong to the specific check ID.
     * @param {String} [tag] Only return notification rules that \"would match\" statuses which contain the tag key value pairs provided.
     * @param {module:api/NotificationRulesApi~getNotificationRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationRules}
     */
    getNotificationRules(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getNotificationRules");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'orgID': orgID,
        'checkID': opts['checkID'],
        'tag': opts['tag']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationRules;
      return this.apiClient.callApi(
        '/notificationRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationRulesID operation.
     * @callback module:api/NotificationRulesApi~getNotificationRulesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a notification rule
     * @param {String} ruleID The notification rule ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationRulesApi~getNotificationRulesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationRule}
     */
    getNotificationRulesID(ruleID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling getNotificationRulesID");
      }

      let pathParams = {
        'ruleID': ruleID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationRule;
      return this.apiClient.callApi(
        '/notificationRules/{ruleID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationRulesIDLabels operation.
     * @callback module:api/NotificationRulesApi~getNotificationRulesIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a notification rule
     * @param {String} ruleID The notification rule ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationRulesApi~getNotificationRulesIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getNotificationRulesIDLabels(ruleID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling getNotificationRulesIDLabels");
      }

      let pathParams = {
        'ruleID': ruleID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/notificationRules/{ruleID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNotificationRulesID operation.
     * @callback module:api/NotificationRulesApi~patchNotificationRulesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a notification rule
     * @param {String} ruleID The notification rule ID.
     * @param {module:model/NotificationRuleUpdate} notificationRuleUpdate Notification rule update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationRulesApi~patchNotificationRulesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationRule}
     */
    patchNotificationRulesID(ruleID, notificationRuleUpdate, opts, callback) {
      opts = opts || {};
      let postBody = notificationRuleUpdate;
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling patchNotificationRulesID");
      }
      // verify the required parameter 'notificationRuleUpdate' is set
      if (notificationRuleUpdate === undefined || notificationRuleUpdate === null) {
        throw new Error("Missing the required parameter 'notificationRuleUpdate' when calling patchNotificationRulesID");
      }

      let pathParams = {
        'ruleID': ruleID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationRule;
      return this.apiClient.callApi(
        '/notificationRules/{ruleID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNotificationRuleIDLabels operation.
     * @callback module:api/NotificationRulesApi~postNotificationRuleIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a notification rule
     * @param {String} ruleID The notification rule ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationRulesApi~postNotificationRuleIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postNotificationRuleIDLabels(ruleID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling postNotificationRuleIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postNotificationRuleIDLabels");
      }

      let pathParams = {
        'ruleID': ruleID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/notificationRules/{ruleID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putNotificationRulesID operation.
     * @callback module:api/NotificationRulesApi~putNotificationRulesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a notification rule
     * @param {String} ruleID The notification rule ID.
     * @param {module:model/NotificationRule} notificationRule Notification rule update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/NotificationRulesApi~putNotificationRulesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationRule}
     */
    putNotificationRulesID(ruleID, notificationRule, opts, callback) {
      opts = opts || {};
      let postBody = notificationRule;
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling putNotificationRulesID");
      }
      // verify the required parameter 'notificationRule' is set
      if (notificationRule === undefined || notificationRule === null) {
        throw new Error("Missing the required parameter 'notificationRule' when calling putNotificationRulesID");
      }

      let pathParams = {
        'ruleID': ruleID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationRule;
      return this.apiClient.callApi(
        '/notificationRules/{ruleID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
