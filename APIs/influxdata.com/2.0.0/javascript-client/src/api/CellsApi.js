/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cell from '../model/Cell';
import CellUpdate from '../model/CellUpdate';
import CreateCell from '../model/CreateCell';
import Dashboard from '../model/Dashboard';
import Error from '../model/Error';
import View from '../model/View';

/**
* Cells service.
* @module api/CellsApi
* @version 2.0.0
*/
export default class CellsApi {

    /**
    * Constructs a new CellsApi. 
    * @alias module:api/CellsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDashboardsIDCellsID operation.
     * @callback module:api/CellsApi~deleteDashboardsIDCellsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dashboard cell
     * @param {String} dashboardID The ID of the dashboard to delete.
     * @param {String} cellID The ID of the cell to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/CellsApi~deleteDashboardsIDCellsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboardsIDCellsID(dashboardID, cellID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling deleteDashboardsIDCellsID");
      }
      // verify the required parameter 'cellID' is set
      if (cellID === undefined || cellID === null) {
        throw new Error("Missing the required parameter 'cellID' when calling deleteDashboardsIDCellsID");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'cellID': cellID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells/{cellID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardsIDCellsIDView operation.
     * @callback module:api/CellsApi~getDashboardsIDCellsIDViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the view for a cell
     * @param {String} dashboardID The dashboard ID.
     * @param {String} cellID The cell ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/CellsApi~getDashboardsIDCellsIDViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    getDashboardsIDCellsIDView(dashboardID, cellID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling getDashboardsIDCellsIDView");
      }
      // verify the required parameter 'cellID' is set
      if (cellID === undefined || cellID === null) {
        throw new Error("Missing the required parameter 'cellID' when calling getDashboardsIDCellsIDView");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'cellID': cellID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells/{cellID}/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDashboardsIDCellsID operation.
     * @callback module:api/CellsApi~patchDashboardsIDCellsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cell} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the non-positional information related to a cell
     * Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {String} cellID The ID of the cell to update.
     * @param {module:model/CellUpdate} cellUpdate 
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/CellsApi~patchDashboardsIDCellsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cell}
     */
    patchDashboardsIDCellsID(dashboardID, cellID, cellUpdate, opts, callback) {
      opts = opts || {};
      let postBody = cellUpdate;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsID");
      }
      // verify the required parameter 'cellID' is set
      if (cellID === undefined || cellID === null) {
        throw new Error("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsID");
      }
      // verify the required parameter 'cellUpdate' is set
      if (cellUpdate === undefined || cellUpdate === null) {
        throw new Error("Missing the required parameter 'cellUpdate' when calling patchDashboardsIDCellsID");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'cellID': cellID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cell;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells/{cellID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDashboardsIDCellsIDView operation.
     * @callback module:api/CellsApi~patchDashboardsIDCellsIDViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the view for a cell
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {String} cellID The ID of the cell to update.
     * @param {module:model/View} view 
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/CellsApi~patchDashboardsIDCellsIDViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    patchDashboardsIDCellsIDView(dashboardID, cellID, view, opts, callback) {
      opts = opts || {};
      let postBody = view;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling patchDashboardsIDCellsIDView");
      }
      // verify the required parameter 'cellID' is set
      if (cellID === undefined || cellID === null) {
        throw new Error("Missing the required parameter 'cellID' when calling patchDashboardsIDCellsIDView");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling patchDashboardsIDCellsIDView");
      }

      let pathParams = {
        'dashboardID': dashboardID,
        'cellID': cellID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells/{cellID}/view', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDashboardsIDCells operation.
     * @callback module:api/CellsApi~postDashboardsIDCellsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cell} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dashboard cell
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {module:model/CreateCell} createCell Cell that will be added
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/CellsApi~postDashboardsIDCellsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cell}
     */
    postDashboardsIDCells(dashboardID, createCell, opts, callback) {
      opts = opts || {};
      let postBody = createCell;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling postDashboardsIDCells");
      }
      // verify the required parameter 'createCell' is set
      if (createCell === undefined || createCell === null) {
        throw new Error("Missing the required parameter 'createCell' when calling postDashboardsIDCells");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cell;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDashboardsIDCells operation.
     * @callback module:api/CellsApi~putDashboardsIDCellsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace cells in a dashboard
     * Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
     * @param {String} dashboardID The ID of the dashboard to update.
     * @param {Array.<module:model/Cell>} cell 
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/CellsApi~putDashboardsIDCellsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    putDashboardsIDCells(dashboardID, cell, opts, callback) {
      opts = opts || {};
      let postBody = cell;
      // verify the required parameter 'dashboardID' is set
      if (dashboardID === undefined || dashboardID === null) {
        throw new Error("Missing the required parameter 'dashboardID' when calling putDashboardsIDCells");
      }
      // verify the required parameter 'cell' is set
      if (cell === undefined || cell === null) {
        throw new Error("Missing the required parameter 'cell' when calling putDashboardsIDCells");
      }

      let pathParams = {
        'dashboardID': dashboardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/dashboards/{dashboardID}/cells', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
