/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DBRP from '../model/DBRP';
import DBRPUpdate from '../model/DBRPUpdate';
import DBRPs from '../model/DBRPs';
import Error from '../model/Error';

/**
* DBRPs service.
* @module api/DBRPsApi
* @version 2.0.0
*/
export default class DBRPsApi {

    /**
    * Constructs a new DBRPsApi. 
    * @alias module:api/DBRPsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDBRPID operation.
     * @callback module:api/DBRPsApi~deleteDBRPIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a database retention policy
     * @param {String} orgID Specifies the organization ID of the mapping
     * @param {String} dbrpID The database retention policy mapping
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DBRPsApi~deleteDBRPIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDBRPID(orgID, dbrpID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling deleteDBRPID");
      }
      // verify the required parameter 'dbrpID' is set
      if (dbrpID === undefined || dbrpID === null) {
        throw new Error("Missing the required parameter 'dbrpID' when calling deleteDBRPID");
      }

      let pathParams = {
        'dbrpID': dbrpID
      };
      let queryParams = {
        'orgID': orgID
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dbrps/{dbrpID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDBRPs operation.
     * @callback module:api/DBRPsApi~getDBRPsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBRPs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all database retention policy mappings
     * @param {String} orgID Specifies the organization ID to filter on
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [id] Specifies the mapping ID to filter on
     * @param {String} [bucketID] Specifies the bucket ID to filter on
     * @param {Boolean} [_default] Specifies filtering on default
     * @param {String} [db] Specifies the database to filter on
     * @param {String} [rp] Specifies the retention policy to filter on
     * @param {module:api/DBRPsApi~getDBRPsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBRPs}
     */
    getDBRPs(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getDBRPs");
      }

      let pathParams = {
      };
      let queryParams = {
        'orgID': orgID,
        'id': opts['id'],
        'bucketID': opts['bucketID'],
        'default': opts['_default'],
        'db': opts['db'],
        'rp': opts['rp']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DBRPs;
      return this.apiClient.callApi(
        '/dbrps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDBRPsID operation.
     * @callback module:api/DBRPsApi~getDBRPsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBRP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a database retention policy mapping
     * @param {String} orgID Specifies the organization ID of the mapping
     * @param {String} dbrpID The database retention policy mapping ID
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DBRPsApi~getDBRPsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBRP}
     */
    getDBRPsID(orgID, dbrpID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getDBRPsID");
      }
      // verify the required parameter 'dbrpID' is set
      if (dbrpID === undefined || dbrpID === null) {
        throw new Error("Missing the required parameter 'dbrpID' when calling getDBRPsID");
      }

      let pathParams = {
        'dbrpID': dbrpID
      };
      let queryParams = {
        'orgID': orgID
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DBRP;
      return this.apiClient.callApi(
        '/dbrps/{dbrpID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDBRPID operation.
     * @callback module:api/DBRPsApi~patchDBRPIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBRP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a database retention policy mapping
     * @param {String} orgID Specifies the organization ID of the mapping
     * @param {String} dbrpID The database retention policy mapping.
     * @param {module:model/DBRPUpdate} dBRPUpdate Database retention policy update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DBRPsApi~patchDBRPIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBRP}
     */
    patchDBRPID(orgID, dbrpID, dBRPUpdate, opts, callback) {
      opts = opts || {};
      let postBody = dBRPUpdate;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling patchDBRPID");
      }
      // verify the required parameter 'dbrpID' is set
      if (dbrpID === undefined || dbrpID === null) {
        throw new Error("Missing the required parameter 'dbrpID' when calling patchDBRPID");
      }
      // verify the required parameter 'dBRPUpdate' is set
      if (dBRPUpdate === undefined || dBRPUpdate === null) {
        throw new Error("Missing the required parameter 'dBRPUpdate' when calling patchDBRPID");
      }

      let pathParams = {
        'dbrpID': dbrpID
      };
      let queryParams = {
        'orgID': orgID
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DBRP;
      return this.apiClient.callApi(
        '/dbrps/{dbrpID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDBRP operation.
     * @callback module:api/DBRPsApi~postDBRPCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBRP} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a database retention policy mapping
     * @param {module:model/DBRP} DBRP The database retention policy mapping to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/DBRPsApi~postDBRPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBRP}
     */
    postDBRP(DBRP, opts, callback) {
      opts = opts || {};
      let postBody = DBRP;
      // verify the required parameter 'DBRP' is set
      if (DBRP === undefined || DBRP === null) {
        throw new Error("Missing the required parameter 'DBRP' when calling postDBRP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DBRP;
      return this.apiClient.callApi(
        '/dbrps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
