/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import Variable from '../model/Variable';
import Variables from '../model/Variables';

/**
* Variables service.
* @module api/VariablesApi
* @version 2.0.0
*/
export default class VariablesApi {

    /**
    * Constructs a new VariablesApi. 
    * @alias module:api/VariablesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteVariablesID operation.
     * @callback module:api/VariablesApi~deleteVariablesIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a variable
     * @param {String} variableID The variable ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/VariablesApi~deleteVariablesIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariablesID(variableID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variableID' is set
      if (variableID === undefined || variableID === null) {
        throw new Error("Missing the required parameter 'variableID' when calling deleteVariablesID");
      }

      let pathParams = {
        'variableID': variableID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/variables/{variableID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariablesIDLabelsID operation.
     * @callback module:api/VariablesApi~deleteVariablesIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label from a variable
     * @param {String} variableID The variable ID.
     * @param {String} labelID The label ID to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/VariablesApi~deleteVariablesIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariablesIDLabelsID(variableID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variableID' is set
      if (variableID === undefined || variableID === null) {
        throw new Error("Missing the required parameter 'variableID' when calling deleteVariablesIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteVariablesIDLabelsID");
      }

      let pathParams = {
        'variableID': variableID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/variables/{variableID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariables operation.
     * @callback module:api/VariablesApi~getVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all variables
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [org] The name of the organization.
     * @param {String} [orgID] The organization ID.
     * @param {module:api/VariablesApi~getVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variables}
     */
    getVariables(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'org': opts['org'],
        'orgID': opts['orgID']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Variables;
      return this.apiClient.callApi(
        '/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariablesID operation.
     * @callback module:api/VariablesApi~getVariablesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a variable
     * @param {String} variableID The variable ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/VariablesApi~getVariablesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    getVariablesID(variableID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variableID' is set
      if (variableID === undefined || variableID === null) {
        throw new Error("Missing the required parameter 'variableID' when calling getVariablesID");
      }

      let pathParams = {
        'variableID': variableID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/variables/{variableID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariablesIDLabels operation.
     * @callback module:api/VariablesApi~getVariablesIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a variable
     * @param {String} variableID The variable ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/VariablesApi~getVariablesIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getVariablesIDLabels(variableID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variableID' is set
      if (variableID === undefined || variableID === null) {
        throw new Error("Missing the required parameter 'variableID' when calling getVariablesIDLabels");
      }

      let pathParams = {
        'variableID': variableID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/variables/{variableID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchVariablesID operation.
     * @callback module:api/VariablesApi~patchVariablesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a variable
     * @param {String} variableID The variable ID.
     * @param {module:model/Variable} variable Variable update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/VariablesApi~patchVariablesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    patchVariablesID(variableID, variable, opts, callback) {
      opts = opts || {};
      let postBody = variable;
      // verify the required parameter 'variableID' is set
      if (variableID === undefined || variableID === null) {
        throw new Error("Missing the required parameter 'variableID' when calling patchVariablesID");
      }
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling patchVariablesID");
      }

      let pathParams = {
        'variableID': variableID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/variables/{variableID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVariables operation.
     * @callback module:api/VariablesApi~postVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a variable
     * @param {module:model/Variable} variable Variable to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/VariablesApi~postVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    postVariables(variable, opts, callback) {
      opts = opts || {};
      let postBody = variable;
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling postVariables");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVariablesIDLabels operation.
     * @callback module:api/VariablesApi~postVariablesIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a variable
     * @param {String} variableID The variable ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/VariablesApi~postVariablesIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postVariablesIDLabels(variableID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'variableID' is set
      if (variableID === undefined || variableID === null) {
        throw new Error("Missing the required parameter 'variableID' when calling postVariablesIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postVariablesIDLabels");
      }

      let pathParams = {
        'variableID': variableID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/variables/{variableID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putVariablesID operation.
     * @callback module:api/VariablesApi~putVariablesIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a variable
     * @param {String} variableID The variable ID.
     * @param {module:model/Variable} variable Variable to replace
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/VariablesApi~putVariablesIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    putVariablesID(variableID, variable, opts, callback) {
      opts = opts || {};
      let postBody = variable;
      // verify the required parameter 'variableID' is set
      if (variableID === undefined || variableID === null) {
        throw new Error("Missing the required parameter 'variableID' when calling putVariablesID");
      }
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling putVariablesID");
      }

      let pathParams = {
        'variableID': variableID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/variables/{variableID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
