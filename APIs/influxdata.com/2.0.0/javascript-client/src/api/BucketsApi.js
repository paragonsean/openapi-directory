/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddResourceMemberRequestBody from '../model/AddResourceMemberRequestBody';
import Bucket from '../model/Bucket';
import Buckets from '../model/Buckets';
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import PatchBucketRequest from '../model/PatchBucketRequest';
import PostBucketRequest from '../model/PostBucketRequest';
import ResourceMember from '../model/ResourceMember';
import ResourceMembers from '../model/ResourceMembers';
import ResourceOwner from '../model/ResourceOwner';
import ResourceOwners from '../model/ResourceOwners';

/**
* Buckets service.
* @module api/BucketsApi
* @version 2.0.0
*/
export default class BucketsApi {

    /**
    * Constructs a new BucketsApi. 
    * @alias module:api/BucketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteBucketsID operation.
     * @callback module:api/BucketsApi~deleteBucketsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a bucket
     * @param {String} bucketID The ID of the bucket to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~deleteBucketsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBucketsID(bucketID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling deleteBucketsID");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBucketsIDLabelsID operation.
     * @callback module:api/BucketsApi~deleteBucketsIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label from a bucket
     * @param {String} bucketID The bucket ID.
     * @param {String} labelID The ID of the label to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~deleteBucketsIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBucketsIDLabelsID(bucketID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling deleteBucketsIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteBucketsIDLabelsID");
      }

      let pathParams = {
        'bucketID': bucketID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBucketsIDMembersID operation.
     * @callback module:api/BucketsApi~deleteBucketsIDMembersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a member from a bucket
     * @param {String} userID The ID of the member to remove.
     * @param {String} bucketID The bucket ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~deleteBucketsIDMembersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBucketsIDMembersID(userID, bucketID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteBucketsIDMembersID");
      }
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling deleteBucketsIDMembersID");
      }

      let pathParams = {
        'userID': userID,
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/members/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBucketsIDOwnersID operation.
     * @callback module:api/BucketsApi~deleteBucketsIDOwnersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an owner from a bucket
     * @param {String} userID The ID of the owner to remove.
     * @param {String} bucketID The bucket ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~deleteBucketsIDOwnersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBucketsIDOwnersID(userID, bucketID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteBucketsIDOwnersID");
      }
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling deleteBucketsIDOwnersID");
      }

      let pathParams = {
        'userID': userID,
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/owners/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuckets operation.
     * @callback module:api/BucketsApi~getBucketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Buckets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all buckets
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {Number} [offset] 
     * @param {Number} [limit = 20)] 
     * @param {String} [after] The last resource ID from which to seek from (but not including). This is to be used instead of `offset`. 
     * @param {String} [org] The name of the organization.
     * @param {String} [orgID] The organization ID.
     * @param {String} [name] Only returns buckets with a specific name.
     * @param {String} [id] Only returns buckets with a specific ID.
     * @param {module:api/BucketsApi~getBucketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Buckets}
     */
    getBuckets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'after': opts['after'],
        'org': opts['org'],
        'orgID': opts['orgID'],
        'name': opts['name'],
        'id': opts['id']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Buckets;
      return this.apiClient.callApi(
        '/buckets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBucketsID operation.
     * @callback module:api/BucketsApi~getBucketsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bucket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a bucket
     * @param {String} bucketID The bucket ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~getBucketsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bucket}
     */
    getBucketsID(bucketID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling getBucketsID");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bucket;
      return this.apiClient.callApi(
        '/buckets/{bucketID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBucketsIDLabels operation.
     * @callback module:api/BucketsApi~getBucketsIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a bucket
     * @param {String} bucketID The bucket ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~getBucketsIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getBucketsIDLabels(bucketID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling getBucketsIDLabels");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBucketsIDMembers operation.
     * @callback module:api/BucketsApi~getBucketsIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users with member privileges for a bucket
     * @param {String} bucketID The bucket ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~getBucketsIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMembers}
     */
    getBucketsIDMembers(bucketID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling getBucketsIDMembers");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMembers;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBucketsIDOwners operation.
     * @callback module:api/BucketsApi~getBucketsIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwners} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all owners of a bucket
     * @param {String} bucketID The bucket ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~getBucketsIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwners}
     */
    getBucketsIDOwners(bucketID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling getBucketsIDOwners");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOwners;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/owners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourcesIDBuckets_0 operation.
     * @callback module:api/BucketsApi~getSourcesIDBuckets_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Buckets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get buckets in a source
     * @param {String} sourceID The source ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [org] The name of the organization.
     * @param {module:api/BucketsApi~getSourcesIDBuckets_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Buckets}
     */
    getSourcesIDBuckets_0(sourceID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceID' is set
      if (sourceID === undefined || sourceID === null) {
        throw new Error("Missing the required parameter 'sourceID' when calling getSourcesIDBuckets_0");
      }

      let pathParams = {
        'sourceID': sourceID
      };
      let queryParams = {
        'org': opts['org']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Buckets;
      return this.apiClient.callApi(
        '/sources/{sourceID}/buckets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBucketsID operation.
     * @callback module:api/BucketsApi~patchBucketsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bucket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a bucket
     * @param {String} bucketID The bucket ID.
     * @param {module:model/PatchBucketRequest} patchBucketRequest Bucket update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~patchBucketsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bucket}
     */
    patchBucketsID(bucketID, patchBucketRequest, opts, callback) {
      opts = opts || {};
      let postBody = patchBucketRequest;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling patchBucketsID");
      }
      // verify the required parameter 'patchBucketRequest' is set
      if (patchBucketRequest === undefined || patchBucketRequest === null) {
        throw new Error("Missing the required parameter 'patchBucketRequest' when calling patchBucketsID");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bucket;
      return this.apiClient.callApi(
        '/buckets/{bucketID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBuckets operation.
     * @callback module:api/BucketsApi~postBucketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bucket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bucket
     * @param {module:model/PostBucketRequest} postBucketRequest Bucket to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~postBucketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bucket}
     */
    postBuckets(postBucketRequest, opts, callback) {
      opts = opts || {};
      let postBody = postBucketRequest;
      // verify the required parameter 'postBucketRequest' is set
      if (postBucketRequest === undefined || postBucketRequest === null) {
        throw new Error("Missing the required parameter 'postBucketRequest' when calling postBuckets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bucket;
      return this.apiClient.callApi(
        '/buckets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBucketsIDLabels operation.
     * @callback module:api/BucketsApi~postBucketsIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a bucket
     * @param {String} bucketID The bucket ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~postBucketsIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postBucketsIDLabels(bucketID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling postBucketsIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postBucketsIDLabels");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBucketsIDMembers operation.
     * @callback module:api/BucketsApi~postBucketsIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a member to a bucket
     * @param {String} bucketID The bucket ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as member
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~postBucketsIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMember}
     */
    postBucketsIDMembers(bucketID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling postBucketsIDMembers");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postBucketsIDMembers");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceMember;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBucketsIDOwners operation.
     * @callback module:api/BucketsApi~postBucketsIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an owner to a bucket
     * @param {String} bucketID The bucket ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as owner
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/BucketsApi~postBucketsIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwner}
     */
    postBucketsIDOwners(bucketID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'bucketID' is set
      if (bucketID === undefined || bucketID === null) {
        throw new Error("Missing the required parameter 'bucketID' when calling postBucketsIDOwners");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postBucketsIDOwners");
      }

      let pathParams = {
        'bucketID': bucketID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceOwner;
      return this.apiClient.callApi(
        '/buckets/{bucketID}/owners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
