/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddResourceMemberRequestBody from '../model/AddResourceMemberRequestBody';
import Error from '../model/Error';
import Organization from '../model/Organization';
import Organizations from '../model/Organizations';
import PatchOrganizationRequest from '../model/PatchOrganizationRequest';
import PostOrganizationRequest from '../model/PostOrganizationRequest';
import ResourceMember from '../model/ResourceMember';
import ResourceMembers from '../model/ResourceMembers';
import ResourceOwner from '../model/ResourceOwner';
import ResourceOwners from '../model/ResourceOwners';
import SecretKeys from '../model/SecretKeys';
import SecretKeysResponse from '../model/SecretKeysResponse';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version 2.0.0
*/
export default class OrganizationsApi {

    /**
    * Constructs a new OrganizationsApi. 
    * @alias module:api/OrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteOrgsID operation.
     * @callback module:api/OrganizationsApi~deleteOrgsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization
     * @param {String} orgID The ID of the organization to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~deleteOrgsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrgsID(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling deleteOrgsID");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{orgID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrgsIDMembersID operation.
     * @callback module:api/OrganizationsApi~deleteOrgsIDMembersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a member from an organization
     * @param {String} userID The ID of the member to remove.
     * @param {String} orgID The organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~deleteOrgsIDMembersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrgsIDMembersID(userID, orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteOrgsIDMembersID");
      }
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling deleteOrgsIDMembersID");
      }

      let pathParams = {
        'userID': userID,
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{orgID}/members/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrgsIDOwnersID operation.
     * @callback module:api/OrganizationsApi~deleteOrgsIDOwnersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an owner from an organization
     * @param {String} userID The ID of the owner to remove.
     * @param {String} orgID The organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~deleteOrgsIDOwnersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrgsIDOwnersID(userID, orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteOrgsIDOwnersID");
      }
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling deleteOrgsIDOwnersID");
      }

      let pathParams = {
        'userID': userID,
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{orgID}/owners/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrgs operation.
     * @callback module:api/OrganizationsApi~getOrgsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all organizations
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {Number} [offset] 
     * @param {Number} [limit = 20)] 
     * @param {Boolean} [descending = false)] 
     * @param {String} [org] Filter organizations to a specific organization name.
     * @param {String} [orgID] Filter organizations to a specific organization ID.
     * @param {String} [userID] Filter organizations to a specific user ID.
     * @param {module:api/OrganizationsApi~getOrgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organizations}
     */
    getOrgs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'descending': opts['descending'],
        'org': opts['org'],
        'orgID': opts['orgID'],
        'userID': opts['userID']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organizations;
      return this.apiClient.callApi(
        '/orgs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrgsID operation.
     * @callback module:api/OrganizationsApi~getOrgsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an organization
     * @param {String} orgID The ID of the organization to get.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~getOrgsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    getOrgsID(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getOrgsID");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/orgs/{orgID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrgsIDMembers operation.
     * @callback module:api/OrganizationsApi~getOrgsIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all members of an organization
     * @param {String} orgID The organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~getOrgsIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMembers}
     */
    getOrgsIDMembers(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getOrgsIDMembers");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMembers;
      return this.apiClient.callApi(
        '/orgs/{orgID}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrgsIDOwners operation.
     * @callback module:api/OrganizationsApi~getOrgsIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwners} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all owners of an organization
     * @param {String} orgID The organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~getOrgsIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwners}
     */
    getOrgsIDOwners(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getOrgsIDOwners");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOwners;
      return this.apiClient.callApi(
        '/orgs/{orgID}/owners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrgsIDSecrets_0 operation.
     * @callback module:api/OrganizationsApi~getOrgsIDSecrets_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all secret keys for an organization
     * @param {String} orgID The organization ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~getOrgsIDSecrets_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretKeysResponse}
     */
    getOrgsIDSecrets_0(orgID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling getOrgsIDSecrets_0");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretKeysResponse;
      return this.apiClient.callApi(
        '/orgs/{orgID}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOrgsID operation.
     * @callback module:api/OrganizationsApi~patchOrgsIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization
     * @param {String} orgID The ID of the organization to get.
     * @param {module:model/PatchOrganizationRequest} patchOrganizationRequest Organization update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~patchOrgsIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    patchOrgsID(orgID, patchOrganizationRequest, opts, callback) {
      opts = opts || {};
      let postBody = patchOrganizationRequest;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling patchOrgsID");
      }
      // verify the required parameter 'patchOrganizationRequest' is set
      if (patchOrganizationRequest === undefined || patchOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'patchOrganizationRequest' when calling patchOrgsID");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/orgs/{orgID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOrgsIDSecrets_0 operation.
     * @callback module:api/OrganizationsApi~patchOrgsIDSecrets_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update secrets in an organization
     * @param {String} orgID The organization ID.
     * @param {Object.<String, {String: String}>} requestBody Secret key value pairs to update/add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~patchOrgsIDSecrets_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    patchOrgsIDSecrets_0(orgID, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling patchOrgsIDSecrets_0");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling patchOrgsIDSecrets_0");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{orgID}/secrets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrgs operation.
     * @callback module:api/OrganizationsApi~postOrgsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization
     * @param {module:model/PostOrganizationRequest} postOrganizationRequest Organization to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~postOrgsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    postOrgs(postOrganizationRequest, opts, callback) {
      opts = opts || {};
      let postBody = postOrganizationRequest;
      // verify the required parameter 'postOrganizationRequest' is set
      if (postOrganizationRequest === undefined || postOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'postOrganizationRequest' when calling postOrgs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/orgs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrgsIDMembers operation.
     * @callback module:api/OrganizationsApi~postOrgsIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a member to an organization
     * @param {String} orgID The organization ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as member
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~postOrgsIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMember}
     */
    postOrgsIDMembers(orgID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling postOrgsIDMembers");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postOrgsIDMembers");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceMember;
      return this.apiClient.callApi(
        '/orgs/{orgID}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrgsIDOwners operation.
     * @callback module:api/OrganizationsApi~postOrgsIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an owner to an organization
     * @param {String} orgID The organization ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as owner
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~postOrgsIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwner}
     */
    postOrgsIDOwners(orgID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling postOrgsIDOwners");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postOrgsIDOwners");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceOwner;
      return this.apiClient.callApi(
        '/orgs/{orgID}/owners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrgsIDSecrets_0 operation.
     * @callback module:api/OrganizationsApi~postOrgsIDSecrets_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete secrets from an organization
     * @param {String} orgID The organization ID.
     * @param {module:model/SecretKeys} secretKeys Secret key to delete
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/OrganizationsApi~postOrgsIDSecrets_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postOrgsIDSecrets_0(orgID, secretKeys, opts, callback) {
      opts = opts || {};
      let postBody = secretKeys;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling postOrgsIDSecrets_0");
      }
      // verify the required parameter 'secretKeys' is set
      if (secretKeys === undefined || secretKeys === null) {
        throw new Error("Missing the required parameter 'secretKeys' when calling postOrgsIDSecrets_0");
      }

      let pathParams = {
        'orgID': orgID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{orgID}/secrets/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
