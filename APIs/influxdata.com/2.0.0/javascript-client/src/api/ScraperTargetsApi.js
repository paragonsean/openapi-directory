/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddResourceMemberRequestBody from '../model/AddResourceMemberRequestBody';
import Error from '../model/Error';
import LabelMapping from '../model/LabelMapping';
import LabelResponse from '../model/LabelResponse';
import LabelsResponse from '../model/LabelsResponse';
import ResourceMember from '../model/ResourceMember';
import ResourceMembers from '../model/ResourceMembers';
import ResourceOwner from '../model/ResourceOwner';
import ResourceOwners from '../model/ResourceOwners';
import ScraperTargetRequest from '../model/ScraperTargetRequest';
import ScraperTargetResponse from '../model/ScraperTargetResponse';
import ScraperTargetResponses from '../model/ScraperTargetResponses';

/**
* ScraperTargets service.
* @module api/ScraperTargetsApi
* @version 2.0.0
*/
export default class ScraperTargetsApi {

    /**
    * Constructs a new ScraperTargetsApi. 
    * @alias module:api/ScraperTargetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteScrapersID operation.
     * @callback module:api/ScraperTargetsApi~deleteScrapersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scraper target
     * @param {String} scraperTargetID The identifier of the scraper target.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~deleteScrapersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScrapersID(scraperTargetID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling deleteScrapersID");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScrapersIDLabelsID operation.
     * @callback module:api/ScraperTargetsApi~deleteScrapersIDLabelsIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label from a scraper target
     * @param {String} scraperTargetID The scraper target ID.
     * @param {String} labelID The label ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~deleteScrapersIDLabelsIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScrapersIDLabelsID(scraperTargetID, labelID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling deleteScrapersIDLabelsID");
      }
      // verify the required parameter 'labelID' is set
      if (labelID === undefined || labelID === null) {
        throw new Error("Missing the required parameter 'labelID' when calling deleteScrapersIDLabelsID");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID,
        'labelID': labelID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/labels/{labelID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScrapersIDMembersID operation.
     * @callback module:api/ScraperTargetsApi~deleteScrapersIDMembersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a member from a scraper target
     * @param {String} userID The ID of member to remove.
     * @param {String} scraperTargetID The scraper target ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~deleteScrapersIDMembersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScrapersIDMembersID(userID, scraperTargetID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteScrapersIDMembersID");
      }
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling deleteScrapersIDMembersID");
      }

      let pathParams = {
        'userID': userID,
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/members/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScrapersIDOwnersID operation.
     * @callback module:api/ScraperTargetsApi~deleteScrapersIDOwnersIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an owner from a scraper target
     * @param {String} userID The ID of owner to remove.
     * @param {String} scraperTargetID The scraper target ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~deleteScrapersIDOwnersIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScrapersIDOwnersID(userID, scraperTargetID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteScrapersIDOwnersID");
      }
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling deleteScrapersIDOwnersID");
      }

      let pathParams = {
        'userID': userID,
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/owners/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScrapers operation.
     * @callback module:api/ScraperTargetsApi~getScrapersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScraperTargetResponses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all scraper targets
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {String} [name] Specifies the name of the scraper target.
     * @param {Array.<String>} [id] List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.
     * @param {String} [orgID] Specifies the organization ID of the scraper target.
     * @param {String} [org] Specifies the organization name of the scraper target.
     * @param {module:api/ScraperTargetsApi~getScrapersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScraperTargetResponses}
     */
    getScrapers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'orgID': opts['orgID'],
        'org': opts['org']
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScraperTargetResponses;
      return this.apiClient.callApi(
        '/scrapers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScrapersID operation.
     * @callback module:api/ScraperTargetsApi~getScrapersIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScraperTargetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a scraper target
     * @param {String} scraperTargetID The identifier of the scraper target.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~getScrapersIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScraperTargetResponse}
     */
    getScrapersID(scraperTargetID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling getScrapersID");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScraperTargetResponse;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScrapersIDLabels operation.
     * @callback module:api/ScraperTargetsApi~getScrapersIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all labels for a scraper target
     * @param {String} scraperTargetID The scraper target ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~getScrapersIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelsResponse}
     */
    getScrapersIDLabels(scraperTargetID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling getScrapersIDLabels");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabelsResponse;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScrapersIDMembers operation.
     * @callback module:api/ScraperTargetsApi~getScrapersIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users with member privileges for a scraper target
     * @param {String} scraperTargetID The scraper target ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~getScrapersIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMembers}
     */
    getScrapersIDMembers(scraperTargetID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling getScrapersIDMembers");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMembers;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScrapersIDOwners operation.
     * @callback module:api/ScraperTargetsApi~getScrapersIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwners} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all owners of a scraper target
     * @param {String} scraperTargetID The scraper target ID.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~getScrapersIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwners}
     */
    getScrapersIDOwners(scraperTargetID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling getScrapersIDOwners");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOwners;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/owners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchScrapersID operation.
     * @callback module:api/ScraperTargetsApi~patchScrapersIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScraperTargetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scraper target
     * @param {String} scraperTargetID The identifier of the scraper target.
     * @param {module:model/ScraperTargetRequest} scraperTargetRequest Scraper target update to apply
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~patchScrapersIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScraperTargetResponse}
     */
    patchScrapersID(scraperTargetID, scraperTargetRequest, opts, callback) {
      opts = opts || {};
      let postBody = scraperTargetRequest;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling patchScrapersID");
      }
      // verify the required parameter 'scraperTargetRequest' is set
      if (scraperTargetRequest === undefined || scraperTargetRequest === null) {
        throw new Error("Missing the required parameter 'scraperTargetRequest' when calling patchScrapersID");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScraperTargetResponse;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postScrapers operation.
     * @callback module:api/ScraperTargetsApi~postScrapersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScraperTargetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a scraper target
     * @param {module:model/ScraperTargetRequest} scraperTargetRequest Scraper target to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~postScrapersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScraperTargetResponse}
     */
    postScrapers(scraperTargetRequest, opts, callback) {
      opts = opts || {};
      let postBody = scraperTargetRequest;
      // verify the required parameter 'scraperTargetRequest' is set
      if (scraperTargetRequest === undefined || scraperTargetRequest === null) {
        throw new Error("Missing the required parameter 'scraperTargetRequest' when calling postScrapers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScraperTargetResponse;
      return this.apiClient.callApi(
        '/scrapers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postScrapersIDLabels operation.
     * @callback module:api/ScraperTargetsApi~postScrapersIDLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to a scraper target
     * @param {String} scraperTargetID The scraper target ID.
     * @param {module:model/LabelMapping} labelMapping Label to add
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~postScrapersIDLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelResponse}
     */
    postScrapersIDLabels(scraperTargetID, labelMapping, opts, callback) {
      opts = opts || {};
      let postBody = labelMapping;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling postScrapersIDLabels");
      }
      // verify the required parameter 'labelMapping' is set
      if (labelMapping === undefined || labelMapping === null) {
        throw new Error("Missing the required parameter 'labelMapping' when calling postScrapersIDLabels");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelResponse;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postScrapersIDMembers operation.
     * @callback module:api/ScraperTargetsApi~postScrapersIDMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a member to a scraper target
     * @param {String} scraperTargetID The scraper target ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as member
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~postScrapersIDMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMember}
     */
    postScrapersIDMembers(scraperTargetID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling postScrapersIDMembers");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postScrapersIDMembers");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceMember;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postScrapersIDOwners operation.
     * @callback module:api/ScraperTargetsApi~postScrapersIDOwnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOwner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an owner to a scraper target
     * @param {String} scraperTargetID The scraper target ID.
     * @param {module:model/AddResourceMemberRequestBody} addResourceMemberRequestBody User to add as owner
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/ScraperTargetsApi~postScrapersIDOwnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceOwner}
     */
    postScrapersIDOwners(scraperTargetID, addResourceMemberRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = addResourceMemberRequestBody;
      // verify the required parameter 'scraperTargetID' is set
      if (scraperTargetID === undefined || scraperTargetID === null) {
        throw new Error("Missing the required parameter 'scraperTargetID' when calling postScrapersIDOwners");
      }
      // verify the required parameter 'addResourceMemberRequestBody' is set
      if (addResourceMemberRequestBody === undefined || addResourceMemberRequestBody === null) {
        throw new Error("Missing the required parameter 'addResourceMemberRequestBody' when calling postScrapersIDOwners");
      }

      let pathParams = {
        'scraperTargetID': scraperTargetID
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceOwner;
      return this.apiClient.callApi(
        '/scrapers/{scraperTargetID}/owners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
