/**
 * Influx OSS API Service
 * # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import IsOnboarding from '../model/IsOnboarding';
import OnboardingRequest from '../model/OnboardingRequest';
import OnboardingResponse from '../model/OnboardingResponse';

/**
* Setup service.
* @module api/SetupApi
* @version 2.0.0
*/
export default class SetupApi {

    /**
    * Constructs a new SetupApi. 
    * @alias module:api/SetupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSetup operation.
     * @callback module:api/SetupApi~getSetupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsOnboarding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if database has default user, org, bucket
     * Returns `true` if no default user, organization, or bucket has been created.
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SetupApi~getSetupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsOnboarding}
     */
    getSetup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IsOnboarding;
      return this.apiClient.callApi(
        '/setup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSetup operation.
     * @callback module:api/SetupApi~postSetupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnboardingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set up initial user, org and bucket
     * Post an onboarding request to set up initial user, org and bucket.
     * @param {module:model/OnboardingRequest} onboardingRequest Source to create
     * @param {Object} opts Optional parameters
     * @param {String} [zapTraceSpan] OpenTracing span context
     * @param {module:api/SetupApi~postSetupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnboardingResponse}
     */
    postSetup(onboardingRequest, opts, callback) {
      opts = opts || {};
      let postBody = onboardingRequest;
      // verify the required parameter 'onboardingRequest' is set
      if (onboardingRequest === undefined || onboardingRequest === null) {
        throw new Error("Missing the required parameter 'onboardingRequest' when calling postSetup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Zap-Trace-Span': opts['zapTraceSpan']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OnboardingResponse;
      return this.apiClient.callApi(
        '/setup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
