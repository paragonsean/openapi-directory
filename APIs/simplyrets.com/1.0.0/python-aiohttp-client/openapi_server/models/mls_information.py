# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MlsInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area: str=None, area_minor: str=None, days_on_market: int=None, originating_system_name: str=None, status: str=None, status_text: str=None):
        """MlsInformation - a model defined in OpenAPI

        :param area: The area of this MlsInformation.
        :param area_minor: The area_minor of this MlsInformation.
        :param days_on_market: The days_on_market of this MlsInformation.
        :param originating_system_name: The originating_system_name of this MlsInformation.
        :param status: The status of this MlsInformation.
        :param status_text: The status_text of this MlsInformation.
        """
        self.openapi_types = {
            'area': str,
            'area_minor': str,
            'days_on_market': int,
            'originating_system_name': str,
            'status': str,
            'status_text': str
        }

        self.attribute_map = {
            'area': 'area',
            'area_minor': 'areaMinor',
            'days_on_market': 'daysOnMarket',
            'originating_system_name': 'originatingSystemName',
            'status': 'status',
            'status_text': 'statusText'
        }

        self._area = area
        self._area_minor = area_minor
        self._days_on_market = days_on_market
        self._originating_system_name = originating_system_name
        self._status = status
        self._status_text = status_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MlsInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MlsInformation of this MlsInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self):
        """Gets the area of this MlsInformation.

        MLS Area major. The major marketing area name, as defined by the MLS or other non-governmental organization.

        :return: The area of this MlsInformation.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this MlsInformation.

        MLS Area major. The major marketing area name, as defined by the MLS or other non-governmental organization.

        :param area: The area of this MlsInformation.
        :type area: str
        """

        self._area = area

    @property
    def area_minor(self):
        """Gets the area_minor of this MlsInformation.

        MLS Area minor. The minor/sub marketing area name, as defined by the MLS or other non-governmental organization.

        :return: The area_minor of this MlsInformation.
        :rtype: str
        """
        return self._area_minor

    @area_minor.setter
    def area_minor(self, area_minor):
        """Sets the area_minor of this MlsInformation.

        MLS Area minor. The minor/sub marketing area name, as defined by the MLS or other non-governmental organization.

        :param area_minor: The area_minor of this MlsInformation.
        :type area_minor: str
        """

        self._area_minor = area_minor

    @property
    def days_on_market(self):
        """Gets the days_on_market of this MlsInformation.

        Amount of days the property has been Active

        :return: The days_on_market of this MlsInformation.
        :rtype: int
        """
        return self._days_on_market

    @days_on_market.setter
    def days_on_market(self, days_on_market):
        """Sets the days_on_market of this MlsInformation.

        Amount of days the property has been Active

        :param days_on_market: The days_on_market of this MlsInformation.
        :type days_on_market: int
        """

        self._days_on_market = days_on_market

    @property
    def originating_system_name(self):
        """Gets the originating_system_name of this MlsInformation.

        Alias for the listing office or brokerage  This field corresponds to the data-dictionary `OriginatingSystemName` field  The name of the originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company.  To be used for display.  If you're RETS provider aggregates feeds from multiple MLS's, this will be the name of the corresponding MLS. 

        :return: The originating_system_name of this MlsInformation.
        :rtype: str
        """
        return self._originating_system_name

    @originating_system_name.setter
    def originating_system_name(self, originating_system_name):
        """Sets the originating_system_name of this MlsInformation.

        Alias for the listing office or brokerage  This field corresponds to the data-dictionary `OriginatingSystemName` field  The name of the originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company.  To be used for display.  If you're RETS provider aggregates feeds from multiple MLS's, this will be the name of the corresponding MLS. 

        :param originating_system_name: The originating_system_name of this MlsInformation.
        :type originating_system_name: str
        """

        self._originating_system_name = originating_system_name

    @property
    def status(self):
        """Gets the status of this MlsInformation.

        Normalized MLS Status Code. Compliant with data dictionary v1.3 ListingStatus Listing statuses depend on your MLS's availability. Below is a brief description of each status with possible synonyms which may map to your MLS-specific statuses  - Active: Active Listing which is still on the market - ActiveUnderContract: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent - Pending: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract - Hold: The listing has been withdrawn from the market, but a contract   still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market - Withdrawn: The listing has been withdrawn from the market, but a contract   still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market - Closed: The purchase agreement has been fulfilled or the lease   agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale - Expired: The listing contract has expired - Delete: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap - Incomplete: The listing has not yet be completely entered and is not yet   published in the MLS. Synonyms: Draft, Partially Complted - ComingSoon 

        :return: The status of this MlsInformation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MlsInformation.

        Normalized MLS Status Code. Compliant with data dictionary v1.3 ListingStatus Listing statuses depend on your MLS's availability. Below is a brief description of each status with possible synonyms which may map to your MLS-specific statuses  - Active: Active Listing which is still on the market - ActiveUnderContract: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent - Pending: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract - Hold: The listing has been withdrawn from the market, but a contract   still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market - Withdrawn: The listing has been withdrawn from the market, but a contract   still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market - Closed: The purchase agreement has been fulfilled or the lease   agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale - Expired: The listing contract has expired - Delete: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap - Incomplete: The listing has not yet be completely entered and is not yet   published in the MLS. Synonyms: Draft, Partially Complted - ComingSoon 

        :param status: The status of this MlsInformation.
        :type status: str
        """
        allowed_values = ["Active", "ActiveUnderContract (Backup-Offer)", "Pending", "Hold", "Withdrawn", "Closed", "Expired", "Delete", "Incomplete", "ComingSoon"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_text(self):
        """Gets the status_text of this MlsInformation.

        Raw MLS status text. This `field` comes directly from your RETS data field and is not normalized. 

        :return: The status_text of this MlsInformation.
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this MlsInformation.

        Raw MLS status text. This `field` comes directly from your RETS data field and is not normalized. 

        :param status_text: The status_text of this MlsInformation.
        :type status_text: str
        """

        self._status_text = status_text
