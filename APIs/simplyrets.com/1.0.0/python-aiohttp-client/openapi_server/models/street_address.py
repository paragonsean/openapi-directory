# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StreetAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, cross_street: str=None, full: str=None, postal_code: str=None, state: str=None, street_name: str=None, street_number: int=None, street_number_text: str=None):
        """StreetAddress - a model defined in OpenAPI

        :param city: The city of this StreetAddress.
        :param country: The country of this StreetAddress.
        :param cross_street: The cross_street of this StreetAddress.
        :param full: The full of this StreetAddress.
        :param postal_code: The postal_code of this StreetAddress.
        :param state: The state of this StreetAddress.
        :param street_name: The street_name of this StreetAddress.
        :param street_number: The street_number of this StreetAddress.
        :param street_number_text: The street_number_text of this StreetAddress.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'cross_street': str,
            'full': str,
            'postal_code': str,
            'state': str,
            'street_name': str,
            'street_number': int,
            'street_number_text': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'cross_street': 'crossStreet',
            'full': 'full',
            'postal_code': 'postalCode',
            'state': 'state',
            'street_name': 'streetName',
            'street_number': 'streetNumber',
            'street_number_text': 'streetNumberText'
        }

        self._city = city
        self._country = country
        self._cross_street = cross_street
        self._full = full
        self._postal_code = postal_code
        self._state = state
        self._street_name = street_name
        self._street_number = street_number
        self._street_number_text = street_number_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreetAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreetAddress of this StreetAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this StreetAddress.

        City name

        :return: The city of this StreetAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this StreetAddress.

        City name

        :param city: The city of this StreetAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this StreetAddress.

        Street address country (United States or Canada)

        :return: The country of this StreetAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this StreetAddress.

        Street address country (United States or Canada)

        :param country: The country of this StreetAddress.
        :type country: str
        """

        self._country = country

    @property
    def cross_street(self):
        """Gets the cross_street of this StreetAddress.

        Known cross street

        :return: The cross_street of this StreetAddress.
        :rtype: str
        """
        return self._cross_street

    @cross_street.setter
    def cross_street(self, cross_street):
        """Sets the cross_street of this StreetAddress.

        Known cross street

        :param cross_street: The cross_street of this StreetAddress.
        :type cross_street: str
        """

        self._cross_street = cross_street

    @property
    def full(self):
        """Gets the full of this StreetAddress.

        Full pretty-printed address with suffix (if available)

        :return: The full of this StreetAddress.
        :rtype: str
        """
        return self._full

    @full.setter
    def full(self, full):
        """Sets the full of this StreetAddress.

        Full pretty-printed address with suffix (if available)

        :param full: The full of this StreetAddress.
        :type full: str
        """

        self._full = full

    @property
    def postal_code(self):
        """Gets the postal_code of this StreetAddress.

        Street Address postal code

        :return: The postal_code of this StreetAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this StreetAddress.

        Street Address postal code

        :param postal_code: The postal_code of this StreetAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this StreetAddress.

        State or province. Maps to the data dictionary field `StateOrProvince`.

        :return: The state of this StreetAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StreetAddress.

        State or province. Maps to the data dictionary field `StateOrProvince`.

        :param state: The state of this StreetAddress.
        :type state: str
        """

        self._state = state

    @property
    def street_name(self):
        """Gets the street_name of this StreetAddress.

        Name of the street

        :return: The street_name of this StreetAddress.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this StreetAddress.

        Name of the street

        :param street_name: The street_name of this StreetAddress.
        :type street_name: str
        """

        self._street_name = street_name

    @property
    def street_number(self):
        """Gets the street_number of this StreetAddress.

        Street number

        :return: The street_number of this StreetAddress.
        :rtype: int
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this StreetAddress.

        Street number

        :param street_number: The street_number of this StreetAddress.
        :type street_number: int
        """

        self._street_number = street_number

    @property
    def street_number_text(self):
        """Gets the street_number_text of this StreetAddress.

        Textual representation of the street number. This field is usually redundant with what's in `streetNumber` but is occassionally usefuly for street number which are actually alpha-numerical. For example, \"N63453\" or \"34556B\".  **Added on 2016/05/02** 

        :return: The street_number_text of this StreetAddress.
        :rtype: str
        """
        return self._street_number_text

    @street_number_text.setter
    def street_number_text(self, street_number_text):
        """Sets the street_number_text of this StreetAddress.

        Textual representation of the street number. This field is usually redundant with what's in `streetNumber` but is occassionally usefuly for street number which are actually alpha-numerical. For example, \"N63453\" or \"34556B\".  **Added on 2016/05/02** 

        :param street_number_text: The street_number_text of this StreetAddress.
        :type street_number_text: str
        """

        self._street_number_text = street_number_text
