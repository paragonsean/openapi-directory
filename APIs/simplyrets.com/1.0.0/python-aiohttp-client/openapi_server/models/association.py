# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Association(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amenities: str=None, fee: int=None, name: str=None):
        """Association - a model defined in OpenAPI

        :param amenities: The amenities of this Association.
        :param fee: The fee of this Association.
        :param name: The name of this Association.
        """
        self.openapi_types = {
            'amenities': str,
            'fee': int,
            'name': str
        }

        self.attribute_map = {
            'amenities': 'amenities',
            'fee': 'fee',
            'name': 'name'
        }

        self._amenities = amenities
        self._fee = fee
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Association':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Association of this Association.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amenities(self):
        """Gets the amenities of this Association.

        Any extra amenities granted by the HOA

        :return: The amenities of this Association.
        :rtype: str
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this Association.

        Any extra amenities granted by the HOA

        :param amenities: The amenities of this Association.
        :type amenities: str
        """

        self._amenities = amenities

    @property
    def fee(self):
        """Gets the fee of this Association.

        Association fee

        :return: The fee of this Association.
        :rtype: int
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this Association.

        Association fee

        :param fee: The fee of this Association.
        :type fee: int
        """

        self._fee = fee

    @property
    def name(self):
        """Gets the name of this Association.

        Name of the association

        :return: The name of this Association.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Association.

        Name of the association

        :param name: The name of this Association.
        :type name: str
        """

        self._name = name
