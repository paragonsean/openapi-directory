# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parking import Parking
from openapi_server import util


class ModelProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessibility: str=None, additional_rooms: str=None, area: int=None, area_source: str=None, baths_full: int=None, baths_half: int=None, baths_three_quarter: int=None, bedrooms: int=None, construction: str=None, cooling: str=None, exterior_features: str=None, fireplaces: int=None, flooring: str=None, foundation: str=None, garage_spaces: float=None, heating: str=None, interior_features: str=None, laundry_features: str=None, lot_description: str=None, lot_size: str=None, lot_size_acres: float=None, lot_size_area: float=None, lot_size_area_units: str=None, maintenance_expense: float=None, occupant_name: str=None, occupant_type: str=None, owner_name: str=None, parking: Parking=None, pool_features: str=None, roof: str=None, stories: float=None, style: str=None, sub_type: str=None, sub_type_raw: str=None, subdivision: str=None, type: str=None, view: str=None, water: str=None, year_built: int=None):
        """ModelProperty - a model defined in OpenAPI

        :param accessibility: The accessibility of this ModelProperty.
        :param additional_rooms: The additional_rooms of this ModelProperty.
        :param area: The area of this ModelProperty.
        :param area_source: The area_source of this ModelProperty.
        :param baths_full: The baths_full of this ModelProperty.
        :param baths_half: The baths_half of this ModelProperty.
        :param baths_three_quarter: The baths_three_quarter of this ModelProperty.
        :param bedrooms: The bedrooms of this ModelProperty.
        :param construction: The construction of this ModelProperty.
        :param cooling: The cooling of this ModelProperty.
        :param exterior_features: The exterior_features of this ModelProperty.
        :param fireplaces: The fireplaces of this ModelProperty.
        :param flooring: The flooring of this ModelProperty.
        :param foundation: The foundation of this ModelProperty.
        :param garage_spaces: The garage_spaces of this ModelProperty.
        :param heating: The heating of this ModelProperty.
        :param interior_features: The interior_features of this ModelProperty.
        :param laundry_features: The laundry_features of this ModelProperty.
        :param lot_description: The lot_description of this ModelProperty.
        :param lot_size: The lot_size of this ModelProperty.
        :param lot_size_acres: The lot_size_acres of this ModelProperty.
        :param lot_size_area: The lot_size_area of this ModelProperty.
        :param lot_size_area_units: The lot_size_area_units of this ModelProperty.
        :param maintenance_expense: The maintenance_expense of this ModelProperty.
        :param occupant_name: The occupant_name of this ModelProperty.
        :param occupant_type: The occupant_type of this ModelProperty.
        :param owner_name: The owner_name of this ModelProperty.
        :param parking: The parking of this ModelProperty.
        :param pool_features: The pool_features of this ModelProperty.
        :param roof: The roof of this ModelProperty.
        :param stories: The stories of this ModelProperty.
        :param style: The style of this ModelProperty.
        :param sub_type: The sub_type of this ModelProperty.
        :param sub_type_raw: The sub_type_raw of this ModelProperty.
        :param subdivision: The subdivision of this ModelProperty.
        :param type: The type of this ModelProperty.
        :param view: The view of this ModelProperty.
        :param water: The water of this ModelProperty.
        :param year_built: The year_built of this ModelProperty.
        """
        self.openapi_types = {
            'accessibility': str,
            'additional_rooms': str,
            'area': int,
            'area_source': str,
            'baths_full': int,
            'baths_half': int,
            'baths_three_quarter': int,
            'bedrooms': int,
            'construction': str,
            'cooling': str,
            'exterior_features': str,
            'fireplaces': int,
            'flooring': str,
            'foundation': str,
            'garage_spaces': float,
            'heating': str,
            'interior_features': str,
            'laundry_features': str,
            'lot_description': str,
            'lot_size': str,
            'lot_size_acres': float,
            'lot_size_area': float,
            'lot_size_area_units': str,
            'maintenance_expense': float,
            'occupant_name': str,
            'occupant_type': str,
            'owner_name': str,
            'parking': Parking,
            'pool_features': str,
            'roof': str,
            'stories': float,
            'style': str,
            'sub_type': str,
            'sub_type_raw': str,
            'subdivision': str,
            'type': str,
            'view': str,
            'water': str,
            'year_built': int
        }

        self.attribute_map = {
            'accessibility': 'accessibility',
            'additional_rooms': 'additionalRooms',
            'area': 'area',
            'area_source': 'areaSource',
            'baths_full': 'bathsFull',
            'baths_half': 'bathsHalf',
            'baths_three_quarter': 'bathsThreeQuarter',
            'bedrooms': 'bedrooms',
            'construction': 'construction',
            'cooling': 'cooling',
            'exterior_features': 'exteriorFeatures',
            'fireplaces': 'fireplaces',
            'flooring': 'flooring',
            'foundation': 'foundation',
            'garage_spaces': 'garageSpaces',
            'heating': 'heating',
            'interior_features': 'interiorFeatures',
            'laundry_features': 'laundryFeatures',
            'lot_description': 'lotDescription',
            'lot_size': 'lotSize',
            'lot_size_acres': 'lotSizeAcres',
            'lot_size_area': 'lotSizeArea',
            'lot_size_area_units': 'lotSizeAreaUnits',
            'maintenance_expense': 'maintenanceExpense',
            'occupant_name': 'occupantName',
            'occupant_type': 'occupantType',
            'owner_name': 'ownerName',
            'parking': 'parking',
            'pool_features': 'poolFeatures',
            'roof': 'roof',
            'stories': 'stories',
            'style': 'style',
            'sub_type': 'subType',
            'sub_type_raw': 'subTypeRaw',
            'subdivision': 'subdivision',
            'type': 'type',
            'view': 'view',
            'water': 'water',
            'year_built': 'yearBuilt'
        }

        self._accessibility = accessibility
        self._additional_rooms = additional_rooms
        self._area = area
        self._area_source = area_source
        self._baths_full = baths_full
        self._baths_half = baths_half
        self._baths_three_quarter = baths_three_quarter
        self._bedrooms = bedrooms
        self._construction = construction
        self._cooling = cooling
        self._exterior_features = exterior_features
        self._fireplaces = fireplaces
        self._flooring = flooring
        self._foundation = foundation
        self._garage_spaces = garage_spaces
        self._heating = heating
        self._interior_features = interior_features
        self._laundry_features = laundry_features
        self._lot_description = lot_description
        self._lot_size = lot_size
        self._lot_size_acres = lot_size_acres
        self._lot_size_area = lot_size_area
        self._lot_size_area_units = lot_size_area_units
        self._maintenance_expense = maintenance_expense
        self._occupant_name = occupant_name
        self._occupant_type = occupant_type
        self._owner_name = owner_name
        self._parking = parking
        self._pool_features = pool_features
        self._roof = roof
        self._stories = stories
        self._style = style
        self._sub_type = sub_type
        self._sub_type_raw = sub_type_raw
        self._subdivision = subdivision
        self._type = type
        self._view = view
        self._water = water
        self._year_built = year_built

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Property of this ModelProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessibility(self):
        """Gets the accessibility of this ModelProperty.


        :return: The accessibility of this ModelProperty.
        :rtype: str
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this ModelProperty.


        :param accessibility: The accessibility of this ModelProperty.
        :type accessibility: str
        """

        self._accessibility = accessibility

    @property
    def additional_rooms(self):
        """Gets the additional_rooms of this ModelProperty.

        Additional room information. This is a textual description of additional rooms for the listing. 

        :return: The additional_rooms of this ModelProperty.
        :rtype: str
        """
        return self._additional_rooms

    @additional_rooms.setter
    def additional_rooms(self, additional_rooms):
        """Sets the additional_rooms of this ModelProperty.

        Additional room information. This is a textual description of additional rooms for the listing. 

        :param additional_rooms: The additional_rooms of this ModelProperty.
        :type additional_rooms: str
        """

        self._additional_rooms = additional_rooms

    @property
    def area(self):
        """Gets the area of this ModelProperty.

        Square footage of the building associated with a listing

        :return: The area of this ModelProperty.
        :rtype: int
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this ModelProperty.

        Square footage of the building associated with a listing

        :param area: The area of this ModelProperty.
        :type area: int
        """

        self._area = area

    @property
    def area_source(self):
        """Gets the area_source of this ModelProperty.


        :return: The area_source of this ModelProperty.
        :rtype: str
        """
        return self._area_source

    @area_source.setter
    def area_source(self, area_source):
        """Sets the area_source of this ModelProperty.


        :param area_source: The area_source of this ModelProperty.
        :type area_source: str
        """

        self._area_source = area_source

    @property
    def baths_full(self):
        """Gets the baths_full of this ModelProperty.

        Number of full bathrooms

        :return: The baths_full of this ModelProperty.
        :rtype: int
        """
        return self._baths_full

    @baths_full.setter
    def baths_full(self, baths_full):
        """Sets the baths_full of this ModelProperty.

        Number of full bathrooms

        :param baths_full: The baths_full of this ModelProperty.
        :type baths_full: int
        """

        self._baths_full = baths_full

    @property
    def baths_half(self):
        """Gets the baths_half of this ModelProperty.

        Number of half bathrooms

        :return: The baths_half of this ModelProperty.
        :rtype: int
        """
        return self._baths_half

    @baths_half.setter
    def baths_half(self, baths_half):
        """Sets the baths_half of this ModelProperty.

        Number of half bathrooms

        :param baths_half: The baths_half of this ModelProperty.
        :type baths_half: int
        """

        self._baths_half = baths_half

    @property
    def baths_three_quarter(self):
        """Gets the baths_three_quarter of this ModelProperty.

        Number of 3/4 bathrooms

        :return: The baths_three_quarter of this ModelProperty.
        :rtype: int
        """
        return self._baths_three_quarter

    @baths_three_quarter.setter
    def baths_three_quarter(self, baths_three_quarter):
        """Sets the baths_three_quarter of this ModelProperty.

        Number of 3/4 bathrooms

        :param baths_three_quarter: The baths_three_quarter of this ModelProperty.
        :type baths_three_quarter: int
        """

        self._baths_three_quarter = baths_three_quarter

    @property
    def bedrooms(self):
        """Gets the bedrooms of this ModelProperty.

        Number of bedrooms

        :return: The bedrooms of this ModelProperty.
        :rtype: int
        """
        return self._bedrooms

    @bedrooms.setter
    def bedrooms(self, bedrooms):
        """Sets the bedrooms of this ModelProperty.

        Number of bedrooms

        :param bedrooms: The bedrooms of this ModelProperty.
        :type bedrooms: int
        """

        self._bedrooms = bedrooms

    @property
    def construction(self):
        """Gets the construction of this ModelProperty.

        The materials that were used in the construction of the property.

        :return: The construction of this ModelProperty.
        :rtype: str
        """
        return self._construction

    @construction.setter
    def construction(self, construction):
        """Sets the construction of this ModelProperty.

        The materials that were used in the construction of the property.

        :param construction: The construction of this ModelProperty.
        :type construction: str
        """

        self._construction = construction

    @property
    def cooling(self):
        """Gets the cooling of this ModelProperty.

        A description of the cooling or air conditioning features of the property.

        :return: The cooling of this ModelProperty.
        :rtype: str
        """
        return self._cooling

    @cooling.setter
    def cooling(self, cooling):
        """Sets the cooling of this ModelProperty.

        A description of the cooling or air conditioning features of the property.

        :param cooling: The cooling of this ModelProperty.
        :type cooling: str
        """

        self._cooling = cooling

    @property
    def exterior_features(self):
        """Gets the exterior_features of this ModelProperty.

        Exterior Features for the listing 

        :return: The exterior_features of this ModelProperty.
        :rtype: str
        """
        return self._exterior_features

    @exterior_features.setter
    def exterior_features(self, exterior_features):
        """Sets the exterior_features of this ModelProperty.

        Exterior Features for the listing 

        :param exterior_features: The exterior_features of this ModelProperty.
        :type exterior_features: str
        """

        self._exterior_features = exterior_features

    @property
    def fireplaces(self):
        """Gets the fireplaces of this ModelProperty.

        Number of fireplaces

        :return: The fireplaces of this ModelProperty.
        :rtype: int
        """
        return self._fireplaces

    @fireplaces.setter
    def fireplaces(self, fireplaces):
        """Sets the fireplaces of this ModelProperty.

        Number of fireplaces

        :param fireplaces: The fireplaces of this ModelProperty.
        :type fireplaces: int
        """

        self._fireplaces = fireplaces

    @property
    def flooring(self):
        """Gets the flooring of this ModelProperty.

        The type(s) of flooring found within the property.

        :return: The flooring of this ModelProperty.
        :rtype: str
        """
        return self._flooring

    @flooring.setter
    def flooring(self, flooring):
        """Sets the flooring of this ModelProperty.

        The type(s) of flooring found within the property.

        :param flooring: The flooring of this ModelProperty.
        :type flooring: str
        """

        self._flooring = flooring

    @property
    def foundation(self):
        """Gets the foundation of this ModelProperty.


        :return: The foundation of this ModelProperty.
        :rtype: str
        """
        return self._foundation

    @foundation.setter
    def foundation(self, foundation):
        """Sets the foundation of this ModelProperty.


        :param foundation: The foundation of this ModelProperty.
        :type foundation: str
        """

        self._foundation = foundation

    @property
    def garage_spaces(self):
        """Gets the garage_spaces of this ModelProperty.

        Number of garage spaces

        :return: The garage_spaces of this ModelProperty.
        :rtype: float
        """
        return self._garage_spaces

    @garage_spaces.setter
    def garage_spaces(self, garage_spaces):
        """Sets the garage_spaces of this ModelProperty.

        Number of garage spaces

        :param garage_spaces: The garage_spaces of this ModelProperty.
        :type garage_spaces: float
        """

        self._garage_spaces = garage_spaces

    @property
    def heating(self):
        """Gets the heating of this ModelProperty.

        Heating description or short string

        :return: The heating of this ModelProperty.
        :rtype: str
        """
        return self._heating

    @heating.setter
    def heating(self, heating):
        """Sets the heating of this ModelProperty.

        Heating description or short string

        :param heating: The heating of this ModelProperty.
        :type heating: str
        """

        self._heating = heating

    @property
    def interior_features(self):
        """Gets the interior_features of this ModelProperty.

        The properties interior features

        :return: The interior_features of this ModelProperty.
        :rtype: str
        """
        return self._interior_features

    @interior_features.setter
    def interior_features(self, interior_features):
        """Sets the interior_features of this ModelProperty.

        The properties interior features

        :param interior_features: The interior_features of this ModelProperty.
        :type interior_features: str
        """

        self._interior_features = interior_features

    @property
    def laundry_features(self):
        """Gets the laundry_features of this ModelProperty.


        :return: The laundry_features of this ModelProperty.
        :rtype: str
        """
        return self._laundry_features

    @laundry_features.setter
    def laundry_features(self, laundry_features):
        """Sets the laundry_features of this ModelProperty.


        :param laundry_features: The laundry_features of this ModelProperty.
        :type laundry_features: str
        """

        self._laundry_features = laundry_features

    @property
    def lot_description(self):
        """Gets the lot_description of this ModelProperty.


        :return: The lot_description of this ModelProperty.
        :rtype: str
        """
        return self._lot_description

    @lot_description.setter
    def lot_description(self, lot_description):
        """Sets the lot_description of this ModelProperty.


        :param lot_description: The lot_description of this ModelProperty.
        :type lot_description: str
        """

        self._lot_description = lot_description

    @property
    def lot_size(self):
        """Gets the lot_size of this ModelProperty.

        Lot size dimensions or square footage as a text. This field is generally used to show the pretty formatted lot size. 

        :return: The lot_size of this ModelProperty.
        :rtype: str
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this ModelProperty.

        Lot size dimensions or square footage as a text. This field is generally used to show the pretty formatted lot size. 

        :param lot_size: The lot_size of this ModelProperty.
        :type lot_size: str
        """

        self._lot_size = lot_size

    @property
    def lot_size_acres(self):
        """Gets the lot_size_acres of this ModelProperty.

        Lot size in acres  **Added on 2016/05/04 - Not available for all RETS vendors** 

        :return: The lot_size_acres of this ModelProperty.
        :rtype: float
        """
        return self._lot_size_acres

    @lot_size_acres.setter
    def lot_size_acres(self, lot_size_acres):
        """Sets the lot_size_acres of this ModelProperty.

        Lot size in acres  **Added on 2016/05/04 - Not available for all RETS vendors** 

        :param lot_size_acres: The lot_size_acres of this ModelProperty.
        :type lot_size_acres: float
        """

        self._lot_size_acres = lot_size_acres

    @property
    def lot_size_area(self):
        """Gets the lot_size_area of this ModelProperty.

        The total area of the lot.  See `lotSizeUnits` for the units of measurement (Square Feet, Square Meters, Acres, etc.).  **Added on 2016/05/04 - Not available for all RETS vendors** 

        :return: The lot_size_area of this ModelProperty.
        :rtype: float
        """
        return self._lot_size_area

    @lot_size_area.setter
    def lot_size_area(self, lot_size_area):
        """Sets the lot_size_area of this ModelProperty.

        The total area of the lot.  See `lotSizeUnits` for the units of measurement (Square Feet, Square Meters, Acres, etc.).  **Added on 2016/05/04 - Not available for all RETS vendors** 

        :param lot_size_area: The lot_size_area of this ModelProperty.
        :type lot_size_area: float
        """

        self._lot_size_area = lot_size_area

    @property
    def lot_size_area_units(self):
        """Gets the lot_size_area_units of this ModelProperty.

        Unit of measurement for the lotSizeArea field.  e.g. Square Feet, Square Meters, Acres, etc.  If this field is `null` the units is the default unit of measure specified by your RETS provider.  **Added on 2016/05/04 - Not available for all RETS vendors** 

        :return: The lot_size_area_units of this ModelProperty.
        :rtype: str
        """
        return self._lot_size_area_units

    @lot_size_area_units.setter
    def lot_size_area_units(self, lot_size_area_units):
        """Sets the lot_size_area_units of this ModelProperty.

        Unit of measurement for the lotSizeArea field.  e.g. Square Feet, Square Meters, Acres, etc.  If this field is `null` the units is the default unit of measure specified by your RETS provider.  **Added on 2016/05/04 - Not available for all RETS vendors** 

        :param lot_size_area_units: The lot_size_area_units of this ModelProperty.
        :type lot_size_area_units: str
        """

        self._lot_size_area_units = lot_size_area_units

    @property
    def maintenance_expense(self):
        """Gets the maintenance_expense of this ModelProperty.

        Yearly maintenance expense

        :return: The maintenance_expense of this ModelProperty.
        :rtype: float
        """
        return self._maintenance_expense

    @maintenance_expense.setter
    def maintenance_expense(self, maintenance_expense):
        """Sets the maintenance_expense of this ModelProperty.

        Yearly maintenance expense

        :param maintenance_expense: The maintenance_expense of this ModelProperty.
        :type maintenance_expense: float
        """

        self._maintenance_expense = maintenance_expense

    @property
    def occupant_name(self):
        """Gets the occupant_name of this ModelProperty.


        :return: The occupant_name of this ModelProperty.
        :rtype: str
        """
        return self._occupant_name

    @occupant_name.setter
    def occupant_name(self, occupant_name):
        """Sets the occupant_name of this ModelProperty.


        :param occupant_name: The occupant_name of this ModelProperty.
        :type occupant_name: str
        """

        self._occupant_name = occupant_name

    @property
    def occupant_type(self):
        """Gets the occupant_type of this ModelProperty.


        :return: The occupant_type of this ModelProperty.
        :rtype: str
        """
        return self._occupant_type

    @occupant_type.setter
    def occupant_type(self, occupant_type):
        """Sets the occupant_type of this ModelProperty.


        :param occupant_type: The occupant_type of this ModelProperty.
        :type occupant_type: str
        """

        self._occupant_type = occupant_type

    @property
    def owner_name(self):
        """Gets the owner_name of this ModelProperty.


        :return: The owner_name of this ModelProperty.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this ModelProperty.


        :param owner_name: The owner_name of this ModelProperty.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def parking(self):
        """Gets the parking of this ModelProperty.


        :return: The parking of this ModelProperty.
        :rtype: Parking
        """
        return self._parking

    @parking.setter
    def parking(self, parking):
        """Sets the parking of this ModelProperty.


        :param parking: The parking of this ModelProperty.
        :type parking: Parking
        """

        self._parking = parking

    @property
    def pool_features(self):
        """Gets the pool_features of this ModelProperty.


        :return: The pool_features of this ModelProperty.
        :rtype: str
        """
        return self._pool_features

    @pool_features.setter
    def pool_features(self, pool_features):
        """Sets the pool_features of this ModelProperty.


        :param pool_features: The pool_features of this ModelProperty.
        :type pool_features: str
        """

        self._pool_features = pool_features

    @property
    def roof(self):
        """Gets the roof of this ModelProperty.

        Property roof description

        :return: The roof of this ModelProperty.
        :rtype: str
        """
        return self._roof

    @roof.setter
    def roof(self, roof):
        """Sets the roof of this ModelProperty.

        Property roof description

        :param roof: The roof of this ModelProperty.
        :type roof: str
        """

        self._roof = roof

    @property
    def stories(self):
        """Gets the stories of this ModelProperty.

        Number of stories or levels. Represented as a `double' to account for half stories. 

        :return: The stories of this ModelProperty.
        :rtype: float
        """
        return self._stories

    @stories.setter
    def stories(self, stories):
        """Sets the stories of this ModelProperty.

        Number of stories or levels. Represented as a `double' to account for half stories. 

        :param stories: The stories of this ModelProperty.
        :type stories: float
        """

        self._stories = stories

    @property
    def style(self):
        """Gets the style of this ModelProperty.

        Property style description or short string

        :return: The style of this ModelProperty.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this ModelProperty.

        Property style description or short string

        :param style: The style of this ModelProperty.
        :type style: str
        """

        self._style = style

    @property
    def sub_type(self):
        """Gets the sub_type of this ModelProperty.

        A normalized representation of the listings sub-type. 

        :return: The sub_type of this ModelProperty.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this ModelProperty.

        A normalized representation of the listings sub-type. 

        :param sub_type: The sub_type of this ModelProperty.
        :type sub_type: str
        """
        allowed_values = ["Apartment", "BoatSlip", "SingleFamilyResidence", "DeededParking", "Cabin", "Condominium", "Duplex", "ManufacturedHome", "Quadruplex", "StockCooperative", "Townhouse", "Timeshare", "Triplex", "ManufacturedOnLand"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def sub_type_raw(self):
        """Gets the sub_type_raw of this ModelProperty.

        The raw text representation of the property sub type. 

        :return: The sub_type_raw of this ModelProperty.
        :rtype: str
        """
        return self._sub_type_raw

    @sub_type_raw.setter
    def sub_type_raw(self, sub_type_raw):
        """Sets the sub_type_raw of this ModelProperty.

        The raw text representation of the property sub type. 

        :param sub_type_raw: The sub_type_raw of this ModelProperty.
        :type sub_type_raw: str
        """

        self._sub_type_raw = sub_type_raw

    @property
    def subdivision(self):
        """Gets the subdivision of this ModelProperty.

        The subdivision or community name

        :return: The subdivision of this ModelProperty.
        :rtype: str
        """
        return self._subdivision

    @subdivision.setter
    def subdivision(self, subdivision):
        """Sets the subdivision of this ModelProperty.

        The subdivision or community name

        :param subdivision: The subdivision of this ModelProperty.
        :type subdivision: str
        """

        self._subdivision = subdivision

    @property
    def type(self):
        """Gets the type of this ModelProperty.

        Abbreviated property type. RES is Residential, CND is CondoOrTownhome, RNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land, FRM is Farm. See the `propertySubType` field for more information. 

        :return: The type of this ModelProperty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelProperty.

        Abbreviated property type. RES is Residential, CND is CondoOrTownhome, RNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land, FRM is Farm. See the `propertySubType` field for more information. 

        :param type: The type of this ModelProperty.
        :type type: str
        """
        allowed_values = ["RES", "CND", "RNT", "MLF", "CRE", "LND", "FRM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def view(self):
        """Gets the view of this ModelProperty.

        View details and description

        :return: The view of this ModelProperty.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this ModelProperty.

        View details and description

        :param view: The view of this ModelProperty.
        :type view: str
        """

        self._view = view

    @property
    def water(self):
        """Gets the water of this ModelProperty.

        The name, if known, of the body of water on which the property is located. (E.g., lake name, river name, ocean name, sea name, canal name). Otherwise, this field will contain features of the waterfront on which the property is located. 

        :return: The water of this ModelProperty.
        :rtype: str
        """
        return self._water

    @water.setter
    def water(self, water):
        """Sets the water of this ModelProperty.

        The name, if known, of the body of water on which the property is located. (E.g., lake name, river name, ocean name, sea name, canal name). Otherwise, this field will contain features of the waterfront on which the property is located. 

        :param water: The water of this ModelProperty.
        :type water: str
        """

        self._water = water

    @property
    def year_built(self):
        """Gets the year_built of this ModelProperty.

        Year the property was built

        :return: The year_built of this ModelProperty.
        :rtype: int
        """
        return self._year_built

    @year_built.setter
    def year_built(self, year_built):
        """Sets the year_built of this ModelProperty.

        Year the property was built

        :param year_built: The year_built of this ModelProperty.
        :type year_built: int
        """

        self._year_built = year_built
