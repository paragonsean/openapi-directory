# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent import Agent
from openapi_server.models.association import Association
from openapi_server.models.geographic_data import GeographicData
from openapi_server.models.mls_information import MlsInformation
from openapi_server.models.model_property import ModelProperty
from openapi_server.models.office import Office
from openapi_server.models.sales import Sales
from openapi_server.models.school import School
from openapi_server.models.street_address import StreetAddress
from openapi_server.models.tax import Tax
from openapi_server import util


class Listing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: StreetAddress=None, agent: Agent=None, association: Association=None, co_agent: Agent=None, disclaimer: str=None, geo: GeographicData=None, lease_term: str=None, lease_type: str=None, list_date: datetime=None, list_price: float=None, listing_id: str=None, mls: MlsInformation=None, mls_id: int=None, modified: datetime=None, office: Office=None, photos: List[str]=None, private_remarks: str=None, _property: ModelProperty=None, remarks: str=None, sales: Sales=None, school: School=None, showing_instructions: str=None, tax: Tax=None, virtual_tour_url: str=None):
        """Listing - a model defined in OpenAPI

        :param address: The address of this Listing.
        :param agent: The agent of this Listing.
        :param association: The association of this Listing.
        :param co_agent: The co_agent of this Listing.
        :param disclaimer: The disclaimer of this Listing.
        :param geo: The geo of this Listing.
        :param lease_term: The lease_term of this Listing.
        :param lease_type: The lease_type of this Listing.
        :param list_date: The list_date of this Listing.
        :param list_price: The list_price of this Listing.
        :param listing_id: The listing_id of this Listing.
        :param mls: The mls of this Listing.
        :param mls_id: The mls_id of this Listing.
        :param modified: The modified of this Listing.
        :param office: The office of this Listing.
        :param photos: The photos of this Listing.
        :param private_remarks: The private_remarks of this Listing.
        :param _property: The _property of this Listing.
        :param remarks: The remarks of this Listing.
        :param sales: The sales of this Listing.
        :param school: The school of this Listing.
        :param showing_instructions: The showing_instructions of this Listing.
        :param tax: The tax of this Listing.
        :param virtual_tour_url: The virtual_tour_url of this Listing.
        """
        self.openapi_types = {
            'address': StreetAddress,
            'agent': Agent,
            'association': Association,
            'co_agent': Agent,
            'disclaimer': str,
            'geo': GeographicData,
            'lease_term': str,
            'lease_type': str,
            'list_date': datetime,
            'list_price': float,
            'listing_id': str,
            'mls': MlsInformation,
            'mls_id': int,
            'modified': datetime,
            'office': Office,
            'photos': List[str],
            'private_remarks': str,
            '_property': ModelProperty,
            'remarks': str,
            'sales': Sales,
            'school': School,
            'showing_instructions': str,
            'tax': Tax,
            'virtual_tour_url': str
        }

        self.attribute_map = {
            'address': 'address',
            'agent': 'agent',
            'association': 'association',
            'co_agent': 'coAgent',
            'disclaimer': 'disclaimer',
            'geo': 'geo',
            'lease_term': 'leaseTerm',
            'lease_type': 'leaseType',
            'list_date': 'listDate',
            'list_price': 'listPrice',
            'listing_id': 'listingId',
            'mls': 'mls',
            'mls_id': 'mlsId',
            'modified': 'modified',
            'office': 'office',
            'photos': 'photos',
            'private_remarks': 'privateRemarks',
            '_property': 'property',
            'remarks': 'remarks',
            'sales': 'sales',
            'school': 'school',
            'showing_instructions': 'showingInstructions',
            'tax': 'tax',
            'virtual_tour_url': 'virtualTourUrl'
        }

        self._address = address
        self._agent = agent
        self._association = association
        self._co_agent = co_agent
        self._disclaimer = disclaimer
        self._geo = geo
        self._lease_term = lease_term
        self._lease_type = lease_type
        self._list_date = list_date
        self._list_price = list_price
        self._listing_id = listing_id
        self._mls = mls
        self._mls_id = mls_id
        self._modified = modified
        self._office = office
        self._photos = photos
        self._private_remarks = private_remarks
        self.__property = _property
        self._remarks = remarks
        self._sales = sales
        self._school = school
        self._showing_instructions = showing_instructions
        self._tax = tax
        self._virtual_tour_url = virtual_tour_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Listing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Listing of this Listing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Listing.


        :return: The address of this Listing.
        :rtype: StreetAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Listing.


        :param address: The address of this Listing.
        :type address: StreetAddress
        """

        self._address = address

    @property
    def agent(self):
        """Gets the agent of this Listing.


        :return: The agent of this Listing.
        :rtype: Agent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this Listing.


        :param agent: The agent of this Listing.
        :type agent: Agent
        """

        self._agent = agent

    @property
    def association(self):
        """Gets the association of this Listing.


        :return: The association of this Listing.
        :rtype: Association
        """
        return self._association

    @association.setter
    def association(self, association):
        """Sets the association of this Listing.


        :param association: The association of this Listing.
        :type association: Association
        """

        self._association = association

    @property
    def co_agent(self):
        """Gets the co_agent of this Listing.


        :return: The co_agent of this Listing.
        :rtype: Agent
        """
        return self._co_agent

    @co_agent.setter
    def co_agent(self, co_agent):
        """Sets the co_agent of this Listing.


        :param co_agent: The co_agent of this Listing.
        :type co_agent: Agent
        """

        self._co_agent = co_agent

    @property
    def disclaimer(self):
        """Gets the disclaimer of this Listing.

        Data accuracy disclaimer. The value in the disclaimer may change depending on your MLS vendors rules. 

        :return: The disclaimer of this Listing.
        :rtype: str
        """
        return self._disclaimer

    @disclaimer.setter
    def disclaimer(self, disclaimer):
        """Sets the disclaimer of this Listing.

        Data accuracy disclaimer. The value in the disclaimer may change depending on your MLS vendors rules. 

        :param disclaimer: The disclaimer of this Listing.
        :type disclaimer: str
        """

        self._disclaimer = disclaimer

    @property
    def geo(self):
        """Gets the geo of this Listing.


        :return: The geo of this Listing.
        :rtype: GeographicData
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this Listing.


        :param geo: The geo of this Listing.
        :type geo: GeographicData
        """

        self._geo = geo

    @property
    def lease_term(self):
        """Gets the lease_term of this Listing.

        Represents the length of the lease.

        :return: The lease_term of this Listing.
        :rtype: str
        """
        return self._lease_term

    @lease_term.setter
    def lease_term(self, lease_term):
        """Sets the lease_term of this Listing.

        Represents the length of the lease.

        :param lease_term: The lease_term of this Listing.
        :type lease_term: str
        """

        self._lease_term = lease_term

    @property
    def lease_type(self):
        """Gets the lease_type of this Listing.

        Information about the status of the existing lease on the property.

        :return: The lease_type of this Listing.
        :rtype: str
        """
        return self._lease_type

    @lease_type.setter
    def lease_type(self, lease_type):
        """Sets the lease_type of this Listing.

        Information about the status of the existing lease on the property.

        :param lease_type: The lease_type of this Listing.
        :type lease_type: str
        """

        self._lease_type = lease_type

    @property
    def list_date(self):
        """Gets the list_date of this Listing.

        Date and time the listing became Active

        :return: The list_date of this Listing.
        :rtype: datetime
        """
        return self._list_date

    @list_date.setter
    def list_date(self, list_date):
        """Sets the list_date of this Listing.

        Date and time the listing became Active

        :param list_date: The list_date of this Listing.
        :type list_date: datetime
        """

        self._list_date = list_date

    @property
    def list_price(self):
        """Gets the list_price of this Listing.

        Price of the listing

        :return: The list_price of this Listing.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this Listing.

        Price of the listing

        :param list_price: The list_price of this Listing.
        :type list_price: float
        """

        self._list_price = list_price

    @property
    def listing_id(self):
        """Gets the listing_id of this Listing.

        Data Dictionary v1.3 ListingId. The well known identifier for the listing. The value is the id or number by the MLS as a public identifier for the listing.  This identifier should not be confused with the `mlsId`, which is specific to the SimplyRETS API. 

        :return: The listing_id of this Listing.
        :rtype: str
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this Listing.

        Data Dictionary v1.3 ListingId. The well known identifier for the listing. The value is the id or number by the MLS as a public identifier for the listing.  This identifier should not be confused with the `mlsId`, which is specific to the SimplyRETS API. 

        :param listing_id: The listing_id of this Listing.
        :type listing_id: str
        """

        self._listing_id = listing_id

    @property
    def mls(self):
        """Gets the mls of this Listing.


        :return: The mls of this Listing.
        :rtype: MlsInformation
        """
        return self._mls

    @mls.setter
    def mls(self, mls):
        """Sets the mls of this Listing.


        :param mls: The mls of this Listing.
        :type mls: MlsInformation
        """

        self._mls = mls

    @property
    def mls_id(self):
        """Gets the mls_id of this Listing.

        A unique identifier for this listing specific to the SimplyRETS API. Thie identifier is specific to the SimplyRETS api and has no correlation with the MLS number. Use this id when making requests to the single listing endpoint (eg, `/properties/{mlsId}`).  Applications should not rely on specific `mlsId`s being present. Instead, apps should dynamically use the `mlsId` after using other more general query parameters. Many mls vendors require listings which are expired, terminated or sold to be purged, which will render calls to specific `mlsId`s to return nothing (or possibly a 404). 

        :return: The mls_id of this Listing.
        :rtype: int
        """
        return self._mls_id

    @mls_id.setter
    def mls_id(self, mls_id):
        """Sets the mls_id of this Listing.

        A unique identifier for this listing specific to the SimplyRETS API. Thie identifier is specific to the SimplyRETS api and has no correlation with the MLS number. Use this id when making requests to the single listing endpoint (eg, `/properties/{mlsId}`).  Applications should not rely on specific `mlsId`s being present. Instead, apps should dynamically use the `mlsId` after using other more general query parameters. Many mls vendors require listings which are expired, terminated or sold to be purged, which will render calls to specific `mlsId`s to return nothing (or possibly a 404). 

        :param mls_id: The mls_id of this Listing.
        :type mls_id: int
        """

        self._mls_id = mls_id

    @property
    def modified(self):
        """Gets the modified of this Listing.

        Date and time of the last modification

        :return: The modified of this Listing.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Listing.

        Date and time of the last modification

        :param modified: The modified of this Listing.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def office(self):
        """Gets the office of this Listing.


        :return: The office of this Listing.
        :rtype: Office
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this Listing.


        :param office: The office of this Listing.
        :type office: Office
        """

        self._office = office

    @property
    def photos(self):
        """Gets the photos of this Listing.

        Photos of the property. Images are served over https and are suitable for production use on secure websites 

        :return: The photos of this Listing.
        :rtype: List[str]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this Listing.

        Photos of the property. Images are served over https and are suitable for production use on secure websites 

        :param photos: The photos of this Listing.
        :type photos: List[str]
        """

        self._photos = photos

    @property
    def private_remarks(self):
        """Gets the private_remarks of this Listing.

        Agent only remarks

        :return: The private_remarks of this Listing.
        :rtype: str
        """
        return self._private_remarks

    @private_remarks.setter
    def private_remarks(self, private_remarks):
        """Sets the private_remarks of this Listing.

        Agent only remarks

        :param private_remarks: The private_remarks of this Listing.
        :type private_remarks: str
        """

        self._private_remarks = private_remarks

    @property
    def _property(self):
        """Gets the _property of this Listing.


        :return: The _property of this Listing.
        :rtype: ModelProperty
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Listing.


        :param _property: The _property of this Listing.
        :type _property: ModelProperty
        """

        self.__property = _property

    @property
    def remarks(self):
        """Gets the remarks of this Listing.

        Description or remarks

        :return: The remarks of this Listing.
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this Listing.

        Description or remarks

        :param remarks: The remarks of this Listing.
        :type remarks: str
        """

        self._remarks = remarks

    @property
    def sales(self):
        """Gets the sales of this Listing.


        :return: The sales of this Listing.
        :rtype: Sales
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this Listing.


        :param sales: The sales of this Listing.
        :type sales: Sales
        """

        self._sales = sales

    @property
    def school(self):
        """Gets the school of this Listing.


        :return: The school of this Listing.
        :rtype: School
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this Listing.


        :param school: The school of this Listing.
        :type school: School
        """

        self._school = school

    @property
    def showing_instructions(self):
        """Gets the showing_instructions of this Listing.

        Public instructions for showing the property.

        :return: The showing_instructions of this Listing.
        :rtype: str
        """
        return self._showing_instructions

    @showing_instructions.setter
    def showing_instructions(self, showing_instructions):
        """Sets the showing_instructions of this Listing.

        Public instructions for showing the property.

        :param showing_instructions: The showing_instructions of this Listing.
        :type showing_instructions: str
        """

        self._showing_instructions = showing_instructions

    @property
    def tax(self):
        """Gets the tax of this Listing.


        :return: The tax of this Listing.
        :rtype: Tax
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Listing.


        :param tax: The tax of this Listing.
        :type tax: Tax
        """

        self._tax = tax

    @property
    def virtual_tour_url(self):
        """Gets the virtual_tour_url of this Listing.

        The URL for an unbranded virtual tour of the property.  **Added on 2016/05/04 - Not available for all RETS vendors** 

        :return: The virtual_tour_url of this Listing.
        :rtype: str
        """
        return self._virtual_tour_url

    @virtual_tour_url.setter
    def virtual_tour_url(self, virtual_tour_url):
        """Sets the virtual_tour_url of this Listing.

        The URL for an unbranded virtual tour of the property.  **Added on 2016/05/04 - Not available for all RETS vendors** 

        :param virtual_tour_url: The virtual_tour_url of this Listing.
        :type virtual_tour_url: str
        """

        self._virtual_tour_url = virtual_tour_url
