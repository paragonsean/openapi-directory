# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Parking(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, leased: str=None, spaces: int=None):
        """Parking - a model defined in OpenAPI

        :param description: The description of this Parking.
        :param leased: The leased of this Parking.
        :param spaces: The spaces of this Parking.
        """
        self.openapi_types = {
            'description': str,
            'leased': str,
            'spaces': int
        }

        self.attribute_map = {
            'description': 'description',
            'leased': 'leased',
            'spaces': 'spaces'
        }

        self._description = description
        self._leased = leased
        self._spaces = spaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Parking':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Parking of this Parking.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Parking.

        Parking features description

        :return: The description of this Parking.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Parking.

        Parking features description

        :param description: The description of this Parking.
        :type description: str
        """

        self._description = description

    @property
    def leased(self):
        """Gets the leased of this Parking.


        :return: The leased of this Parking.
        :rtype: str
        """
        return self._leased

    @leased.setter
    def leased(self, leased):
        """Sets the leased of this Parking.


        :param leased: The leased of this Parking.
        :type leased: str
        """

        self._leased = leased

    @property
    def spaces(self):
        """Gets the spaces of this Parking.

        Number of parking spaces

        :return: The spaces of this Parking.
        :rtype: int
        """
        return self._spaces

    @spaces.setter
    def spaces(self, spaces):
        """Sets the spaces of this Parking.

        Number of parking spaces

        :param spaces: The spaces of this Parking.
        :type spaces: int
        """

        self._spaces = spaces
