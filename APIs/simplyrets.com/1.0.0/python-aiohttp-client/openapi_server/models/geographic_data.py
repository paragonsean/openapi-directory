# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeographicData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, county: str=None, directions: str=None, lat: float=None, lng: float=None, market_area: str=None):
        """GeographicData - a model defined in OpenAPI

        :param county: The county of this GeographicData.
        :param directions: The directions of this GeographicData.
        :param lat: The lat of this GeographicData.
        :param lng: The lng of this GeographicData.
        :param market_area: The market_area of this GeographicData.
        """
        self.openapi_types = {
            'county': str,
            'directions': str,
            'lat': float,
            'lng': float,
            'market_area': str
        }

        self.attribute_map = {
            'county': 'county',
            'directions': 'directions',
            'lat': 'lat',
            'lng': 'lng',
            'market_area': 'marketArea'
        }

        self._county = county
        self._directions = directions
        self._lat = lat
        self._lng = lng
        self._market_area = market_area

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeographicData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeographicData of this GeographicData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def county(self):
        """Gets the county of this GeographicData.

        Listing county

        :return: The county of this GeographicData.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this GeographicData.

        Listing county

        :param county: The county of this GeographicData.
        :type county: str
        """

        self._county = county

    @property
    def directions(self):
        """Gets the directions of this GeographicData.

        Directions to the property

        :return: The directions of this GeographicData.
        :rtype: str
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this GeographicData.

        Directions to the property

        :param directions: The directions of this GeographicData.
        :type directions: str
        """

        self._directions = directions

    @property
    def lat(self):
        """Gets the lat of this GeographicData.

        Listing latitude (if available)

        :return: The lat of this GeographicData.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this GeographicData.

        Listing latitude (if available)

        :param lat: The lat of this GeographicData.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this GeographicData.

        Listing longitude (if available)

        :return: The lng of this GeographicData.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this GeographicData.

        Listing longitude (if available)

        :param lng: The lng of this GeographicData.
        :type lng: float
        """

        self._lng = lng

    @property
    def market_area(self):
        """Gets the market_area of this GeographicData.

        Listing GeoMarket area. May be the same as mlsArea

        :return: The market_area of this GeographicData.
        :rtype: str
        """
        return self._market_area

    @market_area.setter
    def market_area(self, market_area):
        """Sets the market_area of this GeographicData.

        Listing GeoMarket area. May be the same as mlsArea

        :param market_area: The market_area of this GeographicData.
        :type market_area: str
        """

        self._market_area = market_area
