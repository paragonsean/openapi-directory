/*
 * SimplyRETS
 * The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Parking;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rets MLS Listing Property
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:54.606138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Property {
  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  private String accessibility;

  public static final String SERIALIZED_NAME_ADDITIONAL_ROOMS = "additionalRooms";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ROOMS)
  private String additionalRooms;

  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private Long area;

  public static final String SERIALIZED_NAME_AREA_SOURCE = "areaSource";
  @SerializedName(SERIALIZED_NAME_AREA_SOURCE)
  private String areaSource;

  public static final String SERIALIZED_NAME_BATHS_FULL = "bathsFull";
  @SerializedName(SERIALIZED_NAME_BATHS_FULL)
  private Long bathsFull;

  public static final String SERIALIZED_NAME_BATHS_HALF = "bathsHalf";
  @SerializedName(SERIALIZED_NAME_BATHS_HALF)
  private Long bathsHalf;

  public static final String SERIALIZED_NAME_BATHS_THREE_QUARTER = "bathsThreeQuarter";
  @SerializedName(SERIALIZED_NAME_BATHS_THREE_QUARTER)
  private Long bathsThreeQuarter;

  public static final String SERIALIZED_NAME_BEDROOMS = "bedrooms";
  @SerializedName(SERIALIZED_NAME_BEDROOMS)
  private Long bedrooms;

  public static final String SERIALIZED_NAME_CONSTRUCTION = "construction";
  @SerializedName(SERIALIZED_NAME_CONSTRUCTION)
  private String construction;

  public static final String SERIALIZED_NAME_COOLING = "cooling";
  @SerializedName(SERIALIZED_NAME_COOLING)
  private String cooling;

  public static final String SERIALIZED_NAME_EXTERIOR_FEATURES = "exteriorFeatures";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_FEATURES)
  private String exteriorFeatures;

  public static final String SERIALIZED_NAME_FIREPLACES = "fireplaces";
  @SerializedName(SERIALIZED_NAME_FIREPLACES)
  private Long fireplaces;

  public static final String SERIALIZED_NAME_FLOORING = "flooring";
  @SerializedName(SERIALIZED_NAME_FLOORING)
  private String flooring;

  public static final String SERIALIZED_NAME_FOUNDATION = "foundation";
  @SerializedName(SERIALIZED_NAME_FOUNDATION)
  private String foundation;

  public static final String SERIALIZED_NAME_GARAGE_SPACES = "garageSpaces";
  @SerializedName(SERIALIZED_NAME_GARAGE_SPACES)
  private Float garageSpaces;

  public static final String SERIALIZED_NAME_HEATING = "heating";
  @SerializedName(SERIALIZED_NAME_HEATING)
  private String heating;

  public static final String SERIALIZED_NAME_INTERIOR_FEATURES = "interiorFeatures";
  @SerializedName(SERIALIZED_NAME_INTERIOR_FEATURES)
  private String interiorFeatures;

  public static final String SERIALIZED_NAME_LAUNDRY_FEATURES = "laundryFeatures";
  @SerializedName(SERIALIZED_NAME_LAUNDRY_FEATURES)
  private String laundryFeatures;

  public static final String SERIALIZED_NAME_LOT_DESCRIPTION = "lotDescription";
  @SerializedName(SERIALIZED_NAME_LOT_DESCRIPTION)
  private String lotDescription;

  public static final String SERIALIZED_NAME_LOT_SIZE = "lotSize";
  @SerializedName(SERIALIZED_NAME_LOT_SIZE)
  private String lotSize;

  public static final String SERIALIZED_NAME_LOT_SIZE_ACRES = "lotSizeAcres";
  @SerializedName(SERIALIZED_NAME_LOT_SIZE_ACRES)
  private Float lotSizeAcres;

  public static final String SERIALIZED_NAME_LOT_SIZE_AREA = "lotSizeArea";
  @SerializedName(SERIALIZED_NAME_LOT_SIZE_AREA)
  private Double lotSizeArea;

  public static final String SERIALIZED_NAME_LOT_SIZE_AREA_UNITS = "lotSizeAreaUnits";
  @SerializedName(SERIALIZED_NAME_LOT_SIZE_AREA_UNITS)
  private String lotSizeAreaUnits;

  public static final String SERIALIZED_NAME_MAINTENANCE_EXPENSE = "maintenanceExpense";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_EXPENSE)
  private Float maintenanceExpense;

  public static final String SERIALIZED_NAME_OCCUPANT_NAME = "occupantName";
  @SerializedName(SERIALIZED_NAME_OCCUPANT_NAME)
  private String occupantName;

  public static final String SERIALIZED_NAME_OCCUPANT_TYPE = "occupantType";
  @SerializedName(SERIALIZED_NAME_OCCUPANT_TYPE)
  private String occupantType;

  public static final String SERIALIZED_NAME_OWNER_NAME = "ownerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_PARKING = "parking";
  @SerializedName(SERIALIZED_NAME_PARKING)
  private Parking parking;

  public static final String SERIALIZED_NAME_POOL_FEATURES = "poolFeatures";
  @SerializedName(SERIALIZED_NAME_POOL_FEATURES)
  private String poolFeatures;

  public static final String SERIALIZED_NAME_ROOF = "roof";
  @SerializedName(SERIALIZED_NAME_ROOF)
  private String roof;

  public static final String SERIALIZED_NAME_STORIES = "stories";
  @SerializedName(SERIALIZED_NAME_STORIES)
  private Float stories;

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private String style;

  /**
   * A normalized representation of the listings sub-type. 
   */
  @JsonAdapter(SubTypeEnum.Adapter.class)
  public enum SubTypeEnum {
    APARTMENT("Apartment"),
    
    BOAT_SLIP("BoatSlip"),
    
    SINGLE_FAMILY_RESIDENCE("SingleFamilyResidence"),
    
    DEEDED_PARKING("DeededParking"),
    
    CABIN("Cabin"),
    
    CONDOMINIUM("Condominium"),
    
    DUPLEX("Duplex"),
    
    MANUFACTURED_HOME("ManufacturedHome"),
    
    QUADRUPLEX("Quadruplex"),
    
    STOCK_COOPERATIVE("StockCooperative"),
    
    TOWNHOUSE("Townhouse"),
    
    TIMESHARE("Timeshare"),
    
    TRIPLEX("Triplex"),
    
    MANUFACTURED_ON_LAND("ManufacturedOnLand");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubTypeEnum fromValue(String value) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUB_TYPE = "subType";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private SubTypeEnum subType;

  public static final String SERIALIZED_NAME_SUB_TYPE_RAW = "subTypeRaw";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE_RAW)
  private String subTypeRaw;

  public static final String SERIALIZED_NAME_SUBDIVISION = "subdivision";
  @SerializedName(SERIALIZED_NAME_SUBDIVISION)
  private String subdivision;

  /**
   * Abbreviated property type. RES is Residential, CND is CondoOrTownhome, RNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land, FRM is Farm. See the &#x60;propertySubType&#x60; field for more information. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    RES("RES"),
    
    CND("CND"),
    
    RNT("RNT"),
    
    MLF("MLF"),
    
    CRE("CRE"),
    
    LND("LND"),
    
    FRM("FRM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private String view;

  public static final String SERIALIZED_NAME_WATER = "water";
  @SerializedName(SERIALIZED_NAME_WATER)
  private String water;

  public static final String SERIALIZED_NAME_YEAR_BUILT = "yearBuilt";
  @SerializedName(SERIALIZED_NAME_YEAR_BUILT)
  private Long yearBuilt;

  public Property() {
  }

  public Property accessibility(String accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  /**
   * Get accessibility
   * @return accessibility
   */
  @javax.annotation.Nullable
  public String getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(String accessibility) {
    this.accessibility = accessibility;
  }


  public Property additionalRooms(String additionalRooms) {
    this.additionalRooms = additionalRooms;
    return this;
  }

  /**
   * Additional room information. This is a textual description of additional rooms for the listing. 
   * @return additionalRooms
   */
  @javax.annotation.Nullable
  public String getAdditionalRooms() {
    return additionalRooms;
  }

  public void setAdditionalRooms(String additionalRooms) {
    this.additionalRooms = additionalRooms;
  }


  public Property area(Long area) {
    this.area = area;
    return this;
  }

  /**
   * Square footage of the building associated with a listing
   * @return area
   */
  @javax.annotation.Nullable
  public Long getArea() {
    return area;
  }

  public void setArea(Long area) {
    this.area = area;
  }


  public Property areaSource(String areaSource) {
    this.areaSource = areaSource;
    return this;
  }

  /**
   * Get areaSource
   * @return areaSource
   */
  @javax.annotation.Nullable
  public String getAreaSource() {
    return areaSource;
  }

  public void setAreaSource(String areaSource) {
    this.areaSource = areaSource;
  }


  public Property bathsFull(Long bathsFull) {
    this.bathsFull = bathsFull;
    return this;
  }

  /**
   * Number of full bathrooms
   * @return bathsFull
   */
  @javax.annotation.Nullable
  public Long getBathsFull() {
    return bathsFull;
  }

  public void setBathsFull(Long bathsFull) {
    this.bathsFull = bathsFull;
  }


  public Property bathsHalf(Long bathsHalf) {
    this.bathsHalf = bathsHalf;
    return this;
  }

  /**
   * Number of half bathrooms
   * @return bathsHalf
   */
  @javax.annotation.Nullable
  public Long getBathsHalf() {
    return bathsHalf;
  }

  public void setBathsHalf(Long bathsHalf) {
    this.bathsHalf = bathsHalf;
  }


  public Property bathsThreeQuarter(Long bathsThreeQuarter) {
    this.bathsThreeQuarter = bathsThreeQuarter;
    return this;
  }

  /**
   * Number of 3/4 bathrooms
   * @return bathsThreeQuarter
   */
  @javax.annotation.Nullable
  public Long getBathsThreeQuarter() {
    return bathsThreeQuarter;
  }

  public void setBathsThreeQuarter(Long bathsThreeQuarter) {
    this.bathsThreeQuarter = bathsThreeQuarter;
  }


  public Property bedrooms(Long bedrooms) {
    this.bedrooms = bedrooms;
    return this;
  }

  /**
   * Number of bedrooms
   * @return bedrooms
   */
  @javax.annotation.Nullable
  public Long getBedrooms() {
    return bedrooms;
  }

  public void setBedrooms(Long bedrooms) {
    this.bedrooms = bedrooms;
  }


  public Property construction(String construction) {
    this.construction = construction;
    return this;
  }

  /**
   * The materials that were used in the construction of the property.
   * @return construction
   */
  @javax.annotation.Nullable
  public String getConstruction() {
    return construction;
  }

  public void setConstruction(String construction) {
    this.construction = construction;
  }


  public Property cooling(String cooling) {
    this.cooling = cooling;
    return this;
  }

  /**
   * A description of the cooling or air conditioning features of the property.
   * @return cooling
   */
  @javax.annotation.Nullable
  public String getCooling() {
    return cooling;
  }

  public void setCooling(String cooling) {
    this.cooling = cooling;
  }


  public Property exteriorFeatures(String exteriorFeatures) {
    this.exteriorFeatures = exteriorFeatures;
    return this;
  }

  /**
   * Exterior Features for the listing 
   * @return exteriorFeatures
   */
  @javax.annotation.Nullable
  public String getExteriorFeatures() {
    return exteriorFeatures;
  }

  public void setExteriorFeatures(String exteriorFeatures) {
    this.exteriorFeatures = exteriorFeatures;
  }


  public Property fireplaces(Long fireplaces) {
    this.fireplaces = fireplaces;
    return this;
  }

  /**
   * Number of fireplaces
   * @return fireplaces
   */
  @javax.annotation.Nullable
  public Long getFireplaces() {
    return fireplaces;
  }

  public void setFireplaces(Long fireplaces) {
    this.fireplaces = fireplaces;
  }


  public Property flooring(String flooring) {
    this.flooring = flooring;
    return this;
  }

  /**
   * The type(s) of flooring found within the property.
   * @return flooring
   */
  @javax.annotation.Nullable
  public String getFlooring() {
    return flooring;
  }

  public void setFlooring(String flooring) {
    this.flooring = flooring;
  }


  public Property foundation(String foundation) {
    this.foundation = foundation;
    return this;
  }

  /**
   * Get foundation
   * @return foundation
   */
  @javax.annotation.Nullable
  public String getFoundation() {
    return foundation;
  }

  public void setFoundation(String foundation) {
    this.foundation = foundation;
  }


  public Property garageSpaces(Float garageSpaces) {
    this.garageSpaces = garageSpaces;
    return this;
  }

  /**
   * Number of garage spaces
   * @return garageSpaces
   */
  @javax.annotation.Nullable
  public Float getGarageSpaces() {
    return garageSpaces;
  }

  public void setGarageSpaces(Float garageSpaces) {
    this.garageSpaces = garageSpaces;
  }


  public Property heating(String heating) {
    this.heating = heating;
    return this;
  }

  /**
   * Heating description or short string
   * @return heating
   */
  @javax.annotation.Nullable
  public String getHeating() {
    return heating;
  }

  public void setHeating(String heating) {
    this.heating = heating;
  }


  public Property interiorFeatures(String interiorFeatures) {
    this.interiorFeatures = interiorFeatures;
    return this;
  }

  /**
   * The properties interior features
   * @return interiorFeatures
   */
  @javax.annotation.Nullable
  public String getInteriorFeatures() {
    return interiorFeatures;
  }

  public void setInteriorFeatures(String interiorFeatures) {
    this.interiorFeatures = interiorFeatures;
  }


  public Property laundryFeatures(String laundryFeatures) {
    this.laundryFeatures = laundryFeatures;
    return this;
  }

  /**
   * Get laundryFeatures
   * @return laundryFeatures
   */
  @javax.annotation.Nullable
  public String getLaundryFeatures() {
    return laundryFeatures;
  }

  public void setLaundryFeatures(String laundryFeatures) {
    this.laundryFeatures = laundryFeatures;
  }


  public Property lotDescription(String lotDescription) {
    this.lotDescription = lotDescription;
    return this;
  }

  /**
   * Get lotDescription
   * @return lotDescription
   */
  @javax.annotation.Nullable
  public String getLotDescription() {
    return lotDescription;
  }

  public void setLotDescription(String lotDescription) {
    this.lotDescription = lotDescription;
  }


  public Property lotSize(String lotSize) {
    this.lotSize = lotSize;
    return this;
  }

  /**
   * Lot size dimensions or square footage as a text. This field is generally used to show the pretty formatted lot size. 
   * @return lotSize
   */
  @javax.annotation.Nullable
  public String getLotSize() {
    return lotSize;
  }

  public void setLotSize(String lotSize) {
    this.lotSize = lotSize;
  }


  public Property lotSizeAcres(Float lotSizeAcres) {
    this.lotSizeAcres = lotSizeAcres;
    return this;
  }

  /**
   * Lot size in acres  **Added on 2016/05/04 - Not available for all RETS vendors** 
   * @return lotSizeAcres
   */
  @javax.annotation.Nullable
  public Float getLotSizeAcres() {
    return lotSizeAcres;
  }

  public void setLotSizeAcres(Float lotSizeAcres) {
    this.lotSizeAcres = lotSizeAcres;
  }


  public Property lotSizeArea(Double lotSizeArea) {
    this.lotSizeArea = lotSizeArea;
    return this;
  }

  /**
   * The total area of the lot.  See &#x60;lotSizeUnits&#x60; for the units of measurement (Square Feet, Square Meters, Acres, etc.).  **Added on 2016/05/04 - Not available for all RETS vendors** 
   * @return lotSizeArea
   */
  @javax.annotation.Nullable
  public Double getLotSizeArea() {
    return lotSizeArea;
  }

  public void setLotSizeArea(Double lotSizeArea) {
    this.lotSizeArea = lotSizeArea;
  }


  public Property lotSizeAreaUnits(String lotSizeAreaUnits) {
    this.lotSizeAreaUnits = lotSizeAreaUnits;
    return this;
  }

  /**
   * Unit of measurement for the lotSizeArea field.  e.g. Square Feet, Square Meters, Acres, etc.  If this field is &#x60;null&#x60; the units is the default unit of measure specified by your RETS provider.  **Added on 2016/05/04 - Not available for all RETS vendors** 
   * @return lotSizeAreaUnits
   */
  @javax.annotation.Nullable
  public String getLotSizeAreaUnits() {
    return lotSizeAreaUnits;
  }

  public void setLotSizeAreaUnits(String lotSizeAreaUnits) {
    this.lotSizeAreaUnits = lotSizeAreaUnits;
  }


  public Property maintenanceExpense(Float maintenanceExpense) {
    this.maintenanceExpense = maintenanceExpense;
    return this;
  }

  /**
   * Yearly maintenance expense
   * @return maintenanceExpense
   */
  @javax.annotation.Nullable
  public Float getMaintenanceExpense() {
    return maintenanceExpense;
  }

  public void setMaintenanceExpense(Float maintenanceExpense) {
    this.maintenanceExpense = maintenanceExpense;
  }


  public Property occupantName(String occupantName) {
    this.occupantName = occupantName;
    return this;
  }

  /**
   * Get occupantName
   * @return occupantName
   */
  @javax.annotation.Nullable
  public String getOccupantName() {
    return occupantName;
  }

  public void setOccupantName(String occupantName) {
    this.occupantName = occupantName;
  }


  public Property occupantType(String occupantType) {
    this.occupantType = occupantType;
    return this;
  }

  /**
   * Get occupantType
   * @return occupantType
   */
  @javax.annotation.Nullable
  public String getOccupantType() {
    return occupantType;
  }

  public void setOccupantType(String occupantType) {
    this.occupantType = occupantType;
  }


  public Property ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  /**
   * Get ownerName
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public Property parking(Parking parking) {
    this.parking = parking;
    return this;
  }

  /**
   * Get parking
   * @return parking
   */
  @javax.annotation.Nullable
  public Parking getParking() {
    return parking;
  }

  public void setParking(Parking parking) {
    this.parking = parking;
  }


  public Property poolFeatures(String poolFeatures) {
    this.poolFeatures = poolFeatures;
    return this;
  }

  /**
   * Get poolFeatures
   * @return poolFeatures
   */
  @javax.annotation.Nullable
  public String getPoolFeatures() {
    return poolFeatures;
  }

  public void setPoolFeatures(String poolFeatures) {
    this.poolFeatures = poolFeatures;
  }


  public Property roof(String roof) {
    this.roof = roof;
    return this;
  }

  /**
   * Property roof description
   * @return roof
   */
  @javax.annotation.Nullable
  public String getRoof() {
    return roof;
  }

  public void setRoof(String roof) {
    this.roof = roof;
  }


  public Property stories(Float stories) {
    this.stories = stories;
    return this;
  }

  /**
   * Number of stories or levels. Represented as a &#x60;double&#39; to account for half stories. 
   * @return stories
   */
  @javax.annotation.Nullable
  public Float getStories() {
    return stories;
  }

  public void setStories(Float stories) {
    this.stories = stories;
  }


  public Property style(String style) {
    this.style = style;
    return this;
  }

  /**
   * Property style description or short string
   * @return style
   */
  @javax.annotation.Nullable
  public String getStyle() {
    return style;
  }

  public void setStyle(String style) {
    this.style = style;
  }


  public Property subType(SubTypeEnum subType) {
    this.subType = subType;
    return this;
  }

  /**
   * A normalized representation of the listings sub-type. 
   * @return subType
   */
  @javax.annotation.Nullable
  public SubTypeEnum getSubType() {
    return subType;
  }

  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }


  public Property subTypeRaw(String subTypeRaw) {
    this.subTypeRaw = subTypeRaw;
    return this;
  }

  /**
   * The raw text representation of the property sub type. 
   * @return subTypeRaw
   */
  @javax.annotation.Nullable
  public String getSubTypeRaw() {
    return subTypeRaw;
  }

  public void setSubTypeRaw(String subTypeRaw) {
    this.subTypeRaw = subTypeRaw;
  }


  public Property subdivision(String subdivision) {
    this.subdivision = subdivision;
    return this;
  }

  /**
   * The subdivision or community name
   * @return subdivision
   */
  @javax.annotation.Nullable
  public String getSubdivision() {
    return subdivision;
  }

  public void setSubdivision(String subdivision) {
    this.subdivision = subdivision;
  }


  public Property type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Abbreviated property type. RES is Residential, CND is CondoOrTownhome, RNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land, FRM is Farm. See the &#x60;propertySubType&#x60; field for more information. 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Property view(String view) {
    this.view = view;
    return this;
  }

  /**
   * View details and description
   * @return view
   */
  @javax.annotation.Nullable
  public String getView() {
    return view;
  }

  public void setView(String view) {
    this.view = view;
  }


  public Property water(String water) {
    this.water = water;
    return this;
  }

  /**
   * The name, if known, of the body of water on which the property is located. (E.g., lake name, river name, ocean name, sea name, canal name). Otherwise, this field will contain features of the waterfront on which the property is located. 
   * @return water
   */
  @javax.annotation.Nullable
  public String getWater() {
    return water;
  }

  public void setWater(String water) {
    this.water = water;
  }


  public Property yearBuilt(Long yearBuilt) {
    this.yearBuilt = yearBuilt;
    return this;
  }

  /**
   * Year the property was built
   * @return yearBuilt
   */
  @javax.annotation.Nullable
  public Long getYearBuilt() {
    return yearBuilt;
  }

  public void setYearBuilt(Long yearBuilt) {
    this.yearBuilt = yearBuilt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Property property = (Property) o;
    return Objects.equals(this.accessibility, property.accessibility) &&
        Objects.equals(this.additionalRooms, property.additionalRooms) &&
        Objects.equals(this.area, property.area) &&
        Objects.equals(this.areaSource, property.areaSource) &&
        Objects.equals(this.bathsFull, property.bathsFull) &&
        Objects.equals(this.bathsHalf, property.bathsHalf) &&
        Objects.equals(this.bathsThreeQuarter, property.bathsThreeQuarter) &&
        Objects.equals(this.bedrooms, property.bedrooms) &&
        Objects.equals(this.construction, property.construction) &&
        Objects.equals(this.cooling, property.cooling) &&
        Objects.equals(this.exteriorFeatures, property.exteriorFeatures) &&
        Objects.equals(this.fireplaces, property.fireplaces) &&
        Objects.equals(this.flooring, property.flooring) &&
        Objects.equals(this.foundation, property.foundation) &&
        Objects.equals(this.garageSpaces, property.garageSpaces) &&
        Objects.equals(this.heating, property.heating) &&
        Objects.equals(this.interiorFeatures, property.interiorFeatures) &&
        Objects.equals(this.laundryFeatures, property.laundryFeatures) &&
        Objects.equals(this.lotDescription, property.lotDescription) &&
        Objects.equals(this.lotSize, property.lotSize) &&
        Objects.equals(this.lotSizeAcres, property.lotSizeAcres) &&
        Objects.equals(this.lotSizeArea, property.lotSizeArea) &&
        Objects.equals(this.lotSizeAreaUnits, property.lotSizeAreaUnits) &&
        Objects.equals(this.maintenanceExpense, property.maintenanceExpense) &&
        Objects.equals(this.occupantName, property.occupantName) &&
        Objects.equals(this.occupantType, property.occupantType) &&
        Objects.equals(this.ownerName, property.ownerName) &&
        Objects.equals(this.parking, property.parking) &&
        Objects.equals(this.poolFeatures, property.poolFeatures) &&
        Objects.equals(this.roof, property.roof) &&
        Objects.equals(this.stories, property.stories) &&
        Objects.equals(this.style, property.style) &&
        Objects.equals(this.subType, property.subType) &&
        Objects.equals(this.subTypeRaw, property.subTypeRaw) &&
        Objects.equals(this.subdivision, property.subdivision) &&
        Objects.equals(this.type, property.type) &&
        Objects.equals(this.view, property.view) &&
        Objects.equals(this.water, property.water) &&
        Objects.equals(this.yearBuilt, property.yearBuilt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, additionalRooms, area, areaSource, bathsFull, bathsHalf, bathsThreeQuarter, bedrooms, construction, cooling, exteriorFeatures, fireplaces, flooring, foundation, garageSpaces, heating, interiorFeatures, laundryFeatures, lotDescription, lotSize, lotSizeAcres, lotSizeArea, lotSizeAreaUnits, maintenanceExpense, occupantName, occupantType, ownerName, parking, poolFeatures, roof, stories, style, subType, subTypeRaw, subdivision, type, view, water, yearBuilt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Property {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    additionalRooms: ").append(toIndentedString(additionalRooms)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    areaSource: ").append(toIndentedString(areaSource)).append("\n");
    sb.append("    bathsFull: ").append(toIndentedString(bathsFull)).append("\n");
    sb.append("    bathsHalf: ").append(toIndentedString(bathsHalf)).append("\n");
    sb.append("    bathsThreeQuarter: ").append(toIndentedString(bathsThreeQuarter)).append("\n");
    sb.append("    bedrooms: ").append(toIndentedString(bedrooms)).append("\n");
    sb.append("    construction: ").append(toIndentedString(construction)).append("\n");
    sb.append("    cooling: ").append(toIndentedString(cooling)).append("\n");
    sb.append("    exteriorFeatures: ").append(toIndentedString(exteriorFeatures)).append("\n");
    sb.append("    fireplaces: ").append(toIndentedString(fireplaces)).append("\n");
    sb.append("    flooring: ").append(toIndentedString(flooring)).append("\n");
    sb.append("    foundation: ").append(toIndentedString(foundation)).append("\n");
    sb.append("    garageSpaces: ").append(toIndentedString(garageSpaces)).append("\n");
    sb.append("    heating: ").append(toIndentedString(heating)).append("\n");
    sb.append("    interiorFeatures: ").append(toIndentedString(interiorFeatures)).append("\n");
    sb.append("    laundryFeatures: ").append(toIndentedString(laundryFeatures)).append("\n");
    sb.append("    lotDescription: ").append(toIndentedString(lotDescription)).append("\n");
    sb.append("    lotSize: ").append(toIndentedString(lotSize)).append("\n");
    sb.append("    lotSizeAcres: ").append(toIndentedString(lotSizeAcres)).append("\n");
    sb.append("    lotSizeArea: ").append(toIndentedString(lotSizeArea)).append("\n");
    sb.append("    lotSizeAreaUnits: ").append(toIndentedString(lotSizeAreaUnits)).append("\n");
    sb.append("    maintenanceExpense: ").append(toIndentedString(maintenanceExpense)).append("\n");
    sb.append("    occupantName: ").append(toIndentedString(occupantName)).append("\n");
    sb.append("    occupantType: ").append(toIndentedString(occupantType)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    parking: ").append(toIndentedString(parking)).append("\n");
    sb.append("    poolFeatures: ").append(toIndentedString(poolFeatures)).append("\n");
    sb.append("    roof: ").append(toIndentedString(roof)).append("\n");
    sb.append("    stories: ").append(toIndentedString(stories)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    subTypeRaw: ").append(toIndentedString(subTypeRaw)).append("\n");
    sb.append("    subdivision: ").append(toIndentedString(subdivision)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    water: ").append(toIndentedString(water)).append("\n");
    sb.append("    yearBuilt: ").append(toIndentedString(yearBuilt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibility");
    openapiFields.add("additionalRooms");
    openapiFields.add("area");
    openapiFields.add("areaSource");
    openapiFields.add("bathsFull");
    openapiFields.add("bathsHalf");
    openapiFields.add("bathsThreeQuarter");
    openapiFields.add("bedrooms");
    openapiFields.add("construction");
    openapiFields.add("cooling");
    openapiFields.add("exteriorFeatures");
    openapiFields.add("fireplaces");
    openapiFields.add("flooring");
    openapiFields.add("foundation");
    openapiFields.add("garageSpaces");
    openapiFields.add("heating");
    openapiFields.add("interiorFeatures");
    openapiFields.add("laundryFeatures");
    openapiFields.add("lotDescription");
    openapiFields.add("lotSize");
    openapiFields.add("lotSizeAcres");
    openapiFields.add("lotSizeArea");
    openapiFields.add("lotSizeAreaUnits");
    openapiFields.add("maintenanceExpense");
    openapiFields.add("occupantName");
    openapiFields.add("occupantType");
    openapiFields.add("ownerName");
    openapiFields.add("parking");
    openapiFields.add("poolFeatures");
    openapiFields.add("roof");
    openapiFields.add("stories");
    openapiFields.add("style");
    openapiFields.add("subType");
    openapiFields.add("subTypeRaw");
    openapiFields.add("subdivision");
    openapiFields.add("type");
    openapiFields.add("view");
    openapiFields.add("water");
    openapiFields.add("yearBuilt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Property
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Property.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Property is not found in the empty JSON string", Property.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Property.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Property` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessibility") != null && !jsonObj.get("accessibility").isJsonNull()) && !jsonObj.get("accessibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessibility").toString()));
      }
      if ((jsonObj.get("additionalRooms") != null && !jsonObj.get("additionalRooms").isJsonNull()) && !jsonObj.get("additionalRooms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalRooms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalRooms").toString()));
      }
      if ((jsonObj.get("areaSource") != null && !jsonObj.get("areaSource").isJsonNull()) && !jsonObj.get("areaSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `areaSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("areaSource").toString()));
      }
      if ((jsonObj.get("construction") != null && !jsonObj.get("construction").isJsonNull()) && !jsonObj.get("construction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `construction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("construction").toString()));
      }
      if ((jsonObj.get("cooling") != null && !jsonObj.get("cooling").isJsonNull()) && !jsonObj.get("cooling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cooling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cooling").toString()));
      }
      if ((jsonObj.get("exteriorFeatures") != null && !jsonObj.get("exteriorFeatures").isJsonNull()) && !jsonObj.get("exteriorFeatures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exteriorFeatures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exteriorFeatures").toString()));
      }
      if ((jsonObj.get("flooring") != null && !jsonObj.get("flooring").isJsonNull()) && !jsonObj.get("flooring").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flooring` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flooring").toString()));
      }
      if ((jsonObj.get("foundation") != null && !jsonObj.get("foundation").isJsonNull()) && !jsonObj.get("foundation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foundation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foundation").toString()));
      }
      if ((jsonObj.get("heating") != null && !jsonObj.get("heating").isJsonNull()) && !jsonObj.get("heating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heating").toString()));
      }
      if ((jsonObj.get("interiorFeatures") != null && !jsonObj.get("interiorFeatures").isJsonNull()) && !jsonObj.get("interiorFeatures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interiorFeatures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interiorFeatures").toString()));
      }
      if ((jsonObj.get("laundryFeatures") != null && !jsonObj.get("laundryFeatures").isJsonNull()) && !jsonObj.get("laundryFeatures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `laundryFeatures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("laundryFeatures").toString()));
      }
      if ((jsonObj.get("lotDescription") != null && !jsonObj.get("lotDescription").isJsonNull()) && !jsonObj.get("lotDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lotDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lotDescription").toString()));
      }
      if ((jsonObj.get("lotSize") != null && !jsonObj.get("lotSize").isJsonNull()) && !jsonObj.get("lotSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lotSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lotSize").toString()));
      }
      if ((jsonObj.get("lotSizeAreaUnits") != null && !jsonObj.get("lotSizeAreaUnits").isJsonNull()) && !jsonObj.get("lotSizeAreaUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lotSizeAreaUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lotSizeAreaUnits").toString()));
      }
      if ((jsonObj.get("occupantName") != null && !jsonObj.get("occupantName").isJsonNull()) && !jsonObj.get("occupantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupantName").toString()));
      }
      if ((jsonObj.get("occupantType") != null && !jsonObj.get("occupantType").isJsonNull()) && !jsonObj.get("occupantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupantType").toString()));
      }
      if ((jsonObj.get("ownerName") != null && !jsonObj.get("ownerName").isJsonNull()) && !jsonObj.get("ownerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerName").toString()));
      }
      // validate the optional field `parking`
      if (jsonObj.get("parking") != null && !jsonObj.get("parking").isJsonNull()) {
        Parking.validateJsonElement(jsonObj.get("parking"));
      }
      if ((jsonObj.get("poolFeatures") != null && !jsonObj.get("poolFeatures").isJsonNull()) && !jsonObj.get("poolFeatures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolFeatures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolFeatures").toString()));
      }
      if ((jsonObj.get("roof") != null && !jsonObj.get("roof").isJsonNull()) && !jsonObj.get("roof").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roof` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roof").toString()));
      }
      if ((jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) && !jsonObj.get("style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
      if ((jsonObj.get("subType") != null && !jsonObj.get("subType").isJsonNull()) && !jsonObj.get("subType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subType").toString()));
      }
      // validate the optional field `subType`
      if (jsonObj.get("subType") != null && !jsonObj.get("subType").isJsonNull()) {
        SubTypeEnum.validateJsonElement(jsonObj.get("subType"));
      }
      if ((jsonObj.get("subTypeRaw") != null && !jsonObj.get("subTypeRaw").isJsonNull()) && !jsonObj.get("subTypeRaw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subTypeRaw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subTypeRaw").toString()));
      }
      if ((jsonObj.get("subdivision") != null && !jsonObj.get("subdivision").isJsonNull()) && !jsonObj.get("subdivision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdivision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdivision").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
      if ((jsonObj.get("water") != null && !jsonObj.get("water").isJsonNull()) && !jsonObj.get("water").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `water` to be a primitive type in the JSON string but got `%s`", jsonObj.get("water").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Property.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Property' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Property> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Property.class));

       return (TypeAdapter<T>) new TypeAdapter<Property>() {
           @Override
           public void write(JsonWriter out, Property value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Property read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Property given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Property
   * @throws IOException if the JSON string is invalid with respect to Property
   */
  public static Property fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Property.class);
  }

  /**
   * Convert an instance of Property to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

