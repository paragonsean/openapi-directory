/*
 * SimplyRETS
 * The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Agent;
import org.openapitools.client.model.Association;
import org.openapitools.client.model.GeographicData;
import org.openapitools.client.model.MlsInformation;
import org.openapitools.client.model.Office;
import org.openapitools.client.model.Property;
import org.openapitools.client.model.Sales;
import org.openapitools.client.model.School;
import org.openapitools.client.model.StreetAddress;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RETS MLS Listing Property
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:54.606138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Listing {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private StreetAddress address;

  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private Agent agent;

  public static final String SERIALIZED_NAME_ASSOCIATION = "association";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION)
  private Association association;

  public static final String SERIALIZED_NAME_CO_AGENT = "coAgent";
  @SerializedName(SERIALIZED_NAME_CO_AGENT)
  private Agent coAgent;

  public static final String SERIALIZED_NAME_DISCLAIMER = "disclaimer";
  @SerializedName(SERIALIZED_NAME_DISCLAIMER)
  private String disclaimer;

  public static final String SERIALIZED_NAME_GEO = "geo";
  @SerializedName(SERIALIZED_NAME_GEO)
  private GeographicData geo;

  public static final String SERIALIZED_NAME_LEASE_TERM = "leaseTerm";
  @SerializedName(SERIALIZED_NAME_LEASE_TERM)
  private String leaseTerm;

  public static final String SERIALIZED_NAME_LEASE_TYPE = "leaseType";
  @SerializedName(SERIALIZED_NAME_LEASE_TYPE)
  private String leaseType;

  public static final String SERIALIZED_NAME_LIST_DATE = "listDate";
  @SerializedName(SERIALIZED_NAME_LIST_DATE)
  private OffsetDateTime listDate;

  public static final String SERIALIZED_NAME_LIST_PRICE = "listPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private Double listPrice;

  public static final String SERIALIZED_NAME_LISTING_ID = "listingId";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private String listingId;

  public static final String SERIALIZED_NAME_MLS = "mls";
  @SerializedName(SERIALIZED_NAME_MLS)
  private MlsInformation mls;

  public static final String SERIALIZED_NAME_MLS_ID = "mlsId";
  @SerializedName(SERIALIZED_NAME_MLS_ID)
  private Long mlsId;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private Office office;

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private List<String> photos = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVATE_REMARKS = "privateRemarks";
  @SerializedName(SERIALIZED_NAME_PRIVATE_REMARKS)
  private String privateRemarks;

  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private Property property;

  public static final String SERIALIZED_NAME_REMARKS = "remarks";
  @SerializedName(SERIALIZED_NAME_REMARKS)
  private String remarks;

  public static final String SERIALIZED_NAME_SALES = "sales";
  @SerializedName(SERIALIZED_NAME_SALES)
  private Sales sales;

  public static final String SERIALIZED_NAME_SCHOOL = "school";
  @SerializedName(SERIALIZED_NAME_SCHOOL)
  private School school;

  public static final String SERIALIZED_NAME_SHOWING_INSTRUCTIONS = "showingInstructions";
  @SerializedName(SERIALIZED_NAME_SHOWING_INSTRUCTIONS)
  private String showingInstructions;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Tax tax;

  public static final String SERIALIZED_NAME_VIRTUAL_TOUR_URL = "virtualTourUrl";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_TOUR_URL)
  private String virtualTourUrl;

  public Listing() {
  }

  public Listing address(StreetAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public StreetAddress getAddress() {
    return address;
  }

  public void setAddress(StreetAddress address) {
    this.address = address;
  }


  public Listing agent(Agent agent) {
    this.agent = agent;
    return this;
  }

  /**
   * Get agent
   * @return agent
   */
  @javax.annotation.Nullable
  public Agent getAgent() {
    return agent;
  }

  public void setAgent(Agent agent) {
    this.agent = agent;
  }


  public Listing association(Association association) {
    this.association = association;
    return this;
  }

  /**
   * Get association
   * @return association
   */
  @javax.annotation.Nullable
  public Association getAssociation() {
    return association;
  }

  public void setAssociation(Association association) {
    this.association = association;
  }


  public Listing coAgent(Agent coAgent) {
    this.coAgent = coAgent;
    return this;
  }

  /**
   * Get coAgent
   * @return coAgent
   */
  @javax.annotation.Nullable
  public Agent getCoAgent() {
    return coAgent;
  }

  public void setCoAgent(Agent coAgent) {
    this.coAgent = coAgent;
  }


  public Listing disclaimer(String disclaimer) {
    this.disclaimer = disclaimer;
    return this;
  }

  /**
   * Data accuracy disclaimer. The value in the disclaimer may change depending on your MLS vendors rules. 
   * @return disclaimer
   */
  @javax.annotation.Nullable
  public String getDisclaimer() {
    return disclaimer;
  }

  public void setDisclaimer(String disclaimer) {
    this.disclaimer = disclaimer;
  }


  public Listing geo(GeographicData geo) {
    this.geo = geo;
    return this;
  }

  /**
   * Get geo
   * @return geo
   */
  @javax.annotation.Nullable
  public GeographicData getGeo() {
    return geo;
  }

  public void setGeo(GeographicData geo) {
    this.geo = geo;
  }


  public Listing leaseTerm(String leaseTerm) {
    this.leaseTerm = leaseTerm;
    return this;
  }

  /**
   * Represents the length of the lease.
   * @return leaseTerm
   */
  @javax.annotation.Nullable
  public String getLeaseTerm() {
    return leaseTerm;
  }

  public void setLeaseTerm(String leaseTerm) {
    this.leaseTerm = leaseTerm;
  }


  public Listing leaseType(String leaseType) {
    this.leaseType = leaseType;
    return this;
  }

  /**
   * Information about the status of the existing lease on the property.
   * @return leaseType
   */
  @javax.annotation.Nullable
  public String getLeaseType() {
    return leaseType;
  }

  public void setLeaseType(String leaseType) {
    this.leaseType = leaseType;
  }


  public Listing listDate(OffsetDateTime listDate) {
    this.listDate = listDate;
    return this;
  }

  /**
   * Date and time the listing became Active
   * @return listDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getListDate() {
    return listDate;
  }

  public void setListDate(OffsetDateTime listDate) {
    this.listDate = listDate;
  }


  public Listing listPrice(Double listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * Price of the listing
   * @return listPrice
   */
  @javax.annotation.Nullable
  public Double getListPrice() {
    return listPrice;
  }

  public void setListPrice(Double listPrice) {
    this.listPrice = listPrice;
  }


  public Listing listingId(String listingId) {
    this.listingId = listingId;
    return this;
  }

  /**
   * Data Dictionary v1.3 ListingId. The well known identifier for the listing. The value is the id or number by the MLS as a public identifier for the listing.  This identifier should not be confused with the &#x60;mlsId&#x60;, which is specific to the SimplyRETS API. 
   * @return listingId
   */
  @javax.annotation.Nullable
  public String getListingId() {
    return listingId;
  }

  public void setListingId(String listingId) {
    this.listingId = listingId;
  }


  public Listing mls(MlsInformation mls) {
    this.mls = mls;
    return this;
  }

  /**
   * Get mls
   * @return mls
   */
  @javax.annotation.Nullable
  public MlsInformation getMls() {
    return mls;
  }

  public void setMls(MlsInformation mls) {
    this.mls = mls;
  }


  public Listing mlsId(Long mlsId) {
    this.mlsId = mlsId;
    return this;
  }

  /**
   * A unique identifier for this listing specific to the SimplyRETS API. Thie identifier is specific to the SimplyRETS api and has no correlation with the MLS number. Use this id when making requests to the single listing endpoint (eg, &#x60;/properties/{mlsId}&#x60;).  Applications should not rely on specific &#x60;mlsId&#x60;s being present. Instead, apps should dynamically use the &#x60;mlsId&#x60; after using other more general query parameters. Many mls vendors require listings which are expired, terminated or sold to be purged, which will render calls to specific &#x60;mlsId&#x60;s to return nothing (or possibly a 404). 
   * @return mlsId
   */
  @javax.annotation.Nullable
  public Long getMlsId() {
    return mlsId;
  }

  public void setMlsId(Long mlsId) {
    this.mlsId = mlsId;
  }


  public Listing modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Date and time of the last modification
   * @return modified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public Listing office(Office office) {
    this.office = office;
    return this;
  }

  /**
   * Get office
   * @return office
   */
  @javax.annotation.Nullable
  public Office getOffice() {
    return office;
  }

  public void setOffice(Office office) {
    this.office = office;
  }


  public Listing photos(List<String> photos) {
    this.photos = photos;
    return this;
  }

  public Listing addPhotosItem(String photosItem) {
    if (this.photos == null) {
      this.photos = new ArrayList<>();
    }
    this.photos.add(photosItem);
    return this;
  }

  /**
   * Photos of the property. Images are served over https and are suitable for production use on secure websites 
   * @return photos
   */
  @javax.annotation.Nullable
  public List<String> getPhotos() {
    return photos;
  }

  public void setPhotos(List<String> photos) {
    this.photos = photos;
  }


  public Listing privateRemarks(String privateRemarks) {
    this.privateRemarks = privateRemarks;
    return this;
  }

  /**
   * Agent only remarks
   * @return privateRemarks
   */
  @javax.annotation.Nullable
  public String getPrivateRemarks() {
    return privateRemarks;
  }

  public void setPrivateRemarks(String privateRemarks) {
    this.privateRemarks = privateRemarks;
  }


  public Listing property(Property property) {
    this.property = property;
    return this;
  }

  /**
   * Get property
   * @return property
   */
  @javax.annotation.Nullable
  public Property getProperty() {
    return property;
  }

  public void setProperty(Property property) {
    this.property = property;
  }


  public Listing remarks(String remarks) {
    this.remarks = remarks;
    return this;
  }

  /**
   * Description or remarks
   * @return remarks
   */
  @javax.annotation.Nullable
  public String getRemarks() {
    return remarks;
  }

  public void setRemarks(String remarks) {
    this.remarks = remarks;
  }


  public Listing sales(Sales sales) {
    this.sales = sales;
    return this;
  }

  /**
   * Get sales
   * @return sales
   */
  @javax.annotation.Nullable
  public Sales getSales() {
    return sales;
  }

  public void setSales(Sales sales) {
    this.sales = sales;
  }


  public Listing school(School school) {
    this.school = school;
    return this;
  }

  /**
   * Get school
   * @return school
   */
  @javax.annotation.Nullable
  public School getSchool() {
    return school;
  }

  public void setSchool(School school) {
    this.school = school;
  }


  public Listing showingInstructions(String showingInstructions) {
    this.showingInstructions = showingInstructions;
    return this;
  }

  /**
   * Public instructions for showing the property.
   * @return showingInstructions
   */
  @javax.annotation.Nullable
  public String getShowingInstructions() {
    return showingInstructions;
  }

  public void setShowingInstructions(String showingInstructions) {
    this.showingInstructions = showingInstructions;
  }


  public Listing tax(Tax tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public Tax getTax() {
    return tax;
  }

  public void setTax(Tax tax) {
    this.tax = tax;
  }


  public Listing virtualTourUrl(String virtualTourUrl) {
    this.virtualTourUrl = virtualTourUrl;
    return this;
  }

  /**
   * The URL for an unbranded virtual tour of the property.  **Added on 2016/05/04 - Not available for all RETS vendors** 
   * @return virtualTourUrl
   */
  @javax.annotation.Nullable
  public String getVirtualTourUrl() {
    return virtualTourUrl;
  }

  public void setVirtualTourUrl(String virtualTourUrl) {
    this.virtualTourUrl = virtualTourUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Listing listing = (Listing) o;
    return Objects.equals(this.address, listing.address) &&
        Objects.equals(this.agent, listing.agent) &&
        Objects.equals(this.association, listing.association) &&
        Objects.equals(this.coAgent, listing.coAgent) &&
        Objects.equals(this.disclaimer, listing.disclaimer) &&
        Objects.equals(this.geo, listing.geo) &&
        Objects.equals(this.leaseTerm, listing.leaseTerm) &&
        Objects.equals(this.leaseType, listing.leaseType) &&
        Objects.equals(this.listDate, listing.listDate) &&
        Objects.equals(this.listPrice, listing.listPrice) &&
        Objects.equals(this.listingId, listing.listingId) &&
        Objects.equals(this.mls, listing.mls) &&
        Objects.equals(this.mlsId, listing.mlsId) &&
        Objects.equals(this.modified, listing.modified) &&
        Objects.equals(this.office, listing.office) &&
        Objects.equals(this.photos, listing.photos) &&
        Objects.equals(this.privateRemarks, listing.privateRemarks) &&
        Objects.equals(this.property, listing.property) &&
        Objects.equals(this.remarks, listing.remarks) &&
        Objects.equals(this.sales, listing.sales) &&
        Objects.equals(this.school, listing.school) &&
        Objects.equals(this.showingInstructions, listing.showingInstructions) &&
        Objects.equals(this.tax, listing.tax) &&
        Objects.equals(this.virtualTourUrl, listing.virtualTourUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, agent, association, coAgent, disclaimer, geo, leaseTerm, leaseType, listDate, listPrice, listingId, mls, mlsId, modified, office, photos, privateRemarks, property, remarks, sales, school, showingInstructions, tax, virtualTourUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Listing {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    association: ").append(toIndentedString(association)).append("\n");
    sb.append("    coAgent: ").append(toIndentedString(coAgent)).append("\n");
    sb.append("    disclaimer: ").append(toIndentedString(disclaimer)).append("\n");
    sb.append("    geo: ").append(toIndentedString(geo)).append("\n");
    sb.append("    leaseTerm: ").append(toIndentedString(leaseTerm)).append("\n");
    sb.append("    leaseType: ").append(toIndentedString(leaseType)).append("\n");
    sb.append("    listDate: ").append(toIndentedString(listDate)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    mls: ").append(toIndentedString(mls)).append("\n");
    sb.append("    mlsId: ").append(toIndentedString(mlsId)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    privateRemarks: ").append(toIndentedString(privateRemarks)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    remarks: ").append(toIndentedString(remarks)).append("\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("    school: ").append(toIndentedString(school)).append("\n");
    sb.append("    showingInstructions: ").append(toIndentedString(showingInstructions)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    virtualTourUrl: ").append(toIndentedString(virtualTourUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("agent");
    openapiFields.add("association");
    openapiFields.add("coAgent");
    openapiFields.add("disclaimer");
    openapiFields.add("geo");
    openapiFields.add("leaseTerm");
    openapiFields.add("leaseType");
    openapiFields.add("listDate");
    openapiFields.add("listPrice");
    openapiFields.add("listingId");
    openapiFields.add("mls");
    openapiFields.add("mlsId");
    openapiFields.add("modified");
    openapiFields.add("office");
    openapiFields.add("photos");
    openapiFields.add("privateRemarks");
    openapiFields.add("property");
    openapiFields.add("remarks");
    openapiFields.add("sales");
    openapiFields.add("school");
    openapiFields.add("showingInstructions");
    openapiFields.add("tax");
    openapiFields.add("virtualTourUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Listing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Listing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Listing is not found in the empty JSON string", Listing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Listing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Listing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        StreetAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `agent`
      if (jsonObj.get("agent") != null && !jsonObj.get("agent").isJsonNull()) {
        Agent.validateJsonElement(jsonObj.get("agent"));
      }
      // validate the optional field `association`
      if (jsonObj.get("association") != null && !jsonObj.get("association").isJsonNull()) {
        Association.validateJsonElement(jsonObj.get("association"));
      }
      // validate the optional field `coAgent`
      if (jsonObj.get("coAgent") != null && !jsonObj.get("coAgent").isJsonNull()) {
        Agent.validateJsonElement(jsonObj.get("coAgent"));
      }
      if ((jsonObj.get("disclaimer") != null && !jsonObj.get("disclaimer").isJsonNull()) && !jsonObj.get("disclaimer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disclaimer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disclaimer").toString()));
      }
      // validate the optional field `geo`
      if (jsonObj.get("geo") != null && !jsonObj.get("geo").isJsonNull()) {
        GeographicData.validateJsonElement(jsonObj.get("geo"));
      }
      if ((jsonObj.get("leaseTerm") != null && !jsonObj.get("leaseTerm").isJsonNull()) && !jsonObj.get("leaseTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseTerm").toString()));
      }
      if ((jsonObj.get("leaseType") != null && !jsonObj.get("leaseType").isJsonNull()) && !jsonObj.get("leaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseType").toString()));
      }
      if ((jsonObj.get("listingId") != null && !jsonObj.get("listingId").isJsonNull()) && !jsonObj.get("listingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingId").toString()));
      }
      // validate the optional field `mls`
      if (jsonObj.get("mls") != null && !jsonObj.get("mls").isJsonNull()) {
        MlsInformation.validateJsonElement(jsonObj.get("mls"));
      }
      // validate the optional field `office`
      if (jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) {
        Office.validateJsonElement(jsonObj.get("office"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull() && !jsonObj.get("photos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `photos` to be an array in the JSON string but got `%s`", jsonObj.get("photos").toString()));
      }
      if ((jsonObj.get("privateRemarks") != null && !jsonObj.get("privateRemarks").isJsonNull()) && !jsonObj.get("privateRemarks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateRemarks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateRemarks").toString()));
      }
      // validate the optional field `property`
      if (jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull()) {
        Property.validateJsonElement(jsonObj.get("property"));
      }
      if ((jsonObj.get("remarks") != null && !jsonObj.get("remarks").isJsonNull()) && !jsonObj.get("remarks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remarks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remarks").toString()));
      }
      // validate the optional field `sales`
      if (jsonObj.get("sales") != null && !jsonObj.get("sales").isJsonNull()) {
        Sales.validateJsonElement(jsonObj.get("sales"));
      }
      // validate the optional field `school`
      if (jsonObj.get("school") != null && !jsonObj.get("school").isJsonNull()) {
        School.validateJsonElement(jsonObj.get("school"));
      }
      if ((jsonObj.get("showingInstructions") != null && !jsonObj.get("showingInstructions").isJsonNull()) && !jsonObj.get("showingInstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `showingInstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("showingInstructions").toString()));
      }
      // validate the optional field `tax`
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        Tax.validateJsonElement(jsonObj.get("tax"));
      }
      if ((jsonObj.get("virtualTourUrl") != null && !jsonObj.get("virtualTourUrl").isJsonNull()) && !jsonObj.get("virtualTourUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualTourUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualTourUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Listing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Listing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Listing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Listing.class));

       return (TypeAdapter<T>) new TypeAdapter<Listing>() {
           @Override
           public void write(JsonWriter out, Listing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Listing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Listing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Listing
   * @throws IOException if the JSON string is invalid with respect to Listing
   */
  public static Listing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Listing.class);
  }

  /**
   * Convert an instance of Listing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

