/*
 * SimplyRETS
 * The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Listing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimplyRETS Open House object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:54.606138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OpenHouse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_INPUT_ID = "inputId";
  @SerializedName(SERIALIZED_NAME_INPUT_ID)
  private Object inputId;

  public static final String SERIALIZED_NAME_LISTING = "listing";
  @SerializedName(SERIALIZED_NAME_LISTING)
  private Listing listing;

  public static final String SERIALIZED_NAME_OPEN_HOUSE_ID = "openHouseId";
  @SerializedName(SERIALIZED_NAME_OPEN_HOUSE_ID)
  private String openHouseId;

  public static final String SERIALIZED_NAME_OPEN_HOUSE_KEY = "openHouseKey";
  @SerializedName(SERIALIZED_NAME_OPEN_HOUSE_KEY)
  private String openHouseKey;

  public static final String SERIALIZED_NAME_REFRESHMENTS = "refreshments";
  @SerializedName(SERIALIZED_NAME_REFRESHMENTS)
  private String refreshments;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public OpenHouse() {
  }

  public OpenHouse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The remarks and/or description details for the open house
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OpenHouse endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The ending date time for the open house
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public OpenHouse inputId(Object inputId) {
    this.inputId = inputId;
    return this;
  }

  /**
   * The MLS number for the showing agent or agent which created the OpenHouse in the MLS database. 
   * @return inputId
   */
  @javax.annotation.Nullable
  public Object getInputId() {
    return inputId;
  }

  public void setInputId(Object inputId) {
    this.inputId = inputId;
  }


  public OpenHouse listing(Listing listing) {
    this.listing = listing;
    return this;
  }

  /**
   * Get listing
   * @return listing
   */
  @javax.annotation.Nullable
  public Listing getListing() {
    return listing;
  }

  public void setListing(Listing listing) {
    this.listing = listing;
  }


  public OpenHouse openHouseId(String openHouseId) {
    this.openHouseId = openHouseId;
    return this;
  }

  /**
   * The MLS number or id provided by the MLS 
   * @return openHouseId
   */
  @javax.annotation.Nullable
  public String getOpenHouseId() {
    return openHouseId;
  }

  public void setOpenHouseId(String openHouseId) {
    this.openHouseId = openHouseId;
  }


  public OpenHouse openHouseKey(String openHouseKey) {
    this.openHouseKey = openHouseKey;
    return this;
  }

  /**
   * A unique identifier for the open house which is specific to the SimplyRETS API 
   * @return openHouseKey
   */
  @javax.annotation.Nullable
  public String getOpenHouseKey() {
    return openHouseKey;
  }

  public void setOpenHouseKey(String openHouseKey) {
    this.openHouseKey = openHouseKey;
  }


  public OpenHouse refreshments(String refreshments) {
    this.refreshments = refreshments;
    return this;
  }

  /**
   * Provided
   * @return refreshments
   */
  @javax.annotation.Nullable
  public String getRefreshments() {
    return refreshments;
  }

  public void setRefreshments(String refreshments) {
    this.refreshments = refreshments;
  }


  public OpenHouse startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start Date for the open house
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public OpenHouse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The open house type. For example, Public or Private
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenHouse openHouse = (OpenHouse) o;
    return Objects.equals(this.description, openHouse.description) &&
        Objects.equals(this.endTime, openHouse.endTime) &&
        Objects.equals(this.inputId, openHouse.inputId) &&
        Objects.equals(this.listing, openHouse.listing) &&
        Objects.equals(this.openHouseId, openHouse.openHouseId) &&
        Objects.equals(this.openHouseKey, openHouse.openHouseKey) &&
        Objects.equals(this.refreshments, openHouse.refreshments) &&
        Objects.equals(this.startTime, openHouse.startTime) &&
        Objects.equals(this.type, openHouse.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, endTime, inputId, listing, openHouseId, openHouseKey, refreshments, startTime, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenHouse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    inputId: ").append(toIndentedString(inputId)).append("\n");
    sb.append("    listing: ").append(toIndentedString(listing)).append("\n");
    sb.append("    openHouseId: ").append(toIndentedString(openHouseId)).append("\n");
    sb.append("    openHouseKey: ").append(toIndentedString(openHouseKey)).append("\n");
    sb.append("    refreshments: ").append(toIndentedString(refreshments)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("endTime");
    openapiFields.add("inputId");
    openapiFields.add("listing");
    openapiFields.add("openHouseId");
    openapiFields.add("openHouseKey");
    openapiFields.add("refreshments");
    openapiFields.add("startTime");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenHouse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenHouse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenHouse is not found in the empty JSON string", OpenHouse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenHouse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenHouse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `listing`
      if (jsonObj.get("listing") != null && !jsonObj.get("listing").isJsonNull()) {
        Listing.validateJsonElement(jsonObj.get("listing"));
      }
      if ((jsonObj.get("openHouseId") != null && !jsonObj.get("openHouseId").isJsonNull()) && !jsonObj.get("openHouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openHouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openHouseId").toString()));
      }
      if ((jsonObj.get("openHouseKey") != null && !jsonObj.get("openHouseKey").isJsonNull()) && !jsonObj.get("openHouseKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openHouseKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openHouseKey").toString()));
      }
      if ((jsonObj.get("refreshments") != null && !jsonObj.get("refreshments").isJsonNull()) && !jsonObj.get("refreshments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshments").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenHouse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenHouse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenHouse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenHouse.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenHouse>() {
           @Override
           public void write(JsonWriter out, OpenHouse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenHouse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenHouse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenHouse
   * @throws IOException if the JSON string is invalid with respect to OpenHouse
   */
  public static OpenHouse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenHouse.class);
  }

  /**
   * Convert an instance of OpenHouse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

