/*
 * SimplyRETS
 * The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RETS MLS School Data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:54.606138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class School {
  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  public static final String SERIALIZED_NAME_ELEMENTARY_SCHOOL = "elementarySchool";
  @SerializedName(SERIALIZED_NAME_ELEMENTARY_SCHOOL)
  private String elementarySchool;

  public static final String SERIALIZED_NAME_HIGH_SCHOOL = "highSchool";
  @SerializedName(SERIALIZED_NAME_HIGH_SCHOOL)
  private String highSchool;

  public static final String SERIALIZED_NAME_MIDDLE_SCHOOL = "middleSchool";
  @SerializedName(SERIALIZED_NAME_MIDDLE_SCHOOL)
  private String middleSchool;

  public School() {
  }

  public School district(String district) {
    this.district = district;
    return this;
  }

  /**
   * School district name.
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public School elementarySchool(String elementarySchool) {
    this.elementarySchool = elementarySchool;
    return this;
  }

  /**
   * Elementary school name.
   * @return elementarySchool
   */
  @javax.annotation.Nullable
  public String getElementarySchool() {
    return elementarySchool;
  }

  public void setElementarySchool(String elementarySchool) {
    this.elementarySchool = elementarySchool;
  }


  public School highSchool(String highSchool) {
    this.highSchool = highSchool;
    return this;
  }

  /**
   * High school name
   * @return highSchool
   */
  @javax.annotation.Nullable
  public String getHighSchool() {
    return highSchool;
  }

  public void setHighSchool(String highSchool) {
    this.highSchool = highSchool;
  }


  public School middleSchool(String middleSchool) {
    this.middleSchool = middleSchool;
    return this;
  }

  /**
   * Middle or junior school name
   * @return middleSchool
   */
  @javax.annotation.Nullable
  public String getMiddleSchool() {
    return middleSchool;
  }

  public void setMiddleSchool(String middleSchool) {
    this.middleSchool = middleSchool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    School school = (School) o;
    return Objects.equals(this.district, school.district) &&
        Objects.equals(this.elementarySchool, school.elementarySchool) &&
        Objects.equals(this.highSchool, school.highSchool) &&
        Objects.equals(this.middleSchool, school.middleSchool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(district, elementarySchool, highSchool, middleSchool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class School {\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    elementarySchool: ").append(toIndentedString(elementarySchool)).append("\n");
    sb.append("    highSchool: ").append(toIndentedString(highSchool)).append("\n");
    sb.append("    middleSchool: ").append(toIndentedString(middleSchool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("district");
    openapiFields.add("elementarySchool");
    openapiFields.add("highSchool");
    openapiFields.add("middleSchool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to School
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!School.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in School is not found in the empty JSON string", School.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!School.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `School` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("elementarySchool") != null && !jsonObj.get("elementarySchool").isJsonNull()) && !jsonObj.get("elementarySchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elementarySchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elementarySchool").toString()));
      }
      if ((jsonObj.get("highSchool") != null && !jsonObj.get("highSchool").isJsonNull()) && !jsonObj.get("highSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highSchool").toString()));
      }
      if ((jsonObj.get("middleSchool") != null && !jsonObj.get("middleSchool").isJsonNull()) && !jsonObj.get("middleSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleSchool").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!School.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'School' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<School> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(School.class));

       return (TypeAdapter<T>) new TypeAdapter<School>() {
           @Override
           public void write(JsonWriter out, School value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public School read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of School given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of School
   * @throws IOException if the JSON string is invalid with respect to School
   */
  public static School fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, School.class);
  }

  /**
   * Convert an instance of School to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

