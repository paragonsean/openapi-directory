/**
 * SimplyRETS
 * The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListing.h
 *
 * RETS MLS Listing Property
 */

#ifndef OAIListing_H
#define OAIListing_H

#include <QJsonObject>

#include "OAIAgent.h"
#include "OAIAssociation.h"
#include "OAIGeographicData.h"
#include "OAIMlsInformation.h"
#include "OAIOffice.h"
#include "OAIProperty.h"
#include "OAISales.h"
#include "OAISchool.h"
#include "OAIStreetAddress.h"
#include "OAITax.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStreetAddress;
class OAIAgent;
class OAIAssociation;
class OAIGeographicData;
class OAIMlsInformation;
class OAIOffice;
class OAIProperty;
class OAISales;
class OAISchool;
class OAITax;

class OAIListing : public OAIObject {
public:
    OAIListing();
    OAIListing(QString json);
    ~OAIListing() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIStreetAddress getAddress() const;
    void setAddress(const OAIStreetAddress &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    OAIAgent getAgent() const;
    void setAgent(const OAIAgent &agent);
    bool is_agent_Set() const;
    bool is_agent_Valid() const;

    OAIAssociation getAssociation() const;
    void setAssociation(const OAIAssociation &association);
    bool is_association_Set() const;
    bool is_association_Valid() const;

    OAIAgent getCoAgent() const;
    void setCoAgent(const OAIAgent &co_agent);
    bool is_co_agent_Set() const;
    bool is_co_agent_Valid() const;

    QString getDisclaimer() const;
    void setDisclaimer(const QString &disclaimer);
    bool is_disclaimer_Set() const;
    bool is_disclaimer_Valid() const;

    OAIGeographicData getGeo() const;
    void setGeo(const OAIGeographicData &geo);
    bool is_geo_Set() const;
    bool is_geo_Valid() const;

    QString getLeaseTerm() const;
    void setLeaseTerm(const QString &lease_term);
    bool is_lease_term_Set() const;
    bool is_lease_term_Valid() const;

    QString getLeaseType() const;
    void setLeaseType(const QString &lease_type);
    bool is_lease_type_Set() const;
    bool is_lease_type_Valid() const;

    QDateTime getListDate() const;
    void setListDate(const QDateTime &list_date);
    bool is_list_date_Set() const;
    bool is_list_date_Valid() const;

    double getListPrice() const;
    void setListPrice(const double &list_price);
    bool is_list_price_Set() const;
    bool is_list_price_Valid() const;

    QString getListingId() const;
    void setListingId(const QString &listing_id);
    bool is_listing_id_Set() const;
    bool is_listing_id_Valid() const;

    OAIMlsInformation getMls() const;
    void setMls(const OAIMlsInformation &mls);
    bool is_mls_Set() const;
    bool is_mls_Valid() const;

    qint64 getMlsId() const;
    void setMlsId(const qint64 &mls_id);
    bool is_mls_id_Set() const;
    bool is_mls_id_Valid() const;

    QDateTime getModified() const;
    void setModified(const QDateTime &modified);
    bool is_modified_Set() const;
    bool is_modified_Valid() const;

    OAIOffice getOffice() const;
    void setOffice(const OAIOffice &office);
    bool is_office_Set() const;
    bool is_office_Valid() const;

    QList<QString> getPhotos() const;
    void setPhotos(const QList<QString> &photos);
    bool is_photos_Set() const;
    bool is_photos_Valid() const;

    QString getPrivateRemarks() const;
    void setPrivateRemarks(const QString &private_remarks);
    bool is_private_remarks_Set() const;
    bool is_private_remarks_Valid() const;

    OAIProperty getProperty() const;
    void setProperty(const OAIProperty &property);
    bool is_property_Set() const;
    bool is_property_Valid() const;

    QString getRemarks() const;
    void setRemarks(const QString &remarks);
    bool is_remarks_Set() const;
    bool is_remarks_Valid() const;

    OAISales getSales() const;
    void setSales(const OAISales &sales);
    bool is_sales_Set() const;
    bool is_sales_Valid() const;

    OAISchool getSchool() const;
    void setSchool(const OAISchool &school);
    bool is_school_Set() const;
    bool is_school_Valid() const;

    QString getShowingInstructions() const;
    void setShowingInstructions(const QString &showing_instructions);
    bool is_showing_instructions_Set() const;
    bool is_showing_instructions_Valid() const;

    OAITax getTax() const;
    void setTax(const OAITax &tax);
    bool is_tax_Set() const;
    bool is_tax_Valid() const;

    QString getVirtualTourUrl() const;
    void setVirtualTourUrl(const QString &virtual_tour_url);
    bool is_virtual_tour_url_Set() const;
    bool is_virtual_tour_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIStreetAddress m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    OAIAgent m_agent;
    bool m_agent_isSet;
    bool m_agent_isValid;

    OAIAssociation m_association;
    bool m_association_isSet;
    bool m_association_isValid;

    OAIAgent m_co_agent;
    bool m_co_agent_isSet;
    bool m_co_agent_isValid;

    QString m_disclaimer;
    bool m_disclaimer_isSet;
    bool m_disclaimer_isValid;

    OAIGeographicData m_geo;
    bool m_geo_isSet;
    bool m_geo_isValid;

    QString m_lease_term;
    bool m_lease_term_isSet;
    bool m_lease_term_isValid;

    QString m_lease_type;
    bool m_lease_type_isSet;
    bool m_lease_type_isValid;

    QDateTime m_list_date;
    bool m_list_date_isSet;
    bool m_list_date_isValid;

    double m_list_price;
    bool m_list_price_isSet;
    bool m_list_price_isValid;

    QString m_listing_id;
    bool m_listing_id_isSet;
    bool m_listing_id_isValid;

    OAIMlsInformation m_mls;
    bool m_mls_isSet;
    bool m_mls_isValid;

    qint64 m_mls_id;
    bool m_mls_id_isSet;
    bool m_mls_id_isValid;

    QDateTime m_modified;
    bool m_modified_isSet;
    bool m_modified_isValid;

    OAIOffice m_office;
    bool m_office_isSet;
    bool m_office_isValid;

    QList<QString> m_photos;
    bool m_photos_isSet;
    bool m_photos_isValid;

    QString m_private_remarks;
    bool m_private_remarks_isSet;
    bool m_private_remarks_isValid;

    OAIProperty m_property;
    bool m_property_isSet;
    bool m_property_isValid;

    QString m_remarks;
    bool m_remarks_isSet;
    bool m_remarks_isValid;

    OAISales m_sales;
    bool m_sales_isSet;
    bool m_sales_isValid;

    OAISchool m_school;
    bool m_school_isSet;
    bool m_school_isValid;

    QString m_showing_instructions;
    bool m_showing_instructions_isSet;
    bool m_showing_instructions_isValid;

    OAITax m_tax;
    bool m_tax_isSet;
    bool m_tax_isValid;

    QString m_virtual_tour_url;
    bool m_virtual_tour_url_isSet;
    bool m_virtual_tour_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListing)

#endif // OAIListing_H
