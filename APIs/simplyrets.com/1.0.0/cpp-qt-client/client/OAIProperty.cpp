/**
 * SimplyRETS
 * The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperty::OAIProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperty::OAIProperty() {
    this->initializeModel();
}

OAIProperty::~OAIProperty() {}

void OAIProperty::initializeModel() {

    m_accessibility_isSet = false;
    m_accessibility_isValid = false;

    m_additional_rooms_isSet = false;
    m_additional_rooms_isValid = false;

    m_area_isSet = false;
    m_area_isValid = false;

    m_area_source_isSet = false;
    m_area_source_isValid = false;

    m_baths_full_isSet = false;
    m_baths_full_isValid = false;

    m_baths_half_isSet = false;
    m_baths_half_isValid = false;

    m_baths_three_quarter_isSet = false;
    m_baths_three_quarter_isValid = false;

    m_bedrooms_isSet = false;
    m_bedrooms_isValid = false;

    m_construction_isSet = false;
    m_construction_isValid = false;

    m_cooling_isSet = false;
    m_cooling_isValid = false;

    m_exterior_features_isSet = false;
    m_exterior_features_isValid = false;

    m_fireplaces_isSet = false;
    m_fireplaces_isValid = false;

    m_flooring_isSet = false;
    m_flooring_isValid = false;

    m_foundation_isSet = false;
    m_foundation_isValid = false;

    m_garage_spaces_isSet = false;
    m_garage_spaces_isValid = false;

    m_heating_isSet = false;
    m_heating_isValid = false;

    m_interior_features_isSet = false;
    m_interior_features_isValid = false;

    m_laundry_features_isSet = false;
    m_laundry_features_isValid = false;

    m_lot_description_isSet = false;
    m_lot_description_isValid = false;

    m_lot_size_isSet = false;
    m_lot_size_isValid = false;

    m_lot_size_acres_isSet = false;
    m_lot_size_acres_isValid = false;

    m_lot_size_area_isSet = false;
    m_lot_size_area_isValid = false;

    m_lot_size_area_units_isSet = false;
    m_lot_size_area_units_isValid = false;

    m_maintenance_expense_isSet = false;
    m_maintenance_expense_isValid = false;

    m_occupant_name_isSet = false;
    m_occupant_name_isValid = false;

    m_occupant_type_isSet = false;
    m_occupant_type_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_parking_isSet = false;
    m_parking_isValid = false;

    m_pool_features_isSet = false;
    m_pool_features_isValid = false;

    m_roof_isSet = false;
    m_roof_isValid = false;

    m_stories_isSet = false;
    m_stories_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_sub_type_raw_isSet = false;
    m_sub_type_raw_isValid = false;

    m_subdivision_isSet = false;
    m_subdivision_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;

    m_water_isSet = false;
    m_water_isValid = false;

    m_year_built_isSet = false;
    m_year_built_isValid = false;
}

void OAIProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperty::fromJsonObject(QJsonObject json) {

    m_accessibility_isValid = ::OpenAPI::fromJsonValue(m_accessibility, json[QString("accessibility")]);
    m_accessibility_isSet = !json[QString("accessibility")].isNull() && m_accessibility_isValid;

    m_additional_rooms_isValid = ::OpenAPI::fromJsonValue(m_additional_rooms, json[QString("additionalRooms")]);
    m_additional_rooms_isSet = !json[QString("additionalRooms")].isNull() && m_additional_rooms_isValid;

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_area_source_isValid = ::OpenAPI::fromJsonValue(m_area_source, json[QString("areaSource")]);
    m_area_source_isSet = !json[QString("areaSource")].isNull() && m_area_source_isValid;

    m_baths_full_isValid = ::OpenAPI::fromJsonValue(m_baths_full, json[QString("bathsFull")]);
    m_baths_full_isSet = !json[QString("bathsFull")].isNull() && m_baths_full_isValid;

    m_baths_half_isValid = ::OpenAPI::fromJsonValue(m_baths_half, json[QString("bathsHalf")]);
    m_baths_half_isSet = !json[QString("bathsHalf")].isNull() && m_baths_half_isValid;

    m_baths_three_quarter_isValid = ::OpenAPI::fromJsonValue(m_baths_three_quarter, json[QString("bathsThreeQuarter")]);
    m_baths_three_quarter_isSet = !json[QString("bathsThreeQuarter")].isNull() && m_baths_three_quarter_isValid;

    m_bedrooms_isValid = ::OpenAPI::fromJsonValue(m_bedrooms, json[QString("bedrooms")]);
    m_bedrooms_isSet = !json[QString("bedrooms")].isNull() && m_bedrooms_isValid;

    m_construction_isValid = ::OpenAPI::fromJsonValue(m_construction, json[QString("construction")]);
    m_construction_isSet = !json[QString("construction")].isNull() && m_construction_isValid;

    m_cooling_isValid = ::OpenAPI::fromJsonValue(m_cooling, json[QString("cooling")]);
    m_cooling_isSet = !json[QString("cooling")].isNull() && m_cooling_isValid;

    m_exterior_features_isValid = ::OpenAPI::fromJsonValue(m_exterior_features, json[QString("exteriorFeatures")]);
    m_exterior_features_isSet = !json[QString("exteriorFeatures")].isNull() && m_exterior_features_isValid;

    m_fireplaces_isValid = ::OpenAPI::fromJsonValue(m_fireplaces, json[QString("fireplaces")]);
    m_fireplaces_isSet = !json[QString("fireplaces")].isNull() && m_fireplaces_isValid;

    m_flooring_isValid = ::OpenAPI::fromJsonValue(m_flooring, json[QString("flooring")]);
    m_flooring_isSet = !json[QString("flooring")].isNull() && m_flooring_isValid;

    m_foundation_isValid = ::OpenAPI::fromJsonValue(m_foundation, json[QString("foundation")]);
    m_foundation_isSet = !json[QString("foundation")].isNull() && m_foundation_isValid;

    m_garage_spaces_isValid = ::OpenAPI::fromJsonValue(m_garage_spaces, json[QString("garageSpaces")]);
    m_garage_spaces_isSet = !json[QString("garageSpaces")].isNull() && m_garage_spaces_isValid;

    m_heating_isValid = ::OpenAPI::fromJsonValue(m_heating, json[QString("heating")]);
    m_heating_isSet = !json[QString("heating")].isNull() && m_heating_isValid;

    m_interior_features_isValid = ::OpenAPI::fromJsonValue(m_interior_features, json[QString("interiorFeatures")]);
    m_interior_features_isSet = !json[QString("interiorFeatures")].isNull() && m_interior_features_isValid;

    m_laundry_features_isValid = ::OpenAPI::fromJsonValue(m_laundry_features, json[QString("laundryFeatures")]);
    m_laundry_features_isSet = !json[QString("laundryFeatures")].isNull() && m_laundry_features_isValid;

    m_lot_description_isValid = ::OpenAPI::fromJsonValue(m_lot_description, json[QString("lotDescription")]);
    m_lot_description_isSet = !json[QString("lotDescription")].isNull() && m_lot_description_isValid;

    m_lot_size_isValid = ::OpenAPI::fromJsonValue(m_lot_size, json[QString("lotSize")]);
    m_lot_size_isSet = !json[QString("lotSize")].isNull() && m_lot_size_isValid;

    m_lot_size_acres_isValid = ::OpenAPI::fromJsonValue(m_lot_size_acres, json[QString("lotSizeAcres")]);
    m_lot_size_acres_isSet = !json[QString("lotSizeAcres")].isNull() && m_lot_size_acres_isValid;

    m_lot_size_area_isValid = ::OpenAPI::fromJsonValue(m_lot_size_area, json[QString("lotSizeArea")]);
    m_lot_size_area_isSet = !json[QString("lotSizeArea")].isNull() && m_lot_size_area_isValid;

    m_lot_size_area_units_isValid = ::OpenAPI::fromJsonValue(m_lot_size_area_units, json[QString("lotSizeAreaUnits")]);
    m_lot_size_area_units_isSet = !json[QString("lotSizeAreaUnits")].isNull() && m_lot_size_area_units_isValid;

    m_maintenance_expense_isValid = ::OpenAPI::fromJsonValue(m_maintenance_expense, json[QString("maintenanceExpense")]);
    m_maintenance_expense_isSet = !json[QString("maintenanceExpense")].isNull() && m_maintenance_expense_isValid;

    m_occupant_name_isValid = ::OpenAPI::fromJsonValue(m_occupant_name, json[QString("occupantName")]);
    m_occupant_name_isSet = !json[QString("occupantName")].isNull() && m_occupant_name_isValid;

    m_occupant_type_isValid = ::OpenAPI::fromJsonValue(m_occupant_type, json[QString("occupantType")]);
    m_occupant_type_isSet = !json[QString("occupantType")].isNull() && m_occupant_type_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_parking_isValid = ::OpenAPI::fromJsonValue(m_parking, json[QString("parking")]);
    m_parking_isSet = !json[QString("parking")].isNull() && m_parking_isValid;

    m_pool_features_isValid = ::OpenAPI::fromJsonValue(m_pool_features, json[QString("poolFeatures")]);
    m_pool_features_isSet = !json[QString("poolFeatures")].isNull() && m_pool_features_isValid;

    m_roof_isValid = ::OpenAPI::fromJsonValue(m_roof, json[QString("roof")]);
    m_roof_isSet = !json[QString("roof")].isNull() && m_roof_isValid;

    m_stories_isValid = ::OpenAPI::fromJsonValue(m_stories, json[QString("stories")]);
    m_stories_isSet = !json[QString("stories")].isNull() && m_stories_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_sub_type_raw_isValid = ::OpenAPI::fromJsonValue(m_sub_type_raw, json[QString("subTypeRaw")]);
    m_sub_type_raw_isSet = !json[QString("subTypeRaw")].isNull() && m_sub_type_raw_isValid;

    m_subdivision_isValid = ::OpenAPI::fromJsonValue(m_subdivision, json[QString("subdivision")]);
    m_subdivision_isSet = !json[QString("subdivision")].isNull() && m_subdivision_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;

    m_water_isValid = ::OpenAPI::fromJsonValue(m_water, json[QString("water")]);
    m_water_isSet = !json[QString("water")].isNull() && m_water_isValid;

    m_year_built_isValid = ::OpenAPI::fromJsonValue(m_year_built, json[QString("yearBuilt")]);
    m_year_built_isSet = !json[QString("yearBuilt")].isNull() && m_year_built_isValid;
}

QString OAIProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility_isSet) {
        obj.insert(QString("accessibility"), ::OpenAPI::toJsonValue(m_accessibility));
    }
    if (m_additional_rooms_isSet) {
        obj.insert(QString("additionalRooms"), ::OpenAPI::toJsonValue(m_additional_rooms));
    }
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_area_source_isSet) {
        obj.insert(QString("areaSource"), ::OpenAPI::toJsonValue(m_area_source));
    }
    if (m_baths_full_isSet) {
        obj.insert(QString("bathsFull"), ::OpenAPI::toJsonValue(m_baths_full));
    }
    if (m_baths_half_isSet) {
        obj.insert(QString("bathsHalf"), ::OpenAPI::toJsonValue(m_baths_half));
    }
    if (m_baths_three_quarter_isSet) {
        obj.insert(QString("bathsThreeQuarter"), ::OpenAPI::toJsonValue(m_baths_three_quarter));
    }
    if (m_bedrooms_isSet) {
        obj.insert(QString("bedrooms"), ::OpenAPI::toJsonValue(m_bedrooms));
    }
    if (m_construction_isSet) {
        obj.insert(QString("construction"), ::OpenAPI::toJsonValue(m_construction));
    }
    if (m_cooling_isSet) {
        obj.insert(QString("cooling"), ::OpenAPI::toJsonValue(m_cooling));
    }
    if (m_exterior_features_isSet) {
        obj.insert(QString("exteriorFeatures"), ::OpenAPI::toJsonValue(m_exterior_features));
    }
    if (m_fireplaces_isSet) {
        obj.insert(QString("fireplaces"), ::OpenAPI::toJsonValue(m_fireplaces));
    }
    if (m_flooring_isSet) {
        obj.insert(QString("flooring"), ::OpenAPI::toJsonValue(m_flooring));
    }
    if (m_foundation_isSet) {
        obj.insert(QString("foundation"), ::OpenAPI::toJsonValue(m_foundation));
    }
    if (m_garage_spaces_isSet) {
        obj.insert(QString("garageSpaces"), ::OpenAPI::toJsonValue(m_garage_spaces));
    }
    if (m_heating_isSet) {
        obj.insert(QString("heating"), ::OpenAPI::toJsonValue(m_heating));
    }
    if (m_interior_features_isSet) {
        obj.insert(QString("interiorFeatures"), ::OpenAPI::toJsonValue(m_interior_features));
    }
    if (m_laundry_features_isSet) {
        obj.insert(QString("laundryFeatures"), ::OpenAPI::toJsonValue(m_laundry_features));
    }
    if (m_lot_description_isSet) {
        obj.insert(QString("lotDescription"), ::OpenAPI::toJsonValue(m_lot_description));
    }
    if (m_lot_size_isSet) {
        obj.insert(QString("lotSize"), ::OpenAPI::toJsonValue(m_lot_size));
    }
    if (m_lot_size_acres_isSet) {
        obj.insert(QString("lotSizeAcres"), ::OpenAPI::toJsonValue(m_lot_size_acres));
    }
    if (m_lot_size_area_isSet) {
        obj.insert(QString("lotSizeArea"), ::OpenAPI::toJsonValue(m_lot_size_area));
    }
    if (m_lot_size_area_units_isSet) {
        obj.insert(QString("lotSizeAreaUnits"), ::OpenAPI::toJsonValue(m_lot_size_area_units));
    }
    if (m_maintenance_expense_isSet) {
        obj.insert(QString("maintenanceExpense"), ::OpenAPI::toJsonValue(m_maintenance_expense));
    }
    if (m_occupant_name_isSet) {
        obj.insert(QString("occupantName"), ::OpenAPI::toJsonValue(m_occupant_name));
    }
    if (m_occupant_type_isSet) {
        obj.insert(QString("occupantType"), ::OpenAPI::toJsonValue(m_occupant_type));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_parking.isSet()) {
        obj.insert(QString("parking"), ::OpenAPI::toJsonValue(m_parking));
    }
    if (m_pool_features_isSet) {
        obj.insert(QString("poolFeatures"), ::OpenAPI::toJsonValue(m_pool_features));
    }
    if (m_roof_isSet) {
        obj.insert(QString("roof"), ::OpenAPI::toJsonValue(m_roof));
    }
    if (m_stories_isSet) {
        obj.insert(QString("stories"), ::OpenAPI::toJsonValue(m_stories));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_sub_type_raw_isSet) {
        obj.insert(QString("subTypeRaw"), ::OpenAPI::toJsonValue(m_sub_type_raw));
    }
    if (m_subdivision_isSet) {
        obj.insert(QString("subdivision"), ::OpenAPI::toJsonValue(m_subdivision));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    if (m_water_isSet) {
        obj.insert(QString("water"), ::OpenAPI::toJsonValue(m_water));
    }
    if (m_year_built_isSet) {
        obj.insert(QString("yearBuilt"), ::OpenAPI::toJsonValue(m_year_built));
    }
    return obj;
}

QString OAIProperty::getAccessibility() const {
    return m_accessibility;
}
void OAIProperty::setAccessibility(const QString &accessibility) {
    m_accessibility = accessibility;
    m_accessibility_isSet = true;
}

bool OAIProperty::is_accessibility_Set() const{
    return m_accessibility_isSet;
}

bool OAIProperty::is_accessibility_Valid() const{
    return m_accessibility_isValid;
}

QString OAIProperty::getAdditionalRooms() const {
    return m_additional_rooms;
}
void OAIProperty::setAdditionalRooms(const QString &additional_rooms) {
    m_additional_rooms = additional_rooms;
    m_additional_rooms_isSet = true;
}

bool OAIProperty::is_additional_rooms_Set() const{
    return m_additional_rooms_isSet;
}

bool OAIProperty::is_additional_rooms_Valid() const{
    return m_additional_rooms_isValid;
}

qint64 OAIProperty::getArea() const {
    return m_area;
}
void OAIProperty::setArea(const qint64 &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIProperty::is_area_Set() const{
    return m_area_isSet;
}

bool OAIProperty::is_area_Valid() const{
    return m_area_isValid;
}

QString OAIProperty::getAreaSource() const {
    return m_area_source;
}
void OAIProperty::setAreaSource(const QString &area_source) {
    m_area_source = area_source;
    m_area_source_isSet = true;
}

bool OAIProperty::is_area_source_Set() const{
    return m_area_source_isSet;
}

bool OAIProperty::is_area_source_Valid() const{
    return m_area_source_isValid;
}

qint64 OAIProperty::getBathsFull() const {
    return m_baths_full;
}
void OAIProperty::setBathsFull(const qint64 &baths_full) {
    m_baths_full = baths_full;
    m_baths_full_isSet = true;
}

bool OAIProperty::is_baths_full_Set() const{
    return m_baths_full_isSet;
}

bool OAIProperty::is_baths_full_Valid() const{
    return m_baths_full_isValid;
}

qint64 OAIProperty::getBathsHalf() const {
    return m_baths_half;
}
void OAIProperty::setBathsHalf(const qint64 &baths_half) {
    m_baths_half = baths_half;
    m_baths_half_isSet = true;
}

bool OAIProperty::is_baths_half_Set() const{
    return m_baths_half_isSet;
}

bool OAIProperty::is_baths_half_Valid() const{
    return m_baths_half_isValid;
}

qint64 OAIProperty::getBathsThreeQuarter() const {
    return m_baths_three_quarter;
}
void OAIProperty::setBathsThreeQuarter(const qint64 &baths_three_quarter) {
    m_baths_three_quarter = baths_three_quarter;
    m_baths_three_quarter_isSet = true;
}

bool OAIProperty::is_baths_three_quarter_Set() const{
    return m_baths_three_quarter_isSet;
}

bool OAIProperty::is_baths_three_quarter_Valid() const{
    return m_baths_three_quarter_isValid;
}

qint64 OAIProperty::getBedrooms() const {
    return m_bedrooms;
}
void OAIProperty::setBedrooms(const qint64 &bedrooms) {
    m_bedrooms = bedrooms;
    m_bedrooms_isSet = true;
}

bool OAIProperty::is_bedrooms_Set() const{
    return m_bedrooms_isSet;
}

bool OAIProperty::is_bedrooms_Valid() const{
    return m_bedrooms_isValid;
}

QString OAIProperty::getConstruction() const {
    return m_construction;
}
void OAIProperty::setConstruction(const QString &construction) {
    m_construction = construction;
    m_construction_isSet = true;
}

bool OAIProperty::is_construction_Set() const{
    return m_construction_isSet;
}

bool OAIProperty::is_construction_Valid() const{
    return m_construction_isValid;
}

QString OAIProperty::getCooling() const {
    return m_cooling;
}
void OAIProperty::setCooling(const QString &cooling) {
    m_cooling = cooling;
    m_cooling_isSet = true;
}

bool OAIProperty::is_cooling_Set() const{
    return m_cooling_isSet;
}

bool OAIProperty::is_cooling_Valid() const{
    return m_cooling_isValid;
}

QString OAIProperty::getExteriorFeatures() const {
    return m_exterior_features;
}
void OAIProperty::setExteriorFeatures(const QString &exterior_features) {
    m_exterior_features = exterior_features;
    m_exterior_features_isSet = true;
}

bool OAIProperty::is_exterior_features_Set() const{
    return m_exterior_features_isSet;
}

bool OAIProperty::is_exterior_features_Valid() const{
    return m_exterior_features_isValid;
}

qint64 OAIProperty::getFireplaces() const {
    return m_fireplaces;
}
void OAIProperty::setFireplaces(const qint64 &fireplaces) {
    m_fireplaces = fireplaces;
    m_fireplaces_isSet = true;
}

bool OAIProperty::is_fireplaces_Set() const{
    return m_fireplaces_isSet;
}

bool OAIProperty::is_fireplaces_Valid() const{
    return m_fireplaces_isValid;
}

QString OAIProperty::getFlooring() const {
    return m_flooring;
}
void OAIProperty::setFlooring(const QString &flooring) {
    m_flooring = flooring;
    m_flooring_isSet = true;
}

bool OAIProperty::is_flooring_Set() const{
    return m_flooring_isSet;
}

bool OAIProperty::is_flooring_Valid() const{
    return m_flooring_isValid;
}

QString OAIProperty::getFoundation() const {
    return m_foundation;
}
void OAIProperty::setFoundation(const QString &foundation) {
    m_foundation = foundation;
    m_foundation_isSet = true;
}

bool OAIProperty::is_foundation_Set() const{
    return m_foundation_isSet;
}

bool OAIProperty::is_foundation_Valid() const{
    return m_foundation_isValid;
}

float OAIProperty::getGarageSpaces() const {
    return m_garage_spaces;
}
void OAIProperty::setGarageSpaces(const float &garage_spaces) {
    m_garage_spaces = garage_spaces;
    m_garage_spaces_isSet = true;
}

bool OAIProperty::is_garage_spaces_Set() const{
    return m_garage_spaces_isSet;
}

bool OAIProperty::is_garage_spaces_Valid() const{
    return m_garage_spaces_isValid;
}

QString OAIProperty::getHeating() const {
    return m_heating;
}
void OAIProperty::setHeating(const QString &heating) {
    m_heating = heating;
    m_heating_isSet = true;
}

bool OAIProperty::is_heating_Set() const{
    return m_heating_isSet;
}

bool OAIProperty::is_heating_Valid() const{
    return m_heating_isValid;
}

QString OAIProperty::getInteriorFeatures() const {
    return m_interior_features;
}
void OAIProperty::setInteriorFeatures(const QString &interior_features) {
    m_interior_features = interior_features;
    m_interior_features_isSet = true;
}

bool OAIProperty::is_interior_features_Set() const{
    return m_interior_features_isSet;
}

bool OAIProperty::is_interior_features_Valid() const{
    return m_interior_features_isValid;
}

QString OAIProperty::getLaundryFeatures() const {
    return m_laundry_features;
}
void OAIProperty::setLaundryFeatures(const QString &laundry_features) {
    m_laundry_features = laundry_features;
    m_laundry_features_isSet = true;
}

bool OAIProperty::is_laundry_features_Set() const{
    return m_laundry_features_isSet;
}

bool OAIProperty::is_laundry_features_Valid() const{
    return m_laundry_features_isValid;
}

QString OAIProperty::getLotDescription() const {
    return m_lot_description;
}
void OAIProperty::setLotDescription(const QString &lot_description) {
    m_lot_description = lot_description;
    m_lot_description_isSet = true;
}

bool OAIProperty::is_lot_description_Set() const{
    return m_lot_description_isSet;
}

bool OAIProperty::is_lot_description_Valid() const{
    return m_lot_description_isValid;
}

QString OAIProperty::getLotSize() const {
    return m_lot_size;
}
void OAIProperty::setLotSize(const QString &lot_size) {
    m_lot_size = lot_size;
    m_lot_size_isSet = true;
}

bool OAIProperty::is_lot_size_Set() const{
    return m_lot_size_isSet;
}

bool OAIProperty::is_lot_size_Valid() const{
    return m_lot_size_isValid;
}

float OAIProperty::getLotSizeAcres() const {
    return m_lot_size_acres;
}
void OAIProperty::setLotSizeAcres(const float &lot_size_acres) {
    m_lot_size_acres = lot_size_acres;
    m_lot_size_acres_isSet = true;
}

bool OAIProperty::is_lot_size_acres_Set() const{
    return m_lot_size_acres_isSet;
}

bool OAIProperty::is_lot_size_acres_Valid() const{
    return m_lot_size_acres_isValid;
}

double OAIProperty::getLotSizeArea() const {
    return m_lot_size_area;
}
void OAIProperty::setLotSizeArea(const double &lot_size_area) {
    m_lot_size_area = lot_size_area;
    m_lot_size_area_isSet = true;
}

bool OAIProperty::is_lot_size_area_Set() const{
    return m_lot_size_area_isSet;
}

bool OAIProperty::is_lot_size_area_Valid() const{
    return m_lot_size_area_isValid;
}

QString OAIProperty::getLotSizeAreaUnits() const {
    return m_lot_size_area_units;
}
void OAIProperty::setLotSizeAreaUnits(const QString &lot_size_area_units) {
    m_lot_size_area_units = lot_size_area_units;
    m_lot_size_area_units_isSet = true;
}

bool OAIProperty::is_lot_size_area_units_Set() const{
    return m_lot_size_area_units_isSet;
}

bool OAIProperty::is_lot_size_area_units_Valid() const{
    return m_lot_size_area_units_isValid;
}

float OAIProperty::getMaintenanceExpense() const {
    return m_maintenance_expense;
}
void OAIProperty::setMaintenanceExpense(const float &maintenance_expense) {
    m_maintenance_expense = maintenance_expense;
    m_maintenance_expense_isSet = true;
}

bool OAIProperty::is_maintenance_expense_Set() const{
    return m_maintenance_expense_isSet;
}

bool OAIProperty::is_maintenance_expense_Valid() const{
    return m_maintenance_expense_isValid;
}

QString OAIProperty::getOccupantName() const {
    return m_occupant_name;
}
void OAIProperty::setOccupantName(const QString &occupant_name) {
    m_occupant_name = occupant_name;
    m_occupant_name_isSet = true;
}

bool OAIProperty::is_occupant_name_Set() const{
    return m_occupant_name_isSet;
}

bool OAIProperty::is_occupant_name_Valid() const{
    return m_occupant_name_isValid;
}

QString OAIProperty::getOccupantType() const {
    return m_occupant_type;
}
void OAIProperty::setOccupantType(const QString &occupant_type) {
    m_occupant_type = occupant_type;
    m_occupant_type_isSet = true;
}

bool OAIProperty::is_occupant_type_Set() const{
    return m_occupant_type_isSet;
}

bool OAIProperty::is_occupant_type_Valid() const{
    return m_occupant_type_isValid;
}

QString OAIProperty::getOwnerName() const {
    return m_owner_name;
}
void OAIProperty::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIProperty::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIProperty::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

OAIParking OAIProperty::getParking() const {
    return m_parking;
}
void OAIProperty::setParking(const OAIParking &parking) {
    m_parking = parking;
    m_parking_isSet = true;
}

bool OAIProperty::is_parking_Set() const{
    return m_parking_isSet;
}

bool OAIProperty::is_parking_Valid() const{
    return m_parking_isValid;
}

QString OAIProperty::getPoolFeatures() const {
    return m_pool_features;
}
void OAIProperty::setPoolFeatures(const QString &pool_features) {
    m_pool_features = pool_features;
    m_pool_features_isSet = true;
}

bool OAIProperty::is_pool_features_Set() const{
    return m_pool_features_isSet;
}

bool OAIProperty::is_pool_features_Valid() const{
    return m_pool_features_isValid;
}

QString OAIProperty::getRoof() const {
    return m_roof;
}
void OAIProperty::setRoof(const QString &roof) {
    m_roof = roof;
    m_roof_isSet = true;
}

bool OAIProperty::is_roof_Set() const{
    return m_roof_isSet;
}

bool OAIProperty::is_roof_Valid() const{
    return m_roof_isValid;
}

float OAIProperty::getStories() const {
    return m_stories;
}
void OAIProperty::setStories(const float &stories) {
    m_stories = stories;
    m_stories_isSet = true;
}

bool OAIProperty::is_stories_Set() const{
    return m_stories_isSet;
}

bool OAIProperty::is_stories_Valid() const{
    return m_stories_isValid;
}

QString OAIProperty::getStyle() const {
    return m_style;
}
void OAIProperty::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIProperty::is_style_Set() const{
    return m_style_isSet;
}

bool OAIProperty::is_style_Valid() const{
    return m_style_isValid;
}

QString OAIProperty::getSubType() const {
    return m_sub_type;
}
void OAIProperty::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIProperty::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIProperty::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAIProperty::getSubTypeRaw() const {
    return m_sub_type_raw;
}
void OAIProperty::setSubTypeRaw(const QString &sub_type_raw) {
    m_sub_type_raw = sub_type_raw;
    m_sub_type_raw_isSet = true;
}

bool OAIProperty::is_sub_type_raw_Set() const{
    return m_sub_type_raw_isSet;
}

bool OAIProperty::is_sub_type_raw_Valid() const{
    return m_sub_type_raw_isValid;
}

QString OAIProperty::getSubdivision() const {
    return m_subdivision;
}
void OAIProperty::setSubdivision(const QString &subdivision) {
    m_subdivision = subdivision;
    m_subdivision_isSet = true;
}

bool OAIProperty::is_subdivision_Set() const{
    return m_subdivision_isSet;
}

bool OAIProperty::is_subdivision_Valid() const{
    return m_subdivision_isValid;
}

QString OAIProperty::getType() const {
    return m_type;
}
void OAIProperty::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProperty::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProperty::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProperty::getView() const {
    return m_view;
}
void OAIProperty::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIProperty::is_view_Set() const{
    return m_view_isSet;
}

bool OAIProperty::is_view_Valid() const{
    return m_view_isValid;
}

QString OAIProperty::getWater() const {
    return m_water;
}
void OAIProperty::setWater(const QString &water) {
    m_water = water;
    m_water_isSet = true;
}

bool OAIProperty::is_water_Set() const{
    return m_water_isSet;
}

bool OAIProperty::is_water_Valid() const{
    return m_water_isValid;
}

qint64 OAIProperty::getYearBuilt() const {
    return m_year_built;
}
void OAIProperty::setYearBuilt(const qint64 &year_built) {
    m_year_built = year_built;
    m_year_built_isSet = true;
}

bool OAIProperty::is_year_built_Set() const{
    return m_year_built_isSet;
}

bool OAIProperty::is_year_built_Valid() const{
    return m_year_built_isValid;
}

bool OAIProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baths_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baths_half_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baths_three_quarter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bedrooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_construction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fireplaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flooring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foundation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_garage_spaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interior_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_laundry_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size_acres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size_area_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_expense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roof_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdivision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_built_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
