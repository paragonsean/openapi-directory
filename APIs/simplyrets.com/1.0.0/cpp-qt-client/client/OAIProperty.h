/**
 * SimplyRETS
 * The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProperty.h
 *
 * Rets MLS Listing Property
 */

#ifndef OAIProperty_H
#define OAIProperty_H

#include <QJsonObject>

#include "OAIParking.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIParking;

class OAIProperty : public OAIObject {
public:
    OAIProperty();
    OAIProperty(QString json);
    ~OAIProperty() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessibility() const;
    void setAccessibility(const QString &accessibility);
    bool is_accessibility_Set() const;
    bool is_accessibility_Valid() const;

    QString getAdditionalRooms() const;
    void setAdditionalRooms(const QString &additional_rooms);
    bool is_additional_rooms_Set() const;
    bool is_additional_rooms_Valid() const;

    qint64 getArea() const;
    void setArea(const qint64 &area);
    bool is_area_Set() const;
    bool is_area_Valid() const;

    QString getAreaSource() const;
    void setAreaSource(const QString &area_source);
    bool is_area_source_Set() const;
    bool is_area_source_Valid() const;

    qint64 getBathsFull() const;
    void setBathsFull(const qint64 &baths_full);
    bool is_baths_full_Set() const;
    bool is_baths_full_Valid() const;

    qint64 getBathsHalf() const;
    void setBathsHalf(const qint64 &baths_half);
    bool is_baths_half_Set() const;
    bool is_baths_half_Valid() const;

    qint64 getBathsThreeQuarter() const;
    void setBathsThreeQuarter(const qint64 &baths_three_quarter);
    bool is_baths_three_quarter_Set() const;
    bool is_baths_three_quarter_Valid() const;

    qint64 getBedrooms() const;
    void setBedrooms(const qint64 &bedrooms);
    bool is_bedrooms_Set() const;
    bool is_bedrooms_Valid() const;

    QString getConstruction() const;
    void setConstruction(const QString &construction);
    bool is_construction_Set() const;
    bool is_construction_Valid() const;

    QString getCooling() const;
    void setCooling(const QString &cooling);
    bool is_cooling_Set() const;
    bool is_cooling_Valid() const;

    QString getExteriorFeatures() const;
    void setExteriorFeatures(const QString &exterior_features);
    bool is_exterior_features_Set() const;
    bool is_exterior_features_Valid() const;

    qint64 getFireplaces() const;
    void setFireplaces(const qint64 &fireplaces);
    bool is_fireplaces_Set() const;
    bool is_fireplaces_Valid() const;

    QString getFlooring() const;
    void setFlooring(const QString &flooring);
    bool is_flooring_Set() const;
    bool is_flooring_Valid() const;

    QString getFoundation() const;
    void setFoundation(const QString &foundation);
    bool is_foundation_Set() const;
    bool is_foundation_Valid() const;

    float getGarageSpaces() const;
    void setGarageSpaces(const float &garage_spaces);
    bool is_garage_spaces_Set() const;
    bool is_garage_spaces_Valid() const;

    QString getHeating() const;
    void setHeating(const QString &heating);
    bool is_heating_Set() const;
    bool is_heating_Valid() const;

    QString getInteriorFeatures() const;
    void setInteriorFeatures(const QString &interior_features);
    bool is_interior_features_Set() const;
    bool is_interior_features_Valid() const;

    QString getLaundryFeatures() const;
    void setLaundryFeatures(const QString &laundry_features);
    bool is_laundry_features_Set() const;
    bool is_laundry_features_Valid() const;

    QString getLotDescription() const;
    void setLotDescription(const QString &lot_description);
    bool is_lot_description_Set() const;
    bool is_lot_description_Valid() const;

    QString getLotSize() const;
    void setLotSize(const QString &lot_size);
    bool is_lot_size_Set() const;
    bool is_lot_size_Valid() const;

    float getLotSizeAcres() const;
    void setLotSizeAcres(const float &lot_size_acres);
    bool is_lot_size_acres_Set() const;
    bool is_lot_size_acres_Valid() const;

    double getLotSizeArea() const;
    void setLotSizeArea(const double &lot_size_area);
    bool is_lot_size_area_Set() const;
    bool is_lot_size_area_Valid() const;

    QString getLotSizeAreaUnits() const;
    void setLotSizeAreaUnits(const QString &lot_size_area_units);
    bool is_lot_size_area_units_Set() const;
    bool is_lot_size_area_units_Valid() const;

    float getMaintenanceExpense() const;
    void setMaintenanceExpense(const float &maintenance_expense);
    bool is_maintenance_expense_Set() const;
    bool is_maintenance_expense_Valid() const;

    QString getOccupantName() const;
    void setOccupantName(const QString &occupant_name);
    bool is_occupant_name_Set() const;
    bool is_occupant_name_Valid() const;

    QString getOccupantType() const;
    void setOccupantType(const QString &occupant_type);
    bool is_occupant_type_Set() const;
    bool is_occupant_type_Valid() const;

    QString getOwnerName() const;
    void setOwnerName(const QString &owner_name);
    bool is_owner_name_Set() const;
    bool is_owner_name_Valid() const;

    OAIParking getParking() const;
    void setParking(const OAIParking &parking);
    bool is_parking_Set() const;
    bool is_parking_Valid() const;

    QString getPoolFeatures() const;
    void setPoolFeatures(const QString &pool_features);
    bool is_pool_features_Set() const;
    bool is_pool_features_Valid() const;

    QString getRoof() const;
    void setRoof(const QString &roof);
    bool is_roof_Set() const;
    bool is_roof_Valid() const;

    float getStories() const;
    void setStories(const float &stories);
    bool is_stories_Set() const;
    bool is_stories_Valid() const;

    QString getStyle() const;
    void setStyle(const QString &style);
    bool is_style_Set() const;
    bool is_style_Valid() const;

    QString getSubType() const;
    void setSubType(const QString &sub_type);
    bool is_sub_type_Set() const;
    bool is_sub_type_Valid() const;

    QString getSubTypeRaw() const;
    void setSubTypeRaw(const QString &sub_type_raw);
    bool is_sub_type_raw_Set() const;
    bool is_sub_type_raw_Valid() const;

    QString getSubdivision() const;
    void setSubdivision(const QString &subdivision);
    bool is_subdivision_Set() const;
    bool is_subdivision_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getView() const;
    void setView(const QString &view);
    bool is_view_Set() const;
    bool is_view_Valid() const;

    QString getWater() const;
    void setWater(const QString &water);
    bool is_water_Set() const;
    bool is_water_Valid() const;

    qint64 getYearBuilt() const;
    void setYearBuilt(const qint64 &year_built);
    bool is_year_built_Set() const;
    bool is_year_built_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_accessibility;
    bool m_accessibility_isSet;
    bool m_accessibility_isValid;

    QString m_additional_rooms;
    bool m_additional_rooms_isSet;
    bool m_additional_rooms_isValid;

    qint64 m_area;
    bool m_area_isSet;
    bool m_area_isValid;

    QString m_area_source;
    bool m_area_source_isSet;
    bool m_area_source_isValid;

    qint64 m_baths_full;
    bool m_baths_full_isSet;
    bool m_baths_full_isValid;

    qint64 m_baths_half;
    bool m_baths_half_isSet;
    bool m_baths_half_isValid;

    qint64 m_baths_three_quarter;
    bool m_baths_three_quarter_isSet;
    bool m_baths_three_quarter_isValid;

    qint64 m_bedrooms;
    bool m_bedrooms_isSet;
    bool m_bedrooms_isValid;

    QString m_construction;
    bool m_construction_isSet;
    bool m_construction_isValid;

    QString m_cooling;
    bool m_cooling_isSet;
    bool m_cooling_isValid;

    QString m_exterior_features;
    bool m_exterior_features_isSet;
    bool m_exterior_features_isValid;

    qint64 m_fireplaces;
    bool m_fireplaces_isSet;
    bool m_fireplaces_isValid;

    QString m_flooring;
    bool m_flooring_isSet;
    bool m_flooring_isValid;

    QString m_foundation;
    bool m_foundation_isSet;
    bool m_foundation_isValid;

    float m_garage_spaces;
    bool m_garage_spaces_isSet;
    bool m_garage_spaces_isValid;

    QString m_heating;
    bool m_heating_isSet;
    bool m_heating_isValid;

    QString m_interior_features;
    bool m_interior_features_isSet;
    bool m_interior_features_isValid;

    QString m_laundry_features;
    bool m_laundry_features_isSet;
    bool m_laundry_features_isValid;

    QString m_lot_description;
    bool m_lot_description_isSet;
    bool m_lot_description_isValid;

    QString m_lot_size;
    bool m_lot_size_isSet;
    bool m_lot_size_isValid;

    float m_lot_size_acres;
    bool m_lot_size_acres_isSet;
    bool m_lot_size_acres_isValid;

    double m_lot_size_area;
    bool m_lot_size_area_isSet;
    bool m_lot_size_area_isValid;

    QString m_lot_size_area_units;
    bool m_lot_size_area_units_isSet;
    bool m_lot_size_area_units_isValid;

    float m_maintenance_expense;
    bool m_maintenance_expense_isSet;
    bool m_maintenance_expense_isValid;

    QString m_occupant_name;
    bool m_occupant_name_isSet;
    bool m_occupant_name_isValid;

    QString m_occupant_type;
    bool m_occupant_type_isSet;
    bool m_occupant_type_isValid;

    QString m_owner_name;
    bool m_owner_name_isSet;
    bool m_owner_name_isValid;

    OAIParking m_parking;
    bool m_parking_isSet;
    bool m_parking_isValid;

    QString m_pool_features;
    bool m_pool_features_isSet;
    bool m_pool_features_isValid;

    QString m_roof;
    bool m_roof_isSet;
    bool m_roof_isValid;

    float m_stories;
    bool m_stories_isSet;
    bool m_stories_isValid;

    QString m_style;
    bool m_style_isSet;
    bool m_style_isValid;

    QString m_sub_type;
    bool m_sub_type_isSet;
    bool m_sub_type_isValid;

    QString m_sub_type_raw;
    bool m_sub_type_raw_isSet;
    bool m_sub_type_raw_isValid;

    QString m_subdivision;
    bool m_subdivision_isSet;
    bool m_subdivision_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_view;
    bool m_view_isSet;
    bool m_view_isValid;

    QString m_water;
    bool m_water_isSet;
    bool m_water_isValid;

    qint64 m_year_built;
    bool m_year_built_isSet;
    bool m_year_built_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProperty)

#endif // OAIProperty_H
