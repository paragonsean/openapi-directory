/**
 * SimplyRETS
 * The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StreetAddress model module.
 * @module model/StreetAddress
 * @version 1.0.0
 */
class StreetAddress {
    /**
     * Constructs a new <code>StreetAddress</code>.
     * RETS MLS Street Address
     * @alias module:model/StreetAddress
     */
    constructor() { 
        
        StreetAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreetAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreetAddress} obj Optional instance to populate.
     * @return {module:model/StreetAddress} The populated <code>StreetAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreetAddress();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('crossStreet')) {
                obj['crossStreet'] = ApiClient.convertToType(data['crossStreet'], 'String');
            }
            if (data.hasOwnProperty('full')) {
                obj['full'] = ApiClient.convertToType(data['full'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('streetName')) {
                obj['streetName'] = ApiClient.convertToType(data['streetName'], 'String');
            }
            if (data.hasOwnProperty('streetNumber')) {
                obj['streetNumber'] = ApiClient.convertToType(data['streetNumber'], 'Number');
            }
            if (data.hasOwnProperty('streetNumberText')) {
                obj['streetNumberText'] = ApiClient.convertToType(data['streetNumberText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreetAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreetAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['crossStreet'] && !(typeof data['crossStreet'] === 'string' || data['crossStreet'] instanceof String)) {
            throw new Error("Expected the field `crossStreet` to be a primitive type in the JSON string but got " + data['crossStreet']);
        }
        // ensure the json data is a string
        if (data['full'] && !(typeof data['full'] === 'string' || data['full'] instanceof String)) {
            throw new Error("Expected the field `full` to be a primitive type in the JSON string but got " + data['full']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['streetName'] && !(typeof data['streetName'] === 'string' || data['streetName'] instanceof String)) {
            throw new Error("Expected the field `streetName` to be a primitive type in the JSON string but got " + data['streetName']);
        }
        // ensure the json data is a string
        if (data['streetNumberText'] && !(typeof data['streetNumberText'] === 'string' || data['streetNumberText'] instanceof String)) {
            throw new Error("Expected the field `streetNumberText` to be a primitive type in the JSON string but got " + data['streetNumberText']);
        }

        return true;
    }


}



/**
 * City name
 * @member {String} city
 */
StreetAddress.prototype['city'] = undefined;

/**
 * Street address country (United States or Canada)
 * @member {String} country
 */
StreetAddress.prototype['country'] = undefined;

/**
 * Known cross street
 * @member {String} crossStreet
 */
StreetAddress.prototype['crossStreet'] = undefined;

/**
 * Full pretty-printed address with suffix (if available)
 * @member {String} full
 */
StreetAddress.prototype['full'] = undefined;

/**
 * Street Address postal code
 * @member {String} postalCode
 */
StreetAddress.prototype['postalCode'] = undefined;

/**
 * State or province. Maps to the data dictionary field `StateOrProvince`.
 * @member {String} state
 */
StreetAddress.prototype['state'] = undefined;

/**
 * Name of the street
 * @member {String} streetName
 */
StreetAddress.prototype['streetName'] = undefined;

/**
 * Street number
 * @member {Number} streetNumber
 */
StreetAddress.prototype['streetNumber'] = undefined;

/**
 * Textual representation of the street number. This field is usually redundant with what's in `streetNumber` but is occassionally usefuly for street number which are actually alpha-numerical. For example, \"N63453\" or \"34556B\".  **Added on 2016/05/02** 
 * @member {String} streetNumberText
 */
StreetAddress.prototype['streetNumberText'] = undefined;






export default StreetAddress;

