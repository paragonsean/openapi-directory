/**
 * OrgHunter
 * Get the latest IRS data and most up to date charity information for your website or application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Summary service.
* @module api/SummaryApi
* @version 1.0.0
*/
export default class SummaryApi {

    /**
    * Constructs a new SummaryApi. 
    * @alias module:api/SummaryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSummary operation.
     * @callback module:api/SummaryApi~getSummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get summary data!
     * <p>This operation provides summary data.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [ein] Employer Identification Number (EIN)
     * @param {String} [searchTerm] Charity Name or Keyword. Example: humane society or cancer
     * @param {String} [city] City Name. Example: Miami
     * @param {String} [state] State Name - Two letter state abbreviation
     * @param {String} [zipCode] Zipcode Value - 5 digit zipcode value
     * @param {String} [category] Category Value Selected from Categories API
     * @param {String} [eligible] eligible=1 will return only organizations that are tax deductible and in good standing with the IRS
     * @param {String} [start] Record Set Start Position
     * @param {String} [rows] Records Per Page. Default Value = 20
     * @param {module:api/SummaryApi~getSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ein': opts['ein'],
        'searchTerm': opts['searchTerm'],
        'city': opts['city'],
        'state': opts['state'],
        'zipCode': opts['zipCode'],
        'category': opts['category'],
        'eligible': opts['eligible'],
        'start': opts['start'],
        'rows': opts['rows']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/charitysearch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
