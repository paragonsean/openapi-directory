/*
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SMS Message Batch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:45.199082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchMessage {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DELIVERYREPORTURL = "deliveryreporturl";
  @SerializedName(SERIALIZED_NAME_DELIVERYREPORTURL)
  private String deliveryreporturl;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<String> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private BigDecimal ttl;

  public static final String SERIALIZED_NAME_VALIDITY = "validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  private BigDecimal validity;

  public BatchMessage() {
  }

  public BatchMessage content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Message to send to the recipient
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public BatchMessage deliveryreporturl(String deliveryreporturl) {
    this.deliveryreporturl = deliveryreporturl;
    return this;
  }

  /**
   * The url to which we should POST delivery reports to for this message. If none is specified, we&#39;ll use the global delivery report URL that you&#39;ve configured on your account page.
   * @return deliveryreporturl
   */
  @javax.annotation.Nullable
  public String getDeliveryreporturl() {
    return deliveryreporturl;
  }

  public void setDeliveryreporturl(String deliveryreporturl) {
    this.deliveryreporturl = deliveryreporturl;
  }


  public BatchMessage destinations(List<String> destinations) {
    this.destinations = destinations;
    return this;
  }

  public BatchMessage addDestinationsItem(String destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Telephone numbers of each of the recipients
   * @return destinations
   */
  @javax.annotation.Nonnull
  public List<String> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<String> destinations) {
    this.destinations = destinations;
  }


  public BatchMessage schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Date-time at which to send the batch. This is only used by the batch/schedule service.
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public BatchMessage sender(String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID&#39;s. No spaces or special characters.
   * @return sender
   */
  @javax.annotation.Nonnull
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }


  public BatchMessage tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * An identifying label for the message, which you can use to filter and report on messages you&#39;ve sent later. Ideal for campaigns. A maximum of 280 characters.
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public BatchMessage ttl(BigDecimal ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * The number of minutes before the delivery report is deleted. Optional. Omit to prevent delivery report deletion. Integer.
   * @return ttl
   */
  @javax.annotation.Nullable
  public BigDecimal getTtl() {
    return ttl;
  }

  public void setTtl(BigDecimal ttl) {
    this.ttl = ttl;
  }


  public BatchMessage validity(BigDecimal validity) {
    this.validity = validity;
    return this;
  }

  /**
   * The optional number of minutes to attempt delivery before the message is marked as EXPIRED. Optional. The default is 2880 minutes. Integer.
   * minimum: 1
   * maximum: 2.88E+3
   * @return validity
   */
  @javax.annotation.Nullable
  public BigDecimal getValidity() {
    return validity;
  }

  public void setValidity(BigDecimal validity) {
    this.validity = validity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchMessage batchMessage = (BatchMessage) o;
    return Objects.equals(this.content, batchMessage.content) &&
        Objects.equals(this.deliveryreporturl, batchMessage.deliveryreporturl) &&
        Objects.equals(this.destinations, batchMessage.destinations) &&
        Objects.equals(this.schedule, batchMessage.schedule) &&
        Objects.equals(this.sender, batchMessage.sender) &&
        Objects.equals(this.tag, batchMessage.tag) &&
        Objects.equals(this.ttl, batchMessage.ttl) &&
        Objects.equals(this.validity, batchMessage.validity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, deliveryreporturl, destinations, schedule, sender, tag, ttl, validity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchMessage {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    deliveryreporturl: ").append(toIndentedString(deliveryreporturl)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("deliveryreporturl");
    openapiFields.add("destinations");
    openapiFields.add("schedule");
    openapiFields.add("sender");
    openapiFields.add("tag");
    openapiFields.add("ttl");
    openapiFields.add("validity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("destinations");
    openapiRequiredFields.add("sender");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchMessage is not found in the empty JSON string", BatchMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("deliveryreporturl") != null && !jsonObj.get("deliveryreporturl").isJsonNull()) && !jsonObj.get("deliveryreporturl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryreporturl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryreporturl").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("destinations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("destinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if (!jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchMessage>() {
           @Override
           public void write(JsonWriter out, BatchMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchMessage
   * @throws IOException if the JSON string is invalid with respect to BatchMessage
   */
  public static BatchMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchMessage.class);
  }

  /**
   * Convert an instance of BatchMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

