# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_metadata import MessageMetadata
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, deliveryreporturl: str=None, destination: str=None, metadata: MessageMetadata=None, responseemail: List[str]=None, schedule: str=None, sender: str=None, tag: str=None, ttl: float=None, validity: float=None):
        """Message - a model defined in OpenAPI

        :param content: The content of this Message.
        :param deliveryreporturl: The deliveryreporturl of this Message.
        :param destination: The destination of this Message.
        :param metadata: The metadata of this Message.
        :param responseemail: The responseemail of this Message.
        :param schedule: The schedule of this Message.
        :param sender: The sender of this Message.
        :param tag: The tag of this Message.
        :param ttl: The ttl of this Message.
        :param validity: The validity of this Message.
        """
        self.openapi_types = {
            'content': str,
            'deliveryreporturl': str,
            'destination': str,
            'metadata': MessageMetadata,
            'responseemail': List[str],
            'schedule': str,
            'sender': str,
            'tag': str,
            'ttl': float,
            'validity': float
        }

        self.attribute_map = {
            'content': 'content',
            'deliveryreporturl': 'deliveryreporturl',
            'destination': 'destination',
            'metadata': 'metadata',
            'responseemail': 'responseemail',
            'schedule': 'schedule',
            'sender': 'sender',
            'tag': 'tag',
            'ttl': 'ttl',
            'validity': 'validity'
        }

        self._content = content
        self._deliveryreporturl = deliveryreporturl
        self._destination = destination
        self._metadata = metadata
        self._responseemail = responseemail
        self._schedule = schedule
        self._sender = sender
        self._tag = tag
        self._ttl = ttl
        self._validity = validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Message.

        Message to send to the recipient. Content can be up to 1280 characters in length. Messages of 160 characters or fewer are charged 1 credit. If your message is longer than 160 characters then it will be broken down in to chunks of 153 characters before being sent to the recipient's handset, and you will be charged 1 credit for each 153 characters. Messages sent to numbers registered outside the UK will be typically charged double credits, but for certain countries may be charged fractions of credits (e.g. 2.5). Please contact us for rates for each country.

        :return: The content of this Message.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Message.

        Message to send to the recipient. Content can be up to 1280 characters in length. Messages of 160 characters or fewer are charged 1 credit. If your message is longer than 160 characters then it will be broken down in to chunks of 153 characters before being sent to the recipient's handset, and you will be charged 1 credit for each 153 characters. Messages sent to numbers registered outside the UK will be typically charged double credits, but for certain countries may be charged fractions of credits (e.g. 2.5). Please contact us for rates for each country.

        :param content: The content of this Message.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def deliveryreporturl(self):
        """Gets the deliveryreporturl of this Message.

        The url to which we should POST delivery reports to for this message. If none is specified, we'll use the global delivery report URL that you've configured on your account page.

        :return: The deliveryreporturl of this Message.
        :rtype: str
        """
        return self._deliveryreporturl

    @deliveryreporturl.setter
    def deliveryreporturl(self, deliveryreporturl):
        """Sets the deliveryreporturl of this Message.

        The url to which we should POST delivery reports to for this message. If none is specified, we'll use the global delivery report URL that you've configured on your account page.

        :param deliveryreporturl: The deliveryreporturl of this Message.
        :type deliveryreporturl: str
        """

        self._deliveryreporturl = deliveryreporturl

    @property
    def destination(self):
        """Gets the destination of this Message.

        Telephone number of the recipient

        :return: The destination of this Message.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Message.

        Telephone number of the recipient

        :param destination: The destination of this Message.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def metadata(self):
        """Gets the metadata of this Message.


        :return: The metadata of this Message.
        :rtype: MessageMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Message.


        :param metadata: The metadata of this Message.
        :type metadata: MessageMetadata
        """

        self._metadata = metadata

    @property
    def responseemail(self):
        """Gets the responseemail of this Message.

        An optional list of email addresses to forward responses to this specific message to. An SMS Works Reply Number is required to use this feature.

        :return: The responseemail of this Message.
        :rtype: List[str]
        """
        return self._responseemail

    @responseemail.setter
    def responseemail(self, responseemail):
        """Sets the responseemail of this Message.

        An optional list of email addresses to forward responses to this specific message to. An SMS Works Reply Number is required to use this feature.

        :param responseemail: The responseemail of this Message.
        :type responseemail: List[str]
        """

        self._responseemail = responseemail

    @property
    def schedule(self):
        """Gets the schedule of this Message.

        Date at which to send the message. This is only used by the message/schedule service and can be left empty for other services.

        :return: The schedule of this Message.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Message.

        Date at which to send the message. This is only used by the message/schedule service and can be left empty for other services.

        :param schedule: The schedule of this Message.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def sender(self):
        """Gets the sender of this Message.

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.

        :return: The sender of this Message.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this Message.

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.

        :param sender: The sender of this Message.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def tag(self):
        """Gets the tag of this Message.

        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns. A maximum of 280 characters.

        :return: The tag of this Message.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Message.

        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns. A maximum of 280 characters.

        :param tag: The tag of this Message.
        :type tag: str
        """

        self._tag = tag

    @property
    def ttl(self):
        """Gets the ttl of this Message.

        The optional number of minutes before the delivery report is deleted. Optional. Omit to prevent delivery report deletion. Integer.

        :return: The ttl of this Message.
        :rtype: float
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Message.

        The optional number of minutes before the delivery report is deleted. Optional. Omit to prevent delivery report deletion. Integer.

        :param ttl: The ttl of this Message.
        :type ttl: float
        """

        self._ttl = ttl

    @property
    def validity(self):
        """Gets the validity of this Message.

        The optional number of minutes to attempt delivery before the message is marked as EXPIRED. Optional. The default is 2880 minutes. Integer.

        :return: The validity of this Message.
        :rtype: float
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this Message.

        The optional number of minutes to attempt delivery before the message is marked as EXPIRED. Optional. The default is 2880 minutes. Integer.

        :param validity: The validity of this Message.
        :type validity: float
        """
        if validity is not None and validity > 2.88E+3:
            raise ValueError("Invalid value for `validity`, must be a value less than or equal to `2.88E+3`")
        if validity is not None and validity < 1:
            raise ValueError("Invalid value for `validity`, must be a value greater than or equal to `1`")

        self._validity = validity
