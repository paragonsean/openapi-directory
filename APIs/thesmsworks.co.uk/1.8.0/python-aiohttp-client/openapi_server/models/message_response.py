# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_response_failurereason import MessageResponseFailurereason
from openapi_server import util


class MessageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batchid: str=None, content: str=None, created: str=None, customerid: str=None, deliveryreporturl: str=None, destination: float=None, failurereason: MessageResponseFailurereason=None, id: str=None, identifier: str=None, keyword: str=None, messageid: str=None, modified: str=None, schedule: str=None, sender: str=None, status: str=None, tag: str=None):
        """MessageResponse - a model defined in OpenAPI

        :param batchid: The batchid of this MessageResponse.
        :param content: The content of this MessageResponse.
        :param created: The created of this MessageResponse.
        :param customerid: The customerid of this MessageResponse.
        :param deliveryreporturl: The deliveryreporturl of this MessageResponse.
        :param destination: The destination of this MessageResponse.
        :param failurereason: The failurereason of this MessageResponse.
        :param id: The id of this MessageResponse.
        :param identifier: The identifier of this MessageResponse.
        :param keyword: The keyword of this MessageResponse.
        :param messageid: The messageid of this MessageResponse.
        :param modified: The modified of this MessageResponse.
        :param schedule: The schedule of this MessageResponse.
        :param sender: The sender of this MessageResponse.
        :param status: The status of this MessageResponse.
        :param tag: The tag of this MessageResponse.
        """
        self.openapi_types = {
            'batchid': str,
            'content': str,
            'created': str,
            'customerid': str,
            'deliveryreporturl': str,
            'destination': float,
            'failurereason': MessageResponseFailurereason,
            'id': str,
            'identifier': str,
            'keyword': str,
            'messageid': str,
            'modified': str,
            'schedule': str,
            'sender': str,
            'status': str,
            'tag': str
        }

        self.attribute_map = {
            'batchid': 'batchid',
            'content': 'content',
            'created': 'created',
            'customerid': 'customerid',
            'deliveryreporturl': 'deliveryreporturl',
            'destination': 'destination',
            'failurereason': 'failurereason',
            'id': 'id',
            'identifier': 'identifier',
            'keyword': 'keyword',
            'messageid': 'messageid',
            'modified': 'modified',
            'schedule': 'schedule',
            'sender': 'sender',
            'status': 'status',
            'tag': 'tag'
        }

        self._batchid = batchid
        self._content = content
        self._created = created
        self._customerid = customerid
        self._deliveryreporturl = deliveryreporturl
        self._destination = destination
        self._failurereason = failurereason
        self._id = id
        self._identifier = identifier
        self._keyword = keyword
        self._messageid = messageid
        self._modified = modified
        self._schedule = schedule
        self._sender = sender
        self._status = status
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageResponse of this MessageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batchid(self):
        """Gets the batchid of this MessageResponse.


        :return: The batchid of this MessageResponse.
        :rtype: str
        """
        return self._batchid

    @batchid.setter
    def batchid(self, batchid):
        """Sets the batchid of this MessageResponse.


        :param batchid: The batchid of this MessageResponse.
        :type batchid: str
        """

        self._batchid = batchid

    @property
    def content(self):
        """Gets the content of this MessageResponse.


        :return: The content of this MessageResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this MessageResponse.


        :param content: The content of this MessageResponse.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def created(self):
        """Gets the created of this MessageResponse.


        :return: The created of this MessageResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MessageResponse.


        :param created: The created of this MessageResponse.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def customerid(self):
        """Gets the customerid of this MessageResponse.


        :return: The customerid of this MessageResponse.
        :rtype: str
        """
        return self._customerid

    @customerid.setter
    def customerid(self, customerid):
        """Sets the customerid of this MessageResponse.


        :param customerid: The customerid of this MessageResponse.
        :type customerid: str
        """
        if customerid is None:
            raise ValueError("Invalid value for `customerid`, must not be `None`")

        self._customerid = customerid

    @property
    def deliveryreporturl(self):
        """Gets the deliveryreporturl of this MessageResponse.


        :return: The deliveryreporturl of this MessageResponse.
        :rtype: str
        """
        return self._deliveryreporturl

    @deliveryreporturl.setter
    def deliveryreporturl(self, deliveryreporturl):
        """Sets the deliveryreporturl of this MessageResponse.


        :param deliveryreporturl: The deliveryreporturl of this MessageResponse.
        :type deliveryreporturl: str
        """

        self._deliveryreporturl = deliveryreporturl

    @property
    def destination(self):
        """Gets the destination of this MessageResponse.


        :return: The destination of this MessageResponse.
        :rtype: float
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this MessageResponse.


        :param destination: The destination of this MessageResponse.
        :type destination: float
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def failurereason(self):
        """Gets the failurereason of this MessageResponse.


        :return: The failurereason of this MessageResponse.
        :rtype: MessageResponseFailurereason
        """
        return self._failurereason

    @failurereason.setter
    def failurereason(self, failurereason):
        """Sets the failurereason of this MessageResponse.


        :param failurereason: The failurereason of this MessageResponse.
        :type failurereason: MessageResponseFailurereason
        """

        self._failurereason = failurereason

    @property
    def id(self):
        """Gets the id of this MessageResponse.


        :return: The id of this MessageResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageResponse.


        :param id: The id of this MessageResponse.
        :type id: str
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this MessageResponse.


        :return: The identifier of this MessageResponse.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this MessageResponse.


        :param identifier: The identifier of this MessageResponse.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def keyword(self):
        """Gets the keyword of this MessageResponse.


        :return: The keyword of this MessageResponse.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this MessageResponse.


        :param keyword: The keyword of this MessageResponse.
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def messageid(self):
        """Gets the messageid of this MessageResponse.


        :return: The messageid of this MessageResponse.
        :rtype: str
        """
        return self._messageid

    @messageid.setter
    def messageid(self, messageid):
        """Sets the messageid of this MessageResponse.


        :param messageid: The messageid of this MessageResponse.
        :type messageid: str
        """
        if messageid is None:
            raise ValueError("Invalid value for `messageid`, must not be `None`")

        self._messageid = messageid

    @property
    def modified(self):
        """Gets the modified of this MessageResponse.


        :return: The modified of this MessageResponse.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this MessageResponse.


        :param modified: The modified of this MessageResponse.
        :type modified: str
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")

        self._modified = modified

    @property
    def schedule(self):
        """Gets the schedule of this MessageResponse.


        :return: The schedule of this MessageResponse.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this MessageResponse.


        :param schedule: The schedule of this MessageResponse.
        :type schedule: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def sender(self):
        """Gets the sender of this MessageResponse.


        :return: The sender of this MessageResponse.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MessageResponse.


        :param sender: The sender of this MessageResponse.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def status(self):
        """Gets the status of this MessageResponse.


        :return: The status of this MessageResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MessageResponse.


        :param status: The status of this MessageResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this MessageResponse.


        :return: The tag of this MessageResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this MessageResponse.


        :param tag: The tag of this MessageResponse.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag
