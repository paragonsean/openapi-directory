# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduledBatchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batchid: str=None, status: str=None):
        """ScheduledBatchResponse - a model defined in OpenAPI

        :param batchid: The batchid of this ScheduledBatchResponse.
        :param status: The status of this ScheduledBatchResponse.
        """
        self.openapi_types = {
            'batchid': str,
            'status': str
        }

        self.attribute_map = {
            'batchid': 'batchid',
            'status': 'status'
        }

        self._batchid = batchid
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledBatchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledBatchResponse of this ScheduledBatchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batchid(self):
        """Gets the batchid of this ScheduledBatchResponse.


        :return: The batchid of this ScheduledBatchResponse.
        :rtype: str
        """
        return self._batchid

    @batchid.setter
    def batchid(self, batchid):
        """Sets the batchid of this ScheduledBatchResponse.


        :param batchid: The batchid of this ScheduledBatchResponse.
        :type batchid: str
        """
        if batchid is None:
            raise ValueError("Invalid value for `batchid`, must not be `None`")

        self._batchid = batchid

    @property
    def status(self):
        """Gets the status of this ScheduledBatchResponse.


        :return: The status of this ScheduledBatchResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScheduledBatchResponse.


        :param status: The status of this ScheduledBatchResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
