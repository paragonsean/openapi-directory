# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scheduled_messages_response_message import ScheduledMessagesResponseMessage
from openapi_server import util


class ScheduledMessagesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch: bool=None, id: str=None, message: ScheduledMessagesResponseMessage=None, status: str=None):
        """ScheduledMessagesResponse - a model defined in OpenAPI

        :param batch: The batch of this ScheduledMessagesResponse.
        :param id: The id of this ScheduledMessagesResponse.
        :param message: The message of this ScheduledMessagesResponse.
        :param status: The status of this ScheduledMessagesResponse.
        """
        self.openapi_types = {
            'batch': bool,
            'id': str,
            'message': ScheduledMessagesResponseMessage,
            'status': str
        }

        self.attribute_map = {
            'batch': 'batch',
            'id': 'id',
            'message': 'message',
            'status': 'status'
        }

        self._batch = batch
        self._id = id
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledMessagesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledMessagesResponse of this ScheduledMessagesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch(self):
        """Gets the batch of this ScheduledMessagesResponse.

        Describes whether the a batch of messages has been scheduled, or just a single message

        :return: The batch of this ScheduledMessagesResponse.
        :rtype: bool
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this ScheduledMessagesResponse.

        Describes whether the a batch of messages has been scheduled, or just a single message

        :param batch: The batch of this ScheduledMessagesResponse.
        :type batch: bool
        """

        self._batch = batch

    @property
    def id(self):
        """Gets the id of this ScheduledMessagesResponse.

        The scheduled message ID

        :return: The id of this ScheduledMessagesResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduledMessagesResponse.

        The scheduled message ID

        :param id: The id of this ScheduledMessagesResponse.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this ScheduledMessagesResponse.


        :return: The message of this ScheduledMessagesResponse.
        :rtype: ScheduledMessagesResponseMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ScheduledMessagesResponse.


        :param message: The message of this ScheduledMessagesResponse.
        :type message: ScheduledMessagesResponseMessage
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this ScheduledMessagesResponse.

        The status of the scheduled message (either 'SCHEDULED', 'PROCESSED' or 'CANCELLED')

        :return: The status of this ScheduledMessagesResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScheduledMessagesResponse.

        The status of the scheduled message (either 'SCHEDULED', 'PROCESSED' or 'CANCELLED')

        :param status: The status of this ScheduledMessagesResponse.
        :type status: str
        """

        self._status = status
