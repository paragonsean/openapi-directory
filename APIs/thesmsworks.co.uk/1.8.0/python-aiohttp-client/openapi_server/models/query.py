# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_metadata import QueryMetadata
from openapi_server import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credits: float=None, destination: str=None, _from: str=None, keyword: str=None, limit: float=None, metadata: QueryMetadata=None, sender: str=None, skip: float=None, status: str=None, to: str=None, unread: bool=None):
        """Query - a model defined in OpenAPI

        :param credits: The credits of this Query.
        :param destination: The destination of this Query.
        :param _from: The _from of this Query.
        :param keyword: The keyword of this Query.
        :param limit: The limit of this Query.
        :param metadata: The metadata of this Query.
        :param sender: The sender of this Query.
        :param skip: The skip of this Query.
        :param status: The status of this Query.
        :param to: The to of this Query.
        :param unread: The unread of this Query.
        """
        self.openapi_types = {
            'credits': float,
            'destination': str,
            '_from': str,
            'keyword': str,
            'limit': float,
            'metadata': QueryMetadata,
            'sender': str,
            'skip': float,
            'status': str,
            'to': str,
            'unread': bool
        }

        self.attribute_map = {
            'credits': 'credits',
            'destination': 'destination',
            '_from': 'from',
            'keyword': 'keyword',
            'limit': 'limit',
            'metadata': 'metadata',
            'sender': 'sender',
            'skip': 'skip',
            'status': 'status',
            'to': 'to',
            'unread': 'unread'
        }

        self._credits = credits
        self._destination = destination
        self.__from = _from
        self._keyword = keyword
        self._limit = limit
        self._metadata = metadata
        self._sender = sender
        self._skip = skip
        self._status = status
        self._to = to
        self._unread = unread

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Query of this Query.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credits(self):
        """Gets the credits of this Query.

        The number of credits used on the message. Floating point number.

        :return: The credits of this Query.
        :rtype: float
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this Query.

        The number of credits used on the message. Floating point number.

        :param credits: The credits of this Query.
        :type credits: float
        """

        self._credits = credits

    @property
    def destination(self):
        """Gets the destination of this Query.

        The phone number of the recipient. Start UK numbers with 44 and drop the leading 0.

        :return: The destination of this Query.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Query.

        The phone number of the recipient. Start UK numbers with 44 and drop the leading 0.

        :param destination: The destination of this Query.
        :type destination: str
        """

        self._destination = destination

    @property
    def _from(self):
        """Gets the _from of this Query.

        The date-time from which you would like matching messages

        :return: The _from of this Query.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Query.

        The date-time from which you would like matching messages

        :param _from: The _from of this Query.
        :type _from: str
        """

        self.__from = _from

    @property
    def keyword(self):
        """Gets the keyword of this Query.

        The keyword used in the inbound message

        :return: The keyword of this Query.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this Query.

        The keyword used in the inbound message

        :param keyword: The keyword of this Query.
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def limit(self):
        """Gets the limit of this Query.

        The maximum number of messages that you would like returned in this call. The default is 1000.

        :return: The limit of this Query.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Query.

        The maximum number of messages that you would like returned in this call. The default is 1000.

        :param limit: The limit of this Query.
        :type limit: float
        """

        self._limit = limit

    @property
    def metadata(self):
        """Gets the metadata of this Query.


        :return: The metadata of this Query.
        :rtype: QueryMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Query.


        :param metadata: The metadata of this Query.
        :type metadata: QueryMetadata
        """

        self._metadata = metadata

    @property
    def sender(self):
        """Gets the sender of this Query.

        The sender of the message (this can be the configured sender name for an outbound message or the senders phone number for an inbound message).

        :return: The sender of this Query.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this Query.

        The sender of the message (this can be the configured sender name for an outbound message or the senders phone number for an inbound message).

        :param sender: The sender of this Query.
        :type sender: str
        """

        self._sender = sender

    @property
    def skip(self):
        """Gets the skip of this Query.

        The number of results you would like to ignore before returning messages. In combination with the 'limit' parameter his can be used to page results, so that you can deal with a limited number in your logic at each time.

        :return: The skip of this Query.
        :rtype: float
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this Query.

        The number of results you would like to ignore before returning messages. In combination with the 'limit' parameter his can be used to page results, so that you can deal with a limited number in your logic at each time.

        :param skip: The skip of this Query.
        :type skip: float
        """

        self._skip = skip

    @property
    def status(self):
        """Gets the status of this Query.

        The status of the messages you would like returned (either 'SENT', 'DELIVERED', 'EXPIRED', 'UNDELIVERABLE', 'REJECTED' or 'INCOMING')

        :return: The status of this Query.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Query.

        The status of the messages you would like returned (either 'SENT', 'DELIVERED', 'EXPIRED', 'UNDELIVERABLE', 'REJECTED' or 'INCOMING')

        :param status: The status of this Query.
        :type status: str
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this Query.

        The date-time to which you would like matching messages

        :return: The to of this Query.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Query.

        The date-time to which you would like matching messages

        :param to: The to of this Query.
        :type to: str
        """

        self._to = to

    @property
    def unread(self):
        """Gets the unread of this Query.

        In queries for incoming messages ('status' is 'INCOMING'), specify whether you explicitly want unread messages (true) or read messages (false). Omit this parameter in other circumstances.

        :return: The unread of this Query.
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Query.

        In queries for incoming messages ('status' is 'INCOMING'), specify whether you explicitly want unread messages (true) or read messages (false). Omit this parameter in other circumstances.

        :param unread: The unread of this Query.
        :type unread: bool
        """

        self._unread = unread
