# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtendedErrorModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, error_code: float=None, permanent: bool=None, status: str=None):
        """ExtendedErrorModel - a model defined in OpenAPI

        :param message: The message of this ExtendedErrorModel.
        :param error_code: The error_code of this ExtendedErrorModel.
        :param permanent: The permanent of this ExtendedErrorModel.
        :param status: The status of this ExtendedErrorModel.
        """
        self.openapi_types = {
            'message': str,
            'error_code': float,
            'permanent': bool,
            'status': str
        }

        self.attribute_map = {
            'message': 'message',
            'error_code': 'errorCode',
            'permanent': 'permanent',
            'status': 'status'
        }

        self._message = message
        self._error_code = error_code
        self._permanent = permanent
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedErrorModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtendedErrorModel of this ExtendedErrorModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ExtendedErrorModel.


        :return: The message of this ExtendedErrorModel.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ExtendedErrorModel.


        :param message: The message of this ExtendedErrorModel.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def error_code(self):
        """Gets the error_code of this ExtendedErrorModel.

        Numeric code used to identify the error. Integer.

        :return: The error_code of this ExtendedErrorModel.
        :rtype: float
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ExtendedErrorModel.

        Numeric code used to identify the error. Integer.

        :param error_code: The error_code of this ExtendedErrorModel.
        :type error_code: float
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def permanent(self):
        """Gets the permanent of this ExtendedErrorModel.


        :return: The permanent of this ExtendedErrorModel.
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """Sets the permanent of this ExtendedErrorModel.


        :param permanent: The permanent of this ExtendedErrorModel.
        :type permanent: bool
        """

        self._permanent = permanent

    @property
    def status(self):
        """Gets the status of this ExtendedErrorModel.


        :return: The status of this ExtendedErrorModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExtendedErrorModel.


        :param status: The status of this ExtendedErrorModel.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
