# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, deliveryreporturl: str=None, destinations: List[str]=None, schedule: str=None, sender: str=None, tag: str=None, ttl: float=None, validity: float=None):
        """BatchMessage - a model defined in OpenAPI

        :param content: The content of this BatchMessage.
        :param deliveryreporturl: The deliveryreporturl of this BatchMessage.
        :param destinations: The destinations of this BatchMessage.
        :param schedule: The schedule of this BatchMessage.
        :param sender: The sender of this BatchMessage.
        :param tag: The tag of this BatchMessage.
        :param ttl: The ttl of this BatchMessage.
        :param validity: The validity of this BatchMessage.
        """
        self.openapi_types = {
            'content': str,
            'deliveryreporturl': str,
            'destinations': List[str],
            'schedule': str,
            'sender': str,
            'tag': str,
            'ttl': float,
            'validity': float
        }

        self.attribute_map = {
            'content': 'content',
            'deliveryreporturl': 'deliveryreporturl',
            'destinations': 'destinations',
            'schedule': 'schedule',
            'sender': 'sender',
            'tag': 'tag',
            'ttl': 'ttl',
            'validity': 'validity'
        }

        self._content = content
        self._deliveryreporturl = deliveryreporturl
        self._destinations = destinations
        self._schedule = schedule
        self._sender = sender
        self._tag = tag
        self._ttl = ttl
        self._validity = validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchMessage of this BatchMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this BatchMessage.

        Message to send to the recipient

        :return: The content of this BatchMessage.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BatchMessage.

        Message to send to the recipient

        :param content: The content of this BatchMessage.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def deliveryreporturl(self):
        """Gets the deliveryreporturl of this BatchMessage.

        The url to which we should POST delivery reports to for this message. If none is specified, we'll use the global delivery report URL that you've configured on your account page.

        :return: The deliveryreporturl of this BatchMessage.
        :rtype: str
        """
        return self._deliveryreporturl

    @deliveryreporturl.setter
    def deliveryreporturl(self, deliveryreporturl):
        """Sets the deliveryreporturl of this BatchMessage.

        The url to which we should POST delivery reports to for this message. If none is specified, we'll use the global delivery report URL that you've configured on your account page.

        :param deliveryreporturl: The deliveryreporturl of this BatchMessage.
        :type deliveryreporturl: str
        """

        self._deliveryreporturl = deliveryreporturl

    @property
    def destinations(self):
        """Gets the destinations of this BatchMessage.

        Telephone numbers of each of the recipients

        :return: The destinations of this BatchMessage.
        :rtype: List[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this BatchMessage.

        Telephone numbers of each of the recipients

        :param destinations: The destinations of this BatchMessage.
        :type destinations: List[str]
        """
        if destinations is None:
            raise ValueError("Invalid value for `destinations`, must not be `None`")

        self._destinations = destinations

    @property
    def schedule(self):
        """Gets the schedule of this BatchMessage.

        Date-time at which to send the batch. This is only used by the batch/schedule service.

        :return: The schedule of this BatchMessage.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this BatchMessage.

        Date-time at which to send the batch. This is only used by the batch/schedule service.

        :param schedule: The schedule of this BatchMessage.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def sender(self):
        """Gets the sender of this BatchMessage.

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.

        :return: The sender of this BatchMessage.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this BatchMessage.

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.

        :param sender: The sender of this BatchMessage.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def tag(self):
        """Gets the tag of this BatchMessage.

        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns. A maximum of 280 characters.

        :return: The tag of this BatchMessage.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this BatchMessage.

        An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns. A maximum of 280 characters.

        :param tag: The tag of this BatchMessage.
        :type tag: str
        """

        self._tag = tag

    @property
    def ttl(self):
        """Gets the ttl of this BatchMessage.

        The number of minutes before the delivery report is deleted. Optional. Omit to prevent delivery report deletion. Integer.

        :return: The ttl of this BatchMessage.
        :rtype: float
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this BatchMessage.

        The number of minutes before the delivery report is deleted. Optional. Omit to prevent delivery report deletion. Integer.

        :param ttl: The ttl of this BatchMessage.
        :type ttl: float
        """

        self._ttl = ttl

    @property
    def validity(self):
        """Gets the validity of this BatchMessage.

        The optional number of minutes to attempt delivery before the message is marked as EXPIRED. Optional. The default is 2880 minutes. Integer.

        :return: The validity of this BatchMessage.
        :rtype: float
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this BatchMessage.

        The optional number of minutes to attempt delivery before the message is marked as EXPIRED. Optional. The default is 2880 minutes. Integer.

        :param validity: The validity of this BatchMessage.
        :type validity: float
        """
        if validity is not None and validity > 2.88E+3:
            raise ValueError("Invalid value for `validity`, must be a value less than or equal to `2.88E+3`")
        if validity is not None and validity < 1:
            raise ValueError("Invalid value for `validity`, must be a value greater than or equal to `1`")

        self._validity = validity
