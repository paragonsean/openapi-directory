# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CancelledMessageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messageid: str=None, status: str=None):
        """CancelledMessageResponse - a model defined in OpenAPI

        :param messageid: The messageid of this CancelledMessageResponse.
        :param status: The status of this CancelledMessageResponse.
        """
        self.openapi_types = {
            'messageid': str,
            'status': str
        }

        self.attribute_map = {
            'messageid': 'messageid',
            'status': 'status'
        }

        self._messageid = messageid
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelledMessageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelledMessageResponse of this CancelledMessageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messageid(self):
        """Gets the messageid of this CancelledMessageResponse.


        :return: The messageid of this CancelledMessageResponse.
        :rtype: str
        """
        return self._messageid

    @messageid.setter
    def messageid(self, messageid):
        """Sets the messageid of this CancelledMessageResponse.


        :param messageid: The messageid of this CancelledMessageResponse.
        :type messageid: str
        """
        if messageid is None:
            raise ValueError("Invalid value for `messageid`, must not be `None`")

        self._messageid = messageid

    @property
    def status(self):
        """Gets the status of this CancelledMessageResponse.


        :return: The status of this CancelledMessageResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CancelledMessageResponse.


        :param status: The status of this CancelledMessageResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
