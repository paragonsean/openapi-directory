# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduledMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, destination: str=None, destinations: List[str]=None, schedule: str=None, sender: str=None):
        """ScheduledMessage - a model defined in OpenAPI

        :param content: The content of this ScheduledMessage.
        :param destination: The destination of this ScheduledMessage.
        :param destinations: The destinations of this ScheduledMessage.
        :param schedule: The schedule of this ScheduledMessage.
        :param sender: The sender of this ScheduledMessage.
        """
        self.openapi_types = {
            'content': str,
            'destination': str,
            'destinations': List[str],
            'schedule': str,
            'sender': str
        }

        self.attribute_map = {
            'content': 'content',
            'destination': 'destination',
            'destinations': 'destinations',
            'schedule': 'schedule',
            'sender': 'sender'
        }

        self._content = content
        self._destination = destination
        self._destinations = destinations
        self._schedule = schedule
        self._sender = sender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledMessage of this ScheduledMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ScheduledMessage.

        Message to be sent to the recipient

        :return: The content of this ScheduledMessage.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ScheduledMessage.

        Message to be sent to the recipient

        :param content: The content of this ScheduledMessage.
        :type content: str
        """

        self._content = content

    @property
    def destination(self):
        """Gets the destination of this ScheduledMessage.

        For single scheduled messages, the mobile number of the recipient

        :return: The destination of this ScheduledMessage.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ScheduledMessage.

        For single scheduled messages, the mobile number of the recipient

        :param destination: The destination of this ScheduledMessage.
        :type destination: str
        """

        self._destination = destination

    @property
    def destinations(self):
        """Gets the destinations of this ScheduledMessage.

        For batch messages, the mobile numbers of each of the recipients

        :return: The destinations of this ScheduledMessage.
        :rtype: List[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ScheduledMessage.

        For batch messages, the mobile numbers of each of the recipients

        :param destinations: The destinations of this ScheduledMessage.
        :type destinations: List[str]
        """

        self._destinations = destinations

    @property
    def schedule(self):
        """Gets the schedule of this ScheduledMessage.

        Date-time at which to send the batch. This is only used by the batch/schedule service.

        :return: The schedule of this ScheduledMessage.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ScheduledMessage.

        Date-time at which to send the batch. This is only used by the batch/schedule service.

        :param schedule: The schedule of this ScheduledMessage.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def sender(self):
        """Gets the sender of this ScheduledMessage.

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.

        :return: The sender of this ScheduledMessage.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this ScheduledMessage.

        The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.

        :param sender: The sender of this ScheduledMessage.
        :type sender: str
        """

        self._sender = sender
