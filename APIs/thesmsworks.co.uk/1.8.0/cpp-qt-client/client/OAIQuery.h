/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuery.h
 *
 * search parameters for querying the message database
 */

#ifndef OAIQuery_H
#define OAIQuery_H

#include <QJsonObject>

#include "OAIQuery_metadata.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQuery_metadata;

class OAIQuery : public OAIObject {
public:
    OAIQuery();
    OAIQuery(QString json);
    ~OAIQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCredits() const;
    void setCredits(const double &credits);
    bool is_credits_Set() const;
    bool is_credits_Valid() const;

    QString getDestination() const;
    void setDestination(const QString &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QString getKeyword() const;
    void setKeyword(const QString &keyword);
    bool is_keyword_Set() const;
    bool is_keyword_Valid() const;

    double getLimit() const;
    void setLimit(const double &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    OAIQuery_metadata getMetadata() const;
    void setMetadata(const OAIQuery_metadata &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getSender() const;
    void setSender(const QString &sender);
    bool is_sender_Set() const;
    bool is_sender_Valid() const;

    double getSkip() const;
    void setSkip(const double &skip);
    bool is_skip_Set() const;
    bool is_skip_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTo() const;
    void setTo(const QString &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    bool isUnread() const;
    void setUnread(const bool &unread);
    bool is_unread_Set() const;
    bool is_unread_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_credits;
    bool m_credits_isSet;
    bool m_credits_isValid;

    QString m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QString m_keyword;
    bool m_keyword_isSet;
    bool m_keyword_isValid;

    double m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    OAIQuery_metadata m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_sender;
    bool m_sender_isSet;
    bool m_sender_isValid;

    double m_skip;
    bool m_skip_isSet;
    bool m_skip_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    bool m_unread;
    bool m_unread_isSet;
    bool m_unread_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuery)

#endif // OAIQuery_H
