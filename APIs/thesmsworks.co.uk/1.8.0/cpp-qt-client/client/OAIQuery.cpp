/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_unread_isSet = false;
    m_unread_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("credits")]);
    m_credits_isSet = !json[QString("credits")].isNull() && m_credits_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_unread_isValid = ::OpenAPI::fromJsonValue(m_unread, json[QString("unread")]);
    m_unread_isSet = !json[QString("unread")].isNull() && m_unread_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_credits_isSet) {
        obj.insert(QString("credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_sender_isSet) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_unread_isSet) {
        obj.insert(QString("unread"), ::OpenAPI::toJsonValue(m_unread));
    }
    return obj;
}

double OAIQuery::getCredits() const {
    return m_credits;
}
void OAIQuery::setCredits(const double &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIQuery::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIQuery::is_credits_Valid() const{
    return m_credits_isValid;
}

QString OAIQuery::getDestination() const {
    return m_destination;
}
void OAIQuery::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIQuery::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIQuery::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIQuery::getFrom() const {
    return m_from;
}
void OAIQuery::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIQuery::is_from_Set() const{
    return m_from_isSet;
}

bool OAIQuery::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIQuery::getKeyword() const {
    return m_keyword;
}
void OAIQuery::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIQuery::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIQuery::is_keyword_Valid() const{
    return m_keyword_isValid;
}

double OAIQuery::getLimit() const {
    return m_limit;
}
void OAIQuery::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQuery::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQuery::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIQuery_metadata OAIQuery::getMetadata() const {
    return m_metadata;
}
void OAIQuery::setMetadata(const OAIQuery_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIQuery::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIQuery::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIQuery::getSender() const {
    return m_sender;
}
void OAIQuery::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIQuery::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIQuery::is_sender_Valid() const{
    return m_sender_isValid;
}

double OAIQuery::getSkip() const {
    return m_skip;
}
void OAIQuery::setSkip(const double &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIQuery::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIQuery::is_skip_Valid() const{
    return m_skip_isValid;
}

QString OAIQuery::getStatus() const {
    return m_status;
}
void OAIQuery::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQuery::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQuery::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIQuery::getTo() const {
    return m_to;
}
void OAIQuery::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIQuery::is_to_Set() const{
    return m_to_isSet;
}

bool OAIQuery::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIQuery::isUnread() const {
    return m_unread;
}
void OAIQuery::setUnread(const bool &unread) {
    m_unread = unread;
    m_unread_isSet = true;
}

bool OAIQuery::is_unread_Set() const{
    return m_unread_isSet;
}

bool OAIQuery::is_unread_Valid() const{
    return m_unread_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
