/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagesApi_H
#define OAI_OAIMessagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelledMessageResponse.h"
#include "OAIDeletedMessageResponse.h"
#include "OAIErrorModel.h"
#include "OAIExtendedErrorModel.h"
#include "OAIMessage.h"
#include "OAIMessageResponse.h"
#include "OAIQuery.h"
#include "OAIScheduledMessageResponse.h"
#include "OAIScheduledMessagesResponse.h"
#include "OAISendMessageResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagesApi : public QObject {
    Q_OBJECT

public:
    OAIMessagesApi(const int timeOut = 0);
    ~OAIMessagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sms_message OAIMessage [required]
    */
    virtual void messageSchedulePost(const OAIMessage &sms_message);

    /**
    * @param[in]  sms_message OAIMessage [required]
    */
    virtual void messageSendPost(const OAIMessage &sms_message);

    /**
    * @param[in]  query OAIQuery [required]
    */
    virtual void messagesFailedPost(const OAIQuery &query);

    /**
    * @param[in]  query OAIQuery [required]
    */
    virtual void messagesInboxPost(const OAIQuery &query);

    /**
    * @param[in]  messageid QString [required]
    */
    virtual void messagesMessageidDelete(const QString &messageid);

    /**
    * @param[in]  messageid QString [required]
    */
    virtual void messagesMessageidGet(const QString &messageid);

    /**
    * @param[in]  query OAIQuery [required]
    */
    virtual void messagesPost(const OAIQuery &query);


    virtual void messagesScheduleGet();

    /**
    * @param[in]  messageid QString [required]
    */
    virtual void messagesScheduleMessageidDelete(const QString &messageid);

    /**
    * @param[in]  sms_message OAIMessage [required]
    */
    virtual void sendFlashMessage(const OAIMessage &sms_message);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void messageSchedulePostCallback(OAIHttpRequestWorker *worker);
    void messageSendPostCallback(OAIHttpRequestWorker *worker);
    void messagesFailedPostCallback(OAIHttpRequestWorker *worker);
    void messagesInboxPostCallback(OAIHttpRequestWorker *worker);
    void messagesMessageidDeleteCallback(OAIHttpRequestWorker *worker);
    void messagesMessageidGetCallback(OAIHttpRequestWorker *worker);
    void messagesPostCallback(OAIHttpRequestWorker *worker);
    void messagesScheduleGetCallback(OAIHttpRequestWorker *worker);
    void messagesScheduleMessageidDeleteCallback(OAIHttpRequestWorker *worker);
    void sendFlashMessageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void messageSchedulePostSignal(QList<OAIScheduledMessageResponse> summary);
    void messageSendPostSignal(OAISendMessageResponse summary);
    void messagesFailedPostSignal(QList<OAIMessageResponse> summary);
    void messagesInboxPostSignal(QList<OAIMessageResponse> summary);
    void messagesMessageidDeleteSignal(OAIDeletedMessageResponse summary);
    void messagesMessageidGetSignal(OAIMessageResponse summary);
    void messagesPostSignal(QList<OAIMessageResponse> summary);
    void messagesScheduleGetSignal(OAIScheduledMessagesResponse summary);
    void messagesScheduleMessageidDeleteSignal(OAICancelledMessageResponse summary);
    void sendFlashMessageSignal(OAISendMessageResponse summary);


    void messageSchedulePostSignalFull(OAIHttpRequestWorker *worker, QList<OAIScheduledMessageResponse> summary);
    void messageSendPostSignalFull(OAIHttpRequestWorker *worker, OAISendMessageResponse summary);
    void messagesFailedPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessageResponse> summary);
    void messagesInboxPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessageResponse> summary);
    void messagesMessageidDeleteSignalFull(OAIHttpRequestWorker *worker, OAIDeletedMessageResponse summary);
    void messagesMessageidGetSignalFull(OAIHttpRequestWorker *worker, OAIMessageResponse summary);
    void messagesPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessageResponse> summary);
    void messagesScheduleGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduledMessagesResponse summary);
    void messagesScheduleMessageidDeleteSignalFull(OAIHttpRequestWorker *worker, OAICancelledMessageResponse summary);
    void sendFlashMessageSignalFull(OAIHttpRequestWorker *worker, OAISendMessageResponse summary);

    Q_DECL_DEPRECATED_X("Use messageSchedulePostSignalError() instead")
    void messageSchedulePostSignalE(QList<OAIScheduledMessageResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messageSchedulePostSignalError(QList<OAIScheduledMessageResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messageSendPostSignalError() instead")
    void messageSendPostSignalE(OAISendMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messageSendPostSignalError(OAISendMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesFailedPostSignalError() instead")
    void messagesFailedPostSignalE(QList<OAIMessageResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesFailedPostSignalError(QList<OAIMessageResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesInboxPostSignalError() instead")
    void messagesInboxPostSignalE(QList<OAIMessageResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesInboxPostSignalError(QList<OAIMessageResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesMessageidDeleteSignalError() instead")
    void messagesMessageidDeleteSignalE(OAIDeletedMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesMessageidDeleteSignalError(OAIDeletedMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesMessageidGetSignalError() instead")
    void messagesMessageidGetSignalE(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesMessageidGetSignalError(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesPostSignalError() instead")
    void messagesPostSignalE(QList<OAIMessageResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesPostSignalError(QList<OAIMessageResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesScheduleGetSignalError() instead")
    void messagesScheduleGetSignalE(OAIScheduledMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesScheduleGetSignalError(OAIScheduledMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesScheduleMessageidDeleteSignalError() instead")
    void messagesScheduleMessageidDeleteSignalE(OAICancelledMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesScheduleMessageidDeleteSignalError(OAICancelledMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFlashMessageSignalError() instead")
    void sendFlashMessageSignalE(OAISendMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFlashMessageSignalError(OAISendMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use messageSchedulePostSignalErrorFull() instead")
    void messageSchedulePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messageSchedulePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messageSendPostSignalErrorFull() instead")
    void messageSendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messageSendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesFailedPostSignalErrorFull() instead")
    void messagesFailedPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesFailedPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesInboxPostSignalErrorFull() instead")
    void messagesInboxPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesInboxPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesMessageidDeleteSignalErrorFull() instead")
    void messagesMessageidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesMessageidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesMessageidGetSignalErrorFull() instead")
    void messagesMessageidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesMessageidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesPostSignalErrorFull() instead")
    void messagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesScheduleGetSignalErrorFull() instead")
    void messagesScheduleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesScheduleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesScheduleMessageidDeleteSignalErrorFull() instead")
    void messagesScheduleMessageidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesScheduleMessageidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFlashMessageSignalErrorFull() instead")
    void sendFlashMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFlashMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
