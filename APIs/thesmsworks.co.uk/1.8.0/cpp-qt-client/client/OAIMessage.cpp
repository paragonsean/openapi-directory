/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_deliveryreporturl_isSet = false;
    m_deliveryreporturl_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_responseemail_isSet = false;
    m_responseemail_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_deliveryreporturl_isValid = ::OpenAPI::fromJsonValue(m_deliveryreporturl, json[QString("deliveryreporturl")]);
    m_deliveryreporturl_isSet = !json[QString("deliveryreporturl")].isNull() && m_deliveryreporturl_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_responseemail_isValid = ::OpenAPI::fromJsonValue(m_responseemail, json[QString("responseemail")]);
    m_responseemail_isSet = !json[QString("responseemail")].isNull() && m_responseemail_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("validity")]);
    m_validity_isSet = !json[QString("validity")].isNull() && m_validity_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_deliveryreporturl_isSet) {
        obj.insert(QString("deliveryreporturl"), ::OpenAPI::toJsonValue(m_deliveryreporturl));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_responseemail.size() > 0) {
        obj.insert(QString("responseemail"), ::OpenAPI::toJsonValue(m_responseemail));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_sender_isSet) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_validity_isSet) {
        obj.insert(QString("validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    return obj;
}

QString OAIMessage::getContent() const {
    return m_content;
}
void OAIMessage::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIMessage::is_content_Set() const{
    return m_content_isSet;
}

bool OAIMessage::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIMessage::getDeliveryreporturl() const {
    return m_deliveryreporturl;
}
void OAIMessage::setDeliveryreporturl(const QString &deliveryreporturl) {
    m_deliveryreporturl = deliveryreporturl;
    m_deliveryreporturl_isSet = true;
}

bool OAIMessage::is_deliveryreporturl_Set() const{
    return m_deliveryreporturl_isSet;
}

bool OAIMessage::is_deliveryreporturl_Valid() const{
    return m_deliveryreporturl_isValid;
}

QString OAIMessage::getDestination() const {
    return m_destination;
}
void OAIMessage::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIMessage::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIMessage::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIMessage_metadata OAIMessage::getMetadata() const {
    return m_metadata;
}
void OAIMessage::setMetadata(const OAIMessage_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIMessage::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIMessage::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<QString> OAIMessage::getResponseemail() const {
    return m_responseemail;
}
void OAIMessage::setResponseemail(const QList<QString> &responseemail) {
    m_responseemail = responseemail;
    m_responseemail_isSet = true;
}

bool OAIMessage::is_responseemail_Set() const{
    return m_responseemail_isSet;
}

bool OAIMessage::is_responseemail_Valid() const{
    return m_responseemail_isValid;
}

QString OAIMessage::getSchedule() const {
    return m_schedule;
}
void OAIMessage::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIMessage::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIMessage::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIMessage::getSender() const {
    return m_sender;
}
void OAIMessage::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIMessage::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIMessage::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIMessage::getTag() const {
    return m_tag;
}
void OAIMessage::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIMessage::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIMessage::is_tag_Valid() const{
    return m_tag_isValid;
}

double OAIMessage::getTtl() const {
    return m_ttl;
}
void OAIMessage::setTtl(const double &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIMessage::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIMessage::is_ttl_Valid() const{
    return m_ttl_isValid;
}

double OAIMessage::getValidity() const {
    return m_validity;
}
void OAIMessage::setValidity(const double &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAIMessage::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAIMessage::is_validity_Valid() const{
    return m_validity_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deliveryreporturl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_responseemail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_destination_isValid && m_sender_isValid && true;
}

} // namespace OpenAPI
