/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledMessagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledMessagesResponse::OAIScheduledMessagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledMessagesResponse::OAIScheduledMessagesResponse() {
    this->initializeModel();
}

OAIScheduledMessagesResponse::~OAIScheduledMessagesResponse() {}

void OAIScheduledMessagesResponse::initializeModel() {

    m_batch_isSet = false;
    m_batch_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIScheduledMessagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledMessagesResponse::fromJsonObject(QJsonObject json) {

    m_batch_isValid = ::OpenAPI::fromJsonValue(m_batch, json[QString("batch")]);
    m_batch_isSet = !json[QString("batch")].isNull() && m_batch_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIScheduledMessagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledMessagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_isSet) {
        obj.insert(QString("batch"), ::OpenAPI::toJsonValue(m_batch));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIScheduledMessagesResponse::isBatch() const {
    return m_batch;
}
void OAIScheduledMessagesResponse::setBatch(const bool &batch) {
    m_batch = batch;
    m_batch_isSet = true;
}

bool OAIScheduledMessagesResponse::is_batch_Set() const{
    return m_batch_isSet;
}

bool OAIScheduledMessagesResponse::is_batch_Valid() const{
    return m_batch_isValid;
}

QString OAIScheduledMessagesResponse::getId() const {
    return m_id;
}
void OAIScheduledMessagesResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScheduledMessagesResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScheduledMessagesResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIScheduledMessagesResponse_message OAIScheduledMessagesResponse::getMessage() const {
    return m_message;
}
void OAIScheduledMessagesResponse::setMessage(const OAIScheduledMessagesResponse_message &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIScheduledMessagesResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIScheduledMessagesResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIScheduledMessagesResponse::getStatus() const {
    return m_status;
}
void OAIScheduledMessagesResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScheduledMessagesResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScheduledMessagesResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIScheduledMessagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledMessagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
