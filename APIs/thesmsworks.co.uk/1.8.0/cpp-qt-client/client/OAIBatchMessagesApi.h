/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBatchMessagesApi_H
#define OAI_OAIBatchMessagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchMessage.h"
#include "OAIBatchMessageResponse.h"
#include "OAICancelledMessageResponse.h"
#include "OAIErrorModel.h"
#include "OAIExtendedErrorModel.h"
#include "OAIMessage.h"
#include "OAIMessageResponse.h"
#include "OAIScheduledBatchResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBatchMessagesApi : public QObject {
    Q_OBJECT

public:
    OAIBatchMessagesApi(const int timeOut = 0);
    ~OAIBatchMessagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  messages QList<OAIMessage> [required]
    */
    virtual void batchAnyPost(const QList<OAIMessage> &messages);

    /**
    * @param[in]  batchid QString [required]
    */
    virtual void batchBatchidGet(const QString &batchid);

    /**
    * @param[in]  sms_message OAIBatchMessage [required]
    */
    virtual void batchSchedulePost(const OAIBatchMessage &sms_message);

    /**
    * @param[in]  sms_message OAIBatchMessage [required]
    */
    virtual void batchSendPost(const OAIBatchMessage &sms_message);

    /**
    * @param[in]  batchid QString [required]
    */
    virtual void batchesScheduleBatchidDelete(const QString &batchid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void batchAnyPostCallback(OAIHttpRequestWorker *worker);
    void batchBatchidGetCallback(OAIHttpRequestWorker *worker);
    void batchSchedulePostCallback(OAIHttpRequestWorker *worker);
    void batchSendPostCallback(OAIHttpRequestWorker *worker);
    void batchesScheduleBatchidDeleteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void batchAnyPostSignal(OAIBatchMessageResponse summary);
    void batchBatchidGetSignal(QList<OAIMessageResponse> summary);
    void batchSchedulePostSignal(OAIScheduledBatchResponse summary);
    void batchSendPostSignal(OAIBatchMessageResponse summary);
    void batchesScheduleBatchidDeleteSignal(OAICancelledMessageResponse summary);


    void batchAnyPostSignalFull(OAIHttpRequestWorker *worker, OAIBatchMessageResponse summary);
    void batchBatchidGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessageResponse> summary);
    void batchSchedulePostSignalFull(OAIHttpRequestWorker *worker, OAIScheduledBatchResponse summary);
    void batchSendPostSignalFull(OAIHttpRequestWorker *worker, OAIBatchMessageResponse summary);
    void batchesScheduleBatchidDeleteSignalFull(OAIHttpRequestWorker *worker, OAICancelledMessageResponse summary);

    Q_DECL_DEPRECATED_X("Use batchAnyPostSignalError() instead")
    void batchAnyPostSignalE(OAIBatchMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchAnyPostSignalError(OAIBatchMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchBatchidGetSignalError() instead")
    void batchBatchidGetSignalE(QList<OAIMessageResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchBatchidGetSignalError(QList<OAIMessageResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchSchedulePostSignalError() instead")
    void batchSchedulePostSignalE(OAIScheduledBatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchSchedulePostSignalError(OAIScheduledBatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchSendPostSignalError() instead")
    void batchSendPostSignalE(OAIBatchMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchSendPostSignalError(OAIBatchMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchesScheduleBatchidDeleteSignalError() instead")
    void batchesScheduleBatchidDeleteSignalE(OAICancelledMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchesScheduleBatchidDeleteSignalError(OAICancelledMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use batchAnyPostSignalErrorFull() instead")
    void batchAnyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchAnyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchBatchidGetSignalErrorFull() instead")
    void batchBatchidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchBatchidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchSchedulePostSignalErrorFull() instead")
    void batchSchedulePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchSchedulePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchSendPostSignalErrorFull() instead")
    void batchSendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchSendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchesScheduleBatchidDeleteSignalErrorFull() instead")
    void batchesScheduleBatchidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchesScheduleBatchidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
