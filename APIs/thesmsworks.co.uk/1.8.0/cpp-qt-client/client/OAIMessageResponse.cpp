/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageResponse::OAIMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageResponse::OAIMessageResponse() {
    this->initializeModel();
}

OAIMessageResponse::~OAIMessageResponse() {}

void OAIMessageResponse::initializeModel() {

    m_batchid_isSet = false;
    m_batchid_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_customerid_isSet = false;
    m_customerid_isValid = false;

    m_deliveryreporturl_isSet = false;
    m_deliveryreporturl_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_failurereason_isSet = false;
    m_failurereason_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_messageid_isSet = false;
    m_messageid_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageResponse::fromJsonObject(QJsonObject json) {

    m_batchid_isValid = ::OpenAPI::fromJsonValue(m_batchid, json[QString("batchid")]);
    m_batchid_isSet = !json[QString("batchid")].isNull() && m_batchid_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_customerid_isValid = ::OpenAPI::fromJsonValue(m_customerid, json[QString("customerid")]);
    m_customerid_isSet = !json[QString("customerid")].isNull() && m_customerid_isValid;

    m_deliveryreporturl_isValid = ::OpenAPI::fromJsonValue(m_deliveryreporturl, json[QString("deliveryreporturl")]);
    m_deliveryreporturl_isSet = !json[QString("deliveryreporturl")].isNull() && m_deliveryreporturl_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_failurereason_isValid = ::OpenAPI::fromJsonValue(m_failurereason, json[QString("failurereason")]);
    m_failurereason_isSet = !json[QString("failurereason")].isNull() && m_failurereason_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_messageid_isValid = ::OpenAPI::fromJsonValue(m_messageid, json[QString("messageid")]);
    m_messageid_isSet = !json[QString("messageid")].isNull() && m_messageid_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_batchid_isSet) {
        obj.insert(QString("batchid"), ::OpenAPI::toJsonValue(m_batchid));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_customerid_isSet) {
        obj.insert(QString("customerid"), ::OpenAPI::toJsonValue(m_customerid));
    }
    if (m_deliveryreporturl_isSet) {
        obj.insert(QString("deliveryreporturl"), ::OpenAPI::toJsonValue(m_deliveryreporturl));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_failurereason.isSet()) {
        obj.insert(QString("failurereason"), ::OpenAPI::toJsonValue(m_failurereason));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_messageid_isSet) {
        obj.insert(QString("messageid"), ::OpenAPI::toJsonValue(m_messageid));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_sender_isSet) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QString OAIMessageResponse::getBatchid() const {
    return m_batchid;
}
void OAIMessageResponse::setBatchid(const QString &batchid) {
    m_batchid = batchid;
    m_batchid_isSet = true;
}

bool OAIMessageResponse::is_batchid_Set() const{
    return m_batchid_isSet;
}

bool OAIMessageResponse::is_batchid_Valid() const{
    return m_batchid_isValid;
}

QString OAIMessageResponse::getContent() const {
    return m_content;
}
void OAIMessageResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIMessageResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIMessageResponse::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIMessageResponse::getCreated() const {
    return m_created;
}
void OAIMessageResponse::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIMessageResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIMessageResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIMessageResponse::getCustomerid() const {
    return m_customerid;
}
void OAIMessageResponse::setCustomerid(const QString &customerid) {
    m_customerid = customerid;
    m_customerid_isSet = true;
}

bool OAIMessageResponse::is_customerid_Set() const{
    return m_customerid_isSet;
}

bool OAIMessageResponse::is_customerid_Valid() const{
    return m_customerid_isValid;
}

QString OAIMessageResponse::getDeliveryreporturl() const {
    return m_deliveryreporturl;
}
void OAIMessageResponse::setDeliveryreporturl(const QString &deliveryreporturl) {
    m_deliveryreporturl = deliveryreporturl;
    m_deliveryreporturl_isSet = true;
}

bool OAIMessageResponse::is_deliveryreporturl_Set() const{
    return m_deliveryreporturl_isSet;
}

bool OAIMessageResponse::is_deliveryreporturl_Valid() const{
    return m_deliveryreporturl_isValid;
}

double OAIMessageResponse::getDestination() const {
    return m_destination;
}
void OAIMessageResponse::setDestination(const double &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIMessageResponse::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIMessageResponse::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIMessageResponse_failurereason OAIMessageResponse::getFailurereason() const {
    return m_failurereason;
}
void OAIMessageResponse::setFailurereason(const OAIMessageResponse_failurereason &failurereason) {
    m_failurereason = failurereason;
    m_failurereason_isSet = true;
}

bool OAIMessageResponse::is_failurereason_Set() const{
    return m_failurereason_isSet;
}

bool OAIMessageResponse::is_failurereason_Valid() const{
    return m_failurereason_isValid;
}

QString OAIMessageResponse::getId() const {
    return m_id;
}
void OAIMessageResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessageResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessageResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMessageResponse::getIdentifier() const {
    return m_identifier;
}
void OAIMessageResponse::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIMessageResponse::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIMessageResponse::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIMessageResponse::getKeyword() const {
    return m_keyword;
}
void OAIMessageResponse::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIMessageResponse::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIMessageResponse::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QString OAIMessageResponse::getMessageid() const {
    return m_messageid;
}
void OAIMessageResponse::setMessageid(const QString &messageid) {
    m_messageid = messageid;
    m_messageid_isSet = true;
}

bool OAIMessageResponse::is_messageid_Set() const{
    return m_messageid_isSet;
}

bool OAIMessageResponse::is_messageid_Valid() const{
    return m_messageid_isValid;
}

QString OAIMessageResponse::getModified() const {
    return m_modified;
}
void OAIMessageResponse::setModified(const QString &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIMessageResponse::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIMessageResponse::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIMessageResponse::getSchedule() const {
    return m_schedule;
}
void OAIMessageResponse::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIMessageResponse::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIMessageResponse::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIMessageResponse::getSender() const {
    return m_sender;
}
void OAIMessageResponse::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIMessageResponse::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIMessageResponse::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIMessageResponse::getStatus() const {
    return m_status;
}
void OAIMessageResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessageResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessageResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessageResponse::getTag() const {
    return m_tag;
}
void OAIMessageResponse::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIMessageResponse::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIMessageResponse::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batchid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customerid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deliveryreporturl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failurereason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messageid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_created_isValid && m_customerid_isValid && m_destination_isValid && m_messageid_isValid && m_modified_isValid && m_schedule_isValid && m_sender_isValid && m_status_isValid && m_tag_isValid && true;
}

} // namespace OpenAPI
