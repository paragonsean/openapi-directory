/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledMessage::OAIScheduledMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledMessage::OAIScheduledMessage() {
    this->initializeModel();
}

OAIScheduledMessage::~OAIScheduledMessage() {}

void OAIScheduledMessage::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;
}

void OAIScheduledMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledMessage::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;
}

QString OAIScheduledMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_sender_isSet) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    return obj;
}

QString OAIScheduledMessage::getContent() const {
    return m_content;
}
void OAIScheduledMessage::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIScheduledMessage::is_content_Set() const{
    return m_content_isSet;
}

bool OAIScheduledMessage::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIScheduledMessage::getDestination() const {
    return m_destination;
}
void OAIScheduledMessage::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIScheduledMessage::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIScheduledMessage::is_destination_Valid() const{
    return m_destination_isValid;
}

QList<QString> OAIScheduledMessage::getDestinations() const {
    return m_destinations;
}
void OAIScheduledMessage::setDestinations(const QList<QString> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIScheduledMessage::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIScheduledMessage::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QString OAIScheduledMessage::getSchedule() const {
    return m_schedule;
}
void OAIScheduledMessage::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIScheduledMessage::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIScheduledMessage::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIScheduledMessage::getSender() const {
    return m_sender;
}
void OAIScheduledMessage::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIScheduledMessage::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIScheduledMessage::is_sender_Valid() const{
    return m_sender_isValid;
}

bool OAIScheduledMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
