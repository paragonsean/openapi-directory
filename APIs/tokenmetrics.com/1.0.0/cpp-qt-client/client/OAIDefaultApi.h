/**
 * Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void correlation(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  exchanges QString [optional]
    * @param[in]  time_horizon QString [optional]
    * @param[in]  low_cap QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void indices(const ::OpenAPI::OptionalParam<QString> &exchanges = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_horizon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &low_cap = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void investorGrades(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void marketIndicator(const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  page QString [optional]
    */
    virtual void price(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void pricePrediction(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void quantmetricsTier1(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void quantmetricsTier2(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void resistanceSupport(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void scenarioAnalysis(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void sentiments(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token_ids QString [optional]
    * @param[in]  token_names QString [optional]
    * @param[in]  token_symbols QString [optional]
    */
    virtual void tokens(const ::OpenAPI::OptionalParam<QString> &token_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token_names = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token_symbols = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void traderGrades(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tokens QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void tradingIndicator(const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void correlationCallback(OAIHttpRequestWorker *worker);
    void indicesCallback(OAIHttpRequestWorker *worker);
    void investorGradesCallback(OAIHttpRequestWorker *worker);
    void marketIndicatorCallback(OAIHttpRequestWorker *worker);
    void priceCallback(OAIHttpRequestWorker *worker);
    void pricePredictionCallback(OAIHttpRequestWorker *worker);
    void quantmetricsTier1Callback(OAIHttpRequestWorker *worker);
    void quantmetricsTier2Callback(OAIHttpRequestWorker *worker);
    void resistanceSupportCallback(OAIHttpRequestWorker *worker);
    void scenarioAnalysisCallback(OAIHttpRequestWorker *worker);
    void sentimentsCallback(OAIHttpRequestWorker *worker);
    void tokensCallback(OAIHttpRequestWorker *worker);
    void traderGradesCallback(OAIHttpRequestWorker *worker);
    void tradingIndicatorCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void correlationSignal();
    void indicesSignal();
    void investorGradesSignal();
    void marketIndicatorSignal();
    void priceSignal();
    void pricePredictionSignal();
    void quantmetricsTier1Signal();
    void quantmetricsTier2Signal();
    void resistanceSupportSignal();
    void scenarioAnalysisSignal();
    void sentimentsSignal();
    void tokensSignal();
    void traderGradesSignal();
    void tradingIndicatorSignal();


    void correlationSignalFull(OAIHttpRequestWorker *worker);
    void indicesSignalFull(OAIHttpRequestWorker *worker);
    void investorGradesSignalFull(OAIHttpRequestWorker *worker);
    void marketIndicatorSignalFull(OAIHttpRequestWorker *worker);
    void priceSignalFull(OAIHttpRequestWorker *worker);
    void pricePredictionSignalFull(OAIHttpRequestWorker *worker);
    void quantmetricsTier1SignalFull(OAIHttpRequestWorker *worker);
    void quantmetricsTier2SignalFull(OAIHttpRequestWorker *worker);
    void resistanceSupportSignalFull(OAIHttpRequestWorker *worker);
    void scenarioAnalysisSignalFull(OAIHttpRequestWorker *worker);
    void sentimentsSignalFull(OAIHttpRequestWorker *worker);
    void tokensSignalFull(OAIHttpRequestWorker *worker);
    void traderGradesSignalFull(OAIHttpRequestWorker *worker);
    void tradingIndicatorSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use correlationSignalError() instead")
    void correlationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void correlationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use indicesSignalError() instead")
    void indicesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void indicesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use investorGradesSignalError() instead")
    void investorGradesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void investorGradesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketIndicatorSignalError() instead")
    void marketIndicatorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void marketIndicatorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceSignalError() instead")
    void priceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void priceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricePredictionSignalError() instead")
    void pricePredictionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricePredictionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quantmetricsTier1SignalError() instead")
    void quantmetricsTier1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quantmetricsTier1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quantmetricsTier2SignalError() instead")
    void quantmetricsTier2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quantmetricsTier2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resistanceSupportSignalError() instead")
    void resistanceSupportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resistanceSupportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scenarioAnalysisSignalError() instead")
    void scenarioAnalysisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scenarioAnalysisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentsSignalError() instead")
    void sentimentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensSignalError() instead")
    void tokensSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tokensSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use traderGradesSignalError() instead")
    void traderGradesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void traderGradesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tradingIndicatorSignalError() instead")
    void tradingIndicatorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tradingIndicatorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use correlationSignalErrorFull() instead")
    void correlationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void correlationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use indicesSignalErrorFull() instead")
    void indicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use investorGradesSignalErrorFull() instead")
    void investorGradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void investorGradesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketIndicatorSignalErrorFull() instead")
    void marketIndicatorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketIndicatorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceSignalErrorFull() instead")
    void priceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void priceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricePredictionSignalErrorFull() instead")
    void pricePredictionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricePredictionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quantmetricsTier1SignalErrorFull() instead")
    void quantmetricsTier1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quantmetricsTier1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quantmetricsTier2SignalErrorFull() instead")
    void quantmetricsTier2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quantmetricsTier2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resistanceSupportSignalErrorFull() instead")
    void resistanceSupportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resistanceSupportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scenarioAnalysisSignalErrorFull() instead")
    void scenarioAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scenarioAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentsSignalErrorFull() instead")
    void sentimentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensSignalErrorFull() instead")
    void tokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use traderGradesSignalErrorFull() instead")
    void traderGradesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void traderGradesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tradingIndicatorSignalErrorFull() instead")
    void tradingIndicatorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tradingIndicatorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
