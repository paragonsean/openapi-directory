/**
 * Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the correlation operation.
     * @callback module:api/DefaultApi~correlationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Correlation
     * Correlation
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~correlationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    correlation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/correlation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indices operation.
     * @callback module:api/DefaultApi~indicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Indices
     * Indices
     * @param {Object} opts Optional parameters
     * @param {String} [exchanges] 
     * @param {String} [timeHorizon] 
     * @param {String} [lowCap] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~indicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    indices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'exchanges': opts['exchanges'],
        'timeHorizon': opts['timeHorizon'],
        'lowCap': opts['lowCap'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/indices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investorGrades operation.
     * @callback module:api/DefaultApi~investorGradesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Investor Grades
     * Investor Grades
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~investorGradesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    investorGrades(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/investor-grades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketIndicator operation.
     * @callback module:api/DefaultApi~marketIndicatorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Market Indicator
     * Market Indicator
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~marketIndicatorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    marketIndicator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/market-indicator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the price operation.
     * @callback module:api/DefaultApi~priceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price
     * Price
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [limit] 
     * @param {String} [page] 
     * @param {module:api/DefaultApi~priceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    price(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pricePrediction operation.
     * @callback module:api/DefaultApi~pricePredictionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price Prediction
     * Price Prediction
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [date] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~pricePredictionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pricePrediction(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'date': opts['date'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/price-prediction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quantmetricsTier1 operation.
     * @callback module:api/DefaultApi~quantmetricsTier1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quantmetrics Tier 1
     * Quantmetrics Tier 1
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [date] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~quantmetricsTier1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    quantmetricsTier1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'date': opts['date'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/quantmetrics-tier-1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quantmetricsTier2 operation.
     * @callback module:api/DefaultApi~quantmetricsTier2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quantmetrics Tier 2
     * Quantmetrics Tier 2
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [date] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~quantmetricsTier2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    quantmetricsTier2(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'date': opts['date'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/quantmetrics-tier-2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resistanceSupport operation.
     * @callback module:api/DefaultApi~resistanceSupportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resistance & Support
     * Resistance & Support
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~resistanceSupportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resistanceSupport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/resistance-support', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scenarioAnalysis operation.
     * @callback module:api/DefaultApi~scenarioAnalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scenario Analysis
     * Scenario Analysis
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~scenarioAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scenarioAnalysis(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/scenario-analysis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sentiments operation.
     * @callback module:api/DefaultApi~sentimentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sentiments
     * Sentiments
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~sentimentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sentiments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sentiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokens operation.
     * @callback module:api/DefaultApi~tokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens
     * Tokens
     * @param {Object} opts Optional parameters
     * @param {String} [tokenIds] 
     * @param {String} [tokenNames] 
     * @param {String} [tokenSymbols] 
     * @param {module:api/DefaultApi~tokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tokens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token_ids': opts['tokenIds'],
        'token_names': opts['tokenNames'],
        'token_symbols': opts['tokenSymbols']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the traderGrades operation.
     * @callback module:api/DefaultApi~traderGradesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trader Grades
     * Trader Grades
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~traderGradesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    traderGrades(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/trader-grades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tradingIndicator operation.
     * @callback module:api/DefaultApi~tradingIndicatorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trading Indicator
     * Trading Indicator
     * @param {Object} opts Optional parameters
     * @param {String} [tokens] 
     * @param {String} [limit] 
     * @param {module:api/DefaultApi~tradingIndicatorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tradingIndicator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tokens': opts['tokens'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/trading-indicator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
