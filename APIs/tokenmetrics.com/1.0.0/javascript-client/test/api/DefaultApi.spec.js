/**
 * Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Endpoints);
  }
}(this, function(expect, Endpoints) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Endpoints.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('correlation', function() {
      it('should call correlation successfully', function(done) {
        //uncomment below and update the code to test correlation
        //instance.correlation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('indices', function() {
      it('should call indices successfully', function(done) {
        //uncomment below and update the code to test indices
        //instance.indices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('investorGrades', function() {
      it('should call investorGrades successfully', function(done) {
        //uncomment below and update the code to test investorGrades
        //instance.investorGrades(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('marketIndicator', function() {
      it('should call marketIndicator successfully', function(done) {
        //uncomment below and update the code to test marketIndicator
        //instance.marketIndicator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('price', function() {
      it('should call price successfully', function(done) {
        //uncomment below and update the code to test price
        //instance.price(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pricePrediction', function() {
      it('should call pricePrediction successfully', function(done) {
        //uncomment below and update the code to test pricePrediction
        //instance.pricePrediction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quantmetricsTier1', function() {
      it('should call quantmetricsTier1 successfully', function(done) {
        //uncomment below and update the code to test quantmetricsTier1
        //instance.quantmetricsTier1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quantmetricsTier2', function() {
      it('should call quantmetricsTier2 successfully', function(done) {
        //uncomment below and update the code to test quantmetricsTier2
        //instance.quantmetricsTier2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resistanceSupport', function() {
      it('should call resistanceSupport successfully', function(done) {
        //uncomment below and update the code to test resistanceSupport
        //instance.resistanceSupport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scenarioAnalysis', function() {
      it('should call scenarioAnalysis successfully', function(done) {
        //uncomment below and update the code to test scenarioAnalysis
        //instance.scenarioAnalysis(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sentiments', function() {
      it('should call sentiments successfully', function(done) {
        //uncomment below and update the code to test sentiments
        //instance.sentiments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tokens', function() {
      it('should call tokens successfully', function(done) {
        //uncomment below and update the code to test tokens
        //instance.tokens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('traderGrades', function() {
      it('should call traderGrades successfully', function(done) {
        //uncomment below and update the code to test traderGrades
        //instance.traderGrades(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tradingIndicator', function() {
      it('should call tradingIndicator successfully', function(done) {
        //uncomment below and update the code to test tradingIndicator
        //instance.tradingIndicator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
