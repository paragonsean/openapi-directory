/*
 * Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Correlation
     *
     * Correlation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void correlationTest() throws ApiException {
        String tokens = null;
        String limit = null;
        api.correlation(tokens, limit);
        // TODO: test validations
    }

    /**
     * Indices
     *
     * Indices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void indicesTest() throws ApiException {
        String exchanges = null;
        String timeHorizon = null;
        String lowCap = null;
        String startDate = null;
        String endDate = null;
        String limit = null;
        api.indices(exchanges, timeHorizon, lowCap, startDate, endDate, limit);
        // TODO: test validations
    }

    /**
     * Investor Grades
     *
     * Investor Grades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void investorGradesTest() throws ApiException {
        String tokens = null;
        String startDate = null;
        String endDate = null;
        String limit = null;
        api.investorGrades(tokens, startDate, endDate, limit);
        // TODO: test validations
    }

    /**
     * Market Indicator
     *
     * Market Indicator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marketIndicatorTest() throws ApiException {
        String startDate = null;
        String endDate = null;
        String limit = null;
        api.marketIndicator(startDate, endDate, limit);
        // TODO: test validations
    }

    /**
     * Price
     *
     * Price
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceTest() throws ApiException {
        String tokens = null;
        String startDate = null;
        String endDate = null;
        String limit = null;
        String page = null;
        api.price(tokens, startDate, endDate, limit, page);
        // TODO: test validations
    }

    /**
     * Price Prediction
     *
     * Price Prediction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pricePredictionTest() throws ApiException {
        String tokens = null;
        String date = null;
        String limit = null;
        api.pricePrediction(tokens, date, limit);
        // TODO: test validations
    }

    /**
     * Quantmetrics Tier 1
     *
     * Quantmetrics Tier 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quantmetricsTier1Test() throws ApiException {
        String tokens = null;
        String date = null;
        String limit = null;
        api.quantmetricsTier1(tokens, date, limit);
        // TODO: test validations
    }

    /**
     * Quantmetrics Tier 2
     *
     * Quantmetrics Tier 2
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quantmetricsTier2Test() throws ApiException {
        String tokens = null;
        String date = null;
        String limit = null;
        api.quantmetricsTier2(tokens, date, limit);
        // TODO: test validations
    }

    /**
     * Resistance &amp; Support
     *
     * Resistance &amp; Support
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resistanceSupportTest() throws ApiException {
        String tokens = null;
        String startDate = null;
        String endDate = null;
        String limit = null;
        api.resistanceSupport(tokens, startDate, endDate, limit);
        // TODO: test validations
    }

    /**
     * Scenario Analysis
     *
     * Scenario Analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scenarioAnalysisTest() throws ApiException {
        String tokens = null;
        String limit = null;
        api.scenarioAnalysis(tokens, limit);
        // TODO: test validations
    }

    /**
     * Sentiments
     *
     * Sentiments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sentimentsTest() throws ApiException {
        String tokens = null;
        String startDate = null;
        String endDate = null;
        String limit = null;
        api.sentiments(tokens, startDate, endDate, limit);
        // TODO: test validations
    }

    /**
     * Tokens
     *
     * Tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tokensTest() throws ApiException {
        String tokenIds = null;
        String tokenNames = null;
        String tokenSymbols = null;
        api.tokens(tokenIds, tokenNames, tokenSymbols);
        // TODO: test validations
    }

    /**
     * Trader Grades
     *
     * Trader Grades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void traderGradesTest() throws ApiException {
        String tokens = null;
        String startDate = null;
        String endDate = null;
        String limit = null;
        api.traderGrades(tokens, startDate, endDate, limit);
        // TODO: test validations
    }

    /**
     * Trading Indicator
     *
     * Trading Indicator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tradingIndicatorTest() throws ApiException {
        String tokens = null;
        String limit = null;
        api.tradingIndicator(tokens, limit);
        // TODO: test validations
    }

}
