# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserLoginResponseItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_after: datetime=None, token: str=None):
        """UserLoginResponseItem - a model defined in OpenAPI

        :param expires_after: The expires_after of this UserLoginResponseItem.
        :param token: The token of this UserLoginResponseItem.
        """
        self.openapi_types = {
            'expires_after': datetime,
            'token': str
        }

        self.attribute_map = {
            'expires_after': 'expires_after',
            'token': 'token'
        }

        self._expires_after = expires_after
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserLoginResponseItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User-Login-Response-Item of this UserLoginResponseItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_after(self):
        """Gets the expires_after of this UserLoginResponseItem.

        Token expiration timestamp. By default, this is 7 days.

        :return: The expires_after of this UserLoginResponseItem.
        :rtype: datetime
        """
        return self._expires_after

    @expires_after.setter
    def expires_after(self, expires_after):
        """Sets the expires_after of this UserLoginResponseItem.

        Token expiration timestamp. By default, this is 7 days.

        :param expires_after: The expires_after of this UserLoginResponseItem.
        :type expires_after: datetime
        """

        self._expires_after = expires_after

    @property
    def token(self):
        """Gets the token of this UserLoginResponseItem.

        Authentication token to be used for all other WhatsApp Business API calls. The token must be sent in the authorization header in the format: Authorization: Bearer <authentication-token>

        :return: The token of this UserLoginResponseItem.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UserLoginResponseItem.

        Authentication token to be used for all other WhatsApp Business API calls. The token must be sent in the authorization header in the format: Authorization: Bearer <authentication-token>

        :param token: The token of this UserLoginResponseItem.
        :type token: str
        """

        self._token = token
