# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Name(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, formatted_name: str=None, last_name: str=None, prefix: str=None, suffix: str=None):
        """Name - a model defined in OpenAPI

        :param first_name: The first_name of this Name.
        :param formatted_name: The formatted_name of this Name.
        :param last_name: The last_name of this Name.
        :param prefix: The prefix of this Name.
        :param suffix: The suffix of this Name.
        """
        self.openapi_types = {
            'first_name': str,
            'formatted_name': str,
            'last_name': str,
            'prefix': str,
            'suffix': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'formatted_name': 'formatted_name',
            'last_name': 'last_name',
            'prefix': 'prefix',
            'suffix': 'suffix'
        }

        self._first_name = first_name
        self._formatted_name = formatted_name
        self._last_name = last_name
        self._prefix = prefix
        self._suffix = suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Name':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Name of this Name.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this Name.

        First name

        :return: The first_name of this Name.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Name.

        First name

        :param first_name: The first_name of this Name.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def formatted_name(self):
        """Gets the formatted_name of this Name.

        Full name as it normally appears

        :return: The formatted_name of this Name.
        :rtype: str
        """
        return self._formatted_name

    @formatted_name.setter
    def formatted_name(self, formatted_name):
        """Sets the formatted_name of this Name.

        Full name as it normally appears

        :param formatted_name: The formatted_name of this Name.
        :type formatted_name: str
        """
        if formatted_name is None:
            raise ValueError("Invalid value for `formatted_name`, must not be `None`")

        self._formatted_name = formatted_name

    @property
    def last_name(self):
        """Gets the last_name of this Name.

        Last name

        :return: The last_name of this Name.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Name.

        Last name

        :param last_name: The last_name of this Name.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def prefix(self):
        """Gets the prefix of this Name.

        Name preffix

        :return: The prefix of this Name.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Name.

        Name preffix

        :param prefix: The prefix of this Name.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this Name.

        Name suffix

        :return: The suffix of this Name.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Name.

        Name suffix

        :param suffix: The suffix of this Name.
        :type suffix: str
        """

        self._suffix = suffix
