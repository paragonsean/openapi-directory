# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media import Media
from openapi_server.models.webhooks import Webhooks
from openapi_server import util


class ApplicationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_backoff_delay_ms: str='3000', callback_persist: bool=True, heartbeat_interval: int=5, max_callback_backoff_delay_ms: str='900000', media: Media=None, on_call_pager: str=None, pass_through: bool=True, sent_status: bool=False, unhealthy_interval: int=30, webhooks: Webhooks=None):
        """ApplicationSettings - a model defined in OpenAPI

        :param callback_backoff_delay_ms: The callback_backoff_delay_ms of this ApplicationSettings.
        :param callback_persist: The callback_persist of this ApplicationSettings.
        :param heartbeat_interval: The heartbeat_interval of this ApplicationSettings.
        :param max_callback_backoff_delay_ms: The max_callback_backoff_delay_ms of this ApplicationSettings.
        :param media: The media of this ApplicationSettings.
        :param on_call_pager: The on_call_pager of this ApplicationSettings.
        :param pass_through: The pass_through of this ApplicationSettings.
        :param sent_status: The sent_status of this ApplicationSettings.
        :param unhealthy_interval: The unhealthy_interval of this ApplicationSettings.
        :param webhooks: The webhooks of this ApplicationSettings.
        """
        self.openapi_types = {
            'callback_backoff_delay_ms': str,
            'callback_persist': bool,
            'heartbeat_interval': int,
            'max_callback_backoff_delay_ms': str,
            'media': Media,
            'on_call_pager': str,
            'pass_through': bool,
            'sent_status': bool,
            'unhealthy_interval': int,
            'webhooks': Webhooks
        }

        self.attribute_map = {
            'callback_backoff_delay_ms': 'callback_backoff_delay_ms',
            'callback_persist': 'callback_persist',
            'heartbeat_interval': 'heartbeat_interval',
            'max_callback_backoff_delay_ms': 'max_callback_backoff_delay_ms',
            'media': 'media',
            'on_call_pager': 'on_call_pager',
            'pass_through': 'pass_through',
            'sent_status': 'sent_status',
            'unhealthy_interval': 'unhealthy_interval',
            'webhooks': 'webhooks'
        }

        self._callback_backoff_delay_ms = callback_backoff_delay_ms
        self._callback_persist = callback_persist
        self._heartbeat_interval = heartbeat_interval
        self._max_callback_backoff_delay_ms = max_callback_backoff_delay_ms
        self._media = media
        self._on_call_pager = on_call_pager
        self._pass_through = pass_through
        self._sent_status = sent_status
        self._unhealthy_interval = unhealthy_interval
        self._webhooks = webhooks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Application-Settings of this ApplicationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_backoff_delay_ms(self):
        """Gets the callback_backoff_delay_ms of this ApplicationSettings.

        Backoff delay for a failed callback in milliseconds This setting is used to configure the amount of time the backoff delays before retrying a failed callback. The backoff delay increases linearly by this value each time a callback fails to get a HTTPS 200 OK response. The backoff delay is capped by the max_callback_backoff_delay_ms setting.

        :return: The callback_backoff_delay_ms of this ApplicationSettings.
        :rtype: str
        """
        return self._callback_backoff_delay_ms

    @callback_backoff_delay_ms.setter
    def callback_backoff_delay_ms(self, callback_backoff_delay_ms):
        """Sets the callback_backoff_delay_ms of this ApplicationSettings.

        Backoff delay for a failed callback in milliseconds This setting is used to configure the amount of time the backoff delays before retrying a failed callback. The backoff delay increases linearly by this value each time a callback fails to get a HTTPS 200 OK response. The backoff delay is capped by the max_callback_backoff_delay_ms setting.

        :param callback_backoff_delay_ms: The callback_backoff_delay_ms of this ApplicationSettings.
        :type callback_backoff_delay_ms: str
        """

        self._callback_backoff_delay_ms = callback_backoff_delay_ms

    @property
    def callback_persist(self):
        """Gets the callback_persist of this ApplicationSettings.

        Stores callbacks on disk until they are successfully acknowledged by the Webhook or not. Restart required.

        :return: The callback_persist of this ApplicationSettings.
        :rtype: bool
        """
        return self._callback_persist

    @callback_persist.setter
    def callback_persist(self, callback_persist):
        """Sets the callback_persist of this ApplicationSettings.

        Stores callbacks on disk until they are successfully acknowledged by the Webhook or not. Restart required.

        :param callback_persist: The callback_persist of this ApplicationSettings.
        :type callback_persist: bool
        """

        self._callback_persist = callback_persist

    @property
    def heartbeat_interval(self):
        """Gets the heartbeat_interval of this ApplicationSettings.

        Multiconnect: Interval of the Master node monitoring of Coreapp nodes in seconds

        :return: The heartbeat_interval of this ApplicationSettings.
        :rtype: int
        """
        return self._heartbeat_interval

    @heartbeat_interval.setter
    def heartbeat_interval(self, heartbeat_interval):
        """Sets the heartbeat_interval of this ApplicationSettings.

        Multiconnect: Interval of the Master node monitoring of Coreapp nodes in seconds

        :param heartbeat_interval: The heartbeat_interval of this ApplicationSettings.
        :type heartbeat_interval: int
        """

        self._heartbeat_interval = heartbeat_interval

    @property
    def max_callback_backoff_delay_ms(self):
        """Gets the max_callback_backoff_delay_ms of this ApplicationSettings.

        Maximum delay for a failed callback in milliseconds

        :return: The max_callback_backoff_delay_ms of this ApplicationSettings.
        :rtype: str
        """
        return self._max_callback_backoff_delay_ms

    @max_callback_backoff_delay_ms.setter
    def max_callback_backoff_delay_ms(self, max_callback_backoff_delay_ms):
        """Sets the max_callback_backoff_delay_ms of this ApplicationSettings.

        Maximum delay for a failed callback in milliseconds

        :param max_callback_backoff_delay_ms: The max_callback_backoff_delay_ms of this ApplicationSettings.
        :type max_callback_backoff_delay_ms: str
        """

        self._max_callback_backoff_delay_ms = max_callback_backoff_delay_ms

    @property
    def media(self):
        """Gets the media of this ApplicationSettings.


        :return: The media of this ApplicationSettings.
        :rtype: Media
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this ApplicationSettings.


        :param media: The media of this ApplicationSettings.
        :type media: Media
        """

        self._media = media

    @property
    def on_call_pager(self):
        """Gets the on_call_pager of this ApplicationSettings.

        Set to valid WhatsApp Group with users who wish to see alerts for critical errors and messages.

        :return: The on_call_pager of this ApplicationSettings.
        :rtype: str
        """
        return self._on_call_pager

    @on_call_pager.setter
    def on_call_pager(self, on_call_pager):
        """Sets the on_call_pager of this ApplicationSettings.

        Set to valid WhatsApp Group with users who wish to see alerts for critical errors and messages.

        :param on_call_pager: The on_call_pager of this ApplicationSettings.
        :type on_call_pager: str
        """

        self._on_call_pager = on_call_pager

    @property
    def pass_through(self):
        """Gets the pass_through of this ApplicationSettings.

        When true, removes messages from the local database after they are delivered to or read by the recipient. When false, saves all messages on local storage until they are explicitly deleted. When messages are sent, they are stored in a local database. This database is used as the application's history. Since the business keeps its own history, you can specify whether you want message pass_through or not. Restart required.

        :return: The pass_through of this ApplicationSettings.
        :rtype: bool
        """
        return self._pass_through

    @pass_through.setter
    def pass_through(self, pass_through):
        """Sets the pass_through of this ApplicationSettings.

        When true, removes messages from the local database after they are delivered to or read by the recipient. When false, saves all messages on local storage until they are explicitly deleted. When messages are sent, they are stored in a local database. This database is used as the application's history. Since the business keeps its own history, you can specify whether you want message pass_through or not. Restart required.

        :param pass_through: The pass_through of this ApplicationSettings.
        :type pass_through: bool
        """

        self._pass_through = pass_through

    @property
    def sent_status(self):
        """Gets the sent_status of this ApplicationSettings.

        Receive a notification that a message is sent to server. When true, you will receive a message indicating that a message has been sent. If false (default), you will not receive notification.

        :return: The sent_status of this ApplicationSettings.
        :rtype: bool
        """
        return self._sent_status

    @sent_status.setter
    def sent_status(self, sent_status):
        """Sets the sent_status of this ApplicationSettings.

        Receive a notification that a message is sent to server. When true, you will receive a message indicating that a message has been sent. If false (default), you will not receive notification.

        :param sent_status: The sent_status of this ApplicationSettings.
        :type sent_status: bool
        """

        self._sent_status = sent_status

    @property
    def unhealthy_interval(self):
        """Gets the unhealthy_interval of this ApplicationSettings.

        Multiconnect: Maximum amount of seconds a Master node waits for a Coreapp node to respond to a heartbeat before considering it unhealthy and starting the failover process.

        :return: The unhealthy_interval of this ApplicationSettings.
        :rtype: int
        """
        return self._unhealthy_interval

    @unhealthy_interval.setter
    def unhealthy_interval(self, unhealthy_interval):
        """Sets the unhealthy_interval of this ApplicationSettings.

        Multiconnect: Maximum amount of seconds a Master node waits for a Coreapp node to respond to a heartbeat before considering it unhealthy and starting the failover process.

        :param unhealthy_interval: The unhealthy_interval of this ApplicationSettings.
        :type unhealthy_interval: int
        """

        self._unhealthy_interval = unhealthy_interval

    @property
    def webhooks(self):
        """Gets the webhooks of this ApplicationSettings.


        :return: The webhooks of this ApplicationSettings.
        :rtype: Webhooks
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks):
        """Sets the webhooks of this ApplicationSettings.


        :param webhooks: The webhooks of this ApplicationSettings.
        :type webhooks: Webhooks
        """

        self._webhooks = webhooks
