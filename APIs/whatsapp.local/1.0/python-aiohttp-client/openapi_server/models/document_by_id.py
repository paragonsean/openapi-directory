# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentById(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, filename: str=None, id: str=None):
        """DocumentById - a model defined in OpenAPI

        :param caption: The caption of this DocumentById.
        :param filename: The filename of this DocumentById.
        :param id: The id of this DocumentById.
        """
        self.openapi_types = {
            'caption': str,
            'filename': str,
            'id': str
        }

        self.attribute_map = {
            'caption': 'caption',
            'filename': 'filename',
            'id': 'id'
        }

        self._caption = caption
        self._filename = filename
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentById':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentById of this DocumentById.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this DocumentById.


        :return: The caption of this DocumentById.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this DocumentById.


        :param caption: The caption of this DocumentById.
        :type caption: str
        """
        if caption is None:
            raise ValueError("Invalid value for `caption`, must not be `None`")

        self._caption = caption

    @property
    def filename(self):
        """Gets the filename of this DocumentById.


        :return: The filename of this DocumentById.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DocumentById.


        :param filename: The filename of this DocumentById.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def id(self):
        """Gets the id of this DocumentById.


        :return: The id of this DocumentById.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentById.


        :param id: The id of this DocumentById.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
