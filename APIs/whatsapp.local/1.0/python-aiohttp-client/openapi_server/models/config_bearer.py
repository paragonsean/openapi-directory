# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigBearer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bearer: str=None):
        """ConfigBearer - a model defined in OpenAPI

        :param bearer: The bearer of this ConfigBearer.
        """
        self.openapi_types = {
            'bearer': str
        }

        self.attribute_map = {
            'bearer': 'bearer'
        }

        self._bearer = bearer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigBearer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Config-Bearer of this ConfigBearer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bearer(self):
        """Gets the bearer of this ConfigBearer.


        :return: The bearer of this ConfigBearer.
        :rtype: str
        """
        return self._bearer

    @bearer.setter
    def bearer(self, bearer):
        """Sets the bearer of this ConfigBearer.


        :param bearer: The bearer of this ConfigBearer.
        :type bearer: str
        """
        if bearer is None:
            raise ValueError("Invalid value for `bearer`, must not be `None`")

        self._bearer = bearer
