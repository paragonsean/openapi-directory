# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.webhook_contact import WebhookContact
from openapi_server.models.webhook_message import WebhookMessage
from openapi_server.models.webhook_status import WebhookStatus
from openapi_server import util


class WebhookEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contacts: List[WebhookContact]=None, errors: List[Error]=None, messages: List[WebhookMessage]=None, statuses: List[WebhookStatus]=None):
        """WebhookEvent - a model defined in OpenAPI

        :param contacts: The contacts of this WebhookEvent.
        :param errors: The errors of this WebhookEvent.
        :param messages: The messages of this WebhookEvent.
        :param statuses: The statuses of this WebhookEvent.
        """
        self.openapi_types = {
            'contacts': List[WebhookContact],
            'errors': List[Error],
            'messages': List[WebhookMessage],
            'statuses': List[WebhookStatus]
        }

        self.attribute_map = {
            'contacts': 'contacts',
            'errors': 'errors',
            'messages': 'messages',
            'statuses': 'statuses'
        }

        self._contacts = contacts
        self._errors = errors
        self._messages = messages
        self._statuses = statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook-Event of this WebhookEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contacts(self):
        """Gets the contacts of this WebhookEvent.


        :return: The contacts of this WebhookEvent.
        :rtype: List[WebhookContact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this WebhookEvent.


        :param contacts: The contacts of this WebhookEvent.
        :type contacts: List[WebhookContact]
        """

        self._contacts = contacts

    @property
    def errors(self):
        """Gets the errors of this WebhookEvent.


        :return: The errors of this WebhookEvent.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this WebhookEvent.


        :param errors: The errors of this WebhookEvent.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def messages(self):
        """Gets the messages of this WebhookEvent.


        :return: The messages of this WebhookEvent.
        :rtype: List[WebhookMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this WebhookEvent.


        :param messages: The messages of this WebhookEvent.
        :type messages: List[WebhookMessage]
        """

        self._messages = messages

    @property
    def statuses(self):
        """Gets the statuses of this WebhookEvent.


        :return: The statuses of this WebhookEvent.
        :rtype: List[WebhookStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this WebhookEvent.


        :param statuses: The statuses of this WebhookEvent.
        :type statuses: List[WebhookStatus]
        """

        self._statuses = statuses
