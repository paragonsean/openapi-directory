# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookSystem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, type: str=None):
        """WebhookSystem - a model defined in OpenAPI

        :param body: The body of this WebhookSystem.
        :param type: The type of this WebhookSystem.
        """
        self.openapi_types = {
            'body': str,
            'type': str
        }

        self.attribute_map = {
            'body': 'body',
            'type': 'type'
        }

        self._body = body
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookSystem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook-System of this WebhookSystem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this WebhookSystem.


        :return: The body of this WebhookSystem.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this WebhookSystem.


        :param body: The body of this WebhookSystem.
        :type body: str
        """

        self._body = body

    @property
    def type(self):
        """Gets the type of this WebhookSystem.

        

        :return: The type of this WebhookSystem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebhookSystem.

        

        :param type: The type of this WebhookSystem.
        :type type: str
        """
        allowed_values = ["group_created", "group_user_promoted", "group_user_demoted", "group_user_joined", "group_user_left", "group_subject_changed", "group_description_changed", "group_icon_changed", "group_icon_deleted", "group_invite_link_revoked", "user_identity_changed", "group_user_changed_number", "group_error_fetching_photo", "group_error_adding_users", "group_error_adding_user", "group_error_full_adding_users", "group_error_removing_user", "broadcast_list_created", "group_ended", "group_error_blocked_adding_user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
