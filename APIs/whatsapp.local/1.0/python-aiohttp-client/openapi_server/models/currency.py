# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_1000: int=None, currency_code: str=None):
        """Currency - a model defined in OpenAPI

        :param amount_1000: The amount_1000 of this Currency.
        :param currency_code: The currency_code of this Currency.
        """
        self.openapi_types = {
            'amount_1000': int,
            'currency_code': str
        }

        self.attribute_map = {
            'amount_1000': 'amount_1000',
            'currency_code': 'currency_code'
        }

        self._amount_1000 = amount_1000
        self._currency_code = currency_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Currency of this Currency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_1000(self):
        """Gets the amount_1000 of this Currency.


        :return: The amount_1000 of this Currency.
        :rtype: int
        """
        return self._amount_1000

    @amount_1000.setter
    def amount_1000(self, amount_1000):
        """Sets the amount_1000 of this Currency.


        :param amount_1000: The amount_1000 of this Currency.
        :type amount_1000: int
        """
        if amount_1000 is None:
            raise ValueError("Invalid value for `amount_1000`, must not be `None`")

        self._amount_1000 = amount_1000

    @property
    def currency_code(self):
        """Gets the currency_code of this Currency.


        :return: The currency_code of this Currency.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Currency.


        :param currency_code: The currency_code of this Currency.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code
