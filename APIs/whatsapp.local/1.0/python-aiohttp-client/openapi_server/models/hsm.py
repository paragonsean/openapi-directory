# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language import Language
from openapi_server.models.localizable_param import LocalizableParam
from openapi_server import util


class Hsm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, element_name: str=None, language: Language=None, localizable_params: List[LocalizableParam]=None, namespace: str=None):
        """Hsm - a model defined in OpenAPI

        :param element_name: The element_name of this Hsm.
        :param language: The language of this Hsm.
        :param localizable_params: The localizable_params of this Hsm.
        :param namespace: The namespace of this Hsm.
        """
        self.openapi_types = {
            'element_name': str,
            'language': Language,
            'localizable_params': List[LocalizableParam],
            'namespace': str
        }

        self.attribute_map = {
            'element_name': 'element_name',
            'language': 'language',
            'localizable_params': 'localizable_params',
            'namespace': 'namespace'
        }

        self._element_name = element_name
        self._language = language
        self._localizable_params = localizable_params
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hsm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hsm of this Hsm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def element_name(self):
        """Gets the element_name of this Hsm.

        The element name that indicates which template to use within the namespace

        :return: The element_name of this Hsm.
        :rtype: str
        """
        return self._element_name

    @element_name.setter
    def element_name(self, element_name):
        """Sets the element_name of this Hsm.

        The element name that indicates which template to use within the namespace

        :param element_name: The element_name of this Hsm.
        :type element_name: str
        """
        if element_name is None:
            raise ValueError("Invalid value for `element_name`, must not be `None`")

        self._element_name = element_name

    @property
    def language(self):
        """Gets the language of this Hsm.


        :return: The language of this Hsm.
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Hsm.


        :param language: The language of this Hsm.
        :type language: Language
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def localizable_params(self):
        """Gets the localizable_params of this Hsm.

        This field is an array of values to apply to variables in the template

        :return: The localizable_params of this Hsm.
        :rtype: List[LocalizableParam]
        """
        return self._localizable_params

    @localizable_params.setter
    def localizable_params(self, localizable_params):
        """Sets the localizable_params of this Hsm.

        This field is an array of values to apply to variables in the template

        :param localizable_params: The localizable_params of this Hsm.
        :type localizable_params: List[LocalizableParam]
        """
        if localizable_params is None:
            raise ValueError("Invalid value for `localizable_params`, must not be `None`")

        self._localizable_params = localizable_params

    @property
    def namespace(self):
        """Gets the namespace of this Hsm.

        The namespace that will be used

        :return: The namespace of this Hsm.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Hsm.

        The namespace that will be used

        :param namespace: The namespace of this Hsm.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace
