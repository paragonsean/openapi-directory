# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetShardsRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cc: str=None, phone_number: str=None, pin: str=None, shards: int=None):
        """SetShardsRequestBody - a model defined in OpenAPI

        :param cc: The cc of this SetShardsRequestBody.
        :param phone_number: The phone_number of this SetShardsRequestBody.
        :param pin: The pin of this SetShardsRequestBody.
        :param shards: The shards of this SetShardsRequestBody.
        """
        self.openapi_types = {
            'cc': str,
            'phone_number': str,
            'pin': str,
            'shards': int
        }

        self.attribute_map = {
            'cc': 'cc',
            'phone_number': 'phone_number',
            'pin': 'pin',
            'shards': 'shards'
        }

        self._cc = cc
        self._phone_number = phone_number
        self._pin = pin
        self._shards = shards

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetShardsRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Set-Shards-Request-Body of this SetShardsRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cc(self):
        """Gets the cc of this SetShardsRequestBody.


        :return: The cc of this SetShardsRequestBody.
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this SetShardsRequestBody.


        :param cc: The cc of this SetShardsRequestBody.
        :type cc: str
        """
        if cc is None:
            raise ValueError("Invalid value for `cc`, must not be `None`")

        self._cc = cc

    @property
    def phone_number(self):
        """Gets the phone_number of this SetShardsRequestBody.


        :return: The phone_number of this SetShardsRequestBody.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SetShardsRequestBody.


        :param phone_number: The phone_number of this SetShardsRequestBody.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def pin(self):
        """Gets the pin of this SetShardsRequestBody.


        :return: The pin of this SetShardsRequestBody.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this SetShardsRequestBody.


        :param pin: The pin of this SetShardsRequestBody.
        :type pin: str
        """
        if pin is None:
            raise ValueError("Invalid value for `pin`, must not be `None`")

        self._pin = pin

    @property
    def shards(self):
        """Gets the shards of this SetShardsRequestBody.


        :return: The shards of this SetShardsRequestBody.
        :rtype: int
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this SetShardsRequestBody.


        :param shards: The shards of this SetShardsRequestBody.
        :type shards: int
        """
        allowed_values = [1, 2, 4, 8, 16, 32]  # noqa: E501
        if shards not in allowed_values:
            raise ValueError(
                "Invalid value for `shards` ({0}), must be one of {1}"
                .format(shards, allowed_values)
            )

        self._shards = shards
