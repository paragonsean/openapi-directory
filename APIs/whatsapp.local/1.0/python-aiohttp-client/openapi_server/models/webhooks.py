# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Webhooks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_concurrent_requests: int=6, url: str=None):
        """Webhooks - a model defined in OpenAPI

        :param max_concurrent_requests: The max_concurrent_requests of this Webhooks.
        :param url: The url of this Webhooks.
        """
        self.openapi_types = {
            'max_concurrent_requests': int,
            'url': str
        }

        self.attribute_map = {
            'max_concurrent_requests': 'max_concurrent_requests',
            'url': 'url'
        }

        self._max_concurrent_requests = max_concurrent_requests
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webhooks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhooks of this Webhooks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_concurrent_requests(self):
        """Gets the max_concurrent_requests of this Webhooks.

        Configures the maximum number of inflight callback requests that are sent out. Can be set to 6 (default), 12, 18, or 24.

        :return: The max_concurrent_requests of this Webhooks.
        :rtype: int
        """
        return self._max_concurrent_requests

    @max_concurrent_requests.setter
    def max_concurrent_requests(self, max_concurrent_requests):
        """Sets the max_concurrent_requests of this Webhooks.

        Configures the maximum number of inflight callback requests that are sent out. Can be set to 6 (default), 12, 18, or 24.

        :param max_concurrent_requests: The max_concurrent_requests of this Webhooks.
        :type max_concurrent_requests: int
        """
        allowed_values = [6, 12, 18, 24]  # noqa: E501
        if max_concurrent_requests not in allowed_values:
            raise ValueError(
                "Invalid value for `max_concurrent_requests` ({0}), must be one of {1}"
                .format(max_concurrent_requests, allowed_values)
            )

        self._max_concurrent_requests = max_concurrent_requests

    @property
    def url(self):
        """Gets the url of this Webhooks.

        Inbound and outbound notifications are routed to this URL. A HTTPS-based endpoint is required; HTTP will not work.

        :return: The url of this Webhooks.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhooks.

        Inbound and outbound notifications are routed to this URL. A HTTPS-based endpoint is required; HTTP will not work.

        :param url: The url of this Webhooks.
        :type url: str
        """

        self._url = url
