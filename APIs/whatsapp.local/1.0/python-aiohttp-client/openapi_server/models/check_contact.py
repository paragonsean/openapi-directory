# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: str=None, status: str=None, wa_id: str=None):
        """CheckContact - a model defined in OpenAPI

        :param input: The input of this CheckContact.
        :param status: The status of this CheckContact.
        :param wa_id: The wa_id of this CheckContact.
        """
        self.openapi_types = {
            'input': str,
            'status': str,
            'wa_id': str
        }

        self.attribute_map = {
            'input': 'input',
            'status': 'status',
            'wa_id': 'wa_id'
        }

        self._input = input
        self._status = status
        self._wa_id = wa_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check-Contact of this CheckContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this CheckContact.

        The value you sent in the contacts field of the JSON request.

        :return: The input of this CheckContact.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this CheckContact.

        The value you sent in the contacts field of the JSON request.

        :param input: The input of this CheckContact.
        :type input: str
        """

        self._input = input

    @property
    def status(self):
        """Gets the status of this CheckContact.

        Status of the user.

        :return: The status of this CheckContact.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckContact.

        Status of the user.

        :param status: The status of this CheckContact.
        :type status: str
        """
        allowed_values = ["processing", "valid", "invalid"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def wa_id(self):
        """Gets the wa_id of this CheckContact.

        WhatsApp user identifier that can be used in other API calls. Only returned if the status is valid.

        :return: The wa_id of this CheckContact.
        :rtype: str
        """
        return self._wa_id

    @wa_id.setter
    def wa_id(self, wa_id):
        """Sets the wa_id of this CheckContact.

        WhatsApp user identifier that can be used in other API calls. Only returned if the status is valid.

        :param wa_id: The wa_id of this CheckContact.
        :type wa_id: str
        """

        self._wa_id = wa_id
