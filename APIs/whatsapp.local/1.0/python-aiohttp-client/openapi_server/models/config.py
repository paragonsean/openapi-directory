# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic import Basic
from openapi_server.models.config_basic import ConfigBasic
from openapi_server.models.config_bearer import ConfigBearer
from openapi_server import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bearer: str=None, basic: Basic=None):
        """Config - a model defined in OpenAPI

        :param bearer: The bearer of this Config.
        :param basic: The basic of this Config.
        """
        self.openapi_types = {
            'bearer': str,
            'basic': Basic
        }

        self.attribute_map = {
            'bearer': 'bearer',
            'basic': 'basic'
        }

        self._bearer = bearer
        self._basic = basic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Config of this Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bearer(self):
        """Gets the bearer of this Config.


        :return: The bearer of this Config.
        :rtype: str
        """
        return self._bearer

    @bearer.setter
    def bearer(self, bearer):
        """Sets the bearer of this Config.


        :param bearer: The bearer of this Config.
        :type bearer: str
        """
        if bearer is None:
            raise ValueError("Invalid value for `bearer`, must not be `None`")

        self._bearer = bearer

    @property
    def basic(self):
        """Gets the basic of this Config.


        :return: The basic of this Config.
        :rtype: Basic
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this Config.


        :param basic: The basic of this Config.
        :type basic: Basic
        """

        self._basic = basic
