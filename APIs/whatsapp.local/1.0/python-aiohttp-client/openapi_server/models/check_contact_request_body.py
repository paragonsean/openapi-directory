# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckContactRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocking: str='no_wait', contacts: List[str]=None):
        """CheckContactRequestBody - a model defined in OpenAPI

        :param blocking: The blocking of this CheckContactRequestBody.
        :param contacts: The contacts of this CheckContactRequestBody.
        """
        self.openapi_types = {
            'blocking': str,
            'contacts': List[str]
        }

        self.attribute_map = {
            'blocking': 'blocking',
            'contacts': 'contacts'
        }

        self._blocking = blocking
        self._contacts = contacts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckContactRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check-Contact-Request-Body of this CheckContactRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocking(self):
        """Gets the blocking of this CheckContactRequestBody.

        Blocking determines whether the request should wait for the processing to complete (synchronous) or not (asynchronous).

        :return: The blocking of this CheckContactRequestBody.
        :rtype: str
        """
        return self._blocking

    @blocking.setter
    def blocking(self, blocking):
        """Sets the blocking of this CheckContactRequestBody.

        Blocking determines whether the request should wait for the processing to complete (synchronous) or not (asynchronous).

        :param blocking: The blocking of this CheckContactRequestBody.
        :type blocking: str
        """
        allowed_values = ["no_wait", "wait"]  # noqa: E501
        if blocking not in allowed_values:
            raise ValueError(
                "Invalid value for `blocking` ({0}), must be one of {1}"
                .format(blocking, allowed_values)
            )

        self._blocking = blocking

    @property
    def contacts(self):
        """Gets the contacts of this CheckContactRequestBody.

        Array of contact phone numbers. The numbers can be in any standard telephone number format.

        :return: The contacts of this CheckContactRequestBody.
        :rtype: List[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this CheckContactRequestBody.

        Array of contact phone numbers. The numbers can be in any standard telephone number format.

        :param contacts: The contacts of this CheckContactRequestBody.
        :type contacts: List[str]
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")

        self._contacts = contacts
