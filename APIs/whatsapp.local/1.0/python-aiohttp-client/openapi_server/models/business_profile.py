# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BusinessProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, description: str=None, email: str=None, vertical: str=None, websites: List[str]=None):
        """BusinessProfile - a model defined in OpenAPI

        :param address: The address of this BusinessProfile.
        :param description: The description of this BusinessProfile.
        :param email: The email of this BusinessProfile.
        :param vertical: The vertical of this BusinessProfile.
        :param websites: The websites of this BusinessProfile.
        """
        self.openapi_types = {
            'address': str,
            'description': str,
            'email': str,
            'vertical': str,
            'websites': List[str]
        }

        self.attribute_map = {
            'address': 'address',
            'description': 'description',
            'email': 'email',
            'vertical': 'vertical',
            'websites': 'websites'
        }

        self._address = address
        self._description = description
        self._email = email
        self._vertical = vertical
        self._websites = websites

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Business-Profile of this BusinessProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this BusinessProfile.

        Address of the business Maximum of 256 characters

        :return: The address of this BusinessProfile.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BusinessProfile.

        Address of the business Maximum of 256 characters

        :param address: The address of this BusinessProfile.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def description(self):
        """Gets the description of this BusinessProfile.

        Description of the business Maximum of 256 characters

        :return: The description of this BusinessProfile.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BusinessProfile.

        Description of the business Maximum of 256 characters

        :param description: The description of this BusinessProfile.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this BusinessProfile.

        Email address to contact the business Maximum of 128 characters

        :return: The email of this BusinessProfile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BusinessProfile.

        Email address to contact the business Maximum of 128 characters

        :param email: The email of this BusinessProfile.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def vertical(self):
        """Gets the vertical of this BusinessProfile.

        Industry of the business Maximum of 128 characters

        :return: The vertical of this BusinessProfile.
        :rtype: str
        """
        return self._vertical

    @vertical.setter
    def vertical(self, vertical):
        """Sets the vertical of this BusinessProfile.

        Industry of the business Maximum of 128 characters

        :param vertical: The vertical of this BusinessProfile.
        :type vertical: str
        """
        if vertical is None:
            raise ValueError("Invalid value for `vertical`, must not be `None`")

        self._vertical = vertical

    @property
    def websites(self):
        """Gets the websites of this BusinessProfile.

        URLs associated with business (e.g., website, Facebook page, Instagram) Maximum of 2 websites with a maximum of 256 characters each

        :return: The websites of this BusinessProfile.
        :rtype: List[str]
        """
        return self._websites

    @websites.setter
    def websites(self, websites):
        """Sets the websites of this BusinessProfile.

        URLs associated with business (e.g., website, Facebook page, Instagram) Maximum of 2 websites with a maximum of 256 characters each

        :param websites: The websites of this BusinessProfile.
        :type websites: List[str]
        """
        if websites is None:
            raise ValueError("Invalid value for `websites`, must not be `None`")

        self._websites = websites
