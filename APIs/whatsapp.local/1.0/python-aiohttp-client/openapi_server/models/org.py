# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Org(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company: str=None, department: str=None, title: str=None):
        """Org - a model defined in OpenAPI

        :param company: The company of this Org.
        :param department: The department of this Org.
        :param title: The title of this Org.
        """
        self.openapi_types = {
            'company': str,
            'department': str,
            'title': str
        }

        self.attribute_map = {
            'company': 'company',
            'department': 'department',
            'title': 'title'
        }

        self._company = company
        self._department = department
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Org':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Org of this Org.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company(self):
        """Gets the company of this Org.

        Name of the contact's company

        :return: The company of this Org.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Org.

        Name of the contact's company

        :param company: The company of this Org.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def department(self):
        """Gets the department of this Org.

        Name of the contact's department

        :return: The department of this Org.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Org.

        Name of the contact's department

        :param department: The department of this Org.
        :type department: str
        """

        self._department = department

    @property
    def title(self):
        """Gets the title of this Org.

        Contact's business title

        :return: The title of this Org.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Org.

        Contact's business title

        :param title: The title of this Org.
        :type title: str
        """

        self._title = title
