# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio import Audio
from openapi_server.models.contact import Contact
from openapi_server.models.document import Document
from openapi_server.models.hsm import Hsm
from openapi_server.models.image import Image
from openapi_server.models.location import Location
from openapi_server.models.message_type import MessageType
from openapi_server.models.text import Text
from openapi_server.models.video import Video
from openapi_server import util


class SendMessageRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: Audio=None, contacts: List[Contact]=None, document: Document=None, hsm: Hsm=None, image: Image=None, location: Location=None, preview_url: bool=None, recipient_type: str='individual', text: Text=None, to: str=None, ttl: object=None, type: MessageType=MessageType.TEXT, video: Video=None):
        """SendMessageRequestBody - a model defined in OpenAPI

        :param audio: The audio of this SendMessageRequestBody.
        :param contacts: The contacts of this SendMessageRequestBody.
        :param document: The document of this SendMessageRequestBody.
        :param hsm: The hsm of this SendMessageRequestBody.
        :param image: The image of this SendMessageRequestBody.
        :param location: The location of this SendMessageRequestBody.
        :param preview_url: The preview_url of this SendMessageRequestBody.
        :param recipient_type: The recipient_type of this SendMessageRequestBody.
        :param text: The text of this SendMessageRequestBody.
        :param to: The to of this SendMessageRequestBody.
        :param ttl: The ttl of this SendMessageRequestBody.
        :param type: The type of this SendMessageRequestBody.
        :param video: The video of this SendMessageRequestBody.
        """
        self.openapi_types = {
            'audio': Audio,
            'contacts': List[Contact],
            'document': Document,
            'hsm': Hsm,
            'image': Image,
            'location': Location,
            'preview_url': bool,
            'recipient_type': str,
            'text': Text,
            'to': str,
            'ttl': object,
            'type': MessageType,
            'video': Video
        }

        self.attribute_map = {
            'audio': 'audio',
            'contacts': 'contacts',
            'document': 'document',
            'hsm': 'hsm',
            'image': 'image',
            'location': 'location',
            'preview_url': 'preview_url',
            'recipient_type': 'recipient_type',
            'text': 'text',
            'to': 'to',
            'ttl': 'ttl',
            'type': 'type',
            'video': 'video'
        }

        self._audio = audio
        self._contacts = contacts
        self._document = document
        self._hsm = hsm
        self._image = image
        self._location = location
        self._preview_url = preview_url
        self._recipient_type = recipient_type
        self._text = text
        self._to = to
        self._ttl = ttl
        self._type = type
        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessageRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Send-Message-Request-Body of this SendMessageRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this SendMessageRequestBody.


        :return: The audio of this SendMessageRequestBody.
        :rtype: Audio
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this SendMessageRequestBody.


        :param audio: The audio of this SendMessageRequestBody.
        :type audio: Audio
        """

        self._audio = audio

    @property
    def contacts(self):
        """Gets the contacts of this SendMessageRequestBody.

        

        :return: The contacts of this SendMessageRequestBody.
        :rtype: List[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this SendMessageRequestBody.

        

        :param contacts: The contacts of this SendMessageRequestBody.
        :type contacts: List[Contact]
        """

        self._contacts = contacts

    @property
    def document(self):
        """Gets the document of this SendMessageRequestBody.


        :return: The document of this SendMessageRequestBody.
        :rtype: Document
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this SendMessageRequestBody.


        :param document: The document of this SendMessageRequestBody.
        :type document: Document
        """

        self._document = document

    @property
    def hsm(self):
        """Gets the hsm of this SendMessageRequestBody.


        :return: The hsm of this SendMessageRequestBody.
        :rtype: Hsm
        """
        return self._hsm

    @hsm.setter
    def hsm(self, hsm):
        """Sets the hsm of this SendMessageRequestBody.


        :param hsm: The hsm of this SendMessageRequestBody.
        :type hsm: Hsm
        """

        self._hsm = hsm

    @property
    def image(self):
        """Gets the image of this SendMessageRequestBody.


        :return: The image of this SendMessageRequestBody.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SendMessageRequestBody.


        :param image: The image of this SendMessageRequestBody.
        :type image: Image
        """

        self._image = image

    @property
    def location(self):
        """Gets the location of this SendMessageRequestBody.


        :return: The location of this SendMessageRequestBody.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SendMessageRequestBody.


        :param location: The location of this SendMessageRequestBody.
        :type location: Location
        """

        self._location = location

    @property
    def preview_url(self):
        """Gets the preview_url of this SendMessageRequestBody.

        Specifying preview_url in the request is optional when not including a URL in your message. To include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://. For more information, see the Sending URLs in Text Messages section.

        :return: The preview_url of this SendMessageRequestBody.
        :rtype: bool
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this SendMessageRequestBody.

        Specifying preview_url in the request is optional when not including a URL in your message. To include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://. For more information, see the Sending URLs in Text Messages section.

        :param preview_url: The preview_url of this SendMessageRequestBody.
        :type preview_url: bool
        """

        self._preview_url = preview_url

    @property
    def recipient_type(self):
        """Gets the recipient_type of this SendMessageRequestBody.

        Determines whether the recipient is an individual or a group Specifying recipient_type in the request is optional when the value is individual. However, recipient_type is required when using group. If sending a text message to a group, see the Sending Group Messages documentation.

        :return: The recipient_type of this SendMessageRequestBody.
        :rtype: str
        """
        return self._recipient_type

    @recipient_type.setter
    def recipient_type(self, recipient_type):
        """Sets the recipient_type of this SendMessageRequestBody.

        Determines whether the recipient is an individual or a group Specifying recipient_type in the request is optional when the value is individual. However, recipient_type is required when using group. If sending a text message to a group, see the Sending Group Messages documentation.

        :param recipient_type: The recipient_type of this SendMessageRequestBody.
        :type recipient_type: str
        """
        allowed_values = ["individual", "group"]  # noqa: E501
        if recipient_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recipient_type` ({0}), must be one of {1}"
                .format(recipient_type, allowed_values)
            )

        self._recipient_type = recipient_type

    @property
    def text(self):
        """Gets the text of this SendMessageRequestBody.


        :return: The text of this SendMessageRequestBody.
        :rtype: Text
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SendMessageRequestBody.


        :param text: The text of this SendMessageRequestBody.
        :type text: Text
        """

        self._text = text

    @property
    def to(self):
        """Gets the to of this SendMessageRequestBody.

        When recipient_type is individual, this field is the WhatsApp ID (phone number) returned from contacts endpoint. When recipient_type is group, this field is the WhatsApp group ID.

        :return: The to of this SendMessageRequestBody.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendMessageRequestBody.

        When recipient_type is individual, this field is the WhatsApp ID (phone number) returned from contacts endpoint. When recipient_type is group, this field is the WhatsApp group ID.

        :param to: The to of this SendMessageRequestBody.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def ttl(self):
        """Gets the ttl of this SendMessageRequestBody.


        :return: The ttl of this SendMessageRequestBody.
        :rtype: object
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this SendMessageRequestBody.


        :param ttl: The ttl of this SendMessageRequestBody.
        :type ttl: object
        """

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this SendMessageRequestBody.


        :return: The type of this SendMessageRequestBody.
        :rtype: MessageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendMessageRequestBody.


        :param type: The type of this SendMessageRequestBody.
        :type type: MessageType
        """

        self._type = type

    @property
    def video(self):
        """Gets the video of this SendMessageRequestBody.


        :return: The video of this SendMessageRequestBody.
        :rtype: Video
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this SendMessageRequestBody.


        :param video: The video of this SendMessageRequestBody.
        :type video: Video
        """

        self._video = video
