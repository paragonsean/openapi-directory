# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, country_code: str=None, state: str=None, street: str=None, type: str=None, zip: str=None):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param country: The country of this Address.
        :param country_code: The country_code of this Address.
        :param state: The state of this Address.
        :param street: The street of this Address.
        :param type: The type of this Address.
        :param zip: The zip of this Address.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'country_code': str,
            'state': str,
            'street': str,
            'type': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'country_code': 'country_code',
            'state': 'state',
            'street': 'street',
            'type': 'type',
            'zip': 'zip'
        }

        self._city = city
        self._country = country
        self._country_code = country_code
        self._state = state
        self._street = street
        self._type = type
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.

        City name

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        City name

        :param city: The city of this Address.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.

        Full country name

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        Full country name

        :param country: The country of this Address.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this Address.

        Two-letter country abbreviation

        :return: The country_code of this Address.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        Two-letter country abbreviation

        :param country_code: The country_code of this Address.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def state(self):
        """Gets the state of this Address.

        State abbreviation

        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        State abbreviation

        :param state: The state of this Address.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def street(self):
        """Gets the street of this Address.

        Street number and name

        :return: The street of this Address.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        Street number and name

        :param street: The street of this Address.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")

        self._street = street

    @property
    def type(self):
        """Gets the type of this Address.

        Standard Values: HOME, WORK

        :return: The type of this Address.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Address.

        Standard Values: HOME, WORK

        :param type: The type of this Address.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def zip(self):
        """Gets the zip of this Address.

        ZIP code

        :return: The zip of this Address.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Address.

        ZIP code

        :param zip: The zip of this Address.
        :type zip: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")

        self._zip = zip
