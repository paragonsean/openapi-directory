# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Language(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, policy: str=None):
        """Language - a model defined in OpenAPI

        :param code: The code of this Language.
        :param policy: The policy of this Language.
        """
        self.openapi_types = {
            'code': str,
            'policy': str
        }

        self.attribute_map = {
            'code': 'code',
            'policy': 'policy'
        }

        self._code = code
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Language':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Language of this Language.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Language.

        The code of the language or locale to use — Accepts both language and language_locale formats (e.g., en and en_US).

        :return: The code of this Language.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Language.

        The code of the language or locale to use — Accepts both language and language_locale formats (e.g., en and en_US).

        :param code: The code of this Language.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def policy(self):
        """Gets the policy of this Language.

        The language policy the message should follow

        :return: The policy of this Language.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Language.

        The language policy the message should follow

        :param policy: The policy of this Language.
        :type policy: str
        """
        allowed_values = ["fallback", "deterministic"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"
                .format(policy, allowed_values)
            )

        self._policy = policy
