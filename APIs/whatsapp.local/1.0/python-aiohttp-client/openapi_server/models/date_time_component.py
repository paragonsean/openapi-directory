# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DateTimeComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_month: int=None, day_of_week: int=None, hour: int=None, minute: int=None, month: int=None, year: int=None):
        """DateTimeComponent - a model defined in OpenAPI

        :param day_of_month: The day_of_month of this DateTimeComponent.
        :param day_of_week: The day_of_week of this DateTimeComponent.
        :param hour: The hour of this DateTimeComponent.
        :param minute: The minute of this DateTimeComponent.
        :param month: The month of this DateTimeComponent.
        :param year: The year of this DateTimeComponent.
        """
        self.openapi_types = {
            'day_of_month': int,
            'day_of_week': int,
            'hour': int,
            'minute': int,
            'month': int,
            'year': int
        }

        self.attribute_map = {
            'day_of_month': 'day_of_month',
            'day_of_week': 'day_of_week',
            'hour': 'hour',
            'minute': 'minute',
            'month': 'month',
            'year': 'year'
        }

        self._day_of_month = day_of_month
        self._day_of_week = day_of_week
        self._hour = hour
        self._minute = minute
        self._month = month
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTimeComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Date-Time-Component of this DateTimeComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_month(self):
        """Gets the day_of_month of this DateTimeComponent.

        The day of month

        :return: The day_of_month of this DateTimeComponent.
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this DateTimeComponent.

        The day of month

        :param day_of_month: The day_of_month of this DateTimeComponent.
        :type day_of_month: int
        """

        self._day_of_month = day_of_month

    @property
    def day_of_week(self):
        """Gets the day_of_week of this DateTimeComponent.

        Both strings and numbers are accepted. If different from the value derived from the date (if specified), use the derived value.

        :return: The day_of_week of this DateTimeComponent.
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this DateTimeComponent.

        Both strings and numbers are accepted. If different from the value derived from the date (if specified), use the derived value.

        :param day_of_week: The day_of_week of this DateTimeComponent.
        :type day_of_week: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def hour(self):
        """Gets the hour of this DateTimeComponent.

        The hour

        :return: The hour of this DateTimeComponent.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this DateTimeComponent.

        The hour

        :param hour: The hour of this DateTimeComponent.
        :type hour: int
        """

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this DateTimeComponent.

        The minute

        :return: The minute of this DateTimeComponent.
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this DateTimeComponent.

        The minute

        :param minute: The minute of this DateTimeComponent.
        :type minute: int
        """

        self._minute = minute

    @property
    def month(self):
        """Gets the month of this DateTimeComponent.

        The month

        :return: The month of this DateTimeComponent.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this DateTimeComponent.

        The month

        :param month: The month of this DateTimeComponent.
        :type month: int
        """

        self._month = month

    @property
    def year(self):
        """Gets the year of this DateTimeComponent.

        The year

        :return: The year of this DateTimeComponent.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this DateTimeComponent.

        The year

        :param year: The year of this DateTimeComponent.
        :type year: int
        """

        self._year = year
