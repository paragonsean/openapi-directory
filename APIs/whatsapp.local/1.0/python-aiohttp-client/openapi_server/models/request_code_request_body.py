# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestCodeRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cc: str=None, cert: str=None, method: str=None, phone_number: str=None, pin: str=None):
        """RequestCodeRequestBody - a model defined in OpenAPI

        :param cc: The cc of this RequestCodeRequestBody.
        :param cert: The cert of this RequestCodeRequestBody.
        :param method: The method of this RequestCodeRequestBody.
        :param phone_number: The phone_number of this RequestCodeRequestBody.
        :param pin: The pin of this RequestCodeRequestBody.
        """
        self.openapi_types = {
            'cc': str,
            'cert': str,
            'method': str,
            'phone_number': str,
            'pin': str
        }

        self.attribute_map = {
            'cc': 'cc',
            'cert': 'cert',
            'method': 'method',
            'phone_number': 'phone_number',
            'pin': 'pin'
        }

        self._cc = cc
        self._cert = cert
        self._method = method
        self._phone_number = phone_number
        self._pin = pin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestCodeRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request-Code-Request-Body of this RequestCodeRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cc(self):
        """Gets the cc of this RequestCodeRequestBody.

        Numerical country code for the phone number you are registering

        :return: The cc of this RequestCodeRequestBody.
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this RequestCodeRequestBody.

        Numerical country code for the phone number you are registering

        :param cc: The cc of this RequestCodeRequestBody.
        :type cc: str
        """
        if cc is None:
            raise ValueError("Invalid value for `cc`, must not be `None`")

        self._cc = cc

    @property
    def cert(self):
        """Gets the cert of this RequestCodeRequestBody.

        Base64-encoded Verified Name certificate

        :return: The cert of this RequestCodeRequestBody.
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this RequestCodeRequestBody.

        Base64-encoded Verified Name certificate

        :param cert: The cert of this RequestCodeRequestBody.
        :type cert: str
        """
        if cert is None:
            raise ValueError("Invalid value for `cert`, must not be `None`")

        self._cert = cert

    @property
    def method(self):
        """Gets the method of this RequestCodeRequestBody.

        Method of receiving your registration code

        :return: The method of this RequestCodeRequestBody.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this RequestCodeRequestBody.

        Method of receiving your registration code

        :param method: The method of this RequestCodeRequestBody.
        :type method: str
        """
        allowed_values = ["sms", "voice"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def phone_number(self):
        """Gets the phone_number of this RequestCodeRequestBody.

        Phone number you are registering, without the country code or plus symbol (+)

        :return: The phone_number of this RequestCodeRequestBody.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this RequestCodeRequestBody.

        Phone number you are registering, without the country code or plus symbol (+)

        :param phone_number: The phone_number of this RequestCodeRequestBody.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def pin(self):
        """Gets the pin of this RequestCodeRequestBody.

        Existing 6-digit PIN — This is only required when two-factor verification is enabled on this account.

        :return: The pin of this RequestCodeRequestBody.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this RequestCodeRequestBody.

        Existing 6-digit PIN — This is only required when two-factor verification is enabled on this account.

        :param pin: The pin of this RequestCodeRequestBody.
        :type pin: str
        """

        self._pin = pin
