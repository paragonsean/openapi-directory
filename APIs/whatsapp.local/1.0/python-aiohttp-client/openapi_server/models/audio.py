# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_by_id import AudioById
from openapi_server.models.audio_by_provider import AudioByProvider
from openapi_server.models.provider import Provider
from openapi_server import util


class Audio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, link: str=None, provider: Provider=None):
        """Audio - a model defined in OpenAPI

        :param id: The id of this Audio.
        :param link: The link of this Audio.
        :param provider: The provider of this Audio.
        """
        self.openapi_types = {
            'id': str,
            'link': str,
            'provider': Provider
        }

        self.attribute_map = {
            'id': 'id',
            'link': 'link',
            'provider': 'provider'
        }

        self._id = id
        self._link = link
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Audio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Audio of this Audio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Audio.


        :return: The id of this Audio.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Audio.


        :param id: The id of this Audio.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def link(self):
        """Gets the link of this Audio.


        :return: The link of this Audio.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Audio.


        :param link: The link of this Audio.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def provider(self):
        """Gets the provider of this Audio.


        :return: The provider of this Audio.
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Audio.


        :param provider: The provider of this Audio.
        :type provider: Provider
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider
