# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admins: List[str]=None, creation_time: int=None, creator: str=None, participants: List[str]=None, subject: str=None):
        """GroupInfo - a model defined in OpenAPI

        :param admins: The admins of this GroupInfo.
        :param creation_time: The creation_time of this GroupInfo.
        :param creator: The creator of this GroupInfo.
        :param participants: The participants of this GroupInfo.
        :param subject: The subject of this GroupInfo.
        """
        self.openapi_types = {
            'admins': List[str],
            'creation_time': int,
            'creator': str,
            'participants': List[str],
            'subject': str
        }

        self.attribute_map = {
            'admins': 'admins',
            'creation_time': 'creation_time',
            'creator': 'creator',
            'participants': 'participants',
            'subject': 'subject'
        }

        self._admins = admins
        self._creation_time = creation_time
        self._creator = creator
        self._participants = participants
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group-Info of this GroupInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admins(self):
        """Gets the admins of this GroupInfo.

        Group administrators Lists IDs of the creator of the group and any administrators added

        :return: The admins of this GroupInfo.
        :rtype: List[str]
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this GroupInfo.

        Group administrators Lists IDs of the creator of the group and any administrators added

        :param admins: The admins of this GroupInfo.
        :type admins: List[str]
        """

        self._admins = admins

    @property
    def creation_time(self):
        """Gets the creation_time of this GroupInfo.

        Group creation time

        :return: The creation_time of this GroupInfo.
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GroupInfo.

        Group creation time

        :param creation_time: The creation_time of this GroupInfo.
        :type creation_time: int
        """

        self._creation_time = creation_time

    @property
    def creator(self):
        """Gets the creator of this GroupInfo.

        ID of the creator of this group

        :return: The creator of this GroupInfo.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this GroupInfo.

        ID of the creator of this group

        :param creator: The creator of this GroupInfo.
        :type creator: str
        """

        self._creator = creator

    @property
    def participants(self):
        """Gets the participants of this GroupInfo.

        Participants of the group This is an array of all the IDs of the participants in the group. Initially, this will be the creator of the group.

        :return: The participants of this GroupInfo.
        :rtype: List[str]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this GroupInfo.

        Participants of the group This is an array of all the IDs of the participants in the group. Initially, this will be the creator of the group.

        :param participants: The participants of this GroupInfo.
        :type participants: List[str]
        """

        self._participants = participants

    @property
    def subject(self):
        """Gets the subject of this GroupInfo.

        Subject of the group

        :return: The subject of this GroupInfo.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GroupInfo.

        Subject of the group

        :param subject: The subject of this GroupInfo.
        :type subject: str
        """

        self._subject = subject
