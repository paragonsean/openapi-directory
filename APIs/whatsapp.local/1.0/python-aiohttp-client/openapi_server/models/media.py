# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Media(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_download: List[str]=None):
        """Media - a model defined in OpenAPI

        :param auto_download: The auto_download of this Media.
        """
        self.openapi_types = {
            'auto_download': List[str]
        }

        self.attribute_map = {
            'auto_download': 'auto_download'
        }

        self._auto_download = auto_download

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Media':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Media of this Media.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_download(self):
        """Gets the auto_download of this Media.

        An array specifying which types of media to automatically download.

        :return: The auto_download of this Media.
        :rtype: List[str]
        """
        return self._auto_download

    @auto_download.setter
    def auto_download(self, auto_download):
        """Sets the auto_download of this Media.

        An array specifying which types of media to automatically download.

        :param auto_download: The auto_download of this Media.
        :type auto_download: List[str]
        """
        allowed_values = ["audio", "document", "voice", "video", "image."]  # noqa: E501
        if not set(auto_download).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `auto_download` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(auto_download) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._auto_download = auto_download
