# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.email import Email
from openapi_server.models.name import Name
from openapi_server.models.org import Org
from openapi_server.models.phone import Phone
from openapi_server.models.url import Url
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[Address]=None, birthday: str=None, emails: List[Email]=None, ims: List[str]=None, name: Name=None, org: Org=None, phones: List[Phone]=None, urls: List[Url]=None):
        """Contact - a model defined in OpenAPI

        :param addresses: The addresses of this Contact.
        :param birthday: The birthday of this Contact.
        :param emails: The emails of this Contact.
        :param ims: The ims of this Contact.
        :param name: The name of this Contact.
        :param org: The org of this Contact.
        :param phones: The phones of this Contact.
        :param urls: The urls of this Contact.
        """
        self.openapi_types = {
            'addresses': List[Address],
            'birthday': str,
            'emails': List[Email],
            'ims': List[str],
            'name': Name,
            'org': Org,
            'phones': List[Phone],
            'urls': List[Url]
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'birthday': 'birthday',
            'emails': 'emails',
            'ims': 'ims',
            'name': 'name',
            'org': 'org',
            'phones': 'phones',
            'urls': 'urls'
        }

        self._addresses = addresses
        self._birthday = birthday
        self._emails = emails
        self._ims = ims
        self._name = name
        self._org = org
        self._phones = phones
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Contact.

        Full contact address(es)

        :return: The addresses of this Contact.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Contact.

        Full contact address(es)

        :param addresses: The addresses of this Contact.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def birthday(self):
        """Gets the birthday of this Contact.

        YYYY-MM-DD formatted string

        :return: The birthday of this Contact.
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Contact.

        YYYY-MM-DD formatted string

        :param birthday: The birthday of this Contact.
        :type birthday: str
        """

        self._birthday = birthday

    @property
    def emails(self):
        """Gets the emails of this Contact.

        Contact email address(es)

        :return: The emails of this Contact.
        :rtype: List[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Contact.

        Contact email address(es)

        :param emails: The emails of this Contact.
        :type emails: List[Email]
        """

        self._emails = emails

    @property
    def ims(self):
        """Gets the ims of this Contact.

        

        :return: The ims of this Contact.
        :rtype: List[str]
        """
        return self._ims

    @ims.setter
    def ims(self, ims):
        """Sets the ims of this Contact.

        

        :param ims: The ims of this Contact.
        :type ims: List[str]
        """

        self._ims = ims

    @property
    def name(self):
        """Gets the name of this Contact.


        :return: The name of this Contact.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contact.


        :param name: The name of this Contact.
        :type name: Name
        """

        self._name = name

    @property
    def org(self):
        """Gets the org of this Contact.


        :return: The org of this Contact.
        :rtype: Org
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Contact.


        :param org: The org of this Contact.
        :type org: Org
        """

        self._org = org

    @property
    def phones(self):
        """Gets the phones of this Contact.

        Contact phone number(s)

        :return: The phones of this Contact.
        :rtype: List[Phone]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Contact.

        Contact phone number(s)

        :param phones: The phones of this Contact.
        :type phones: List[Phone]
        """

        self._phones = phones

    @property
    def urls(self):
        """Gets the urls of this Contact.

        Contact URL(s)

        :return: The urls of this Contact.
        :rtype: List[Url]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Contact.

        Contact URL(s)

        :param urls: The urls of this Contact.
        :type urls: List[Url]
        """

        self._urls = urls
