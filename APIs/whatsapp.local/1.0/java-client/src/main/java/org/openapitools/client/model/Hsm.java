/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.LocalizableParam;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The containing element for the message content â€” Indicates that the message is highly structured. Parameters contained within provide the structure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:33.067920-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Hsm {
  public static final String SERIALIZED_NAME_ELEMENT_NAME = "element_name";
  @SerializedName(SERIALIZED_NAME_ELEMENT_NAME)
  private String elementName;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private Language language;

  public static final String SERIALIZED_NAME_LOCALIZABLE_PARAMS = "localizable_params";
  @SerializedName(SERIALIZED_NAME_LOCALIZABLE_PARAMS)
  private List<LocalizableParam> localizableParams = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public Hsm() {
  }

  public Hsm elementName(String elementName) {
    this.elementName = elementName;
    return this;
  }

  /**
   * The element name that indicates which template to use within the namespace
   * @return elementName
   */
  @javax.annotation.Nonnull
  public String getElementName() {
    return elementName;
  }

  public void setElementName(String elementName) {
    this.elementName = elementName;
  }


  public Hsm language(Language language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nonnull
  public Language getLanguage() {
    return language;
  }

  public void setLanguage(Language language) {
    this.language = language;
  }


  public Hsm localizableParams(List<LocalizableParam> localizableParams) {
    this.localizableParams = localizableParams;
    return this;
  }

  public Hsm addLocalizableParamsItem(LocalizableParam localizableParamsItem) {
    if (this.localizableParams == null) {
      this.localizableParams = new ArrayList<>();
    }
    this.localizableParams.add(localizableParamsItem);
    return this;
  }

  /**
   * This field is an array of values to apply to variables in the template
   * @return localizableParams
   */
  @javax.annotation.Nonnull
  public List<LocalizableParam> getLocalizableParams() {
    return localizableParams;
  }

  public void setLocalizableParams(List<LocalizableParam> localizableParams) {
    this.localizableParams = localizableParams;
  }


  public Hsm namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * The namespace that will be used
   * @return namespace
   */
  @javax.annotation.Nonnull
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hsm hsm = (Hsm) o;
    return Objects.equals(this.elementName, hsm.elementName) &&
        Objects.equals(this.language, hsm.language) &&
        Objects.equals(this.localizableParams, hsm.localizableParams) &&
        Objects.equals(this.namespace, hsm.namespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(elementName, language, localizableParams, namespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hsm {\n");
    sb.append("    elementName: ").append(toIndentedString(elementName)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    localizableParams: ").append(toIndentedString(localizableParams)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("element_name");
    openapiFields.add("language");
    openapiFields.add("localizable_params");
    openapiFields.add("namespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("element_name");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("localizable_params");
    openapiRequiredFields.add("namespace");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Hsm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hsm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hsm is not found in the empty JSON string", Hsm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hsm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hsm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Hsm.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("element_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `element_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("element_name").toString()));
      }
      // validate the required field `language`
      Language.validateJsonElement(jsonObj.get("language"));
      // ensure the json data is an array
      if (!jsonObj.get("localizable_params").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizable_params` to be an array in the JSON string but got `%s`", jsonObj.get("localizable_params").toString()));
      }

      JsonArray jsonArraylocalizableParams = jsonObj.getAsJsonArray("localizable_params");
      // validate the required field `localizable_params` (array)
      for (int i = 0; i < jsonArraylocalizableParams.size(); i++) {
        LocalizableParam.validateJsonElement(jsonArraylocalizableParams.get(i));
      };
      if (!jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hsm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hsm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hsm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hsm.class));

       return (TypeAdapter<T>) new TypeAdapter<Hsm>() {
           @Override
           public void write(JsonWriter out, Hsm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hsm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Hsm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Hsm
   * @throws IOException if the JSON string is invalid with respect to Hsm
   */
  public static Hsm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hsm.class);
  }

  /**
   * Convert an instance of Hsm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

