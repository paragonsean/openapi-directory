/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:33.067920-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookSystem {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  /**
   * 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    /**
     * Group created
     */
    GROUP_CREATED("group_created"),
    
    /**
     * Group user promoted to admin
     */
    GROUP_USER_PROMOTED("group_user_promoted"),
    
    /**
     * Group user removed as admin
     */
    GROUP_USER_DEMOTED("group_user_demoted"),
    
    /**
     * User joined the group
     */
    GROUP_USER_JOINED("group_user_joined"),
    
    /**
     * User left the group
     */
    GROUP_USER_LEFT("group_user_left"),
    
    /**
     * Group subject changed
     */
    GROUP_SUBJECT_CHANGED("group_subject_changed"),
    
    /**
     * Group description changed
     */
    GROUP_DESCRIPTION_CHANGED("group_description_changed"),
    
    /**
     * Group icon changed
     */
    GROUP_ICON_CHANGED("group_icon_changed"),
    
    /**
     * Group icon deleted
     */
    GROUP_ICON_DELETED("group_icon_deleted"),
    
    /**
     * Group&#39;s invite link disabled
     */
    GROUP_INVITE_LINK_REVOKED("group_invite_link_revoked"),
    
    /**
     * User&#39;s end-to-end keys changed
     */
    USER_IDENTITY_CHANGED("user_identity_changed"),
    
    /**
     * User&#39;s phone number changed
     */
    GROUP_USER_CHANGED_NUMBER("group_user_changed_number"),
    
    /**
     * Error retrieving the group photo
     */
    GROUP_ERROR_FETCHING_PHOTO("group_error_fetching_photo"),
    
    /**
     * Error adding users to the group
     */
    GROUP_ERROR_ADDING_USERS("group_error_adding_users"),
    
    /**
     * Error adding a user to the group
     */
    GROUP_ERROR_ADDING_USER("group_error_adding_user"),
    
    /**
     * Group is at capacity and no more users can be added
     */
    GROUP_ERROR_FULL_ADDING_USERS("group_error_full_adding_users"),
    
    /**
     * Error removing user from group
     */
    GROUP_ERROR_REMOVING_USER("group_error_removing_user"),
    
    /**
     * Broadcast list created
     */
    BROADCAST_LIST_CREATED("broadcast_list_created"),
    
    /**
     * Group ended
     */
    GROUP_ENDED("group_ended"),
    
    /**
     * Error attempting to add a user that blocked the adder
     */
    GROUP_ERROR_BLOCKED_ADDING_USER("group_error_blocked_adding_user");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public WebhookSystem() {
  }

  public WebhookSystem body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public WebhookSystem type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookSystem webhookSystem = (WebhookSystem) o;
    return Objects.equals(this.body, webhookSystem.body) &&
        Objects.equals(this.type, webhookSystem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookSystem {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookSystem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookSystem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookSystem is not found in the empty JSON string", WebhookSystem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookSystem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookSystem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookSystem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookSystem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookSystem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookSystem.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookSystem>() {
           @Override
           public void write(JsonWriter out, WebhookSystem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookSystem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookSystem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookSystem
   * @throws IOException if the JSON string is invalid with respect to WebhookSystem
   */
  public static WebhookSystem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookSystem.class);
  }

  /**
   * Convert an instance of WebhookSystem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

