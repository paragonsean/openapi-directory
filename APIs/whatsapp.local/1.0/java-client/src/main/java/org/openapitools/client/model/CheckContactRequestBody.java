/*
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckContactRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:33.067920-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckContactRequestBody {
  /**
   * Blocking determines whether the request should wait for the processing to complete (synchronous) or not (asynchronous).
   */
  @JsonAdapter(BlockingEnum.Adapter.class)
  public enum BlockingEnum {
    NO_WAIT("no_wait"),
    
    WAIT("wait");

    private String value;

    BlockingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlockingEnum fromValue(String value) {
      for (BlockingEnum b : BlockingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlockingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlockingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlockingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlockingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BlockingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BLOCKING = "blocking";
  @SerializedName(SERIALIZED_NAME_BLOCKING)
  private BlockingEnum blocking = BlockingEnum.NO_WAIT;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<String> contacts = new ArrayList<>();

  public CheckContactRequestBody() {
  }

  public CheckContactRequestBody blocking(BlockingEnum blocking) {
    this.blocking = blocking;
    return this;
  }

  /**
   * Blocking determines whether the request should wait for the processing to complete (synchronous) or not (asynchronous).
   * @return blocking
   */
  @javax.annotation.Nullable
  public BlockingEnum getBlocking() {
    return blocking;
  }

  public void setBlocking(BlockingEnum blocking) {
    this.blocking = blocking;
  }


  public CheckContactRequestBody contacts(List<String> contacts) {
    this.contacts = contacts;
    return this;
  }

  public CheckContactRequestBody addContactsItem(String contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * Array of contact phone numbers. The numbers can be in any standard telephone number format.
   * @return contacts
   */
  @javax.annotation.Nonnull
  public List<String> getContacts() {
    return contacts;
  }

  public void setContacts(List<String> contacts) {
    this.contacts = contacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckContactRequestBody checkContactRequestBody = (CheckContactRequestBody) o;
    return Objects.equals(this.blocking, checkContactRequestBody.blocking) &&
        Objects.equals(this.contacts, checkContactRequestBody.contacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blocking, contacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckContactRequestBody {\n");
    sb.append("    blocking: ").append(toIndentedString(blocking)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blocking");
    openapiFields.add("contacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contacts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckContactRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckContactRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckContactRequestBody is not found in the empty JSON string", CheckContactRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckContactRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckContactRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckContactRequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blocking") != null && !jsonObj.get("blocking").isJsonNull()) && !jsonObj.get("blocking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blocking").toString()));
      }
      // validate the optional field `blocking`
      if (jsonObj.get("blocking") != null && !jsonObj.get("blocking").isJsonNull()) {
        BlockingEnum.validateJsonElement(jsonObj.get("blocking"));
      }
      // ensure the required json array is present
      if (jsonObj.get("contacts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("contacts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckContactRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckContactRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckContactRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckContactRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckContactRequestBody>() {
           @Override
           public void write(JsonWriter out, CheckContactRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckContactRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckContactRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckContactRequestBody
   * @throws IOException if the JSON string is invalid with respect to CheckContactRequestBody
   */
  public static CheckContactRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckContactRequestBody.class);
  }

  /**
   * Convert an instance of CheckContactRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

