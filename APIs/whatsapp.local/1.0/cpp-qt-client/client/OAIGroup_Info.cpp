/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_Info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_Info::OAIGroup_Info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_Info::OAIGroup_Info() {
    this->initializeModel();
}

OAIGroup_Info::~OAIGroup_Info() {}

void OAIGroup_Info::initializeModel() {

    m_admins_isSet = false;
    m_admins_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIGroup_Info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_Info::fromJsonObject(QJsonObject json) {

    m_admins_isValid = ::OpenAPI::fromJsonValue(m_admins, json[QString("admins")]);
    m_admins_isSet = !json[QString("admins")].isNull() && m_admins_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creation_time")]);
    m_creation_time_isSet = !json[QString("creation_time")].isNull() && m_creation_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIGroup_Info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_Info::asJsonObject() const {
    QJsonObject obj;
    if (m_admins.size() > 0) {
        obj.insert(QString("admins"), ::OpenAPI::toJsonValue(m_admins));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creation_time"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QList<QString> OAIGroup_Info::getAdmins() const {
    return m_admins;
}
void OAIGroup_Info::setAdmins(const QList<QString> &admins) {
    m_admins = admins;
    m_admins_isSet = true;
}

bool OAIGroup_Info::is_admins_Set() const{
    return m_admins_isSet;
}

bool OAIGroup_Info::is_admins_Valid() const{
    return m_admins_isValid;
}

qint32 OAIGroup_Info::getCreationTime() const {
    return m_creation_time;
}
void OAIGroup_Info::setCreationTime(const qint32 &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGroup_Info::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGroup_Info::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIGroup_Info::getCreator() const {
    return m_creator;
}
void OAIGroup_Info::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIGroup_Info::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIGroup_Info::is_creator_Valid() const{
    return m_creator_isValid;
}

QList<QString> OAIGroup_Info::getParticipants() const {
    return m_participants;
}
void OAIGroup_Info::setParticipants(const QList<QString> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAIGroup_Info::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAIGroup_Info::is_participants_Valid() const{
    return m_participants_isValid;
}

QString OAIGroup_Info::getSubject() const {
    return m_subject;
}
void OAIGroup_Info::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIGroup_Info::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIGroup_Info::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIGroup_Info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_Info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
