/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook_Voice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook_Voice::OAIWebhook_Voice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook_Voice::OAIWebhook_Voice() {
    this->initializeModel();
}

OAIWebhook_Voice::~OAIWebhook_Voice() {}

void OAIWebhook_Voice::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_sha256_isSet = false;
    m_sha256_isValid = false;
}

void OAIWebhook_Voice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook_Voice::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_sha256_isValid = ::OpenAPI::fromJsonValue(m_sha256, json[QString("sha256")]);
    m_sha256_isSet = !json[QString("sha256")].isNull() && m_sha256_isValid;
}

QString OAIWebhook_Voice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook_Voice::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_sha256_isSet) {
        obj.insert(QString("sha256"), ::OpenAPI::toJsonValue(m_sha256));
    }
    return obj;
}

QString OAIWebhook_Voice::getCaption() const {
    return m_caption;
}
void OAIWebhook_Voice::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIWebhook_Voice::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIWebhook_Voice::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIWebhook_Voice::getFile() const {
    return m_file;
}
void OAIWebhook_Voice::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIWebhook_Voice::is_file_Set() const{
    return m_file_isSet;
}

bool OAIWebhook_Voice::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIWebhook_Voice::getId() const {
    return m_id;
}
void OAIWebhook_Voice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook_Voice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook_Voice::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhook_Voice::getLink() const {
    return m_link;
}
void OAIWebhook_Voice::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIWebhook_Voice::is_link_Set() const{
    return m_link_isSet;
}

bool OAIWebhook_Voice::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIWebhook_Voice::getMimeType() const {
    return m_mime_type;
}
void OAIWebhook_Voice::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIWebhook_Voice::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIWebhook_Voice::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIWebhook_Voice::getSha256() const {
    return m_sha256;
}
void OAIWebhook_Voice::setSha256(const QString &sha256) {
    m_sha256 = sha256;
    m_sha256_isSet = true;
}

bool OAIWebhook_Voice::is_sha256_Set() const{
    return m_sha256_isSet;
}

bool OAIWebhook_Voice::is_sha256_Valid() const{
    return m_sha256_isValid;
}

bool OAIWebhook_Voice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook_Voice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
