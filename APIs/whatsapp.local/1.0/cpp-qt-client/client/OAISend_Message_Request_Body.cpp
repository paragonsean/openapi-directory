/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISend_Message_Request_Body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISend_Message_Request_Body::OAISend_Message_Request_Body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISend_Message_Request_Body::OAISend_Message_Request_Body() {
    this->initializeModel();
}

OAISend_Message_Request_Body::~OAISend_Message_Request_Body() {}

void OAISend_Message_Request_Body::initializeModel() {

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_hsm_isSet = false;
    m_hsm_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_preview_url_isSet = false;
    m_preview_url_isValid = false;

    m_recipient_type_isSet = false;
    m_recipient_type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAISend_Message_Request_Body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISend_Message_Request_Body::fromJsonObject(QJsonObject json) {

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_hsm_isValid = ::OpenAPI::fromJsonValue(m_hsm, json[QString("hsm")]);
    m_hsm_isSet = !json[QString("hsm")].isNull() && m_hsm_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_preview_url_isValid = ::OpenAPI::fromJsonValue(m_preview_url, json[QString("preview_url")]);
    m_preview_url_isSet = !json[QString("preview_url")].isNull() && m_preview_url_isValid;

    m_recipient_type_isValid = ::OpenAPI::fromJsonValue(m_recipient_type, json[QString("recipient_type")]);
    m_recipient_type_isSet = !json[QString("recipient_type")].isNull() && m_recipient_type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAISend_Message_Request_Body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISend_Message_Request_Body::asJsonObject() const {
    QJsonObject obj;
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_hsm.isSet()) {
        obj.insert(QString("hsm"), ::OpenAPI::toJsonValue(m_hsm));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_preview_url_isSet) {
        obj.insert(QString("preview_url"), ::OpenAPI::toJsonValue(m_preview_url));
    }
    if (m_recipient_type_isSet) {
        obj.insert(QString("recipient_type"), ::OpenAPI::toJsonValue(m_recipient_type));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

OAIAudio OAISend_Message_Request_Body::getAudio() const {
    return m_audio;
}
void OAISend_Message_Request_Body::setAudio(const OAIAudio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAISend_Message_Request_Body::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAISend_Message_Request_Body::is_audio_Valid() const{
    return m_audio_isValid;
}

QList<OAIContact> OAISend_Message_Request_Body::getContacts() const {
    return m_contacts;
}
void OAISend_Message_Request_Body::setContacts(const QList<OAIContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAISend_Message_Request_Body::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAISend_Message_Request_Body::is_contacts_Valid() const{
    return m_contacts_isValid;
}

OAIDocument OAISend_Message_Request_Body::getDocument() const {
    return m_document;
}
void OAISend_Message_Request_Body::setDocument(const OAIDocument &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAISend_Message_Request_Body::is_document_Set() const{
    return m_document_isSet;
}

bool OAISend_Message_Request_Body::is_document_Valid() const{
    return m_document_isValid;
}

OAIHsm OAISend_Message_Request_Body::getHsm() const {
    return m_hsm;
}
void OAISend_Message_Request_Body::setHsm(const OAIHsm &hsm) {
    m_hsm = hsm;
    m_hsm_isSet = true;
}

bool OAISend_Message_Request_Body::is_hsm_Set() const{
    return m_hsm_isSet;
}

bool OAISend_Message_Request_Body::is_hsm_Valid() const{
    return m_hsm_isValid;
}

OAIImage OAISend_Message_Request_Body::getImage() const {
    return m_image;
}
void OAISend_Message_Request_Body::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAISend_Message_Request_Body::is_image_Set() const{
    return m_image_isSet;
}

bool OAISend_Message_Request_Body::is_image_Valid() const{
    return m_image_isValid;
}

OAILocation OAISend_Message_Request_Body::getLocation() const {
    return m_location;
}
void OAISend_Message_Request_Body::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISend_Message_Request_Body::is_location_Set() const{
    return m_location_isSet;
}

bool OAISend_Message_Request_Body::is_location_Valid() const{
    return m_location_isValid;
}

bool OAISend_Message_Request_Body::isPreviewUrl() const {
    return m_preview_url;
}
void OAISend_Message_Request_Body::setPreviewUrl(const bool &preview_url) {
    m_preview_url = preview_url;
    m_preview_url_isSet = true;
}

bool OAISend_Message_Request_Body::is_preview_url_Set() const{
    return m_preview_url_isSet;
}

bool OAISend_Message_Request_Body::is_preview_url_Valid() const{
    return m_preview_url_isValid;
}

QString OAISend_Message_Request_Body::getRecipientType() const {
    return m_recipient_type;
}
void OAISend_Message_Request_Body::setRecipientType(const QString &recipient_type) {
    m_recipient_type = recipient_type;
    m_recipient_type_isSet = true;
}

bool OAISend_Message_Request_Body::is_recipient_type_Set() const{
    return m_recipient_type_isSet;
}

bool OAISend_Message_Request_Body::is_recipient_type_Valid() const{
    return m_recipient_type_isValid;
}

OAIText OAISend_Message_Request_Body::getText() const {
    return m_text;
}
void OAISend_Message_Request_Body::setText(const OAIText &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISend_Message_Request_Body::is_text_Set() const{
    return m_text_isSet;
}

bool OAISend_Message_Request_Body::is_text_Valid() const{
    return m_text_isValid;
}

QString OAISend_Message_Request_Body::getTo() const {
    return m_to;
}
void OAISend_Message_Request_Body::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISend_Message_Request_Body::is_to_Set() const{
    return m_to_isSet;
}

bool OAISend_Message_Request_Body::is_to_Valid() const{
    return m_to_isValid;
}

OAIObject OAISend_Message_Request_Body::getTtl() const {
    return m_ttl;
}
void OAISend_Message_Request_Body::setTtl(const OAIObject &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAISend_Message_Request_Body::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAISend_Message_Request_Body::is_ttl_Valid() const{
    return m_ttl_isValid;
}

OAIMessage_Type OAISend_Message_Request_Body::getType() const {
    return m_type;
}
void OAISend_Message_Request_Body::setType(const OAIMessage_Type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISend_Message_Request_Body::is_type_Set() const{
    return m_type_isSet;
}

bool OAISend_Message_Request_Body::is_type_Valid() const{
    return m_type_isValid;
}

OAIVideo OAISend_Message_Request_Body::getVideo() const {
    return m_video;
}
void OAISend_Message_Request_Body::setVideo(const OAIVideo &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAISend_Message_Request_Body::is_video_Set() const{
    return m_video_isSet;
}

bool OAISend_Message_Request_Body::is_video_Valid() const{
    return m_video_isValid;
}

bool OAISend_Message_Request_Body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISend_Message_Request_Body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_to_isValid && true;
}

} // namespace OpenAPI
