/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHsm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHsm::OAIHsm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHsm::OAIHsm() {
    this->initializeModel();
}

OAIHsm::~OAIHsm() {}

void OAIHsm::initializeModel() {

    m_element_name_isSet = false;
    m_element_name_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_localizable_params_isSet = false;
    m_localizable_params_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;
}

void OAIHsm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHsm::fromJsonObject(QJsonObject json) {

    m_element_name_isValid = ::OpenAPI::fromJsonValue(m_element_name, json[QString("element_name")]);
    m_element_name_isSet = !json[QString("element_name")].isNull() && m_element_name_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_localizable_params_isValid = ::OpenAPI::fromJsonValue(m_localizable_params, json[QString("localizable_params")]);
    m_localizable_params_isSet = !json[QString("localizable_params")].isNull() && m_localizable_params_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;
}

QString OAIHsm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHsm::asJsonObject() const {
    QJsonObject obj;
    if (m_element_name_isSet) {
        obj.insert(QString("element_name"), ::OpenAPI::toJsonValue(m_element_name));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_localizable_params.size() > 0) {
        obj.insert(QString("localizable_params"), ::OpenAPI::toJsonValue(m_localizable_params));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    return obj;
}

QString OAIHsm::getElementName() const {
    return m_element_name;
}
void OAIHsm::setElementName(const QString &element_name) {
    m_element_name = element_name;
    m_element_name_isSet = true;
}

bool OAIHsm::is_element_name_Set() const{
    return m_element_name_isSet;
}

bool OAIHsm::is_element_name_Valid() const{
    return m_element_name_isValid;
}

OAILanguage OAIHsm::getLanguage() const {
    return m_language;
}
void OAIHsm::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIHsm::is_language_Set() const{
    return m_language_isSet;
}

bool OAIHsm::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAILocalizableParam> OAIHsm::getLocalizableParams() const {
    return m_localizable_params;
}
void OAIHsm::setLocalizableParams(const QList<OAILocalizableParam> &localizable_params) {
    m_localizable_params = localizable_params;
    m_localizable_params_isSet = true;
}

bool OAIHsm::is_localizable_params_Set() const{
    return m_localizable_params_isSet;
}

bool OAIHsm::is_localizable_params_Valid() const{
    return m_localizable_params_isValid;
}

QString OAIHsm::getRNamespace() const {
    return m_r_namespace;
}
void OAIHsm::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIHsm::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIHsm::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

bool OAIHsm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localizable_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHsm::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_element_name_isValid && m_language_isValid && m_localizable_params_isValid && m_r_namespace_isValid && true;
}

} // namespace OpenAPI
