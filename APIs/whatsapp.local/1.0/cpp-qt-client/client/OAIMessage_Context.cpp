/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_Context.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_Context::OAIMessage_Context(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_Context::OAIMessage_Context() {
    this->initializeModel();
}

OAIMessage_Context::~OAIMessage_Context() {}

void OAIMessage_Context::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;
}

void OAIMessage_Context::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage_Context::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;
}

QString OAIMessage_Context::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage_Context::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    return obj;
}

QString OAIMessage_Context::getFrom() const {
    return m_from;
}
void OAIMessage_Context::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIMessage_Context::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMessage_Context::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIMessage_Context::getGroupId() const {
    return m_group_id;
}
void OAIMessage_Context::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIMessage_Context::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIMessage_Context::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIMessage_Context::getId() const {
    return m_id;
}
void OAIMessage_Context::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessage_Context::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessage_Context::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIMessage_Context::getMentions() const {
    return m_mentions;
}
void OAIMessage_Context::setMentions(const QList<QString> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAIMessage_Context::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAIMessage_Context::is_mentions_Valid() const{
    return m_mentions_isValid;
}

bool OAIMessage_Context::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage_Context::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
