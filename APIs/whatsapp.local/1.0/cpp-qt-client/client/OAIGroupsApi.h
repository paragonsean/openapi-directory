/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_Group_Request_Body.h"
#include "OAIGroup_Admin_Request_Body.h"
#include "OAIGroup_Invite_Response.h"
#include "OAIGroup_Response.h"
#include "OAIGroups_Response.h"
#include "OAIHttpFileElement.h"
#include "OAIRemove_Group_Participant_Request_Body.h"
#include "OAIUpdate_Group_Info_Request_Body.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_group_request_body OAICreate_Group_Request_Body [required]
    */
    virtual void createGroup(const OAICreate_Group_Request_Body &oai_create_group_request_body);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void deleteGroupIcon(const QString &group_id, const OAIHttpFileElement &file);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void deleteGroupInvite(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  oai_group_admin_request_body OAIGroup_Admin_Request_Body [required]
    */
    virtual void demoteGroupAdmin(const QString &group_id, const OAIGroup_Admin_Request_Body &oai_group_admin_request_body);


    virtual void getAllGroups();

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void getGroupIconBinary(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void getGroupInfo(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void getGroupInvite(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void leaveGroup(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  oai_group_admin_request_body OAIGroup_Admin_Request_Body [required]
    */
    virtual void promoteToGroupAdmin(const QString &group_id, const OAIGroup_Admin_Request_Body &oai_group_admin_request_body);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  oai_remove_group_participant_request_body OAIRemove_Group_Participant_Request_Body [required]
    */
    virtual void removeGroupParticipant(const QString &group_id, const OAIRemove_Group_Participant_Request_Body &oai_remove_group_participant_request_body);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void setGroupIcon(const QString &group_id, const OAIHttpFileElement &file);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  oai_update_group_info_request_body OAIUpdate_Group_Info_Request_Body [required]
    */
    virtual void updateGroupInfo(const QString &group_id, const OAIUpdate_Group_Info_Request_Body &oai_update_group_info_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGroupCallback(OAIHttpRequestWorker *worker);
    void deleteGroupIconCallback(OAIHttpRequestWorker *worker);
    void deleteGroupInviteCallback(OAIHttpRequestWorker *worker);
    void demoteGroupAdminCallback(OAIHttpRequestWorker *worker);
    void getAllGroupsCallback(OAIHttpRequestWorker *worker);
    void getGroupIconBinaryCallback(OAIHttpRequestWorker *worker);
    void getGroupInfoCallback(OAIHttpRequestWorker *worker);
    void getGroupInviteCallback(OAIHttpRequestWorker *worker);
    void leaveGroupCallback(OAIHttpRequestWorker *worker);
    void promoteToGroupAdminCallback(OAIHttpRequestWorker *worker);
    void removeGroupParticipantCallback(OAIHttpRequestWorker *worker);
    void setGroupIconCallback(OAIHttpRequestWorker *worker);
    void updateGroupInfoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGroupSignal(OAIGroups_Response summary);
    void deleteGroupIconSignal();
    void deleteGroupInviteSignal();
    void demoteGroupAdminSignal();
    void getAllGroupsSignal(OAIGroups_Response summary);
    void getGroupIconBinarySignal();
    void getGroupInfoSignal(OAIGroup_Response summary);
    void getGroupInviteSignal(OAIGroup_Invite_Response summary);
    void leaveGroupSignal();
    void promoteToGroupAdminSignal();
    void removeGroupParticipantSignal();
    void setGroupIconSignal();
    void updateGroupInfoSignal();


    void createGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroups_Response summary);
    void deleteGroupIconSignalFull(OAIHttpRequestWorker *worker);
    void deleteGroupInviteSignalFull(OAIHttpRequestWorker *worker);
    void demoteGroupAdminSignalFull(OAIHttpRequestWorker *worker);
    void getAllGroupsSignalFull(OAIHttpRequestWorker *worker, OAIGroups_Response summary);
    void getGroupIconBinarySignalFull(OAIHttpRequestWorker *worker);
    void getGroupInfoSignalFull(OAIHttpRequestWorker *worker, OAIGroup_Response summary);
    void getGroupInviteSignalFull(OAIHttpRequestWorker *worker, OAIGroup_Invite_Response summary);
    void leaveGroupSignalFull(OAIHttpRequestWorker *worker);
    void promoteToGroupAdminSignalFull(OAIHttpRequestWorker *worker);
    void removeGroupParticipantSignalFull(OAIHttpRequestWorker *worker);
    void setGroupIconSignalFull(OAIHttpRequestWorker *worker);
    void updateGroupInfoSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createGroupSignalError() instead")
    void createGroupSignalE(OAIGroups_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalError(OAIGroups_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupIconSignalError() instead")
    void deleteGroupIconSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupIconSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupInviteSignalError() instead")
    void deleteGroupInviteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupInviteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demoteGroupAdminSignalError() instead")
    void demoteGroupAdminSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void demoteGroupAdminSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllGroupsSignalError() instead")
    void getAllGroupsSignalE(OAIGroups_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllGroupsSignalError(OAIGroups_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupIconBinarySignalError() instead")
    void getGroupIconBinarySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupIconBinarySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupInfoSignalError() instead")
    void getGroupInfoSignalE(OAIGroup_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupInfoSignalError(OAIGroup_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupInviteSignalError() instead")
    void getGroupInviteSignalE(OAIGroup_Invite_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupInviteSignalError(OAIGroup_Invite_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaveGroupSignalError() instead")
    void leaveGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaveGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use promoteToGroupAdminSignalError() instead")
    void promoteToGroupAdminSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void promoteToGroupAdminSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupParticipantSignalError() instead")
    void removeGroupParticipantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupParticipantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setGroupIconSignalError() instead")
    void setGroupIconSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setGroupIconSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupInfoSignalError() instead")
    void updateGroupInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGroupSignalErrorFull() instead")
    void createGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupIconSignalErrorFull() instead")
    void deleteGroupIconSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupIconSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupInviteSignalErrorFull() instead")
    void deleteGroupInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demoteGroupAdminSignalErrorFull() instead")
    void demoteGroupAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demoteGroupAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllGroupsSignalErrorFull() instead")
    void getAllGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupIconBinarySignalErrorFull() instead")
    void getGroupIconBinarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupIconBinarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupInfoSignalErrorFull() instead")
    void getGroupInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupInviteSignalErrorFull() instead")
    void getGroupInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaveGroupSignalErrorFull() instead")
    void leaveGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaveGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use promoteToGroupAdminSignalErrorFull() instead")
    void promoteToGroupAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void promoteToGroupAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupParticipantSignalErrorFull() instead")
    void removeGroupParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setGroupIconSignalErrorFull() instead")
    void setGroupIconSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setGroupIconSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupInfoSignalErrorFull() instead")
    void updateGroupInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
