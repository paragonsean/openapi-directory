/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISet_Shards_Request_Body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISet_Shards_Request_Body::OAISet_Shards_Request_Body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISet_Shards_Request_Body::OAISet_Shards_Request_Body() {
    this->initializeModel();
}

OAISet_Shards_Request_Body::~OAISet_Shards_Request_Body() {}

void OAISet_Shards_Request_Body::initializeModel() {

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_shards_isSet = false;
    m_shards_isValid = false;
}

void OAISet_Shards_Request_Body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISet_Shards_Request_Body::fromJsonObject(QJsonObject json) {

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("cc")]);
    m_cc_isSet = !json[QString("cc")].isNull() && m_cc_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_shards_isValid = ::OpenAPI::fromJsonValue(m_shards, json[QString("shards")]);
    m_shards_isSet = !json[QString("shards")].isNull() && m_shards_isValid;
}

QString OAISet_Shards_Request_Body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISet_Shards_Request_Body::asJsonObject() const {
    QJsonObject obj;
    if (m_cc_isSet) {
        obj.insert(QString("cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_shards_isSet) {
        obj.insert(QString("shards"), ::OpenAPI::toJsonValue(m_shards));
    }
    return obj;
}

QString OAISet_Shards_Request_Body::getCc() const {
    return m_cc;
}
void OAISet_Shards_Request_Body::setCc(const QString &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAISet_Shards_Request_Body::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAISet_Shards_Request_Body::is_cc_Valid() const{
    return m_cc_isValid;
}

QString OAISet_Shards_Request_Body::getPhoneNumber() const {
    return m_phone_number;
}
void OAISet_Shards_Request_Body::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAISet_Shards_Request_Body::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAISet_Shards_Request_Body::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAISet_Shards_Request_Body::getPin() const {
    return m_pin;
}
void OAISet_Shards_Request_Body::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAISet_Shards_Request_Body::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAISet_Shards_Request_Body::is_pin_Valid() const{
    return m_pin_isValid;
}

qint32 OAISet_Shards_Request_Body::getShards() const {
    return m_shards;
}
void OAISet_Shards_Request_Body::setShards(const qint32 &shards) {
    m_shards = shards;
    m_shards_isSet = true;
}

bool OAISet_Shards_Request_Body::is_shards_Set() const{
    return m_shards_isSet;
}

bool OAISet_Shards_Request_Body::is_shards_Valid() const{
    return m_shards_isValid;
}

bool OAISet_Shards_Request_Body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shards_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISet_Shards_Request_Body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cc_isValid && m_phone_number_isValid && m_pin_isValid && m_shards_isValid && true;
}

} // namespace OpenAPI
