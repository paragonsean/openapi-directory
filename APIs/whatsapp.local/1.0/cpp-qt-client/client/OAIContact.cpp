/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContact::OAIContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContact::OAIContact() {
    this->initializeModel();
}

OAIContact::~OAIContact() {}

void OAIContact::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_ims_isSet = false;
    m_ims_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_phones_isSet = false;
    m_phones_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContact::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_ims_isValid = ::OpenAPI::fromJsonValue(m_ims, json[QString("ims")]);
    m_ims_isSet = !json[QString("ims")].isNull() && m_ims_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_phones_isValid = ::OpenAPI::fromJsonValue(m_phones, json[QString("phones")]);
    m_phones_isSet = !json[QString("phones")].isNull() && m_phones_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContact::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_ims.size() > 0) {
        obj.insert(QString("ims"), ::OpenAPI::toJsonValue(m_ims));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org.isSet()) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_phones.size() > 0) {
        obj.insert(QString("phones"), ::OpenAPI::toJsonValue(m_phones));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QList<OAIAddress> OAIContact::getAddresses() const {
    return m_addresses;
}
void OAIContact::setAddresses(const QList<OAIAddress> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIContact::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIContact::is_addresses_Valid() const{
    return m_addresses_isValid;
}

QString OAIContact::getBirthday() const {
    return m_birthday;
}
void OAIContact::setBirthday(const QString &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIContact::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIContact::is_birthday_Valid() const{
    return m_birthday_isValid;
}

QList<OAIEmail> OAIContact::getEmails() const {
    return m_emails;
}
void OAIContact::setEmails(const QList<OAIEmail> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIContact::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIContact::is_emails_Valid() const{
    return m_emails_isValid;
}

QList<QString> OAIContact::getIms() const {
    return m_ims;
}
void OAIContact::setIms(const QList<QString> &ims) {
    m_ims = ims;
    m_ims_isSet = true;
}

bool OAIContact::is_ims_Set() const{
    return m_ims_isSet;
}

bool OAIContact::is_ims_Valid() const{
    return m_ims_isValid;
}

OAIName OAIContact::getName() const {
    return m_name;
}
void OAIContact::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContact::is_name_Valid() const{
    return m_name_isValid;
}

OAIOrg OAIContact::getOrg() const {
    return m_org;
}
void OAIContact::setOrg(const OAIOrg &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIContact::is_org_Set() const{
    return m_org_isSet;
}

bool OAIContact::is_org_Valid() const{
    return m_org_isValid;
}

QList<OAIPhone> OAIContact::getPhones() const {
    return m_phones;
}
void OAIContact::setPhones(const QList<OAIPhone> &phones) {
    m_phones = phones;
    m_phones_isSet = true;
}

bool OAIContact::is_phones_Set() const{
    return m_phones_isSet;
}

bool OAIContact::is_phones_Valid() const{
    return m_phones_isValid;
}

QList<OAIUrl> OAIContact::getUrls() const {
    return m_urls;
}
void OAIContact::setUrls(const QList<OAIUrl> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIContact::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIContact::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
