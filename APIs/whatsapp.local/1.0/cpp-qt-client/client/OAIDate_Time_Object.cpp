/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDate_Time_Object.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDate_Time_Object::OAIDate_Time_Object(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDate_Time_Object::OAIDate_Time_Object() {
    this->initializeModel();
}

OAIDate_Time_Object::~OAIDate_Time_Object() {}

void OAIDate_Time_Object::initializeModel() {

    m_component_isSet = false;
    m_component_isValid = false;

    m_unix_epoch_isSet = false;
    m_unix_epoch_isValid = false;
}

void OAIDate_Time_Object::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDate_Time_Object::fromJsonObject(QJsonObject json) {

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("component")]);
    m_component_isSet = !json[QString("component")].isNull() && m_component_isValid;

    m_unix_epoch_isValid = ::OpenAPI::fromJsonValue(m_unix_epoch, json[QString("unix_epoch")]);
    m_unix_epoch_isSet = !json[QString("unix_epoch")].isNull() && m_unix_epoch_isValid;
}

QString OAIDate_Time_Object::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDate_Time_Object::asJsonObject() const {
    QJsonObject obj;
    if (m_component.isSet()) {
        obj.insert(QString("component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_unix_epoch.isSet()) {
        obj.insert(QString("unix_epoch"), ::OpenAPI::toJsonValue(m_unix_epoch));
    }
    return obj;
}

OAIDate_Time_Component OAIDate_Time_Object::getComponent() const {
    return m_component;
}
void OAIDate_Time_Object::setComponent(const OAIDate_Time_Component &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAIDate_Time_Object::is_component_Set() const{
    return m_component_isSet;
}

bool OAIDate_Time_Object::is_component_Valid() const{
    return m_component_isValid;
}

OAIDate_Time_Unix_Epoch OAIDate_Time_Object::getUnixEpoch() const {
    return m_unix_epoch;
}
void OAIDate_Time_Object::setUnixEpoch(const OAIDate_Time_Unix_Epoch &unix_epoch) {
    m_unix_epoch = unix_epoch;
    m_unix_epoch_isSet = true;
}

bool OAIDate_Time_Object::is_unix_epoch_Set() const{
    return m_unix_epoch_isSet;
}

bool OAIDate_Time_Object::is_unix_epoch_Valid() const{
    return m_unix_epoch_isValid;
}

bool OAIDate_Time_Object::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unix_epoch.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDate_Time_Object::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
