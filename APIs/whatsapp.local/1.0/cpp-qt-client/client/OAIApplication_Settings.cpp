/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication_Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication_Settings::OAIApplication_Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication_Settings::OAIApplication_Settings() {
    this->initializeModel();
}

OAIApplication_Settings::~OAIApplication_Settings() {}

void OAIApplication_Settings::initializeModel() {

    m_callback_backoff_delay_ms_isSet = false;
    m_callback_backoff_delay_ms_isValid = false;

    m_callback_persist_isSet = false;
    m_callback_persist_isValid = false;

    m_heartbeat_interval_isSet = false;
    m_heartbeat_interval_isValid = false;

    m_max_callback_backoff_delay_ms_isSet = false;
    m_max_callback_backoff_delay_ms_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_on_call_pager_isSet = false;
    m_on_call_pager_isValid = false;

    m_pass_through_isSet = false;
    m_pass_through_isValid = false;

    m_sent_status_isSet = false;
    m_sent_status_isValid = false;

    m_unhealthy_interval_isSet = false;
    m_unhealthy_interval_isValid = false;

    m_webhooks_isSet = false;
    m_webhooks_isValid = false;
}

void OAIApplication_Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication_Settings::fromJsonObject(QJsonObject json) {

    m_callback_backoff_delay_ms_isValid = ::OpenAPI::fromJsonValue(m_callback_backoff_delay_ms, json[QString("callback_backoff_delay_ms")]);
    m_callback_backoff_delay_ms_isSet = !json[QString("callback_backoff_delay_ms")].isNull() && m_callback_backoff_delay_ms_isValid;

    m_callback_persist_isValid = ::OpenAPI::fromJsonValue(m_callback_persist, json[QString("callback_persist")]);
    m_callback_persist_isSet = !json[QString("callback_persist")].isNull() && m_callback_persist_isValid;

    m_heartbeat_interval_isValid = ::OpenAPI::fromJsonValue(m_heartbeat_interval, json[QString("heartbeat_interval")]);
    m_heartbeat_interval_isSet = !json[QString("heartbeat_interval")].isNull() && m_heartbeat_interval_isValid;

    m_max_callback_backoff_delay_ms_isValid = ::OpenAPI::fromJsonValue(m_max_callback_backoff_delay_ms, json[QString("max_callback_backoff_delay_ms")]);
    m_max_callback_backoff_delay_ms_isSet = !json[QString("max_callback_backoff_delay_ms")].isNull() && m_max_callback_backoff_delay_ms_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_on_call_pager_isValid = ::OpenAPI::fromJsonValue(m_on_call_pager, json[QString("on_call_pager")]);
    m_on_call_pager_isSet = !json[QString("on_call_pager")].isNull() && m_on_call_pager_isValid;

    m_pass_through_isValid = ::OpenAPI::fromJsonValue(m_pass_through, json[QString("pass_through")]);
    m_pass_through_isSet = !json[QString("pass_through")].isNull() && m_pass_through_isValid;

    m_sent_status_isValid = ::OpenAPI::fromJsonValue(m_sent_status, json[QString("sent_status")]);
    m_sent_status_isSet = !json[QString("sent_status")].isNull() && m_sent_status_isValid;

    m_unhealthy_interval_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_interval, json[QString("unhealthy_interval")]);
    m_unhealthy_interval_isSet = !json[QString("unhealthy_interval")].isNull() && m_unhealthy_interval_isValid;

    m_webhooks_isValid = ::OpenAPI::fromJsonValue(m_webhooks, json[QString("webhooks")]);
    m_webhooks_isSet = !json[QString("webhooks")].isNull() && m_webhooks_isValid;
}

QString OAIApplication_Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication_Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_backoff_delay_ms_isSet) {
        obj.insert(QString("callback_backoff_delay_ms"), ::OpenAPI::toJsonValue(m_callback_backoff_delay_ms));
    }
    if (m_callback_persist_isSet) {
        obj.insert(QString("callback_persist"), ::OpenAPI::toJsonValue(m_callback_persist));
    }
    if (m_heartbeat_interval_isSet) {
        obj.insert(QString("heartbeat_interval"), ::OpenAPI::toJsonValue(m_heartbeat_interval));
    }
    if (m_max_callback_backoff_delay_ms_isSet) {
        obj.insert(QString("max_callback_backoff_delay_ms"), ::OpenAPI::toJsonValue(m_max_callback_backoff_delay_ms));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_on_call_pager_isSet) {
        obj.insert(QString("on_call_pager"), ::OpenAPI::toJsonValue(m_on_call_pager));
    }
    if (m_pass_through_isSet) {
        obj.insert(QString("pass_through"), ::OpenAPI::toJsonValue(m_pass_through));
    }
    if (m_sent_status_isSet) {
        obj.insert(QString("sent_status"), ::OpenAPI::toJsonValue(m_sent_status));
    }
    if (m_unhealthy_interval_isSet) {
        obj.insert(QString("unhealthy_interval"), ::OpenAPI::toJsonValue(m_unhealthy_interval));
    }
    if (m_webhooks.isSet()) {
        obj.insert(QString("webhooks"), ::OpenAPI::toJsonValue(m_webhooks));
    }
    return obj;
}

QString OAIApplication_Settings::getCallbackBackoffDelayMs() const {
    return m_callback_backoff_delay_ms;
}
void OAIApplication_Settings::setCallbackBackoffDelayMs(const QString &callback_backoff_delay_ms) {
    m_callback_backoff_delay_ms = callback_backoff_delay_ms;
    m_callback_backoff_delay_ms_isSet = true;
}

bool OAIApplication_Settings::is_callback_backoff_delay_ms_Set() const{
    return m_callback_backoff_delay_ms_isSet;
}

bool OAIApplication_Settings::is_callback_backoff_delay_ms_Valid() const{
    return m_callback_backoff_delay_ms_isValid;
}

bool OAIApplication_Settings::isCallbackPersist() const {
    return m_callback_persist;
}
void OAIApplication_Settings::setCallbackPersist(const bool &callback_persist) {
    m_callback_persist = callback_persist;
    m_callback_persist_isSet = true;
}

bool OAIApplication_Settings::is_callback_persist_Set() const{
    return m_callback_persist_isSet;
}

bool OAIApplication_Settings::is_callback_persist_Valid() const{
    return m_callback_persist_isValid;
}

qint32 OAIApplication_Settings::getHeartbeatInterval() const {
    return m_heartbeat_interval;
}
void OAIApplication_Settings::setHeartbeatInterval(const qint32 &heartbeat_interval) {
    m_heartbeat_interval = heartbeat_interval;
    m_heartbeat_interval_isSet = true;
}

bool OAIApplication_Settings::is_heartbeat_interval_Set() const{
    return m_heartbeat_interval_isSet;
}

bool OAIApplication_Settings::is_heartbeat_interval_Valid() const{
    return m_heartbeat_interval_isValid;
}

QString OAIApplication_Settings::getMaxCallbackBackoffDelayMs() const {
    return m_max_callback_backoff_delay_ms;
}
void OAIApplication_Settings::setMaxCallbackBackoffDelayMs(const QString &max_callback_backoff_delay_ms) {
    m_max_callback_backoff_delay_ms = max_callback_backoff_delay_ms;
    m_max_callback_backoff_delay_ms_isSet = true;
}

bool OAIApplication_Settings::is_max_callback_backoff_delay_ms_Set() const{
    return m_max_callback_backoff_delay_ms_isSet;
}

bool OAIApplication_Settings::is_max_callback_backoff_delay_ms_Valid() const{
    return m_max_callback_backoff_delay_ms_isValid;
}

OAIMedia OAIApplication_Settings::getMedia() const {
    return m_media;
}
void OAIApplication_Settings::setMedia(const OAIMedia &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIApplication_Settings::is_media_Set() const{
    return m_media_isSet;
}

bool OAIApplication_Settings::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIApplication_Settings::getOnCallPager() const {
    return m_on_call_pager;
}
void OAIApplication_Settings::setOnCallPager(const QString &on_call_pager) {
    m_on_call_pager = on_call_pager;
    m_on_call_pager_isSet = true;
}

bool OAIApplication_Settings::is_on_call_pager_Set() const{
    return m_on_call_pager_isSet;
}

bool OAIApplication_Settings::is_on_call_pager_Valid() const{
    return m_on_call_pager_isValid;
}

bool OAIApplication_Settings::isPassThrough() const {
    return m_pass_through;
}
void OAIApplication_Settings::setPassThrough(const bool &pass_through) {
    m_pass_through = pass_through;
    m_pass_through_isSet = true;
}

bool OAIApplication_Settings::is_pass_through_Set() const{
    return m_pass_through_isSet;
}

bool OAIApplication_Settings::is_pass_through_Valid() const{
    return m_pass_through_isValid;
}

bool OAIApplication_Settings::isSentStatus() const {
    return m_sent_status;
}
void OAIApplication_Settings::setSentStatus(const bool &sent_status) {
    m_sent_status = sent_status;
    m_sent_status_isSet = true;
}

bool OAIApplication_Settings::is_sent_status_Set() const{
    return m_sent_status_isSet;
}

bool OAIApplication_Settings::is_sent_status_Valid() const{
    return m_sent_status_isValid;
}

qint32 OAIApplication_Settings::getUnhealthyInterval() const {
    return m_unhealthy_interval;
}
void OAIApplication_Settings::setUnhealthyInterval(const qint32 &unhealthy_interval) {
    m_unhealthy_interval = unhealthy_interval;
    m_unhealthy_interval_isSet = true;
}

bool OAIApplication_Settings::is_unhealthy_interval_Set() const{
    return m_unhealthy_interval_isSet;
}

bool OAIApplication_Settings::is_unhealthy_interval_Valid() const{
    return m_unhealthy_interval_isValid;
}

OAIWebhooks OAIApplication_Settings::getWebhooks() const {
    return m_webhooks;
}
void OAIApplication_Settings::setWebhooks(const OAIWebhooks &webhooks) {
    m_webhooks = webhooks;
    m_webhooks_isSet = true;
}

bool OAIApplication_Settings::is_webhooks_Set() const{
    return m_webhooks_isSet;
}

bool OAIApplication_Settings::is_webhooks_Valid() const{
    return m_webhooks_isValid;
}

bool OAIApplication_Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_backoff_delay_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_persist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heartbeat_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_callback_backoff_delay_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_call_pager_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_through_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhooks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication_Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
