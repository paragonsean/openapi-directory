/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhone::OAIPhone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhone::OAIPhone() {
    this->initializeModel();
}

OAIPhone::~OAIPhone() {}

void OAIPhone::initializeModel() {

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_wa_id_isSet = false;
    m_wa_id_isValid = false;
}

void OAIPhone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhone::fromJsonObject(QJsonObject json) {

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_wa_id_isValid = ::OpenAPI::fromJsonValue(m_wa_id, json[QString("wa_id")]);
    m_wa_id_isSet = !json[QString("wa_id")].isNull() && m_wa_id_isValid;
}

QString OAIPhone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhone::asJsonObject() const {
    QJsonObject obj;
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_wa_id_isSet) {
        obj.insert(QString("wa_id"), ::OpenAPI::toJsonValue(m_wa_id));
    }
    return obj;
}

QString OAIPhone::getPhone() const {
    return m_phone;
}
void OAIPhone::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIPhone::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIPhone::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIPhone::getType() const {
    return m_type;
}
void OAIPhone::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPhone::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPhone::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPhone::getWaId() const {
    return m_wa_id;
}
void OAIPhone::setWaId(const QString &wa_id) {
    m_wa_id = wa_id;
    m_wa_id_isSet = true;
}

bool OAIPhone::is_wa_id_Set() const{
    return m_wa_id_isSet;
}

bool OAIPhone::is_wa_id_Valid() const{
    return m_wa_id_isValid;
}

bool OAIPhone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wa_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
