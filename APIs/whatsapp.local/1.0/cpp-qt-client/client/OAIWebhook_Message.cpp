/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook_Message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook_Message::OAIWebhook_Message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook_Message::OAIWebhook_Message() {
    this->initializeModel();
}

OAIWebhook_Message::~OAIWebhook_Message() {}

void OAIWebhook_Message::initializeModel() {

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;
}

void OAIWebhook_Message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook_Message::fromJsonObject(QJsonObject json) {

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;
}

QString OAIWebhook_Message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook_Message::asJsonObject() const {
    QJsonObject obj;
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_system.isSet()) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_voice.isSet()) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    return obj;
}

OAIWebhook_Audio OAIWebhook_Message::getAudio() const {
    return m_audio;
}
void OAIWebhook_Message::setAudio(const OAIWebhook_Audio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIWebhook_Message::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIWebhook_Message::is_audio_Valid() const{
    return m_audio_isValid;
}

QList<OAIContact> OAIWebhook_Message::getContacts() const {
    return m_contacts;
}
void OAIWebhook_Message::setContacts(const QList<OAIContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIWebhook_Message::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIWebhook_Message::is_contacts_Valid() const{
    return m_contacts_isValid;
}

OAIMessage_Context OAIWebhook_Message::getContext() const {
    return m_context;
}
void OAIWebhook_Message::setContext(const OAIMessage_Context &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIWebhook_Message::is_context_Set() const{
    return m_context_isSet;
}

bool OAIWebhook_Message::is_context_Valid() const{
    return m_context_isValid;
}

OAIWebhook_Document OAIWebhook_Message::getDocument() const {
    return m_document;
}
void OAIWebhook_Message::setDocument(const OAIWebhook_Document &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIWebhook_Message::is_document_Set() const{
    return m_document_isSet;
}

bool OAIWebhook_Message::is_document_Valid() const{
    return m_document_isValid;
}

QList<OAIError> OAIWebhook_Message::getErrors() const {
    return m_errors;
}
void OAIWebhook_Message::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIWebhook_Message::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIWebhook_Message::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIWebhook_Message::getFrom() const {
    return m_from;
}
void OAIWebhook_Message::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIWebhook_Message::is_from_Set() const{
    return m_from_isSet;
}

bool OAIWebhook_Message::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIWebhook_Message::getGroupId() const {
    return m_group_id;
}
void OAIWebhook_Message::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIWebhook_Message::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIWebhook_Message::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIWebhook_Message::getId() const {
    return m_id;
}
void OAIWebhook_Message::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook_Message::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook_Message::is_id_Valid() const{
    return m_id_isValid;
}

OAIWebhook_Image OAIWebhook_Message::getImage() const {
    return m_image;
}
void OAIWebhook_Message::setImage(const OAIWebhook_Image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIWebhook_Message::is_image_Set() const{
    return m_image_isSet;
}

bool OAIWebhook_Message::is_image_Valid() const{
    return m_image_isValid;
}

OAIWebhook_Location OAIWebhook_Message::getLocation() const {
    return m_location;
}
void OAIWebhook_Message::setLocation(const OAIWebhook_Location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIWebhook_Message::is_location_Set() const{
    return m_location_isSet;
}

bool OAIWebhook_Message::is_location_Valid() const{
    return m_location_isValid;
}

OAIWebhook_System OAIWebhook_Message::getSystem() const {
    return m_system;
}
void OAIWebhook_Message::setSystem(const OAIWebhook_System &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIWebhook_Message::is_system_Set() const{
    return m_system_isSet;
}

bool OAIWebhook_Message::is_system_Valid() const{
    return m_system_isValid;
}

OAIWebhook_Text OAIWebhook_Message::getText() const {
    return m_text;
}
void OAIWebhook_Message::setText(const OAIWebhook_Text &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIWebhook_Message::is_text_Set() const{
    return m_text_isSet;
}

bool OAIWebhook_Message::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIWebhook_Message::getTimestamp() const {
    return m_timestamp;
}
void OAIWebhook_Message::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIWebhook_Message::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIWebhook_Message::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIMessage_Type OAIWebhook_Message::getType() const {
    return m_type;
}
void OAIWebhook_Message::setType(const OAIMessage_Type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWebhook_Message::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWebhook_Message::is_type_Valid() const{
    return m_type_isValid;
}

OAIWebhook_Video OAIWebhook_Message::getVideo() const {
    return m_video;
}
void OAIWebhook_Message::setVideo(const OAIWebhook_Video &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIWebhook_Message::is_video_Set() const{
    return m_video_isSet;
}

bool OAIWebhook_Message::is_video_Valid() const{
    return m_video_isValid;
}

OAIWebhook_Voice OAIWebhook_Message::getVoice() const {
    return m_voice;
}
void OAIWebhook_Message::setVoice(const OAIWebhook_Voice &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAIWebhook_Message::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAIWebhook_Message::is_voice_Valid() const{
    return m_voice_isValid;
}

bool OAIWebhook_Message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook_Message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
