/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDate_Time_Component.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDate_Time_Component::OAIDate_Time_Component(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDate_Time_Component::OAIDate_Time_Component() {
    this->initializeModel();
}

OAIDate_Time_Component::~OAIDate_Time_Component() {}

void OAIDate_Time_Component::initializeModel() {

    m_day_of_month_isSet = false;
    m_day_of_month_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_hour_isSet = false;
    m_hour_isValid = false;

    m_minute_isSet = false;
    m_minute_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIDate_Time_Component::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDate_Time_Component::fromJsonObject(QJsonObject json) {

    m_day_of_month_isValid = ::OpenAPI::fromJsonValue(m_day_of_month, json[QString("day_of_month")]);
    m_day_of_month_isSet = !json[QString("day_of_month")].isNull() && m_day_of_month_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("day_of_week")]);
    m_day_of_week_isSet = !json[QString("day_of_week")].isNull() && m_day_of_week_isValid;

    m_hour_isValid = ::OpenAPI::fromJsonValue(m_hour, json[QString("hour")]);
    m_hour_isSet = !json[QString("hour")].isNull() && m_hour_isValid;

    m_minute_isValid = ::OpenAPI::fromJsonValue(m_minute, json[QString("minute")]);
    m_minute_isSet = !json[QString("minute")].isNull() && m_minute_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIDate_Time_Component::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDate_Time_Component::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_month_isSet) {
        obj.insert(QString("day_of_month"), ::OpenAPI::toJsonValue(m_day_of_month));
    }
    if (m_day_of_week_isSet) {
        obj.insert(QString("day_of_week"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_hour_isSet) {
        obj.insert(QString("hour"), ::OpenAPI::toJsonValue(m_hour));
    }
    if (m_minute_isSet) {
        obj.insert(QString("minute"), ::OpenAPI::toJsonValue(m_minute));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIDate_Time_Component::getDayOfMonth() const {
    return m_day_of_month;
}
void OAIDate_Time_Component::setDayOfMonth(const qint32 &day_of_month) {
    m_day_of_month = day_of_month;
    m_day_of_month_isSet = true;
}

bool OAIDate_Time_Component::is_day_of_month_Set() const{
    return m_day_of_month_isSet;
}

bool OAIDate_Time_Component::is_day_of_month_Valid() const{
    return m_day_of_month_isValid;
}

qint32 OAIDate_Time_Component::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIDate_Time_Component::setDayOfWeek(const qint32 &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIDate_Time_Component::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIDate_Time_Component::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

qint32 OAIDate_Time_Component::getHour() const {
    return m_hour;
}
void OAIDate_Time_Component::setHour(const qint32 &hour) {
    m_hour = hour;
    m_hour_isSet = true;
}

bool OAIDate_Time_Component::is_hour_Set() const{
    return m_hour_isSet;
}

bool OAIDate_Time_Component::is_hour_Valid() const{
    return m_hour_isValid;
}

qint32 OAIDate_Time_Component::getMinute() const {
    return m_minute;
}
void OAIDate_Time_Component::setMinute(const qint32 &minute) {
    m_minute = minute;
    m_minute_isSet = true;
}

bool OAIDate_Time_Component::is_minute_Set() const{
    return m_minute_isSet;
}

bool OAIDate_Time_Component::is_minute_Valid() const{
    return m_minute_isValid;
}

qint32 OAIDate_Time_Component::getMonth() const {
    return m_month;
}
void OAIDate_Time_Component::setMonth(const qint32 &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIDate_Time_Component::is_month_Set() const{
    return m_month_isSet;
}

bool OAIDate_Time_Component::is_month_Valid() const{
    return m_month_isValid;
}

qint32 OAIDate_Time_Component::getYear() const {
    return m_year;
}
void OAIDate_Time_Component::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIDate_Time_Component::is_year_Set() const{
    return m_year_isSet;
}

bool OAIDate_Time_Component::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIDate_Time_Component::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDate_Time_Component::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
