/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_Type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_Type::OAIMessage_Type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_Type::OAIMessage_Type() {
    this->initializeModel();
}

OAIMessage_Type::~OAIMessage_Type() {}

void OAIMessage_Type::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMessage_Type::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMessage_Type::fromJson(QString jsonString) {
    
    if ( jsonString.compare("audio", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::AUDIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("contacts", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::CONTACTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("document", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::DOCUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hsm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::HSM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("image", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::IMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("location", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::LOCATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("text", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::TEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("video", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::VIDEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("voice", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::VOICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_Type::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMessage_Type::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMessage_Type::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMessage_Type::AUDIO:
            val = "audio";
            break;
        case eOAIMessage_Type::CONTACTS:
            val = "contacts";
            break;
        case eOAIMessage_Type::DOCUMENT:
            val = "document";
            break;
        case eOAIMessage_Type::HSM:
            val = "hsm";
            break;
        case eOAIMessage_Type::IMAGE:
            val = "image";
            break;
        case eOAIMessage_Type::LOCATION:
            val = "location";
            break;
        case eOAIMessage_Type::TEXT:
            val = "text";
            break;
        case eOAIMessage_Type::VIDEO:
            val = "video";
            break;
        case eOAIMessage_Type::VOICE:
            val = "voice";
            break;
        case eOAIMessage_Type::UNKNOWN:
            val = "unknown";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMessage_Type::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMessage_Type::eOAIMessage_Type OAIMessage_Type::getValue() const {
    return m_value;
}

void OAIMessage_Type::setValue(const OAIMessage_Type::eOAIMessage_Type& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMessage_Type::isSet() const {
    
    return m_value_isSet;
}

bool OAIMessage_Type::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
