/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationApi_H
#define OAI_OAIApplicationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication_Settings.h"
#include "OAIGet_Media_Providers_Response.h"
#include "OAIMedia_Provider.h"
#include "OAIResponse.h"
#include "OAISet_Shards_Request_Body.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationApi(const int timeOut = 0);
    ~OAIApplicationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  provider_name QString [required]
    */
    virtual void deleteMediaProviders(const QString &provider_name);


    virtual void getApplicationSettings();


    virtual void getMediaProviders();


    virtual void resetApplicationSettings();

    /**
    * @param[in]  oai_set_shards_request_body OAISet_Shards_Request_Body [required]
    */
    virtual void setShards(const OAISet_Shards_Request_Body &oai_set_shards_request_body);

    /**
    * @param[in]  oai_application_settings OAIApplication_Settings [required]
    */
    virtual void updateApplicationSettings(const OAIApplication_Settings &oai_application_settings);

    /**
    * @param[in]  oai_media_provider QList<OAIMedia_Provider> [required]
    */
    virtual void updateMediaProviders(const QList<OAIMedia_Provider> &oai_media_provider);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteMediaProvidersCallback(OAIHttpRequestWorker *worker);
    void getApplicationSettingsCallback(OAIHttpRequestWorker *worker);
    void getMediaProvidersCallback(OAIHttpRequestWorker *worker);
    void resetApplicationSettingsCallback(OAIHttpRequestWorker *worker);
    void setShardsCallback(OAIHttpRequestWorker *worker);
    void updateApplicationSettingsCallback(OAIHttpRequestWorker *worker);
    void updateMediaProvidersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteMediaProvidersSignal();
    void getApplicationSettingsSignal(OAIApplication_Settings summary);
    void getMediaProvidersSignal(OAIGet_Media_Providers_Response summary);
    void resetApplicationSettingsSignal();
    void setShardsSignal();
    void updateApplicationSettingsSignal(OAIResponse summary);
    void updateMediaProvidersSignal();


    void deleteMediaProvidersSignalFull(OAIHttpRequestWorker *worker);
    void getApplicationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIApplication_Settings summary);
    void getMediaProvidersSignalFull(OAIHttpRequestWorker *worker, OAIGet_Media_Providers_Response summary);
    void resetApplicationSettingsSignalFull(OAIHttpRequestWorker *worker);
    void setShardsSignalFull(OAIHttpRequestWorker *worker);
    void updateApplicationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void updateMediaProvidersSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteMediaProvidersSignalError() instead")
    void deleteMediaProvidersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMediaProvidersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationSettingsSignalError() instead")
    void getApplicationSettingsSignalE(OAIApplication_Settings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationSettingsSignalError(OAIApplication_Settings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaProvidersSignalError() instead")
    void getMediaProvidersSignalE(OAIGet_Media_Providers_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaProvidersSignalError(OAIGet_Media_Providers_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetApplicationSettingsSignalError() instead")
    void resetApplicationSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetApplicationSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setShardsSignalError() instead")
    void setShardsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setShardsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationSettingsSignalError() instead")
    void updateApplicationSettingsSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationSettingsSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMediaProvidersSignalError() instead")
    void updateMediaProvidersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateMediaProvidersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteMediaProvidersSignalErrorFull() instead")
    void deleteMediaProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMediaProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationSettingsSignalErrorFull() instead")
    void getApplicationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaProvidersSignalErrorFull() instead")
    void getMediaProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetApplicationSettingsSignalErrorFull() instead")
    void resetApplicationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetApplicationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setShardsSignalErrorFull() instead")
    void setShardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setShardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationSettingsSignalErrorFull() instead")
    void updateApplicationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMediaProvidersSignalErrorFull() instead")
    void updateMediaProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMediaProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
