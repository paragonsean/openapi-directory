/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook_Status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook_Status::OAIWebhook_Status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook_Status::OAIWebhook_Status() {
    this->initializeModel();
}

OAIWebhook_Status::~OAIWebhook_Status() {}

void OAIWebhook_Status::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_recipient_id_isSet = false;
    m_recipient_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIWebhook_Status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook_Status::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_recipient_id_isValid = ::OpenAPI::fromJsonValue(m_recipient_id, json[QString("recipient_id")]);
    m_recipient_id_isSet = !json[QString("recipient_id")].isNull() && m_recipient_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIWebhook_Status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook_Status::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_recipient_id_isSet) {
        obj.insert(QString("recipient_id"), ::OpenAPI::toJsonValue(m_recipient_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QList<OAIError> OAIWebhook_Status::getErrors() const {
    return m_errors;
}
void OAIWebhook_Status::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIWebhook_Status::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIWebhook_Status::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIWebhook_Status::getId() const {
    return m_id;
}
void OAIWebhook_Status::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook_Status::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook_Status::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhook_Status::getRecipientId() const {
    return m_recipient_id;
}
void OAIWebhook_Status::setRecipientId(const QString &recipient_id) {
    m_recipient_id = recipient_id;
    m_recipient_id_isSet = true;
}

bool OAIWebhook_Status::is_recipient_id_Set() const{
    return m_recipient_id_isSet;
}

bool OAIWebhook_Status::is_recipient_id_Valid() const{
    return m_recipient_id_isValid;
}

QString OAIWebhook_Status::getStatus() const {
    return m_status;
}
void OAIWebhook_Status::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWebhook_Status::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWebhook_Status::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWebhook_Status::getTimestamp() const {
    return m_timestamp;
}
void OAIWebhook_Status::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIWebhook_Status::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIWebhook_Status::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIWebhook_Status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook_Status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
