/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook_Location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook_Location::OAIWebhook_Location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook_Location::OAIWebhook_Location() {
    this->initializeModel();
}

OAIWebhook_Location::~OAIWebhook_Location() {}

void OAIWebhook_Location::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebhook_Location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook_Location::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebhook_Location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook_Location::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWebhook_Location::getAddress() const {
    return m_address;
}
void OAIWebhook_Location::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIWebhook_Location::is_address_Set() const{
    return m_address_isSet;
}

bool OAIWebhook_Location::is_address_Valid() const{
    return m_address_isValid;
}

double OAIWebhook_Location::getLatitude() const {
    return m_latitude;
}
void OAIWebhook_Location::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIWebhook_Location::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIWebhook_Location::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIWebhook_Location::getLongitude() const {
    return m_longitude;
}
void OAIWebhook_Location::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIWebhook_Location::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIWebhook_Location::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIWebhook_Location::getName() const {
    return m_name;
}
void OAIWebhook_Location::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhook_Location::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhook_Location::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWebhook_Location::getUrl() const {
    return m_url;
}
void OAIWebhook_Location::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhook_Location::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhook_Location::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebhook_Location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook_Location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
