/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_User_Request_Body.h"
#include "OAIDetailed_User_Response.h"
#include "OAILogin_Admin_Request_Body.h"
#include "OAIUpdate_User_Request_Body.h"
#include "OAIUser_Login_Response.h"
#include "OAIUser_Response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_user_request_body OAICreate_User_Request_Body [required]
    */
    virtual void createUser(const OAICreate_User_Request_Body &oai_create_user_request_body);

    /**
    * @param[in]  user_username QString [required]
    */
    virtual void deleteUser(const QString &user_username);

    /**
    * @param[in]  user_username QString [required]
    */
    virtual void getUser(const QString &user_username);

    /**
    * @param[in]  oai_login_admin_request_body OAILogin_Admin_Request_Body [optional]
    */
    virtual void loginUser(const ::OpenAPI::OptionalParam<OAILogin_Admin_Request_Body> &oai_login_admin_request_body = ::OpenAPI::OptionalParam<OAILogin_Admin_Request_Body>());


    virtual void logoutUser();

    /**
    * @param[in]  user_username QString [required]
    * @param[in]  oai_update_user_request_body OAIUpdate_User_Request_Body [required]
    */
    virtual void updateUser(const QString &user_username, const OAIUpdate_User_Request_Body &oai_update_user_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUserCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void loginUserCallback(OAIHttpRequestWorker *worker);
    void logoutUserCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUserSignal(OAIUser_Response summary);
    void deleteUserSignal(OAIUser_Response summary);
    void getUserSignal(OAIDetailed_User_Response summary);
    void loginUserSignal(OAIUser_Login_Response summary);
    void logoutUserSignal();
    void updateUserSignal(OAIUser_Response summary);


    void createUserSignalFull(OAIHttpRequestWorker *worker, OAIUser_Response summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker, OAIUser_Response summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIDetailed_User_Response summary);
    void loginUserSignalFull(OAIHttpRequestWorker *worker, OAIUser_Login_Response summary);
    void logoutUserSignalFull(OAIHttpRequestWorker *worker);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUser_Response summary);

    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(OAIUser_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(OAIUser_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(OAIUser_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(OAIUser_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIDetailed_User_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIDetailed_User_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginUserSignalError() instead")
    void loginUserSignalE(OAIUser_Login_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginUserSignalError(OAIUser_Login_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutUserSignalError() instead")
    void logoutUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logoutUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(OAIUser_Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(OAIUser_Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginUserSignalErrorFull() instead")
    void loginUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutUserSignalErrorFull() instead")
    void logoutUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
