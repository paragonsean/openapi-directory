/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_Response::OAIMessage_Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_Response::OAIMessage_Response() {
    this->initializeModel();
}

OAIMessage_Response::~OAIMessage_Response() {}

void OAIMessage_Response::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAIMessage_Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage_Response::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAIMessage_Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage_Response::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

QList<OAIError> OAIMessage_Response::getErrors() const {
    return m_errors;
}
void OAIMessage_Response::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIMessage_Response::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIMessage_Response::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIMeta OAIMessage_Response::getMeta() const {
    return m_meta;
}
void OAIMessage_Response::setMeta(const OAIMeta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIMessage_Response::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIMessage_Response::is_meta_Valid() const{
    return m_meta_isValid;
}

QList<OAIMessage> OAIMessage_Response::getMessages() const {
    return m_messages;
}
void OAIMessage_Response::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIMessage_Response::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIMessage_Response::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIMessage_Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage_Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
