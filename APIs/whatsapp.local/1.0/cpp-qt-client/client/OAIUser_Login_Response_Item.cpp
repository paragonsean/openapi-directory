/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_Login_Response_Item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_Login_Response_Item::OAIUser_Login_Response_Item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_Login_Response_Item::OAIUser_Login_Response_Item() {
    this->initializeModel();
}

OAIUser_Login_Response_Item::~OAIUser_Login_Response_Item() {}

void OAIUser_Login_Response_Item::initializeModel() {

    m_expires_after_isSet = false;
    m_expires_after_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIUser_Login_Response_Item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_Login_Response_Item::fromJsonObject(QJsonObject json) {

    m_expires_after_isValid = ::OpenAPI::fromJsonValue(m_expires_after, json[QString("expires_after")]);
    m_expires_after_isSet = !json[QString("expires_after")].isNull() && m_expires_after_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIUser_Login_Response_Item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_Login_Response_Item::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_after_isSet) {
        obj.insert(QString("expires_after"), ::OpenAPI::toJsonValue(m_expires_after));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QDateTime OAIUser_Login_Response_Item::getExpiresAfter() const {
    return m_expires_after;
}
void OAIUser_Login_Response_Item::setExpiresAfter(const QDateTime &expires_after) {
    m_expires_after = expires_after;
    m_expires_after_isSet = true;
}

bool OAIUser_Login_Response_Item::is_expires_after_Set() const{
    return m_expires_after_isSet;
}

bool OAIUser_Login_Response_Item::is_expires_after_Valid() const{
    return m_expires_after_isValid;
}

QString OAIUser_Login_Response_Item::getToken() const {
    return m_token;
}
void OAIUser_Login_Response_Item::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIUser_Login_Response_Item::is_token_Set() const{
    return m_token_isSet;
}

bool OAIUser_Login_Response_Item::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIUser_Login_Response_Item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_Login_Response_Item::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
