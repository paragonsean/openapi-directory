/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetProfileAboutResponse from '../model/GetProfileAboutResponse';
import GetProfilePhotoResponse from '../model/GetProfilePhotoResponse';
import ProfileAbout from '../model/ProfileAbout';

/**
* Profile service.
* @module api/ProfileApi
* @version 1.0
*/
export default class ProfileApi {

    /**
    * Constructs a new ProfileApi. 
    * @alias module:api/ProfileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProfileAbout operation.
     * @callback module:api/ProfileApi~getProfileAboutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfileAboutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-Profile-About
     * @param {module:api/ProfileApi~getProfileAboutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfileAboutResponse}
     */
    getProfileAbout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProfileAboutResponse;
      return this.apiClient.callApi(
        '/settings/profile/about', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfilePhoto operation.
     * @callback module:api/ProfileApi~getProfilePhotoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfilePhotoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-Profile-Photo
     * @param {Object} opts Optional parameters
     * @param {String} [format] 
     * @param {module:api/ProfileApi~getProfilePhotoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfilePhotoResponse}
     */
    getProfilePhoto(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'image/jpeg'];
      let returnType = GetProfilePhotoResponse;
      return this.apiClient.callApi(
        '/settings/profile/photo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfileAbout operation.
     * @callback module:api/ProfileApi~updateProfileAboutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update-Profile-About
     * @param {module:model/ProfileAbout} profileAbout 
     * @param {module:api/ProfileApi~updateProfileAboutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProfileAbout(profileAbout, callback) {
      let postBody = profileAbout;
      // verify the required parameter 'profileAbout' is set
      if (profileAbout === undefined || profileAbout === null) {
        throw new Error("Missing the required parameter 'profileAbout' when calling updateProfileAbout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settings/profile/about', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfilePhoto operation.
     * @callback module:api/ProfileApi~updateProfilePhotoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update-Profile-Photo
     * @param {File} file 
     * @param {module:api/ProfileApi~updateProfilePhotoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProfilePhoto(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling updateProfilePhoto");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'File': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settings/profile/photo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
