/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUserRequestBody from '../model/CreateUserRequestBody';
import DetailedUserResponse from '../model/DetailedUserResponse';
import LoginAdminRequestBody from '../model/LoginAdminRequestBody';
import UpdateUserRequestBody from '../model/UpdateUserRequestBody';
import UserLoginResponse from '../model/UserLoginResponse';
import UserResponse from '../model/UserResponse';

/**
* Users service.
* @module api/UsersApi
* @version 1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create-User
     * @param {module:model/CreateUserRequestBody} createUserRequestBody 
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    createUser(createUserRequestBody, callback) {
      let postBody = createUserRequestBody;
      // verify the required parameter 'createUserRequestBody' is set
      if (createUserRequestBody === undefined || createUserRequestBody === null) {
        throw new Error("Missing the required parameter 'createUserRequestBody' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete-User
     * @param {String} userUsername 
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    deleteUser(userUsername, callback) {
      let postBody = null;
      // verify the required parameter 'userUsername' is set
      if (userUsername === undefined || userUsername === null) {
        throw new Error("Missing the required parameter 'userUsername' when calling deleteUser");
      }

      let pathParams = {
        'UserUsername': userUsername
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{UserUsername}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-User
     * @param {String} userUsername 
     * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedUserResponse}
     */
    getUser(userUsername, callback) {
      let postBody = null;
      // verify the required parameter 'userUsername' is set
      if (userUsername === undefined || userUsername === null) {
        throw new Error("Missing the required parameter 'userUsername' when calling getUser");
      }

      let pathParams = {
        'UserUsername': userUsername
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetailedUserResponse;
      return this.apiClient.callApi(
        '/users/{UserUsername}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback module:api/UsersApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login-User
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginAdminRequestBody} [loginAdminRequestBody] 
     * @param {module:api/UsersApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLoginResponse}
     */
    loginUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['loginAdminRequestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserLoginResponse;
      return this.apiClient.callApi(
        '/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutUser operation.
     * @callback module:api/UsersApi~logoutUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout-User
     * @param {module:api/UsersApi~logoutUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logoutUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update-User
     * @param {String} userUsername 
     * @param {module:model/UpdateUserRequestBody} updateUserRequestBody 
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    updateUser(userUsername, updateUserRequestBody, callback) {
      let postBody = updateUserRequestBody;
      // verify the required parameter 'userUsername' is set
      if (userUsername === undefined || userUsername === null) {
        throw new Error("Missing the required parameter 'userUsername' when calling updateUser");
      }
      // verify the required parameter 'updateUserRequestBody' is set
      if (updateUserRequestBody === undefined || updateUserRequestBody === null) {
        throw new Error("Missing the required parameter 'updateUserRequestBody' when calling updateUser");
      }

      let pathParams = {
        'UserUsername': userUsername
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{UserUsername}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
