/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MarkMessageAsReadRequestBody from '../model/MarkMessageAsReadRequestBody';
import MessageResponse from '../model/MessageResponse';
import SendMessageRequestBody from '../model/SendMessageRequestBody';

/**
* Messages service.
* @module api/MessagesApi
* @version 1.0
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the markMessageAsRead operation.
     * @callback module:api/MessagesApi~markMessageAsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark-Message-As-Read
     * @param {String} messageID Message ID from Webhook
     * @param {module:model/MarkMessageAsReadRequestBody} markMessageAsReadRequestBody 
     * @param {module:api/MessagesApi~markMessageAsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markMessageAsRead(messageID, markMessageAsReadRequestBody, callback) {
      let postBody = markMessageAsReadRequestBody;
      // verify the required parameter 'messageID' is set
      if (messageID === undefined || messageID === null) {
        throw new Error("Missing the required parameter 'messageID' when calling markMessageAsRead");
      }
      // verify the required parameter 'markMessageAsReadRequestBody' is set
      if (markMessageAsReadRequestBody === undefined || markMessageAsReadRequestBody === null) {
        throw new Error("Missing the required parameter 'markMessageAsReadRequestBody' when calling markMessageAsRead");
      }

      let pathParams = {
        'MessageID': messageID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/messages/{MessageID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessage operation.
     * @callback module:api/MessagesApi~sendMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send-Message
     * @param {module:model/SendMessageRequestBody} sendMessageRequestBody 
     * @param {module:api/MessagesApi~sendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    sendMessage(sendMessageRequestBody, callback) {
      let postBody = sendMessageRequestBody;
      // verify the required parameter 'sendMessageRequestBody' is set
      if (sendMessageRequestBody === undefined || sendMessageRequestBody === null) {
        throw new Error("Missing the required parameter 'sendMessageRequestBody' when calling sendMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageResponse;
      return this.apiClient.callApi(
        '/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
