/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupSettingsRequestBody from '../model/BackupSettingsRequestBody';
import BackupSettingsResponse from '../model/BackupSettingsResponse';
import RestoreSettingsRequestBody from '../model/RestoreSettingsRequestBody';

/**
* BackupRestore service.
* @module api/BackupRestoreApi
* @version 1.0
*/
export default class BackupRestoreApi {

    /**
    * Constructs a new BackupRestoreApi. 
    * @alias module:api/BackupRestoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backupSettings operation.
     * @callback module:api/BackupRestoreApi~backupSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Backup-Settings
     * @param {module:model/BackupSettingsRequestBody} backupSettingsRequestBody 
     * @param {module:api/BackupRestoreApi~backupSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupSettingsResponse}
     */
    backupSettings(backupSettingsRequestBody, callback) {
      let postBody = backupSettingsRequestBody;
      // verify the required parameter 'backupSettingsRequestBody' is set
      if (backupSettingsRequestBody === undefined || backupSettingsRequestBody === null) {
        throw new Error("Missing the required parameter 'backupSettingsRequestBody' when calling backupSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupSettingsResponse;
      return this.apiClient.callApi(
        '/settings/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreSettings operation.
     * @callback module:api/BackupRestoreApi~restoreSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore-Settings
     * @param {module:model/RestoreSettingsRequestBody} restoreSettingsRequestBody 
     * @param {module:api/BackupRestoreApi~restoreSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restoreSettings(restoreSettingsRequestBody, callback) {
      let postBody = restoreSettingsRequestBody;
      // verify the required parameter 'restoreSettingsRequestBody' is set
      if (restoreSettingsRequestBody === undefined || restoreSettingsRequestBody === null) {
        throw new Error("Missing the required parameter 'restoreSettingsRequestBody' when calling restoreSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settings/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
