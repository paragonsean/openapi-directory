/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGroupRequestBody from '../model/CreateGroupRequestBody';
import GroupAdminRequestBody from '../model/GroupAdminRequestBody';
import GroupInviteResponse from '../model/GroupInviteResponse';
import GroupResponse from '../model/GroupResponse';
import GroupsResponse from '../model/GroupsResponse';
import RemoveGroupParticipantRequestBody from '../model/RemoveGroupParticipantRequestBody';
import UpdateGroupInfoRequestBody from '../model/UpdateGroupInfoRequestBody';

/**
* Groups service.
* @module api/GroupsApi
* @version 1.0
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/GroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create-Group
     * @param {module:model/CreateGroupRequestBody} createGroupRequestBody 
     * @param {module:api/GroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupsResponse}
     */
    createGroup(createGroupRequestBody, callback) {
      let postBody = createGroupRequestBody;
      // verify the required parameter 'createGroupRequestBody' is set
      if (createGroupRequestBody === undefined || createGroupRequestBody === null) {
        throw new Error("Missing the required parameter 'createGroupRequestBody' when calling createGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GroupsResponse;
      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupIcon operation.
     * @callback module:api/GroupsApi~deleteGroupIconCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete-Group-Icon
     * @param {String} groupId 
     * @param {File} file 
     * @param {module:api/GroupsApi~deleteGroupIconCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupIcon(groupId, file, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroupIcon");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling deleteGroupIcon");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'File': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}/icon', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupInvite operation.
     * @callback module:api/GroupsApi~deleteGroupInviteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete-Group-Invite
     * @param {String} groupId 
     * @param {module:api/GroupsApi~deleteGroupInviteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupInvite(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroupInvite");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}/invite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demoteGroupAdmin operation.
     * @callback module:api/GroupsApi~demoteGroupAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Demote-Group-Admin
     * @param {String} groupId 
     * @param {module:model/GroupAdminRequestBody} groupAdminRequestBody 
     * @param {module:api/GroupsApi~demoteGroupAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    demoteGroupAdmin(groupId, groupAdminRequestBody, callback) {
      let postBody = groupAdminRequestBody;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling demoteGroupAdmin");
      }
      // verify the required parameter 'groupAdminRequestBody' is set
      if (groupAdminRequestBody === undefined || groupAdminRequestBody === null) {
        throw new Error("Missing the required parameter 'groupAdminRequestBody' when calling demoteGroupAdmin");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}/admins', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllGroups operation.
     * @callback module:api/GroupsApi~getAllGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-All-Groups
     * @param {module:api/GroupsApi~getAllGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupsResponse}
     */
    getAllGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupsResponse;
      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupIconBinary operation.
     * @callback module:api/GroupsApi~getGroupIconBinaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-Group-Icon-Binary
     * @param {String} groupId 
     * @param {module:api/GroupsApi~getGroupIconBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGroupIconBinary(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupIconBinary");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}/icon', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupInfo operation.
     * @callback module:api/GroupsApi~getGroupInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-Group-Info
     * @param {String} groupId 
     * @param {module:api/GroupsApi~getGroupInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupResponse}
     */
    getGroupInfo(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupInfo");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResponse;
      return this.apiClient.callApi(
        '/groups/{GroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupInvite operation.
     * @callback module:api/GroupsApi~getGroupInviteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupInviteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-Group-Invite
     * @param {String} groupId 
     * @param {module:api/GroupsApi~getGroupInviteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupInviteResponse}
     */
    getGroupInvite(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupInvite");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupInviteResponse;
      return this.apiClient.callApi(
        '/groups/{GroupId}/invite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaveGroup operation.
     * @callback module:api/GroupsApi~leaveGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave-Group
     * @param {String} groupId 
     * @param {module:api/GroupsApi~leaveGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaveGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling leaveGroup");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}/leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promoteToGroupAdmin operation.
     * @callback module:api/GroupsApi~promoteToGroupAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote-To-Group-Admin
     * @param {String} groupId 
     * @param {module:model/GroupAdminRequestBody} groupAdminRequestBody 
     * @param {module:api/GroupsApi~promoteToGroupAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    promoteToGroupAdmin(groupId, groupAdminRequestBody, callback) {
      let postBody = groupAdminRequestBody;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling promoteToGroupAdmin");
      }
      // verify the required parameter 'groupAdminRequestBody' is set
      if (groupAdminRequestBody === undefined || groupAdminRequestBody === null) {
        throw new Error("Missing the required parameter 'groupAdminRequestBody' when calling promoteToGroupAdmin");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}/admins', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroupParticipant operation.
     * @callback module:api/GroupsApi~removeGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove-Group-Participant
     * @param {String} groupId 
     * @param {module:model/RemoveGroupParticipantRequestBody} removeGroupParticipantRequestBody 
     * @param {module:api/GroupsApi~removeGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGroupParticipant(groupId, removeGroupParticipantRequestBody, callback) {
      let postBody = removeGroupParticipantRequestBody;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling removeGroupParticipant");
      }
      // verify the required parameter 'removeGroupParticipantRequestBody' is set
      if (removeGroupParticipantRequestBody === undefined || removeGroupParticipantRequestBody === null) {
        throw new Error("Missing the required parameter 'removeGroupParticipantRequestBody' when calling removeGroupParticipant");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}/participants', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setGroupIcon operation.
     * @callback module:api/GroupsApi~setGroupIconCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set-Group-Icon
     * @param {String} groupId 
     * @param {File} file 
     * @param {module:api/GroupsApi~setGroupIconCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setGroupIcon(groupId, file, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling setGroupIcon");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling setGroupIcon");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'File': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}/icon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupInfo operation.
     * @callback module:api/GroupsApi~updateGroupInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update-Group-Info
     * @param {String} groupId 
     * @param {module:model/UpdateGroupInfoRequestBody} updateGroupInfoRequestBody 
     * @param {module:api/GroupsApi~updateGroupInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupInfo(groupId, updateGroupInfoRequestBody, callback) {
      let postBody = updateGroupInfoRequestBody;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateGroupInfo");
      }
      // verify the required parameter 'updateGroupInfoRequestBody' is set
      if (updateGroupInfoRequestBody === undefined || updateGroupInfoRequestBody === null) {
        throw new Error("Missing the required parameter 'updateGroupInfoRequestBody' when calling updateGroupInfo");
      }

      let pathParams = {
        'GroupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{GroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
