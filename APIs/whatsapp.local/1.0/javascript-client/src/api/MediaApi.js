/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UploadMediaResponse from '../model/UploadMediaResponse';

/**
* Media service.
* @module api/MediaApi
* @version 1.0
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMedia operation.
     * @callback module:api/MediaApi~deleteMediaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete-Media
     * @param {String} mediaId 
     * @param {module:api/MediaApi~deleteMediaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMedia(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling deleteMedia");
      }

      let pathParams = {
        'MediaId': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/{MediaId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadMedia operation.
     * @callback module:api/MediaApi~downloadMediaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download-Media
     * @param {String} mediaId 
     * @param {module:api/MediaApi~downloadMediaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadMedia(mediaId, callback) {
      let postBody = null;
      // verify the required parameter 'mediaId' is set
      if (mediaId === undefined || mediaId === null) {
        throw new Error("Missing the required parameter 'mediaId' when calling downloadMedia");
      }

      let pathParams = {
        'MediaId': mediaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/media/{MediaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMedia operation.
     * @callback module:api/MediaApi~uploadMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadMediaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload-Media
     * @param {File} body 
     * @param {module:api/MediaApi~uploadMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadMediaResponse}
     */
    uploadMedia(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadMedia");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/msword', 'application/pdf', 'application/vnd.ms-excel', 'application/vnd.ms-powerpoint', 'audio/acc', 'audio/amr', 'audio/mp4', 'audio/mpeg', 'audio/ogg', 'codecs=opus', 'image/jpeg', 'image/png', 'text/plain', 'video/mp4'];
      let accepts = ['application/json'];
      let returnType = UploadMediaResponse;
      return this.apiClient.callApi(
        '/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
