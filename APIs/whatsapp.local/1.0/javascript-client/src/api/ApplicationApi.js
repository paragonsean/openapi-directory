/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationSettings from '../model/ApplicationSettings';
import GetMediaProvidersResponse from '../model/GetMediaProvidersResponse';
import MediaProvider from '../model/MediaProvider';
import Response from '../model/Response';
import SetShardsRequestBody from '../model/SetShardsRequestBody';

/**
* Application service.
* @module api/ApplicationApi
* @version 1.0
*/
export default class ApplicationApi {

    /**
    * Constructs a new ApplicationApi. 
    * @alias module:api/ApplicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMediaProviders operation.
     * @callback module:api/ApplicationApi~deleteMediaProvidersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete-Media-Providers
     * @param {String} providerName Provider Name
     * @param {module:api/ApplicationApi~deleteMediaProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMediaProviders(providerName, callback) {
      let postBody = null;
      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling deleteMediaProviders");
      }

      let pathParams = {
        'ProviderName': providerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settings/application/media/providers/{ProviderName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationSettings operation.
     * @callback module:api/ApplicationApi~getApplicationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-Application-Settings
     * @param {module:api/ApplicationApi~getApplicationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationSettings}
     */
    getApplicationSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationSettings;
      return this.apiClient.callApi(
        '/settings/application', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaProviders operation.
     * @callback module:api/ApplicationApi~getMediaProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMediaProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get-Media-Providers
     * @param {module:api/ApplicationApi~getMediaProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMediaProvidersResponse}
     */
    getMediaProviders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMediaProvidersResponse;
      return this.apiClient.callApi(
        '/settings/application/media/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetApplicationSettings operation.
     * @callback module:api/ApplicationApi~resetApplicationSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset-Application-Settings
     * @param {module:api/ApplicationApi~resetApplicationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetApplicationSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settings/application', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setShards operation.
     * @callback module:api/ApplicationApi~setShardsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set-Shards
     * @param {module:model/SetShardsRequestBody} setShardsRequestBody 
     * @param {module:api/ApplicationApi~setShardsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setShards(setShardsRequestBody, callback) {
      let postBody = setShardsRequestBody;
      // verify the required parameter 'setShardsRequestBody' is set
      if (setShardsRequestBody === undefined || setShardsRequestBody === null) {
        throw new Error("Missing the required parameter 'setShardsRequestBody' when calling setShards");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/shards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplicationSettings operation.
     * @callback module:api/ApplicationApi~updateApplicationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update-Application-Settings
     * If a field is not present in the request, no change is made to that setting. For example, if on_call_pager is not sent with the request, the existing configuration for on_call_pager is unchanged.
     * @param {module:model/ApplicationSettings} applicationSettings 
     * @param {module:api/ApplicationApi~updateApplicationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    updateApplicationSettings(applicationSettings, callback) {
      let postBody = applicationSettings;
      // verify the required parameter 'applicationSettings' is set
      if (applicationSettings === undefined || applicationSettings === null) {
        throw new Error("Missing the required parameter 'applicationSettings' when calling updateApplicationSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/settings/application', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMediaProviders operation.
     * @callback module:api/ApplicationApi~updateMediaProvidersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update-Media-Providers
     * @param {Array.<module:model/MediaProvider>} mediaProvider 
     * @param {module:api/ApplicationApi~updateMediaProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMediaProviders(mediaProvider, callback) {
      let postBody = mediaProvider;
      // verify the required parameter 'mediaProvider' is set
      if (mediaProvider === undefined || mediaProvider === null) {
        throw new Error("Missing the required parameter 'mediaProvider' when calling updateMediaProviders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settings/application/media/providers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
