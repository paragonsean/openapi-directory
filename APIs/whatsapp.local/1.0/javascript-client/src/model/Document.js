/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentById from './DocumentById';
import DocumentByProvider from './DocumentByProvider';
import Provider from './Provider';

/**
 * The Document model module.
 * @module model/Document
 * @version 1.0
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * The media object containing a document
     * @alias module:model/Document
     * @param {(module:model/DocumentById|module:model/DocumentByProvider)} instance The actual instance to initialize Document.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "DocumentById") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentById.validateJSON(instance); // throw an exception if no match
                // create DocumentById from JS object
                this.actualInstance = DocumentById.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentById
            errorMessages.push("Failed to construct DocumentById: " + err)
        }

        try {
            if (typeof instance === "DocumentByProvider") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentByProvider.validateJSON(instance); // throw an exception if no match
                // create DocumentByProvider from JS object
                this.actualInstance = DocumentByProvider.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentByProvider
            errorMessages.push("Failed to construct DocumentByProvider: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `Document` with oneOf schemas DocumentById, DocumentByProvider. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `Document` with oneOf schemas DocumentById, DocumentByProvider. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        return new Document(data);
    }

    /**
     * Gets the actual instance, which can be <code>DocumentById</code>, <code>DocumentByProvider</code>.
     * @return {(module:model/DocumentById|module:model/DocumentByProvider)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>DocumentById</code>, <code>DocumentByProvider</code>.
     * @param {(module:model/DocumentById|module:model/DocumentByProvider)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = Document.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of Document from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/Document} An instance of Document.
     */
    static fromJSON = function(json_string){
        return Document.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} caption
 */
Document.prototype['caption'] = undefined;

/**
 * @member {String} filename
 */
Document.prototype['filename'] = undefined;

/**
 * @member {String} id
 */
Document.prototype['id'] = undefined;

/**
 * @member {String} link
 */
Document.prototype['link'] = undefined;

/**
 * @member {module:model/Provider} provider
 */
Document.prototype['provider'] = undefined;


Document.OneOf = ["DocumentById", "DocumentByProvider"];

export default Document;

