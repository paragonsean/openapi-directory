/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Audio from './Audio';
import Contact from './Contact';
import Document from './Document';
import Hsm from './Hsm';
import Image from './Image';
import Location from './Location';
import MessageType from './MessageType';
import Text from './Text';
import Video from './Video';

/**
 * The SendMessageRequestBody model module.
 * @module model/SendMessageRequestBody
 * @version 1.0
 */
class SendMessageRequestBody {
    /**
     * Constructs a new <code>SendMessageRequestBody</code>.
     * @alias module:model/SendMessageRequestBody
     * @param to {String} When recipient_type is individual, this field is the WhatsApp ID (phone number) returned from contacts endpoint. When recipient_type is group, this field is the WhatsApp group ID.
     */
    constructor(to) { 
        
        SendMessageRequestBody.initialize(this, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, to) { 
        obj['recipient_type'] = 'individual';
        obj['to'] = to;
    }

    /**
     * Constructs a <code>SendMessageRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendMessageRequestBody} obj Optional instance to populate.
     * @return {module:model/SendMessageRequestBody} The populated <code>SendMessageRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendMessageRequestBody();

            if (data.hasOwnProperty('audio')) {
                obj['audio'] = Audio.constructFromObject(data['audio']);
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [Contact]);
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = Document.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('hsm')) {
                obj['hsm'] = Hsm.constructFromObject(data['hsm']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('preview_url')) {
                obj['preview_url'] = ApiClient.convertToType(data['preview_url'], 'Boolean');
            }
            if (data.hasOwnProperty('recipient_type')) {
                obj['recipient_type'] = ApiClient.convertToType(data['recipient_type'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = Text.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = MessageType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = Video.constructFromObject(data['video']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendMessageRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendMessageRequestBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendMessageRequestBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `audio`
        if (data['audio']) { // data not null
          Audio.validateJSON(data['audio']);
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                Contact.validateJSON(item);
            };
        }
        // validate the optional field `document`
        if (data['document']) { // data not null
          Document.validateJSON(data['document']);
        }
        // validate the optional field `hsm`
        if (data['hsm']) { // data not null
          Hsm.validateJSON(data['hsm']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['recipient_type'] && !(typeof data['recipient_type'] === 'string' || data['recipient_type'] instanceof String)) {
            throw new Error("Expected the field `recipient_type` to be a primitive type in the JSON string but got " + data['recipient_type']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          Text.validateJSON(data['text']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // validate the optional field `video`
        if (data['video']) { // data not null
          Video.validateJSON(data['video']);
        }

        return true;
    }


}

SendMessageRequestBody.RequiredProperties = ["to"];

/**
 * @member {module:model/Audio} audio
 */
SendMessageRequestBody.prototype['audio'] = undefined;

/**
 * 
 * @member {Array.<module:model/Contact>} contacts
 */
SendMessageRequestBody.prototype['contacts'] = undefined;

/**
 * @member {module:model/Document} document
 */
SendMessageRequestBody.prototype['document'] = undefined;

/**
 * @member {module:model/Hsm} hsm
 */
SendMessageRequestBody.prototype['hsm'] = undefined;

/**
 * @member {module:model/Image} image
 */
SendMessageRequestBody.prototype['image'] = undefined;

/**
 * @member {module:model/Location} location
 */
SendMessageRequestBody.prototype['location'] = undefined;

/**
 * Specifying preview_url in the request is optional when not including a URL in your message. To include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://. For more information, see the Sending URLs in Text Messages section.
 * @member {Boolean} preview_url
 */
SendMessageRequestBody.prototype['preview_url'] = undefined;

/**
 * Determines whether the recipient is an individual or a group Specifying recipient_type in the request is optional when the value is individual. However, recipient_type is required when using group. If sending a text message to a group, see the Sending Group Messages documentation.
 * @member {module:model/SendMessageRequestBody.RecipientTypeEnum} recipient_type
 * @default 'individual'
 */
SendMessageRequestBody.prototype['recipient_type'] = 'individual';

/**
 * @member {module:model/Text} text
 */
SendMessageRequestBody.prototype['text'] = undefined;

/**
 * When recipient_type is individual, this field is the WhatsApp ID (phone number) returned from contacts endpoint. When recipient_type is group, this field is the WhatsApp group ID.
 * @member {String} to
 */
SendMessageRequestBody.prototype['to'] = undefined;

/**
 * @member {Object} ttl
 */
SendMessageRequestBody.prototype['ttl'] = undefined;

/**
 * @member {module:model/MessageType} type
 */
SendMessageRequestBody.prototype['type'] = undefined;

/**
 * @member {module:model/Video} video
 */
SendMessageRequestBody.prototype['video'] = undefined;





/**
 * Allowed values for the <code>recipient_type</code> property.
 * @enum {String}
 * @readonly
 */
SendMessageRequestBody['RecipientTypeEnum'] = {

    /**
     * value: "individual"
     * @const
     */
    "individual": "individual",

    /**
     * value: "group"
     * @const
     */
    "group": "group"
};



export default SendMessageRequestBody;

