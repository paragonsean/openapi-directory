/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Provider from './Provider';

/**
 * The ImageByProvider model module.
 * @module model/ImageByProvider
 * @version 1.0
 */
class ImageByProvider {
    /**
     * Constructs a new <code>ImageByProvider</code>.
     * @alias module:model/ImageByProvider
     * @param caption {String} 
     * @param link {String} 
     * @param provider {module:model/Provider} 
     */
    constructor(caption, link, provider) { 
        
        ImageByProvider.initialize(this, caption, link, provider);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, caption, link, provider) { 
        obj['caption'] = caption;
        obj['link'] = link;
        obj['provider'] = provider;
    }

    /**
     * Constructs a <code>ImageByProvider</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageByProvider} obj Optional instance to populate.
     * @return {module:model/ImageByProvider} The populated <code>ImageByProvider</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageByProvider();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = Provider.constructFromObject(data['provider']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageByProvider</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageByProvider</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageByProvider.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          Provider.validateJSON(data['provider']);
        }

        return true;
    }


}

ImageByProvider.RequiredProperties = ["caption", "link", "provider"];

/**
 * @member {String} caption
 */
ImageByProvider.prototype['caption'] = undefined;

/**
 * @member {String} link
 */
ImageByProvider.prototype['link'] = undefined;

/**
 * @member {module:model/Provider} provider
 */
ImageByProvider.prototype['provider'] = undefined;






export default ImageByProvider;

