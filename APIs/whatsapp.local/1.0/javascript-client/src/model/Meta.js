/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Meta model module.
 * @module model/Meta
 * @version 1.0
 */
class Meta {
    /**
     * Constructs a new <code>Meta</code>.
     * Contains generic information such as WhatsApp Business API Client version.
     * @alias module:model/Meta
     */
    constructor() { 
        
        Meta.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Meta</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Meta} obj Optional instance to populate.
     * @return {module:model/Meta} The populated <code>Meta</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Meta();

            if (data.hasOwnProperty('api_status')) {
                obj['api_status'] = ApiClient.convertToType(data['api_status'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Meta</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Meta</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['api_status'] && !(typeof data['api_status'] === 'string' || data['api_status'] instanceof String)) {
            throw new Error("Expected the field `api_status` to be a primitive type in the JSON string but got " + data['api_status']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/Meta.ApiStatusEnum} api_status
 */
Meta.prototype['api_status'] = undefined;

/**
 * @member {String} version
 */
Meta.prototype['version'] = undefined;





/**
 * Allowed values for the <code>api_status</code> property.
 * @enum {String}
 * @readonly
 */
Meta['ApiStatusEnum'] = {

    /**
     * value: "deprecated"
     * @const
     */
    "deprecated": "deprecated",

    /**
     * value: "experimental"
     * @const
     */
    "experimental": "experimental",

    /**
     * value: "stable"
     * @const
     */
    "stable": "stable"
};



export default Meta;

