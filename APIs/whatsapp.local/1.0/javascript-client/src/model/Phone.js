/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Phone model module.
 * @module model/Phone
 * @version 1.0
 */
class Phone {
    /**
     * Constructs a new <code>Phone</code>.
     * @alias module:model/Phone
     */
    constructor() { 
        
        Phone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Phone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Phone} obj Optional instance to populate.
     * @return {module:model/Phone} The populated <code>Phone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Phone();

            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('wa_id')) {
                obj['wa_id'] = ApiClient.convertToType(data['wa_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Phone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Phone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['wa_id'] && !(typeof data['wa_id'] === 'string' || data['wa_id'] instanceof String)) {
            throw new Error("Expected the field `wa_id` to be a primitive type in the JSON string but got " + data['wa_id']);
        }

        return true;
    }


}



/**
 * @member {String} phone
 */
Phone.prototype['phone'] = undefined;

/**
 * Standard Values: CELL, MAIN, IPHONE, HOME, WORK
 * @member {String} type
 */
Phone.prototype['type'] = undefined;

/**
 * WhatsApp ID
 * @member {String} wa_id
 */
Phone.prototype['wa_id'] = undefined;






export default Phone;

