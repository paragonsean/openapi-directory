/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Media from './Media';
import Webhooks from './Webhooks';

/**
 * The ApplicationSettings model module.
 * @module model/ApplicationSettings
 * @version 1.0
 */
class ApplicationSettings {
    /**
     * Constructs a new <code>ApplicationSettings</code>.
     * @alias module:model/ApplicationSettings
     */
    constructor() { 
        
        ApplicationSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['callback_backoff_delay_ms'] = '3000';
        obj['callback_persist'] = true;
        obj['heartbeat_interval'] = 5;
        obj['max_callback_backoff_delay_ms'] = '900000';
        obj['pass_through'] = true;
        obj['sent_status'] = false;
        obj['unhealthy_interval'] = 30;
    }

    /**
     * Constructs a <code>ApplicationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationSettings} obj Optional instance to populate.
     * @return {module:model/ApplicationSettings} The populated <code>ApplicationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationSettings();

            if (data.hasOwnProperty('callback_backoff_delay_ms')) {
                obj['callback_backoff_delay_ms'] = ApiClient.convertToType(data['callback_backoff_delay_ms'], 'String');
            }
            if (data.hasOwnProperty('callback_persist')) {
                obj['callback_persist'] = ApiClient.convertToType(data['callback_persist'], 'Boolean');
            }
            if (data.hasOwnProperty('heartbeat_interval')) {
                obj['heartbeat_interval'] = ApiClient.convertToType(data['heartbeat_interval'], 'Number');
            }
            if (data.hasOwnProperty('max_callback_backoff_delay_ms')) {
                obj['max_callback_backoff_delay_ms'] = ApiClient.convertToType(data['max_callback_backoff_delay_ms'], 'String');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = Media.constructFromObject(data['media']);
            }
            if (data.hasOwnProperty('on_call_pager')) {
                obj['on_call_pager'] = ApiClient.convertToType(data['on_call_pager'], 'String');
            }
            if (data.hasOwnProperty('pass_through')) {
                obj['pass_through'] = ApiClient.convertToType(data['pass_through'], 'Boolean');
            }
            if (data.hasOwnProperty('sent_status')) {
                obj['sent_status'] = ApiClient.convertToType(data['sent_status'], 'Boolean');
            }
            if (data.hasOwnProperty('unhealthy_interval')) {
                obj['unhealthy_interval'] = ApiClient.convertToType(data['unhealthy_interval'], 'Number');
            }
            if (data.hasOwnProperty('webhooks')) {
                obj['webhooks'] = Webhooks.constructFromObject(data['webhooks']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callback_backoff_delay_ms'] && !(typeof data['callback_backoff_delay_ms'] === 'string' || data['callback_backoff_delay_ms'] instanceof String)) {
            throw new Error("Expected the field `callback_backoff_delay_ms` to be a primitive type in the JSON string but got " + data['callback_backoff_delay_ms']);
        }
        // ensure the json data is a string
        if (data['max_callback_backoff_delay_ms'] && !(typeof data['max_callback_backoff_delay_ms'] === 'string' || data['max_callback_backoff_delay_ms'] instanceof String)) {
            throw new Error("Expected the field `max_callback_backoff_delay_ms` to be a primitive type in the JSON string but got " + data['max_callback_backoff_delay_ms']);
        }
        // validate the optional field `media`
        if (data['media']) { // data not null
          Media.validateJSON(data['media']);
        }
        // ensure the json data is a string
        if (data['on_call_pager'] && !(typeof data['on_call_pager'] === 'string' || data['on_call_pager'] instanceof String)) {
            throw new Error("Expected the field `on_call_pager` to be a primitive type in the JSON string but got " + data['on_call_pager']);
        }
        // validate the optional field `webhooks`
        if (data['webhooks']) { // data not null
          Webhooks.validateJSON(data['webhooks']);
        }

        return true;
    }


}



/**
 * Backoff delay for a failed callback in milliseconds This setting is used to configure the amount of time the backoff delays before retrying a failed callback. The backoff delay increases linearly by this value each time a callback fails to get a HTTPS 200 OK response. The backoff delay is capped by the max_callback_backoff_delay_ms setting.
 * @member {String} callback_backoff_delay_ms
 * @default '3000'
 */
ApplicationSettings.prototype['callback_backoff_delay_ms'] = '3000';

/**
 * Stores callbacks on disk until they are successfully acknowledged by the Webhook or not. Restart required.
 * @member {Boolean} callback_persist
 * @default true
 */
ApplicationSettings.prototype['callback_persist'] = true;

/**
 * Multiconnect: Interval of the Master node monitoring of Coreapp nodes in seconds
 * @member {Number} heartbeat_interval
 * @default 5
 */
ApplicationSettings.prototype['heartbeat_interval'] = 5;

/**
 * Maximum delay for a failed callback in milliseconds
 * @member {String} max_callback_backoff_delay_ms
 * @default '900000'
 */
ApplicationSettings.prototype['max_callback_backoff_delay_ms'] = '900000';

/**
 * @member {module:model/Media} media
 */
ApplicationSettings.prototype['media'] = undefined;

/**
 * Set to valid WhatsApp Group with users who wish to see alerts for critical errors and messages.
 * @member {String} on_call_pager
 */
ApplicationSettings.prototype['on_call_pager'] = undefined;

/**
 * When true, removes messages from the local database after they are delivered to or read by the recipient. When false, saves all messages on local storage until they are explicitly deleted. When messages are sent, they are stored in a local database. This database is used as the application's history. Since the business keeps its own history, you can specify whether you want message pass_through or not. Restart required.
 * @member {Boolean} pass_through
 * @default true
 */
ApplicationSettings.prototype['pass_through'] = true;

/**
 * Receive a notification that a message is sent to server. When true, you will receive a message indicating that a message has been sent. If false (default), you will not receive notification.
 * @member {Boolean} sent_status
 * @default false
 */
ApplicationSettings.prototype['sent_status'] = false;

/**
 * Multiconnect: Maximum amount of seconds a Master node waits for a Coreapp node to respond to a heartbeat before considering it unhealthy and starting the failover process.
 * @member {Number} unhealthy_interval
 * @default 30
 */
ApplicationSettings.prototype['unhealthy_interval'] = 30;

/**
 * @member {module:model/Webhooks} webhooks
 */
ApplicationSettings.prototype['webhooks'] = undefined;






export default ApplicationSettings;

