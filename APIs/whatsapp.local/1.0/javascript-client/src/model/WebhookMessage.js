/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';
import Error from './Error';
import MessageContext from './MessageContext';
import MessageType from './MessageType';
import WebhookAudio from './WebhookAudio';
import WebhookDocument from './WebhookDocument';
import WebhookImage from './WebhookImage';
import WebhookLocation from './WebhookLocation';
import WebhookSystem from './WebhookSystem';
import WebhookText from './WebhookText';
import WebhookVideo from './WebhookVideo';
import WebhookVoice from './WebhookVoice';

/**
 * The WebhookMessage model module.
 * @module model/WebhookMessage
 * @version 1.0
 */
class WebhookMessage {
    /**
     * Constructs a new <code>WebhookMessage</code>.
     * 
     * @alias module:model/WebhookMessage
     */
    constructor() { 
        
        WebhookMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebhookMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookMessage} obj Optional instance to populate.
     * @return {module:model/WebhookMessage} The populated <code>WebhookMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookMessage();

            if (data.hasOwnProperty('audio')) {
                obj['audio'] = WebhookAudio.constructFromObject(data['audio']);
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [Contact]);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = MessageContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = WebhookDocument.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = WebhookImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = WebhookLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('system')) {
                obj['system'] = WebhookSystem.constructFromObject(data['system']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = WebhookText.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = MessageType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = WebhookVideo.constructFromObject(data['video']);
            }
            if (data.hasOwnProperty('voice')) {
                obj['voice'] = WebhookVoice.constructFromObject(data['voice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookMessage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `audio`
        if (data['audio']) { // data not null
          WebhookAudio.validateJSON(data['audio']);
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                Contact.validateJSON(item);
            };
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          MessageContext.validateJSON(data['context']);
        }
        // validate the optional field `document`
        if (data['document']) { // data not null
          WebhookDocument.validateJSON(data['document']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['group_id'] && !(typeof data['group_id'] === 'string' || data['group_id'] instanceof String)) {
            throw new Error("Expected the field `group_id` to be a primitive type in the JSON string but got " + data['group_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          WebhookImage.validateJSON(data['image']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          WebhookLocation.validateJSON(data['location']);
        }
        // validate the optional field `system`
        if (data['system']) { // data not null
          WebhookSystem.validateJSON(data['system']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          WebhookText.validateJSON(data['text']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // validate the optional field `video`
        if (data['video']) { // data not null
          WebhookVideo.validateJSON(data['video']);
        }
        // validate the optional field `voice`
        if (data['voice']) { // data not null
          WebhookVoice.validateJSON(data['voice']);
        }

        return true;
    }


}



/**
 * @member {module:model/WebhookAudio} audio
 */
WebhookMessage.prototype['audio'] = undefined;

/**
 * @member {Array.<module:model/Contact>} contacts
 */
WebhookMessage.prototype['contacts'] = undefined;

/**
 * @member {module:model/MessageContext} context
 */
WebhookMessage.prototype['context'] = undefined;

/**
 * @member {module:model/WebhookDocument} document
 */
WebhookMessage.prototype['document'] = undefined;

/**
 * @member {Array.<module:model/Error>} errors
 */
WebhookMessage.prototype['errors'] = undefined;

/**
 * WhatsApp ID of the sender
 * @member {String} from
 */
WebhookMessage.prototype['from'] = undefined;

/**
 * Optional. WhatsApp group ID
 * @member {String} group_id
 */
WebhookMessage.prototype['group_id'] = undefined;

/**
 * Message ID
 * @member {String} id
 */
WebhookMessage.prototype['id'] = undefined;

/**
 * @member {module:model/WebhookImage} image
 */
WebhookMessage.prototype['image'] = undefined;

/**
 * @member {module:model/WebhookLocation} location
 */
WebhookMessage.prototype['location'] = undefined;

/**
 * @member {module:model/WebhookSystem} system
 */
WebhookMessage.prototype['system'] = undefined;

/**
 * @member {module:model/WebhookText} text
 */
WebhookMessage.prototype['text'] = undefined;

/**
 * Message received timestamp
 * @member {String} timestamp
 */
WebhookMessage.prototype['timestamp'] = undefined;

/**
 * @member {module:model/MessageType} type
 */
WebhookMessage.prototype['type'] = undefined;

/**
 * @member {module:model/WebhookVideo} video
 */
WebhookMessage.prototype['video'] = undefined;

/**
 * @member {module:model/WebhookVoice} voice
 */
WebhookMessage.prototype['voice'] = undefined;






export default WebhookMessage;

