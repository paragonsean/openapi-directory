/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebhookAudio model module.
 * @module model/WebhookAudio
 * @version 1.0
 */
class WebhookAudio {
    /**
     * Constructs a new <code>WebhookAudio</code>.
     * 
     * @alias module:model/WebhookAudio
     */
    constructor() { 
        
        WebhookAudio.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebhookAudio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookAudio} obj Optional instance to populate.
     * @return {module:model/WebhookAudio} The populated <code>WebhookAudio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookAudio();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
            if (data.hasOwnProperty('sha256')) {
                obj['sha256'] = ApiClient.convertToType(data['sha256'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookAudio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookAudio</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // ensure the json data is a string
        if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
            throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }
        // ensure the json data is a string
        if (data['sha256'] && !(typeof data['sha256'] === 'string' || data['sha256'] instanceof String)) {
            throw new Error("Expected the field `sha256` to be a primitive type in the JSON string but got " + data['sha256']);
        }

        return true;
    }


}



/**
 * Optional. Only present if specified.
 * @member {String} caption
 */
WebhookAudio.prototype['caption'] = undefined;

/**
 * Absolute filename and location on media volume. This parameter is deprecated.
 * @member {String} file
 */
WebhookAudio.prototype['file'] = undefined;

/**
 * Filename on the sender's device. This will only be present in audio and document media messages.
 * @member {String} filename
 */
WebhookAudio.prototype['filename'] = undefined;

/**
 * ID of the media. Can be used to delete the media if stored locally on the client.
 * @member {String} id
 */
WebhookAudio.prototype['id'] = undefined;

/**
 * @member {String} link
 */
WebhookAudio.prototype['link'] = undefined;

/**
 * Mime type of media
 * @member {String} mime_type
 */
WebhookAudio.prototype['mime_type'] = undefined;

/**
 * Checksum
 * @member {String} sha256
 */
WebhookAudio.prototype['sha256'] = undefined;






export default WebhookAudio;

