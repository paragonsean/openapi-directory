/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupInfo model module.
 * @module model/GroupInfo
 * @version 1.0
 */
class GroupInfo {
    /**
     * Constructs a new <code>GroupInfo</code>.
     * 
     * @alias module:model/GroupInfo
     */
    constructor() { 
        
        GroupInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupInfo} obj Optional instance to populate.
     * @return {module:model/GroupInfo} The populated <code>GroupInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupInfo();

            if (data.hasOwnProperty('admins')) {
                obj['admins'] = ApiClient.convertToType(data['admins'], ['String']);
            }
            if (data.hasOwnProperty('creation_time')) {
                obj['creation_time'] = ApiClient.convertToType(data['creation_time'], 'Number');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], ['String']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['admins'])) {
            throw new Error("Expected the field `admins` to be an array in the JSON data but got " + data['admins']);
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['participants'])) {
            throw new Error("Expected the field `participants` to be an array in the JSON data but got " + data['participants']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}



/**
 * Group administrators Lists IDs of the creator of the group and any administrators added
 * @member {Array.<String>} admins
 */
GroupInfo.prototype['admins'] = undefined;

/**
 * Group creation time
 * @member {Number} creation_time
 */
GroupInfo.prototype['creation_time'] = undefined;

/**
 * ID of the creator of this group
 * @member {String} creator
 */
GroupInfo.prototype['creator'] = undefined;

/**
 * Participants of the group This is an array of all the IDs of the participants in the group. Initially, this will be the creator of the group.
 * @member {Array.<String>} participants
 */
GroupInfo.prototype['participants'] = undefined;

/**
 * Subject of the group
 * @member {String} subject
 */
GroupInfo.prototype['subject'] = undefined;






export default GroupInfo;

