/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Email from './Email';
import Name from './Name';
import Org from './Org';
import Phone from './Phone';
import Url from './Url';

/**
 * The Contact model module.
 * @module model/Contact
 * @version 1.0
 */
class Contact {
    /**
     * Constructs a new <code>Contact</code>.
     * @alias module:model/Contact
     */
    constructor() { 
        
        Contact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contact} obj Optional instance to populate.
     * @return {module:model/Contact} The populated <code>Contact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contact();

            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], [Address]);
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'String');
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], [Email]);
            }
            if (data.hasOwnProperty('ims')) {
                obj['ims'] = ApiClient.convertToType(data['ims'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Name.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('org')) {
                obj['org'] = Org.constructFromObject(data['org']);
            }
            if (data.hasOwnProperty('phones')) {
                obj['phones'] = ApiClient.convertToType(data['phones'], [Phone]);
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [Url]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contact</code>.
     */
    static validateJSON(data) {
        if (data['addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addresses'])) {
                throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
            }
            // validate the optional field `addresses` (array)
            for (const item of data['addresses']) {
                Address.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['birthday'] && !(typeof data['birthday'] === 'string' || data['birthday'] instanceof String)) {
            throw new Error("Expected the field `birthday` to be a primitive type in the JSON string but got " + data['birthday']);
        }
        if (data['emails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emails'])) {
                throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
            }
            // validate the optional field `emails` (array)
            for (const item of data['emails']) {
                Email.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ims'])) {
            throw new Error("Expected the field `ims` to be an array in the JSON data but got " + data['ims']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name.validateJSON(data['name']);
        }
        // validate the optional field `org`
        if (data['org']) { // data not null
          Org.validateJSON(data['org']);
        }
        if (data['phones']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phones'])) {
                throw new Error("Expected the field `phones` to be an array in the JSON data but got " + data['phones']);
            }
            // validate the optional field `phones` (array)
            for (const item of data['phones']) {
                Phone.validateJSON(item);
            };
        }
        if (data['urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urls'])) {
                throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
            }
            // validate the optional field `urls` (array)
            for (const item of data['urls']) {
                Url.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Full contact address(es)
 * @member {Array.<module:model/Address>} addresses
 */
Contact.prototype['addresses'] = undefined;

/**
 * YYYY-MM-DD formatted string
 * @member {String} birthday
 */
Contact.prototype['birthday'] = undefined;

/**
 * Contact email address(es)
 * @member {Array.<module:model/Email>} emails
 */
Contact.prototype['emails'] = undefined;

/**
 * 
 * @member {Array.<String>} ims
 */
Contact.prototype['ims'] = undefined;

/**
 * @member {module:model/Name} name
 */
Contact.prototype['name'] = undefined;

/**
 * @member {module:model/Org} org
 */
Contact.prototype['org'] = undefined;

/**
 * Contact phone number(s)
 * @member {Array.<module:model/Phone>} phones
 */
Contact.prototype['phones'] = undefined;

/**
 * Contact URL(s)
 * @member {Array.<module:model/Url>} urls
 */
Contact.prototype['urls'] = undefined;






export default Contact;

