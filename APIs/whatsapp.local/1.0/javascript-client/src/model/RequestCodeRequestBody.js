/**
 * WhatsApp Business API
 * See https://developers.facebook.com/docs/whatsapp
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RequestCodeRequestBody model module.
 * @module model/RequestCodeRequestBody
 * @version 1.0
 */
class RequestCodeRequestBody {
    /**
     * Constructs a new <code>RequestCodeRequestBody</code>.
     * @alias module:model/RequestCodeRequestBody
     * @param cc {String} Numerical country code for the phone number you are registering
     * @param cert {String} Base64-encoded Verified Name certificate
     * @param method {module:model/RequestCodeRequestBody.MethodEnum} Method of receiving your registration code
     * @param phoneNumber {String} Phone number you are registering, without the country code or plus symbol (+)
     */
    constructor(cc, cert, method, phoneNumber) { 
        
        RequestCodeRequestBody.initialize(this, cc, cert, method, phoneNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cc, cert, method, phoneNumber) { 
        obj['cc'] = cc;
        obj['cert'] = cert;
        obj['method'] = method;
        obj['phone_number'] = phoneNumber;
    }

    /**
     * Constructs a <code>RequestCodeRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RequestCodeRequestBody} obj Optional instance to populate.
     * @return {module:model/RequestCodeRequestBody} The populated <code>RequestCodeRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RequestCodeRequestBody();

            if (data.hasOwnProperty('cc')) {
                obj['cc'] = ApiClient.convertToType(data['cc'], 'String');
            }
            if (data.hasOwnProperty('cert')) {
                obj['cert'] = ApiClient.convertToType(data['cert'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RequestCodeRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RequestCodeRequestBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RequestCodeRequestBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cc'] && !(typeof data['cc'] === 'string' || data['cc'] instanceof String)) {
            throw new Error("Expected the field `cc` to be a primitive type in the JSON string but got " + data['cc']);
        }
        // ensure the json data is a string
        if (data['cert'] && !(typeof data['cert'] === 'string' || data['cert'] instanceof String)) {
            throw new Error("Expected the field `cert` to be a primitive type in the JSON string but got " + data['cert']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }

        return true;
    }


}

RequestCodeRequestBody.RequiredProperties = ["cc", "cert", "method", "phone_number"];

/**
 * Numerical country code for the phone number you are registering
 * @member {String} cc
 */
RequestCodeRequestBody.prototype['cc'] = undefined;

/**
 * Base64-encoded Verified Name certificate
 * @member {String} cert
 */
RequestCodeRequestBody.prototype['cert'] = undefined;

/**
 * Method of receiving your registration code
 * @member {module:model/RequestCodeRequestBody.MethodEnum} method
 */
RequestCodeRequestBody.prototype['method'] = undefined;

/**
 * Phone number you are registering, without the country code or plus symbol (+)
 * @member {String} phone_number
 */
RequestCodeRequestBody.prototype['phone_number'] = undefined;

/**
 * Existing 6-digit PIN â€” This is only required when two-factor verification is enabled on this account.
 * @member {String} pin
 */
RequestCodeRequestBody.prototype['pin'] = undefined;





/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
RequestCodeRequestBody['MethodEnum'] = {

    /**
     * value: "sms"
     * @const
     */
    "sms": "sms",

    /**
     * value: "voice"
     * @const
     */
    "voice": "voice"
};



export default RequestCodeRequestBody;

