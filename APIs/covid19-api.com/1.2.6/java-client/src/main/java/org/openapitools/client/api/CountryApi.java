/*
 * COVID-19 data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetDailyReportAllCountries200ResponseInner;
import org.openapitools.client.model.GetLatestCountryDataByName200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CountryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CountryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CountryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDailyReportAllCountries
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailyReportAllCountriesCall(String date, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/country/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date-format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyReportAllCountriesValidateBeforeCall(String date, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getDailyReportAllCountries(Async)");
        }

        return getDailyReportAllCountriesCall(date, dateFormat, format, _callback);

    }

    /**
     * getDailyReportAllCountries
     * Get daily report for all countries. Date is mandatory parametar. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter.
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @return List&lt;GetDailyReportAllCountries200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDailyReportAllCountries200ResponseInner> getDailyReportAllCountries(String date, String dateFormat, String format) throws ApiException {
        ApiResponse<List<GetDailyReportAllCountries200ResponseInner>> localVarResp = getDailyReportAllCountriesWithHttpInfo(date, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * getDailyReportAllCountries
     * Get daily report for all countries. Date is mandatory parametar. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter.
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @return ApiResponse&lt;List&lt;GetDailyReportAllCountries200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDailyReportAllCountries200ResponseInner>> getDailyReportAllCountriesWithHttpInfo(String date, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getDailyReportAllCountriesValidateBeforeCall(date, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<List<GetDailyReportAllCountries200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getDailyReportAllCountries (asynchronously)
     * Get daily report for all countries. Date is mandatory parametar. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter.
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailyReportAllCountriesAsync(String date, String dateFormat, String format, final ApiCallback<List<GetDailyReportAllCountries200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyReportAllCountriesValidateBeforeCall(date, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<List<GetDailyReportAllCountries200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDailyReportByCountryCode
     * @param code Country code. Country code is by ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. (required)
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailyReportByCountryCodeCall(String code, String date, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/country/code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date-format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyReportByCountryCodeValidateBeforeCall(String code, String date, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getDailyReportByCountryCode(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getDailyReportByCountryCode(Async)");
        }

        return getDailyReportByCountryCodeCall(code, date, dateFormat, format, _callback);

    }

    /**
     * getDailyReportByCountryCode
     * Get daily report for specific country. Country code and date are mandatory in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
     * @param code Country code. Country code is by ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. (required)
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @return List&lt;GetDailyReportAllCountries200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDailyReportAllCountries200ResponseInner> getDailyReportByCountryCode(String code, String date, String dateFormat, String format) throws ApiException {
        ApiResponse<List<GetDailyReportAllCountries200ResponseInner>> localVarResp = getDailyReportByCountryCodeWithHttpInfo(code, date, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * getDailyReportByCountryCode
     * Get daily report for specific country. Country code and date are mandatory in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
     * @param code Country code. Country code is by ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. (required)
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @return ApiResponse&lt;List&lt;GetDailyReportAllCountries200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDailyReportAllCountries200ResponseInner>> getDailyReportByCountryCodeWithHttpInfo(String code, String date, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getDailyReportByCountryCodeValidateBeforeCall(code, date, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<List<GetDailyReportAllCountries200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getDailyReportByCountryCode (asynchronously)
     * Get daily report for specific country. Country code and date are mandatory in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
     * @param code Country code. Country code is by ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. (required)
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailyReportByCountryCodeAsync(String code, String date, String dateFormat, String format, final ApiCallback<List<GetDailyReportAllCountries200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyReportByCountryCodeValidateBeforeCall(code, date, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<List<GetDailyReportAllCountries200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDailyReportByCountryName
     * @param name Country name. (required)
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailyReportByCountryNameCall(String name, String date, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/country/name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date-format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyReportByCountryNameValidateBeforeCall(String name, String date, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDailyReportByCountryName(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getDailyReportByCountryName(Async)");
        }

        return getDailyReportByCountryNameCall(name, date, dateFormat, format, _callback);

    }

    /**
     * getDailyReportByCountryName
     * Get daily report for specific country. Country name and date are mandatory in parametars. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
     * @param name Country name. (required)
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @return List&lt;GetDailyReportAllCountries200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetDailyReportAllCountries200ResponseInner> getDailyReportByCountryName(String name, String date, String dateFormat, String format) throws ApiException {
        ApiResponse<List<GetDailyReportAllCountries200ResponseInner>> localVarResp = getDailyReportByCountryNameWithHttpInfo(name, date, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * getDailyReportByCountryName
     * Get daily report for specific country. Country name and date are mandatory in parametars. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
     * @param name Country name. (required)
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @return ApiResponse&lt;List&lt;GetDailyReportAllCountries200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetDailyReportAllCountries200ResponseInner>> getDailyReportByCountryNameWithHttpInfo(String name, String date, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getDailyReportByCountryNameValidateBeforeCall(name, date, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<List<GetDailyReportAllCountries200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getDailyReportByCountryName (asynchronously)
     * Get daily report for specific country. Country name and date are mandatory in parametars. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
     * @param name Country name. (required)
     * @param date Date of the report. (required)
     * @param dateFormat Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format. (optional, default to YYYY-MM-DD)
     * @param format Format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Daily report for COVID-19 for selected country. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailyReportByCountryNameAsync(String name, String date, String dateFormat, String format, final ApiCallback<List<GetDailyReportAllCountries200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyReportByCountryNameValidateBeforeCall(name, date, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<List<GetDailyReportAllCountries200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestAllCountries
     * @param format Format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all countries with latest data about COVID-19 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestAllCountriesCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/country/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestAllCountriesValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return getLatestAllCountriesCall(format, _callback);

    }

    /**
     * getLatestAllCountries
     * Get latest data from all countries.
     * @param format Format of the response (optional, default to json)
     * @return List&lt;GetLatestCountryDataByName200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all countries with latest data about COVID-19 </td><td>  -  </td></tr>
     </table>
     */
    public List<GetLatestCountryDataByName200ResponseInner> getLatestAllCountries(String format) throws ApiException {
        ApiResponse<List<GetLatestCountryDataByName200ResponseInner>> localVarResp = getLatestAllCountriesWithHttpInfo(format);
        return localVarResp.getData();
    }

    /**
     * getLatestAllCountries
     * Get latest data from all countries.
     * @param format Format of the response (optional, default to json)
     * @return ApiResponse&lt;List&lt;GetLatestCountryDataByName200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all countries with latest data about COVID-19 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetLatestCountryDataByName200ResponseInner>> getLatestAllCountriesWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = getLatestAllCountriesValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<List<GetLatestCountryDataByName200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getLatestAllCountries (asynchronously)
     * Get latest data from all countries.
     * @param format Format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all countries with latest data about COVID-19 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestAllCountriesAsync(String format, final ApiCallback<List<GetLatestCountryDataByName200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestAllCountriesValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<List<GetLatestCountryDataByName200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestCountryDataByCode
     * @param code Country code (required)
     * @param format Format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest data about COVID-19 for selected country </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestCountryDataByCodeCall(String code, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/country/code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestCountryDataByCodeValidateBeforeCall(String code, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getLatestCountryDataByCode(Async)");
        }

        return getLatestCountryDataByCodeCall(code, format, _callback);

    }

    /**
     * getLatestCountryDataByCode
     * Get latest data for specific country. Country code and format are in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type.
     * @param code Country code (required)
     * @param format Format of the response (optional, default to json)
     * @return List&lt;GetLatestCountryDataByName200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest data about COVID-19 for selected country </td><td>  -  </td></tr>
     </table>
     */
    public List<GetLatestCountryDataByName200ResponseInner> getLatestCountryDataByCode(String code, String format) throws ApiException {
        ApiResponse<List<GetLatestCountryDataByName200ResponseInner>> localVarResp = getLatestCountryDataByCodeWithHttpInfo(code, format);
        return localVarResp.getData();
    }

    /**
     * getLatestCountryDataByCode
     * Get latest data for specific country. Country code and format are in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type.
     * @param code Country code (required)
     * @param format Format of the response (optional, default to json)
     * @return ApiResponse&lt;List&lt;GetLatestCountryDataByName200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest data about COVID-19 for selected country </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetLatestCountryDataByName200ResponseInner>> getLatestCountryDataByCodeWithHttpInfo(String code, String format) throws ApiException {
        okhttp3.Call localVarCall = getLatestCountryDataByCodeValidateBeforeCall(code, format, null);
        Type localVarReturnType = new TypeToken<List<GetLatestCountryDataByName200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getLatestCountryDataByCode (asynchronously)
     * Get latest data for specific country. Country code and format are in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type.
     * @param code Country code (required)
     * @param format Format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest data about COVID-19 for selected country </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestCountryDataByCodeAsync(String code, String format, final ApiCallback<List<GetLatestCountryDataByName200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestCountryDataByCodeValidateBeforeCall(code, format, _callback);
        Type localVarReturnType = new TypeToken<List<GetLatestCountryDataByName200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestCountryDataByName
     * @param name Name of the country (required)
     * @param format Format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest data about COVID-19 for selected country </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestCountryDataByNameCall(String name, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/country";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestCountryDataByNameValidateBeforeCall(String name, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLatestCountryDataByName(Async)");
        }

        return getLatestCountryDataByNameCall(name, format, _callback);

    }

    /**
     * getLatestCountryDataByName
     * Get latest data for specific country. Country name and format are in parametars.
     * @param name Name of the country (required)
     * @param format Format of the response (optional, default to json)
     * @return List&lt;GetLatestCountryDataByName200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest data about COVID-19 for selected country </td><td>  -  </td></tr>
     </table>
     */
    public List<GetLatestCountryDataByName200ResponseInner> getLatestCountryDataByName(String name, String format) throws ApiException {
        ApiResponse<List<GetLatestCountryDataByName200ResponseInner>> localVarResp = getLatestCountryDataByNameWithHttpInfo(name, format);
        return localVarResp.getData();
    }

    /**
     * getLatestCountryDataByName
     * Get latest data for specific country. Country name and format are in parametars.
     * @param name Name of the country (required)
     * @param format Format of the response (optional, default to json)
     * @return ApiResponse&lt;List&lt;GetLatestCountryDataByName200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest data about COVID-19 for selected country </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetLatestCountryDataByName200ResponseInner>> getLatestCountryDataByNameWithHttpInfo(String name, String format) throws ApiException {
        okhttp3.Call localVarCall = getLatestCountryDataByNameValidateBeforeCall(name, format, null);
        Type localVarReturnType = new TypeToken<List<GetLatestCountryDataByName200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getLatestCountryDataByName (asynchronously)
     * Get latest data for specific country. Country name and format are in parametars.
     * @param name Name of the country (required)
     * @param format Format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest data about COVID-19 for selected country </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestCountryDataByNameAsync(String name, String format, final ApiCallback<List<GetLatestCountryDataByName200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestCountryDataByNameValidateBeforeCall(name, format, _callback);
        Type localVarReturnType = new TypeToken<List<GetLatestCountryDataByName200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
