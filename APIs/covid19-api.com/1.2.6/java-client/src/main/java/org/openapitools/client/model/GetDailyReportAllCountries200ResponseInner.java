/*
 * COVID-19 data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDailyReportAllCountries200ResponseInnerProvinceInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDailyReportAllCountries200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:27.466895-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDailyReportAllCountries200ResponseInner {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Float latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Float longitude;

  public static final String SERIALIZED_NAME_PROVINCE = "province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  private List<GetDailyReportAllCountries200ResponseInnerProvinceInner> province = new ArrayList<>();

  public GetDailyReportAllCountries200ResponseInner() {
  }

  public GetDailyReportAllCountries200ResponseInner country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public GetDailyReportAllCountries200ResponseInner date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public GetDailyReportAllCountries200ResponseInner latitude(Float latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public Float getLatitude() {
    return latitude;
  }

  public void setLatitude(Float latitude) {
    this.latitude = latitude;
  }


  public GetDailyReportAllCountries200ResponseInner longitude(Float longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public Float getLongitude() {
    return longitude;
  }

  public void setLongitude(Float longitude) {
    this.longitude = longitude;
  }


  public GetDailyReportAllCountries200ResponseInner province(List<GetDailyReportAllCountries200ResponseInnerProvinceInner> province) {
    this.province = province;
    return this;
  }

  public GetDailyReportAllCountries200ResponseInner addProvinceItem(GetDailyReportAllCountries200ResponseInnerProvinceInner provinceItem) {
    if (this.province == null) {
      this.province = new ArrayList<>();
    }
    this.province.add(provinceItem);
    return this;
  }

  /**
   * Get province
   * @return province
   */
  @javax.annotation.Nullable
  public List<GetDailyReportAllCountries200ResponseInnerProvinceInner> getProvince() {
    return province;
  }

  public void setProvince(List<GetDailyReportAllCountries200ResponseInnerProvinceInner> province) {
    this.province = province;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDailyReportAllCountries200ResponseInner getDailyReportAllCountries200ResponseInner = (GetDailyReportAllCountries200ResponseInner) o;
    return Objects.equals(this.country, getDailyReportAllCountries200ResponseInner.country) &&
        Objects.equals(this.date, getDailyReportAllCountries200ResponseInner.date) &&
        Objects.equals(this.latitude, getDailyReportAllCountries200ResponseInner.latitude) &&
        Objects.equals(this.longitude, getDailyReportAllCountries200ResponseInner.longitude) &&
        Objects.equals(this.province, getDailyReportAllCountries200ResponseInner.province);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, date, latitude, longitude, province);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDailyReportAllCountries200ResponseInner {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("date");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("province");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDailyReportAllCountries200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDailyReportAllCountries200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDailyReportAllCountries200ResponseInner is not found in the empty JSON string", GetDailyReportAllCountries200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDailyReportAllCountries200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDailyReportAllCountries200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (jsonObj.get("province") != null && !jsonObj.get("province").isJsonNull()) {
        JsonArray jsonArrayprovince = jsonObj.getAsJsonArray("province");
        if (jsonArrayprovince != null) {
          // ensure the json data is an array
          if (!jsonObj.get("province").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `province` to be an array in the JSON string but got `%s`", jsonObj.get("province").toString()));
          }

          // validate the optional field `province` (array)
          for (int i = 0; i < jsonArrayprovince.size(); i++) {
            GetDailyReportAllCountries200ResponseInnerProvinceInner.validateJsonElement(jsonArrayprovince.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDailyReportAllCountries200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDailyReportAllCountries200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDailyReportAllCountries200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDailyReportAllCountries200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDailyReportAllCountries200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetDailyReportAllCountries200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDailyReportAllCountries200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDailyReportAllCountries200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDailyReportAllCountries200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetDailyReportAllCountries200ResponseInner
   */
  public static GetDailyReportAllCountries200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDailyReportAllCountries200ResponseInner.class);
  }

  /**
   * Convert an instance of GetDailyReportAllCountries200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

