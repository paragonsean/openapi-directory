/**
 * COVID-19 data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetDailyReportAllCountries200ResponseInner from '../model/GetDailyReportAllCountries200ResponseInner';
import GetLatestCountryDataByName200ResponseInner from '../model/GetLatestCountryDataByName200ResponseInner';

/**
* Country service.
* @module api/CountryApi
* @version 1.2.6
*/
export default class CountryApi {

    /**
    * Constructs a new CountryApi. 
    * @alias module:api/CountryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDailyReportAllCountries operation.
     * @callback module:api/CountryApi~getDailyReportAllCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDailyReportAllCountries200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getDailyReportAllCountries
     * Get daily report for all countries. Date is mandatory parametar. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter.
     * @param {String} date Date of the report.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dateFormat = 'YYYY-MM-DD')] Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format.
     * @param {module:model/String} [format = 'json')] Format of the response
     * @param {module:api/CountryApi~getDailyReportAllCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDailyReportAllCountries200ResponseInner>}
     */
    getDailyReportAllCountries(date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getDailyReportAllCountries");
      }

      let pathParams = {
      };
      let queryParams = {
        'date': date,
        'date-format': opts['dateFormat'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [GetDailyReportAllCountries200ResponseInner];
      return this.apiClient.callApi(
        '/report/country/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDailyReportByCountryCode operation.
     * @callback module:api/CountryApi~getDailyReportByCountryCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDailyReportAllCountries200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getDailyReportByCountryCode
     * Get daily report for specific country. Country code and date are mandatory in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
     * @param {String} code Country code. Country code is by ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type.
     * @param {String} date Date of the report.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dateFormat = 'YYYY-MM-DD')] Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format.
     * @param {module:model/String} [format = 'json')] Format of the response
     * @param {module:api/CountryApi~getDailyReportByCountryCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDailyReportAllCountries200ResponseInner>}
     */
    getDailyReportByCountryCode(code, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getDailyReportByCountryCode");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getDailyReportByCountryCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'date': date,
        'date-format': opts['dateFormat'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [GetDailyReportAllCountries200ResponseInner];
      return this.apiClient.callApi(
        '/report/country/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDailyReportByCountryName operation.
     * @callback module:api/CountryApi~getDailyReportByCountryNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetDailyReportAllCountries200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getDailyReportByCountryName
     * Get daily report for specific country. Country name and date are mandatory in parametars. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
     * @param {String} name Country name.
     * @param {String} date Date of the report.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dateFormat = 'YYYY-MM-DD')] Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format.
     * @param {module:model/String} [format = 'json')] Format of the response
     * @param {module:api/CountryApi~getDailyReportByCountryNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetDailyReportAllCountries200ResponseInner>}
     */
    getDailyReportByCountryName(name, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getDailyReportByCountryName");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getDailyReportByCountryName");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'date': date,
        'date-format': opts['dateFormat'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [GetDailyReportAllCountries200ResponseInner];
      return this.apiClient.callApi(
        '/report/country/name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestAllCountries operation.
     * @callback module:api/CountryApi~getLatestAllCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetLatestCountryDataByName200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLatestAllCountries
     * Get latest data from all countries.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of the response
     * @param {module:api/CountryApi~getLatestAllCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetLatestCountryDataByName200ResponseInner>}
     */
    getLatestAllCountries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [GetLatestCountryDataByName200ResponseInner];
      return this.apiClient.callApi(
        '/country/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestCountryDataByCode operation.
     * @callback module:api/CountryApi~getLatestCountryDataByCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetLatestCountryDataByName200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLatestCountryDataByCode
     * Get latest data for specific country. Country code and format are in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type.
     * @param {String} code Country code
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of the response
     * @param {module:api/CountryApi~getLatestCountryDataByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetLatestCountryDataByName200ResponseInner>}
     */
    getLatestCountryDataByCode(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getLatestCountryDataByCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [GetLatestCountryDataByName200ResponseInner];
      return this.apiClient.callApi(
        '/country/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestCountryDataByName operation.
     * @callback module:api/CountryApi~getLatestCountryDataByNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetLatestCountryDataByName200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLatestCountryDataByName
     * Get latest data for specific country. Country name and format are in parametars.
     * @param {String} name Name of the country
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of the response
     * @param {module:api/CountryApi~getLatestCountryDataByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetLatestCountryDataByName200ResponseInner>}
     */
    getLatestCountryDataByName(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getLatestCountryDataByName");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [GetLatestCountryDataByName200ResponseInner];
      return this.apiClient.callApi(
        '/country', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
