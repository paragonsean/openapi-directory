/**
 * COVID-19 data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICountryApi_H
#define OAI_OAICountryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetDailyReportAllCountries_200_response_inner.h"
#include "OAIGetLatestCountryDataByName_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICountryApi : public QObject {
    Q_OBJECT

public:
    OAICountryApi(const int timeOut = 0);
    ~OAICountryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  date QString [required]
    * @param[in]  date_format QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getDailyReportAllCountries(const QString &date, const ::OpenAPI::OptionalParam<QString> &date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  date QString [required]
    * @param[in]  date_format QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getDailyReportByCountryCode(const QString &code, const QString &date, const ::OpenAPI::OptionalParam<QString> &date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  date QString [required]
    * @param[in]  date_format QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getDailyReportByCountryName(const QString &name, const QString &date, const ::OpenAPI::OptionalParam<QString> &date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [optional]
    */
    virtual void getLatestAllCountries(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void getLatestCountryDataByCode(const QString &code, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void getLatestCountryDataByName(const QString &name, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDailyReportAllCountriesCallback(OAIHttpRequestWorker *worker);
    void getDailyReportByCountryCodeCallback(OAIHttpRequestWorker *worker);
    void getDailyReportByCountryNameCallback(OAIHttpRequestWorker *worker);
    void getLatestAllCountriesCallback(OAIHttpRequestWorker *worker);
    void getLatestCountryDataByCodeCallback(OAIHttpRequestWorker *worker);
    void getLatestCountryDataByNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDailyReportAllCountriesSignal(QList<OAIGetDailyReportAllCountries_200_response_inner> summary);
    void getDailyReportByCountryCodeSignal(QList<OAIGetDailyReportAllCountries_200_response_inner> summary);
    void getDailyReportByCountryNameSignal(QList<OAIGetDailyReportAllCountries_200_response_inner> summary);
    void getLatestAllCountriesSignal(QList<OAIGetLatestCountryDataByName_200_response_inner> summary);
    void getLatestCountryDataByCodeSignal(QList<OAIGetLatestCountryDataByName_200_response_inner> summary);
    void getLatestCountryDataByNameSignal(QList<OAIGetLatestCountryDataByName_200_response_inner> summary);


    void getDailyReportAllCountriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDailyReportAllCountries_200_response_inner> summary);
    void getDailyReportByCountryCodeSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDailyReportAllCountries_200_response_inner> summary);
    void getDailyReportByCountryNameSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetDailyReportAllCountries_200_response_inner> summary);
    void getLatestAllCountriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetLatestCountryDataByName_200_response_inner> summary);
    void getLatestCountryDataByCodeSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetLatestCountryDataByName_200_response_inner> summary);
    void getLatestCountryDataByNameSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetLatestCountryDataByName_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use getDailyReportAllCountriesSignalError() instead")
    void getDailyReportAllCountriesSignalE(QList<OAIGetDailyReportAllCountries_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDailyReportAllCountriesSignalError(QList<OAIGetDailyReportAllCountries_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDailyReportByCountryCodeSignalError() instead")
    void getDailyReportByCountryCodeSignalE(QList<OAIGetDailyReportAllCountries_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDailyReportByCountryCodeSignalError(QList<OAIGetDailyReportAllCountries_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDailyReportByCountryNameSignalError() instead")
    void getDailyReportByCountryNameSignalE(QList<OAIGetDailyReportAllCountries_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDailyReportByCountryNameSignalError(QList<OAIGetDailyReportAllCountries_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestAllCountriesSignalError() instead")
    void getLatestAllCountriesSignalE(QList<OAIGetLatestCountryDataByName_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestAllCountriesSignalError(QList<OAIGetLatestCountryDataByName_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestCountryDataByCodeSignalError() instead")
    void getLatestCountryDataByCodeSignalE(QList<OAIGetLatestCountryDataByName_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestCountryDataByCodeSignalError(QList<OAIGetLatestCountryDataByName_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestCountryDataByNameSignalError() instead")
    void getLatestCountryDataByNameSignalE(QList<OAIGetLatestCountryDataByName_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestCountryDataByNameSignalError(QList<OAIGetLatestCountryDataByName_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDailyReportAllCountriesSignalErrorFull() instead")
    void getDailyReportAllCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDailyReportAllCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDailyReportByCountryCodeSignalErrorFull() instead")
    void getDailyReportByCountryCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDailyReportByCountryCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDailyReportByCountryNameSignalErrorFull() instead")
    void getDailyReportByCountryNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDailyReportByCountryNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestAllCountriesSignalErrorFull() instead")
    void getLatestAllCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestAllCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestCountryDataByCodeSignalErrorFull() instead")
    void getLatestCountryDataByCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestCountryDataByCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestCountryDataByNameSignalErrorFull() instead")
    void getLatestCountryDataByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestCountryDataByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
