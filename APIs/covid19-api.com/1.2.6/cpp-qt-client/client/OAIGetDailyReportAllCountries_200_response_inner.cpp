/**
 * COVID-19 data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDailyReportAllCountries_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDailyReportAllCountries_200_response_inner::OAIGetDailyReportAllCountries_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDailyReportAllCountries_200_response_inner::OAIGetDailyReportAllCountries_200_response_inner() {
    this->initializeModel();
}

OAIGetDailyReportAllCountries_200_response_inner::~OAIGetDailyReportAllCountries_200_response_inner() {}

void OAIGetDailyReportAllCountries_200_response_inner::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_province_isSet = false;
    m_province_isValid = false;
}

void OAIGetDailyReportAllCountries_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDailyReportAllCountries_200_response_inner::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_province_isValid = ::OpenAPI::fromJsonValue(m_province, json[QString("province")]);
    m_province_isSet = !json[QString("province")].isNull() && m_province_isValid;
}

QString OAIGetDailyReportAllCountries_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDailyReportAllCountries_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_province.size() > 0) {
        obj.insert(QString("province"), ::OpenAPI::toJsonValue(m_province));
    }
    return obj;
}

QString OAIGetDailyReportAllCountries_200_response_inner::getCountry() const {
    return m_country;
}
void OAIGetDailyReportAllCountries_200_response_inner::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_country_Set() const{
    return m_country_isSet;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIGetDailyReportAllCountries_200_response_inner::getDate() const {
    return m_date;
}
void OAIGetDailyReportAllCountries_200_response_inner::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_date_Valid() const{
    return m_date_isValid;
}

float OAIGetDailyReportAllCountries_200_response_inner::getLatitude() const {
    return m_latitude;
}
void OAIGetDailyReportAllCountries_200_response_inner::setLatitude(const float &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_latitude_Valid() const{
    return m_latitude_isValid;
}

float OAIGetDailyReportAllCountries_200_response_inner::getLongitude() const {
    return m_longitude;
}
void OAIGetDailyReportAllCountries_200_response_inner::setLongitude(const float &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QList<OAIGetDailyReportAllCountries_200_response_inner_province_inner> OAIGetDailyReportAllCountries_200_response_inner::getProvince() const {
    return m_province;
}
void OAIGetDailyReportAllCountries_200_response_inner::setProvince(const QList<OAIGetDailyReportAllCountries_200_response_inner_province_inner> &province) {
    m_province = province;
    m_province_isSet = true;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_province_Set() const{
    return m_province_isSet;
}

bool OAIGetDailyReportAllCountries_200_response_inner::is_province_Valid() const{
    return m_province_isValid;
}

bool OAIGetDailyReportAllCountries_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_province.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDailyReportAllCountries_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
