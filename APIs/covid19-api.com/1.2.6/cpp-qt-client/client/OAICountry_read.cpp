/**
 * COVID-19 data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountry_read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountry_read::OAICountry_read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountry_read::OAICountry_read() {
    this->initializeModel();
}

OAICountry_read::~OAICountry_read() {}

void OAICountry_read::initializeModel() {

    m_confirmed_isSet = false;
    m_confirmed_isValid = false;

    m_critical_isSet = false;
    m_critical_isValid = false;

    m_deaths_isSet = false;
    m_deaths_isValid = false;

    m_last_change_isSet = false;
    m_last_change_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recovered_isSet = false;
    m_recovered_isValid = false;
}

void OAICountry_read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountry_read::fromJsonObject(QJsonObject json) {

    m_confirmed_isValid = ::OpenAPI::fromJsonValue(m_confirmed, json[QString("confirmed")]);
    m_confirmed_isSet = !json[QString("confirmed")].isNull() && m_confirmed_isValid;

    m_critical_isValid = ::OpenAPI::fromJsonValue(m_critical, json[QString("critical")]);
    m_critical_isSet = !json[QString("critical")].isNull() && m_critical_isValid;

    m_deaths_isValid = ::OpenAPI::fromJsonValue(m_deaths, json[QString("deaths")]);
    m_deaths_isSet = !json[QString("deaths")].isNull() && m_deaths_isValid;

    m_last_change_isValid = ::OpenAPI::fromJsonValue(m_last_change, json[QString("lastChange")]);
    m_last_change_isSet = !json[QString("lastChange")].isNull() && m_last_change_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recovered_isValid = ::OpenAPI::fromJsonValue(m_recovered, json[QString("recovered")]);
    m_recovered_isSet = !json[QString("recovered")].isNull() && m_recovered_isValid;
}

QString OAICountry_read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountry_read::asJsonObject() const {
    QJsonObject obj;
    if (m_confirmed_isSet) {
        obj.insert(QString("confirmed"), ::OpenAPI::toJsonValue(m_confirmed));
    }
    if (m_critical_isSet) {
        obj.insert(QString("critical"), ::OpenAPI::toJsonValue(m_critical));
    }
    if (m_deaths_isSet) {
        obj.insert(QString("deaths"), ::OpenAPI::toJsonValue(m_deaths));
    }
    if (m_last_change_isSet) {
        obj.insert(QString("lastChange"), ::OpenAPI::toJsonValue(m_last_change));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recovered_isSet) {
        obj.insert(QString("recovered"), ::OpenAPI::toJsonValue(m_recovered));
    }
    return obj;
}

qint32 OAICountry_read::getConfirmed() const {
    return m_confirmed;
}
void OAICountry_read::setConfirmed(const qint32 &confirmed) {
    m_confirmed = confirmed;
    m_confirmed_isSet = true;
}

bool OAICountry_read::is_confirmed_Set() const{
    return m_confirmed_isSet;
}

bool OAICountry_read::is_confirmed_Valid() const{
    return m_confirmed_isValid;
}

qint32 OAICountry_read::getCritical() const {
    return m_critical;
}
void OAICountry_read::setCritical(const qint32 &critical) {
    m_critical = critical;
    m_critical_isSet = true;
}

bool OAICountry_read::is_critical_Set() const{
    return m_critical_isSet;
}

bool OAICountry_read::is_critical_Valid() const{
    return m_critical_isValid;
}

qint32 OAICountry_read::getDeaths() const {
    return m_deaths;
}
void OAICountry_read::setDeaths(const qint32 &deaths) {
    m_deaths = deaths;
    m_deaths_isSet = true;
}

bool OAICountry_read::is_deaths_Set() const{
    return m_deaths_isSet;
}

bool OAICountry_read::is_deaths_Valid() const{
    return m_deaths_isValid;
}

QDateTime OAICountry_read::getLastChange() const {
    return m_last_change;
}
void OAICountry_read::setLastChange(const QDateTime &last_change) {
    m_last_change = last_change;
    m_last_change_isSet = true;
}

bool OAICountry_read::is_last_change_Set() const{
    return m_last_change_isSet;
}

bool OAICountry_read::is_last_change_Valid() const{
    return m_last_change_isValid;
}

QDateTime OAICountry_read::getLastUpdate() const {
    return m_last_update;
}
void OAICountry_read::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAICountry_read::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAICountry_read::is_last_update_Valid() const{
    return m_last_update_isValid;
}

double OAICountry_read::getLatitude() const {
    return m_latitude;
}
void OAICountry_read::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAICountry_read::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAICountry_read::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAICountry_read::getLongitude() const {
    return m_longitude;
}
void OAICountry_read::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAICountry_read::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAICountry_read::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAICountry_read::getName() const {
    return m_name;
}
void OAICountry_read::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICountry_read::is_name_Set() const{
    return m_name_isSet;
}

bool OAICountry_read::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICountry_read::getRecovered() const {
    return m_recovered;
}
void OAICountry_read::setRecovered(const qint32 &recovered) {
    m_recovered = recovered;
    m_recovered_isSet = true;
}

bool OAICountry_read::is_recovered_Set() const{
    return m_recovered_isSet;
}

bool OAICountry_read::is_recovered_Valid() const{
    return m_recovered_isValid;
}

bool OAICountry_read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_critical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountry_read::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
