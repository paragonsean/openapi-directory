/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Caste group-coded names
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:17.634638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonalNameCastegroupOut {
  public static final String SERIALIZED_NAME_CASTEGROUP = "castegroup";
  @SerializedName(SERIALIZED_NAME_CASTEGROUP)
  private String castegroup;

  public static final String SERIALIZED_NAME_CASTEGROUP_ALT = "castegroupAlt";
  @SerializedName(SERIALIZED_NAME_CASTEGROUP_ALT)
  private String castegroupAlt;

  public static final String SERIALIZED_NAME_CASTEGROUP_TOP = "castegroupTop";
  @SerializedName(SERIALIZED_NAME_CASTEGROUP_TOP)
  private List<String> castegroupTop = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROBABILITY_ALT_CALIBRATED = "probabilityAltCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_ALT_CALIBRATED)
  private Double probabilityAltCalibrated;

  public static final String SERIALIZED_NAME_PROBABILITY_CALIBRATED = "probabilityCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_CALIBRATED)
  private Double probabilityCalibrated;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public PersonalNameCastegroupOut() {
  }

  public PersonalNameCastegroupOut castegroup(String castegroup) {
    this.castegroup = castegroup;
    return this;
  }

  /**
   * Most likely caste group
   * @return castegroup
   */
  @javax.annotation.Nullable
  public String getCastegroup() {
    return castegroup;
  }

  public void setCastegroup(String castegroup) {
    this.castegroup = castegroup;
  }


  public PersonalNameCastegroupOut castegroupAlt(String castegroupAlt) {
    this.castegroupAlt = castegroupAlt;
    return this;
  }

  /**
   * Second best alternative : caste group 
   * @return castegroupAlt
   */
  @javax.annotation.Nullable
  public String getCastegroupAlt() {
    return castegroupAlt;
  }

  public void setCastegroupAlt(String castegroupAlt) {
    this.castegroupAlt = castegroupAlt;
  }


  public PersonalNameCastegroupOut castegroupTop(List<String> castegroupTop) {
    this.castegroupTop = castegroupTop;
    return this;
  }

  public PersonalNameCastegroupOut addCastegroupTopItem(String castegroupTopItem) {
    if (this.castegroupTop == null) {
      this.castegroupTop = new ArrayList<>();
    }
    this.castegroupTop.add(castegroupTopItem);
    return this;
  }

  /**
   * List caste group (top 10)
   * @return castegroupTop
   */
  @javax.annotation.Nullable
  public List<String> getCastegroupTop() {
    return castegroupTop;
  }

  public void setCastegroupTop(List<String> castegroupTop) {
    this.castegroupTop = castegroupTop;
  }


  public PersonalNameCastegroupOut id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PersonalNameCastegroupOut name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The input name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PersonalNameCastegroupOut probabilityAltCalibrated(Double probabilityAltCalibrated) {
    this.probabilityAltCalibrated = probabilityAltCalibrated;
    return this;
  }

  /**
   * The calibrated probability for country OR countryAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
   * minimum: -1
   * maximum: 1
   * @return probabilityAltCalibrated
   */
  @javax.annotation.Nullable
  public Double getProbabilityAltCalibrated() {
    return probabilityAltCalibrated;
  }

  public void setProbabilityAltCalibrated(Double probabilityAltCalibrated) {
    this.probabilityAltCalibrated = probabilityAltCalibrated;
  }


  public PersonalNameCastegroupOut probabilityCalibrated(Double probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
    return this;
  }

  /**
   * The calibrated probability for country to have been guessed correctly. -1 &#x3D; still calibrating. 
   * minimum: -1
   * maximum: 1
   * @return probabilityCalibrated
   */
  @javax.annotation.Nullable
  public Double getProbabilityCalibrated() {
    return probabilityCalibrated;
  }

  public void setProbabilityCalibrated(Double probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
  }


  public PersonalNameCastegroupOut score(Double score) {
    this.score = score;
    return this;
  }

  /**
   * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
   * minimum: 0
   * maximum: 100
   * @return score
   */
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  public PersonalNameCastegroupOut script(String script) {
    this.script = script;
    return this;
  }

  /**
   * Get script
   * @return script
   */
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalNameCastegroupOut personalNameCastegroupOut = (PersonalNameCastegroupOut) o;
    return Objects.equals(this.castegroup, personalNameCastegroupOut.castegroup) &&
        Objects.equals(this.castegroupAlt, personalNameCastegroupOut.castegroupAlt) &&
        Objects.equals(this.castegroupTop, personalNameCastegroupOut.castegroupTop) &&
        Objects.equals(this.id, personalNameCastegroupOut.id) &&
        Objects.equals(this.name, personalNameCastegroupOut.name) &&
        Objects.equals(this.probabilityAltCalibrated, personalNameCastegroupOut.probabilityAltCalibrated) &&
        Objects.equals(this.probabilityCalibrated, personalNameCastegroupOut.probabilityCalibrated) &&
        Objects.equals(this.score, personalNameCastegroupOut.score) &&
        Objects.equals(this.script, personalNameCastegroupOut.script);
  }

  @Override
  public int hashCode() {
    return Objects.hash(castegroup, castegroupAlt, castegroupTop, id, name, probabilityAltCalibrated, probabilityCalibrated, score, script);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalNameCastegroupOut {\n");
    sb.append("    castegroup: ").append(toIndentedString(castegroup)).append("\n");
    sb.append("    castegroupAlt: ").append(toIndentedString(castegroupAlt)).append("\n");
    sb.append("    castegroupTop: ").append(toIndentedString(castegroupTop)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    probabilityAltCalibrated: ").append(toIndentedString(probabilityAltCalibrated)).append("\n");
    sb.append("    probabilityCalibrated: ").append(toIndentedString(probabilityCalibrated)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("castegroup");
    openapiFields.add("castegroupAlt");
    openapiFields.add("castegroupTop");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("probabilityAltCalibrated");
    openapiFields.add("probabilityCalibrated");
    openapiFields.add("score");
    openapiFields.add("script");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonalNameCastegroupOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonalNameCastegroupOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalNameCastegroupOut is not found in the empty JSON string", PersonalNameCastegroupOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonalNameCastegroupOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalNameCastegroupOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("castegroup") != null && !jsonObj.get("castegroup").isJsonNull()) && !jsonObj.get("castegroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `castegroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("castegroup").toString()));
      }
      if ((jsonObj.get("castegroupAlt") != null && !jsonObj.get("castegroupAlt").isJsonNull()) && !jsonObj.get("castegroupAlt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `castegroupAlt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("castegroupAlt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("castegroupTop") != null && !jsonObj.get("castegroupTop").isJsonNull() && !jsonObj.get("castegroupTop").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `castegroupTop` to be an array in the JSON string but got `%s`", jsonObj.get("castegroupTop").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalNameCastegroupOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalNameCastegroupOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalNameCastegroupOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalNameCastegroupOut.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalNameCastegroupOut>() {
           @Override
           public void write(JsonWriter out, PersonalNameCastegroupOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalNameCastegroupOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonalNameCastegroupOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonalNameCastegroupOut
   * @throws IOException if the JSON string is invalid with respect to PersonalNameCastegroupOut
   */
  public static PersonalNameCastegroupOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalNameCastegroupOut.class);
  }

  /**
   * Convert an instance of PersonalNameCastegroupOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

