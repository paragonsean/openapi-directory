/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.APIBillingPeriodUsageOut;
import org.openapitools.client.model.APIPlanSubscriptionOut;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APIPeriodUsageOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:17.634638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIPeriodUsageOut {
  public static final String SERIALIZED_NAME_BILLING_PERIOD = "billingPeriod";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD)
  private APIBillingPeriodUsageOut billingPeriod;

  public static final String SERIALIZED_NAME_OVERAGE_CURRENCY = "overageCurrency";
  @SerializedName(SERIALIZED_NAME_OVERAGE_CURRENCY)
  private String overageCurrency;

  public static final String SERIALIZED_NAME_OVERAGE_EXCL_TAX = "overageExclTax";
  @SerializedName(SERIALIZED_NAME_OVERAGE_EXCL_TAX)
  private Double overageExclTax;

  public static final String SERIALIZED_NAME_OVERAGE_INCL_TAX = "overageInclTax";
  @SerializedName(SERIALIZED_NAME_OVERAGE_INCL_TAX)
  private Double overageInclTax;

  public static final String SERIALIZED_NAME_OVERAGE_QUANTITY = "overageQuantity";
  @SerializedName(SERIALIZED_NAME_OVERAGE_QUANTITY)
  private Long overageQuantity;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private APIPlanSubscriptionOut subscription;

  public APIPeriodUsageOut() {
  }

  public APIPeriodUsageOut billingPeriod(APIBillingPeriodUsageOut billingPeriod) {
    this.billingPeriod = billingPeriod;
    return this;
  }

  /**
   * Get billingPeriod
   * @return billingPeriod
   */
  @javax.annotation.Nullable
  public APIBillingPeriodUsageOut getBillingPeriod() {
    return billingPeriod;
  }

  public void setBillingPeriod(APIBillingPeriodUsageOut billingPeriod) {
    this.billingPeriod = billingPeriod;
  }


  public APIPeriodUsageOut overageCurrency(String overageCurrency) {
    this.overageCurrency = overageCurrency;
    return this;
  }

  /**
   * Currency of the overage amount.
   * @return overageCurrency
   */
  @javax.annotation.Nullable
  public String getOverageCurrency() {
    return overageCurrency;
  }

  public void setOverageCurrency(String overageCurrency) {
    this.overageCurrency = overageCurrency;
  }


  public APIPeriodUsageOut overageExclTax(Double overageExclTax) {
    this.overageExclTax = overageExclTax;
    return this;
  }

  /**
   * Overage amount including any tax.
   * @return overageExclTax
   */
  @javax.annotation.Nullable
  public Double getOverageExclTax() {
    return overageExclTax;
  }

  public void setOverageExclTax(Double overageExclTax) {
    this.overageExclTax = overageExclTax;
  }


  public APIPeriodUsageOut overageInclTax(Double overageInclTax) {
    this.overageInclTax = overageInclTax;
    return this;
  }

  /**
   * Overage amount including tax (if applicable).
   * @return overageInclTax
   */
  @javax.annotation.Nullable
  public Double getOverageInclTax() {
    return overageInclTax;
  }

  public void setOverageInclTax(Double overageInclTax) {
    this.overageInclTax = overageInclTax;
  }


  public APIPeriodUsageOut overageQuantity(Long overageQuantity) {
    this.overageQuantity = overageQuantity;
    return this;
  }

  /**
   * Quantity above monthly quota of the current subscritpion, in units.
   * @return overageQuantity
   */
  @javax.annotation.Nullable
  public Long getOverageQuantity() {
    return overageQuantity;
  }

  public void setOverageQuantity(Long overageQuantity) {
    this.overageQuantity = overageQuantity;
  }


  public APIPeriodUsageOut subscription(APIPlanSubscriptionOut subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Get subscription
   * @return subscription
   */
  @javax.annotation.Nullable
  public APIPlanSubscriptionOut getSubscription() {
    return subscription;
  }

  public void setSubscription(APIPlanSubscriptionOut subscription) {
    this.subscription = subscription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIPeriodUsageOut apIPeriodUsageOut = (APIPeriodUsageOut) o;
    return Objects.equals(this.billingPeriod, apIPeriodUsageOut.billingPeriod) &&
        Objects.equals(this.overageCurrency, apIPeriodUsageOut.overageCurrency) &&
        Objects.equals(this.overageExclTax, apIPeriodUsageOut.overageExclTax) &&
        Objects.equals(this.overageInclTax, apIPeriodUsageOut.overageInclTax) &&
        Objects.equals(this.overageQuantity, apIPeriodUsageOut.overageQuantity) &&
        Objects.equals(this.subscription, apIPeriodUsageOut.subscription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingPeriod, overageCurrency, overageExclTax, overageInclTax, overageQuantity, subscription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIPeriodUsageOut {\n");
    sb.append("    billingPeriod: ").append(toIndentedString(billingPeriod)).append("\n");
    sb.append("    overageCurrency: ").append(toIndentedString(overageCurrency)).append("\n");
    sb.append("    overageExclTax: ").append(toIndentedString(overageExclTax)).append("\n");
    sb.append("    overageInclTax: ").append(toIndentedString(overageInclTax)).append("\n");
    sb.append("    overageQuantity: ").append(toIndentedString(overageQuantity)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingPeriod");
    openapiFields.add("overageCurrency");
    openapiFields.add("overageExclTax");
    openapiFields.add("overageInclTax");
    openapiFields.add("overageQuantity");
    openapiFields.add("subscription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIPeriodUsageOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIPeriodUsageOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIPeriodUsageOut is not found in the empty JSON string", APIPeriodUsageOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIPeriodUsageOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIPeriodUsageOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingPeriod`
      if (jsonObj.get("billingPeriod") != null && !jsonObj.get("billingPeriod").isJsonNull()) {
        APIBillingPeriodUsageOut.validateJsonElement(jsonObj.get("billingPeriod"));
      }
      if ((jsonObj.get("overageCurrency") != null && !jsonObj.get("overageCurrency").isJsonNull()) && !jsonObj.get("overageCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overageCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overageCurrency").toString()));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        APIPlanSubscriptionOut.validateJsonElement(jsonObj.get("subscription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIPeriodUsageOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIPeriodUsageOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIPeriodUsageOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIPeriodUsageOut.class));

       return (TypeAdapter<T>) new TypeAdapter<APIPeriodUsageOut>() {
           @Override
           public void write(JsonWriter out, APIPeriodUsageOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIPeriodUsageOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIPeriodUsageOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIPeriodUsageOut
   * @throws IOException if the JSON string is invalid with respect to APIPeriodUsageOut
   */
  public static APIPeriodUsageOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIPeriodUsageOut.class);
  }

  /**
   * Convert an instance of APIPeriodUsageOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

