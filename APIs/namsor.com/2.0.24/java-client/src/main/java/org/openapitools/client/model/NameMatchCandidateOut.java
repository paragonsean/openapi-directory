/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ordered list of name matching candidates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:17.634638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NameMatchCandidateOut {
  public static final String SERIALIZED_NAME_CANDIDATE_NAME = "candidateName";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_NAME)
  private String candidateName;

  public static final String SERIALIZED_NAME_PRED_SCORE_FAMILY_NAME = "predScoreFamilyName";
  @SerializedName(SERIALIZED_NAME_PRED_SCORE_FAMILY_NAME)
  private Double predScoreFamilyName;

  public static final String SERIALIZED_NAME_PRED_SCORE_GIVEN_NAME = "predScoreGivenName";
  @SerializedName(SERIALIZED_NAME_PRED_SCORE_GIVEN_NAME)
  private Double predScoreGivenName;

  public static final String SERIALIZED_NAME_PROBABILITY = "probability";
  @SerializedName(SERIALIZED_NAME_PROBABILITY)
  private Double probability;

  public NameMatchCandidateOut() {
  }

  public NameMatchCandidateOut candidateName(String candidateName) {
    this.candidateName = candidateName;
    return this;
  }

  /**
   * The name matching candidate name
   * @return candidateName
   */
  @javax.annotation.Nullable
  public String getCandidateName() {
    return candidateName;
  }

  public void setCandidateName(String candidateName) {
    this.candidateName = candidateName;
  }


  public NameMatchCandidateOut predScoreFamilyName(Double predScoreFamilyName) {
    this.predScoreFamilyName = predScoreFamilyName;
    return this;
  }

  /**
   * The family name prediction score.
   * @return predScoreFamilyName
   */
  @javax.annotation.Nullable
  public Double getPredScoreFamilyName() {
    return predScoreFamilyName;
  }

  public void setPredScoreFamilyName(Double predScoreFamilyName) {
    this.predScoreFamilyName = predScoreFamilyName;
  }


  public NameMatchCandidateOut predScoreGivenName(Double predScoreGivenName) {
    this.predScoreGivenName = predScoreGivenName;
    return this;
  }

  /**
   * The given name prediction score.
   * @return predScoreGivenName
   */
  @javax.annotation.Nullable
  public Double getPredScoreGivenName() {
    return predScoreGivenName;
  }

  public void setPredScoreGivenName(Double predScoreGivenName) {
    this.predScoreGivenName = predScoreGivenName;
  }


  public NameMatchCandidateOut probability(Double probability) {
    this.probability = probability;
    return this;
  }

  /**
   * The name matching estimated probability.
   * @return probability
   */
  @javax.annotation.Nullable
  public Double getProbability() {
    return probability;
  }

  public void setProbability(Double probability) {
    this.probability = probability;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NameMatchCandidateOut nameMatchCandidateOut = (NameMatchCandidateOut) o;
    return Objects.equals(this.candidateName, nameMatchCandidateOut.candidateName) &&
        Objects.equals(this.predScoreFamilyName, nameMatchCandidateOut.predScoreFamilyName) &&
        Objects.equals(this.predScoreGivenName, nameMatchCandidateOut.predScoreGivenName) &&
        Objects.equals(this.probability, nameMatchCandidateOut.probability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateName, predScoreFamilyName, predScoreGivenName, probability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NameMatchCandidateOut {\n");
    sb.append("    candidateName: ").append(toIndentedString(candidateName)).append("\n");
    sb.append("    predScoreFamilyName: ").append(toIndentedString(predScoreFamilyName)).append("\n");
    sb.append("    predScoreGivenName: ").append(toIndentedString(predScoreGivenName)).append("\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidateName");
    openapiFields.add("predScoreFamilyName");
    openapiFields.add("predScoreGivenName");
    openapiFields.add("probability");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NameMatchCandidateOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NameMatchCandidateOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NameMatchCandidateOut is not found in the empty JSON string", NameMatchCandidateOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NameMatchCandidateOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NameMatchCandidateOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("candidateName") != null && !jsonObj.get("candidateName").isJsonNull()) && !jsonObj.get("candidateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidateName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NameMatchCandidateOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NameMatchCandidateOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NameMatchCandidateOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NameMatchCandidateOut.class));

       return (TypeAdapter<T>) new TypeAdapter<NameMatchCandidateOut>() {
           @Override
           public void write(JsonWriter out, NameMatchCandidateOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NameMatchCandidateOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NameMatchCandidateOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NameMatchCandidateOut
   * @throws IOException if the JSON string is invalid with respect to NameMatchCandidateOut
   */
  public static NameMatchCandidateOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NameMatchCandidateOut.class);
  }

  /**
   * Convert an instance of NameMatchCandidateOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

