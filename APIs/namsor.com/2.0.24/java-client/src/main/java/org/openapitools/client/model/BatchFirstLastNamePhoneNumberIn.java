/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FactIn;
import org.openapitools.client.model.FirstLastNamePhoneNumberIn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchFirstLastNamePhoneNumberIn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:17.634638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchFirstLastNamePhoneNumberIn {
  public static final String SERIALIZED_NAME_FACTS = "facts";
  @SerializedName(SERIALIZED_NAME_FACTS)
  private List<FactIn> facts = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSONAL_NAMES_WITH_PHONE_NUMBERS = "personalNamesWithPhoneNumbers";
  @SerializedName(SERIALIZED_NAME_PERSONAL_NAMES_WITH_PHONE_NUMBERS)
  private List<FirstLastNamePhoneNumberIn> personalNamesWithPhoneNumbers = new ArrayList<>();

  public BatchFirstLastNamePhoneNumberIn() {
  }

  public BatchFirstLastNamePhoneNumberIn facts(List<FactIn> facts) {
    this.facts = facts;
    return this;
  }

  public BatchFirstLastNamePhoneNumberIn addFactsItem(FactIn factsItem) {
    if (this.facts == null) {
      this.facts = new ArrayList<>();
    }
    this.facts.add(factsItem);
    return this;
  }

  /**
   * Get facts
   * @return facts
   */
  @javax.annotation.Nullable
  public List<FactIn> getFacts() {
    return facts;
  }

  public void setFacts(List<FactIn> facts) {
    this.facts = facts;
  }


  public BatchFirstLastNamePhoneNumberIn personalNamesWithPhoneNumbers(List<FirstLastNamePhoneNumberIn> personalNamesWithPhoneNumbers) {
    this.personalNamesWithPhoneNumbers = personalNamesWithPhoneNumbers;
    return this;
  }

  public BatchFirstLastNamePhoneNumberIn addPersonalNamesWithPhoneNumbersItem(FirstLastNamePhoneNumberIn personalNamesWithPhoneNumbersItem) {
    if (this.personalNamesWithPhoneNumbers == null) {
      this.personalNamesWithPhoneNumbers = new ArrayList<>();
    }
    this.personalNamesWithPhoneNumbers.add(personalNamesWithPhoneNumbersItem);
    return this;
  }

  /**
   * Get personalNamesWithPhoneNumbers
   * @return personalNamesWithPhoneNumbers
   */
  @javax.annotation.Nullable
  public List<FirstLastNamePhoneNumberIn> getPersonalNamesWithPhoneNumbers() {
    return personalNamesWithPhoneNumbers;
  }

  public void setPersonalNamesWithPhoneNumbers(List<FirstLastNamePhoneNumberIn> personalNamesWithPhoneNumbers) {
    this.personalNamesWithPhoneNumbers = personalNamesWithPhoneNumbers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn = (BatchFirstLastNamePhoneNumberIn) o;
    return Objects.equals(this.facts, batchFirstLastNamePhoneNumberIn.facts) &&
        Objects.equals(this.personalNamesWithPhoneNumbers, batchFirstLastNamePhoneNumberIn.personalNamesWithPhoneNumbers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facts, personalNamesWithPhoneNumbers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchFirstLastNamePhoneNumberIn {\n");
    sb.append("    facts: ").append(toIndentedString(facts)).append("\n");
    sb.append("    personalNamesWithPhoneNumbers: ").append(toIndentedString(personalNamesWithPhoneNumbers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facts");
    openapiFields.add("personalNamesWithPhoneNumbers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchFirstLastNamePhoneNumberIn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchFirstLastNamePhoneNumberIn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchFirstLastNamePhoneNumberIn is not found in the empty JSON string", BatchFirstLastNamePhoneNumberIn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchFirstLastNamePhoneNumberIn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchFirstLastNamePhoneNumberIn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("facts") != null && !jsonObj.get("facts").isJsonNull()) {
        JsonArray jsonArrayfacts = jsonObj.getAsJsonArray("facts");
        if (jsonArrayfacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("facts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `facts` to be an array in the JSON string but got `%s`", jsonObj.get("facts").toString()));
          }

          // validate the optional field `facts` (array)
          for (int i = 0; i < jsonArrayfacts.size(); i++) {
            FactIn.validateJsonElement(jsonArrayfacts.get(i));
          };
        }
      }
      if (jsonObj.get("personalNamesWithPhoneNumbers") != null && !jsonObj.get("personalNamesWithPhoneNumbers").isJsonNull()) {
        JsonArray jsonArraypersonalNamesWithPhoneNumbers = jsonObj.getAsJsonArray("personalNamesWithPhoneNumbers");
        if (jsonArraypersonalNamesWithPhoneNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("personalNamesWithPhoneNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `personalNamesWithPhoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("personalNamesWithPhoneNumbers").toString()));
          }

          // validate the optional field `personalNamesWithPhoneNumbers` (array)
          for (int i = 0; i < jsonArraypersonalNamesWithPhoneNumbers.size(); i++) {
            FirstLastNamePhoneNumberIn.validateJsonElement(jsonArraypersonalNamesWithPhoneNumbers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchFirstLastNamePhoneNumberIn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchFirstLastNamePhoneNumberIn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchFirstLastNamePhoneNumberIn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchFirstLastNamePhoneNumberIn.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchFirstLastNamePhoneNumberIn>() {
           @Override
           public void write(JsonWriter out, BatchFirstLastNamePhoneNumberIn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchFirstLastNamePhoneNumberIn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchFirstLastNamePhoneNumberIn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchFirstLastNamePhoneNumberIn
   * @throws IOException if the JSON string is invalid with respect to BatchFirstLastNamePhoneNumberIn
   */
  public static BatchFirstLastNamePhoneNumberIn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchFirstLastNamePhoneNumberIn.class);
  }

  /**
   * Convert an instance of BatchFirstLastNamePhoneNumberIn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

