/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FirstLastNameOut;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersonalNameParsedOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:17.634638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonalNameParsedOut {
  public static final String SERIALIZED_NAME_FIRST_LAST_NAME = "firstLastName";
  @SerializedName(SERIALIZED_NAME_FIRST_LAST_NAME)
  private FirstLastNameOut firstLastName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
   */
  @JsonAdapter(NameParserTypeEnum.Adapter.class)
  public enum NameParserTypeEnum {
    FN1_LN1("FN1LN1"),
    
    LN1_FN1("LN1FN1"),
    
    FN1_LN2("FN1LN2"),
    
    LN2_FN1("LN2FN1"),
    
    FN1_LNX("FN1LNx"),
    
    LNX_FN1("LNxFN1"),
    
    FN2_LN1("FN2LN1"),
    
    LN1_FN2("LN1FN2"),
    
    FN2_LN2("FN2LN2"),
    
    LN2_FN2("LN2FN2"),
    
    FN2_LNX("FN2LNx"),
    
    LNX_FN2("LNxFN2"),
    
    FNX_LN1("FNxLN1"),
    
    LN1_FNX("LN1FNx"),
    
    FNX_LN2("FNxLN2"),
    
    LN2_FNX("LN2FNx"),
    
    FNX_LNX("FNxLNx"),
    
    LNX_FNX("LNxFNx");

    private String value;

    NameParserTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameParserTypeEnum fromValue(String value) {
      for (NameParserTypeEnum b : NameParserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameParserTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameParserTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameParserTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameParserTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameParserTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME_PARSER_TYPE = "nameParserType";
  @SerializedName(SERIALIZED_NAME_NAME_PARSER_TYPE)
  private NameParserTypeEnum nameParserType;

  /**
   * Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
   */
  @JsonAdapter(NameParserTypeAltEnum.Adapter.class)
  public enum NameParserTypeAltEnum {
    FN1_LN1("FN1LN1"),
    
    LN1_FN1("LN1FN1"),
    
    FN1_LN2("FN1LN2"),
    
    LN2_FN1("LN2FN1"),
    
    FN1_LNX("FN1LNx"),
    
    LNX_FN1("LNxFN1"),
    
    FN2_LN1("FN2LN1"),
    
    LN1_FN2("LN1FN2"),
    
    FN2_LN2("FN2LN2"),
    
    LN2_FN2("LN2FN2"),
    
    FN2_LNX("FN2LNx"),
    
    LNX_FN2("LNxFN2"),
    
    FNX_LN1("FNxLN1"),
    
    LN1_FNX("LN1FNx"),
    
    FNX_LN2("FNxLN2"),
    
    LN2_FNX("LN2FNx"),
    
    FNX_LNX("FNxLNx"),
    
    LNX_FNX("LNxFNx");

    private String value;

    NameParserTypeAltEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameParserTypeAltEnum fromValue(String value) {
      for (NameParserTypeAltEnum b : NameParserTypeAltEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameParserTypeAltEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameParserTypeAltEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameParserTypeAltEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameParserTypeAltEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameParserTypeAltEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME_PARSER_TYPE_ALT = "nameParserTypeAlt";
  @SerializedName(SERIALIZED_NAME_NAME_PARSER_TYPE_ALT)
  private NameParserTypeAltEnum nameParserTypeAlt;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public PersonalNameParsedOut() {
  }

  public PersonalNameParsedOut firstLastName(FirstLastNameOut firstLastName) {
    this.firstLastName = firstLastName;
    return this;
  }

  /**
   * Get firstLastName
   * @return firstLastName
   */
  @javax.annotation.Nullable
  public FirstLastNameOut getFirstLastName() {
    return firstLastName;
  }

  public void setFirstLastName(FirstLastNameOut firstLastName) {
    this.firstLastName = firstLastName;
  }


  public PersonalNameParsedOut id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PersonalNameParsedOut name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The input name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PersonalNameParsedOut nameParserType(NameParserTypeEnum nameParserType) {
    this.nameParserType = nameParserType;
    return this;
  }

  /**
   * Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
   * @return nameParserType
   */
  @javax.annotation.Nullable
  public NameParserTypeEnum getNameParserType() {
    return nameParserType;
  }

  public void setNameParserType(NameParserTypeEnum nameParserType) {
    this.nameParserType = nameParserType;
  }


  public PersonalNameParsedOut nameParserTypeAlt(NameParserTypeAltEnum nameParserTypeAlt) {
    this.nameParserTypeAlt = nameParserTypeAlt;
    return this;
  }

  /**
   * Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
   * @return nameParserTypeAlt
   */
  @javax.annotation.Nullable
  public NameParserTypeAltEnum getNameParserTypeAlt() {
    return nameParserTypeAlt;
  }

  public void setNameParserTypeAlt(NameParserTypeAltEnum nameParserTypeAlt) {
    this.nameParserTypeAlt = nameParserTypeAlt;
  }


  public PersonalNameParsedOut score(Double score) {
    this.score = score;
    return this;
  }

  /**
   * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
   * minimum: 0
   * maximum: 100
   * @return score
   */
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  public PersonalNameParsedOut script(String script) {
    this.script = script;
    return this;
  }

  /**
   * Get script
   * @return script
   */
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalNameParsedOut personalNameParsedOut = (PersonalNameParsedOut) o;
    return Objects.equals(this.firstLastName, personalNameParsedOut.firstLastName) &&
        Objects.equals(this.id, personalNameParsedOut.id) &&
        Objects.equals(this.name, personalNameParsedOut.name) &&
        Objects.equals(this.nameParserType, personalNameParsedOut.nameParserType) &&
        Objects.equals(this.nameParserTypeAlt, personalNameParsedOut.nameParserTypeAlt) &&
        Objects.equals(this.score, personalNameParsedOut.score) &&
        Objects.equals(this.script, personalNameParsedOut.script);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstLastName, id, name, nameParserType, nameParserTypeAlt, score, script);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalNameParsedOut {\n");
    sb.append("    firstLastName: ").append(toIndentedString(firstLastName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameParserType: ").append(toIndentedString(nameParserType)).append("\n");
    sb.append("    nameParserTypeAlt: ").append(toIndentedString(nameParserTypeAlt)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstLastName");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("nameParserType");
    openapiFields.add("nameParserTypeAlt");
    openapiFields.add("score");
    openapiFields.add("script");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonalNameParsedOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonalNameParsedOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalNameParsedOut is not found in the empty JSON string", PersonalNameParsedOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonalNameParsedOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalNameParsedOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `firstLastName`
      if (jsonObj.get("firstLastName") != null && !jsonObj.get("firstLastName").isJsonNull()) {
        FirstLastNameOut.validateJsonElement(jsonObj.get("firstLastName"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nameParserType") != null && !jsonObj.get("nameParserType").isJsonNull()) && !jsonObj.get("nameParserType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameParserType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameParserType").toString()));
      }
      // validate the optional field `nameParserType`
      if (jsonObj.get("nameParserType") != null && !jsonObj.get("nameParserType").isJsonNull()) {
        NameParserTypeEnum.validateJsonElement(jsonObj.get("nameParserType"));
      }
      if ((jsonObj.get("nameParserTypeAlt") != null && !jsonObj.get("nameParserTypeAlt").isJsonNull()) && !jsonObj.get("nameParserTypeAlt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameParserTypeAlt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameParserTypeAlt").toString()));
      }
      // validate the optional field `nameParserTypeAlt`
      if (jsonObj.get("nameParserTypeAlt") != null && !jsonObj.get("nameParserTypeAlt").isJsonNull()) {
        NameParserTypeAltEnum.validateJsonElement(jsonObj.get("nameParserTypeAlt"));
      }
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalNameParsedOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalNameParsedOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalNameParsedOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalNameParsedOut.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalNameParsedOut>() {
           @Override
           public void write(JsonWriter out, PersonalNameParsedOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalNameParsedOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonalNameParsedOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonalNameParsedOut
   * @throws IOException if the JSON string is invalid with respect to PersonalNameParsedOut
   */
  public static PersonalNameParsedOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalNameParsedOut.class);
  }

  /**
   * Convert an instance of PersonalNameParsedOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

