/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NamSorApiV2);
  }
}(this, function(expect, NamSorApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NamSorApiV2.IndianApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IndianApi', function() {
    describe('castegroupIndianFull', function() {
      it('should call castegroupIndianFull successfully', function(done) {
        //uncomment below and update the code to test castegroupIndianFull
        //instance.castegroupIndianFull(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('castegroupIndianFullBatch', function() {
      it('should call castegroupIndianFullBatch successfully', function(done) {
        //uncomment below and update the code to test castegroupIndianFullBatch
        //instance.castegroupIndianFullBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('religion', function() {
      it('should call religion successfully', function(done) {
        //uncomment below and update the code to test religion
        //instance.religion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('religionIndianFullBatch', function() {
      it('should call religionIndianFullBatch successfully', function(done) {
        //uncomment below and update the code to test religionIndianFullBatch
        //instance.religionIndianFullBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subclassificationIndian', function() {
      it('should call subclassificationIndian successfully', function(done) {
        //uncomment below and update the code to test subclassificationIndian
        //instance.subclassificationIndian(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subclassificationIndianBatch', function() {
      it('should call subclassificationIndianBatch successfully', function(done) {
        //uncomment below and update the code to test subclassificationIndianBatch
        //instance.subclassificationIndianBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subclassificationIndianFull', function() {
      it('should call subclassificationIndianFull successfully', function(done) {
        //uncomment below and update the code to test subclassificationIndianFull
        //instance.subclassificationIndianFull(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subclassificationIndianFullBatch', function() {
      it('should call subclassificationIndianFullBatch successfully', function(done) {
        //uncomment below and update the code to test subclassificationIndianFullBatch
        //instance.subclassificationIndianFullBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
