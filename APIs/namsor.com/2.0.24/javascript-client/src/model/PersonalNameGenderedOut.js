/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PersonalNameGenderedOut model module.
 * @module model/PersonalNameGenderedOut
 * @version 2.0.24
 */
class PersonalNameGenderedOut {
    /**
     * Constructs a new <code>PersonalNameGenderedOut</code>.
     * Classified genderized names
     * @alias module:model/PersonalNameGenderedOut
     */
    constructor() { 
        
        PersonalNameGenderedOut.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonalNameGenderedOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalNameGenderedOut} obj Optional instance to populate.
     * @return {module:model/PersonalNameGenderedOut} The populated <code>PersonalNameGenderedOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalNameGenderedOut();

            if (data.hasOwnProperty('genderScale')) {
                obj['genderScale'] = ApiClient.convertToType(data['genderScale'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('likelyGender')) {
                obj['likelyGender'] = ApiClient.convertToType(data['likelyGender'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('probabilityCalibrated')) {
                obj['probabilityCalibrated'] = ApiClient.convertToType(data['probabilityCalibrated'], 'Number');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonalNameGenderedOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonalNameGenderedOut</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['likelyGender'] && !(typeof data['likelyGender'] === 'string' || data['likelyGender'] instanceof String)) {
            throw new Error("Expected the field `likelyGender` to be a primitive type in the JSON string but got " + data['likelyGender']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['script'] && !(typeof data['script'] === 'string' || data['script'] instanceof String)) {
            throw new Error("Expected the field `script` to be a primitive type in the JSON string but got " + data['script']);
        }

        return true;
    }


}



/**
 * Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.
 * @member {Number} genderScale
 */
PersonalNameGenderedOut.prototype['genderScale'] = undefined;

/**
 * @member {String} id
 */
PersonalNameGenderedOut.prototype['id'] = undefined;

/**
 * Most likely gender
 * @member {module:model/PersonalNameGenderedOut.LikelyGenderEnum} likelyGender
 */
PersonalNameGenderedOut.prototype['likelyGender'] = undefined;

/**
 * The input name
 * @member {String} name
 */
PersonalNameGenderedOut.prototype['name'] = undefined;

/**
 * The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. 
 * @member {Number} probabilityCalibrated
 */
PersonalNameGenderedOut.prototype['probabilityCalibrated'] = undefined;

/**
 * Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
 * @member {Number} score
 */
PersonalNameGenderedOut.prototype['score'] = undefined;

/**
 * @member {String} script
 */
PersonalNameGenderedOut.prototype['script'] = undefined;





/**
 * Allowed values for the <code>likelyGender</code> property.
 * @enum {String}
 * @readonly
 */
PersonalNameGenderedOut['LikelyGenderEnum'] = {

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};



export default PersonalNameGenderedOut;

