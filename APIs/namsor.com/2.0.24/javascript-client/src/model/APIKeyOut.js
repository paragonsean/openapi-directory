/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The APIKeyOut model module.
 * @module model/APIKeyOut
 * @version 2.0.24
 */
class APIKeyOut {
    /**
     * Constructs a new <code>APIKeyOut</code>.
     * @alias module:model/APIKeyOut
     */
    constructor() { 
        
        APIKeyOut.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>APIKeyOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APIKeyOut} obj Optional instance to populate.
     * @return {module:model/APIKeyOut} The populated <code>APIKeyOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APIKeyOut();

            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'Boolean');
            }
            if (data.hasOwnProperty('anonymized')) {
                obj['anonymized'] = ApiClient.convertToType(data['anonymized'], 'Boolean');
            }
            if (data.hasOwnProperty('apiKey')) {
                obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
            }
            if (data.hasOwnProperty('corporate')) {
                obj['corporate'] = ApiClient.convertToType(data['corporate'], 'Boolean');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('learnable')) {
                obj['learnable'] = ApiClient.convertToType(data['learnable'], 'Boolean');
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ApiClient.convertToType(data['partner'], 'Boolean');
            }
            if (data.hasOwnProperty('striped')) {
                obj['striped'] = ApiClient.convertToType(data['striped'], 'Boolean');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('vetted')) {
                obj['vetted'] = ApiClient.convertToType(data['vetted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APIKeyOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APIKeyOut</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiKey'] && !(typeof data['apiKey'] === 'string' || data['apiKey'] instanceof String)) {
            throw new Error("Expected the field `apiKey` to be a primitive type in the JSON string but got " + data['apiKey']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * The API Key has admin role.
 * @member {Boolean} admin
 */
APIKeyOut.prototype['admin'] = undefined;

/**
 * The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).
 * @member {Boolean} anonymized
 */
APIKeyOut.prototype['anonymized'] = undefined;

/**
 * The user API Key.
 * @member {String} apiKey
 */
APIKeyOut.prototype['apiKey'] = undefined;

/**
 * The API Key has role corporate (ex SWIFT payments instead of Stripe payments).
 * @member {Boolean} corporate
 */
APIKeyOut.prototype['corporate'] = undefined;

/**
 * The API Key is temporarily or permanently disabled.
 * @member {Boolean} disabled
 */
APIKeyOut.prototype['disabled'] = undefined;

/**
 * The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).
 * @member {Boolean} learnable
 */
APIKeyOut.prototype['learnable'] = undefined;

/**
 * The API Key has partner role.
 * @member {Boolean} partner
 */
APIKeyOut.prototype['partner'] = undefined;

/**
 * The API Key is associated to a valid Stripe account.
 * @member {Boolean} striped
 */
APIKeyOut.prototype['striped'] = undefined;

/**
 * The user identifier.
 * @member {String} userId
 */
APIKeyOut.prototype['userId'] = undefined;

/**
 * The API Key is vetted (assumed truthful) for machine learning.
 * @member {Boolean} vetted
 */
APIKeyOut.prototype['vetted'] = undefined;






export default APIKeyOut;

