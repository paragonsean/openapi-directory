/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FirstLastNameGeoIn from './FirstLastNameGeoIn';

/**
 * The CorridorIn model module.
 * @module model/CorridorIn
 * @version 2.0.24
 */
class CorridorIn {
    /**
     * Constructs a new <code>CorridorIn</code>.
     * Represent any transnational interaction between names (ex. remittance, communication, cross-border investment, airline travel
     * @alias module:model/CorridorIn
     */
    constructor() { 
        
        CorridorIn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CorridorIn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CorridorIn} obj Optional instance to populate.
     * @return {module:model/CorridorIn} The populated <code>CorridorIn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CorridorIn();

            if (data.hasOwnProperty('firstLastNameGeoFrom')) {
                obj['firstLastNameGeoFrom'] = FirstLastNameGeoIn.constructFromObject(data['firstLastNameGeoFrom']);
            }
            if (data.hasOwnProperty('firstLastNameGeoTo')) {
                obj['firstLastNameGeoTo'] = FirstLastNameGeoIn.constructFromObject(data['firstLastNameGeoTo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CorridorIn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CorridorIn</code>.
     */
    static validateJSON(data) {
        // validate the optional field `firstLastNameGeoFrom`
        if (data['firstLastNameGeoFrom']) { // data not null
          FirstLastNameGeoIn.validateJSON(data['firstLastNameGeoFrom']);
        }
        // validate the optional field `firstLastNameGeoTo`
        if (data['firstLastNameGeoTo']) { // data not null
          FirstLastNameGeoIn.validateJSON(data['firstLastNameGeoTo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}



/**
 * @member {module:model/FirstLastNameGeoIn} firstLastNameGeoFrom
 */
CorridorIn.prototype['firstLastNameGeoFrom'] = undefined;

/**
 * @member {module:model/FirstLastNameGeoIn} firstLastNameGeoTo
 */
CorridorIn.prototype['firstLastNameGeoTo'] = undefined;

/**
 * @member {String} id
 */
CorridorIn.prototype['id'] = undefined;






export default CorridorIn;

