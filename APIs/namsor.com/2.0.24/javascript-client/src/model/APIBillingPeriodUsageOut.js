/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The APIBillingPeriodUsageOut model module.
 * @module model/APIBillingPeriodUsageOut
 * @version 2.0.24
 */
class APIBillingPeriodUsageOut {
    /**
     * Constructs a new <code>APIBillingPeriodUsageOut</code>.
     * The current billing period.
     * @alias module:model/APIBillingPeriodUsageOut
     */
    constructor() { 
        
        APIBillingPeriodUsageOut.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>APIBillingPeriodUsageOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APIBillingPeriodUsageOut} obj Optional instance to populate.
     * @return {module:model/APIBillingPeriodUsageOut} The populated <code>APIBillingPeriodUsageOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APIBillingPeriodUsageOut();

            if (data.hasOwnProperty('apiKey')) {
                obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
            }
            if (data.hasOwnProperty('billingStatus')) {
                obj['billingStatus'] = ApiClient.convertToType(data['billingStatus'], 'String');
            }
            if (data.hasOwnProperty('hardLimit')) {
                obj['hardLimit'] = ApiClient.convertToType(data['hardLimit'], 'Number');
            }
            if (data.hasOwnProperty('periodEnded')) {
                obj['periodEnded'] = ApiClient.convertToType(data['periodEnded'], 'Number');
            }
            if (data.hasOwnProperty('periodStarted')) {
                obj['periodStarted'] = ApiClient.convertToType(data['periodStarted'], 'Number');
            }
            if (data.hasOwnProperty('softLimit')) {
                obj['softLimit'] = ApiClient.convertToType(data['softLimit'], 'Number');
            }
            if (data.hasOwnProperty('stripeCurrentPeriodEnd')) {
                obj['stripeCurrentPeriodEnd'] = ApiClient.convertToType(data['stripeCurrentPeriodEnd'], 'Number');
            }
            if (data.hasOwnProperty('stripeCurrentPeriodStart')) {
                obj['stripeCurrentPeriodStart'] = ApiClient.convertToType(data['stripeCurrentPeriodStart'], 'Number');
            }
            if (data.hasOwnProperty('subscriptionStarted')) {
                obj['subscriptionStarted'] = ApiClient.convertToType(data['subscriptionStarted'], 'Number');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = ApiClient.convertToType(data['usage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APIBillingPeriodUsageOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APIBillingPeriodUsageOut</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiKey'] && !(typeof data['apiKey'] === 'string' || data['apiKey'] instanceof String)) {
            throw new Error("Expected the field `apiKey` to be a primitive type in the JSON string but got " + data['apiKey']);
        }
        // ensure the json data is a string
        if (data['billingStatus'] && !(typeof data['billingStatus'] === 'string' || data['billingStatus'] instanceof String)) {
            throw new Error("Expected the field `billingStatus` to be a primitive type in the JSON string but got " + data['billingStatus']);
        }

        return true;
    }


}



/**
 * User API Key.
 * @member {String} apiKey
 */
APIBillingPeriodUsageOut.prototype['apiKey'] = undefined;

/**
 * Current period billing status ex OPEN.
 * @member {String} billingStatus
 */
APIBillingPeriodUsageOut.prototype['billingStatus'] = undefined;

/**
 * Current period hard limit (reaching the limit sends an email notification and blocks the API Key).
 * @member {Number} hardLimit
 */
APIBillingPeriodUsageOut.prototype['hardLimit'] = undefined;

/**
 * Datetime when the the plan's current period endend.
 * @member {Number} periodEnded
 */
APIBillingPeriodUsageOut.prototype['periodEnded'] = undefined;

/**
 * Datetime when the the plan's current period started.
 * @member {Number} periodStarted
 */
APIBillingPeriodUsageOut.prototype['periodStarted'] = undefined;

/**
 * Current period soft limit (reaching the limit sends an email notification).
 * @member {Number} softLimit
 */
APIBillingPeriodUsageOut.prototype['softLimit'] = undefined;

/**
 * Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.
 * @member {Number} stripeCurrentPeriodEnd
 */
APIBillingPeriodUsageOut.prototype['stripeCurrentPeriodEnd'] = undefined;

/**
 * Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.
 * @member {Number} stripeCurrentPeriodStart
 */
APIBillingPeriodUsageOut.prototype['stripeCurrentPeriodStart'] = undefined;

/**
 * Datetime when the user subscribed to the plan.
 * @member {Number} subscriptionStarted
 */
APIBillingPeriodUsageOut.prototype['subscriptionStarted'] = undefined;

/**
 * Current period usage in units (NB some API endpoints use more than one unit).
 * @member {Number} usage
 */
APIBillingPeriodUsageOut.prototype['usage'] = undefined;






export default APIBillingPeriodUsageOut;

