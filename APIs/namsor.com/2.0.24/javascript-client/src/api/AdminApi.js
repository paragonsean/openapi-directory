/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIClassifierTaxonomyOut from '../model/APIClassifierTaxonomyOut';
import APIClassifiersStatusOut from '../model/APIClassifiersStatusOut';
import APIKeyOut from '../model/APIKeyOut';
import APIPeriodUsageOut from '../model/APIPeriodUsageOut';
import APIServicesOut from '../model/APIServicesOut';
import APIUsageAggregatedOut from '../model/APIUsageAggregatedOut';
import APIUsageHistoryOut from '../model/APIUsageHistoryOut';
import RegionOut from '../model/RegionOut';
import SoftwareVersionOut from '../model/SoftwareVersionOut';

/**
* Admin service.
* @module api/AdminApi
* @version 2.0.24
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the anonymize operation.
     * @callback module:api/AdminApi~anonymizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/deactivate anonymization for a source.
     * @param {String} source 
     * @param {Boolean} anonymized 
     * @param {String} token 
     * @param {module:api/AdminApi~anonymizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIKeyOut}
     */
    anonymize(source, anonymized, token, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling anonymize");
      }
      // verify the required parameter 'anonymized' is set
      if (anonymized === undefined || anonymized === null) {
        throw new Error("Missing the required parameter 'anonymized' when calling anonymize");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling anonymize");
      }

      let pathParams = {
        'source': source,
        'anonymized': anonymized,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIKeyOut;
      return this.apiClient.callApi(
        '/api2/json/anonymize/{source}/{anonymized}/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyInfo operation.
     * @callback module:api/AdminApi~apiKeyInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read API Key info.
     * @param {module:api/AdminApi~apiKeyInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIKeyOut}
     */
    apiKeyInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIKeyOut;
      return this.apiClient.callApi(
        '/api2/json/apiKeyInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiStatus operation.
     * @callback module:api/AdminApi~apiStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIClassifiersStatusOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices.
     * @param {module:api/AdminApi~apiStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIClassifiersStatusOut}
     */
    apiStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIClassifiersStatusOut;
      return this.apiClient.callApi(
        '/api2/json/apiStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsage operation.
     * @callback module:api/AdminApi~apiUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPeriodUsageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print current API usage.
     * @param {module:api/AdminApi~apiUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPeriodUsageOut}
     */
    apiUsage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIPeriodUsageOut;
      return this.apiClient.callApi(
        '/api2/json/apiUsage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsageHistory operation.
     * @callback module:api/AdminApi~apiUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIUsageHistoryOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print historical API usage.
     * @param {module:api/AdminApi~apiUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIUsageHistoryOut}
     */
    apiUsageHistory(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIUsageHistoryOut;
      return this.apiClient.callApi(
        '/api2/json/apiUsageHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsageHistoryAggregate operation.
     * @callback module:api/AdminApi~apiUsageHistoryAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIUsageAggregatedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print historical API usage (in an aggregated view, by service, by day/hour/min).
     * @param {module:api/AdminApi~apiUsageHistoryAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIUsageAggregatedOut}
     */
    apiUsageHistoryAggregate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIUsageAggregatedOut;
      return this.apiClient.callApi(
        '/api2/json/apiUsageHistoryAggregate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the availableServices operation.
     * @callback module:api/AdminApi~availableServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIServicesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of classification services and usage cost in Units per classification (default is 1=ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers.
     * @param {module:api/AdminApi~availableServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIServicesOut}
     */
    availableServices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIServicesOut;
      return this.apiClient.callApi(
        '/api2/json/apiServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the learnable operation.
     * @callback module:api/AdminApi~learnableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIKeyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/deactivate learning from a source.
     * @param {String} source The API Key to set as learnable/non learnable.
     * @param {Boolean} learnable 
     * @param {String} token 
     * @param {module:api/AdminApi~learnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIKeyOut}
     */
    learnable(source, learnable, token, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling learnable");
      }
      // verify the required parameter 'learnable' is set
      if (learnable === undefined || learnable === null) {
        throw new Error("Missing the required parameter 'learnable' when calling learnable");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling learnable");
      }

      let pathParams = {
        'source': source,
        'learnable': learnable,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIKeyOut;
      return this.apiClient.callApi(
        '/api2/json/learnable/{source}/{learnable}/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regions operation.
     * @callback module:api/AdminApi~regionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print basic source statistics.
     * @param {module:api/AdminApi~regionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegionOut}
     */
    regions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegionOut;
      return this.apiClient.callApi(
        '/api2/json/regions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the softwareVersion operation.
     * @callback module:api/AdminApi~softwareVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareVersionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current software version
     * @param {module:api/AdminApi~softwareVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareVersionOut}
     */
    softwareVersion(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SoftwareVersionOut;
      return this.apiClient.callApi(
        '/api2/json/softwareVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taxonomyClasses operation.
     * @callback module:api/AdminApi~taxonomyClassesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIClassifierTaxonomyOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print the taxonomy classes valid for the given classifier.
     * @param {String} classifierName 
     * @param {module:api/AdminApi~taxonomyClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIClassifierTaxonomyOut}
     */
    taxonomyClasses(classifierName, callback) {
      let postBody = null;
      // verify the required parameter 'classifierName' is set
      if (classifierName === undefined || classifierName === null) {
        throw new Error("Missing the required parameter 'classifierName' when calling taxonomyClasses");
      }

      let pathParams = {
        'classifierName': classifierName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIClassifierTaxonomyOut;
      return this.apiClient.callApi(
        '/api2/json/taxonomyClasses/{classifierName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
