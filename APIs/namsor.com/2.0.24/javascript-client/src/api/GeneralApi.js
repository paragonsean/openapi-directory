/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchNameGeoIn from '../model/BatchNameGeoIn';
import BatchNameIn from '../model/BatchNameIn';
import BatchProperNounCategorizedOut from '../model/BatchProperNounCategorizedOut';
import ProperNounCategorizedOut from '../model/ProperNounCategorizedOut';

/**
* General service.
* @module api/GeneralApi
* @version 2.0.24
*/
export default class GeneralApi {

    /**
    * Constructs a new GeneralApi. 
    * @alias module:api/GeneralApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the nameType operation.
     * @callback module:api/GeneralApi~nameTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProperNounCategorizedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely type of a proper noun (personal name, brand name, place name etc.)
     * @param {String} properNoun 
     * @param {module:api/GeneralApi~nameTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProperNounCategorizedOut}
     */
    nameType(properNoun, callback) {
      let postBody = null;
      // verify the required parameter 'properNoun' is set
      if (properNoun === undefined || properNoun === null) {
        throw new Error("Missing the required parameter 'properNoun' when calling nameType");
      }

      let pathParams = {
        'properNoun': properNoun
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProperNounCategorizedOut;
      return this.apiClient.callApi(
        '/api2/json/nameType/{properNoun}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nameTypeBatch operation.
     * @callback module:api/GeneralApi~nameTypeBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchProperNounCategorizedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchNameIn} [batchNameIn] A list of proper names
     * @param {module:api/GeneralApi~nameTypeBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchProperNounCategorizedOut}
     */
    nameTypeBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchProperNounCategorizedOut;
      return this.apiClient.callApi(
        '/api2/json/nameTypeBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nameTypeGeo operation.
     * @callback module:api/GeneralApi~nameTypeGeoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProperNounCategorizedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely type of a proper noun (personal name, brand name, place name etc.)
     * @param {String} properNoun 
     * @param {String} countryIso2 
     * @param {module:api/GeneralApi~nameTypeGeoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProperNounCategorizedOut}
     */
    nameTypeGeo(properNoun, countryIso2, callback) {
      let postBody = null;
      // verify the required parameter 'properNoun' is set
      if (properNoun === undefined || properNoun === null) {
        throw new Error("Missing the required parameter 'properNoun' when calling nameTypeGeo");
      }
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling nameTypeGeo");
      }

      let pathParams = {
        'properNoun': properNoun,
        'countryIso2': countryIso2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProperNounCategorizedOut;
      return this.apiClient.callApi(
        '/api2/json/nameTypeGeo/{properNoun}/{countryIso2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nameTypeGeoBatch operation.
     * @callback module:api/GeneralApi~nameTypeGeoBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchProperNounCategorizedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchNameGeoIn} [batchNameGeoIn] A list of proper names
     * @param {module:api/GeneralApi~nameTypeGeoBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchProperNounCategorizedOut}
     */
    nameTypeGeoBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchProperNounCategorizedOut;
      return this.apiClient.callApi(
        '/api2/json/nameTypeGeoBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
