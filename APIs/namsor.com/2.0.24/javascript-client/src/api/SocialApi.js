/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchFirstLastNamePhoneCodedOut from '../model/BatchFirstLastNamePhoneCodedOut';
import BatchFirstLastNamePhoneNumberGeoIn from '../model/BatchFirstLastNamePhoneNumberGeoIn';
import BatchFirstLastNamePhoneNumberIn from '../model/BatchFirstLastNamePhoneNumberIn';
import FirstLastNamePhoneCodedOut from '../model/FirstLastNamePhoneCodedOut';

/**
* Social service.
* @module api/SocialApi
* @version 2.0.24
*/
export default class SocialApi {

    /**
    * Constructs a new SocialApi. 
    * @alias module:api/SocialApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the phoneCode operation.
     * @callback module:api/SocialApi~phoneCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNamePhoneCodedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {String} phoneNumber 
     * @param {module:api/SocialApi~phoneCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNamePhoneCodedOut}
     */
    phoneCode(firstName, lastName, phoneNumber, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling phoneCode");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling phoneCode");
      }
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber === undefined || phoneNumber === null) {
        throw new Error("Missing the required parameter 'phoneNumber' when calling phoneCode");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName,
        'phoneNumber': phoneNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNamePhoneCodedOut;
      return this.apiClient.callApi(
        '/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phoneCodeBatch operation.
     * @callback module:api/SocialApi~phoneCodeBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNamePhoneCodedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNamePhoneNumberIn} [batchFirstLastNamePhoneNumberIn] A list of personal names
     * @param {module:api/SocialApi~phoneCodeBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNamePhoneCodedOut}
     */
    phoneCodeBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNamePhoneNumberIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNamePhoneCodedOut;
      return this.apiClient.callApi(
        '/api2/json/phoneCodeBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phoneCodeGeo operation.
     * @callback module:api/SocialApi~phoneCodeGeoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNamePhoneCodedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {String} phoneNumber 
     * @param {String} countryIso2 
     * @param {module:api/SocialApi~phoneCodeGeoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNamePhoneCodedOut}
     */
    phoneCodeGeo(firstName, lastName, phoneNumber, countryIso2, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling phoneCodeGeo");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling phoneCodeGeo");
      }
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber === undefined || phoneNumber === null) {
        throw new Error("Missing the required parameter 'phoneNumber' when calling phoneCodeGeo");
      }
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling phoneCodeGeo");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName,
        'phoneNumber': phoneNumber,
        'countryIso2': countryIso2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNamePhoneCodedOut;
      return this.apiClient.callApi(
        '/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phoneCodeGeoBatch operation.
     * @callback module:api/SocialApi~phoneCodeGeoBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNamePhoneCodedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNamePhoneNumberGeoIn} [batchFirstLastNamePhoneNumberGeoIn] A list of personal names
     * @param {module:api/SocialApi~phoneCodeGeoBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNamePhoneCodedOut}
     */
    phoneCodeGeoBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNamePhoneNumberGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNamePhoneCodedOut;
      return this.apiClient.callApi(
        '/api2/json/phoneCodeGeoBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phoneCodeGeoFeedbackLoop operation.
     * @callback module:api/SocialApi~phoneCodeGeoFeedbackLoopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNamePhoneCodedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {String} phoneNumber 
     * @param {String} phoneNumberE164 
     * @param {String} countryIso2 
     * @param {module:api/SocialApi~phoneCodeGeoFeedbackLoopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNamePhoneCodedOut}
     */
    phoneCodeGeoFeedbackLoop(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling phoneCodeGeoFeedbackLoop");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling phoneCodeGeoFeedbackLoop");
      }
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber === undefined || phoneNumber === null) {
        throw new Error("Missing the required parameter 'phoneNumber' when calling phoneCodeGeoFeedbackLoop");
      }
      // verify the required parameter 'phoneNumberE164' is set
      if (phoneNumberE164 === undefined || phoneNumberE164 === null) {
        throw new Error("Missing the required parameter 'phoneNumberE164' when calling phoneCodeGeoFeedbackLoop");
      }
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling phoneCodeGeoFeedbackLoop");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName,
        'phoneNumber': phoneNumber,
        'phoneNumberE164': phoneNumberE164,
        'countryIso2': countryIso2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNamePhoneCodedOut;
      return this.apiClient.callApi(
        '/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
