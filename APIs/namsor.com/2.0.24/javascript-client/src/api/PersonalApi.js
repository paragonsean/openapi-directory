/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchCorridorIn from '../model/BatchCorridorIn';
import BatchCorridorOut from '../model/BatchCorridorOut';
import BatchFirstLastNameDiasporaedOut from '../model/BatchFirstLastNameDiasporaedOut';
import BatchFirstLastNameGenderedOut from '../model/BatchFirstLastNameGenderedOut';
import BatchFirstLastNameGeoIn from '../model/BatchFirstLastNameGeoIn';
import BatchFirstLastNameGeoSubclassificationOut from '../model/BatchFirstLastNameGeoSubclassificationOut';
import BatchFirstLastNameGeoZippedIn from '../model/BatchFirstLastNameGeoZippedIn';
import BatchFirstLastNameIn from '../model/BatchFirstLastNameIn';
import BatchFirstLastNameOriginedOut from '../model/BatchFirstLastNameOriginedOut';
import BatchFirstLastNameUSRaceEthnicityOut from '../model/BatchFirstLastNameUSRaceEthnicityOut';
import BatchPersonalNameGenderedOut from '../model/BatchPersonalNameGenderedOut';
import BatchPersonalNameGeoIn from '../model/BatchPersonalNameGeoIn';
import BatchPersonalNameGeoOut from '../model/BatchPersonalNameGeoOut';
import BatchPersonalNameGeoSubclassificationOut from '../model/BatchPersonalNameGeoSubclassificationOut';
import BatchPersonalNameGeoSubdivisionIn from '../model/BatchPersonalNameGeoSubdivisionIn';
import BatchPersonalNameIn from '../model/BatchPersonalNameIn';
import BatchPersonalNameParsedOut from '../model/BatchPersonalNameParsedOut';
import BatchPersonalNameReligionedOut from '../model/BatchPersonalNameReligionedOut';
import CorridorOut from '../model/CorridorOut';
import FirstLastNameDiasporaedOut from '../model/FirstLastNameDiasporaedOut';
import FirstLastNameGenderedOut from '../model/FirstLastNameGenderedOut';
import FirstLastNameGeoSubclassificationOut from '../model/FirstLastNameGeoSubclassificationOut';
import FirstLastNameOriginedOut from '../model/FirstLastNameOriginedOut';
import FirstLastNameUSRaceEthnicityOut from '../model/FirstLastNameUSRaceEthnicityOut';
import PersonalNameGenderedOut from '../model/PersonalNameGenderedOut';
import PersonalNameGeoOut from '../model/PersonalNameGeoOut';
import PersonalNameParsedOut from '../model/PersonalNameParsedOut';
import PersonalNameReligionedOut from '../model/PersonalNameReligionedOut';

/**
* Personal service.
* @module api/PersonalApi
* @version 2.0.24
*/
export default class PersonalApi {

    /**
    * Constructs a new PersonalApi. 
    * @alias module:api/PersonalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the corridor operation.
     * @callback module:api/PersonalApi~corridorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CorridorOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
     * @param {String} countryIso2From 
     * @param {String} firstNameFrom 
     * @param {String} lastNameFrom 
     * @param {String} countryIso2To 
     * @param {String} firstNameTo 
     * @param {String} lastNameTo 
     * @param {module:api/PersonalApi~corridorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CorridorOut}
     */
    corridor(countryIso2From, firstNameFrom, lastNameFrom, countryIso2To, firstNameTo, lastNameTo, callback) {
      let postBody = null;
      // verify the required parameter 'countryIso2From' is set
      if (countryIso2From === undefined || countryIso2From === null) {
        throw new Error("Missing the required parameter 'countryIso2From' when calling corridor");
      }
      // verify the required parameter 'firstNameFrom' is set
      if (firstNameFrom === undefined || firstNameFrom === null) {
        throw new Error("Missing the required parameter 'firstNameFrom' when calling corridor");
      }
      // verify the required parameter 'lastNameFrom' is set
      if (lastNameFrom === undefined || lastNameFrom === null) {
        throw new Error("Missing the required parameter 'lastNameFrom' when calling corridor");
      }
      // verify the required parameter 'countryIso2To' is set
      if (countryIso2To === undefined || countryIso2To === null) {
        throw new Error("Missing the required parameter 'countryIso2To' when calling corridor");
      }
      // verify the required parameter 'firstNameTo' is set
      if (firstNameTo === undefined || firstNameTo === null) {
        throw new Error("Missing the required parameter 'firstNameTo' when calling corridor");
      }
      // verify the required parameter 'lastNameTo' is set
      if (lastNameTo === undefined || lastNameTo === null) {
        throw new Error("Missing the required parameter 'lastNameTo' when calling corridor");
      }

      let pathParams = {
        'countryIso2From': countryIso2From,
        'firstNameFrom': firstNameFrom,
        'lastNameFrom': lastNameFrom,
        'countryIso2To': countryIso2To,
        'firstNameTo': firstNameTo,
        'lastNameTo': lastNameTo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CorridorOut;
      return this.apiClient.callApi(
        '/api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the corridorBatch operation.
     * @callback module:api/PersonalApi~corridorBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchCorridorOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchCorridorIn} [batchCorridorIn] A list of name pairs, with country code (nameFrom -> nameTo).
     * @param {module:api/PersonalApi~corridorBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchCorridorOut}
     */
    corridorBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchCorridorIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchCorridorOut;
      return this.apiClient.callApi(
        '/api2/json/corridorBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the country operation.
     * @callback module:api/PersonalApi~countryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameGeoOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
     * @param {String} personalNameFull 
     * @param {module:api/PersonalApi~countryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameGeoOut}
     */
    country(personalNameFull, callback) {
      let postBody = null;
      // verify the required parameter 'personalNameFull' is set
      if (personalNameFull === undefined || personalNameFull === null) {
        throw new Error("Missing the required parameter 'personalNameFull' when calling country");
      }

      let pathParams = {
        'personalNameFull': personalNameFull
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameGeoOut;
      return this.apiClient.callApi(
        '/api2/json/country/{personalNameFull}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countryBatch operation.
     * @callback module:api/PersonalApi~countryBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameGeoOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameIn} [batchPersonalNameIn] A list of personal names
     * @param {module:api/PersonalApi~countryBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameGeoOut}
     */
    countryBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameGeoOut;
      return this.apiClient.callApi(
        '/api2/json/countryBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaspora operation.
     * @callback module:api/PersonalApi~diasporaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameDiasporaedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
     * @param {String} countryIso2 
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {module:api/PersonalApi~diasporaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameDiasporaedOut}
     */
    diaspora(countryIso2, firstName, lastName, callback) {
      let postBody = null;
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling diaspora");
      }
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling diaspora");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling diaspora");
      }

      let pathParams = {
        'countryIso2': countryIso2,
        'firstName': firstName,
        'lastName': lastName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameDiasporaedOut;
      return this.apiClient.callApi(
        '/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diasporaBatch operation.
     * @callback module:api/PersonalApi~diasporaBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameDiasporaedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameGeoIn} [batchFirstLastNameGeoIn] A list of personal names
     * @param {module:api/PersonalApi~diasporaBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameDiasporaedOut}
     */
    diasporaBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameDiasporaedOut;
      return this.apiClient.callApi(
        '/api2/json/diasporaBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gender operation.
     * @callback module:api/PersonalApi~genderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a name.
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {module:api/PersonalApi~genderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameGenderedOut}
     */
    gender(firstName, lastName, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling gender");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling gender");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/gender/{firstName}/{lastName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gender1 operation.
     * @callback module:api/PersonalApi~gender1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a just a fiven name, assuming default 'US' local context. Please use preferably full names and local geographic context for better accuracy.
     * @param {String} firstName 
     * @param {module:api/PersonalApi~gender1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameGenderedOut}
     */
    gender1(firstName, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling gender1");
      }

      let pathParams = {
        'firstName': firstName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/gender/{firstName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderBatch operation.
     * @callback module:api/PersonalApi~genderBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of up to 100 names, detecting automatically the cultural context.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameIn} [batchFirstLastNameIn] A list of personal names
     * @param {module:api/PersonalApi~genderBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameGenderedOut}
     */
    genderBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderFull operation.
     * @callback module:api/PersonalApi~genderFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a full name, ex. John H. Smith
     * @param {String} fullName 
     * @param {module:api/PersonalApi~genderFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameGenderedOut}
     */
    genderFull(fullName, callback) {
      let postBody = null;
      // verify the required parameter 'fullName' is set
      if (fullName === undefined || fullName === null) {
        throw new Error("Missing the required parameter 'fullName' when calling genderFull");
      }

      let pathParams = {
        'fullName': fullName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderFull/{fullName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderFullBatch operation.
     * @callback module:api/PersonalApi~genderFullBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameIn} [batchPersonalNameIn] A list of personal names
     * @param {module:api/PersonalApi~genderFullBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameGenderedOut}
     */
    genderFullBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderFullBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderFullGeo operation.
     * @callback module:api/PersonalApi~genderFullGeoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a full name, given a local context (ISO2 country code).
     * @param {String} fullName 
     * @param {String} countryIso2 
     * @param {module:api/PersonalApi~genderFullGeoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameGenderedOut}
     */
    genderFullGeo(fullName, countryIso2, callback) {
      let postBody = null;
      // verify the required parameter 'fullName' is set
      if (fullName === undefined || fullName === null) {
        throw new Error("Missing the required parameter 'fullName' when calling genderFullGeo");
      }
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling genderFullGeo");
      }

      let pathParams = {
        'fullName': fullName,
        'countryIso2': countryIso2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderFullGeo/{fullName}/{countryIso2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderFullGeoBatch operation.
     * @callback module:api/PersonalApi~genderFullGeoBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameGeoIn} [batchPersonalNameGeoIn] A list of personal names, with a country ISO2 code
     * @param {module:api/PersonalApi~genderFullGeoBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameGenderedOut}
     */
    genderFullGeoBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderFullGeoBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderGeo operation.
     * @callback module:api/PersonalApi~genderGeoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a name, given a local context (ISO2 country code).
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {String} countryIso2 
     * @param {module:api/PersonalApi~genderGeoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameGenderedOut}
     */
    genderGeo(firstName, lastName, countryIso2, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling genderGeo");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling genderGeo");
      }
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling genderGeo");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName,
        'countryIso2': countryIso2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderGeoBatch operation.
     * @callback module:api/PersonalApi~genderGeoBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameGeoIn} [batchFirstLastNameGeoIn] A list of names, with country code.
     * @param {module:api/PersonalApi~genderGeoBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameGenderedOut}
     */
    genderGeoBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderGeoBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the origin operation.
     * @callback module:api/PersonalApi~originCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameOriginedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {module:api/PersonalApi~originCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameOriginedOut}
     */
    origin(firstName, lastName, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling origin");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling origin");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameOriginedOut;
      return this.apiClient.callApi(
        '/api2/json/origin/{firstName}/{lastName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the originBatch operation.
     * @callback module:api/PersonalApi~originBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameOriginedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameIn} [batchFirstLastNameIn] A list of personal names
     * @param {module:api/PersonalApi~originBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameOriginedOut}
     */
    originBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameOriginedOut;
      return this.apiClient.callApi(
        '/api2/json/originBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseName operation.
     * @callback module:api/PersonalApi~parseNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
     * @param {String} nameFull 
     * @param {module:api/PersonalApi~parseNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameParsedOut}
     */
    parseName(nameFull, callback) {
      let postBody = null;
      // verify the required parameter 'nameFull' is set
      if (nameFull === undefined || nameFull === null) {
        throw new Error("Missing the required parameter 'nameFull' when calling parseName");
      }

      let pathParams = {
        'nameFull': nameFull
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameParsedOut;
      return this.apiClient.callApi(
        '/api2/json/parseName/{nameFull}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseNameBatch operation.
     * @callback module:api/PersonalApi~parseNameBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameIn} [batchPersonalNameIn] A list of personal names
     * @param {module:api/PersonalApi~parseNameBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameParsedOut}
     */
    parseNameBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameParsedOut;
      return this.apiClient.callApi(
        '/api2/json/parseNameBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseNameGeo operation.
     * @callback module:api/PersonalApi~parseNameGeoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
     * @param {String} nameFull 
     * @param {String} countryIso2 
     * @param {module:api/PersonalApi~parseNameGeoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameParsedOut}
     */
    parseNameGeo(nameFull, countryIso2, callback) {
      let postBody = null;
      // verify the required parameter 'nameFull' is set
      if (nameFull === undefined || nameFull === null) {
        throw new Error("Missing the required parameter 'nameFull' when calling parseNameGeo");
      }
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling parseNameGeo");
      }

      let pathParams = {
        'nameFull': nameFull,
        'countryIso2': countryIso2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameParsedOut;
      return this.apiClient.callApi(
        '/api2/json/parseName/{nameFull}/{countryIso2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseNameGeoBatch operation.
     * @callback module:api/PersonalApi~parseNameGeoBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameGeoIn} [batchPersonalNameGeoIn] A list of personal names
     * @param {module:api/PersonalApi~parseNameGeoBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameParsedOut}
     */
    parseNameGeoBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameParsedOut;
      return this.apiClient.callApi(
        '/api2/json/parseNameGeoBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the religionFull operation.
     * @callback module:api/PersonalApi~religionFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameReligionedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
     * @param {String} countryIso2 
     * @param {String} subDivisionIso31662 
     * @param {String} personalNameFull 
     * @param {module:api/PersonalApi~religionFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameReligionedOut}
     */
    religionFull(countryIso2, subDivisionIso31662, personalNameFull, callback) {
      let postBody = null;
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling religionFull");
      }
      // verify the required parameter 'subDivisionIso31662' is set
      if (subDivisionIso31662 === undefined || subDivisionIso31662 === null) {
        throw new Error("Missing the required parameter 'subDivisionIso31662' when calling religionFull");
      }
      // verify the required parameter 'personalNameFull' is set
      if (personalNameFull === undefined || personalNameFull === null) {
        throw new Error("Missing the required parameter 'personalNameFull' when calling religionFull");
      }

      let pathParams = {
        'countryIso2': countryIso2,
        'subDivisionIso31662': subDivisionIso31662,
        'personalNameFull': personalNameFull
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameReligionedOut;
      return this.apiClient.callApi(
        '/api2/json/religionFull/{countryIso2}/{subDivisionIso31662}/{personalNameFull}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the religionFullBatch operation.
     * @callback module:api/PersonalApi~religionFullBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameReligionedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameGeoSubdivisionIn} [batchPersonalNameGeoSubdivisionIn] A list of personal names
     * @param {module:api/PersonalApi~religionFullBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameReligionedOut}
     */
    religionFullBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameGeoSubdivisionIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameReligionedOut;
      return this.apiClient.callApi(
        '/api2/json/religionFullBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subclassification operation.
     * @callback module:api/PersonalApi~subclassificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameGeoSubclassificationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
     * @param {String} countryIso2 
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {module:api/PersonalApi~subclassificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameGeoSubclassificationOut}
     */
    subclassification(countryIso2, firstName, lastName, callback) {
      let postBody = null;
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling subclassification");
      }
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling subclassification");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling subclassification");
      }

      let pathParams = {
        'countryIso2': countryIso2,
        'firstName': firstName,
        'lastName': lastName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameGeoSubclassificationOut;
      return this.apiClient.callApi(
        '/api2/json/subclassification/{countryIso2}/{firstName}/{lastName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subclassificationBatch operation.
     * @callback module:api/PersonalApi~subclassificationBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameGeoSubclassificationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameGeoIn} [batchFirstLastNameGeoIn] A list of personal names
     * @param {module:api/PersonalApi~subclassificationBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameGeoSubclassificationOut}
     */
    subclassificationBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameGeoSubclassificationOut;
      return this.apiClient.callApi(
        '/api2/json/subclassificationBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subclassificationFull operation.
     * @callback module:api/PersonalApi~subclassificationFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameGeoSubclassificationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
     * @param {String} countryIso2 
     * @param {String} fullName 
     * @param {module:api/PersonalApi~subclassificationFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameGeoSubclassificationOut}
     */
    subclassificationFull(countryIso2, fullName, callback) {
      let postBody = null;
      // verify the required parameter 'countryIso2' is set
      if (countryIso2 === undefined || countryIso2 === null) {
        throw new Error("Missing the required parameter 'countryIso2' when calling subclassificationFull");
      }
      // verify the required parameter 'fullName' is set
      if (fullName === undefined || fullName === null) {
        throw new Error("Missing the required parameter 'fullName' when calling subclassificationFull");
      }

      let pathParams = {
        'countryIso2': countryIso2,
        'fullName': fullName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameGeoSubclassificationOut;
      return this.apiClient.callApi(
        '/api2/json/subclassificationFull/{countryIso2}/{fullName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subclassificationFullBatch operation.
     * @callback module:api/PersonalApi~subclassificationFullBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameGeoSubclassificationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameGeoIn} [batchPersonalNameGeoIn] A list of personal names
     * @param {module:api/PersonalApi~subclassificationFullBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameGeoSubclassificationOut}
     */
    subclassificationFullBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameGeoSubclassificationOut;
      return this.apiClient.callApi(
        '/api2/json/subclassificationFullBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usRaceEthnicity operation.
     * @callback module:api/PersonalApi~usRaceEthnicityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameUSRaceEthnicityOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {module:api/PersonalApi~usRaceEthnicityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameUSRaceEthnicityOut}
     */
    usRaceEthnicity(firstName, lastName, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling usRaceEthnicity");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling usRaceEthnicity");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameUSRaceEthnicityOut;
      return this.apiClient.callApi(
        '/api2/json/usRaceEthnicity/{firstName}/{lastName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usRaceEthnicityBatch operation.
     * @callback module:api/PersonalApi~usRaceEthnicityBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameUSRaceEthnicityOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameGeoIn} [batchFirstLastNameGeoIn] A list of personal names
     * @param {module:api/PersonalApi~usRaceEthnicityBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameUSRaceEthnicityOut}
     */
    usRaceEthnicityBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameUSRaceEthnicityOut;
      return this.apiClient.callApi(
        '/api2/json/usRaceEthnicityBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usRaceEthnicityZIP5 operation.
     * @callback module:api/PersonalApi~usRaceEthnicityZIP5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameUSRaceEthnicityOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {String} zip5Code 
     * @param {module:api/PersonalApi~usRaceEthnicityZIP5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameUSRaceEthnicityOut}
     */
    usRaceEthnicityZIP5(firstName, lastName, zip5Code, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling usRaceEthnicityZIP5");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling usRaceEthnicityZIP5");
      }
      // verify the required parameter 'zip5Code' is set
      if (zip5Code === undefined || zip5Code === null) {
        throw new Error("Missing the required parameter 'zip5Code' when calling usRaceEthnicityZIP5");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName,
        'zip5Code': zip5Code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameUSRaceEthnicityOut;
      return this.apiClient.callApi(
        '/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usZipRaceEthnicityBatch operation.
     * @callback module:api/PersonalApi~usZipRaceEthnicityBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameUSRaceEthnicityOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameGeoZippedIn} [batchFirstLastNameGeoZippedIn] A list of personal names
     * @param {module:api/PersonalApi~usZipRaceEthnicityBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameUSRaceEthnicityOut}
     */
    usZipRaceEthnicityBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameGeoZippedIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameUSRaceEthnicityOut;
      return this.apiClient.callApi(
        '/api2/json/usZipRaceEthnicityBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
