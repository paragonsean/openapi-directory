/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchFirstLastNameGenderIn from '../model/BatchFirstLastNameGenderIn';
import BatchFirstLastNameGenderedOut from '../model/BatchFirstLastNameGenderedOut';
import BatchFirstLastNameIn from '../model/BatchFirstLastNameIn';
import BatchMatchPersonalFirstLastNameIn from '../model/BatchMatchPersonalFirstLastNameIn';
import BatchNameMatchCandidatesOut from '../model/BatchNameMatchCandidatesOut';
import BatchNameMatchedOut from '../model/BatchNameMatchedOut';
import BatchPersonalNameGenderedOut from '../model/BatchPersonalNameGenderedOut';
import BatchPersonalNameIn from '../model/BatchPersonalNameIn';
import BatchPersonalNameParsedOut from '../model/BatchPersonalNameParsedOut';
import FirstLastNameGenderedOut from '../model/FirstLastNameGenderedOut';
import NameMatchCandidatesOut from '../model/NameMatchCandidatesOut';
import NameMatchedOut from '../model/NameMatchedOut';
import PersonalNameGenderedOut from '../model/PersonalNameGenderedOut';
import PersonalNameParsedOut from '../model/PersonalNameParsedOut';

/**
* Chinese service.
* @module api/ChineseApi
* @version 2.0.24
*/
export default class ChineseApi {

    /**
    * Constructs a new ChineseApi. 
    * @alias module:api/ChineseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the chineseNameCandidates operation.
     * @callback module:api/ChineseApi~chineseNameCandidatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
     * @param {String} chineseSurnameLatin 
     * @param {String} chineseGivenNameLatin 
     * @param {module:api/ChineseApi~chineseNameCandidatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameMatchCandidatesOut}
     */
    chineseNameCandidates(chineseSurnameLatin, chineseGivenNameLatin, callback) {
      let postBody = null;
      // verify the required parameter 'chineseSurnameLatin' is set
      if (chineseSurnameLatin === undefined || chineseSurnameLatin === null) {
        throw new Error("Missing the required parameter 'chineseSurnameLatin' when calling chineseNameCandidates");
      }
      // verify the required parameter 'chineseGivenNameLatin' is set
      if (chineseGivenNameLatin === undefined || chineseGivenNameLatin === null) {
        throw new Error("Missing the required parameter 'chineseGivenNameLatin' when calling chineseNameCandidates");
      }

      let pathParams = {
        'chineseSurnameLatin': chineseSurnameLatin,
        'chineseGivenNameLatin': chineseGivenNameLatin
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NameMatchCandidatesOut;
      return this.apiClient.callApi(
        '/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chineseNameCandidatesBatch operation.
     * @callback module:api/ChineseApi~chineseNameCandidatesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchNameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameIn} [batchFirstLastNameIn] A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
     * @param {module:api/ChineseApi~chineseNameCandidatesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchNameMatchCandidatesOut}
     */
    chineseNameCandidatesBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchNameMatchCandidatesOut;
      return this.apiClient.callApi(
        '/api2/json/chineseNameCandidatesBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chineseNameCandidatesGenderBatch operation.
     * @callback module:api/ChineseApi~chineseNameCandidatesGenderBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchNameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameGenderIn} [batchFirstLastNameGenderIn] A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
     * @param {module:api/ChineseApi~chineseNameCandidatesGenderBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchNameMatchCandidatesOut}
     */
    chineseNameCandidatesGenderBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameGenderIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchNameMatchCandidatesOut;
      return this.apiClient.callApi(
        '/api2/json/chineseNameCandidatesGenderBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chineseNameGenderCandidates operation.
     * @callback module:api/ChineseApi~chineseNameGenderCandidatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NameMatchCandidatesOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')
     * @param {String} chineseSurnameLatin 
     * @param {String} chineseGivenNameLatin 
     * @param {String} knownGender 
     * @param {module:api/ChineseApi~chineseNameGenderCandidatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameMatchCandidatesOut}
     */
    chineseNameGenderCandidates(chineseSurnameLatin, chineseGivenNameLatin, knownGender, callback) {
      let postBody = null;
      // verify the required parameter 'chineseSurnameLatin' is set
      if (chineseSurnameLatin === undefined || chineseSurnameLatin === null) {
        throw new Error("Missing the required parameter 'chineseSurnameLatin' when calling chineseNameGenderCandidates");
      }
      // verify the required parameter 'chineseGivenNameLatin' is set
      if (chineseGivenNameLatin === undefined || chineseGivenNameLatin === null) {
        throw new Error("Missing the required parameter 'chineseGivenNameLatin' when calling chineseNameGenderCandidates");
      }
      // verify the required parameter 'knownGender' is set
      if (knownGender === undefined || knownGender === null) {
        throw new Error("Missing the required parameter 'knownGender' when calling chineseNameGenderCandidates");
      }

      let pathParams = {
        'chineseSurnameLatin': chineseSurnameLatin,
        'chineseGivenNameLatin': chineseGivenNameLatin,
        'knownGender': knownGender
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NameMatchCandidatesOut;
      return this.apiClient.callApi(
        '/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chineseNameMatch operation.
     * @callback module:api/ChineseApi~chineseNameMatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NameMatchedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
     * @param {String} chineseSurnameLatin 
     * @param {String} chineseGivenNameLatin 
     * @param {String} chineseName 
     * @param {module:api/ChineseApi~chineseNameMatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NameMatchedOut}
     */
    chineseNameMatch(chineseSurnameLatin, chineseGivenNameLatin, chineseName, callback) {
      let postBody = null;
      // verify the required parameter 'chineseSurnameLatin' is set
      if (chineseSurnameLatin === undefined || chineseSurnameLatin === null) {
        throw new Error("Missing the required parameter 'chineseSurnameLatin' when calling chineseNameMatch");
      }
      // verify the required parameter 'chineseGivenNameLatin' is set
      if (chineseGivenNameLatin === undefined || chineseGivenNameLatin === null) {
        throw new Error("Missing the required parameter 'chineseGivenNameLatin' when calling chineseNameMatch");
      }
      // verify the required parameter 'chineseName' is set
      if (chineseName === undefined || chineseName === null) {
        throw new Error("Missing the required parameter 'chineseName' when calling chineseNameMatch");
      }

      let pathParams = {
        'chineseSurnameLatin': chineseSurnameLatin,
        'chineseGivenNameLatin': chineseGivenNameLatin,
        'chineseName': chineseName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NameMatchedOut;
      return this.apiClient.callApi(
        '/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chineseNameMatchBatch operation.
     * @callback module:api/ChineseApi~chineseNameMatchBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchNameMatchedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchMatchPersonalFirstLastNameIn} [batchMatchPersonalFirstLastNameIn] A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
     * @param {module:api/ChineseApi~chineseNameMatchBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchNameMatchedOut}
     */
    chineseNameMatchBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchMatchPersonalFirstLastNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchNameMatchedOut;
      return this.apiClient.callApi(
        '/api2/json/chineseNameMatchBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderChineseName operation.
     * @callback module:api/ChineseApi~genderChineseNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a Chinese full name ex. 王晓明
     * @param {String} chineseName 
     * @param {module:api/ChineseApi~genderChineseNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameGenderedOut}
     */
    genderChineseName(chineseName, callback) {
      let postBody = null;
      // verify the required parameter 'chineseName' is set
      if (chineseName === undefined || chineseName === null) {
        throw new Error("Missing the required parameter 'chineseName' when calling genderChineseName");
      }

      let pathParams = {
        'chineseName': chineseName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderChineseName/{chineseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderChineseNameBatch operation.
     * @callback module:api/ChineseApi~genderChineseNameBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of up to 100 full names ex. 王晓明
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameIn} [batchPersonalNameIn] A list of personal names, with a country ISO2 code
     * @param {module:api/ChineseApi~genderChineseNameBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameGenderedOut}
     */
    genderChineseNameBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderChineseNameBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderChineseNamePinyin operation.
     * @callback module:api/ChineseApi~genderChineseNamePinyinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of a Chinese name in LATIN (Pinyin).
     * @param {String} chineseSurnameLatin 
     * @param {String} chineseGivenNameLatin 
     * @param {module:api/ChineseApi~genderChineseNamePinyinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameGenderedOut}
     */
    genderChineseNamePinyin(chineseSurnameLatin, chineseGivenNameLatin, callback) {
      let postBody = null;
      // verify the required parameter 'chineseSurnameLatin' is set
      if (chineseSurnameLatin === undefined || chineseSurnameLatin === null) {
        throw new Error("Missing the required parameter 'chineseSurnameLatin' when calling genderChineseNamePinyin");
      }
      // verify the required parameter 'chineseGivenNameLatin' is set
      if (chineseGivenNameLatin === undefined || chineseGivenNameLatin === null) {
        throw new Error("Missing the required parameter 'chineseGivenNameLatin' when calling genderChineseNamePinyin");
      }

      let pathParams = {
        'chineseSurnameLatin': chineseSurnameLatin,
        'chineseGivenNameLatin': chineseGivenNameLatin
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genderChineseNamePinyinBatch operation.
     * @callback module:api/ChineseApi~genderChineseNamePinyinBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameGenderedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameIn} [batchFirstLastNameIn] A list of names, with country code.
     * @param {module:api/ChineseApi~genderChineseNamePinyinBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameGenderedOut}
     */
    genderChineseNamePinyinBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameGenderedOut;
      return this.apiClient.callApi(
        '/api2/json/genderChineseNamePinyinBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseChineseName operation.
     * @callback module:api/ChineseApi~parseChineseNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)
     * @param {String} chineseName 
     * @param {module:api/ChineseApi~parseChineseNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameParsedOut}
     */
    parseChineseName(chineseName, callback) {
      let postBody = null;
      // verify the required parameter 'chineseName' is set
      if (chineseName === undefined || chineseName === null) {
        throw new Error("Missing the required parameter 'chineseName' when calling parseChineseName");
      }

      let pathParams = {
        'chineseName': chineseName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameParsedOut;
      return this.apiClient.callApi(
        '/api2/json/parseChineseName/{chineseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseChineseNameBatch operation.
     * @callback module:api/ChineseApi~parseChineseNameBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameIn} [batchPersonalNameIn] A list of personal names
     * @param {module:api/ChineseApi~parseChineseNameBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameParsedOut}
     */
    parseChineseNameBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameParsedOut;
      return this.apiClient.callApi(
        '/api2/json/parseChineseNameBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinyinChineseName operation.
     * @callback module:api/ChineseApi~pinyinChineseNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)
     * @param {String} chineseName 
     * @param {module:api/ChineseApi~pinyinChineseNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameParsedOut}
     */
    pinyinChineseName(chineseName, callback) {
      let postBody = null;
      // verify the required parameter 'chineseName' is set
      if (chineseName === undefined || chineseName === null) {
        throw new Error("Missing the required parameter 'chineseName' when calling pinyinChineseName");
      }

      let pathParams = {
        'chineseName': chineseName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameParsedOut;
      return this.apiClient.callApi(
        '/api2/json/pinyinChineseName/{chineseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinyinChineseNameBatch operation.
     * @callback module:api/ChineseApi~pinyinChineseNameBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameParsedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameIn} [batchPersonalNameIn] A list of Chinese names
     * @param {module:api/ChineseApi~pinyinChineseNameBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameParsedOut}
     */
    pinyinChineseNameBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameParsedOut;
      return this.apiClient.callApi(
        '/api2/json/pinyinChineseNameBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
