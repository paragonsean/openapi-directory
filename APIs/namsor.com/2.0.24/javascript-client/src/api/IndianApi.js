/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchFirstLastNameGeoIn from '../model/BatchFirstLastNameGeoIn';
import BatchFirstLastNameGeoSubclassificationOut from '../model/BatchFirstLastNameGeoSubclassificationOut';
import BatchPersonalNameCastegroupOut from '../model/BatchPersonalNameCastegroupOut';
import BatchPersonalNameGeoIn from '../model/BatchPersonalNameGeoIn';
import BatchPersonalNameGeoSubclassificationOut from '../model/BatchPersonalNameGeoSubclassificationOut';
import BatchPersonalNameReligionedOut from '../model/BatchPersonalNameReligionedOut';
import BatchPersonalNameSubdivisionIn from '../model/BatchPersonalNameSubdivisionIn';
import FirstLastNameGeoSubclassificationOut from '../model/FirstLastNameGeoSubclassificationOut';
import PersonalNameCastegroupOut from '../model/PersonalNameCastegroupOut';
import PersonalNameGeoSubclassificationOut from '../model/PersonalNameGeoSubclassificationOut';
import PersonalNameReligionedOut from '../model/PersonalNameReligionedOut';

/**
* Indian service.
* @module api/IndianApi
* @version 2.0.24
*/
export default class IndianApi {

    /**
    * Constructs a new IndianApi. 
    * @alias module:api/IndianApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the castegroupIndianFull operation.
     * @callback module:api/IndianApi~castegroupIndianFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameCastegroupOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
     * @param {String} subDivisionIso31662 
     * @param {String} personalNameFull 
     * @param {module:api/IndianApi~castegroupIndianFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameCastegroupOut}
     */
    castegroupIndianFull(subDivisionIso31662, personalNameFull, callback) {
      let postBody = null;
      // verify the required parameter 'subDivisionIso31662' is set
      if (subDivisionIso31662 === undefined || subDivisionIso31662 === null) {
        throw new Error("Missing the required parameter 'subDivisionIso31662' when calling castegroupIndianFull");
      }
      // verify the required parameter 'personalNameFull' is set
      if (personalNameFull === undefined || personalNameFull === null) {
        throw new Error("Missing the required parameter 'personalNameFull' when calling castegroupIndianFull");
      }

      let pathParams = {
        'subDivisionIso31662': subDivisionIso31662,
        'personalNameFull': personalNameFull
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameCastegroupOut;
      return this.apiClient.callApi(
        '/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the castegroupIndianFullBatch operation.
     * @callback module:api/IndianApi~castegroupIndianFullBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameCastegroupOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameSubdivisionIn} [batchPersonalNameSubdivisionIn] A list of personal names
     * @param {module:api/IndianApi~castegroupIndianFullBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameCastegroupOut}
     */
    castegroupIndianFullBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameSubdivisionIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameCastegroupOut;
      return this.apiClient.callApi(
        '/api2/json/castegroupIndianFullBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the religion operation.
     * @callback module:api/IndianApi~religionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameReligionedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * @param {String} subDivisionIso31662 
     * @param {String} personalNameFull 
     * @param {module:api/IndianApi~religionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameReligionedOut}
     */
    religion(subDivisionIso31662, personalNameFull, callback) {
      let postBody = null;
      // verify the required parameter 'subDivisionIso31662' is set
      if (subDivisionIso31662 === undefined || subDivisionIso31662 === null) {
        throw new Error("Missing the required parameter 'subDivisionIso31662' when calling religion");
      }
      // verify the required parameter 'personalNameFull' is set
      if (personalNameFull === undefined || personalNameFull === null) {
        throw new Error("Missing the required parameter 'personalNameFull' when calling religion");
      }

      let pathParams = {
        'subDivisionIso31662': subDivisionIso31662,
        'personalNameFull': personalNameFull
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameReligionedOut;
      return this.apiClient.callApi(
        '/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the religionIndianFullBatch operation.
     * @callback module:api/IndianApi~religionIndianFullBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameReligionedOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameSubdivisionIn} [batchPersonalNameSubdivisionIn] A list of personal names
     * @param {module:api/IndianApi~religionIndianFullBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameReligionedOut}
     */
    religionIndianFullBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameSubdivisionIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameReligionedOut;
      return this.apiClient.callApi(
        '/api2/json/religionIndianFullBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subclassificationIndian operation.
     * @callback module:api/IndianApi~subclassificationIndianCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstLastNameGeoSubclassificationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * @param {String} firstName 
     * @param {String} lastName 
     * @param {module:api/IndianApi~subclassificationIndianCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstLastNameGeoSubclassificationOut}
     */
    subclassificationIndian(firstName, lastName, callback) {
      let postBody = null;
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling subclassificationIndian");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling subclassificationIndian");
      }

      let pathParams = {
        'firstName': firstName,
        'lastName': lastName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstLastNameGeoSubclassificationOut;
      return this.apiClient.callApi(
        '/api2/json/subclassificationIndian/{firstName}/{lastName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subclassificationIndianBatch operation.
     * @callback module:api/IndianApi~subclassificationIndianBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchFirstLastNameGeoSubclassificationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchFirstLastNameGeoIn} [batchFirstLastNameGeoIn] A list of personal names
     * @param {module:api/IndianApi~subclassificationIndianBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchFirstLastNameGeoSubclassificationOut}
     */
    subclassificationIndianBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchFirstLastNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchFirstLastNameGeoSubclassificationOut;
      return this.apiClient.callApi(
        '/api2/json/subclassificationIndianBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subclassificationIndianFull operation.
     * @callback module:api/IndianApi~subclassificationIndianFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalNameGeoSubclassificationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * @param {String} fullName 
     * @param {module:api/IndianApi~subclassificationIndianFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalNameGeoSubclassificationOut}
     */
    subclassificationIndianFull(fullName, callback) {
      let postBody = null;
      // verify the required parameter 'fullName' is set
      if (fullName === undefined || fullName === null) {
        throw new Error("Missing the required parameter 'fullName' when calling subclassificationIndianFull");
      }

      let pathParams = {
        'fullName': fullName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalNameGeoSubclassificationOut;
      return this.apiClient.callApi(
        '/api2/json/subclassificationIndianFull/{fullName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subclassificationIndianFullBatch operation.
     * @callback module:api/IndianApi~subclassificationIndianFullBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPersonalNameGeoSubclassificationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPersonalNameGeoIn} [batchPersonalNameGeoIn] A list of personal names
     * @param {module:api/IndianApi~subclassificationIndianFullBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPersonalNameGeoSubclassificationOut}
     */
    subclassificationIndianFullBatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPersonalNameGeoIn'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPersonalNameGeoSubclassificationOut;
      return this.apiClient.callApi(
        '/api2/json/subclassificationIndianFullBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
