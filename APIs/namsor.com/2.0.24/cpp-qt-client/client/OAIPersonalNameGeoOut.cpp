/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalNameGeoOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalNameGeoOut::OAIPersonalNameGeoOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalNameGeoOut::OAIPersonalNameGeoOut() {
    this->initializeModel();
}

OAIPersonalNameGeoOut::~OAIPersonalNameGeoOut() {}

void OAIPersonalNameGeoOut::initializeModel() {

    m_countries_top_isSet = false;
    m_countries_top_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_alt_isSet = false;
    m_country_alt_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_probability_alt_calibrated_isSet = false;
    m_probability_alt_calibrated_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_sub_region_isSet = false;
    m_sub_region_isValid = false;

    m_top_region_isSet = false;
    m_top_region_isValid = false;
}

void OAIPersonalNameGeoOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalNameGeoOut::fromJsonObject(QJsonObject json) {

    m_countries_top_isValid = ::OpenAPI::fromJsonValue(m_countries_top, json[QString("countriesTop")]);
    m_countries_top_isSet = !json[QString("countriesTop")].isNull() && m_countries_top_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_alt_isValid = ::OpenAPI::fromJsonValue(m_country_alt, json[QString("countryAlt")]);
    m_country_alt_isSet = !json[QString("countryAlt")].isNull() && m_country_alt_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_probability_alt_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_alt_calibrated, json[QString("probabilityAltCalibrated")]);
    m_probability_alt_calibrated_isSet = !json[QString("probabilityAltCalibrated")].isNull() && m_probability_alt_calibrated_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_sub_region_isValid = ::OpenAPI::fromJsonValue(m_sub_region, json[QString("subRegion")]);
    m_sub_region_isSet = !json[QString("subRegion")].isNull() && m_sub_region_isValid;

    m_top_region_isValid = ::OpenAPI::fromJsonValue(m_top_region, json[QString("topRegion")]);
    m_top_region_isSet = !json[QString("topRegion")].isNull() && m_top_region_isValid;
}

QString OAIPersonalNameGeoOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalNameGeoOut::asJsonObject() const {
    QJsonObject obj;
    if (m_countries_top.size() > 0) {
        obj.insert(QString("countriesTop"), ::OpenAPI::toJsonValue(m_countries_top));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_alt_isSet) {
        obj.insert(QString("countryAlt"), ::OpenAPI::toJsonValue(m_country_alt));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_probability_alt_calibrated_isSet) {
        obj.insert(QString("probabilityAltCalibrated"), ::OpenAPI::toJsonValue(m_probability_alt_calibrated));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_sub_region_isSet) {
        obj.insert(QString("subRegion"), ::OpenAPI::toJsonValue(m_sub_region));
    }
    if (m_top_region_isSet) {
        obj.insert(QString("topRegion"), ::OpenAPI::toJsonValue(m_top_region));
    }
    return obj;
}

QList<QString> OAIPersonalNameGeoOut::getCountriesTop() const {
    return m_countries_top;
}
void OAIPersonalNameGeoOut::setCountriesTop(const QList<QString> &countries_top) {
    m_countries_top = countries_top;
    m_countries_top_isSet = true;
}

bool OAIPersonalNameGeoOut::is_countries_top_Set() const{
    return m_countries_top_isSet;
}

bool OAIPersonalNameGeoOut::is_countries_top_Valid() const{
    return m_countries_top_isValid;
}

QString OAIPersonalNameGeoOut::getCountry() const {
    return m_country;
}
void OAIPersonalNameGeoOut::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPersonalNameGeoOut::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPersonalNameGeoOut::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPersonalNameGeoOut::getCountryAlt() const {
    return m_country_alt;
}
void OAIPersonalNameGeoOut::setCountryAlt(const QString &country_alt) {
    m_country_alt = country_alt;
    m_country_alt_isSet = true;
}

bool OAIPersonalNameGeoOut::is_country_alt_Set() const{
    return m_country_alt_isSet;
}

bool OAIPersonalNameGeoOut::is_country_alt_Valid() const{
    return m_country_alt_isValid;
}

QString OAIPersonalNameGeoOut::getId() const {
    return m_id;
}
void OAIPersonalNameGeoOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersonalNameGeoOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersonalNameGeoOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPersonalNameGeoOut::getName() const {
    return m_name;
}
void OAIPersonalNameGeoOut::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPersonalNameGeoOut::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPersonalNameGeoOut::is_name_Valid() const{
    return m_name_isValid;
}

double OAIPersonalNameGeoOut::getProbabilityAltCalibrated() const {
    return m_probability_alt_calibrated;
}
void OAIPersonalNameGeoOut::setProbabilityAltCalibrated(const double &probability_alt_calibrated) {
    m_probability_alt_calibrated = probability_alt_calibrated;
    m_probability_alt_calibrated_isSet = true;
}

bool OAIPersonalNameGeoOut::is_probability_alt_calibrated_Set() const{
    return m_probability_alt_calibrated_isSet;
}

bool OAIPersonalNameGeoOut::is_probability_alt_calibrated_Valid() const{
    return m_probability_alt_calibrated_isValid;
}

double OAIPersonalNameGeoOut::getProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIPersonalNameGeoOut::setProbabilityCalibrated(const double &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIPersonalNameGeoOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIPersonalNameGeoOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

QString OAIPersonalNameGeoOut::getRegion() const {
    return m_region;
}
void OAIPersonalNameGeoOut::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPersonalNameGeoOut::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPersonalNameGeoOut::is_region_Valid() const{
    return m_region_isValid;
}

double OAIPersonalNameGeoOut::getScore() const {
    return m_score;
}
void OAIPersonalNameGeoOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPersonalNameGeoOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPersonalNameGeoOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIPersonalNameGeoOut::getScript() const {
    return m_script;
}
void OAIPersonalNameGeoOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIPersonalNameGeoOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIPersonalNameGeoOut::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIPersonalNameGeoOut::getSubRegion() const {
    return m_sub_region;
}
void OAIPersonalNameGeoOut::setSubRegion(const QString &sub_region) {
    m_sub_region = sub_region;
    m_sub_region_isSet = true;
}

bool OAIPersonalNameGeoOut::is_sub_region_Set() const{
    return m_sub_region_isSet;
}

bool OAIPersonalNameGeoOut::is_sub_region_Valid() const{
    return m_sub_region_isValid;
}

QString OAIPersonalNameGeoOut::getTopRegion() const {
    return m_top_region;
}
void OAIPersonalNameGeoOut::setTopRegion(const QString &top_region) {
    m_top_region = top_region;
    m_top_region_isSet = true;
}

bool OAIPersonalNameGeoOut::is_top_region_Set() const{
    return m_top_region_isSet;
}

bool OAIPersonalNameGeoOut::is_top_region_Valid() const{
    return m_top_region_isValid;
}

bool OAIPersonalNameGeoOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_countries_top.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_alt_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalNameGeoOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
