/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIClassifierTaxonomyOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIClassifierTaxonomyOut::OAIAPIClassifierTaxonomyOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIClassifierTaxonomyOut::OAIAPIClassifierTaxonomyOut() {
    this->initializeModel();
}

OAIAPIClassifierTaxonomyOut::~OAIAPIClassifierTaxonomyOut() {}

void OAIAPIClassifierTaxonomyOut::initializeModel() {

    m_classifier_name_isSet = false;
    m_classifier_name_isValid = false;

    m_classifying_scripts_isSet = false;
    m_classifying_scripts_isValid = false;

    m_taxonomy_classes_isSet = false;
    m_taxonomy_classes_isValid = false;
}

void OAIAPIClassifierTaxonomyOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIClassifierTaxonomyOut::fromJsonObject(QJsonObject json) {

    m_classifier_name_isValid = ::OpenAPI::fromJsonValue(m_classifier_name, json[QString("classifierName")]);
    m_classifier_name_isSet = !json[QString("classifierName")].isNull() && m_classifier_name_isValid;

    m_classifying_scripts_isValid = ::OpenAPI::fromJsonValue(m_classifying_scripts, json[QString("classifyingScripts")]);
    m_classifying_scripts_isSet = !json[QString("classifyingScripts")].isNull() && m_classifying_scripts_isValid;

    m_taxonomy_classes_isValid = ::OpenAPI::fromJsonValue(m_taxonomy_classes, json[QString("taxonomyClasses")]);
    m_taxonomy_classes_isSet = !json[QString("taxonomyClasses")].isNull() && m_taxonomy_classes_isValid;
}

QString OAIAPIClassifierTaxonomyOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIClassifierTaxonomyOut::asJsonObject() const {
    QJsonObject obj;
    if (m_classifier_name_isSet) {
        obj.insert(QString("classifierName"), ::OpenAPI::toJsonValue(m_classifier_name));
    }
    if (m_classifying_scripts.size() > 0) {
        obj.insert(QString("classifyingScripts"), ::OpenAPI::toJsonValue(m_classifying_scripts));
    }
    if (m_taxonomy_classes.size() > 0) {
        obj.insert(QString("taxonomyClasses"), ::OpenAPI::toJsonValue(m_taxonomy_classes));
    }
    return obj;
}

QString OAIAPIClassifierTaxonomyOut::getClassifierName() const {
    return m_classifier_name;
}
void OAIAPIClassifierTaxonomyOut::setClassifierName(const QString &classifier_name) {
    m_classifier_name = classifier_name;
    m_classifier_name_isSet = true;
}

bool OAIAPIClassifierTaxonomyOut::is_classifier_name_Set() const{
    return m_classifier_name_isSet;
}

bool OAIAPIClassifierTaxonomyOut::is_classifier_name_Valid() const{
    return m_classifier_name_isValid;
}

QList<QString> OAIAPIClassifierTaxonomyOut::getClassifyingScripts() const {
    return m_classifying_scripts;
}
void OAIAPIClassifierTaxonomyOut::setClassifyingScripts(const QList<QString> &classifying_scripts) {
    m_classifying_scripts = classifying_scripts;
    m_classifying_scripts_isSet = true;
}

bool OAIAPIClassifierTaxonomyOut::is_classifying_scripts_Set() const{
    return m_classifying_scripts_isSet;
}

bool OAIAPIClassifierTaxonomyOut::is_classifying_scripts_Valid() const{
    return m_classifying_scripts_isValid;
}

QList<QString> OAIAPIClassifierTaxonomyOut::getTaxonomyClasses() const {
    return m_taxonomy_classes;
}
void OAIAPIClassifierTaxonomyOut::setTaxonomyClasses(const QList<QString> &taxonomy_classes) {
    m_taxonomy_classes = taxonomy_classes;
    m_taxonomy_classes_isSet = true;
}

bool OAIAPIClassifierTaxonomyOut::is_taxonomy_classes_Set() const{
    return m_taxonomy_classes_isSet;
}

bool OAIAPIClassifierTaxonomyOut::is_taxonomy_classes_Valid() const{
    return m_taxonomy_classes_isValid;
}

bool OAIAPIClassifierTaxonomyOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classifier_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifying_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomy_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIClassifierTaxonomyOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
