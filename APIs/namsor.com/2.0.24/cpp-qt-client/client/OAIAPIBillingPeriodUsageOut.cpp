/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIBillingPeriodUsageOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIBillingPeriodUsageOut::OAIAPIBillingPeriodUsageOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIBillingPeriodUsageOut::OAIAPIBillingPeriodUsageOut() {
    this->initializeModel();
}

OAIAPIBillingPeriodUsageOut::~OAIAPIBillingPeriodUsageOut() {}

void OAIAPIBillingPeriodUsageOut::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_billing_status_isSet = false;
    m_billing_status_isValid = false;

    m_hard_limit_isSet = false;
    m_hard_limit_isValid = false;

    m_period_ended_isSet = false;
    m_period_ended_isValid = false;

    m_period_started_isSet = false;
    m_period_started_isValid = false;

    m_soft_limit_isSet = false;
    m_soft_limit_isValid = false;

    m_stripe_current_period_end_isSet = false;
    m_stripe_current_period_end_isValid = false;

    m_stripe_current_period_start_isSet = false;
    m_stripe_current_period_start_isValid = false;

    m_subscription_started_isSet = false;
    m_subscription_started_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIAPIBillingPeriodUsageOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIBillingPeriodUsageOut::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_billing_status_isValid = ::OpenAPI::fromJsonValue(m_billing_status, json[QString("billingStatus")]);
    m_billing_status_isSet = !json[QString("billingStatus")].isNull() && m_billing_status_isValid;

    m_hard_limit_isValid = ::OpenAPI::fromJsonValue(m_hard_limit, json[QString("hardLimit")]);
    m_hard_limit_isSet = !json[QString("hardLimit")].isNull() && m_hard_limit_isValid;

    m_period_ended_isValid = ::OpenAPI::fromJsonValue(m_period_ended, json[QString("periodEnded")]);
    m_period_ended_isSet = !json[QString("periodEnded")].isNull() && m_period_ended_isValid;

    m_period_started_isValid = ::OpenAPI::fromJsonValue(m_period_started, json[QString("periodStarted")]);
    m_period_started_isSet = !json[QString("periodStarted")].isNull() && m_period_started_isValid;

    m_soft_limit_isValid = ::OpenAPI::fromJsonValue(m_soft_limit, json[QString("softLimit")]);
    m_soft_limit_isSet = !json[QString("softLimit")].isNull() && m_soft_limit_isValid;

    m_stripe_current_period_end_isValid = ::OpenAPI::fromJsonValue(m_stripe_current_period_end, json[QString("stripeCurrentPeriodEnd")]);
    m_stripe_current_period_end_isSet = !json[QString("stripeCurrentPeriodEnd")].isNull() && m_stripe_current_period_end_isValid;

    m_stripe_current_period_start_isValid = ::OpenAPI::fromJsonValue(m_stripe_current_period_start, json[QString("stripeCurrentPeriodStart")]);
    m_stripe_current_period_start_isSet = !json[QString("stripeCurrentPeriodStart")].isNull() && m_stripe_current_period_start_isValid;

    m_subscription_started_isValid = ::OpenAPI::fromJsonValue(m_subscription_started, json[QString("subscriptionStarted")]);
    m_subscription_started_isSet = !json[QString("subscriptionStarted")].isNull() && m_subscription_started_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIAPIBillingPeriodUsageOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIBillingPeriodUsageOut::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_billing_status_isSet) {
        obj.insert(QString("billingStatus"), ::OpenAPI::toJsonValue(m_billing_status));
    }
    if (m_hard_limit_isSet) {
        obj.insert(QString("hardLimit"), ::OpenAPI::toJsonValue(m_hard_limit));
    }
    if (m_period_ended_isSet) {
        obj.insert(QString("periodEnded"), ::OpenAPI::toJsonValue(m_period_ended));
    }
    if (m_period_started_isSet) {
        obj.insert(QString("periodStarted"), ::OpenAPI::toJsonValue(m_period_started));
    }
    if (m_soft_limit_isSet) {
        obj.insert(QString("softLimit"), ::OpenAPI::toJsonValue(m_soft_limit));
    }
    if (m_stripe_current_period_end_isSet) {
        obj.insert(QString("stripeCurrentPeriodEnd"), ::OpenAPI::toJsonValue(m_stripe_current_period_end));
    }
    if (m_stripe_current_period_start_isSet) {
        obj.insert(QString("stripeCurrentPeriodStart"), ::OpenAPI::toJsonValue(m_stripe_current_period_start));
    }
    if (m_subscription_started_isSet) {
        obj.insert(QString("subscriptionStarted"), ::OpenAPI::toJsonValue(m_subscription_started));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAIAPIBillingPeriodUsageOut::getApiKey() const {
    return m_api_key;
}
void OAIAPIBillingPeriodUsageOut::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIAPIBillingPeriodUsageOut::getBillingStatus() const {
    return m_billing_status;
}
void OAIAPIBillingPeriodUsageOut::setBillingStatus(const QString &billing_status) {
    m_billing_status = billing_status;
    m_billing_status_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_billing_status_Set() const{
    return m_billing_status_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_billing_status_Valid() const{
    return m_billing_status_isValid;
}

qint64 OAIAPIBillingPeriodUsageOut::getHardLimit() const {
    return m_hard_limit;
}
void OAIAPIBillingPeriodUsageOut::setHardLimit(const qint64 &hard_limit) {
    m_hard_limit = hard_limit;
    m_hard_limit_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_hard_limit_Set() const{
    return m_hard_limit_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_hard_limit_Valid() const{
    return m_hard_limit_isValid;
}

qint64 OAIAPIBillingPeriodUsageOut::getPeriodEnded() const {
    return m_period_ended;
}
void OAIAPIBillingPeriodUsageOut::setPeriodEnded(const qint64 &period_ended) {
    m_period_ended = period_ended;
    m_period_ended_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_period_ended_Set() const{
    return m_period_ended_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_period_ended_Valid() const{
    return m_period_ended_isValid;
}

qint64 OAIAPIBillingPeriodUsageOut::getPeriodStarted() const {
    return m_period_started;
}
void OAIAPIBillingPeriodUsageOut::setPeriodStarted(const qint64 &period_started) {
    m_period_started = period_started;
    m_period_started_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_period_started_Set() const{
    return m_period_started_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_period_started_Valid() const{
    return m_period_started_isValid;
}

qint64 OAIAPIBillingPeriodUsageOut::getSoftLimit() const {
    return m_soft_limit;
}
void OAIAPIBillingPeriodUsageOut::setSoftLimit(const qint64 &soft_limit) {
    m_soft_limit = soft_limit;
    m_soft_limit_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_soft_limit_Set() const{
    return m_soft_limit_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_soft_limit_Valid() const{
    return m_soft_limit_isValid;
}

qint64 OAIAPIBillingPeriodUsageOut::getStripeCurrentPeriodEnd() const {
    return m_stripe_current_period_end;
}
void OAIAPIBillingPeriodUsageOut::setStripeCurrentPeriodEnd(const qint64 &stripe_current_period_end) {
    m_stripe_current_period_end = stripe_current_period_end;
    m_stripe_current_period_end_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_stripe_current_period_end_Set() const{
    return m_stripe_current_period_end_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_stripe_current_period_end_Valid() const{
    return m_stripe_current_period_end_isValid;
}

qint64 OAIAPIBillingPeriodUsageOut::getStripeCurrentPeriodStart() const {
    return m_stripe_current_period_start;
}
void OAIAPIBillingPeriodUsageOut::setStripeCurrentPeriodStart(const qint64 &stripe_current_period_start) {
    m_stripe_current_period_start = stripe_current_period_start;
    m_stripe_current_period_start_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_stripe_current_period_start_Set() const{
    return m_stripe_current_period_start_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_stripe_current_period_start_Valid() const{
    return m_stripe_current_period_start_isValid;
}

qint64 OAIAPIBillingPeriodUsageOut::getSubscriptionStarted() const {
    return m_subscription_started;
}
void OAIAPIBillingPeriodUsageOut::setSubscriptionStarted(const qint64 &subscription_started) {
    m_subscription_started = subscription_started;
    m_subscription_started_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_subscription_started_Set() const{
    return m_subscription_started_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_subscription_started_Valid() const{
    return m_subscription_started_isValid;
}

qint64 OAIAPIBillingPeriodUsageOut::getUsage() const {
    return m_usage;
}
void OAIAPIBillingPeriodUsageOut::setUsage(const qint64 &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIAPIBillingPeriodUsageOut::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIAPIBillingPeriodUsageOut::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIAPIBillingPeriodUsageOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hard_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_ended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_current_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_current_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIBillingPeriodUsageOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
