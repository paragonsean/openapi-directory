/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJapaneseApi_H
#define OAI_OAIJapaneseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchFirstLastNameGenderIn.h"
#include "OAIBatchFirstLastNameGenderedOut.h"
#include "OAIBatchFirstLastNameIn.h"
#include "OAIBatchMatchPersonalFirstLastNameIn.h"
#include "OAIBatchNameMatchCandidatesOut.h"
#include "OAIBatchNameMatchedOut.h"
#include "OAIBatchPersonalNameGenderedOut.h"
#include "OAIBatchPersonalNameIn.h"
#include "OAIBatchPersonalNameParsedOut.h"
#include "OAIFeedbackLoopOut.h"
#include "OAIFirstLastNameGenderedOut.h"
#include "OAINameMatchCandidatesOut.h"
#include "OAINameMatchedOut.h"
#include "OAIPersonalNameGenderedOut.h"
#include "OAIPersonalNameParsedOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJapaneseApi : public QObject {
    Q_OBJECT

public:
    OAIJapaneseApi(const int timeOut = 0);
    ~OAIJapaneseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  japanese_name QString [required]
    */
    virtual void genderJapaneseNameFull(const QString &japanese_name);

    /**
    * @param[in]  oai_batch_personal_name_in OAIBatchPersonalNameIn [optional]
    */
    virtual void genderJapaneseNameFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn>());

    /**
    * @param[in]  japanese_surname QString [required]
    * @param[in]  japanese_given_name QString [required]
    */
    virtual void genderJapaneseNamePinyin(const QString &japanese_surname, const QString &japanese_given_name);

    /**
    * @param[in]  oai_batch_first_last_name_in OAIBatchFirstLastNameIn [optional]
    */
    virtual void genderJapaneseNamePinyinBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn>());

    /**
    * @param[in]  oai_batch_first_last_name_gender_in OAIBatchFirstLastNameGenderIn [optional]
    */
    virtual void japaneseNameGenderKanjiCandidatesBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGenderIn> &oai_batch_first_last_name_gender_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGenderIn>());

    /**
    * @param[in]  japanese_surname_latin QString [required]
    * @param[in]  japanese_given_name_latin QString [required]
    * @param[in]  known_gender QString [required]
    */
    virtual void japaneseNameKanjiCandidates(const QString &japanese_surname_latin, const QString &japanese_given_name_latin, const QString &known_gender);

    /**
    * @param[in]  japanese_surname_latin QString [required]
    * @param[in]  japanese_given_name_latin QString [required]
    */
    virtual void japaneseNameKanjiCandidates1(const QString &japanese_surname_latin, const QString &japanese_given_name_latin);

    /**
    * @param[in]  oai_batch_first_last_name_in OAIBatchFirstLastNameIn [optional]
    */
    virtual void japaneseNameKanjiCandidatesBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn>());

    /**
    * @param[in]  japanese_surname_kanji QString [required]
    * @param[in]  japanese_given_name_kanji QString [required]
    */
    virtual void japaneseNameLatinCandidates(const QString &japanese_surname_kanji, const QString &japanese_given_name_kanji);

    /**
    * @param[in]  oai_batch_first_last_name_in OAIBatchFirstLastNameIn [optional]
    */
    virtual void japaneseNameLatinCandidatesBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn>());

    /**
    * @param[in]  japanese_surname_latin QString [required]
    * @param[in]  japanese_given_name_latin QString [required]
    * @param[in]  japanese_name QString [required]
    */
    virtual void japaneseNameMatch(const QString &japanese_surname_latin, const QString &japanese_given_name_latin, const QString &japanese_name);

    /**
    * @param[in]  oai_batch_match_personal_first_last_name_in OAIBatchMatchPersonalFirstLastNameIn [optional]
    */
    virtual void japaneseNameMatchBatch(const ::OpenAPI::OptionalParam<OAIBatchMatchPersonalFirstLastNameIn> &oai_batch_match_personal_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchMatchPersonalFirstLastNameIn>());

    /**
    * @param[in]  japanese_surname_latin QString [required]
    * @param[in]  japanese_given_name_latin QString [required]
    * @param[in]  japanese_name QString [required]
    */
    virtual void japaneseNameMatchFeedbackLoop(const QString &japanese_surname_latin, const QString &japanese_given_name_latin, const QString &japanese_name);

    /**
    * @param[in]  japanese_name QString [required]
    */
    virtual void parseJapaneseName(const QString &japanese_name);

    /**
    * @param[in]  oai_batch_personal_name_in OAIBatchPersonalNameIn [optional]
    */
    virtual void parseJapaneseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void genderJapaneseNameFullCallback(OAIHttpRequestWorker *worker);
    void genderJapaneseNameFullBatchCallback(OAIHttpRequestWorker *worker);
    void genderJapaneseNamePinyinCallback(OAIHttpRequestWorker *worker);
    void genderJapaneseNamePinyinBatchCallback(OAIHttpRequestWorker *worker);
    void japaneseNameGenderKanjiCandidatesBatchCallback(OAIHttpRequestWorker *worker);
    void japaneseNameKanjiCandidatesCallback(OAIHttpRequestWorker *worker);
    void japaneseNameKanjiCandidates1Callback(OAIHttpRequestWorker *worker);
    void japaneseNameKanjiCandidatesBatchCallback(OAIHttpRequestWorker *worker);
    void japaneseNameLatinCandidatesCallback(OAIHttpRequestWorker *worker);
    void japaneseNameLatinCandidatesBatchCallback(OAIHttpRequestWorker *worker);
    void japaneseNameMatchCallback(OAIHttpRequestWorker *worker);
    void japaneseNameMatchBatchCallback(OAIHttpRequestWorker *worker);
    void japaneseNameMatchFeedbackLoopCallback(OAIHttpRequestWorker *worker);
    void parseJapaneseNameCallback(OAIHttpRequestWorker *worker);
    void parseJapaneseNameBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void genderJapaneseNameFullSignal(OAIPersonalNameGenderedOut summary);
    void genderJapaneseNameFullBatchSignal(OAIBatchPersonalNameGenderedOut summary);
    void genderJapaneseNamePinyinSignal(OAIFirstLastNameGenderedOut summary);
    void genderJapaneseNamePinyinBatchSignal(OAIBatchFirstLastNameGenderedOut summary);
    void japaneseNameGenderKanjiCandidatesBatchSignal(OAIBatchNameMatchCandidatesOut summary);
    void japaneseNameKanjiCandidatesSignal(OAINameMatchCandidatesOut summary);
    void japaneseNameKanjiCandidates1Signal(OAINameMatchCandidatesOut summary);
    void japaneseNameKanjiCandidatesBatchSignal(OAIBatchNameMatchCandidatesOut summary);
    void japaneseNameLatinCandidatesSignal(OAINameMatchCandidatesOut summary);
    void japaneseNameLatinCandidatesBatchSignal(OAIBatchNameMatchCandidatesOut summary);
    void japaneseNameMatchSignal(OAINameMatchedOut summary);
    void japaneseNameMatchBatchSignal(OAIBatchNameMatchedOut summary);
    void japaneseNameMatchFeedbackLoopSignal(OAIFeedbackLoopOut summary);
    void parseJapaneseNameSignal(OAIPersonalNameParsedOut summary);
    void parseJapaneseNameBatchSignal(OAIBatchPersonalNameParsedOut summary);


    void genderJapaneseNameFullSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameGenderedOut summary);
    void genderJapaneseNameFullBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameGenderedOut summary);
    void genderJapaneseNamePinyinSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameGenderedOut summary);
    void genderJapaneseNamePinyinBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameGenderedOut summary);
    void japaneseNameGenderKanjiCandidatesBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchNameMatchCandidatesOut summary);
    void japaneseNameKanjiCandidatesSignalFull(OAIHttpRequestWorker *worker, OAINameMatchCandidatesOut summary);
    void japaneseNameKanjiCandidates1SignalFull(OAIHttpRequestWorker *worker, OAINameMatchCandidatesOut summary);
    void japaneseNameKanjiCandidatesBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchNameMatchCandidatesOut summary);
    void japaneseNameLatinCandidatesSignalFull(OAIHttpRequestWorker *worker, OAINameMatchCandidatesOut summary);
    void japaneseNameLatinCandidatesBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchNameMatchCandidatesOut summary);
    void japaneseNameMatchSignalFull(OAIHttpRequestWorker *worker, OAINameMatchedOut summary);
    void japaneseNameMatchBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchNameMatchedOut summary);
    void japaneseNameMatchFeedbackLoopSignalFull(OAIHttpRequestWorker *worker, OAIFeedbackLoopOut summary);
    void parseJapaneseNameSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameParsedOut summary);
    void parseJapaneseNameBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameParsedOut summary);

    Q_DECL_DEPRECATED_X("Use genderJapaneseNameFullSignalError() instead")
    void genderJapaneseNameFullSignalE(OAIPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderJapaneseNameFullSignalError(OAIPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderJapaneseNameFullBatchSignalError() instead")
    void genderJapaneseNameFullBatchSignalE(OAIBatchPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderJapaneseNameFullBatchSignalError(OAIBatchPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderJapaneseNamePinyinSignalError() instead")
    void genderJapaneseNamePinyinSignalE(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderJapaneseNamePinyinSignalError(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderJapaneseNamePinyinBatchSignalError() instead")
    void genderJapaneseNamePinyinBatchSignalE(OAIBatchFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderJapaneseNamePinyinBatchSignalError(OAIBatchFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameGenderKanjiCandidatesBatchSignalError() instead")
    void japaneseNameGenderKanjiCandidatesBatchSignalE(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameGenderKanjiCandidatesBatchSignalError(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameKanjiCandidatesSignalError() instead")
    void japaneseNameKanjiCandidatesSignalE(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameKanjiCandidatesSignalError(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameKanjiCandidates1SignalError() instead")
    void japaneseNameKanjiCandidates1SignalE(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameKanjiCandidates1SignalError(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameKanjiCandidatesBatchSignalError() instead")
    void japaneseNameKanjiCandidatesBatchSignalE(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameKanjiCandidatesBatchSignalError(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameLatinCandidatesSignalError() instead")
    void japaneseNameLatinCandidatesSignalE(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameLatinCandidatesSignalError(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameLatinCandidatesBatchSignalError() instead")
    void japaneseNameLatinCandidatesBatchSignalE(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameLatinCandidatesBatchSignalError(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameMatchSignalError() instead")
    void japaneseNameMatchSignalE(OAINameMatchedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameMatchSignalError(OAINameMatchedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameMatchBatchSignalError() instead")
    void japaneseNameMatchBatchSignalE(OAIBatchNameMatchedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameMatchBatchSignalError(OAIBatchNameMatchedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameMatchFeedbackLoopSignalError() instead")
    void japaneseNameMatchFeedbackLoopSignalE(OAIFeedbackLoopOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameMatchFeedbackLoopSignalError(OAIFeedbackLoopOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseJapaneseNameSignalError() instead")
    void parseJapaneseNameSignalE(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseJapaneseNameSignalError(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseJapaneseNameBatchSignalError() instead")
    void parseJapaneseNameBatchSignalE(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseJapaneseNameBatchSignalError(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use genderJapaneseNameFullSignalErrorFull() instead")
    void genderJapaneseNameFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderJapaneseNameFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderJapaneseNameFullBatchSignalErrorFull() instead")
    void genderJapaneseNameFullBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderJapaneseNameFullBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderJapaneseNamePinyinSignalErrorFull() instead")
    void genderJapaneseNamePinyinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderJapaneseNamePinyinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderJapaneseNamePinyinBatchSignalErrorFull() instead")
    void genderJapaneseNamePinyinBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderJapaneseNamePinyinBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameGenderKanjiCandidatesBatchSignalErrorFull() instead")
    void japaneseNameGenderKanjiCandidatesBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameGenderKanjiCandidatesBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameKanjiCandidatesSignalErrorFull() instead")
    void japaneseNameKanjiCandidatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameKanjiCandidatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameKanjiCandidates1SignalErrorFull() instead")
    void japaneseNameKanjiCandidates1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameKanjiCandidates1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameKanjiCandidatesBatchSignalErrorFull() instead")
    void japaneseNameKanjiCandidatesBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameKanjiCandidatesBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameLatinCandidatesSignalErrorFull() instead")
    void japaneseNameLatinCandidatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameLatinCandidatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameLatinCandidatesBatchSignalErrorFull() instead")
    void japaneseNameLatinCandidatesBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameLatinCandidatesBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameMatchSignalErrorFull() instead")
    void japaneseNameMatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameMatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameMatchBatchSignalErrorFull() instead")
    void japaneseNameMatchBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameMatchBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use japaneseNameMatchFeedbackLoopSignalErrorFull() instead")
    void japaneseNameMatchFeedbackLoopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void japaneseNameMatchFeedbackLoopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseJapaneseNameSignalErrorFull() instead")
    void parseJapaneseNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseJapaneseNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseJapaneseNameBatchSignalErrorFull() instead")
    void parseJapaneseNameBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseJapaneseNameBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
