/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPIUsageAggregatedOut.h
 *
 * 
 */

#ifndef OAIAPIUsageAggregatedOut_H
#define OAIAPIUsageAggregatedOut_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAPIUsageAggregatedOut : public OAIObject {
public:
    OAIAPIUsageAggregatedOut();
    OAIAPIUsageAggregatedOut(QString json);
    ~OAIAPIUsageAggregatedOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getColHeaders() const;
    void setColHeaders(const QList<QString> &col_headers);
    bool is_col_headers_Set() const;
    bool is_col_headers_Valid() const;

    QList<QList<qint32>> getData() const;
    void setData(const QList<QList<qint32>> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    bool isHistoryTruncated() const;
    void setHistoryTruncated(const bool &history_truncated);
    bool is_history_truncated_Set() const;
    bool is_history_truncated_Valid() const;

    qint64 getPeriodEnd() const;
    void setPeriodEnd(const qint64 &period_end);
    bool is_period_end_Set() const;
    bool is_period_end_Valid() const;

    qint64 getPeriodStart() const;
    void setPeriodStart(const qint64 &period_start);
    bool is_period_start_Set() const;
    bool is_period_start_Valid() const;

    QList<QString> getRowHeaders() const;
    void setRowHeaders(const QList<QString> &row_headers);
    bool is_row_headers_Set() const;
    bool is_row_headers_Valid() const;

    QString getTimeUnit() const;
    void setTimeUnit(const QString &time_unit);
    bool is_time_unit_Set() const;
    bool is_time_unit_Valid() const;

    qint64 getTotalUsage() const;
    void setTotalUsage(const qint64 &total_usage);
    bool is_total_usage_Set() const;
    bool is_total_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_col_headers;
    bool m_col_headers_isSet;
    bool m_col_headers_isValid;

    QList<QList<qint32>> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    bool m_history_truncated;
    bool m_history_truncated_isSet;
    bool m_history_truncated_isValid;

    qint64 m_period_end;
    bool m_period_end_isSet;
    bool m_period_end_isValid;

    qint64 m_period_start;
    bool m_period_start_isSet;
    bool m_period_start_isValid;

    QList<QString> m_row_headers;
    bool m_row_headers_isSet;
    bool m_row_headers_isValid;

    QString m_time_unit;
    bool m_time_unit_isSet;
    bool m_time_unit_isValid;

    qint64 m_total_usage;
    bool m_total_usage_isSet;
    bool m_total_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPIUsageAggregatedOut)

#endif // OAIAPIUsageAggregatedOut_H
