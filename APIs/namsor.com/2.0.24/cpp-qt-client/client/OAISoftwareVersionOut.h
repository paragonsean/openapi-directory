/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISoftwareVersionOut.h
 *
 * The software version.
 */

#ifndef OAISoftwareVersionOut_H
#define OAISoftwareVersionOut_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISoftwareVersionOut : public OAIObject {
public:
    OAISoftwareVersionOut();
    OAISoftwareVersionOut(QString json);
    ~OAISoftwareVersionOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSoftwareNameAndVersion() const;
    void setSoftwareNameAndVersion(const QString &software_name_and_version);
    bool is_software_name_and_version_Set() const;
    bool is_software_name_and_version_Valid() const;

    QList<qint32> getSoftwareVersion() const;
    void setSoftwareVersion(const QList<qint32> &software_version);
    bool is_software_version_Set() const;
    bool is_software_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_software_name_and_version;
    bool m_software_name_and_version_isSet;
    bool m_software_name_and_version_isValid;

    QList<qint32> m_software_version;
    bool m_software_version_isSet;
    bool m_software_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISoftwareVersionOut)

#endif // OAISoftwareVersionOut_H
