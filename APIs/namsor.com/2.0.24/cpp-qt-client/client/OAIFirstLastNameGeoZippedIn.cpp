/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstLastNameGeoZippedIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstLastNameGeoZippedIn::OAIFirstLastNameGeoZippedIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstLastNameGeoZippedIn::OAIFirstLastNameGeoZippedIn() {
    this->initializeModel();
}

OAIFirstLastNameGeoZippedIn::~OAIFirstLastNameGeoZippedIn() {}

void OAIFirstLastNameGeoZippedIn::initializeModel() {

    m_country_iso2_isSet = false;
    m_country_iso2_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIFirstLastNameGeoZippedIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstLastNameGeoZippedIn::fromJsonObject(QJsonObject json) {

    m_country_iso2_isValid = ::OpenAPI::fromJsonValue(m_country_iso2, json[QString("countryIso2")]);
    m_country_iso2_isSet = !json[QString("countryIso2")].isNull() && m_country_iso2_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAIFirstLastNameGeoZippedIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstLastNameGeoZippedIn::asJsonObject() const {
    QJsonObject obj;
    if (m_country_iso2_isSet) {
        obj.insert(QString("countryIso2"), ::OpenAPI::toJsonValue(m_country_iso2));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIFirstLastNameGeoZippedIn::getCountryIso2() const {
    return m_country_iso2;
}
void OAIFirstLastNameGeoZippedIn::setCountryIso2(const QString &country_iso2) {
    m_country_iso2 = country_iso2;
    m_country_iso2_isSet = true;
}

bool OAIFirstLastNameGeoZippedIn::is_country_iso2_Set() const{
    return m_country_iso2_isSet;
}

bool OAIFirstLastNameGeoZippedIn::is_country_iso2_Valid() const{
    return m_country_iso2_isValid;
}

QString OAIFirstLastNameGeoZippedIn::getFirstName() const {
    return m_first_name;
}
void OAIFirstLastNameGeoZippedIn::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFirstLastNameGeoZippedIn::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFirstLastNameGeoZippedIn::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIFirstLastNameGeoZippedIn::getId() const {
    return m_id;
}
void OAIFirstLastNameGeoZippedIn::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFirstLastNameGeoZippedIn::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFirstLastNameGeoZippedIn::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFirstLastNameGeoZippedIn::getLastName() const {
    return m_last_name;
}
void OAIFirstLastNameGeoZippedIn::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFirstLastNameGeoZippedIn::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFirstLastNameGeoZippedIn::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIFirstLastNameGeoZippedIn::getZipCode() const {
    return m_zip_code;
}
void OAIFirstLastNameGeoZippedIn::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIFirstLastNameGeoZippedIn::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIFirstLastNameGeoZippedIn::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIFirstLastNameGeoZippedIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstLastNameGeoZippedIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
