/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstLastNameGeoSubclassificationOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstLastNameGeoSubclassificationOut::OAIFirstLastNameGeoSubclassificationOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstLastNameGeoSubclassificationOut::OAIFirstLastNameGeoSubclassificationOut() {
    this->initializeModel();
}

OAIFirstLastNameGeoSubclassificationOut::~OAIFirstLastNameGeoSubclassificationOut() {}

void OAIFirstLastNameGeoSubclassificationOut::initializeModel() {

    m_country_iso2_isSet = false;
    m_country_iso2_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_probability_alt_calibrated_isSet = false;
    m_probability_alt_calibrated_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_sub_classification_isSet = false;
    m_sub_classification_isValid = false;

    m_sub_classification_alt_isSet = false;
    m_sub_classification_alt_isValid = false;

    m_subclassification_top_isSet = false;
    m_subclassification_top_isValid = false;
}

void OAIFirstLastNameGeoSubclassificationOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstLastNameGeoSubclassificationOut::fromJsonObject(QJsonObject json) {

    m_country_iso2_isValid = ::OpenAPI::fromJsonValue(m_country_iso2, json[QString("countryIso2")]);
    m_country_iso2_isSet = !json[QString("countryIso2")].isNull() && m_country_iso2_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_probability_alt_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_alt_calibrated, json[QString("probabilityAltCalibrated")]);
    m_probability_alt_calibrated_isSet = !json[QString("probabilityAltCalibrated")].isNull() && m_probability_alt_calibrated_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_sub_classification_isValid = ::OpenAPI::fromJsonValue(m_sub_classification, json[QString("subClassification")]);
    m_sub_classification_isSet = !json[QString("subClassification")].isNull() && m_sub_classification_isValid;

    m_sub_classification_alt_isValid = ::OpenAPI::fromJsonValue(m_sub_classification_alt, json[QString("subClassificationAlt")]);
    m_sub_classification_alt_isSet = !json[QString("subClassificationAlt")].isNull() && m_sub_classification_alt_isValid;

    m_subclassification_top_isValid = ::OpenAPI::fromJsonValue(m_subclassification_top, json[QString("subclassificationTop")]);
    m_subclassification_top_isSet = !json[QString("subclassificationTop")].isNull() && m_subclassification_top_isValid;
}

QString OAIFirstLastNameGeoSubclassificationOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstLastNameGeoSubclassificationOut::asJsonObject() const {
    QJsonObject obj;
    if (m_country_iso2_isSet) {
        obj.insert(QString("countryIso2"), ::OpenAPI::toJsonValue(m_country_iso2));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_probability_alt_calibrated_isSet) {
        obj.insert(QString("probabilityAltCalibrated"), ::OpenAPI::toJsonValue(m_probability_alt_calibrated));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_sub_classification_isSet) {
        obj.insert(QString("subClassification"), ::OpenAPI::toJsonValue(m_sub_classification));
    }
    if (m_sub_classification_alt_isSet) {
        obj.insert(QString("subClassificationAlt"), ::OpenAPI::toJsonValue(m_sub_classification_alt));
    }
    if (m_subclassification_top.size() > 0) {
        obj.insert(QString("subclassificationTop"), ::OpenAPI::toJsonValue(m_subclassification_top));
    }
    return obj;
}

QString OAIFirstLastNameGeoSubclassificationOut::getCountryIso2() const {
    return m_country_iso2;
}
void OAIFirstLastNameGeoSubclassificationOut::setCountryIso2(const QString &country_iso2) {
    m_country_iso2 = country_iso2;
    m_country_iso2_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_country_iso2_Set() const{
    return m_country_iso2_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_country_iso2_Valid() const{
    return m_country_iso2_isValid;
}

QString OAIFirstLastNameGeoSubclassificationOut::getFirstName() const {
    return m_first_name;
}
void OAIFirstLastNameGeoSubclassificationOut::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIFirstLastNameGeoSubclassificationOut::getId() const {
    return m_id;
}
void OAIFirstLastNameGeoSubclassificationOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFirstLastNameGeoSubclassificationOut::getLastName() const {
    return m_last_name;
}
void OAIFirstLastNameGeoSubclassificationOut::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_last_name_Valid() const{
    return m_last_name_isValid;
}

double OAIFirstLastNameGeoSubclassificationOut::getProbabilityAltCalibrated() const {
    return m_probability_alt_calibrated;
}
void OAIFirstLastNameGeoSubclassificationOut::setProbabilityAltCalibrated(const double &probability_alt_calibrated) {
    m_probability_alt_calibrated = probability_alt_calibrated;
    m_probability_alt_calibrated_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_probability_alt_calibrated_Set() const{
    return m_probability_alt_calibrated_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_probability_alt_calibrated_Valid() const{
    return m_probability_alt_calibrated_isValid;
}

double OAIFirstLastNameGeoSubclassificationOut::getProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIFirstLastNameGeoSubclassificationOut::setProbabilityCalibrated(const double &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

double OAIFirstLastNameGeoSubclassificationOut::getScore() const {
    return m_score;
}
void OAIFirstLastNameGeoSubclassificationOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIFirstLastNameGeoSubclassificationOut::getScript() const {
    return m_script;
}
void OAIFirstLastNameGeoSubclassificationOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIFirstLastNameGeoSubclassificationOut::getSubClassification() const {
    return m_sub_classification;
}
void OAIFirstLastNameGeoSubclassificationOut::setSubClassification(const QString &sub_classification) {
    m_sub_classification = sub_classification;
    m_sub_classification_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_sub_classification_Set() const{
    return m_sub_classification_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_sub_classification_Valid() const{
    return m_sub_classification_isValid;
}

QString OAIFirstLastNameGeoSubclassificationOut::getSubClassificationAlt() const {
    return m_sub_classification_alt;
}
void OAIFirstLastNameGeoSubclassificationOut::setSubClassificationAlt(const QString &sub_classification_alt) {
    m_sub_classification_alt = sub_classification_alt;
    m_sub_classification_alt_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_sub_classification_alt_Set() const{
    return m_sub_classification_alt_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_sub_classification_alt_Valid() const{
    return m_sub_classification_alt_isValid;
}

QList<QString> OAIFirstLastNameGeoSubclassificationOut::getSubclassificationTop() const {
    return m_subclassification_top;
}
void OAIFirstLastNameGeoSubclassificationOut::setSubclassificationTop(const QList<QString> &subclassification_top) {
    m_subclassification_top = subclassification_top;
    m_subclassification_top_isSet = true;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_subclassification_top_Set() const{
    return m_subclassification_top_isSet;
}

bool OAIFirstLastNameGeoSubclassificationOut::is_subclassification_top_Valid() const{
    return m_subclassification_top_isValid;
}

bool OAIFirstLastNameGeoSubclassificationOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_alt_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_classification_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subclassification_top.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstLastNameGeoSubclassificationOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
