/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPIClassifierOut.h
 *
 * The list of classifiers and versions.
 */

#ifndef OAIAPIClassifierOut_H
#define OAIAPIClassifierOut_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAPIClassifierOut : public OAIObject {
public:
    OAIAPIClassifierOut();
    OAIAPIClassifierOut(QString json);
    ~OAIAPIClassifierOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClassifierName() const;
    void setClassifierName(const QString &classifier_name);
    bool is_classifier_name_Set() const;
    bool is_classifier_name_Valid() const;

    bool isLearning() const;
    void setLearning(const bool &learning);
    bool is_learning_Set() const;
    bool is_learning_Valid() const;

    bool isProbabilityCalibrated() const;
    void setProbabilityCalibrated(const bool &probability_calibrated);
    bool is_probability_calibrated_Set() const;
    bool is_probability_calibrated_Valid() const;

    bool isServing() const;
    void setServing(const bool &serving);
    bool is_serving_Set() const;
    bool is_serving_Valid() const;

    bool isShuttingDown() const;
    void setShuttingDown(const bool &shutting_down);
    bool is_shutting_down_Set() const;
    bool is_shutting_down_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_classifier_name;
    bool m_classifier_name_isSet;
    bool m_classifier_name_isValid;

    bool m_learning;
    bool m_learning_isSet;
    bool m_learning_isValid;

    bool m_probability_calibrated;
    bool m_probability_calibrated_isSet;
    bool m_probability_calibrated_isValid;

    bool m_serving;
    bool m_serving_isSet;
    bool m_serving_isValid;

    bool m_shutting_down;
    bool m_shutting_down_isSet;
    bool m_shutting_down_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPIClassifierOut)

#endif // OAIAPIClassifierOut_H
