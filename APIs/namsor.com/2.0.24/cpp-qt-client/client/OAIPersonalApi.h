/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPersonalApi_H
#define OAI_OAIPersonalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchCorridorIn.h"
#include "OAIBatchCorridorOut.h"
#include "OAIBatchFirstLastNameDiasporaedOut.h"
#include "OAIBatchFirstLastNameGenderedOut.h"
#include "OAIBatchFirstLastNameGeoIn.h"
#include "OAIBatchFirstLastNameGeoSubclassificationOut.h"
#include "OAIBatchFirstLastNameGeoZippedIn.h"
#include "OAIBatchFirstLastNameIn.h"
#include "OAIBatchFirstLastNameOriginedOut.h"
#include "OAIBatchFirstLastNameUSRaceEthnicityOut.h"
#include "OAIBatchPersonalNameGenderedOut.h"
#include "OAIBatchPersonalNameGeoIn.h"
#include "OAIBatchPersonalNameGeoOut.h"
#include "OAIBatchPersonalNameGeoSubclassificationOut.h"
#include "OAIBatchPersonalNameGeoSubdivisionIn.h"
#include "OAIBatchPersonalNameIn.h"
#include "OAIBatchPersonalNameParsedOut.h"
#include "OAIBatchPersonalNameReligionedOut.h"
#include "OAICorridorOut.h"
#include "OAIFirstLastNameDiasporaedOut.h"
#include "OAIFirstLastNameGenderedOut.h"
#include "OAIFirstLastNameGeoSubclassificationOut.h"
#include "OAIFirstLastNameOriginedOut.h"
#include "OAIFirstLastNameUSRaceEthnicityOut.h"
#include "OAIPersonalNameGenderedOut.h"
#include "OAIPersonalNameGeoOut.h"
#include "OAIPersonalNameParsedOut.h"
#include "OAIPersonalNameReligionedOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPersonalApi : public QObject {
    Q_OBJECT

public:
    OAIPersonalApi(const int timeOut = 0);
    ~OAIPersonalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country_iso2_from QString [required]
    * @param[in]  first_name_from QString [required]
    * @param[in]  last_name_from QString [required]
    * @param[in]  country_iso2_to QString [required]
    * @param[in]  first_name_to QString [required]
    * @param[in]  last_name_to QString [required]
    */
    virtual void corridor(const QString &country_iso2_from, const QString &first_name_from, const QString &last_name_from, const QString &country_iso2_to, const QString &first_name_to, const QString &last_name_to);

    /**
    * @param[in]  oai_batch_corridor_in OAIBatchCorridorIn [optional]
    */
    virtual void corridorBatch(const ::OpenAPI::OptionalParam<OAIBatchCorridorIn> &oai_batch_corridor_in = ::OpenAPI::OptionalParam<OAIBatchCorridorIn>());

    /**
    * @param[in]  personal_name_full QString [required]
    */
    virtual void country(const QString &personal_name_full);

    /**
    * @param[in]  oai_batch_personal_name_in OAIBatchPersonalNameIn [optional]
    */
    virtual void countryBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn>());

    /**
    * @param[in]  country_iso2 QString [required]
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    */
    virtual void diaspora(const QString &country_iso2, const QString &first_name, const QString &last_name);

    /**
    * @param[in]  oai_batch_first_last_name_geo_in OAIBatchFirstLastNameGeoIn [optional]
    */
    virtual void diasporaBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn>());

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    */
    virtual void gender(const QString &first_name, const QString &last_name);

    /**
    * @param[in]  first_name QString [required]
    */
    virtual void gender1(const QString &first_name);

    /**
    * @param[in]  oai_batch_first_last_name_in OAIBatchFirstLastNameIn [optional]
    */
    virtual void genderBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn>());

    /**
    * @param[in]  full_name QString [required]
    */
    virtual void genderFull(const QString &full_name);

    /**
    * @param[in]  oai_batch_personal_name_in OAIBatchPersonalNameIn [optional]
    */
    virtual void genderFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn>());

    /**
    * @param[in]  full_name QString [required]
    * @param[in]  country_iso2 QString [required]
    */
    virtual void genderFullGeo(const QString &full_name, const QString &country_iso2);

    /**
    * @param[in]  oai_batch_personal_name_geo_in OAIBatchPersonalNameGeoIn [optional]
    */
    virtual void genderFullGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn> &oai_batch_personal_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn>());

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    * @param[in]  country_iso2 QString [required]
    */
    virtual void genderGeo(const QString &first_name, const QString &last_name, const QString &country_iso2);

    /**
    * @param[in]  oai_batch_first_last_name_geo_in OAIBatchFirstLastNameGeoIn [optional]
    */
    virtual void genderGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn>());

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    */
    virtual void origin(const QString &first_name, const QString &last_name);

    /**
    * @param[in]  oai_batch_first_last_name_in OAIBatchFirstLastNameIn [optional]
    */
    virtual void originBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn>());

    /**
    * @param[in]  name_full QString [required]
    */
    virtual void parseName(const QString &name_full);

    /**
    * @param[in]  oai_batch_personal_name_in OAIBatchPersonalNameIn [optional]
    */
    virtual void parseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn>());

    /**
    * @param[in]  name_full QString [required]
    * @param[in]  country_iso2 QString [required]
    */
    virtual void parseNameGeo(const QString &name_full, const QString &country_iso2);

    /**
    * @param[in]  oai_batch_personal_name_geo_in OAIBatchPersonalNameGeoIn [optional]
    */
    virtual void parseNameGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn> &oai_batch_personal_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn>());

    /**
    * @param[in]  country_iso2 QString [required]
    * @param[in]  sub_division_iso31662 QString [required]
    * @param[in]  personal_name_full QString [required]
    */
    virtual void religionFull(const QString &country_iso2, const QString &sub_division_iso31662, const QString &personal_name_full);

    /**
    * @param[in]  oai_batch_personal_name_geo_subdivision_in OAIBatchPersonalNameGeoSubdivisionIn [optional]
    */
    virtual void religionFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoSubdivisionIn> &oai_batch_personal_name_geo_subdivision_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoSubdivisionIn>());

    /**
    * @param[in]  country_iso2 QString [required]
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    */
    virtual void subclassification(const QString &country_iso2, const QString &first_name, const QString &last_name);

    /**
    * @param[in]  oai_batch_first_last_name_geo_in OAIBatchFirstLastNameGeoIn [optional]
    */
    virtual void subclassificationBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn>());

    /**
    * @param[in]  country_iso2 QString [required]
    * @param[in]  full_name QString [required]
    */
    virtual void subclassificationFull(const QString &country_iso2, const QString &full_name);

    /**
    * @param[in]  oai_batch_personal_name_geo_in OAIBatchPersonalNameGeoIn [optional]
    */
    virtual void subclassificationFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn> &oai_batch_personal_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn>());

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    */
    virtual void usRaceEthnicity(const QString &first_name, const QString &last_name);

    /**
    * @param[in]  oai_batch_first_last_name_geo_in OAIBatchFirstLastNameGeoIn [optional]
    */
    virtual void usRaceEthnicityBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn>());

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    * @param[in]  zip5_code QString [required]
    */
    virtual void usRaceEthnicityZIP5(const QString &first_name, const QString &last_name, const QString &zip5_code);

    /**
    * @param[in]  oai_batch_first_last_name_geo_zipped_in OAIBatchFirstLastNameGeoZippedIn [optional]
    */
    virtual void usZipRaceEthnicityBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoZippedIn> &oai_batch_first_last_name_geo_zipped_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoZippedIn>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void corridorCallback(OAIHttpRequestWorker *worker);
    void corridorBatchCallback(OAIHttpRequestWorker *worker);
    void countryCallback(OAIHttpRequestWorker *worker);
    void countryBatchCallback(OAIHttpRequestWorker *worker);
    void diasporaCallback(OAIHttpRequestWorker *worker);
    void diasporaBatchCallback(OAIHttpRequestWorker *worker);
    void genderCallback(OAIHttpRequestWorker *worker);
    void gender1Callback(OAIHttpRequestWorker *worker);
    void genderBatchCallback(OAIHttpRequestWorker *worker);
    void genderFullCallback(OAIHttpRequestWorker *worker);
    void genderFullBatchCallback(OAIHttpRequestWorker *worker);
    void genderFullGeoCallback(OAIHttpRequestWorker *worker);
    void genderFullGeoBatchCallback(OAIHttpRequestWorker *worker);
    void genderGeoCallback(OAIHttpRequestWorker *worker);
    void genderGeoBatchCallback(OAIHttpRequestWorker *worker);
    void originCallback(OAIHttpRequestWorker *worker);
    void originBatchCallback(OAIHttpRequestWorker *worker);
    void parseNameCallback(OAIHttpRequestWorker *worker);
    void parseNameBatchCallback(OAIHttpRequestWorker *worker);
    void parseNameGeoCallback(OAIHttpRequestWorker *worker);
    void parseNameGeoBatchCallback(OAIHttpRequestWorker *worker);
    void religionFullCallback(OAIHttpRequestWorker *worker);
    void religionFullBatchCallback(OAIHttpRequestWorker *worker);
    void subclassificationCallback(OAIHttpRequestWorker *worker);
    void subclassificationBatchCallback(OAIHttpRequestWorker *worker);
    void subclassificationFullCallback(OAIHttpRequestWorker *worker);
    void subclassificationFullBatchCallback(OAIHttpRequestWorker *worker);
    void usRaceEthnicityCallback(OAIHttpRequestWorker *worker);
    void usRaceEthnicityBatchCallback(OAIHttpRequestWorker *worker);
    void usRaceEthnicityZIP5Callback(OAIHttpRequestWorker *worker);
    void usZipRaceEthnicityBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void corridorSignal(OAICorridorOut summary);
    void corridorBatchSignal(OAIBatchCorridorOut summary);
    void countrySignal(OAIPersonalNameGeoOut summary);
    void countryBatchSignal(OAIBatchPersonalNameGeoOut summary);
    void diasporaSignal(OAIFirstLastNameDiasporaedOut summary);
    void diasporaBatchSignal(OAIBatchFirstLastNameDiasporaedOut summary);
    void genderSignal(OAIFirstLastNameGenderedOut summary);
    void gender1Signal(OAIFirstLastNameGenderedOut summary);
    void genderBatchSignal(OAIBatchFirstLastNameGenderedOut summary);
    void genderFullSignal(OAIPersonalNameGenderedOut summary);
    void genderFullBatchSignal(OAIBatchPersonalNameGenderedOut summary);
    void genderFullGeoSignal(OAIPersonalNameGenderedOut summary);
    void genderFullGeoBatchSignal(OAIBatchPersonalNameGenderedOut summary);
    void genderGeoSignal(OAIFirstLastNameGenderedOut summary);
    void genderGeoBatchSignal(OAIBatchFirstLastNameGenderedOut summary);
    void originSignal(OAIFirstLastNameOriginedOut summary);
    void originBatchSignal(OAIBatchFirstLastNameOriginedOut summary);
    void parseNameSignal(OAIPersonalNameParsedOut summary);
    void parseNameBatchSignal(OAIBatchPersonalNameParsedOut summary);
    void parseNameGeoSignal(OAIPersonalNameParsedOut summary);
    void parseNameGeoBatchSignal(OAIBatchPersonalNameParsedOut summary);
    void religionFullSignal(OAIPersonalNameReligionedOut summary);
    void religionFullBatchSignal(OAIBatchPersonalNameReligionedOut summary);
    void subclassificationSignal(OAIFirstLastNameGeoSubclassificationOut summary);
    void subclassificationBatchSignal(OAIBatchFirstLastNameGeoSubclassificationOut summary);
    void subclassificationFullSignal(OAIFirstLastNameGeoSubclassificationOut summary);
    void subclassificationFullBatchSignal(OAIBatchPersonalNameGeoSubclassificationOut summary);
    void usRaceEthnicitySignal(OAIFirstLastNameUSRaceEthnicityOut summary);
    void usRaceEthnicityBatchSignal(OAIBatchFirstLastNameUSRaceEthnicityOut summary);
    void usRaceEthnicityZIP5Signal(OAIFirstLastNameUSRaceEthnicityOut summary);
    void usZipRaceEthnicityBatchSignal(OAIBatchFirstLastNameUSRaceEthnicityOut summary);


    void corridorSignalFull(OAIHttpRequestWorker *worker, OAICorridorOut summary);
    void corridorBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchCorridorOut summary);
    void countrySignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameGeoOut summary);
    void countryBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameGeoOut summary);
    void diasporaSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameDiasporaedOut summary);
    void diasporaBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameDiasporaedOut summary);
    void genderSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameGenderedOut summary);
    void gender1SignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameGenderedOut summary);
    void genderBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameGenderedOut summary);
    void genderFullSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameGenderedOut summary);
    void genderFullBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameGenderedOut summary);
    void genderFullGeoSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameGenderedOut summary);
    void genderFullGeoBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameGenderedOut summary);
    void genderGeoSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameGenderedOut summary);
    void genderGeoBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameGenderedOut summary);
    void originSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameOriginedOut summary);
    void originBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameOriginedOut summary);
    void parseNameSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameParsedOut summary);
    void parseNameBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameParsedOut summary);
    void parseNameGeoSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameParsedOut summary);
    void parseNameGeoBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameParsedOut summary);
    void religionFullSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameReligionedOut summary);
    void religionFullBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameReligionedOut summary);
    void subclassificationSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameGeoSubclassificationOut summary);
    void subclassificationBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameGeoSubclassificationOut summary);
    void subclassificationFullSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameGeoSubclassificationOut summary);
    void subclassificationFullBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameGeoSubclassificationOut summary);
    void usRaceEthnicitySignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameUSRaceEthnicityOut summary);
    void usRaceEthnicityBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameUSRaceEthnicityOut summary);
    void usRaceEthnicityZIP5SignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameUSRaceEthnicityOut summary);
    void usZipRaceEthnicityBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameUSRaceEthnicityOut summary);

    Q_DECL_DEPRECATED_X("Use corridorSignalError() instead")
    void corridorSignalE(OAICorridorOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void corridorSignalError(OAICorridorOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use corridorBatchSignalError() instead")
    void corridorBatchSignalE(OAIBatchCorridorOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void corridorBatchSignalError(OAIBatchCorridorOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countrySignalError() instead")
    void countrySignalE(OAIPersonalNameGeoOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countrySignalError(OAIPersonalNameGeoOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countryBatchSignalError() instead")
    void countryBatchSignalE(OAIBatchPersonalNameGeoOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countryBatchSignalError(OAIBatchPersonalNameGeoOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diasporaSignalError() instead")
    void diasporaSignalE(OAIFirstLastNameDiasporaedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diasporaSignalError(OAIFirstLastNameDiasporaedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diasporaBatchSignalError() instead")
    void diasporaBatchSignalE(OAIBatchFirstLastNameDiasporaedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diasporaBatchSignalError(OAIBatchFirstLastNameDiasporaedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderSignalError() instead")
    void genderSignalE(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderSignalError(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gender1SignalError() instead")
    void gender1SignalE(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gender1SignalError(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderBatchSignalError() instead")
    void genderBatchSignalE(OAIBatchFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderBatchSignalError(OAIBatchFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderFullSignalError() instead")
    void genderFullSignalE(OAIPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderFullSignalError(OAIPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderFullBatchSignalError() instead")
    void genderFullBatchSignalE(OAIBatchPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderFullBatchSignalError(OAIBatchPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderFullGeoSignalError() instead")
    void genderFullGeoSignalE(OAIPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderFullGeoSignalError(OAIPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderFullGeoBatchSignalError() instead")
    void genderFullGeoBatchSignalE(OAIBatchPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderFullGeoBatchSignalError(OAIBatchPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderGeoSignalError() instead")
    void genderGeoSignalE(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderGeoSignalError(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderGeoBatchSignalError() instead")
    void genderGeoBatchSignalE(OAIBatchFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderGeoBatchSignalError(OAIBatchFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originSignalError() instead")
    void originSignalE(OAIFirstLastNameOriginedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void originSignalError(OAIFirstLastNameOriginedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originBatchSignalError() instead")
    void originBatchSignalE(OAIBatchFirstLastNameOriginedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void originBatchSignalError(OAIBatchFirstLastNameOriginedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseNameSignalError() instead")
    void parseNameSignalE(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseNameSignalError(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseNameBatchSignalError() instead")
    void parseNameBatchSignalE(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseNameBatchSignalError(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseNameGeoSignalError() instead")
    void parseNameGeoSignalE(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseNameGeoSignalError(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseNameGeoBatchSignalError() instead")
    void parseNameGeoBatchSignalE(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseNameGeoBatchSignalError(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionFullSignalError() instead")
    void religionFullSignalE(OAIPersonalNameReligionedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void religionFullSignalError(OAIPersonalNameReligionedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionFullBatchSignalError() instead")
    void religionFullBatchSignalE(OAIBatchPersonalNameReligionedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void religionFullBatchSignalError(OAIBatchPersonalNameReligionedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationSignalError() instead")
    void subclassificationSignalE(OAIFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationSignalError(OAIFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationBatchSignalError() instead")
    void subclassificationBatchSignalE(OAIBatchFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationBatchSignalError(OAIBatchFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationFullSignalError() instead")
    void subclassificationFullSignalE(OAIFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationFullSignalError(OAIFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationFullBatchSignalError() instead")
    void subclassificationFullBatchSignalE(OAIBatchPersonalNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationFullBatchSignalError(OAIBatchPersonalNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usRaceEthnicitySignalError() instead")
    void usRaceEthnicitySignalE(OAIFirstLastNameUSRaceEthnicityOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usRaceEthnicitySignalError(OAIFirstLastNameUSRaceEthnicityOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usRaceEthnicityBatchSignalError() instead")
    void usRaceEthnicityBatchSignalE(OAIBatchFirstLastNameUSRaceEthnicityOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usRaceEthnicityBatchSignalError(OAIBatchFirstLastNameUSRaceEthnicityOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usRaceEthnicityZIP5SignalError() instead")
    void usRaceEthnicityZIP5SignalE(OAIFirstLastNameUSRaceEthnicityOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usRaceEthnicityZIP5SignalError(OAIFirstLastNameUSRaceEthnicityOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usZipRaceEthnicityBatchSignalError() instead")
    void usZipRaceEthnicityBatchSignalE(OAIBatchFirstLastNameUSRaceEthnicityOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usZipRaceEthnicityBatchSignalError(OAIBatchFirstLastNameUSRaceEthnicityOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use corridorSignalErrorFull() instead")
    void corridorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void corridorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use corridorBatchSignalErrorFull() instead")
    void corridorBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void corridorBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countrySignalErrorFull() instead")
    void countrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countryBatchSignalErrorFull() instead")
    void countryBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countryBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diasporaSignalErrorFull() instead")
    void diasporaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diasporaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diasporaBatchSignalErrorFull() instead")
    void diasporaBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diasporaBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderSignalErrorFull() instead")
    void genderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gender1SignalErrorFull() instead")
    void gender1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gender1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderBatchSignalErrorFull() instead")
    void genderBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderFullSignalErrorFull() instead")
    void genderFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderFullBatchSignalErrorFull() instead")
    void genderFullBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderFullBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderFullGeoSignalErrorFull() instead")
    void genderFullGeoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderFullGeoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderFullGeoBatchSignalErrorFull() instead")
    void genderFullGeoBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderFullGeoBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderGeoSignalErrorFull() instead")
    void genderGeoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderGeoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderGeoBatchSignalErrorFull() instead")
    void genderGeoBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderGeoBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originSignalErrorFull() instead")
    void originSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void originSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use originBatchSignalErrorFull() instead")
    void originBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void originBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseNameSignalErrorFull() instead")
    void parseNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseNameBatchSignalErrorFull() instead")
    void parseNameBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseNameBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseNameGeoSignalErrorFull() instead")
    void parseNameGeoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseNameGeoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseNameGeoBatchSignalErrorFull() instead")
    void parseNameGeoBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseNameGeoBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionFullSignalErrorFull() instead")
    void religionFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void religionFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionFullBatchSignalErrorFull() instead")
    void religionFullBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void religionFullBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationSignalErrorFull() instead")
    void subclassificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationBatchSignalErrorFull() instead")
    void subclassificationBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationFullSignalErrorFull() instead")
    void subclassificationFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationFullBatchSignalErrorFull() instead")
    void subclassificationFullBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationFullBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usRaceEthnicitySignalErrorFull() instead")
    void usRaceEthnicitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usRaceEthnicitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usRaceEthnicityBatchSignalErrorFull() instead")
    void usRaceEthnicityBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usRaceEthnicityBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usRaceEthnicityZIP5SignalErrorFull() instead")
    void usRaceEthnicityZIP5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usRaceEthnicityZIP5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usZipRaceEthnicityBatchSignalErrorFull() instead")
    void usZipRaceEthnicityBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usZipRaceEthnicityBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
