/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchPersonalFirstLastNameIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchPersonalFirstLastNameIn::OAIMatchPersonalFirstLastNameIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchPersonalFirstLastNameIn::OAIMatchPersonalFirstLastNameIn() {
    this->initializeModel();
}

OAIMatchPersonalFirstLastNameIn::~OAIMatchPersonalFirstLastNameIn() {}

void OAIMatchPersonalFirstLastNameIn::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name1_isSet = false;
    m_name1_isValid = false;

    m_name2_isSet = false;
    m_name2_isValid = false;
}

void OAIMatchPersonalFirstLastNameIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchPersonalFirstLastNameIn::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name1_isValid = ::OpenAPI::fromJsonValue(m_name1, json[QString("name1")]);
    m_name1_isSet = !json[QString("name1")].isNull() && m_name1_isValid;

    m_name2_isValid = ::OpenAPI::fromJsonValue(m_name2, json[QString("name2")]);
    m_name2_isSet = !json[QString("name2")].isNull() && m_name2_isValid;
}

QString OAIMatchPersonalFirstLastNameIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchPersonalFirstLastNameIn::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name1.isSet()) {
        obj.insert(QString("name1"), ::OpenAPI::toJsonValue(m_name1));
    }
    if (m_name2.isSet()) {
        obj.insert(QString("name2"), ::OpenAPI::toJsonValue(m_name2));
    }
    return obj;
}

QString OAIMatchPersonalFirstLastNameIn::getId() const {
    return m_id;
}
void OAIMatchPersonalFirstLastNameIn::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMatchPersonalFirstLastNameIn::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMatchPersonalFirstLastNameIn::is_id_Valid() const{
    return m_id_isValid;
}

OAIFirstLastNameIn OAIMatchPersonalFirstLastNameIn::getName1() const {
    return m_name1;
}
void OAIMatchPersonalFirstLastNameIn::setName1(const OAIFirstLastNameIn &name1) {
    m_name1 = name1;
    m_name1_isSet = true;
}

bool OAIMatchPersonalFirstLastNameIn::is_name1_Set() const{
    return m_name1_isSet;
}

bool OAIMatchPersonalFirstLastNameIn::is_name1_Valid() const{
    return m_name1_isValid;
}

OAIPersonalNameIn OAIMatchPersonalFirstLastNameIn::getName2() const {
    return m_name2;
}
void OAIMatchPersonalFirstLastNameIn::setName2(const OAIPersonalNameIn &name2) {
    m_name2 = name2;
    m_name2_isSet = true;
}

bool OAIMatchPersonalFirstLastNameIn::is_name2_Set() const{
    return m_name2_isSet;
}

bool OAIMatchPersonalFirstLastNameIn::is_name2_Valid() const{
    return m_name2_isValid;
}

bool OAIMatchPersonalFirstLastNameIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name2.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchPersonalFirstLastNameIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
