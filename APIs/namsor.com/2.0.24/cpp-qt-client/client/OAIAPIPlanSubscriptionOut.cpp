/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIPlanSubscriptionOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIPlanSubscriptionOut::OAIAPIPlanSubscriptionOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIPlanSubscriptionOut::OAIAPIPlanSubscriptionOut() {
    this->initializeModel();
}

OAIAPIPlanSubscriptionOut::~OAIAPIPlanSubscriptionOut() {}

void OAIAPIPlanSubscriptionOut::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_currency_factor_isSet = false;
    m_currency_factor_isValid = false;

    m_plan_base_fees_key_isSet = false;
    m_plan_base_fees_key_isValid = false;

    m_plan_ended_isSet = false;
    m_plan_ended_isValid = false;

    m_plan_name_isSet = false;
    m_plan_name_isValid = false;

    m_plan_quota_isSet = false;
    m_plan_quota_isValid = false;

    m_plan_started_isSet = false;
    m_plan_started_isValid = false;

    m_plan_status_isSet = false;
    m_plan_status_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_overage_isSet = false;
    m_price_overage_isValid = false;

    m_price_overage_usd_isSet = false;
    m_price_overage_usd_isValid = false;

    m_price_usd_isSet = false;
    m_price_usd_isValid = false;

    m_prior_plan_started_isSet = false;
    m_prior_plan_started_isValid = false;

    m_stripe_customer_id_isSet = false;
    m_stripe_customer_id_isValid = false;

    m_stripe_status_isSet = false;
    m_stripe_status_isValid = false;

    m_stripe_subscription_isSet = false;
    m_stripe_subscription_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAPIPlanSubscriptionOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIPlanSubscriptionOut::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_currency_factor_isValid = ::OpenAPI::fromJsonValue(m_currency_factor, json[QString("currencyFactor")]);
    m_currency_factor_isSet = !json[QString("currencyFactor")].isNull() && m_currency_factor_isValid;

    m_plan_base_fees_key_isValid = ::OpenAPI::fromJsonValue(m_plan_base_fees_key, json[QString("planBaseFeesKey")]);
    m_plan_base_fees_key_isSet = !json[QString("planBaseFeesKey")].isNull() && m_plan_base_fees_key_isValid;

    m_plan_ended_isValid = ::OpenAPI::fromJsonValue(m_plan_ended, json[QString("planEnded")]);
    m_plan_ended_isSet = !json[QString("planEnded")].isNull() && m_plan_ended_isValid;

    m_plan_name_isValid = ::OpenAPI::fromJsonValue(m_plan_name, json[QString("planName")]);
    m_plan_name_isSet = !json[QString("planName")].isNull() && m_plan_name_isValid;

    m_plan_quota_isValid = ::OpenAPI::fromJsonValue(m_plan_quota, json[QString("planQuota")]);
    m_plan_quota_isSet = !json[QString("planQuota")].isNull() && m_plan_quota_isValid;

    m_plan_started_isValid = ::OpenAPI::fromJsonValue(m_plan_started, json[QString("planStarted")]);
    m_plan_started_isSet = !json[QString("planStarted")].isNull() && m_plan_started_isValid;

    m_plan_status_isValid = ::OpenAPI::fromJsonValue(m_plan_status, json[QString("planStatus")]);
    m_plan_status_isSet = !json[QString("planStatus")].isNull() && m_plan_status_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_overage_isValid = ::OpenAPI::fromJsonValue(m_price_overage, json[QString("priceOverage")]);
    m_price_overage_isSet = !json[QString("priceOverage")].isNull() && m_price_overage_isValid;

    m_price_overage_usd_isValid = ::OpenAPI::fromJsonValue(m_price_overage_usd, json[QString("priceOverageUSD")]);
    m_price_overage_usd_isSet = !json[QString("priceOverageUSD")].isNull() && m_price_overage_usd_isValid;

    m_price_usd_isValid = ::OpenAPI::fromJsonValue(m_price_usd, json[QString("priceUSD")]);
    m_price_usd_isSet = !json[QString("priceUSD")].isNull() && m_price_usd_isValid;

    m_prior_plan_started_isValid = ::OpenAPI::fromJsonValue(m_prior_plan_started, json[QString("priorPlanStarted")]);
    m_prior_plan_started_isSet = !json[QString("priorPlanStarted")].isNull() && m_prior_plan_started_isValid;

    m_stripe_customer_id_isValid = ::OpenAPI::fromJsonValue(m_stripe_customer_id, json[QString("stripeCustomerId")]);
    m_stripe_customer_id_isSet = !json[QString("stripeCustomerId")].isNull() && m_stripe_customer_id_isValid;

    m_stripe_status_isValid = ::OpenAPI::fromJsonValue(m_stripe_status, json[QString("stripeStatus")]);
    m_stripe_status_isSet = !json[QString("stripeStatus")].isNull() && m_stripe_status_isValid;

    m_stripe_subscription_isValid = ::OpenAPI::fromJsonValue(m_stripe_subscription, json[QString("stripeSubscription")]);
    m_stripe_subscription_isSet = !json[QString("stripeSubscription")].isNull() && m_stripe_subscription_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("taxRate")]);
    m_tax_rate_isSet = !json[QString("taxRate")].isNull() && m_tax_rate_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIAPIPlanSubscriptionOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIPlanSubscriptionOut::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_currency_factor_isSet) {
        obj.insert(QString("currencyFactor"), ::OpenAPI::toJsonValue(m_currency_factor));
    }
    if (m_plan_base_fees_key_isSet) {
        obj.insert(QString("planBaseFeesKey"), ::OpenAPI::toJsonValue(m_plan_base_fees_key));
    }
    if (m_plan_ended_isSet) {
        obj.insert(QString("planEnded"), ::OpenAPI::toJsonValue(m_plan_ended));
    }
    if (m_plan_name_isSet) {
        obj.insert(QString("planName"), ::OpenAPI::toJsonValue(m_plan_name));
    }
    if (m_plan_quota_isSet) {
        obj.insert(QString("planQuota"), ::OpenAPI::toJsonValue(m_plan_quota));
    }
    if (m_plan_started_isSet) {
        obj.insert(QString("planStarted"), ::OpenAPI::toJsonValue(m_plan_started));
    }
    if (m_plan_status_isSet) {
        obj.insert(QString("planStatus"), ::OpenAPI::toJsonValue(m_plan_status));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_overage_isSet) {
        obj.insert(QString("priceOverage"), ::OpenAPI::toJsonValue(m_price_overage));
    }
    if (m_price_overage_usd_isSet) {
        obj.insert(QString("priceOverageUSD"), ::OpenAPI::toJsonValue(m_price_overage_usd));
    }
    if (m_price_usd_isSet) {
        obj.insert(QString("priceUSD"), ::OpenAPI::toJsonValue(m_price_usd));
    }
    if (m_prior_plan_started_isSet) {
        obj.insert(QString("priorPlanStarted"), ::OpenAPI::toJsonValue(m_prior_plan_started));
    }
    if (m_stripe_customer_id_isSet) {
        obj.insert(QString("stripeCustomerId"), ::OpenAPI::toJsonValue(m_stripe_customer_id));
    }
    if (m_stripe_status_isSet) {
        obj.insert(QString("stripeStatus"), ::OpenAPI::toJsonValue(m_stripe_status));
    }
    if (m_stripe_subscription_isSet) {
        obj.insert(QString("stripeSubscription"), ::OpenAPI::toJsonValue(m_stripe_subscription));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("taxRate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAPIPlanSubscriptionOut::getApiKey() const {
    return m_api_key;
}
void OAIAPIPlanSubscriptionOut::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIAPIPlanSubscriptionOut::getCurrency() const {
    return m_currency;
}
void OAIAPIPlanSubscriptionOut::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIAPIPlanSubscriptionOut::getCurrencyFactor() const {
    return m_currency_factor;
}
void OAIAPIPlanSubscriptionOut::setCurrencyFactor(const double &currency_factor) {
    m_currency_factor = currency_factor;
    m_currency_factor_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_currency_factor_Set() const{
    return m_currency_factor_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_currency_factor_Valid() const{
    return m_currency_factor_isValid;
}

QString OAIAPIPlanSubscriptionOut::getPlanBaseFeesKey() const {
    return m_plan_base_fees_key;
}
void OAIAPIPlanSubscriptionOut::setPlanBaseFeesKey(const QString &plan_base_fees_key) {
    m_plan_base_fees_key = plan_base_fees_key;
    m_plan_base_fees_key_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_plan_base_fees_key_Set() const{
    return m_plan_base_fees_key_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_plan_base_fees_key_Valid() const{
    return m_plan_base_fees_key_isValid;
}

qint64 OAIAPIPlanSubscriptionOut::getPlanEnded() const {
    return m_plan_ended;
}
void OAIAPIPlanSubscriptionOut::setPlanEnded(const qint64 &plan_ended) {
    m_plan_ended = plan_ended;
    m_plan_ended_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_plan_ended_Set() const{
    return m_plan_ended_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_plan_ended_Valid() const{
    return m_plan_ended_isValid;
}

QString OAIAPIPlanSubscriptionOut::getPlanName() const {
    return m_plan_name;
}
void OAIAPIPlanSubscriptionOut::setPlanName(const QString &plan_name) {
    m_plan_name = plan_name;
    m_plan_name_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_plan_name_Set() const{
    return m_plan_name_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_plan_name_Valid() const{
    return m_plan_name_isValid;
}

qint64 OAIAPIPlanSubscriptionOut::getPlanQuota() const {
    return m_plan_quota;
}
void OAIAPIPlanSubscriptionOut::setPlanQuota(const qint64 &plan_quota) {
    m_plan_quota = plan_quota;
    m_plan_quota_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_plan_quota_Set() const{
    return m_plan_quota_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_plan_quota_Valid() const{
    return m_plan_quota_isValid;
}

qint64 OAIAPIPlanSubscriptionOut::getPlanStarted() const {
    return m_plan_started;
}
void OAIAPIPlanSubscriptionOut::setPlanStarted(const qint64 &plan_started) {
    m_plan_started = plan_started;
    m_plan_started_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_plan_started_Set() const{
    return m_plan_started_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_plan_started_Valid() const{
    return m_plan_started_isValid;
}

QString OAIAPIPlanSubscriptionOut::getPlanStatus() const {
    return m_plan_status;
}
void OAIAPIPlanSubscriptionOut::setPlanStatus(const QString &plan_status) {
    m_plan_status = plan_status;
    m_plan_status_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_plan_status_Set() const{
    return m_plan_status_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_plan_status_Valid() const{
    return m_plan_status_isValid;
}

double OAIAPIPlanSubscriptionOut::getPrice() const {
    return m_price;
}
void OAIAPIPlanSubscriptionOut::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_price_Set() const{
    return m_price_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_price_Valid() const{
    return m_price_isValid;
}

double OAIAPIPlanSubscriptionOut::getPriceOverage() const {
    return m_price_overage;
}
void OAIAPIPlanSubscriptionOut::setPriceOverage(const double &price_overage) {
    m_price_overage = price_overage;
    m_price_overage_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_price_overage_Set() const{
    return m_price_overage_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_price_overage_Valid() const{
    return m_price_overage_isValid;
}

double OAIAPIPlanSubscriptionOut::getPriceOverageUsd() const {
    return m_price_overage_usd;
}
void OAIAPIPlanSubscriptionOut::setPriceOverageUsd(const double &price_overage_usd) {
    m_price_overage_usd = price_overage_usd;
    m_price_overage_usd_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_price_overage_usd_Set() const{
    return m_price_overage_usd_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_price_overage_usd_Valid() const{
    return m_price_overage_usd_isValid;
}

double OAIAPIPlanSubscriptionOut::getPriceUsd() const {
    return m_price_usd;
}
void OAIAPIPlanSubscriptionOut::setPriceUsd(const double &price_usd) {
    m_price_usd = price_usd;
    m_price_usd_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_price_usd_Set() const{
    return m_price_usd_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_price_usd_Valid() const{
    return m_price_usd_isValid;
}

qint64 OAIAPIPlanSubscriptionOut::getPriorPlanStarted() const {
    return m_prior_plan_started;
}
void OAIAPIPlanSubscriptionOut::setPriorPlanStarted(const qint64 &prior_plan_started) {
    m_prior_plan_started = prior_plan_started;
    m_prior_plan_started_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_prior_plan_started_Set() const{
    return m_prior_plan_started_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_prior_plan_started_Valid() const{
    return m_prior_plan_started_isValid;
}

QString OAIAPIPlanSubscriptionOut::getStripeCustomerId() const {
    return m_stripe_customer_id;
}
void OAIAPIPlanSubscriptionOut::setStripeCustomerId(const QString &stripe_customer_id) {
    m_stripe_customer_id = stripe_customer_id;
    m_stripe_customer_id_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_stripe_customer_id_Set() const{
    return m_stripe_customer_id_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_stripe_customer_id_Valid() const{
    return m_stripe_customer_id_isValid;
}

QString OAIAPIPlanSubscriptionOut::getStripeStatus() const {
    return m_stripe_status;
}
void OAIAPIPlanSubscriptionOut::setStripeStatus(const QString &stripe_status) {
    m_stripe_status = stripe_status;
    m_stripe_status_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_stripe_status_Set() const{
    return m_stripe_status_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_stripe_status_Valid() const{
    return m_stripe_status_isValid;
}

QString OAIAPIPlanSubscriptionOut::getStripeSubscription() const {
    return m_stripe_subscription;
}
void OAIAPIPlanSubscriptionOut::setStripeSubscription(const QString &stripe_subscription) {
    m_stripe_subscription = stripe_subscription;
    m_stripe_subscription_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_stripe_subscription_Set() const{
    return m_stripe_subscription_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_stripe_subscription_Valid() const{
    return m_stripe_subscription_isValid;
}

double OAIAPIPlanSubscriptionOut::getTaxRate() const {
    return m_tax_rate;
}
void OAIAPIPlanSubscriptionOut::setTaxRate(const double &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

QString OAIAPIPlanSubscriptionOut::getUserId() const {
    return m_user_id;
}
void OAIAPIPlanSubscriptionOut::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAPIPlanSubscriptionOut::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAPIPlanSubscriptionOut::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAPIPlanSubscriptionOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_base_fees_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_ended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_overage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_overage_usd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_usd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prior_plan_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIPlanSubscriptionOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
