/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalNameCastegroupOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalNameCastegroupOut::OAIPersonalNameCastegroupOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalNameCastegroupOut::OAIPersonalNameCastegroupOut() {
    this->initializeModel();
}

OAIPersonalNameCastegroupOut::~OAIPersonalNameCastegroupOut() {}

void OAIPersonalNameCastegroupOut::initializeModel() {

    m_castegroup_isSet = false;
    m_castegroup_isValid = false;

    m_castegroup_alt_isSet = false;
    m_castegroup_alt_isValid = false;

    m_castegroup_top_isSet = false;
    m_castegroup_top_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_probability_alt_calibrated_isSet = false;
    m_probability_alt_calibrated_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIPersonalNameCastegroupOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalNameCastegroupOut::fromJsonObject(QJsonObject json) {

    m_castegroup_isValid = ::OpenAPI::fromJsonValue(m_castegroup, json[QString("castegroup")]);
    m_castegroup_isSet = !json[QString("castegroup")].isNull() && m_castegroup_isValid;

    m_castegroup_alt_isValid = ::OpenAPI::fromJsonValue(m_castegroup_alt, json[QString("castegroupAlt")]);
    m_castegroup_alt_isSet = !json[QString("castegroupAlt")].isNull() && m_castegroup_alt_isValid;

    m_castegroup_top_isValid = ::OpenAPI::fromJsonValue(m_castegroup_top, json[QString("castegroupTop")]);
    m_castegroup_top_isSet = !json[QString("castegroupTop")].isNull() && m_castegroup_top_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_probability_alt_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_alt_calibrated, json[QString("probabilityAltCalibrated")]);
    m_probability_alt_calibrated_isSet = !json[QString("probabilityAltCalibrated")].isNull() && m_probability_alt_calibrated_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIPersonalNameCastegroupOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalNameCastegroupOut::asJsonObject() const {
    QJsonObject obj;
    if (m_castegroup_isSet) {
        obj.insert(QString("castegroup"), ::OpenAPI::toJsonValue(m_castegroup));
    }
    if (m_castegroup_alt_isSet) {
        obj.insert(QString("castegroupAlt"), ::OpenAPI::toJsonValue(m_castegroup_alt));
    }
    if (m_castegroup_top.size() > 0) {
        obj.insert(QString("castegroupTop"), ::OpenAPI::toJsonValue(m_castegroup_top));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_probability_alt_calibrated_isSet) {
        obj.insert(QString("probabilityAltCalibrated"), ::OpenAPI::toJsonValue(m_probability_alt_calibrated));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIPersonalNameCastegroupOut::getCastegroup() const {
    return m_castegroup;
}
void OAIPersonalNameCastegroupOut::setCastegroup(const QString &castegroup) {
    m_castegroup = castegroup;
    m_castegroup_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_castegroup_Set() const{
    return m_castegroup_isSet;
}

bool OAIPersonalNameCastegroupOut::is_castegroup_Valid() const{
    return m_castegroup_isValid;
}

QString OAIPersonalNameCastegroupOut::getCastegroupAlt() const {
    return m_castegroup_alt;
}
void OAIPersonalNameCastegroupOut::setCastegroupAlt(const QString &castegroup_alt) {
    m_castegroup_alt = castegroup_alt;
    m_castegroup_alt_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_castegroup_alt_Set() const{
    return m_castegroup_alt_isSet;
}

bool OAIPersonalNameCastegroupOut::is_castegroup_alt_Valid() const{
    return m_castegroup_alt_isValid;
}

QList<QString> OAIPersonalNameCastegroupOut::getCastegroupTop() const {
    return m_castegroup_top;
}
void OAIPersonalNameCastegroupOut::setCastegroupTop(const QList<QString> &castegroup_top) {
    m_castegroup_top = castegroup_top;
    m_castegroup_top_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_castegroup_top_Set() const{
    return m_castegroup_top_isSet;
}

bool OAIPersonalNameCastegroupOut::is_castegroup_top_Valid() const{
    return m_castegroup_top_isValid;
}

QString OAIPersonalNameCastegroupOut::getId() const {
    return m_id;
}
void OAIPersonalNameCastegroupOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersonalNameCastegroupOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPersonalNameCastegroupOut::getName() const {
    return m_name;
}
void OAIPersonalNameCastegroupOut::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPersonalNameCastegroupOut::is_name_Valid() const{
    return m_name_isValid;
}

double OAIPersonalNameCastegroupOut::getProbabilityAltCalibrated() const {
    return m_probability_alt_calibrated;
}
void OAIPersonalNameCastegroupOut::setProbabilityAltCalibrated(const double &probability_alt_calibrated) {
    m_probability_alt_calibrated = probability_alt_calibrated;
    m_probability_alt_calibrated_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_probability_alt_calibrated_Set() const{
    return m_probability_alt_calibrated_isSet;
}

bool OAIPersonalNameCastegroupOut::is_probability_alt_calibrated_Valid() const{
    return m_probability_alt_calibrated_isValid;
}

double OAIPersonalNameCastegroupOut::getProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIPersonalNameCastegroupOut::setProbabilityCalibrated(const double &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIPersonalNameCastegroupOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

double OAIPersonalNameCastegroupOut::getScore() const {
    return m_score;
}
void OAIPersonalNameCastegroupOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPersonalNameCastegroupOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIPersonalNameCastegroupOut::getScript() const {
    return m_script;
}
void OAIPersonalNameCastegroupOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIPersonalNameCastegroupOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIPersonalNameCastegroupOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIPersonalNameCastegroupOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_castegroup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_castegroup_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_castegroup_top.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_alt_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalNameCastegroupOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
