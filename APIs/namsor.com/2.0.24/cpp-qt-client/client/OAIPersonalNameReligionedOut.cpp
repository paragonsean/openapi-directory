/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalNameReligionedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalNameReligionedOut::OAIPersonalNameReligionedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalNameReligionedOut::OAIPersonalNameReligionedOut() {
    this->initializeModel();
}

OAIPersonalNameReligionedOut::~OAIPersonalNameReligionedOut() {}

void OAIPersonalNameReligionedOut::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_probability_alt_calibrated_isSet = false;
    m_probability_alt_calibrated_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_religion_isSet = false;
    m_religion_isValid = false;

    m_religion_alt_isSet = false;
    m_religion_alt_isValid = false;

    m_religions_top_isSet = false;
    m_religions_top_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIPersonalNameReligionedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalNameReligionedOut::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_probability_alt_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_alt_calibrated, json[QString("probabilityAltCalibrated")]);
    m_probability_alt_calibrated_isSet = !json[QString("probabilityAltCalibrated")].isNull() && m_probability_alt_calibrated_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_religion_isValid = ::OpenAPI::fromJsonValue(m_religion, json[QString("religion")]);
    m_religion_isSet = !json[QString("religion")].isNull() && m_religion_isValid;

    m_religion_alt_isValid = ::OpenAPI::fromJsonValue(m_religion_alt, json[QString("religionAlt")]);
    m_religion_alt_isSet = !json[QString("religionAlt")].isNull() && m_religion_alt_isValid;

    m_religions_top_isValid = ::OpenAPI::fromJsonValue(m_religions_top, json[QString("religionsTop")]);
    m_religions_top_isSet = !json[QString("religionsTop")].isNull() && m_religions_top_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIPersonalNameReligionedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalNameReligionedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_probability_alt_calibrated_isSet) {
        obj.insert(QString("probabilityAltCalibrated"), ::OpenAPI::toJsonValue(m_probability_alt_calibrated));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_religion_isSet) {
        obj.insert(QString("religion"), ::OpenAPI::toJsonValue(m_religion));
    }
    if (m_religion_alt_isSet) {
        obj.insert(QString("religionAlt"), ::OpenAPI::toJsonValue(m_religion_alt));
    }
    if (m_religions_top.size() > 0) {
        obj.insert(QString("religionsTop"), ::OpenAPI::toJsonValue(m_religions_top));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIPersonalNameReligionedOut::getId() const {
    return m_id;
}
void OAIPersonalNameReligionedOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersonalNameReligionedOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPersonalNameReligionedOut::getName() const {
    return m_name;
}
void OAIPersonalNameReligionedOut::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPersonalNameReligionedOut::is_name_Valid() const{
    return m_name_isValid;
}

double OAIPersonalNameReligionedOut::getProbabilityAltCalibrated() const {
    return m_probability_alt_calibrated;
}
void OAIPersonalNameReligionedOut::setProbabilityAltCalibrated(const double &probability_alt_calibrated) {
    m_probability_alt_calibrated = probability_alt_calibrated;
    m_probability_alt_calibrated_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_probability_alt_calibrated_Set() const{
    return m_probability_alt_calibrated_isSet;
}

bool OAIPersonalNameReligionedOut::is_probability_alt_calibrated_Valid() const{
    return m_probability_alt_calibrated_isValid;
}

double OAIPersonalNameReligionedOut::getProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIPersonalNameReligionedOut::setProbabilityCalibrated(const double &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIPersonalNameReligionedOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

QString OAIPersonalNameReligionedOut::getReligion() const {
    return m_religion;
}
void OAIPersonalNameReligionedOut::setReligion(const QString &religion) {
    m_religion = religion;
    m_religion_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_religion_Set() const{
    return m_religion_isSet;
}

bool OAIPersonalNameReligionedOut::is_religion_Valid() const{
    return m_religion_isValid;
}

QString OAIPersonalNameReligionedOut::getReligionAlt() const {
    return m_religion_alt;
}
void OAIPersonalNameReligionedOut::setReligionAlt(const QString &religion_alt) {
    m_religion_alt = religion_alt;
    m_religion_alt_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_religion_alt_Set() const{
    return m_religion_alt_isSet;
}

bool OAIPersonalNameReligionedOut::is_religion_alt_Valid() const{
    return m_religion_alt_isValid;
}

QList<QString> OAIPersonalNameReligionedOut::getReligionsTop() const {
    return m_religions_top;
}
void OAIPersonalNameReligionedOut::setReligionsTop(const QList<QString> &religions_top) {
    m_religions_top = religions_top;
    m_religions_top_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_religions_top_Set() const{
    return m_religions_top_isSet;
}

bool OAIPersonalNameReligionedOut::is_religions_top_Valid() const{
    return m_religions_top_isValid;
}

double OAIPersonalNameReligionedOut::getScore() const {
    return m_score;
}
void OAIPersonalNameReligionedOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPersonalNameReligionedOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIPersonalNameReligionedOut::getScript() const {
    return m_script;
}
void OAIPersonalNameReligionedOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIPersonalNameReligionedOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIPersonalNameReligionedOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIPersonalNameReligionedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_alt_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_religion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_religion_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_religions_top.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalNameReligionedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
