/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstLastNamePhoneCodedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstLastNamePhoneCodedOut::OAIFirstLastNamePhoneCodedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstLastNamePhoneCodedOut::OAIFirstLastNamePhoneCodedOut() {
    this->initializeModel();
}

OAIFirstLastNamePhoneCodedOut::~OAIFirstLastNamePhoneCodedOut() {}

void OAIFirstLastNamePhoneCodedOut::initializeModel() {

    m_country_iso2_isSet = false;
    m_country_iso2_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_international_phone_number_verified_isSet = false;
    m_international_phone_number_verified_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_origin_country_iso2_isSet = false;
    m_origin_country_iso2_isValid = false;

    m_origin_country_iso2_alt_isSet = false;
    m_origin_country_iso2_alt_isValid = false;

    m_phone_country_code_isSet = false;
    m_phone_country_code_isValid = false;

    m_phone_country_code_alt_isSet = false;
    m_phone_country_code_alt_isValid = false;

    m_phone_country_iso2_isSet = false;
    m_phone_country_iso2_isValid = false;

    m_phone_country_iso2_alt_isSet = false;
    m_phone_country_iso2_alt_isValid = false;

    m_phone_country_iso2_verified_isSet = false;
    m_phone_country_iso2_verified_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;
}

void OAIFirstLastNamePhoneCodedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstLastNamePhoneCodedOut::fromJsonObject(QJsonObject json) {

    m_country_iso2_isValid = ::OpenAPI::fromJsonValue(m_country_iso2, json[QString("countryIso2")]);
    m_country_iso2_isSet = !json[QString("countryIso2")].isNull() && m_country_iso2_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_international_phone_number_verified_isValid = ::OpenAPI::fromJsonValue(m_international_phone_number_verified, json[QString("internationalPhoneNumberVerified")]);
    m_international_phone_number_verified_isSet = !json[QString("internationalPhoneNumberVerified")].isNull() && m_international_phone_number_verified_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_origin_country_iso2_isValid = ::OpenAPI::fromJsonValue(m_origin_country_iso2, json[QString("originCountryIso2")]);
    m_origin_country_iso2_isSet = !json[QString("originCountryIso2")].isNull() && m_origin_country_iso2_isValid;

    m_origin_country_iso2_alt_isValid = ::OpenAPI::fromJsonValue(m_origin_country_iso2_alt, json[QString("originCountryIso2Alt")]);
    m_origin_country_iso2_alt_isSet = !json[QString("originCountryIso2Alt")].isNull() && m_origin_country_iso2_alt_isValid;

    m_phone_country_code_isValid = ::OpenAPI::fromJsonValue(m_phone_country_code, json[QString("phoneCountryCode")]);
    m_phone_country_code_isSet = !json[QString("phoneCountryCode")].isNull() && m_phone_country_code_isValid;

    m_phone_country_code_alt_isValid = ::OpenAPI::fromJsonValue(m_phone_country_code_alt, json[QString("phoneCountryCodeAlt")]);
    m_phone_country_code_alt_isSet = !json[QString("phoneCountryCodeAlt")].isNull() && m_phone_country_code_alt_isValid;

    m_phone_country_iso2_isValid = ::OpenAPI::fromJsonValue(m_phone_country_iso2, json[QString("phoneCountryIso2")]);
    m_phone_country_iso2_isSet = !json[QString("phoneCountryIso2")].isNull() && m_phone_country_iso2_isValid;

    m_phone_country_iso2_alt_isValid = ::OpenAPI::fromJsonValue(m_phone_country_iso2_alt, json[QString("phoneCountryIso2Alt")]);
    m_phone_country_iso2_alt_isSet = !json[QString("phoneCountryIso2Alt")].isNull() && m_phone_country_iso2_alt_isValid;

    m_phone_country_iso2_verified_isValid = ::OpenAPI::fromJsonValue(m_phone_country_iso2_verified, json[QString("phoneCountryIso2Verified")]);
    m_phone_country_iso2_verified_isSet = !json[QString("phoneCountryIso2Verified")].isNull() && m_phone_country_iso2_verified_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstLastNamePhoneCodedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_country_iso2_isSet) {
        obj.insert(QString("countryIso2"), ::OpenAPI::toJsonValue(m_country_iso2));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_international_phone_number_verified_isSet) {
        obj.insert(QString("internationalPhoneNumberVerified"), ::OpenAPI::toJsonValue(m_international_phone_number_verified));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_origin_country_iso2_isSet) {
        obj.insert(QString("originCountryIso2"), ::OpenAPI::toJsonValue(m_origin_country_iso2));
    }
    if (m_origin_country_iso2_alt_isSet) {
        obj.insert(QString("originCountryIso2Alt"), ::OpenAPI::toJsonValue(m_origin_country_iso2_alt));
    }
    if (m_phone_country_code_isSet) {
        obj.insert(QString("phoneCountryCode"), ::OpenAPI::toJsonValue(m_phone_country_code));
    }
    if (m_phone_country_code_alt_isSet) {
        obj.insert(QString("phoneCountryCodeAlt"), ::OpenAPI::toJsonValue(m_phone_country_code_alt));
    }
    if (m_phone_country_iso2_isSet) {
        obj.insert(QString("phoneCountryIso2"), ::OpenAPI::toJsonValue(m_phone_country_iso2));
    }
    if (m_phone_country_iso2_alt_isSet) {
        obj.insert(QString("phoneCountryIso2Alt"), ::OpenAPI::toJsonValue(m_phone_country_iso2_alt));
    }
    if (m_phone_country_iso2_verified_isSet) {
        obj.insert(QString("phoneCountryIso2Verified"), ::OpenAPI::toJsonValue(m_phone_country_iso2_verified));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    return obj;
}

QString OAIFirstLastNamePhoneCodedOut::getCountryIso2() const {
    return m_country_iso2;
}
void OAIFirstLastNamePhoneCodedOut::setCountryIso2(const QString &country_iso2) {
    m_country_iso2 = country_iso2;
    m_country_iso2_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_country_iso2_Set() const{
    return m_country_iso2_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_country_iso2_Valid() const{
    return m_country_iso2_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getFirstName() const {
    return m_first_name;
}
void OAIFirstLastNamePhoneCodedOut::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getId() const {
    return m_id;
}
void OAIFirstLastNamePhoneCodedOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getInternationalPhoneNumberVerified() const {
    return m_international_phone_number_verified;
}
void OAIFirstLastNamePhoneCodedOut::setInternationalPhoneNumberVerified(const QString &international_phone_number_verified) {
    m_international_phone_number_verified = international_phone_number_verified;
    m_international_phone_number_verified_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_international_phone_number_verified_Set() const{
    return m_international_phone_number_verified_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_international_phone_number_verified_Valid() const{
    return m_international_phone_number_verified_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getLastName() const {
    return m_last_name;
}
void OAIFirstLastNamePhoneCodedOut::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getOriginCountryIso2() const {
    return m_origin_country_iso2;
}
void OAIFirstLastNamePhoneCodedOut::setOriginCountryIso2(const QString &origin_country_iso2) {
    m_origin_country_iso2 = origin_country_iso2;
    m_origin_country_iso2_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_origin_country_iso2_Set() const{
    return m_origin_country_iso2_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_origin_country_iso2_Valid() const{
    return m_origin_country_iso2_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getOriginCountryIso2Alt() const {
    return m_origin_country_iso2_alt;
}
void OAIFirstLastNamePhoneCodedOut::setOriginCountryIso2Alt(const QString &origin_country_iso2_alt) {
    m_origin_country_iso2_alt = origin_country_iso2_alt;
    m_origin_country_iso2_alt_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_origin_country_iso2_alt_Set() const{
    return m_origin_country_iso2_alt_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_origin_country_iso2_alt_Valid() const{
    return m_origin_country_iso2_alt_isValid;
}

qint32 OAIFirstLastNamePhoneCodedOut::getPhoneCountryCode() const {
    return m_phone_country_code;
}
void OAIFirstLastNamePhoneCodedOut::setPhoneCountryCode(const qint32 &phone_country_code) {
    m_phone_country_code = phone_country_code;
    m_phone_country_code_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_code_Set() const{
    return m_phone_country_code_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_code_Valid() const{
    return m_phone_country_code_isValid;
}

qint32 OAIFirstLastNamePhoneCodedOut::getPhoneCountryCodeAlt() const {
    return m_phone_country_code_alt;
}
void OAIFirstLastNamePhoneCodedOut::setPhoneCountryCodeAlt(const qint32 &phone_country_code_alt) {
    m_phone_country_code_alt = phone_country_code_alt;
    m_phone_country_code_alt_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_code_alt_Set() const{
    return m_phone_country_code_alt_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_code_alt_Valid() const{
    return m_phone_country_code_alt_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getPhoneCountryIso2() const {
    return m_phone_country_iso2;
}
void OAIFirstLastNamePhoneCodedOut::setPhoneCountryIso2(const QString &phone_country_iso2) {
    m_phone_country_iso2 = phone_country_iso2;
    m_phone_country_iso2_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_iso2_Set() const{
    return m_phone_country_iso2_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_iso2_Valid() const{
    return m_phone_country_iso2_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getPhoneCountryIso2Alt() const {
    return m_phone_country_iso2_alt;
}
void OAIFirstLastNamePhoneCodedOut::setPhoneCountryIso2Alt(const QString &phone_country_iso2_alt) {
    m_phone_country_iso2_alt = phone_country_iso2_alt;
    m_phone_country_iso2_alt_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_iso2_alt_Set() const{
    return m_phone_country_iso2_alt_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_iso2_alt_Valid() const{
    return m_phone_country_iso2_alt_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getPhoneCountryIso2Verified() const {
    return m_phone_country_iso2_verified;
}
void OAIFirstLastNamePhoneCodedOut::setPhoneCountryIso2Verified(const QString &phone_country_iso2_verified) {
    m_phone_country_iso2_verified = phone_country_iso2_verified;
    m_phone_country_iso2_verified_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_iso2_verified_Set() const{
    return m_phone_country_iso2_verified_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_country_iso2_verified_Valid() const{
    return m_phone_country_iso2_verified_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getPhoneNumber() const {
    return m_phone_number;
}
void OAIFirstLastNamePhoneCodedOut::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

double OAIFirstLastNamePhoneCodedOut::getScore() const {
    return m_score;
}
void OAIFirstLastNamePhoneCodedOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIFirstLastNamePhoneCodedOut::getScript() const {
    return m_script;
}
void OAIFirstLastNamePhoneCodedOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIFirstLastNamePhoneCodedOut::isVerified() const {
    return m_verified;
}
void OAIFirstLastNamePhoneCodedOut::setVerified(const bool &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIFirstLastNamePhoneCodedOut::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIFirstLastNamePhoneCodedOut::is_verified_Valid() const{
    return m_verified_isValid;
}

bool OAIFirstLastNamePhoneCodedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_phone_number_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_country_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_country_iso2_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_country_code_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_country_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_country_iso2_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_country_iso2_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstLastNamePhoneCodedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
