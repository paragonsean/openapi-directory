/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICorridorIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICorridorIn::OAICorridorIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICorridorIn::OAICorridorIn() {
    this->initializeModel();
}

OAICorridorIn::~OAICorridorIn() {}

void OAICorridorIn::initializeModel() {

    m_first_last_name_geo_from_isSet = false;
    m_first_last_name_geo_from_isValid = false;

    m_first_last_name_geo_to_isSet = false;
    m_first_last_name_geo_to_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAICorridorIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICorridorIn::fromJsonObject(QJsonObject json) {

    m_first_last_name_geo_from_isValid = ::OpenAPI::fromJsonValue(m_first_last_name_geo_from, json[QString("firstLastNameGeoFrom")]);
    m_first_last_name_geo_from_isSet = !json[QString("firstLastNameGeoFrom")].isNull() && m_first_last_name_geo_from_isValid;

    m_first_last_name_geo_to_isValid = ::OpenAPI::fromJsonValue(m_first_last_name_geo_to, json[QString("firstLastNameGeoTo")]);
    m_first_last_name_geo_to_isSet = !json[QString("firstLastNameGeoTo")].isNull() && m_first_last_name_geo_to_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAICorridorIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICorridorIn::asJsonObject() const {
    QJsonObject obj;
    if (m_first_last_name_geo_from.isSet()) {
        obj.insert(QString("firstLastNameGeoFrom"), ::OpenAPI::toJsonValue(m_first_last_name_geo_from));
    }
    if (m_first_last_name_geo_to.isSet()) {
        obj.insert(QString("firstLastNameGeoTo"), ::OpenAPI::toJsonValue(m_first_last_name_geo_to));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

OAIFirstLastNameGeoIn OAICorridorIn::getFirstLastNameGeoFrom() const {
    return m_first_last_name_geo_from;
}
void OAICorridorIn::setFirstLastNameGeoFrom(const OAIFirstLastNameGeoIn &first_last_name_geo_from) {
    m_first_last_name_geo_from = first_last_name_geo_from;
    m_first_last_name_geo_from_isSet = true;
}

bool OAICorridorIn::is_first_last_name_geo_from_Set() const{
    return m_first_last_name_geo_from_isSet;
}

bool OAICorridorIn::is_first_last_name_geo_from_Valid() const{
    return m_first_last_name_geo_from_isValid;
}

OAIFirstLastNameGeoIn OAICorridorIn::getFirstLastNameGeoTo() const {
    return m_first_last_name_geo_to;
}
void OAICorridorIn::setFirstLastNameGeoTo(const OAIFirstLastNameGeoIn &first_last_name_geo_to) {
    m_first_last_name_geo_to = first_last_name_geo_to;
    m_first_last_name_geo_to_isSet = true;
}

bool OAICorridorIn::is_first_last_name_geo_to_Set() const{
    return m_first_last_name_geo_to_isSet;
}

bool OAICorridorIn::is_first_last_name_geo_to_Valid() const{
    return m_first_last_name_geo_to_isValid;
}

QString OAICorridorIn::getId() const {
    return m_id;
}
void OAICorridorIn::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICorridorIn::is_id_Set() const{
    return m_id_isSet;
}

bool OAICorridorIn::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICorridorIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_last_name_geo_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_last_name_geo_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICorridorIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
