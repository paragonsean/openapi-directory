/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareVersionOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareVersionOut::OAISoftwareVersionOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareVersionOut::OAISoftwareVersionOut() {
    this->initializeModel();
}

OAISoftwareVersionOut::~OAISoftwareVersionOut() {}

void OAISoftwareVersionOut::initializeModel() {

    m_software_name_and_version_isSet = false;
    m_software_name_and_version_isValid = false;

    m_software_version_isSet = false;
    m_software_version_isValid = false;
}

void OAISoftwareVersionOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareVersionOut::fromJsonObject(QJsonObject json) {

    m_software_name_and_version_isValid = ::OpenAPI::fromJsonValue(m_software_name_and_version, json[QString("softwareNameAndVersion")]);
    m_software_name_and_version_isSet = !json[QString("softwareNameAndVersion")].isNull() && m_software_name_and_version_isValid;

    m_software_version_isValid = ::OpenAPI::fromJsonValue(m_software_version, json[QString("softwareVersion")]);
    m_software_version_isSet = !json[QString("softwareVersion")].isNull() && m_software_version_isValid;
}

QString OAISoftwareVersionOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareVersionOut::asJsonObject() const {
    QJsonObject obj;
    if (m_software_name_and_version_isSet) {
        obj.insert(QString("softwareNameAndVersion"), ::OpenAPI::toJsonValue(m_software_name_and_version));
    }
    if (m_software_version.size() > 0) {
        obj.insert(QString("softwareVersion"), ::OpenAPI::toJsonValue(m_software_version));
    }
    return obj;
}

QString OAISoftwareVersionOut::getSoftwareNameAndVersion() const {
    return m_software_name_and_version;
}
void OAISoftwareVersionOut::setSoftwareNameAndVersion(const QString &software_name_and_version) {
    m_software_name_and_version = software_name_and_version;
    m_software_name_and_version_isSet = true;
}

bool OAISoftwareVersionOut::is_software_name_and_version_Set() const{
    return m_software_name_and_version_isSet;
}

bool OAISoftwareVersionOut::is_software_name_and_version_Valid() const{
    return m_software_name_and_version_isValid;
}

QList<qint32> OAISoftwareVersionOut::getSoftwareVersion() const {
    return m_software_version;
}
void OAISoftwareVersionOut::setSoftwareVersion(const QList<qint32> &software_version) {
    m_software_version = software_version;
    m_software_version_isSet = true;
}

bool OAISoftwareVersionOut::is_software_version_Set() const{
    return m_software_version_isSet;
}

bool OAISoftwareVersionOut::is_software_version_Valid() const{
    return m_software_version_isValid;
}

bool OAISoftwareVersionOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_software_name_and_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareVersionOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
