/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPIKeyOut.h
 *
 * 
 */

#ifndef OAIAPIKeyOut_H
#define OAIAPIKeyOut_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAPIKeyOut : public OAIObject {
public:
    OAIAPIKeyOut();
    OAIAPIKeyOut(QString json);
    ~OAIAPIKeyOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAdmin() const;
    void setAdmin(const bool &admin);
    bool is_admin_Set() const;
    bool is_admin_Valid() const;

    bool isAnonymized() const;
    void setAnonymized(const bool &anonymized);
    bool is_anonymized_Set() const;
    bool is_anonymized_Valid() const;

    QString getApiKey() const;
    void setApiKey(const QString &api_key);
    bool is_api_key_Set() const;
    bool is_api_key_Valid() const;

    bool isCorporate() const;
    void setCorporate(const bool &corporate);
    bool is_corporate_Set() const;
    bool is_corporate_Valid() const;

    bool isDisabled() const;
    void setDisabled(const bool &disabled);
    bool is_disabled_Set() const;
    bool is_disabled_Valid() const;

    bool isLearnable() const;
    void setLearnable(const bool &learnable);
    bool is_learnable_Set() const;
    bool is_learnable_Valid() const;

    bool isPartner() const;
    void setPartner(const bool &partner);
    bool is_partner_Set() const;
    bool is_partner_Valid() const;

    bool isStriped() const;
    void setStriped(const bool &striped);
    bool is_striped_Set() const;
    bool is_striped_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    bool isVetted() const;
    void setVetted(const bool &vetted);
    bool is_vetted_Set() const;
    bool is_vetted_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_admin;
    bool m_admin_isSet;
    bool m_admin_isValid;

    bool m_anonymized;
    bool m_anonymized_isSet;
    bool m_anonymized_isValid;

    QString m_api_key;
    bool m_api_key_isSet;
    bool m_api_key_isValid;

    bool m_corporate;
    bool m_corporate_isSet;
    bool m_corporate_isValid;

    bool m_disabled;
    bool m_disabled_isSet;
    bool m_disabled_isValid;

    bool m_learnable;
    bool m_learnable_isSet;
    bool m_learnable_isValid;

    bool m_partner;
    bool m_partner_isSet;
    bool m_partner_isValid;

    bool m_striped;
    bool m_striped_isSet;
    bool m_striped_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    bool m_vetted;
    bool m_vetted_isSet;
    bool m_vetted_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPIKeyOut)

#endif // OAIAPIKeyOut_H
