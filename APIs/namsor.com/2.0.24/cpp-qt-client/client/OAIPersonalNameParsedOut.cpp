/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalNameParsedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalNameParsedOut::OAIPersonalNameParsedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalNameParsedOut::OAIPersonalNameParsedOut() {
    this->initializeModel();
}

OAIPersonalNameParsedOut::~OAIPersonalNameParsedOut() {}

void OAIPersonalNameParsedOut::initializeModel() {

    m_first_last_name_isSet = false;
    m_first_last_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_parser_type_isSet = false;
    m_name_parser_type_isValid = false;

    m_name_parser_type_alt_isSet = false;
    m_name_parser_type_alt_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIPersonalNameParsedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalNameParsedOut::fromJsonObject(QJsonObject json) {

    m_first_last_name_isValid = ::OpenAPI::fromJsonValue(m_first_last_name, json[QString("firstLastName")]);
    m_first_last_name_isSet = !json[QString("firstLastName")].isNull() && m_first_last_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_parser_type_isValid = ::OpenAPI::fromJsonValue(m_name_parser_type, json[QString("nameParserType")]);
    m_name_parser_type_isSet = !json[QString("nameParserType")].isNull() && m_name_parser_type_isValid;

    m_name_parser_type_alt_isValid = ::OpenAPI::fromJsonValue(m_name_parser_type_alt, json[QString("nameParserTypeAlt")]);
    m_name_parser_type_alt_isSet = !json[QString("nameParserTypeAlt")].isNull() && m_name_parser_type_alt_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIPersonalNameParsedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalNameParsedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_first_last_name.isSet()) {
        obj.insert(QString("firstLastName"), ::OpenAPI::toJsonValue(m_first_last_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_parser_type_isSet) {
        obj.insert(QString("nameParserType"), ::OpenAPI::toJsonValue(m_name_parser_type));
    }
    if (m_name_parser_type_alt_isSet) {
        obj.insert(QString("nameParserTypeAlt"), ::OpenAPI::toJsonValue(m_name_parser_type_alt));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

OAIFirstLastNameOut OAIPersonalNameParsedOut::getFirstLastName() const {
    return m_first_last_name;
}
void OAIPersonalNameParsedOut::setFirstLastName(const OAIFirstLastNameOut &first_last_name) {
    m_first_last_name = first_last_name;
    m_first_last_name_isSet = true;
}

bool OAIPersonalNameParsedOut::is_first_last_name_Set() const{
    return m_first_last_name_isSet;
}

bool OAIPersonalNameParsedOut::is_first_last_name_Valid() const{
    return m_first_last_name_isValid;
}

QString OAIPersonalNameParsedOut::getId() const {
    return m_id;
}
void OAIPersonalNameParsedOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersonalNameParsedOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersonalNameParsedOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPersonalNameParsedOut::getName() const {
    return m_name;
}
void OAIPersonalNameParsedOut::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPersonalNameParsedOut::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPersonalNameParsedOut::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPersonalNameParsedOut::getNameParserType() const {
    return m_name_parser_type;
}
void OAIPersonalNameParsedOut::setNameParserType(const QString &name_parser_type) {
    m_name_parser_type = name_parser_type;
    m_name_parser_type_isSet = true;
}

bool OAIPersonalNameParsedOut::is_name_parser_type_Set() const{
    return m_name_parser_type_isSet;
}

bool OAIPersonalNameParsedOut::is_name_parser_type_Valid() const{
    return m_name_parser_type_isValid;
}

QString OAIPersonalNameParsedOut::getNameParserTypeAlt() const {
    return m_name_parser_type_alt;
}
void OAIPersonalNameParsedOut::setNameParserTypeAlt(const QString &name_parser_type_alt) {
    m_name_parser_type_alt = name_parser_type_alt;
    m_name_parser_type_alt_isSet = true;
}

bool OAIPersonalNameParsedOut::is_name_parser_type_alt_Set() const{
    return m_name_parser_type_alt_isSet;
}

bool OAIPersonalNameParsedOut::is_name_parser_type_alt_Valid() const{
    return m_name_parser_type_alt_isValid;
}

double OAIPersonalNameParsedOut::getScore() const {
    return m_score;
}
void OAIPersonalNameParsedOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPersonalNameParsedOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPersonalNameParsedOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIPersonalNameParsedOut::getScript() const {
    return m_script;
}
void OAIPersonalNameParsedOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIPersonalNameParsedOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIPersonalNameParsedOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIPersonalNameParsedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_last_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_parser_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_parser_type_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalNameParsedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
