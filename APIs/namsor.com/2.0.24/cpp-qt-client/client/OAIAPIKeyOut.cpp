/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIKeyOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIKeyOut::OAIAPIKeyOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIKeyOut::OAIAPIKeyOut() {
    this->initializeModel();
}

OAIAPIKeyOut::~OAIAPIKeyOut() {}

void OAIAPIKeyOut::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_anonymized_isSet = false;
    m_anonymized_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_corporate_isSet = false;
    m_corporate_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_learnable_isSet = false;
    m_learnable_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_striped_isSet = false;
    m_striped_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_vetted_isSet = false;
    m_vetted_isValid = false;
}

void OAIAPIKeyOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIKeyOut::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_anonymized_isValid = ::OpenAPI::fromJsonValue(m_anonymized, json[QString("anonymized")]);
    m_anonymized_isSet = !json[QString("anonymized")].isNull() && m_anonymized_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_corporate_isValid = ::OpenAPI::fromJsonValue(m_corporate, json[QString("corporate")]);
    m_corporate_isSet = !json[QString("corporate")].isNull() && m_corporate_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_learnable_isValid = ::OpenAPI::fromJsonValue(m_learnable, json[QString("learnable")]);
    m_learnable_isSet = !json[QString("learnable")].isNull() && m_learnable_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_striped_isValid = ::OpenAPI::fromJsonValue(m_striped, json[QString("striped")]);
    m_striped_isSet = !json[QString("striped")].isNull() && m_striped_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_vetted_isValid = ::OpenAPI::fromJsonValue(m_vetted, json[QString("vetted")]);
    m_vetted_isSet = !json[QString("vetted")].isNull() && m_vetted_isValid;
}

QString OAIAPIKeyOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIKeyOut::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_anonymized_isSet) {
        obj.insert(QString("anonymized"), ::OpenAPI::toJsonValue(m_anonymized));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_corporate_isSet) {
        obj.insert(QString("corporate"), ::OpenAPI::toJsonValue(m_corporate));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_learnable_isSet) {
        obj.insert(QString("learnable"), ::OpenAPI::toJsonValue(m_learnable));
    }
    if (m_partner_isSet) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_striped_isSet) {
        obj.insert(QString("striped"), ::OpenAPI::toJsonValue(m_striped));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_vetted_isSet) {
        obj.insert(QString("vetted"), ::OpenAPI::toJsonValue(m_vetted));
    }
    return obj;
}

bool OAIAPIKeyOut::isAdmin() const {
    return m_admin;
}
void OAIAPIKeyOut::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIAPIKeyOut::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIAPIKeyOut::is_admin_Valid() const{
    return m_admin_isValid;
}

bool OAIAPIKeyOut::isAnonymized() const {
    return m_anonymized;
}
void OAIAPIKeyOut::setAnonymized(const bool &anonymized) {
    m_anonymized = anonymized;
    m_anonymized_isSet = true;
}

bool OAIAPIKeyOut::is_anonymized_Set() const{
    return m_anonymized_isSet;
}

bool OAIAPIKeyOut::is_anonymized_Valid() const{
    return m_anonymized_isValid;
}

QString OAIAPIKeyOut::getApiKey() const {
    return m_api_key;
}
void OAIAPIKeyOut::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIAPIKeyOut::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIAPIKeyOut::is_api_key_Valid() const{
    return m_api_key_isValid;
}

bool OAIAPIKeyOut::isCorporate() const {
    return m_corporate;
}
void OAIAPIKeyOut::setCorporate(const bool &corporate) {
    m_corporate = corporate;
    m_corporate_isSet = true;
}

bool OAIAPIKeyOut::is_corporate_Set() const{
    return m_corporate_isSet;
}

bool OAIAPIKeyOut::is_corporate_Valid() const{
    return m_corporate_isValid;
}

bool OAIAPIKeyOut::isDisabled() const {
    return m_disabled;
}
void OAIAPIKeyOut::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIAPIKeyOut::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIAPIKeyOut::is_disabled_Valid() const{
    return m_disabled_isValid;
}

bool OAIAPIKeyOut::isLearnable() const {
    return m_learnable;
}
void OAIAPIKeyOut::setLearnable(const bool &learnable) {
    m_learnable = learnable;
    m_learnable_isSet = true;
}

bool OAIAPIKeyOut::is_learnable_Set() const{
    return m_learnable_isSet;
}

bool OAIAPIKeyOut::is_learnable_Valid() const{
    return m_learnable_isValid;
}

bool OAIAPIKeyOut::isPartner() const {
    return m_partner;
}
void OAIAPIKeyOut::setPartner(const bool &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIAPIKeyOut::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIAPIKeyOut::is_partner_Valid() const{
    return m_partner_isValid;
}

bool OAIAPIKeyOut::isStriped() const {
    return m_striped;
}
void OAIAPIKeyOut::setStriped(const bool &striped) {
    m_striped = striped;
    m_striped_isSet = true;
}

bool OAIAPIKeyOut::is_striped_Set() const{
    return m_striped_isSet;
}

bool OAIAPIKeyOut::is_striped_Valid() const{
    return m_striped_isValid;
}

QString OAIAPIKeyOut::getUserId() const {
    return m_user_id;
}
void OAIAPIKeyOut::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAPIKeyOut::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAPIKeyOut::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAPIKeyOut::isVetted() const {
    return m_vetted;
}
void OAIAPIKeyOut::setVetted(const bool &vetted) {
    m_vetted = vetted;
    m_vetted_isSet = true;
}

bool OAIAPIKeyOut::is_vetted_Set() const{
    return m_vetted_isSet;
}

bool OAIAPIKeyOut::is_vetted_Valid() const{
    return m_vetted_isValid;
}

bool OAIAPIKeyOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learnable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_striped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vetted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIKeyOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
