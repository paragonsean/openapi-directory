/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminApi_H
#define OAI_OAIAdminApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIClassifierTaxonomyOut.h"
#include "OAIAPIClassifiersStatusOut.h"
#include "OAIAPIKeyOut.h"
#include "OAIAPIPeriodUsageOut.h"
#include "OAIAPIServicesOut.h"
#include "OAIAPIUsageAggregatedOut.h"
#include "OAIAPIUsageHistoryOut.h"
#include "OAIRegionOut.h"
#include "OAISoftwareVersionOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminApi : public QObject {
    Q_OBJECT

public:
    OAIAdminApi(const int timeOut = 0);
    ~OAIAdminApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  source QString [required]
    * @param[in]  anonymized bool [required]
    * @param[in]  token QString [required]
    */
    virtual void anonymize(const QString &source, const bool &anonymized, const QString &token);


    virtual void apiKeyInfo();


    virtual void apiStatus();


    virtual void apiUsage();


    virtual void apiUsageHistory();


    virtual void apiUsageHistoryAggregate();


    virtual void availableServices();

    /**
    * @param[in]  source QString [required]
    * @param[in]  learnable bool [required]
    * @param[in]  token QString [required]
    */
    virtual void learnable(const QString &source, const bool &learnable, const QString &token);


    virtual void regions();


    virtual void softwareVersion();

    /**
    * @param[in]  classifier_name QString [required]
    */
    virtual void taxonomyClasses(const QString &classifier_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void anonymizeCallback(OAIHttpRequestWorker *worker);
    void apiKeyInfoCallback(OAIHttpRequestWorker *worker);
    void apiStatusCallback(OAIHttpRequestWorker *worker);
    void apiUsageCallback(OAIHttpRequestWorker *worker);
    void apiUsageHistoryCallback(OAIHttpRequestWorker *worker);
    void apiUsageHistoryAggregateCallback(OAIHttpRequestWorker *worker);
    void availableServicesCallback(OAIHttpRequestWorker *worker);
    void learnableCallback(OAIHttpRequestWorker *worker);
    void regionsCallback(OAIHttpRequestWorker *worker);
    void softwareVersionCallback(OAIHttpRequestWorker *worker);
    void taxonomyClassesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void anonymizeSignal(OAIAPIKeyOut summary);
    void apiKeyInfoSignal(OAIAPIKeyOut summary);
    void apiStatusSignal(OAIAPIClassifiersStatusOut summary);
    void apiUsageSignal(OAIAPIPeriodUsageOut summary);
    void apiUsageHistorySignal(OAIAPIUsageHistoryOut summary);
    void apiUsageHistoryAggregateSignal(OAIAPIUsageAggregatedOut summary);
    void availableServicesSignal(OAIAPIServicesOut summary);
    void learnableSignal(OAIAPIKeyOut summary);
    void regionsSignal(OAIRegionOut summary);
    void softwareVersionSignal(OAISoftwareVersionOut summary);
    void taxonomyClassesSignal(OAIAPIClassifierTaxonomyOut summary);


    void anonymizeSignalFull(OAIHttpRequestWorker *worker, OAIAPIKeyOut summary);
    void apiKeyInfoSignalFull(OAIHttpRequestWorker *worker, OAIAPIKeyOut summary);
    void apiStatusSignalFull(OAIHttpRequestWorker *worker, OAIAPIClassifiersStatusOut summary);
    void apiUsageSignalFull(OAIHttpRequestWorker *worker, OAIAPIPeriodUsageOut summary);
    void apiUsageHistorySignalFull(OAIHttpRequestWorker *worker, OAIAPIUsageHistoryOut summary);
    void apiUsageHistoryAggregateSignalFull(OAIHttpRequestWorker *worker, OAIAPIUsageAggregatedOut summary);
    void availableServicesSignalFull(OAIHttpRequestWorker *worker, OAIAPIServicesOut summary);
    void learnableSignalFull(OAIHttpRequestWorker *worker, OAIAPIKeyOut summary);
    void regionsSignalFull(OAIHttpRequestWorker *worker, OAIRegionOut summary);
    void softwareVersionSignalFull(OAIHttpRequestWorker *worker, OAISoftwareVersionOut summary);
    void taxonomyClassesSignalFull(OAIHttpRequestWorker *worker, OAIAPIClassifierTaxonomyOut summary);

    Q_DECL_DEPRECATED_X("Use anonymizeSignalError() instead")
    void anonymizeSignalE(OAIAPIKeyOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void anonymizeSignalError(OAIAPIKeyOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyInfoSignalError() instead")
    void apiKeyInfoSignalE(OAIAPIKeyOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyInfoSignalError(OAIAPIKeyOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiStatusSignalError() instead")
    void apiStatusSignalE(OAIAPIClassifiersStatusOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiStatusSignalError(OAIAPIClassifiersStatusOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsageSignalError() instead")
    void apiUsageSignalE(OAIAPIPeriodUsageOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsageSignalError(OAIAPIPeriodUsageOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsageHistorySignalError() instead")
    void apiUsageHistorySignalE(OAIAPIUsageHistoryOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsageHistorySignalError(OAIAPIUsageHistoryOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsageHistoryAggregateSignalError() instead")
    void apiUsageHistoryAggregateSignalE(OAIAPIUsageAggregatedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsageHistoryAggregateSignalError(OAIAPIUsageAggregatedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availableServicesSignalError() instead")
    void availableServicesSignalE(OAIAPIServicesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void availableServicesSignalError(OAIAPIServicesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use learnableSignalError() instead")
    void learnableSignalE(OAIAPIKeyOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void learnableSignalError(OAIAPIKeyOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regionsSignalError() instead")
    void regionsSignalE(OAIRegionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regionsSignalError(OAIRegionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use softwareVersionSignalError() instead")
    void softwareVersionSignalE(OAISoftwareVersionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareVersionSignalError(OAISoftwareVersionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taxonomyClassesSignalError() instead")
    void taxonomyClassesSignalE(OAIAPIClassifierTaxonomyOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taxonomyClassesSignalError(OAIAPIClassifierTaxonomyOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use anonymizeSignalErrorFull() instead")
    void anonymizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anonymizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiKeyInfoSignalErrorFull() instead")
    void apiKeyInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiKeyInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiStatusSignalErrorFull() instead")
    void apiStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsageSignalErrorFull() instead")
    void apiUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsageHistorySignalErrorFull() instead")
    void apiUsageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsageHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsageHistoryAggregateSignalErrorFull() instead")
    void apiUsageHistoryAggregateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsageHistoryAggregateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availableServicesSignalErrorFull() instead")
    void availableServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availableServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use learnableSignalErrorFull() instead")
    void learnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void learnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regionsSignalErrorFull() instead")
    void regionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use softwareVersionSignalErrorFull() instead")
    void softwareVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void softwareVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taxonomyClassesSignalErrorFull() instead")
    void taxonomyClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taxonomyClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
