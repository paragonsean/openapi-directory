/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstLastNameGenderedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstLastNameGenderedOut::OAIFirstLastNameGenderedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstLastNameGenderedOut::OAIFirstLastNameGenderedOut() {
    this->initializeModel();
}

OAIFirstLastNameGenderedOut::~OAIFirstLastNameGenderedOut() {}

void OAIFirstLastNameGenderedOut::initializeModel() {

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_scale_isSet = false;
    m_gender_scale_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_likely_gender_isSet = false;
    m_likely_gender_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIFirstLastNameGenderedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstLastNameGenderedOut::fromJsonObject(QJsonObject json) {

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_gender_scale_isValid = ::OpenAPI::fromJsonValue(m_gender_scale, json[QString("genderScale")]);
    m_gender_scale_isSet = !json[QString("genderScale")].isNull() && m_gender_scale_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_likely_gender_isValid = ::OpenAPI::fromJsonValue(m_likely_gender, json[QString("likelyGender")]);
    m_likely_gender_isSet = !json[QString("likelyGender")].isNull() && m_likely_gender_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIFirstLastNameGenderedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstLastNameGenderedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_scale_isSet) {
        obj.insert(QString("genderScale"), ::OpenAPI::toJsonValue(m_gender_scale));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_likely_gender_isSet) {
        obj.insert(QString("likelyGender"), ::OpenAPI::toJsonValue(m_likely_gender));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIFirstLastNameGenderedOut::getFirstName() const {
    return m_first_name;
}
void OAIFirstLastNameGenderedOut::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFirstLastNameGenderedOut::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFirstLastNameGenderedOut::is_first_name_Valid() const{
    return m_first_name_isValid;
}

double OAIFirstLastNameGenderedOut::getGenderScale() const {
    return m_gender_scale;
}
void OAIFirstLastNameGenderedOut::setGenderScale(const double &gender_scale) {
    m_gender_scale = gender_scale;
    m_gender_scale_isSet = true;
}

bool OAIFirstLastNameGenderedOut::is_gender_scale_Set() const{
    return m_gender_scale_isSet;
}

bool OAIFirstLastNameGenderedOut::is_gender_scale_Valid() const{
    return m_gender_scale_isValid;
}

QString OAIFirstLastNameGenderedOut::getId() const {
    return m_id;
}
void OAIFirstLastNameGenderedOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFirstLastNameGenderedOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFirstLastNameGenderedOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFirstLastNameGenderedOut::getLastName() const {
    return m_last_name;
}
void OAIFirstLastNameGenderedOut::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFirstLastNameGenderedOut::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFirstLastNameGenderedOut::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIFirstLastNameGenderedOut::getLikelyGender() const {
    return m_likely_gender;
}
void OAIFirstLastNameGenderedOut::setLikelyGender(const QString &likely_gender) {
    m_likely_gender = likely_gender;
    m_likely_gender_isSet = true;
}

bool OAIFirstLastNameGenderedOut::is_likely_gender_Set() const{
    return m_likely_gender_isSet;
}

bool OAIFirstLastNameGenderedOut::is_likely_gender_Valid() const{
    return m_likely_gender_isValid;
}

double OAIFirstLastNameGenderedOut::getProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIFirstLastNameGenderedOut::setProbabilityCalibrated(const double &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIFirstLastNameGenderedOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIFirstLastNameGenderedOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

double OAIFirstLastNameGenderedOut::getScore() const {
    return m_score;
}
void OAIFirstLastNameGenderedOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIFirstLastNameGenderedOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIFirstLastNameGenderedOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIFirstLastNameGenderedOut::getScript() const {
    return m_script;
}
void OAIFirstLastNameGenderedOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIFirstLastNameGenderedOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIFirstLastNameGenderedOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIFirstLastNameGenderedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likely_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstLastNameGenderedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
