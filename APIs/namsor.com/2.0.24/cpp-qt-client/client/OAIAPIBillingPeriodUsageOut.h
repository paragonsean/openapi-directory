/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPIBillingPeriodUsageOut.h
 *
 * The current billing period.
 */

#ifndef OAIAPIBillingPeriodUsageOut_H
#define OAIAPIBillingPeriodUsageOut_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAPIBillingPeriodUsageOut : public OAIObject {
public:
    OAIAPIBillingPeriodUsageOut();
    OAIAPIBillingPeriodUsageOut(QString json);
    ~OAIAPIBillingPeriodUsageOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiKey() const;
    void setApiKey(const QString &api_key);
    bool is_api_key_Set() const;
    bool is_api_key_Valid() const;

    QString getBillingStatus() const;
    void setBillingStatus(const QString &billing_status);
    bool is_billing_status_Set() const;
    bool is_billing_status_Valid() const;

    qint64 getHardLimit() const;
    void setHardLimit(const qint64 &hard_limit);
    bool is_hard_limit_Set() const;
    bool is_hard_limit_Valid() const;

    qint64 getPeriodEnded() const;
    void setPeriodEnded(const qint64 &period_ended);
    bool is_period_ended_Set() const;
    bool is_period_ended_Valid() const;

    qint64 getPeriodStarted() const;
    void setPeriodStarted(const qint64 &period_started);
    bool is_period_started_Set() const;
    bool is_period_started_Valid() const;

    qint64 getSoftLimit() const;
    void setSoftLimit(const qint64 &soft_limit);
    bool is_soft_limit_Set() const;
    bool is_soft_limit_Valid() const;

    qint64 getStripeCurrentPeriodEnd() const;
    void setStripeCurrentPeriodEnd(const qint64 &stripe_current_period_end);
    bool is_stripe_current_period_end_Set() const;
    bool is_stripe_current_period_end_Valid() const;

    qint64 getStripeCurrentPeriodStart() const;
    void setStripeCurrentPeriodStart(const qint64 &stripe_current_period_start);
    bool is_stripe_current_period_start_Set() const;
    bool is_stripe_current_period_start_Valid() const;

    qint64 getSubscriptionStarted() const;
    void setSubscriptionStarted(const qint64 &subscription_started);
    bool is_subscription_started_Set() const;
    bool is_subscription_started_Valid() const;

    qint64 getUsage() const;
    void setUsage(const qint64 &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_key;
    bool m_api_key_isSet;
    bool m_api_key_isValid;

    QString m_billing_status;
    bool m_billing_status_isSet;
    bool m_billing_status_isValid;

    qint64 m_hard_limit;
    bool m_hard_limit_isSet;
    bool m_hard_limit_isValid;

    qint64 m_period_ended;
    bool m_period_ended_isSet;
    bool m_period_ended_isValid;

    qint64 m_period_started;
    bool m_period_started_isSet;
    bool m_period_started_isValid;

    qint64 m_soft_limit;
    bool m_soft_limit_isSet;
    bool m_soft_limit_isValid;

    qint64 m_stripe_current_period_end;
    bool m_stripe_current_period_end_isSet;
    bool m_stripe_current_period_end_isValid;

    qint64 m_stripe_current_period_start;
    bool m_stripe_current_period_start_isSet;
    bool m_stripe_current_period_start_isValid;

    qint64 m_subscription_started;
    bool m_subscription_started_isSet;
    bool m_subscription_started_isValid;

    qint64 m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPIBillingPeriodUsageOut)

#endif // OAIAPIBillingPeriodUsageOut_H
