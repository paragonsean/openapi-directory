/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIndianApi_H
#define OAI_OAIIndianApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchFirstLastNameGeoIn.h"
#include "OAIBatchFirstLastNameGeoSubclassificationOut.h"
#include "OAIBatchPersonalNameCastegroupOut.h"
#include "OAIBatchPersonalNameGeoIn.h"
#include "OAIBatchPersonalNameGeoSubclassificationOut.h"
#include "OAIBatchPersonalNameReligionedOut.h"
#include "OAIBatchPersonalNameSubdivisionIn.h"
#include "OAIFirstLastNameGeoSubclassificationOut.h"
#include "OAIPersonalNameCastegroupOut.h"
#include "OAIPersonalNameGeoSubclassificationOut.h"
#include "OAIPersonalNameReligionedOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIndianApi : public QObject {
    Q_OBJECT

public:
    OAIIndianApi(const int timeOut = 0);
    ~OAIIndianApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sub_division_iso31662 QString [required]
    * @param[in]  personal_name_full QString [required]
    */
    virtual void castegroupIndianFull(const QString &sub_division_iso31662, const QString &personal_name_full);

    /**
    * @param[in]  oai_batch_personal_name_subdivision_in OAIBatchPersonalNameSubdivisionIn [optional]
    */
    virtual void castegroupIndianFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameSubdivisionIn> &oai_batch_personal_name_subdivision_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameSubdivisionIn>());

    /**
    * @param[in]  sub_division_iso31662 QString [required]
    * @param[in]  personal_name_full QString [required]
    */
    virtual void religion(const QString &sub_division_iso31662, const QString &personal_name_full);

    /**
    * @param[in]  oai_batch_personal_name_subdivision_in OAIBatchPersonalNameSubdivisionIn [optional]
    */
    virtual void religionIndianFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameSubdivisionIn> &oai_batch_personal_name_subdivision_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameSubdivisionIn>());

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    */
    virtual void subclassificationIndian(const QString &first_name, const QString &last_name);

    /**
    * @param[in]  oai_batch_first_last_name_geo_in OAIBatchFirstLastNameGeoIn [optional]
    */
    virtual void subclassificationIndianBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn>());

    /**
    * @param[in]  full_name QString [required]
    */
    virtual void subclassificationIndianFull(const QString &full_name);

    /**
    * @param[in]  oai_batch_personal_name_geo_in OAIBatchPersonalNameGeoIn [optional]
    */
    virtual void subclassificationIndianFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn> &oai_batch_personal_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void castegroupIndianFullCallback(OAIHttpRequestWorker *worker);
    void castegroupIndianFullBatchCallback(OAIHttpRequestWorker *worker);
    void religionCallback(OAIHttpRequestWorker *worker);
    void religionIndianFullBatchCallback(OAIHttpRequestWorker *worker);
    void subclassificationIndianCallback(OAIHttpRequestWorker *worker);
    void subclassificationIndianBatchCallback(OAIHttpRequestWorker *worker);
    void subclassificationIndianFullCallback(OAIHttpRequestWorker *worker);
    void subclassificationIndianFullBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void castegroupIndianFullSignal(OAIPersonalNameCastegroupOut summary);
    void castegroupIndianFullBatchSignal(OAIBatchPersonalNameCastegroupOut summary);
    void religionSignal(OAIPersonalNameReligionedOut summary);
    void religionIndianFullBatchSignal(OAIBatchPersonalNameReligionedOut summary);
    void subclassificationIndianSignal(OAIFirstLastNameGeoSubclassificationOut summary);
    void subclassificationIndianBatchSignal(OAIBatchFirstLastNameGeoSubclassificationOut summary);
    void subclassificationIndianFullSignal(OAIPersonalNameGeoSubclassificationOut summary);
    void subclassificationIndianFullBatchSignal(OAIBatchPersonalNameGeoSubclassificationOut summary);


    void castegroupIndianFullSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameCastegroupOut summary);
    void castegroupIndianFullBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameCastegroupOut summary);
    void religionSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameReligionedOut summary);
    void religionIndianFullBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameReligionedOut summary);
    void subclassificationIndianSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameGeoSubclassificationOut summary);
    void subclassificationIndianBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameGeoSubclassificationOut summary);
    void subclassificationIndianFullSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameGeoSubclassificationOut summary);
    void subclassificationIndianFullBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameGeoSubclassificationOut summary);

    Q_DECL_DEPRECATED_X("Use castegroupIndianFullSignalError() instead")
    void castegroupIndianFullSignalE(OAIPersonalNameCastegroupOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void castegroupIndianFullSignalError(OAIPersonalNameCastegroupOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use castegroupIndianFullBatchSignalError() instead")
    void castegroupIndianFullBatchSignalE(OAIBatchPersonalNameCastegroupOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void castegroupIndianFullBatchSignalError(OAIBatchPersonalNameCastegroupOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionSignalError() instead")
    void religionSignalE(OAIPersonalNameReligionedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void religionSignalError(OAIPersonalNameReligionedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionIndianFullBatchSignalError() instead")
    void religionIndianFullBatchSignalE(OAIBatchPersonalNameReligionedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void religionIndianFullBatchSignalError(OAIBatchPersonalNameReligionedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationIndianSignalError() instead")
    void subclassificationIndianSignalE(OAIFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationIndianSignalError(OAIFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationIndianBatchSignalError() instead")
    void subclassificationIndianBatchSignalE(OAIBatchFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationIndianBatchSignalError(OAIBatchFirstLastNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationIndianFullSignalError() instead")
    void subclassificationIndianFullSignalE(OAIPersonalNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationIndianFullSignalError(OAIPersonalNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationIndianFullBatchSignalError() instead")
    void subclassificationIndianFullBatchSignalE(OAIBatchPersonalNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationIndianFullBatchSignalError(OAIBatchPersonalNameGeoSubclassificationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use castegroupIndianFullSignalErrorFull() instead")
    void castegroupIndianFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void castegroupIndianFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use castegroupIndianFullBatchSignalErrorFull() instead")
    void castegroupIndianFullBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void castegroupIndianFullBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionSignalErrorFull() instead")
    void religionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void religionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionIndianFullBatchSignalErrorFull() instead")
    void religionIndianFullBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void religionIndianFullBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationIndianSignalErrorFull() instead")
    void subclassificationIndianSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationIndianSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationIndianBatchSignalErrorFull() instead")
    void subclassificationIndianBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationIndianBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationIndianFullSignalErrorFull() instead")
    void subclassificationIndianFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationIndianFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subclassificationIndianFullBatchSignalErrorFull() instead")
    void subclassificationIndianFullBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subclassificationIndianFullBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
