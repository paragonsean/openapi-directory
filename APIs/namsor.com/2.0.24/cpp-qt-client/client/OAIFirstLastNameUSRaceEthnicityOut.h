/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFirstLastNameUSRaceEthnicityOut.h
 *
 * Represents the output of inferring the LIKELY US &#39;race/ethnicity&#39; from a personal name, given US country of residence and (optionally) a ZIP5 code.
 */

#ifndef OAIFirstLastNameUSRaceEthnicityOut_H
#define OAIFirstLastNameUSRaceEthnicityOut_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFirstLastNameUSRaceEthnicityOut : public OAIObject {
public:
    OAIFirstLastNameUSRaceEthnicityOut();
    OAIFirstLastNameUSRaceEthnicityOut(QString json);
    ~OAIFirstLastNameUSRaceEthnicityOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    double getProbabilityAltCalibrated() const;
    void setProbabilityAltCalibrated(const double &probability_alt_calibrated);
    bool is_probability_alt_calibrated_Set() const;
    bool is_probability_alt_calibrated_Valid() const;

    double getProbabilityCalibrated() const;
    void setProbabilityCalibrated(const double &probability_calibrated);
    bool is_probability_calibrated_Set() const;
    bool is_probability_calibrated_Valid() const;

    QList<QString> getRaceEthnicitiesTop() const;
    void setRaceEthnicitiesTop(const QList<QString> &race_ethnicities_top);
    bool is_race_ethnicities_top_Set() const;
    bool is_race_ethnicities_top_Valid() const;

    QString getRaceEthnicity() const;
    void setRaceEthnicity(const QString &race_ethnicity);
    bool is_race_ethnicity_Set() const;
    bool is_race_ethnicity_Valid() const;

    QString getRaceEthnicityAlt() const;
    void setRaceEthnicityAlt(const QString &race_ethnicity_alt);
    bool is_race_ethnicity_alt_Set() const;
    bool is_race_ethnicity_alt_Valid() const;

    double getScore() const;
    void setScore(const double &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    double m_probability_alt_calibrated;
    bool m_probability_alt_calibrated_isSet;
    bool m_probability_alt_calibrated_isValid;

    double m_probability_calibrated;
    bool m_probability_calibrated_isSet;
    bool m_probability_calibrated_isValid;

    QList<QString> m_race_ethnicities_top;
    bool m_race_ethnicities_top_isSet;
    bool m_race_ethnicities_top_isValid;

    QString m_race_ethnicity;
    bool m_race_ethnicity_isSet;
    bool m_race_ethnicity_isValid;

    QString m_race_ethnicity_alt;
    bool m_race_ethnicity_alt_isSet;
    bool m_race_ethnicity_alt_isValid;

    double m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFirstLastNameUSRaceEthnicityOut)

#endif // OAIFirstLastNameUSRaceEthnicityOut_H
