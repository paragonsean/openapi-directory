/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchFirstLastNameGeoZippedIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchFirstLastNameGeoZippedIn::OAIBatchFirstLastNameGeoZippedIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchFirstLastNameGeoZippedIn::OAIBatchFirstLastNameGeoZippedIn() {
    this->initializeModel();
}

OAIBatchFirstLastNameGeoZippedIn::~OAIBatchFirstLastNameGeoZippedIn() {}

void OAIBatchFirstLastNameGeoZippedIn::initializeModel() {

    m_facts_isSet = false;
    m_facts_isValid = false;

    m_personal_names_isSet = false;
    m_personal_names_isValid = false;
}

void OAIBatchFirstLastNameGeoZippedIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchFirstLastNameGeoZippedIn::fromJsonObject(QJsonObject json) {

    m_facts_isValid = ::OpenAPI::fromJsonValue(m_facts, json[QString("facts")]);
    m_facts_isSet = !json[QString("facts")].isNull() && m_facts_isValid;

    m_personal_names_isValid = ::OpenAPI::fromJsonValue(m_personal_names, json[QString("personalNames")]);
    m_personal_names_isSet = !json[QString("personalNames")].isNull() && m_personal_names_isValid;
}

QString OAIBatchFirstLastNameGeoZippedIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchFirstLastNameGeoZippedIn::asJsonObject() const {
    QJsonObject obj;
    if (m_facts.size() > 0) {
        obj.insert(QString("facts"), ::OpenAPI::toJsonValue(m_facts));
    }
    if (m_personal_names.size() > 0) {
        obj.insert(QString("personalNames"), ::OpenAPI::toJsonValue(m_personal_names));
    }
    return obj;
}

QList<OAIFactIn> OAIBatchFirstLastNameGeoZippedIn::getFacts() const {
    return m_facts;
}
void OAIBatchFirstLastNameGeoZippedIn::setFacts(const QList<OAIFactIn> &facts) {
    m_facts = facts;
    m_facts_isSet = true;
}

bool OAIBatchFirstLastNameGeoZippedIn::is_facts_Set() const{
    return m_facts_isSet;
}

bool OAIBatchFirstLastNameGeoZippedIn::is_facts_Valid() const{
    return m_facts_isValid;
}

QList<OAIFirstLastNameGeoZippedIn> OAIBatchFirstLastNameGeoZippedIn::getPersonalNames() const {
    return m_personal_names;
}
void OAIBatchFirstLastNameGeoZippedIn::setPersonalNames(const QList<OAIFirstLastNameGeoZippedIn> &personal_names) {
    m_personal_names = personal_names;
    m_personal_names_isSet = true;
}

bool OAIBatchFirstLastNameGeoZippedIn::is_personal_names_Set() const{
    return m_personal_names_isSet;
}

bool OAIBatchFirstLastNameGeoZippedIn::is_personal_names_Valid() const{
    return m_personal_names_isValid;
}

bool OAIBatchFirstLastNameGeoZippedIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchFirstLastNameGeoZippedIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
