/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstLastNameOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstLastNameOut::OAIFirstLastNameOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstLastNameOut::OAIFirstLastNameOut() {
    this->initializeModel();
}

OAIFirstLastNameOut::~OAIFirstLastNameOut() {}

void OAIFirstLastNameOut::initializeModel() {

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIFirstLastNameOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstLastNameOut::fromJsonObject(QJsonObject json) {

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIFirstLastNameOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstLastNameOut::asJsonObject() const {
    QJsonObject obj;
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIFirstLastNameOut::getFirstName() const {
    return m_first_name;
}
void OAIFirstLastNameOut::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFirstLastNameOut::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFirstLastNameOut::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIFirstLastNameOut::getId() const {
    return m_id;
}
void OAIFirstLastNameOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFirstLastNameOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFirstLastNameOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFirstLastNameOut::getLastName() const {
    return m_last_name;
}
void OAIFirstLastNameOut::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFirstLastNameOut::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFirstLastNameOut::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIFirstLastNameOut::getScript() const {
    return m_script;
}
void OAIFirstLastNameOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIFirstLastNameOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIFirstLastNameOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIFirstLastNameOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstLastNameOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
