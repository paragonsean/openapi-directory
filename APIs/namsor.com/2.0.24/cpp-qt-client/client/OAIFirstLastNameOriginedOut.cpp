/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstLastNameOriginedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstLastNameOriginedOut::OAIFirstLastNameOriginedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstLastNameOriginedOut::OAIFirstLastNameOriginedOut() {
    this->initializeModel();
}

OAIFirstLastNameOriginedOut::~OAIFirstLastNameOriginedOut() {}

void OAIFirstLastNameOriginedOut::initializeModel() {

    m_countries_origin_top_isSet = false;
    m_countries_origin_top_isValid = false;

    m_country_origin_isSet = false;
    m_country_origin_isValid = false;

    m_country_origin_alt_isSet = false;
    m_country_origin_alt_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_probability_alt_calibrated_isSet = false;
    m_probability_alt_calibrated_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_region_origin_isSet = false;
    m_region_origin_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_sub_region_origin_isSet = false;
    m_sub_region_origin_isValid = false;

    m_top_region_origin_isSet = false;
    m_top_region_origin_isValid = false;
}

void OAIFirstLastNameOriginedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstLastNameOriginedOut::fromJsonObject(QJsonObject json) {

    m_countries_origin_top_isValid = ::OpenAPI::fromJsonValue(m_countries_origin_top, json[QString("countriesOriginTop")]);
    m_countries_origin_top_isSet = !json[QString("countriesOriginTop")].isNull() && m_countries_origin_top_isValid;

    m_country_origin_isValid = ::OpenAPI::fromJsonValue(m_country_origin, json[QString("countryOrigin")]);
    m_country_origin_isSet = !json[QString("countryOrigin")].isNull() && m_country_origin_isValid;

    m_country_origin_alt_isValid = ::OpenAPI::fromJsonValue(m_country_origin_alt, json[QString("countryOriginAlt")]);
    m_country_origin_alt_isSet = !json[QString("countryOriginAlt")].isNull() && m_country_origin_alt_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_probability_alt_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_alt_calibrated, json[QString("probabilityAltCalibrated")]);
    m_probability_alt_calibrated_isSet = !json[QString("probabilityAltCalibrated")].isNull() && m_probability_alt_calibrated_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_region_origin_isValid = ::OpenAPI::fromJsonValue(m_region_origin, json[QString("regionOrigin")]);
    m_region_origin_isSet = !json[QString("regionOrigin")].isNull() && m_region_origin_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_sub_region_origin_isValid = ::OpenAPI::fromJsonValue(m_sub_region_origin, json[QString("subRegionOrigin")]);
    m_sub_region_origin_isSet = !json[QString("subRegionOrigin")].isNull() && m_sub_region_origin_isValid;

    m_top_region_origin_isValid = ::OpenAPI::fromJsonValue(m_top_region_origin, json[QString("topRegionOrigin")]);
    m_top_region_origin_isSet = !json[QString("topRegionOrigin")].isNull() && m_top_region_origin_isValid;
}

QString OAIFirstLastNameOriginedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstLastNameOriginedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_countries_origin_top.size() > 0) {
        obj.insert(QString("countriesOriginTop"), ::OpenAPI::toJsonValue(m_countries_origin_top));
    }
    if (m_country_origin_isSet) {
        obj.insert(QString("countryOrigin"), ::OpenAPI::toJsonValue(m_country_origin));
    }
    if (m_country_origin_alt_isSet) {
        obj.insert(QString("countryOriginAlt"), ::OpenAPI::toJsonValue(m_country_origin_alt));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_probability_alt_calibrated_isSet) {
        obj.insert(QString("probabilityAltCalibrated"), ::OpenAPI::toJsonValue(m_probability_alt_calibrated));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_region_origin_isSet) {
        obj.insert(QString("regionOrigin"), ::OpenAPI::toJsonValue(m_region_origin));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_sub_region_origin_isSet) {
        obj.insert(QString("subRegionOrigin"), ::OpenAPI::toJsonValue(m_sub_region_origin));
    }
    if (m_top_region_origin_isSet) {
        obj.insert(QString("topRegionOrigin"), ::OpenAPI::toJsonValue(m_top_region_origin));
    }
    return obj;
}

QList<QString> OAIFirstLastNameOriginedOut::getCountriesOriginTop() const {
    return m_countries_origin_top;
}
void OAIFirstLastNameOriginedOut::setCountriesOriginTop(const QList<QString> &countries_origin_top) {
    m_countries_origin_top = countries_origin_top;
    m_countries_origin_top_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_countries_origin_top_Set() const{
    return m_countries_origin_top_isSet;
}

bool OAIFirstLastNameOriginedOut::is_countries_origin_top_Valid() const{
    return m_countries_origin_top_isValid;
}

QString OAIFirstLastNameOriginedOut::getCountryOrigin() const {
    return m_country_origin;
}
void OAIFirstLastNameOriginedOut::setCountryOrigin(const QString &country_origin) {
    m_country_origin = country_origin;
    m_country_origin_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_country_origin_Set() const{
    return m_country_origin_isSet;
}

bool OAIFirstLastNameOriginedOut::is_country_origin_Valid() const{
    return m_country_origin_isValid;
}

QString OAIFirstLastNameOriginedOut::getCountryOriginAlt() const {
    return m_country_origin_alt;
}
void OAIFirstLastNameOriginedOut::setCountryOriginAlt(const QString &country_origin_alt) {
    m_country_origin_alt = country_origin_alt;
    m_country_origin_alt_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_country_origin_alt_Set() const{
    return m_country_origin_alt_isSet;
}

bool OAIFirstLastNameOriginedOut::is_country_origin_alt_Valid() const{
    return m_country_origin_alt_isValid;
}

QString OAIFirstLastNameOriginedOut::getFirstName() const {
    return m_first_name;
}
void OAIFirstLastNameOriginedOut::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFirstLastNameOriginedOut::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIFirstLastNameOriginedOut::getId() const {
    return m_id;
}
void OAIFirstLastNameOriginedOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFirstLastNameOriginedOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFirstLastNameOriginedOut::getLastName() const {
    return m_last_name;
}
void OAIFirstLastNameOriginedOut::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFirstLastNameOriginedOut::is_last_name_Valid() const{
    return m_last_name_isValid;
}

double OAIFirstLastNameOriginedOut::getProbabilityAltCalibrated() const {
    return m_probability_alt_calibrated;
}
void OAIFirstLastNameOriginedOut::setProbabilityAltCalibrated(const double &probability_alt_calibrated) {
    m_probability_alt_calibrated = probability_alt_calibrated;
    m_probability_alt_calibrated_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_probability_alt_calibrated_Set() const{
    return m_probability_alt_calibrated_isSet;
}

bool OAIFirstLastNameOriginedOut::is_probability_alt_calibrated_Valid() const{
    return m_probability_alt_calibrated_isValid;
}

double OAIFirstLastNameOriginedOut::getProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIFirstLastNameOriginedOut::setProbabilityCalibrated(const double &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIFirstLastNameOriginedOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

QString OAIFirstLastNameOriginedOut::getRegionOrigin() const {
    return m_region_origin;
}
void OAIFirstLastNameOriginedOut::setRegionOrigin(const QString &region_origin) {
    m_region_origin = region_origin;
    m_region_origin_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_region_origin_Set() const{
    return m_region_origin_isSet;
}

bool OAIFirstLastNameOriginedOut::is_region_origin_Valid() const{
    return m_region_origin_isValid;
}

double OAIFirstLastNameOriginedOut::getScore() const {
    return m_score;
}
void OAIFirstLastNameOriginedOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIFirstLastNameOriginedOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIFirstLastNameOriginedOut::getScript() const {
    return m_script;
}
void OAIFirstLastNameOriginedOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIFirstLastNameOriginedOut::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIFirstLastNameOriginedOut::getSubRegionOrigin() const {
    return m_sub_region_origin;
}
void OAIFirstLastNameOriginedOut::setSubRegionOrigin(const QString &sub_region_origin) {
    m_sub_region_origin = sub_region_origin;
    m_sub_region_origin_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_sub_region_origin_Set() const{
    return m_sub_region_origin_isSet;
}

bool OAIFirstLastNameOriginedOut::is_sub_region_origin_Valid() const{
    return m_sub_region_origin_isValid;
}

QString OAIFirstLastNameOriginedOut::getTopRegionOrigin() const {
    return m_top_region_origin;
}
void OAIFirstLastNameOriginedOut::setTopRegionOrigin(const QString &top_region_origin) {
    m_top_region_origin = top_region_origin;
    m_top_region_origin_isSet = true;
}

bool OAIFirstLastNameOriginedOut::is_top_region_origin_Set() const{
    return m_top_region_origin_isSet;
}

bool OAIFirstLastNameOriginedOut::is_top_region_origin_Valid() const{
    return m_top_region_origin_isValid;
}

bool OAIFirstLastNameOriginedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_countries_origin_top.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_origin_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_alt_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_region_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_region_origin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstLastNameOriginedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
