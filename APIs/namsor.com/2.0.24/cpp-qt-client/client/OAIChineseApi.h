/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChineseApi_H
#define OAI_OAIChineseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchFirstLastNameGenderIn.h"
#include "OAIBatchFirstLastNameGenderedOut.h"
#include "OAIBatchFirstLastNameIn.h"
#include "OAIBatchMatchPersonalFirstLastNameIn.h"
#include "OAIBatchNameMatchCandidatesOut.h"
#include "OAIBatchNameMatchedOut.h"
#include "OAIBatchPersonalNameGenderedOut.h"
#include "OAIBatchPersonalNameIn.h"
#include "OAIBatchPersonalNameParsedOut.h"
#include "OAIFirstLastNameGenderedOut.h"
#include "OAINameMatchCandidatesOut.h"
#include "OAINameMatchedOut.h"
#include "OAIPersonalNameGenderedOut.h"
#include "OAIPersonalNameParsedOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChineseApi : public QObject {
    Q_OBJECT

public:
    OAIChineseApi(const int timeOut = 0);
    ~OAIChineseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  chinese_surname_latin QString [required]
    * @param[in]  chinese_given_name_latin QString [required]
    */
    virtual void chineseNameCandidates(const QString &chinese_surname_latin, const QString &chinese_given_name_latin);

    /**
    * @param[in]  oai_batch_first_last_name_in OAIBatchFirstLastNameIn [optional]
    */
    virtual void chineseNameCandidatesBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn>());

    /**
    * @param[in]  oai_batch_first_last_name_gender_in OAIBatchFirstLastNameGenderIn [optional]
    */
    virtual void chineseNameCandidatesGenderBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGenderIn> &oai_batch_first_last_name_gender_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGenderIn>());

    /**
    * @param[in]  chinese_surname_latin QString [required]
    * @param[in]  chinese_given_name_latin QString [required]
    * @param[in]  known_gender QString [required]
    */
    virtual void chineseNameGenderCandidates(const QString &chinese_surname_latin, const QString &chinese_given_name_latin, const QString &known_gender);

    /**
    * @param[in]  chinese_surname_latin QString [required]
    * @param[in]  chinese_given_name_latin QString [required]
    * @param[in]  chinese_name QString [required]
    */
    virtual void chineseNameMatch(const QString &chinese_surname_latin, const QString &chinese_given_name_latin, const QString &chinese_name);

    /**
    * @param[in]  oai_batch_match_personal_first_last_name_in OAIBatchMatchPersonalFirstLastNameIn [optional]
    */
    virtual void chineseNameMatchBatch(const ::OpenAPI::OptionalParam<OAIBatchMatchPersonalFirstLastNameIn> &oai_batch_match_personal_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchMatchPersonalFirstLastNameIn>());

    /**
    * @param[in]  chinese_name QString [required]
    */
    virtual void genderChineseName(const QString &chinese_name);

    /**
    * @param[in]  oai_batch_personal_name_in OAIBatchPersonalNameIn [optional]
    */
    virtual void genderChineseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn>());

    /**
    * @param[in]  chinese_surname_latin QString [required]
    * @param[in]  chinese_given_name_latin QString [required]
    */
    virtual void genderChineseNamePinyin(const QString &chinese_surname_latin, const QString &chinese_given_name_latin);

    /**
    * @param[in]  oai_batch_first_last_name_in OAIBatchFirstLastNameIn [optional]
    */
    virtual void genderChineseNamePinyinBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn>());

    /**
    * @param[in]  chinese_name QString [required]
    */
    virtual void parseChineseName(const QString &chinese_name);

    /**
    * @param[in]  oai_batch_personal_name_in OAIBatchPersonalNameIn [optional]
    */
    virtual void parseChineseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn>());

    /**
    * @param[in]  chinese_name QString [required]
    */
    virtual void pinyinChineseName(const QString &chinese_name);

    /**
    * @param[in]  oai_batch_personal_name_in OAIBatchPersonalNameIn [optional]
    */
    virtual void pinyinChineseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in = ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chineseNameCandidatesCallback(OAIHttpRequestWorker *worker);
    void chineseNameCandidatesBatchCallback(OAIHttpRequestWorker *worker);
    void chineseNameCandidatesGenderBatchCallback(OAIHttpRequestWorker *worker);
    void chineseNameGenderCandidatesCallback(OAIHttpRequestWorker *worker);
    void chineseNameMatchCallback(OAIHttpRequestWorker *worker);
    void chineseNameMatchBatchCallback(OAIHttpRequestWorker *worker);
    void genderChineseNameCallback(OAIHttpRequestWorker *worker);
    void genderChineseNameBatchCallback(OAIHttpRequestWorker *worker);
    void genderChineseNamePinyinCallback(OAIHttpRequestWorker *worker);
    void genderChineseNamePinyinBatchCallback(OAIHttpRequestWorker *worker);
    void parseChineseNameCallback(OAIHttpRequestWorker *worker);
    void parseChineseNameBatchCallback(OAIHttpRequestWorker *worker);
    void pinyinChineseNameCallback(OAIHttpRequestWorker *worker);
    void pinyinChineseNameBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chineseNameCandidatesSignal(OAINameMatchCandidatesOut summary);
    void chineseNameCandidatesBatchSignal(OAIBatchNameMatchCandidatesOut summary);
    void chineseNameCandidatesGenderBatchSignal(OAIBatchNameMatchCandidatesOut summary);
    void chineseNameGenderCandidatesSignal(OAINameMatchCandidatesOut summary);
    void chineseNameMatchSignal(OAINameMatchedOut summary);
    void chineseNameMatchBatchSignal(OAIBatchNameMatchedOut summary);
    void genderChineseNameSignal(OAIPersonalNameGenderedOut summary);
    void genderChineseNameBatchSignal(OAIBatchPersonalNameGenderedOut summary);
    void genderChineseNamePinyinSignal(OAIFirstLastNameGenderedOut summary);
    void genderChineseNamePinyinBatchSignal(OAIBatchFirstLastNameGenderedOut summary);
    void parseChineseNameSignal(OAIPersonalNameParsedOut summary);
    void parseChineseNameBatchSignal(OAIBatchPersonalNameParsedOut summary);
    void pinyinChineseNameSignal(OAIPersonalNameParsedOut summary);
    void pinyinChineseNameBatchSignal(OAIBatchPersonalNameParsedOut summary);


    void chineseNameCandidatesSignalFull(OAIHttpRequestWorker *worker, OAINameMatchCandidatesOut summary);
    void chineseNameCandidatesBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchNameMatchCandidatesOut summary);
    void chineseNameCandidatesGenderBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchNameMatchCandidatesOut summary);
    void chineseNameGenderCandidatesSignalFull(OAIHttpRequestWorker *worker, OAINameMatchCandidatesOut summary);
    void chineseNameMatchSignalFull(OAIHttpRequestWorker *worker, OAINameMatchedOut summary);
    void chineseNameMatchBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchNameMatchedOut summary);
    void genderChineseNameSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameGenderedOut summary);
    void genderChineseNameBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameGenderedOut summary);
    void genderChineseNamePinyinSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNameGenderedOut summary);
    void genderChineseNamePinyinBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNameGenderedOut summary);
    void parseChineseNameSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameParsedOut summary);
    void parseChineseNameBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameParsedOut summary);
    void pinyinChineseNameSignalFull(OAIHttpRequestWorker *worker, OAIPersonalNameParsedOut summary);
    void pinyinChineseNameBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchPersonalNameParsedOut summary);

    Q_DECL_DEPRECATED_X("Use chineseNameCandidatesSignalError() instead")
    void chineseNameCandidatesSignalE(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameCandidatesSignalError(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameCandidatesBatchSignalError() instead")
    void chineseNameCandidatesBatchSignalE(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameCandidatesBatchSignalError(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameCandidatesGenderBatchSignalError() instead")
    void chineseNameCandidatesGenderBatchSignalE(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameCandidatesGenderBatchSignalError(OAIBatchNameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameGenderCandidatesSignalError() instead")
    void chineseNameGenderCandidatesSignalE(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameGenderCandidatesSignalError(OAINameMatchCandidatesOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameMatchSignalError() instead")
    void chineseNameMatchSignalE(OAINameMatchedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameMatchSignalError(OAINameMatchedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameMatchBatchSignalError() instead")
    void chineseNameMatchBatchSignalE(OAIBatchNameMatchedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameMatchBatchSignalError(OAIBatchNameMatchedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderChineseNameSignalError() instead")
    void genderChineseNameSignalE(OAIPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderChineseNameSignalError(OAIPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderChineseNameBatchSignalError() instead")
    void genderChineseNameBatchSignalE(OAIBatchPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderChineseNameBatchSignalError(OAIBatchPersonalNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderChineseNamePinyinSignalError() instead")
    void genderChineseNamePinyinSignalE(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderChineseNamePinyinSignalError(OAIFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderChineseNamePinyinBatchSignalError() instead")
    void genderChineseNamePinyinBatchSignalE(OAIBatchFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderChineseNamePinyinBatchSignalError(OAIBatchFirstLastNameGenderedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseChineseNameSignalError() instead")
    void parseChineseNameSignalE(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseChineseNameSignalError(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseChineseNameBatchSignalError() instead")
    void parseChineseNameBatchSignalE(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseChineseNameBatchSignalError(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinyinChineseNameSignalError() instead")
    void pinyinChineseNameSignalE(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pinyinChineseNameSignalError(OAIPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinyinChineseNameBatchSignalError() instead")
    void pinyinChineseNameBatchSignalE(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pinyinChineseNameBatchSignalError(OAIBatchPersonalNameParsedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chineseNameCandidatesSignalErrorFull() instead")
    void chineseNameCandidatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameCandidatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameCandidatesBatchSignalErrorFull() instead")
    void chineseNameCandidatesBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameCandidatesBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameCandidatesGenderBatchSignalErrorFull() instead")
    void chineseNameCandidatesGenderBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameCandidatesGenderBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameGenderCandidatesSignalErrorFull() instead")
    void chineseNameGenderCandidatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameGenderCandidatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameMatchSignalErrorFull() instead")
    void chineseNameMatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameMatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chineseNameMatchBatchSignalErrorFull() instead")
    void chineseNameMatchBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chineseNameMatchBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderChineseNameSignalErrorFull() instead")
    void genderChineseNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderChineseNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderChineseNameBatchSignalErrorFull() instead")
    void genderChineseNameBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderChineseNameBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderChineseNamePinyinSignalErrorFull() instead")
    void genderChineseNamePinyinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderChineseNamePinyinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderChineseNamePinyinBatchSignalErrorFull() instead")
    void genderChineseNamePinyinBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderChineseNamePinyinBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseChineseNameSignalErrorFull() instead")
    void parseChineseNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseChineseNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseChineseNameBatchSignalErrorFull() instead")
    void parseChineseNameBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseChineseNameBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinyinChineseNameSignalErrorFull() instead")
    void pinyinChineseNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pinyinChineseNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinyinChineseNameBatchSignalErrorFull() instead")
    void pinyinChineseNameBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pinyinChineseNameBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
