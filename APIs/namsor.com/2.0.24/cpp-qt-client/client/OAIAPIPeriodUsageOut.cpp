/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIPeriodUsageOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIPeriodUsageOut::OAIAPIPeriodUsageOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIPeriodUsageOut::OAIAPIPeriodUsageOut() {
    this->initializeModel();
}

OAIAPIPeriodUsageOut::~OAIAPIPeriodUsageOut() {}

void OAIAPIPeriodUsageOut::initializeModel() {

    m_billing_period_isSet = false;
    m_billing_period_isValid = false;

    m_overage_currency_isSet = false;
    m_overage_currency_isValid = false;

    m_overage_excl_tax_isSet = false;
    m_overage_excl_tax_isValid = false;

    m_overage_incl_tax_isSet = false;
    m_overage_incl_tax_isValid = false;

    m_overage_quantity_isSet = false;
    m_overage_quantity_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;
}

void OAIAPIPeriodUsageOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIPeriodUsageOut::fromJsonObject(QJsonObject json) {

    m_billing_period_isValid = ::OpenAPI::fromJsonValue(m_billing_period, json[QString("billingPeriod")]);
    m_billing_period_isSet = !json[QString("billingPeriod")].isNull() && m_billing_period_isValid;

    m_overage_currency_isValid = ::OpenAPI::fromJsonValue(m_overage_currency, json[QString("overageCurrency")]);
    m_overage_currency_isSet = !json[QString("overageCurrency")].isNull() && m_overage_currency_isValid;

    m_overage_excl_tax_isValid = ::OpenAPI::fromJsonValue(m_overage_excl_tax, json[QString("overageExclTax")]);
    m_overage_excl_tax_isSet = !json[QString("overageExclTax")].isNull() && m_overage_excl_tax_isValid;

    m_overage_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_overage_incl_tax, json[QString("overageInclTax")]);
    m_overage_incl_tax_isSet = !json[QString("overageInclTax")].isNull() && m_overage_incl_tax_isValid;

    m_overage_quantity_isValid = ::OpenAPI::fromJsonValue(m_overage_quantity, json[QString("overageQuantity")]);
    m_overage_quantity_isSet = !json[QString("overageQuantity")].isNull() && m_overage_quantity_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;
}

QString OAIAPIPeriodUsageOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIPeriodUsageOut::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_period.isSet()) {
        obj.insert(QString("billingPeriod"), ::OpenAPI::toJsonValue(m_billing_period));
    }
    if (m_overage_currency_isSet) {
        obj.insert(QString("overageCurrency"), ::OpenAPI::toJsonValue(m_overage_currency));
    }
    if (m_overage_excl_tax_isSet) {
        obj.insert(QString("overageExclTax"), ::OpenAPI::toJsonValue(m_overage_excl_tax));
    }
    if (m_overage_incl_tax_isSet) {
        obj.insert(QString("overageInclTax"), ::OpenAPI::toJsonValue(m_overage_incl_tax));
    }
    if (m_overage_quantity_isSet) {
        obj.insert(QString("overageQuantity"), ::OpenAPI::toJsonValue(m_overage_quantity));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    return obj;
}

OAIAPIBillingPeriodUsageOut OAIAPIPeriodUsageOut::getBillingPeriod() const {
    return m_billing_period;
}
void OAIAPIPeriodUsageOut::setBillingPeriod(const OAIAPIBillingPeriodUsageOut &billing_period) {
    m_billing_period = billing_period;
    m_billing_period_isSet = true;
}

bool OAIAPIPeriodUsageOut::is_billing_period_Set() const{
    return m_billing_period_isSet;
}

bool OAIAPIPeriodUsageOut::is_billing_period_Valid() const{
    return m_billing_period_isValid;
}

QString OAIAPIPeriodUsageOut::getOverageCurrency() const {
    return m_overage_currency;
}
void OAIAPIPeriodUsageOut::setOverageCurrency(const QString &overage_currency) {
    m_overage_currency = overage_currency;
    m_overage_currency_isSet = true;
}

bool OAIAPIPeriodUsageOut::is_overage_currency_Set() const{
    return m_overage_currency_isSet;
}

bool OAIAPIPeriodUsageOut::is_overage_currency_Valid() const{
    return m_overage_currency_isValid;
}

double OAIAPIPeriodUsageOut::getOverageExclTax() const {
    return m_overage_excl_tax;
}
void OAIAPIPeriodUsageOut::setOverageExclTax(const double &overage_excl_tax) {
    m_overage_excl_tax = overage_excl_tax;
    m_overage_excl_tax_isSet = true;
}

bool OAIAPIPeriodUsageOut::is_overage_excl_tax_Set() const{
    return m_overage_excl_tax_isSet;
}

bool OAIAPIPeriodUsageOut::is_overage_excl_tax_Valid() const{
    return m_overage_excl_tax_isValid;
}

double OAIAPIPeriodUsageOut::getOverageInclTax() const {
    return m_overage_incl_tax;
}
void OAIAPIPeriodUsageOut::setOverageInclTax(const double &overage_incl_tax) {
    m_overage_incl_tax = overage_incl_tax;
    m_overage_incl_tax_isSet = true;
}

bool OAIAPIPeriodUsageOut::is_overage_incl_tax_Set() const{
    return m_overage_incl_tax_isSet;
}

bool OAIAPIPeriodUsageOut::is_overage_incl_tax_Valid() const{
    return m_overage_incl_tax_isValid;
}

qint64 OAIAPIPeriodUsageOut::getOverageQuantity() const {
    return m_overage_quantity;
}
void OAIAPIPeriodUsageOut::setOverageQuantity(const qint64 &overage_quantity) {
    m_overage_quantity = overage_quantity;
    m_overage_quantity_isSet = true;
}

bool OAIAPIPeriodUsageOut::is_overage_quantity_Set() const{
    return m_overage_quantity_isSet;
}

bool OAIAPIPeriodUsageOut::is_overage_quantity_Valid() const{
    return m_overage_quantity_isValid;
}

OAIAPIPlanSubscriptionOut OAIAPIPeriodUsageOut::getSubscription() const {
    return m_subscription;
}
void OAIAPIPeriodUsageOut::setSubscription(const OAIAPIPlanSubscriptionOut &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIAPIPeriodUsageOut::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIAPIPeriodUsageOut::is_subscription_Valid() const{
    return m_subscription_isValid;
}

bool OAIAPIPeriodUsageOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overage_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overage_excl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overage_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overage_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIPeriodUsageOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
