/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstLastNameUSRaceEthnicityOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstLastNameUSRaceEthnicityOut::OAIFirstLastNameUSRaceEthnicityOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstLastNameUSRaceEthnicityOut::OAIFirstLastNameUSRaceEthnicityOut() {
    this->initializeModel();
}

OAIFirstLastNameUSRaceEthnicityOut::~OAIFirstLastNameUSRaceEthnicityOut() {}

void OAIFirstLastNameUSRaceEthnicityOut::initializeModel() {

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_probability_alt_calibrated_isSet = false;
    m_probability_alt_calibrated_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_race_ethnicities_top_isSet = false;
    m_race_ethnicities_top_isValid = false;

    m_race_ethnicity_isSet = false;
    m_race_ethnicity_isValid = false;

    m_race_ethnicity_alt_isSet = false;
    m_race_ethnicity_alt_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIFirstLastNameUSRaceEthnicityOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstLastNameUSRaceEthnicityOut::fromJsonObject(QJsonObject json) {

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_probability_alt_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_alt_calibrated, json[QString("probabilityAltCalibrated")]);
    m_probability_alt_calibrated_isSet = !json[QString("probabilityAltCalibrated")].isNull() && m_probability_alt_calibrated_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_race_ethnicities_top_isValid = ::OpenAPI::fromJsonValue(m_race_ethnicities_top, json[QString("raceEthnicitiesTop")]);
    m_race_ethnicities_top_isSet = !json[QString("raceEthnicitiesTop")].isNull() && m_race_ethnicities_top_isValid;

    m_race_ethnicity_isValid = ::OpenAPI::fromJsonValue(m_race_ethnicity, json[QString("raceEthnicity")]);
    m_race_ethnicity_isSet = !json[QString("raceEthnicity")].isNull() && m_race_ethnicity_isValid;

    m_race_ethnicity_alt_isValid = ::OpenAPI::fromJsonValue(m_race_ethnicity_alt, json[QString("raceEthnicityAlt")]);
    m_race_ethnicity_alt_isSet = !json[QString("raceEthnicityAlt")].isNull() && m_race_ethnicity_alt_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIFirstLastNameUSRaceEthnicityOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstLastNameUSRaceEthnicityOut::asJsonObject() const {
    QJsonObject obj;
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_probability_alt_calibrated_isSet) {
        obj.insert(QString("probabilityAltCalibrated"), ::OpenAPI::toJsonValue(m_probability_alt_calibrated));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_race_ethnicities_top.size() > 0) {
        obj.insert(QString("raceEthnicitiesTop"), ::OpenAPI::toJsonValue(m_race_ethnicities_top));
    }
    if (m_race_ethnicity_isSet) {
        obj.insert(QString("raceEthnicity"), ::OpenAPI::toJsonValue(m_race_ethnicity));
    }
    if (m_race_ethnicity_alt_isSet) {
        obj.insert(QString("raceEthnicityAlt"), ::OpenAPI::toJsonValue(m_race_ethnicity_alt));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIFirstLastNameUSRaceEthnicityOut::getFirstName() const {
    return m_first_name;
}
void OAIFirstLastNameUSRaceEthnicityOut::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIFirstLastNameUSRaceEthnicityOut::getId() const {
    return m_id;
}
void OAIFirstLastNameUSRaceEthnicityOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFirstLastNameUSRaceEthnicityOut::getLastName() const {
    return m_last_name;
}
void OAIFirstLastNameUSRaceEthnicityOut::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_last_name_Valid() const{
    return m_last_name_isValid;
}

double OAIFirstLastNameUSRaceEthnicityOut::getProbabilityAltCalibrated() const {
    return m_probability_alt_calibrated;
}
void OAIFirstLastNameUSRaceEthnicityOut::setProbabilityAltCalibrated(const double &probability_alt_calibrated) {
    m_probability_alt_calibrated = probability_alt_calibrated;
    m_probability_alt_calibrated_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_probability_alt_calibrated_Set() const{
    return m_probability_alt_calibrated_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_probability_alt_calibrated_Valid() const{
    return m_probability_alt_calibrated_isValid;
}

double OAIFirstLastNameUSRaceEthnicityOut::getProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIFirstLastNameUSRaceEthnicityOut::setProbabilityCalibrated(const double &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

QList<QString> OAIFirstLastNameUSRaceEthnicityOut::getRaceEthnicitiesTop() const {
    return m_race_ethnicities_top;
}
void OAIFirstLastNameUSRaceEthnicityOut::setRaceEthnicitiesTop(const QList<QString> &race_ethnicities_top) {
    m_race_ethnicities_top = race_ethnicities_top;
    m_race_ethnicities_top_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_race_ethnicities_top_Set() const{
    return m_race_ethnicities_top_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_race_ethnicities_top_Valid() const{
    return m_race_ethnicities_top_isValid;
}

QString OAIFirstLastNameUSRaceEthnicityOut::getRaceEthnicity() const {
    return m_race_ethnicity;
}
void OAIFirstLastNameUSRaceEthnicityOut::setRaceEthnicity(const QString &race_ethnicity) {
    m_race_ethnicity = race_ethnicity;
    m_race_ethnicity_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_race_ethnicity_Set() const{
    return m_race_ethnicity_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_race_ethnicity_Valid() const{
    return m_race_ethnicity_isValid;
}

QString OAIFirstLastNameUSRaceEthnicityOut::getRaceEthnicityAlt() const {
    return m_race_ethnicity_alt;
}
void OAIFirstLastNameUSRaceEthnicityOut::setRaceEthnicityAlt(const QString &race_ethnicity_alt) {
    m_race_ethnicity_alt = race_ethnicity_alt;
    m_race_ethnicity_alt_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_race_ethnicity_alt_Set() const{
    return m_race_ethnicity_alt_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_race_ethnicity_alt_Valid() const{
    return m_race_ethnicity_alt_isValid;
}

double OAIFirstLastNameUSRaceEthnicityOut::getScore() const {
    return m_score;
}
void OAIFirstLastNameUSRaceEthnicityOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIFirstLastNameUSRaceEthnicityOut::getScript() const {
    return m_script;
}
void OAIFirstLastNameUSRaceEthnicityOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIFirstLastNameUSRaceEthnicityOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIFirstLastNameUSRaceEthnicityOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_alt_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_ethnicities_top.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_ethnicity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_ethnicity_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstLastNameUSRaceEthnicityOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
