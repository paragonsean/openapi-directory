/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchFirstLastNamePhoneCodedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchFirstLastNamePhoneCodedOut::OAIBatchFirstLastNamePhoneCodedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchFirstLastNamePhoneCodedOut::OAIBatchFirstLastNamePhoneCodedOut() {
    this->initializeModel();
}

OAIBatchFirstLastNamePhoneCodedOut::~OAIBatchFirstLastNamePhoneCodedOut() {}

void OAIBatchFirstLastNamePhoneCodedOut::initializeModel() {

    m_personal_names_with_phone_numbers_isSet = false;
    m_personal_names_with_phone_numbers_isValid = false;
}

void OAIBatchFirstLastNamePhoneCodedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchFirstLastNamePhoneCodedOut::fromJsonObject(QJsonObject json) {

    m_personal_names_with_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_personal_names_with_phone_numbers, json[QString("personalNamesWithPhoneNumbers")]);
    m_personal_names_with_phone_numbers_isSet = !json[QString("personalNamesWithPhoneNumbers")].isNull() && m_personal_names_with_phone_numbers_isValid;
}

QString OAIBatchFirstLastNamePhoneCodedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchFirstLastNamePhoneCodedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_personal_names_with_phone_numbers.size() > 0) {
        obj.insert(QString("personalNamesWithPhoneNumbers"), ::OpenAPI::toJsonValue(m_personal_names_with_phone_numbers));
    }
    return obj;
}

QList<OAIFirstLastNamePhoneCodedOut> OAIBatchFirstLastNamePhoneCodedOut::getPersonalNamesWithPhoneNumbers() const {
    return m_personal_names_with_phone_numbers;
}
void OAIBatchFirstLastNamePhoneCodedOut::setPersonalNamesWithPhoneNumbers(const QList<OAIFirstLastNamePhoneCodedOut> &personal_names_with_phone_numbers) {
    m_personal_names_with_phone_numbers = personal_names_with_phone_numbers;
    m_personal_names_with_phone_numbers_isSet = true;
}

bool OAIBatchFirstLastNamePhoneCodedOut::is_personal_names_with_phone_numbers_Set() const{
    return m_personal_names_with_phone_numbers_isSet;
}

bool OAIBatchFirstLastNamePhoneCodedOut::is_personal_names_with_phone_numbers_Valid() const{
    return m_personal_names_with_phone_numbers_isValid;
}

bool OAIBatchFirstLastNamePhoneCodedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_personal_names_with_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchFirstLastNamePhoneCodedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
