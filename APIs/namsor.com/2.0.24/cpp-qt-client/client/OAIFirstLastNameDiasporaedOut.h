/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFirstLastNameDiasporaedOut.h
 *
 * Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.
 */

#ifndef OAIFirstLastNameDiasporaedOut_H
#define OAIFirstLastNameDiasporaedOut_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFirstLastNameDiasporaedOut : public OAIObject {
public:
    OAIFirstLastNameDiasporaedOut();
    OAIFirstLastNameDiasporaedOut(QString json);
    ~OAIFirstLastNameDiasporaedOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountryIso2() const;
    void setCountryIso2(const QString &country_iso2);
    bool is_country_iso2_Set() const;
    bool is_country_iso2_Valid() const;

    QList<QString> getEthnicitiesTop() const;
    void setEthnicitiesTop(const QList<QString> &ethnicities_top);
    bool is_ethnicities_top_Set() const;
    bool is_ethnicities_top_Valid() const;

    QString getEthnicity() const;
    void setEthnicity(const QString &ethnicity);
    bool is_ethnicity_Set() const;
    bool is_ethnicity_Valid() const;

    QString getEthnicityAlt() const;
    void setEthnicityAlt(const QString &ethnicity_alt);
    bool is_ethnicity_alt_Set() const;
    bool is_ethnicity_alt_Valid() const;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    bool isLifted() const;
    void setLifted(const bool &lifted);
    bool is_lifted_Set() const;
    bool is_lifted_Valid() const;

    double getProbabilityAltCalibrated() const;
    void setProbabilityAltCalibrated(const double &probability_alt_calibrated);
    bool is_probability_alt_calibrated_Set() const;
    bool is_probability_alt_calibrated_Valid() const;

    double getProbabilityCalibrated() const;
    void setProbabilityCalibrated(const double &probability_calibrated);
    bool is_probability_calibrated_Set() const;
    bool is_probability_calibrated_Valid() const;

    double getScore() const;
    void setScore(const double &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country_iso2;
    bool m_country_iso2_isSet;
    bool m_country_iso2_isValid;

    QList<QString> m_ethnicities_top;
    bool m_ethnicities_top_isSet;
    bool m_ethnicities_top_isValid;

    QString m_ethnicity;
    bool m_ethnicity_isSet;
    bool m_ethnicity_isValid;

    QString m_ethnicity_alt;
    bool m_ethnicity_alt_isSet;
    bool m_ethnicity_alt_isValid;

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    bool m_lifted;
    bool m_lifted_isSet;
    bool m_lifted_isValid;

    double m_probability_alt_calibrated;
    bool m_probability_alt_calibrated_isSet;
    bool m_probability_alt_calibrated_isValid;

    double m_probability_calibrated;
    bool m_probability_calibrated_isSet;
    bool m_probability_calibrated_isValid;

    double m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFirstLastNameDiasporaedOut)

#endif // OAIFirstLastNameDiasporaedOut_H
