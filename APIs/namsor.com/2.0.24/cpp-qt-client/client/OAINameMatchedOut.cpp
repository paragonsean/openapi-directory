/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINameMatchedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINameMatchedOut::OAINameMatchedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINameMatchedOut::OAINameMatchedOut() {
    this->initializeModel();
}

OAINameMatchedOut::~OAINameMatchedOut() {}

void OAINameMatchedOut::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_match_status_isSet = false;
    m_match_status_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAINameMatchedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINameMatchedOut::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_match_status_isValid = ::OpenAPI::fromJsonValue(m_match_status, json[QString("matchStatus")]);
    m_match_status_isSet = !json[QString("matchStatus")].isNull() && m_match_status_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAINameMatchedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINameMatchedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_match_status_isSet) {
        obj.insert(QString("matchStatus"), ::OpenAPI::toJsonValue(m_match_status));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAINameMatchedOut::getId() const {
    return m_id;
}
void OAINameMatchedOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINameMatchedOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAINameMatchedOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINameMatchedOut::getMatchStatus() const {
    return m_match_status;
}
void OAINameMatchedOut::setMatchStatus(const QString &match_status) {
    m_match_status = match_status;
    m_match_status_isSet = true;
}

bool OAINameMatchedOut::is_match_status_Set() const{
    return m_match_status_isSet;
}

bool OAINameMatchedOut::is_match_status_Valid() const{
    return m_match_status_isValid;
}

double OAINameMatchedOut::getScore() const {
    return m_score;
}
void OAINameMatchedOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAINameMatchedOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAINameMatchedOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAINameMatchedOut::getScript() const {
    return m_script;
}
void OAINameMatchedOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAINameMatchedOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAINameMatchedOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAINameMatchedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINameMatchedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
