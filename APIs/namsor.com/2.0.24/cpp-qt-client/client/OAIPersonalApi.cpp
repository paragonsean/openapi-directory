/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPersonalApi::OAIPersonalApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPersonalApi::~OAIPersonalApi() {
}

void OAIPersonalApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://v2.namsor.com/NamSorAPIv2"),
    "namsor_v2",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("corridor", defaultConf);
    _serverIndices.insert("corridor", 0);
    _serverConfigs.insert("corridorBatch", defaultConf);
    _serverIndices.insert("corridorBatch", 0);
    _serverConfigs.insert("country", defaultConf);
    _serverIndices.insert("country", 0);
    _serverConfigs.insert("countryBatch", defaultConf);
    _serverIndices.insert("countryBatch", 0);
    _serverConfigs.insert("diaspora", defaultConf);
    _serverIndices.insert("diaspora", 0);
    _serverConfigs.insert("diasporaBatch", defaultConf);
    _serverIndices.insert("diasporaBatch", 0);
    _serverConfigs.insert("gender", defaultConf);
    _serverIndices.insert("gender", 0);
    _serverConfigs.insert("gender1", defaultConf);
    _serverIndices.insert("gender1", 0);
    _serverConfigs.insert("genderBatch", defaultConf);
    _serverIndices.insert("genderBatch", 0);
    _serverConfigs.insert("genderFull", defaultConf);
    _serverIndices.insert("genderFull", 0);
    _serverConfigs.insert("genderFullBatch", defaultConf);
    _serverIndices.insert("genderFullBatch", 0);
    _serverConfigs.insert("genderFullGeo", defaultConf);
    _serverIndices.insert("genderFullGeo", 0);
    _serverConfigs.insert("genderFullGeoBatch", defaultConf);
    _serverIndices.insert("genderFullGeoBatch", 0);
    _serverConfigs.insert("genderGeo", defaultConf);
    _serverIndices.insert("genderGeo", 0);
    _serverConfigs.insert("genderGeoBatch", defaultConf);
    _serverIndices.insert("genderGeoBatch", 0);
    _serverConfigs.insert("origin", defaultConf);
    _serverIndices.insert("origin", 0);
    _serverConfigs.insert("originBatch", defaultConf);
    _serverIndices.insert("originBatch", 0);
    _serverConfigs.insert("parseName", defaultConf);
    _serverIndices.insert("parseName", 0);
    _serverConfigs.insert("parseNameBatch", defaultConf);
    _serverIndices.insert("parseNameBatch", 0);
    _serverConfigs.insert("parseNameGeo", defaultConf);
    _serverIndices.insert("parseNameGeo", 0);
    _serverConfigs.insert("parseNameGeoBatch", defaultConf);
    _serverIndices.insert("parseNameGeoBatch", 0);
    _serverConfigs.insert("religionFull", defaultConf);
    _serverIndices.insert("religionFull", 0);
    _serverConfigs.insert("religionFullBatch", defaultConf);
    _serverIndices.insert("religionFullBatch", 0);
    _serverConfigs.insert("subclassification", defaultConf);
    _serverIndices.insert("subclassification", 0);
    _serverConfigs.insert("subclassificationBatch", defaultConf);
    _serverIndices.insert("subclassificationBatch", 0);
    _serverConfigs.insert("subclassificationFull", defaultConf);
    _serverIndices.insert("subclassificationFull", 0);
    _serverConfigs.insert("subclassificationFullBatch", defaultConf);
    _serverIndices.insert("subclassificationFullBatch", 0);
    _serverConfigs.insert("usRaceEthnicity", defaultConf);
    _serverIndices.insert("usRaceEthnicity", 0);
    _serverConfigs.insert("usRaceEthnicityBatch", defaultConf);
    _serverIndices.insert("usRaceEthnicityBatch", 0);
    _serverConfigs.insert("usRaceEthnicityZIP5", defaultConf);
    _serverIndices.insert("usRaceEthnicityZIP5", 0);
    _serverConfigs.insert("usZipRaceEthnicityBatch", defaultConf);
    _serverIndices.insert("usZipRaceEthnicityBatch", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPersonalApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPersonalApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPersonalApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPersonalApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPersonalApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPersonalApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPersonalApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPersonalApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPersonalApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPersonalApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPersonalApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPersonalApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPersonalApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPersonalApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPersonalApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPersonalApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPersonalApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPersonalApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPersonalApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPersonalApi::corridor(const QString &country_iso2_from, const QString &first_name_from, const QString &last_name_from, const QString &country_iso2_to, const QString &first_name_to, const QString &last_name_to) {
    QString fullPath = QString(_serverConfigs["corridor"][_serverIndices.value("corridor")].URL()+"/api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString country_iso2_fromPathParam("{");
        country_iso2_fromPathParam.append("countryIso2From").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2From", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2From"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2_fromPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2_from)));
    }
    
    {
        QString first_name_fromPathParam("{");
        first_name_fromPathParam.append("firstNameFrom").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstNameFrom", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstNameFrom"+pathSuffix : pathPrefix;
        fullPath.replace(first_name_fromPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name_from)));
    }
    
    {
        QString last_name_fromPathParam("{");
        last_name_fromPathParam.append("lastNameFrom").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastNameFrom", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastNameFrom"+pathSuffix : pathPrefix;
        fullPath.replace(last_name_fromPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name_from)));
    }
    
    {
        QString country_iso2_toPathParam("{");
        country_iso2_toPathParam.append("countryIso2To").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2To", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2To"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2_toPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2_to)));
    }
    
    {
        QString first_name_toPathParam("{");
        first_name_toPathParam.append("firstNameTo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstNameTo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstNameTo"+pathSuffix : pathPrefix;
        fullPath.replace(first_name_toPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name_to)));
    }
    
    {
        QString last_name_toPathParam("{");
        last_name_toPathParam.append("lastNameTo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastNameTo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastNameTo"+pathSuffix : pathPrefix;
        fullPath.replace(last_name_toPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name_to)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::corridorCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::corridorCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICorridorOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT corridorSignal(output);
        Q_EMIT corridorSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT corridorSignalE(output, error_type, error_str);
        Q_EMIT corridorSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT corridorSignalError(output, error_type, error_str);
        Q_EMIT corridorSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::corridorBatch(const ::OpenAPI::OptionalParam<OAIBatchCorridorIn> &oai_batch_corridor_in) {
    QString fullPath = QString(_serverConfigs["corridorBatch"][_serverIndices.value("corridorBatch")].URL()+"/api2/json/corridorBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_corridor_in.hasValue()){

        
        QByteArray output = oai_batch_corridor_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::corridorBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::corridorBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchCorridorOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT corridorBatchSignal(output);
        Q_EMIT corridorBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT corridorBatchSignalE(output, error_type, error_str);
        Q_EMIT corridorBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT corridorBatchSignalError(output, error_type, error_str);
        Q_EMIT corridorBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::country(const QString &personal_name_full) {
    QString fullPath = QString(_serverConfigs["country"][_serverIndices.value("country")].URL()+"/api2/json/country/{personalNameFull}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString personal_name_fullPathParam("{");
        personal_name_fullPathParam.append("personalNameFull").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "personalNameFull", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"personalNameFull"+pathSuffix : pathPrefix;
        fullPath.replace(personal_name_fullPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(personal_name_full)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::countryCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::countryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameGeoOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT countrySignal(output);
        Q_EMIT countrySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT countrySignalE(output, error_type, error_str);
        Q_EMIT countrySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT countrySignalError(output, error_type, error_str);
        Q_EMIT countrySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::countryBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in) {
    QString fullPath = QString(_serverConfigs["countryBatch"][_serverIndices.value("countryBatch")].URL()+"/api2/json/countryBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::countryBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::countryBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameGeoOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT countryBatchSignal(output);
        Q_EMIT countryBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT countryBatchSignalE(output, error_type, error_str);
        Q_EMIT countryBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT countryBatchSignalError(output, error_type, error_str);
        Q_EMIT countryBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::diaspora(const QString &country_iso2, const QString &first_name, const QString &last_name) {
    QString fullPath = QString(_serverConfigs["diaspora"][_serverIndices.value("diaspora")].URL()+"/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::diasporaCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::diasporaCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameDiasporaedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT diasporaSignal(output);
        Q_EMIT diasporaSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT diasporaSignalE(output, error_type, error_str);
        Q_EMIT diasporaSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT diasporaSignalError(output, error_type, error_str);
        Q_EMIT diasporaSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::diasporaBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in) {
    QString fullPath = QString(_serverConfigs["diasporaBatch"][_serverIndices.value("diasporaBatch")].URL()+"/api2/json/diasporaBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_geo_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_geo_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::diasporaBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::diasporaBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNameDiasporaedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT diasporaBatchSignal(output);
        Q_EMIT diasporaBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT diasporaBatchSignalE(output, error_type, error_str);
        Q_EMIT diasporaBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT diasporaBatchSignalError(output, error_type, error_str);
        Q_EMIT diasporaBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::gender(const QString &first_name, const QString &last_name) {
    QString fullPath = QString(_serverConfigs["gender"][_serverIndices.value("gender")].URL()+"/api2/json/gender/{firstName}/{lastName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::genderCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::genderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderSignal(output);
        Q_EMIT genderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderSignalE(output, error_type, error_str);
        Q_EMIT genderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderSignalError(output, error_type, error_str);
        Q_EMIT genderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::gender1(const QString &first_name) {
    QString fullPath = QString(_serverConfigs["gender1"][_serverIndices.value("gender1")].URL()+"/api2/json/gender/{firstName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::gender1Callback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::gender1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT gender1Signal(output);
        Q_EMIT gender1SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT gender1SignalE(output, error_type, error_str);
        Q_EMIT gender1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT gender1SignalError(output, error_type, error_str);
        Q_EMIT gender1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::genderBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in) {
    QString fullPath = QString(_serverConfigs["genderBatch"][_serverIndices.value("genderBatch")].URL()+"/api2/json/genderBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::genderBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::genderBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderBatchSignal(output);
        Q_EMIT genderBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderBatchSignalE(output, error_type, error_str);
        Q_EMIT genderBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderBatchSignalError(output, error_type, error_str);
        Q_EMIT genderBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::genderFull(const QString &full_name) {
    QString fullPath = QString(_serverConfigs["genderFull"][_serverIndices.value("genderFull")].URL()+"/api2/json/genderFull/{fullName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString full_namePathParam("{");
        full_namePathParam.append("fullName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "fullName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"fullName"+pathSuffix : pathPrefix;
        fullPath.replace(full_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(full_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::genderFullCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::genderFullCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderFullSignal(output);
        Q_EMIT genderFullSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderFullSignalE(output, error_type, error_str);
        Q_EMIT genderFullSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderFullSignalError(output, error_type, error_str);
        Q_EMIT genderFullSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::genderFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in) {
    QString fullPath = QString(_serverConfigs["genderFullBatch"][_serverIndices.value("genderFullBatch")].URL()+"/api2/json/genderFullBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::genderFullBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::genderFullBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderFullBatchSignal(output);
        Q_EMIT genderFullBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderFullBatchSignalE(output, error_type, error_str);
        Q_EMIT genderFullBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderFullBatchSignalError(output, error_type, error_str);
        Q_EMIT genderFullBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::genderFullGeo(const QString &full_name, const QString &country_iso2) {
    QString fullPath = QString(_serverConfigs["genderFullGeo"][_serverIndices.value("genderFullGeo")].URL()+"/api2/json/genderFullGeo/{fullName}/{countryIso2}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString full_namePathParam("{");
        full_namePathParam.append("fullName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "fullName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"fullName"+pathSuffix : pathPrefix;
        fullPath.replace(full_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(full_name)));
    }
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::genderFullGeoCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::genderFullGeoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderFullGeoSignal(output);
        Q_EMIT genderFullGeoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderFullGeoSignalE(output, error_type, error_str);
        Q_EMIT genderFullGeoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderFullGeoSignalError(output, error_type, error_str);
        Q_EMIT genderFullGeoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::genderFullGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn> &oai_batch_personal_name_geo_in) {
    QString fullPath = QString(_serverConfigs["genderFullGeoBatch"][_serverIndices.value("genderFullGeoBatch")].URL()+"/api2/json/genderFullGeoBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_geo_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_geo_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::genderFullGeoBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::genderFullGeoBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderFullGeoBatchSignal(output);
        Q_EMIT genderFullGeoBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderFullGeoBatchSignalE(output, error_type, error_str);
        Q_EMIT genderFullGeoBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderFullGeoBatchSignalError(output, error_type, error_str);
        Q_EMIT genderFullGeoBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::genderGeo(const QString &first_name, const QString &last_name, const QString &country_iso2) {
    QString fullPath = QString(_serverConfigs["genderGeo"][_serverIndices.value("genderGeo")].URL()+"/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::genderGeoCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::genderGeoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderGeoSignal(output);
        Q_EMIT genderGeoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderGeoSignalE(output, error_type, error_str);
        Q_EMIT genderGeoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderGeoSignalError(output, error_type, error_str);
        Q_EMIT genderGeoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::genderGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in) {
    QString fullPath = QString(_serverConfigs["genderGeoBatch"][_serverIndices.value("genderGeoBatch")].URL()+"/api2/json/genderGeoBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_geo_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_geo_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::genderGeoBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::genderGeoBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderGeoBatchSignal(output);
        Q_EMIT genderGeoBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderGeoBatchSignalE(output, error_type, error_str);
        Q_EMIT genderGeoBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderGeoBatchSignalError(output, error_type, error_str);
        Q_EMIT genderGeoBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::origin(const QString &first_name, const QString &last_name) {
    QString fullPath = QString(_serverConfigs["origin"][_serverIndices.value("origin")].URL()+"/api2/json/origin/{firstName}/{lastName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::originCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::originCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameOriginedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT originSignal(output);
        Q_EMIT originSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT originSignalE(output, error_type, error_str);
        Q_EMIT originSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT originSignalError(output, error_type, error_str);
        Q_EMIT originSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::originBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in) {
    QString fullPath = QString(_serverConfigs["originBatch"][_serverIndices.value("originBatch")].URL()+"/api2/json/originBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::originBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::originBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNameOriginedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT originBatchSignal(output);
        Q_EMIT originBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT originBatchSignalE(output, error_type, error_str);
        Q_EMIT originBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT originBatchSignalError(output, error_type, error_str);
        Q_EMIT originBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::parseName(const QString &name_full) {
    QString fullPath = QString(_serverConfigs["parseName"][_serverIndices.value("parseName")].URL()+"/api2/json/parseName/{nameFull}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString name_fullPathParam("{");
        name_fullPathParam.append("nameFull").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "nameFull", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"nameFull"+pathSuffix : pathPrefix;
        fullPath.replace(name_fullPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_full)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::parseNameCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::parseNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameParsedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT parseNameSignal(output);
        Q_EMIT parseNameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT parseNameSignalE(output, error_type, error_str);
        Q_EMIT parseNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT parseNameSignalError(output, error_type, error_str);
        Q_EMIT parseNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::parseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in) {
    QString fullPath = QString(_serverConfigs["parseNameBatch"][_serverIndices.value("parseNameBatch")].URL()+"/api2/json/parseNameBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::parseNameBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::parseNameBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameParsedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT parseNameBatchSignal(output);
        Q_EMIT parseNameBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT parseNameBatchSignalE(output, error_type, error_str);
        Q_EMIT parseNameBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT parseNameBatchSignalError(output, error_type, error_str);
        Q_EMIT parseNameBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::parseNameGeo(const QString &name_full, const QString &country_iso2) {
    QString fullPath = QString(_serverConfigs["parseNameGeo"][_serverIndices.value("parseNameGeo")].URL()+"/api2/json/parseName/{nameFull}/{countryIso2}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString name_fullPathParam("{");
        name_fullPathParam.append("nameFull").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "nameFull", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"nameFull"+pathSuffix : pathPrefix;
        fullPath.replace(name_fullPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name_full)));
    }
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::parseNameGeoCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::parseNameGeoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameParsedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT parseNameGeoSignal(output);
        Q_EMIT parseNameGeoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT parseNameGeoSignalE(output, error_type, error_str);
        Q_EMIT parseNameGeoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT parseNameGeoSignalError(output, error_type, error_str);
        Q_EMIT parseNameGeoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::parseNameGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn> &oai_batch_personal_name_geo_in) {
    QString fullPath = QString(_serverConfigs["parseNameGeoBatch"][_serverIndices.value("parseNameGeoBatch")].URL()+"/api2/json/parseNameGeoBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_geo_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_geo_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::parseNameGeoBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::parseNameGeoBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameParsedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT parseNameGeoBatchSignal(output);
        Q_EMIT parseNameGeoBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT parseNameGeoBatchSignalE(output, error_type, error_str);
        Q_EMIT parseNameGeoBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT parseNameGeoBatchSignalError(output, error_type, error_str);
        Q_EMIT parseNameGeoBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::religionFull(const QString &country_iso2, const QString &sub_division_iso31662, const QString &personal_name_full) {
    QString fullPath = QString(_serverConfigs["religionFull"][_serverIndices.value("religionFull")].URL()+"/api2/json/religionFull/{countryIso2}/{subDivisionIso31662}/{personalNameFull}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    
    {
        QString sub_division_iso31662PathParam("{");
        sub_division_iso31662PathParam.append("subDivisionIso31662").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subDivisionIso31662", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subDivisionIso31662"+pathSuffix : pathPrefix;
        fullPath.replace(sub_division_iso31662PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sub_division_iso31662)));
    }
    
    {
        QString personal_name_fullPathParam("{");
        personal_name_fullPathParam.append("personalNameFull").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "personalNameFull", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"personalNameFull"+pathSuffix : pathPrefix;
        fullPath.replace(personal_name_fullPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(personal_name_full)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::religionFullCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::religionFullCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameReligionedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT religionFullSignal(output);
        Q_EMIT religionFullSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT religionFullSignalE(output, error_type, error_str);
        Q_EMIT religionFullSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT religionFullSignalError(output, error_type, error_str);
        Q_EMIT religionFullSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::religionFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoSubdivisionIn> &oai_batch_personal_name_geo_subdivision_in) {
    QString fullPath = QString(_serverConfigs["religionFullBatch"][_serverIndices.value("religionFullBatch")].URL()+"/api2/json/religionFullBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_geo_subdivision_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_geo_subdivision_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::religionFullBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::religionFullBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameReligionedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT religionFullBatchSignal(output);
        Q_EMIT religionFullBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT religionFullBatchSignalE(output, error_type, error_str);
        Q_EMIT religionFullBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT religionFullBatchSignalError(output, error_type, error_str);
        Q_EMIT religionFullBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::subclassification(const QString &country_iso2, const QString &first_name, const QString &last_name) {
    QString fullPath = QString(_serverConfigs["subclassification"][_serverIndices.value("subclassification")].URL()+"/api2/json/subclassification/{countryIso2}/{firstName}/{lastName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::subclassificationCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::subclassificationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameGeoSubclassificationOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT subclassificationSignal(output);
        Q_EMIT subclassificationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT subclassificationSignalE(output, error_type, error_str);
        Q_EMIT subclassificationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT subclassificationSignalError(output, error_type, error_str);
        Q_EMIT subclassificationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::subclassificationBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in) {
    QString fullPath = QString(_serverConfigs["subclassificationBatch"][_serverIndices.value("subclassificationBatch")].URL()+"/api2/json/subclassificationBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_geo_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_geo_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::subclassificationBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::subclassificationBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNameGeoSubclassificationOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT subclassificationBatchSignal(output);
        Q_EMIT subclassificationBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT subclassificationBatchSignalE(output, error_type, error_str);
        Q_EMIT subclassificationBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT subclassificationBatchSignalError(output, error_type, error_str);
        Q_EMIT subclassificationBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::subclassificationFull(const QString &country_iso2, const QString &full_name) {
    QString fullPath = QString(_serverConfigs["subclassificationFull"][_serverIndices.value("subclassificationFull")].URL()+"/api2/json/subclassificationFull/{countryIso2}/{fullName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    
    {
        QString full_namePathParam("{");
        full_namePathParam.append("fullName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "fullName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"fullName"+pathSuffix : pathPrefix;
        fullPath.replace(full_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(full_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::subclassificationFullCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::subclassificationFullCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameGeoSubclassificationOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT subclassificationFullSignal(output);
        Q_EMIT subclassificationFullSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT subclassificationFullSignalE(output, error_type, error_str);
        Q_EMIT subclassificationFullSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT subclassificationFullSignalError(output, error_type, error_str);
        Q_EMIT subclassificationFullSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::subclassificationFullBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameGeoIn> &oai_batch_personal_name_geo_in) {
    QString fullPath = QString(_serverConfigs["subclassificationFullBatch"][_serverIndices.value("subclassificationFullBatch")].URL()+"/api2/json/subclassificationFullBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_geo_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_geo_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::subclassificationFullBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::subclassificationFullBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameGeoSubclassificationOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT subclassificationFullBatchSignal(output);
        Q_EMIT subclassificationFullBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT subclassificationFullBatchSignalE(output, error_type, error_str);
        Q_EMIT subclassificationFullBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT subclassificationFullBatchSignalError(output, error_type, error_str);
        Q_EMIT subclassificationFullBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::usRaceEthnicity(const QString &first_name, const QString &last_name) {
    QString fullPath = QString(_serverConfigs["usRaceEthnicity"][_serverIndices.value("usRaceEthnicity")].URL()+"/api2/json/usRaceEthnicity/{firstName}/{lastName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::usRaceEthnicityCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::usRaceEthnicityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameUSRaceEthnicityOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usRaceEthnicitySignal(output);
        Q_EMIT usRaceEthnicitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usRaceEthnicitySignalE(output, error_type, error_str);
        Q_EMIT usRaceEthnicitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usRaceEthnicitySignalError(output, error_type, error_str);
        Q_EMIT usRaceEthnicitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::usRaceEthnicityBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoIn> &oai_batch_first_last_name_geo_in) {
    QString fullPath = QString(_serverConfigs["usRaceEthnicityBatch"][_serverIndices.value("usRaceEthnicityBatch")].URL()+"/api2/json/usRaceEthnicityBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_geo_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_geo_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::usRaceEthnicityBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::usRaceEthnicityBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNameUSRaceEthnicityOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usRaceEthnicityBatchSignal(output);
        Q_EMIT usRaceEthnicityBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usRaceEthnicityBatchSignalE(output, error_type, error_str);
        Q_EMIT usRaceEthnicityBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usRaceEthnicityBatchSignalError(output, error_type, error_str);
        Q_EMIT usRaceEthnicityBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::usRaceEthnicityZIP5(const QString &first_name, const QString &last_name, const QString &zip5_code) {
    QString fullPath = QString(_serverConfigs["usRaceEthnicityZIP5"][_serverIndices.value("usRaceEthnicityZIP5")].URL()+"/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    
    {
        QString zip5_codePathParam("{");
        zip5_codePathParam.append("zip5Code").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "zip5Code", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"zip5Code"+pathSuffix : pathPrefix;
        fullPath.replace(zip5_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(zip5_code)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::usRaceEthnicityZIP5Callback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::usRaceEthnicityZIP5Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameUSRaceEthnicityOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usRaceEthnicityZIP5Signal(output);
        Q_EMIT usRaceEthnicityZIP5SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usRaceEthnicityZIP5SignalE(output, error_type, error_str);
        Q_EMIT usRaceEthnicityZIP5SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usRaceEthnicityZIP5SignalError(output, error_type, error_str);
        Q_EMIT usRaceEthnicityZIP5SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::usZipRaceEthnicityBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGeoZippedIn> &oai_batch_first_last_name_geo_zipped_in) {
    QString fullPath = QString(_serverConfigs["usZipRaceEthnicityBatch"][_serverIndices.value("usZipRaceEthnicityBatch")].URL()+"/api2/json/usZipRaceEthnicityBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_geo_zipped_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_geo_zipped_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonalApi::usZipRaceEthnicityBatchCallback);
    connect(this, &OAIPersonalApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonalApi::usZipRaceEthnicityBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNameUSRaceEthnicityOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT usZipRaceEthnicityBatchSignal(output);
        Q_EMIT usZipRaceEthnicityBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT usZipRaceEthnicityBatchSignalE(output, error_type, error_str);
        Q_EMIT usZipRaceEthnicityBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT usZipRaceEthnicityBatchSignalError(output, error_type, error_str);
        Q_EMIT usZipRaceEthnicityBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonalApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
