/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIServiceOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIServiceOut::OAIAPIServiceOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIServiceOut::OAIAPIServiceOut() {
    this->initializeModel();
}

OAIAPIServiceOut::~OAIAPIServiceOut() {}

void OAIAPIServiceOut::initializeModel() {

    m_cost_in_units_isSet = false;
    m_cost_in_units_isValid = false;

    m_service_group_isSet = false;
    m_service_group_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIAPIServiceOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIServiceOut::fromJsonObject(QJsonObject json) {

    m_cost_in_units_isValid = ::OpenAPI::fromJsonValue(m_cost_in_units, json[QString("costInUnits")]);
    m_cost_in_units_isSet = !json[QString("costInUnits")].isNull() && m_cost_in_units_isValid;

    m_service_group_isValid = ::OpenAPI::fromJsonValue(m_service_group, json[QString("serviceGroup")]);
    m_service_group_isSet = !json[QString("serviceGroup")].isNull() && m_service_group_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIAPIServiceOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIServiceOut::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_in_units_isSet) {
        obj.insert(QString("costInUnits"), ::OpenAPI::toJsonValue(m_cost_in_units));
    }
    if (m_service_group_isSet) {
        obj.insert(QString("serviceGroup"), ::OpenAPI::toJsonValue(m_service_group));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

qint32 OAIAPIServiceOut::getCostInUnits() const {
    return m_cost_in_units;
}
void OAIAPIServiceOut::setCostInUnits(const qint32 &cost_in_units) {
    m_cost_in_units = cost_in_units;
    m_cost_in_units_isSet = true;
}

bool OAIAPIServiceOut::is_cost_in_units_Set() const{
    return m_cost_in_units_isSet;
}

bool OAIAPIServiceOut::is_cost_in_units_Valid() const{
    return m_cost_in_units_isValid;
}

QString OAIAPIServiceOut::getServiceGroup() const {
    return m_service_group;
}
void OAIAPIServiceOut::setServiceGroup(const QString &service_group) {
    m_service_group = service_group;
    m_service_group_isSet = true;
}

bool OAIAPIServiceOut::is_service_group_Set() const{
    return m_service_group_isSet;
}

bool OAIAPIServiceOut::is_service_group_Valid() const{
    return m_service_group_isValid;
}

QString OAIAPIServiceOut::getServiceName() const {
    return m_service_name;
}
void OAIAPIServiceOut::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIAPIServiceOut::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIAPIServiceOut::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIAPIServiceOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_in_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIServiceOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
