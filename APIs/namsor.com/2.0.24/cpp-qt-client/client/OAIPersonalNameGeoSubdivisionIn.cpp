/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalNameGeoSubdivisionIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalNameGeoSubdivisionIn::OAIPersonalNameGeoSubdivisionIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalNameGeoSubdivisionIn::OAIPersonalNameGeoSubdivisionIn() {
    this->initializeModel();
}

OAIPersonalNameGeoSubdivisionIn::~OAIPersonalNameGeoSubdivisionIn() {}

void OAIPersonalNameGeoSubdivisionIn::initializeModel() {

    m_country_iso2_isSet = false;
    m_country_iso2_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subdivision_iso_isSet = false;
    m_subdivision_iso_isValid = false;
}

void OAIPersonalNameGeoSubdivisionIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalNameGeoSubdivisionIn::fromJsonObject(QJsonObject json) {

    m_country_iso2_isValid = ::OpenAPI::fromJsonValue(m_country_iso2, json[QString("countryIso2")]);
    m_country_iso2_isSet = !json[QString("countryIso2")].isNull() && m_country_iso2_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_subdivision_iso_isValid = ::OpenAPI::fromJsonValue(m_subdivision_iso, json[QString("subdivisionIso")]);
    m_subdivision_iso_isSet = !json[QString("subdivisionIso")].isNull() && m_subdivision_iso_isValid;
}

QString OAIPersonalNameGeoSubdivisionIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalNameGeoSubdivisionIn::asJsonObject() const {
    QJsonObject obj;
    if (m_country_iso2_isSet) {
        obj.insert(QString("countryIso2"), ::OpenAPI::toJsonValue(m_country_iso2));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subdivision_iso_isSet) {
        obj.insert(QString("subdivisionIso"), ::OpenAPI::toJsonValue(m_subdivision_iso));
    }
    return obj;
}

QString OAIPersonalNameGeoSubdivisionIn::getCountryIso2() const {
    return m_country_iso2;
}
void OAIPersonalNameGeoSubdivisionIn::setCountryIso2(const QString &country_iso2) {
    m_country_iso2 = country_iso2;
    m_country_iso2_isSet = true;
}

bool OAIPersonalNameGeoSubdivisionIn::is_country_iso2_Set() const{
    return m_country_iso2_isSet;
}

bool OAIPersonalNameGeoSubdivisionIn::is_country_iso2_Valid() const{
    return m_country_iso2_isValid;
}

QString OAIPersonalNameGeoSubdivisionIn::getId() const {
    return m_id;
}
void OAIPersonalNameGeoSubdivisionIn::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersonalNameGeoSubdivisionIn::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersonalNameGeoSubdivisionIn::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPersonalNameGeoSubdivisionIn::getName() const {
    return m_name;
}
void OAIPersonalNameGeoSubdivisionIn::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPersonalNameGeoSubdivisionIn::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPersonalNameGeoSubdivisionIn::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPersonalNameGeoSubdivisionIn::getSubdivisionIso() const {
    return m_subdivision_iso;
}
void OAIPersonalNameGeoSubdivisionIn::setSubdivisionIso(const QString &subdivision_iso) {
    m_subdivision_iso = subdivision_iso;
    m_subdivision_iso_isSet = true;
}

bool OAIPersonalNameGeoSubdivisionIn::is_subdivision_iso_Set() const{
    return m_subdivision_iso_isSet;
}

bool OAIPersonalNameGeoSubdivisionIn::is_subdivision_iso_Valid() const{
    return m_subdivision_iso_isValid;
}

bool OAIPersonalNameGeoSubdivisionIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdivision_iso_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalNameGeoSubdivisionIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
