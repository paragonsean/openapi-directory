/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchPersonalNameReligionedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchPersonalNameReligionedOut::OAIBatchPersonalNameReligionedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchPersonalNameReligionedOut::OAIBatchPersonalNameReligionedOut() {
    this->initializeModel();
}

OAIBatchPersonalNameReligionedOut::~OAIBatchPersonalNameReligionedOut() {}

void OAIBatchPersonalNameReligionedOut::initializeModel() {

    m_personal_names_isSet = false;
    m_personal_names_isValid = false;
}

void OAIBatchPersonalNameReligionedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchPersonalNameReligionedOut::fromJsonObject(QJsonObject json) {

    m_personal_names_isValid = ::OpenAPI::fromJsonValue(m_personal_names, json[QString("personalNames")]);
    m_personal_names_isSet = !json[QString("personalNames")].isNull() && m_personal_names_isValid;
}

QString OAIBatchPersonalNameReligionedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchPersonalNameReligionedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_personal_names.size() > 0) {
        obj.insert(QString("personalNames"), ::OpenAPI::toJsonValue(m_personal_names));
    }
    return obj;
}

QList<OAIPersonalNameReligionedOut> OAIBatchPersonalNameReligionedOut::getPersonalNames() const {
    return m_personal_names;
}
void OAIBatchPersonalNameReligionedOut::setPersonalNames(const QList<OAIPersonalNameReligionedOut> &personal_names) {
    m_personal_names = personal_names;
    m_personal_names_isSet = true;
}

bool OAIBatchPersonalNameReligionedOut::is_personal_names_Set() const{
    return m_personal_names_isSet;
}

bool OAIBatchPersonalNameReligionedOut::is_personal_names_Valid() const{
    return m_personal_names_isValid;
}

bool OAIBatchPersonalNameReligionedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_personal_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchPersonalNameReligionedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
