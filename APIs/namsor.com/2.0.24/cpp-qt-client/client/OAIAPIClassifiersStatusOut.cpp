/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIClassifiersStatusOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIClassifiersStatusOut::OAIAPIClassifiersStatusOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIClassifiersStatusOut::OAIAPIClassifiersStatusOut() {
    this->initializeModel();
}

OAIAPIClassifiersStatusOut::~OAIAPIClassifiersStatusOut() {}

void OAIAPIClassifiersStatusOut::initializeModel() {

    m_classifiers_isSet = false;
    m_classifiers_isValid = false;

    m_software_version_isSet = false;
    m_software_version_isValid = false;
}

void OAIAPIClassifiersStatusOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIClassifiersStatusOut::fromJsonObject(QJsonObject json) {

    m_classifiers_isValid = ::OpenAPI::fromJsonValue(m_classifiers, json[QString("classifiers")]);
    m_classifiers_isSet = !json[QString("classifiers")].isNull() && m_classifiers_isValid;

    m_software_version_isValid = ::OpenAPI::fromJsonValue(m_software_version, json[QString("softwareVersion")]);
    m_software_version_isSet = !json[QString("softwareVersion")].isNull() && m_software_version_isValid;
}

QString OAIAPIClassifiersStatusOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIClassifiersStatusOut::asJsonObject() const {
    QJsonObject obj;
    if (m_classifiers.size() > 0) {
        obj.insert(QString("classifiers"), ::OpenAPI::toJsonValue(m_classifiers));
    }
    if (m_software_version.isSet()) {
        obj.insert(QString("softwareVersion"), ::OpenAPI::toJsonValue(m_software_version));
    }
    return obj;
}

QList<OAIAPIClassifierOut> OAIAPIClassifiersStatusOut::getClassifiers() const {
    return m_classifiers;
}
void OAIAPIClassifiersStatusOut::setClassifiers(const QList<OAIAPIClassifierOut> &classifiers) {
    m_classifiers = classifiers;
    m_classifiers_isSet = true;
}

bool OAIAPIClassifiersStatusOut::is_classifiers_Set() const{
    return m_classifiers_isSet;
}

bool OAIAPIClassifiersStatusOut::is_classifiers_Valid() const{
    return m_classifiers_isValid;
}

OAISoftwareVersionOut OAIAPIClassifiersStatusOut::getSoftwareVersion() const {
    return m_software_version;
}
void OAIAPIClassifiersStatusOut::setSoftwareVersion(const OAISoftwareVersionOut &software_version) {
    m_software_version = software_version;
    m_software_version_isSet = true;
}

bool OAIAPIClassifiersStatusOut::is_software_version_Set() const{
    return m_software_version_isSet;
}

bool OAIAPIClassifiersStatusOut::is_software_version_Valid() const{
    return m_software_version_isValid;
}

bool OAIAPIClassifiersStatusOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIClassifiersStatusOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
