/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISocialApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISocialApi::OAISocialApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAISocialApi::~OAISocialApi() {
}

void OAISocialApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://v2.namsor.com/NamSorAPIv2"),
    "namsor_v2",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("phoneCode", defaultConf);
    _serverIndices.insert("phoneCode", 0);
    _serverConfigs.insert("phoneCodeBatch", defaultConf);
    _serverIndices.insert("phoneCodeBatch", 0);
    _serverConfigs.insert("phoneCodeGeo", defaultConf);
    _serverIndices.insert("phoneCodeGeo", 0);
    _serverConfigs.insert("phoneCodeGeoBatch", defaultConf);
    _serverIndices.insert("phoneCodeGeoBatch", 0);
    _serverConfigs.insert("phoneCodeGeoFeedbackLoop", defaultConf);
    _serverIndices.insert("phoneCodeGeoFeedbackLoop", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAISocialApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAISocialApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAISocialApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAISocialApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAISocialApi::setUsername(const QString &username) {
    _username = username;
}

void OAISocialApi::setPassword(const QString &password) {
    _password = password;
}


void OAISocialApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAISocialApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAISocialApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAISocialApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISocialApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISocialApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAISocialApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAISocialApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAISocialApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAISocialApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAISocialApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAISocialApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAISocialApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAISocialApi::phoneCode(const QString &first_name, const QString &last_name, const QString &phone_number) {
    QString fullPath = QString(_serverConfigs["phoneCode"][_serverIndices.value("phoneCode")].URL()+"/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    
    {
        QString phone_numberPathParam("{");
        phone_numberPathParam.append("phoneNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "phoneNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"phoneNumber"+pathSuffix : pathPrefix;
        fullPath.replace(phone_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(phone_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISocialApi::phoneCodeCallback);
    connect(this, &OAISocialApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISocialApi::phoneCodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNamePhoneCodedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT phoneCodeSignal(output);
        Q_EMIT phoneCodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT phoneCodeSignalE(output, error_type, error_str);
        Q_EMIT phoneCodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT phoneCodeSignalError(output, error_type, error_str);
        Q_EMIT phoneCodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISocialApi::phoneCodeBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNamePhoneNumberIn> &oai_batch_first_last_name_phone_number_in) {
    QString fullPath = QString(_serverConfigs["phoneCodeBatch"][_serverIndices.value("phoneCodeBatch")].URL()+"/api2/json/phoneCodeBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_phone_number_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_phone_number_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISocialApi::phoneCodeBatchCallback);
    connect(this, &OAISocialApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISocialApi::phoneCodeBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNamePhoneCodedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT phoneCodeBatchSignal(output);
        Q_EMIT phoneCodeBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT phoneCodeBatchSignalE(output, error_type, error_str);
        Q_EMIT phoneCodeBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT phoneCodeBatchSignalError(output, error_type, error_str);
        Q_EMIT phoneCodeBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISocialApi::phoneCodeGeo(const QString &first_name, const QString &last_name, const QString &phone_number, const QString &country_iso2) {
    QString fullPath = QString(_serverConfigs["phoneCodeGeo"][_serverIndices.value("phoneCodeGeo")].URL()+"/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    
    {
        QString phone_numberPathParam("{");
        phone_numberPathParam.append("phoneNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "phoneNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"phoneNumber"+pathSuffix : pathPrefix;
        fullPath.replace(phone_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(phone_number)));
    }
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISocialApi::phoneCodeGeoCallback);
    connect(this, &OAISocialApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISocialApi::phoneCodeGeoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNamePhoneCodedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT phoneCodeGeoSignal(output);
        Q_EMIT phoneCodeGeoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT phoneCodeGeoSignalE(output, error_type, error_str);
        Q_EMIT phoneCodeGeoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT phoneCodeGeoSignalError(output, error_type, error_str);
        Q_EMIT phoneCodeGeoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISocialApi::phoneCodeGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNamePhoneNumberGeoIn> &oai_batch_first_last_name_phone_number_geo_in) {
    QString fullPath = QString(_serverConfigs["phoneCodeGeoBatch"][_serverIndices.value("phoneCodeGeoBatch")].URL()+"/api2/json/phoneCodeGeoBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_phone_number_geo_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_phone_number_geo_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISocialApi::phoneCodeGeoBatchCallback);
    connect(this, &OAISocialApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISocialApi::phoneCodeGeoBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNamePhoneCodedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT phoneCodeGeoBatchSignal(output);
        Q_EMIT phoneCodeGeoBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT phoneCodeGeoBatchSignalE(output, error_type, error_str);
        Q_EMIT phoneCodeGeoBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT phoneCodeGeoBatchSignalError(output, error_type, error_str);
        Q_EMIT phoneCodeGeoBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISocialApi::phoneCodeGeoFeedbackLoop(const QString &first_name, const QString &last_name, const QString &phone_number, const QString &phone_number_e164, const QString &country_iso2) {
    QString fullPath = QString(_serverConfigs["phoneCodeGeoFeedbackLoop"][_serverIndices.value("phoneCodeGeoFeedbackLoop")].URL()+"/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString first_namePathParam("{");
        first_namePathParam.append("firstName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "firstName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"firstName"+pathSuffix : pathPrefix;
        fullPath.replace(first_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(first_name)));
    }
    
    {
        QString last_namePathParam("{");
        last_namePathParam.append("lastName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lastName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lastName"+pathSuffix : pathPrefix;
        fullPath.replace(last_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(last_name)));
    }
    
    {
        QString phone_numberPathParam("{");
        phone_numberPathParam.append("phoneNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "phoneNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"phoneNumber"+pathSuffix : pathPrefix;
        fullPath.replace(phone_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(phone_number)));
    }
    
    {
        QString phone_number_e164PathParam("{");
        phone_number_e164PathParam.append("phoneNumberE164").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "phoneNumberE164", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"phoneNumberE164"+pathSuffix : pathPrefix;
        fullPath.replace(phone_number_e164PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(phone_number_e164)));
    }
    
    {
        QString country_iso2PathParam("{");
        country_iso2PathParam.append("countryIso2").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "countryIso2", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"countryIso2"+pathSuffix : pathPrefix;
        fullPath.replace(country_iso2PathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_iso2)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISocialApi::phoneCodeGeoFeedbackLoopCallback);
    connect(this, &OAISocialApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISocialApi::phoneCodeGeoFeedbackLoopCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNamePhoneCodedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT phoneCodeGeoFeedbackLoopSignal(output);
        Q_EMIT phoneCodeGeoFeedbackLoopSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT phoneCodeGeoFeedbackLoopSignalE(output, error_type, error_str);
        Q_EMIT phoneCodeGeoFeedbackLoopSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT phoneCodeGeoFeedbackLoopSignalError(output, error_type, error_str);
        Q_EMIT phoneCodeGeoFeedbackLoopSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISocialApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
