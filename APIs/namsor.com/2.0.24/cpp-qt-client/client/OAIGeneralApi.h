/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneralApi_H
#define OAI_OAIGeneralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchNameGeoIn.h"
#include "OAIBatchNameIn.h"
#include "OAIBatchProperNounCategorizedOut.h"
#include "OAIProperNounCategorizedOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneralApi : public QObject {
    Q_OBJECT

public:
    OAIGeneralApi(const int timeOut = 0);
    ~OAIGeneralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proper_noun QString [required]
    */
    virtual void nameType(const QString &proper_noun);

    /**
    * @param[in]  oai_batch_name_in OAIBatchNameIn [optional]
    */
    virtual void nameTypeBatch(const ::OpenAPI::OptionalParam<OAIBatchNameIn> &oai_batch_name_in = ::OpenAPI::OptionalParam<OAIBatchNameIn>());

    /**
    * @param[in]  proper_noun QString [required]
    * @param[in]  country_iso2 QString [required]
    */
    virtual void nameTypeGeo(const QString &proper_noun, const QString &country_iso2);

    /**
    * @param[in]  oai_batch_name_geo_in OAIBatchNameGeoIn [optional]
    */
    virtual void nameTypeGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchNameGeoIn> &oai_batch_name_geo_in = ::OpenAPI::OptionalParam<OAIBatchNameGeoIn>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void nameTypeCallback(OAIHttpRequestWorker *worker);
    void nameTypeBatchCallback(OAIHttpRequestWorker *worker);
    void nameTypeGeoCallback(OAIHttpRequestWorker *worker);
    void nameTypeGeoBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void nameTypeSignal(OAIProperNounCategorizedOut summary);
    void nameTypeBatchSignal(OAIBatchProperNounCategorizedOut summary);
    void nameTypeGeoSignal(OAIProperNounCategorizedOut summary);
    void nameTypeGeoBatchSignal(OAIBatchProperNounCategorizedOut summary);


    void nameTypeSignalFull(OAIHttpRequestWorker *worker, OAIProperNounCategorizedOut summary);
    void nameTypeBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchProperNounCategorizedOut summary);
    void nameTypeGeoSignalFull(OAIHttpRequestWorker *worker, OAIProperNounCategorizedOut summary);
    void nameTypeGeoBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchProperNounCategorizedOut summary);

    Q_DECL_DEPRECATED_X("Use nameTypeSignalError() instead")
    void nameTypeSignalE(OAIProperNounCategorizedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nameTypeSignalError(OAIProperNounCategorizedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nameTypeBatchSignalError() instead")
    void nameTypeBatchSignalE(OAIBatchProperNounCategorizedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nameTypeBatchSignalError(OAIBatchProperNounCategorizedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nameTypeGeoSignalError() instead")
    void nameTypeGeoSignalE(OAIProperNounCategorizedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nameTypeGeoSignalError(OAIProperNounCategorizedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nameTypeGeoBatchSignalError() instead")
    void nameTypeGeoBatchSignalE(OAIBatchProperNounCategorizedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nameTypeGeoBatchSignalError(OAIBatchProperNounCategorizedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use nameTypeSignalErrorFull() instead")
    void nameTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nameTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nameTypeBatchSignalErrorFull() instead")
    void nameTypeBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nameTypeBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nameTypeGeoSignalErrorFull() instead")
    void nameTypeGeoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nameTypeGeoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nameTypeGeoBatchSignalErrorFull() instead")
    void nameTypeGeoBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nameTypeGeoBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
