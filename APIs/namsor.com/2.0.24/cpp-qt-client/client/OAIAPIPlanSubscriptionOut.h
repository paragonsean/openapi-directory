/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPIPlanSubscriptionOut.h
 *
 * The API Plan governing the subscription.
 */

#ifndef OAIAPIPlanSubscriptionOut_H
#define OAIAPIPlanSubscriptionOut_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAPIPlanSubscriptionOut : public OAIObject {
public:
    OAIAPIPlanSubscriptionOut();
    OAIAPIPlanSubscriptionOut(QString json);
    ~OAIAPIPlanSubscriptionOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiKey() const;
    void setApiKey(const QString &api_key);
    bool is_api_key_Set() const;
    bool is_api_key_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    double getCurrencyFactor() const;
    void setCurrencyFactor(const double &currency_factor);
    bool is_currency_factor_Set() const;
    bool is_currency_factor_Valid() const;

    QString getPlanBaseFeesKey() const;
    void setPlanBaseFeesKey(const QString &plan_base_fees_key);
    bool is_plan_base_fees_key_Set() const;
    bool is_plan_base_fees_key_Valid() const;

    qint64 getPlanEnded() const;
    void setPlanEnded(const qint64 &plan_ended);
    bool is_plan_ended_Set() const;
    bool is_plan_ended_Valid() const;

    QString getPlanName() const;
    void setPlanName(const QString &plan_name);
    bool is_plan_name_Set() const;
    bool is_plan_name_Valid() const;

    qint64 getPlanQuota() const;
    void setPlanQuota(const qint64 &plan_quota);
    bool is_plan_quota_Set() const;
    bool is_plan_quota_Valid() const;

    qint64 getPlanStarted() const;
    void setPlanStarted(const qint64 &plan_started);
    bool is_plan_started_Set() const;
    bool is_plan_started_Valid() const;

    QString getPlanStatus() const;
    void setPlanStatus(const QString &plan_status);
    bool is_plan_status_Set() const;
    bool is_plan_status_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    double getPriceOverage() const;
    void setPriceOverage(const double &price_overage);
    bool is_price_overage_Set() const;
    bool is_price_overage_Valid() const;

    double getPriceOverageUsd() const;
    void setPriceOverageUsd(const double &price_overage_usd);
    bool is_price_overage_usd_Set() const;
    bool is_price_overage_usd_Valid() const;

    double getPriceUsd() const;
    void setPriceUsd(const double &price_usd);
    bool is_price_usd_Set() const;
    bool is_price_usd_Valid() const;

    qint64 getPriorPlanStarted() const;
    void setPriorPlanStarted(const qint64 &prior_plan_started);
    bool is_prior_plan_started_Set() const;
    bool is_prior_plan_started_Valid() const;

    QString getStripeCustomerId() const;
    void setStripeCustomerId(const QString &stripe_customer_id);
    bool is_stripe_customer_id_Set() const;
    bool is_stripe_customer_id_Valid() const;

    QString getStripeStatus() const;
    void setStripeStatus(const QString &stripe_status);
    bool is_stripe_status_Set() const;
    bool is_stripe_status_Valid() const;

    QString getStripeSubscription() const;
    void setStripeSubscription(const QString &stripe_subscription);
    bool is_stripe_subscription_Set() const;
    bool is_stripe_subscription_Valid() const;

    double getTaxRate() const;
    void setTaxRate(const double &tax_rate);
    bool is_tax_rate_Set() const;
    bool is_tax_rate_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_key;
    bool m_api_key_isSet;
    bool m_api_key_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    double m_currency_factor;
    bool m_currency_factor_isSet;
    bool m_currency_factor_isValid;

    QString m_plan_base_fees_key;
    bool m_plan_base_fees_key_isSet;
    bool m_plan_base_fees_key_isValid;

    qint64 m_plan_ended;
    bool m_plan_ended_isSet;
    bool m_plan_ended_isValid;

    QString m_plan_name;
    bool m_plan_name_isSet;
    bool m_plan_name_isValid;

    qint64 m_plan_quota;
    bool m_plan_quota_isSet;
    bool m_plan_quota_isValid;

    qint64 m_plan_started;
    bool m_plan_started_isSet;
    bool m_plan_started_isValid;

    QString m_plan_status;
    bool m_plan_status_isSet;
    bool m_plan_status_isValid;

    double m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    double m_price_overage;
    bool m_price_overage_isSet;
    bool m_price_overage_isValid;

    double m_price_overage_usd;
    bool m_price_overage_usd_isSet;
    bool m_price_overage_usd_isValid;

    double m_price_usd;
    bool m_price_usd_isSet;
    bool m_price_usd_isValid;

    qint64 m_prior_plan_started;
    bool m_prior_plan_started_isSet;
    bool m_prior_plan_started_isValid;

    QString m_stripe_customer_id;
    bool m_stripe_customer_id_isSet;
    bool m_stripe_customer_id_isValid;

    QString m_stripe_status;
    bool m_stripe_status_isSet;
    bool m_stripe_status_isValid;

    QString m_stripe_subscription;
    bool m_stripe_subscription_isSet;
    bool m_stripe_subscription_isValid;

    double m_tax_rate;
    bool m_tax_rate_isSet;
    bool m_tax_rate_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPIPlanSubscriptionOut)

#endif // OAIAPIPlanSubscriptionOut_H
