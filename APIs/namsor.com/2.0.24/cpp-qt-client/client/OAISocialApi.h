/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISocialApi_H
#define OAI_OAISocialApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchFirstLastNamePhoneCodedOut.h"
#include "OAIBatchFirstLastNamePhoneNumberGeoIn.h"
#include "OAIBatchFirstLastNamePhoneNumberIn.h"
#include "OAIFirstLastNamePhoneCodedOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISocialApi : public QObject {
    Q_OBJECT

public:
    OAISocialApi(const int timeOut = 0);
    ~OAISocialApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    * @param[in]  phone_number QString [required]
    */
    virtual void phoneCode(const QString &first_name, const QString &last_name, const QString &phone_number);

    /**
    * @param[in]  oai_batch_first_last_name_phone_number_in OAIBatchFirstLastNamePhoneNumberIn [optional]
    */
    virtual void phoneCodeBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNamePhoneNumberIn> &oai_batch_first_last_name_phone_number_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNamePhoneNumberIn>());

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    * @param[in]  phone_number QString [required]
    * @param[in]  country_iso2 QString [required]
    */
    virtual void phoneCodeGeo(const QString &first_name, const QString &last_name, const QString &phone_number, const QString &country_iso2);

    /**
    * @param[in]  oai_batch_first_last_name_phone_number_geo_in OAIBatchFirstLastNamePhoneNumberGeoIn [optional]
    */
    virtual void phoneCodeGeoBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNamePhoneNumberGeoIn> &oai_batch_first_last_name_phone_number_geo_in = ::OpenAPI::OptionalParam<OAIBatchFirstLastNamePhoneNumberGeoIn>());

    /**
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    * @param[in]  phone_number QString [required]
    * @param[in]  phone_number_e164 QString [required]
    * @param[in]  country_iso2 QString [required]
    */
    virtual void phoneCodeGeoFeedbackLoop(const QString &first_name, const QString &last_name, const QString &phone_number, const QString &phone_number_e164, const QString &country_iso2);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void phoneCodeCallback(OAIHttpRequestWorker *worker);
    void phoneCodeBatchCallback(OAIHttpRequestWorker *worker);
    void phoneCodeGeoCallback(OAIHttpRequestWorker *worker);
    void phoneCodeGeoBatchCallback(OAIHttpRequestWorker *worker);
    void phoneCodeGeoFeedbackLoopCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void phoneCodeSignal(OAIFirstLastNamePhoneCodedOut summary);
    void phoneCodeBatchSignal(OAIBatchFirstLastNamePhoneCodedOut summary);
    void phoneCodeGeoSignal(OAIFirstLastNamePhoneCodedOut summary);
    void phoneCodeGeoBatchSignal(OAIBatchFirstLastNamePhoneCodedOut summary);
    void phoneCodeGeoFeedbackLoopSignal(OAIFirstLastNamePhoneCodedOut summary);


    void phoneCodeSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNamePhoneCodedOut summary);
    void phoneCodeBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNamePhoneCodedOut summary);
    void phoneCodeGeoSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNamePhoneCodedOut summary);
    void phoneCodeGeoBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchFirstLastNamePhoneCodedOut summary);
    void phoneCodeGeoFeedbackLoopSignalFull(OAIHttpRequestWorker *worker, OAIFirstLastNamePhoneCodedOut summary);

    Q_DECL_DEPRECATED_X("Use phoneCodeSignalError() instead")
    void phoneCodeSignalE(OAIFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeSignalError(OAIFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneCodeBatchSignalError() instead")
    void phoneCodeBatchSignalE(OAIBatchFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeBatchSignalError(OAIBatchFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneCodeGeoSignalError() instead")
    void phoneCodeGeoSignalE(OAIFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeGeoSignalError(OAIFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneCodeGeoBatchSignalError() instead")
    void phoneCodeGeoBatchSignalE(OAIBatchFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeGeoBatchSignalError(OAIBatchFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneCodeGeoFeedbackLoopSignalError() instead")
    void phoneCodeGeoFeedbackLoopSignalE(OAIFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeGeoFeedbackLoopSignalError(OAIFirstLastNamePhoneCodedOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use phoneCodeSignalErrorFull() instead")
    void phoneCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneCodeBatchSignalErrorFull() instead")
    void phoneCodeBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneCodeGeoSignalErrorFull() instead")
    void phoneCodeGeoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeGeoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneCodeGeoBatchSignalErrorFull() instead")
    void phoneCodeGeoBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeGeoBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneCodeGeoFeedbackLoopSignalErrorFull() instead")
    void phoneCodeGeoFeedbackLoopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneCodeGeoFeedbackLoopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
