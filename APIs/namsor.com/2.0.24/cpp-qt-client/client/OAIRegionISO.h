/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegionISO.h
 *
 * List of countries and regions
 */

#ifndef OAIRegionISO_H
#define OAIRegionISO_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRegionISO : public OAIObject {
public:
    OAIRegionISO();
    OAIRegionISO(QString json);
    ~OAIRegionISO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountryFips() const;
    void setCountryFips(const QString &country_fips);
    bool is_country_fips_Set() const;
    bool is_country_fips_Valid() const;

    QString getCountryIso2() const;
    void setCountryIso2(const QString &country_iso2);
    bool is_country_iso2_Set() const;
    bool is_country_iso2_Valid() const;

    QString getCountryIso3() const;
    void setCountryIso3(const QString &country_iso3);
    bool is_country_iso3_Set() const;
    bool is_country_iso3_Valid() const;

    QString getCountryName() const;
    void setCountryName(const QString &country_name);
    bool is_country_name_Set() const;
    bool is_country_name_Valid() const;

    QString getCountryNumCode() const;
    void setCountryNumCode(const QString &country_num_code);
    bool is_country_num_code_Set() const;
    bool is_country_num_code_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getSubregion() const;
    void setSubregion(const QString &subregion);
    bool is_subregion_Set() const;
    bool is_subregion_Valid() const;

    QString getTopregion() const;
    void setTopregion(const QString &topregion);
    bool is_topregion_Set() const;
    bool is_topregion_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country_fips;
    bool m_country_fips_isSet;
    bool m_country_fips_isValid;

    QString m_country_iso2;
    bool m_country_iso2_isSet;
    bool m_country_iso2_isValid;

    QString m_country_iso3;
    bool m_country_iso3_isSet;
    bool m_country_iso3_isValid;

    QString m_country_name;
    bool m_country_name_isSet;
    bool m_country_name_isValid;

    QString m_country_num_code;
    bool m_country_num_code_isSet;
    bool m_country_num_code_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_subregion;
    bool m_subregion_isSet;
    bool m_subregion_isValid;

    QString m_topregion;
    bool m_topregion_isSet;
    bool m_topregion_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegionISO)

#endif // OAIRegionISO_H
