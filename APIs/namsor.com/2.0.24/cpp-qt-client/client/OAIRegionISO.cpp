/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionISO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionISO::OAIRegionISO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionISO::OAIRegionISO() {
    this->initializeModel();
}

OAIRegionISO::~OAIRegionISO() {}

void OAIRegionISO::initializeModel() {

    m_country_fips_isSet = false;
    m_country_fips_isValid = false;

    m_country_iso2_isSet = false;
    m_country_iso2_isValid = false;

    m_country_iso3_isSet = false;
    m_country_iso3_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_country_num_code_isSet = false;
    m_country_num_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_subregion_isSet = false;
    m_subregion_isValid = false;

    m_topregion_isSet = false;
    m_topregion_isValid = false;
}

void OAIRegionISO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionISO::fromJsonObject(QJsonObject json) {

    m_country_fips_isValid = ::OpenAPI::fromJsonValue(m_country_fips, json[QString("countryFIPS")]);
    m_country_fips_isSet = !json[QString("countryFIPS")].isNull() && m_country_fips_isValid;

    m_country_iso2_isValid = ::OpenAPI::fromJsonValue(m_country_iso2, json[QString("countryISO2")]);
    m_country_iso2_isSet = !json[QString("countryISO2")].isNull() && m_country_iso2_isValid;

    m_country_iso3_isValid = ::OpenAPI::fromJsonValue(m_country_iso3, json[QString("countryISO3")]);
    m_country_iso3_isSet = !json[QString("countryISO3")].isNull() && m_country_iso3_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("countryName")]);
    m_country_name_isSet = !json[QString("countryName")].isNull() && m_country_name_isValid;

    m_country_num_code_isValid = ::OpenAPI::fromJsonValue(m_country_num_code, json[QString("countryNumCode")]);
    m_country_num_code_isSet = !json[QString("countryNumCode")].isNull() && m_country_num_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_subregion_isValid = ::OpenAPI::fromJsonValue(m_subregion, json[QString("subregion")]);
    m_subregion_isSet = !json[QString("subregion")].isNull() && m_subregion_isValid;

    m_topregion_isValid = ::OpenAPI::fromJsonValue(m_topregion, json[QString("topregion")]);
    m_topregion_isSet = !json[QString("topregion")].isNull() && m_topregion_isValid;
}

QString OAIRegionISO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionISO::asJsonObject() const {
    QJsonObject obj;
    if (m_country_fips_isSet) {
        obj.insert(QString("countryFIPS"), ::OpenAPI::toJsonValue(m_country_fips));
    }
    if (m_country_iso2_isSet) {
        obj.insert(QString("countryISO2"), ::OpenAPI::toJsonValue(m_country_iso2));
    }
    if (m_country_iso3_isSet) {
        obj.insert(QString("countryISO3"), ::OpenAPI::toJsonValue(m_country_iso3));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("countryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_country_num_code_isSet) {
        obj.insert(QString("countryNumCode"), ::OpenAPI::toJsonValue(m_country_num_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_subregion_isSet) {
        obj.insert(QString("subregion"), ::OpenAPI::toJsonValue(m_subregion));
    }
    if (m_topregion_isSet) {
        obj.insert(QString("topregion"), ::OpenAPI::toJsonValue(m_topregion));
    }
    return obj;
}

QString OAIRegionISO::getCountryFips() const {
    return m_country_fips;
}
void OAIRegionISO::setCountryFips(const QString &country_fips) {
    m_country_fips = country_fips;
    m_country_fips_isSet = true;
}

bool OAIRegionISO::is_country_fips_Set() const{
    return m_country_fips_isSet;
}

bool OAIRegionISO::is_country_fips_Valid() const{
    return m_country_fips_isValid;
}

QString OAIRegionISO::getCountryIso2() const {
    return m_country_iso2;
}
void OAIRegionISO::setCountryIso2(const QString &country_iso2) {
    m_country_iso2 = country_iso2;
    m_country_iso2_isSet = true;
}

bool OAIRegionISO::is_country_iso2_Set() const{
    return m_country_iso2_isSet;
}

bool OAIRegionISO::is_country_iso2_Valid() const{
    return m_country_iso2_isValid;
}

QString OAIRegionISO::getCountryIso3() const {
    return m_country_iso3;
}
void OAIRegionISO::setCountryIso3(const QString &country_iso3) {
    m_country_iso3 = country_iso3;
    m_country_iso3_isSet = true;
}

bool OAIRegionISO::is_country_iso3_Set() const{
    return m_country_iso3_isSet;
}

bool OAIRegionISO::is_country_iso3_Valid() const{
    return m_country_iso3_isValid;
}

QString OAIRegionISO::getCountryName() const {
    return m_country_name;
}
void OAIRegionISO::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIRegionISO::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIRegionISO::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIRegionISO::getCountryNumCode() const {
    return m_country_num_code;
}
void OAIRegionISO::setCountryNumCode(const QString &country_num_code) {
    m_country_num_code = country_num_code;
    m_country_num_code_isSet = true;
}

bool OAIRegionISO::is_country_num_code_Set() const{
    return m_country_num_code_isSet;
}

bool OAIRegionISO::is_country_num_code_Valid() const{
    return m_country_num_code_isValid;
}

QString OAIRegionISO::getRegion() const {
    return m_region;
}
void OAIRegionISO::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIRegionISO::is_region_Set() const{
    return m_region_isSet;
}

bool OAIRegionISO::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIRegionISO::getSubregion() const {
    return m_subregion;
}
void OAIRegionISO::setSubregion(const QString &subregion) {
    m_subregion = subregion;
    m_subregion_isSet = true;
}

bool OAIRegionISO::is_subregion_Set() const{
    return m_subregion_isSet;
}

bool OAIRegionISO::is_subregion_Valid() const{
    return m_subregion_isValid;
}

QString OAIRegionISO::getTopregion() const {
    return m_topregion;
}
void OAIRegionISO::setTopregion(const QString &topregion) {
    m_topregion = topregion;
    m_topregion_isSet = true;
}

bool OAIRegionISO::is_topregion_Set() const{
    return m_topregion_isSet;
}

bool OAIRegionISO::is_topregion_Valid() const{
    return m_topregion_isValid;
}

bool OAIRegionISO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_fips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_iso3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_num_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subregion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topregion_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionISO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
