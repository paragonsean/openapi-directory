/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIClassifierOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIClassifierOut::OAIAPIClassifierOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIClassifierOut::OAIAPIClassifierOut() {
    this->initializeModel();
}

OAIAPIClassifierOut::~OAIAPIClassifierOut() {}

void OAIAPIClassifierOut::initializeModel() {

    m_classifier_name_isSet = false;
    m_classifier_name_isValid = false;

    m_learning_isSet = false;
    m_learning_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_serving_isSet = false;
    m_serving_isValid = false;

    m_shutting_down_isSet = false;
    m_shutting_down_isValid = false;
}

void OAIAPIClassifierOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIClassifierOut::fromJsonObject(QJsonObject json) {

    m_classifier_name_isValid = ::OpenAPI::fromJsonValue(m_classifier_name, json[QString("classifierName")]);
    m_classifier_name_isSet = !json[QString("classifierName")].isNull() && m_classifier_name_isValid;

    m_learning_isValid = ::OpenAPI::fromJsonValue(m_learning, json[QString("learning")]);
    m_learning_isSet = !json[QString("learning")].isNull() && m_learning_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_serving_isValid = ::OpenAPI::fromJsonValue(m_serving, json[QString("serving")]);
    m_serving_isSet = !json[QString("serving")].isNull() && m_serving_isValid;

    m_shutting_down_isValid = ::OpenAPI::fromJsonValue(m_shutting_down, json[QString("shuttingDown")]);
    m_shutting_down_isSet = !json[QString("shuttingDown")].isNull() && m_shutting_down_isValid;
}

QString OAIAPIClassifierOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIClassifierOut::asJsonObject() const {
    QJsonObject obj;
    if (m_classifier_name_isSet) {
        obj.insert(QString("classifierName"), ::OpenAPI::toJsonValue(m_classifier_name));
    }
    if (m_learning_isSet) {
        obj.insert(QString("learning"), ::OpenAPI::toJsonValue(m_learning));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_serving_isSet) {
        obj.insert(QString("serving"), ::OpenAPI::toJsonValue(m_serving));
    }
    if (m_shutting_down_isSet) {
        obj.insert(QString("shuttingDown"), ::OpenAPI::toJsonValue(m_shutting_down));
    }
    return obj;
}

QString OAIAPIClassifierOut::getClassifierName() const {
    return m_classifier_name;
}
void OAIAPIClassifierOut::setClassifierName(const QString &classifier_name) {
    m_classifier_name = classifier_name;
    m_classifier_name_isSet = true;
}

bool OAIAPIClassifierOut::is_classifier_name_Set() const{
    return m_classifier_name_isSet;
}

bool OAIAPIClassifierOut::is_classifier_name_Valid() const{
    return m_classifier_name_isValid;
}

bool OAIAPIClassifierOut::isLearning() const {
    return m_learning;
}
void OAIAPIClassifierOut::setLearning(const bool &learning) {
    m_learning = learning;
    m_learning_isSet = true;
}

bool OAIAPIClassifierOut::is_learning_Set() const{
    return m_learning_isSet;
}

bool OAIAPIClassifierOut::is_learning_Valid() const{
    return m_learning_isValid;
}

bool OAIAPIClassifierOut::isProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIAPIClassifierOut::setProbabilityCalibrated(const bool &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIAPIClassifierOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIAPIClassifierOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

bool OAIAPIClassifierOut::isServing() const {
    return m_serving;
}
void OAIAPIClassifierOut::setServing(const bool &serving) {
    m_serving = serving;
    m_serving_isSet = true;
}

bool OAIAPIClassifierOut::is_serving_Set() const{
    return m_serving_isSet;
}

bool OAIAPIClassifierOut::is_serving_Valid() const{
    return m_serving_isValid;
}

bool OAIAPIClassifierOut::isShuttingDown() const {
    return m_shutting_down;
}
void OAIAPIClassifierOut::setShuttingDown(const bool &shutting_down) {
    m_shutting_down = shutting_down;
    m_shutting_down_isSet = true;
}

bool OAIAPIClassifierOut::is_shutting_down_Set() const{
    return m_shutting_down_isSet;
}

bool OAIAPIClassifierOut::is_shutting_down_Valid() const{
    return m_shutting_down_isValid;
}

bool OAIAPIClassifierOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classifier_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shutting_down_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIClassifierOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
