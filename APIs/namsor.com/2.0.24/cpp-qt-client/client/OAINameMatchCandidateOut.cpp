/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINameMatchCandidateOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINameMatchCandidateOut::OAINameMatchCandidateOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINameMatchCandidateOut::OAINameMatchCandidateOut() {
    this->initializeModel();
}

OAINameMatchCandidateOut::~OAINameMatchCandidateOut() {}

void OAINameMatchCandidateOut::initializeModel() {

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_pred_score_family_name_isSet = false;
    m_pred_score_family_name_isValid = false;

    m_pred_score_given_name_isSet = false;
    m_pred_score_given_name_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;
}

void OAINameMatchCandidateOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINameMatchCandidateOut::fromJsonObject(QJsonObject json) {

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidateName")]);
    m_candidate_name_isSet = !json[QString("candidateName")].isNull() && m_candidate_name_isValid;

    m_pred_score_family_name_isValid = ::OpenAPI::fromJsonValue(m_pred_score_family_name, json[QString("predScoreFamilyName")]);
    m_pred_score_family_name_isSet = !json[QString("predScoreFamilyName")].isNull() && m_pred_score_family_name_isValid;

    m_pred_score_given_name_isValid = ::OpenAPI::fromJsonValue(m_pred_score_given_name, json[QString("predScoreGivenName")]);
    m_pred_score_given_name_isSet = !json[QString("predScoreGivenName")].isNull() && m_pred_score_given_name_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;
}

QString OAINameMatchCandidateOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINameMatchCandidateOut::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidateName"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_pred_score_family_name_isSet) {
        obj.insert(QString("predScoreFamilyName"), ::OpenAPI::toJsonValue(m_pred_score_family_name));
    }
    if (m_pred_score_given_name_isSet) {
        obj.insert(QString("predScoreGivenName"), ::OpenAPI::toJsonValue(m_pred_score_given_name));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    return obj;
}

QString OAINameMatchCandidateOut::getCandidateName() const {
    return m_candidate_name;
}
void OAINameMatchCandidateOut::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAINameMatchCandidateOut::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAINameMatchCandidateOut::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

double OAINameMatchCandidateOut::getPredScoreFamilyName() const {
    return m_pred_score_family_name;
}
void OAINameMatchCandidateOut::setPredScoreFamilyName(const double &pred_score_family_name) {
    m_pred_score_family_name = pred_score_family_name;
    m_pred_score_family_name_isSet = true;
}

bool OAINameMatchCandidateOut::is_pred_score_family_name_Set() const{
    return m_pred_score_family_name_isSet;
}

bool OAINameMatchCandidateOut::is_pred_score_family_name_Valid() const{
    return m_pred_score_family_name_isValid;
}

double OAINameMatchCandidateOut::getPredScoreGivenName() const {
    return m_pred_score_given_name;
}
void OAINameMatchCandidateOut::setPredScoreGivenName(const double &pred_score_given_name) {
    m_pred_score_given_name = pred_score_given_name;
    m_pred_score_given_name_isSet = true;
}

bool OAINameMatchCandidateOut::is_pred_score_given_name_Set() const{
    return m_pred_score_given_name_isSet;
}

bool OAINameMatchCandidateOut::is_pred_score_given_name_Valid() const{
    return m_pred_score_given_name_isValid;
}

double OAINameMatchCandidateOut::getProbability() const {
    return m_probability;
}
void OAINameMatchCandidateOut::setProbability(const double &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAINameMatchCandidateOut::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAINameMatchCandidateOut::is_probability_Valid() const{
    return m_probability_isValid;
}

bool OAINameMatchCandidateOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pred_score_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pred_score_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINameMatchCandidateOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
