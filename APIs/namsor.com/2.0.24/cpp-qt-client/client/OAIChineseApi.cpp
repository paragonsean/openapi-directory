/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChineseApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIChineseApi::OAIChineseApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIChineseApi::~OAIChineseApi() {
}

void OAIChineseApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://v2.namsor.com/NamSorAPIv2"),
    "namsor_v2",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("chineseNameCandidates", defaultConf);
    _serverIndices.insert("chineseNameCandidates", 0);
    _serverConfigs.insert("chineseNameCandidatesBatch", defaultConf);
    _serverIndices.insert("chineseNameCandidatesBatch", 0);
    _serverConfigs.insert("chineseNameCandidatesGenderBatch", defaultConf);
    _serverIndices.insert("chineseNameCandidatesGenderBatch", 0);
    _serverConfigs.insert("chineseNameGenderCandidates", defaultConf);
    _serverIndices.insert("chineseNameGenderCandidates", 0);
    _serverConfigs.insert("chineseNameMatch", defaultConf);
    _serverIndices.insert("chineseNameMatch", 0);
    _serverConfigs.insert("chineseNameMatchBatch", defaultConf);
    _serverIndices.insert("chineseNameMatchBatch", 0);
    _serverConfigs.insert("genderChineseName", defaultConf);
    _serverIndices.insert("genderChineseName", 0);
    _serverConfigs.insert("genderChineseNameBatch", defaultConf);
    _serverIndices.insert("genderChineseNameBatch", 0);
    _serverConfigs.insert("genderChineseNamePinyin", defaultConf);
    _serverIndices.insert("genderChineseNamePinyin", 0);
    _serverConfigs.insert("genderChineseNamePinyinBatch", defaultConf);
    _serverIndices.insert("genderChineseNamePinyinBatch", 0);
    _serverConfigs.insert("parseChineseName", defaultConf);
    _serverIndices.insert("parseChineseName", 0);
    _serverConfigs.insert("parseChineseNameBatch", defaultConf);
    _serverIndices.insert("parseChineseNameBatch", 0);
    _serverConfigs.insert("pinyinChineseName", defaultConf);
    _serverIndices.insert("pinyinChineseName", 0);
    _serverConfigs.insert("pinyinChineseNameBatch", defaultConf);
    _serverIndices.insert("pinyinChineseNameBatch", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIChineseApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIChineseApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIChineseApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIChineseApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIChineseApi::setUsername(const QString &username) {
    _username = username;
}

void OAIChineseApi::setPassword(const QString &password) {
    _password = password;
}


void OAIChineseApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIChineseApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIChineseApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIChineseApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIChineseApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIChineseApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIChineseApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIChineseApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIChineseApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIChineseApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIChineseApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIChineseApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIChineseApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIChineseApi::chineseNameCandidates(const QString &chinese_surname_latin, const QString &chinese_given_name_latin) {
    QString fullPath = QString(_serverConfigs["chineseNameCandidates"][_serverIndices.value("chineseNameCandidates")].URL()+"/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString chinese_surname_latinPathParam("{");
        chinese_surname_latinPathParam.append("chineseSurnameLatin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseSurnameLatin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseSurnameLatin"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_surname_latinPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_surname_latin)));
    }
    
    {
        QString chinese_given_name_latinPathParam("{");
        chinese_given_name_latinPathParam.append("chineseGivenNameLatin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseGivenNameLatin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseGivenNameLatin"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_given_name_latinPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_given_name_latin)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::chineseNameCandidatesCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::chineseNameCandidatesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINameMatchCandidatesOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chineseNameCandidatesSignal(output);
        Q_EMIT chineseNameCandidatesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chineseNameCandidatesSignalE(output, error_type, error_str);
        Q_EMIT chineseNameCandidatesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chineseNameCandidatesSignalError(output, error_type, error_str);
        Q_EMIT chineseNameCandidatesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::chineseNameCandidatesBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in) {
    QString fullPath = QString(_serverConfigs["chineseNameCandidatesBatch"][_serverIndices.value("chineseNameCandidatesBatch")].URL()+"/api2/json/chineseNameCandidatesBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::chineseNameCandidatesBatchCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::chineseNameCandidatesBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchNameMatchCandidatesOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chineseNameCandidatesBatchSignal(output);
        Q_EMIT chineseNameCandidatesBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chineseNameCandidatesBatchSignalE(output, error_type, error_str);
        Q_EMIT chineseNameCandidatesBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chineseNameCandidatesBatchSignalError(output, error_type, error_str);
        Q_EMIT chineseNameCandidatesBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::chineseNameCandidatesGenderBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameGenderIn> &oai_batch_first_last_name_gender_in) {
    QString fullPath = QString(_serverConfigs["chineseNameCandidatesGenderBatch"][_serverIndices.value("chineseNameCandidatesGenderBatch")].URL()+"/api2/json/chineseNameCandidatesGenderBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_gender_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_gender_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::chineseNameCandidatesGenderBatchCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::chineseNameCandidatesGenderBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchNameMatchCandidatesOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chineseNameCandidatesGenderBatchSignal(output);
        Q_EMIT chineseNameCandidatesGenderBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chineseNameCandidatesGenderBatchSignalE(output, error_type, error_str);
        Q_EMIT chineseNameCandidatesGenderBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chineseNameCandidatesGenderBatchSignalError(output, error_type, error_str);
        Q_EMIT chineseNameCandidatesGenderBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::chineseNameGenderCandidates(const QString &chinese_surname_latin, const QString &chinese_given_name_latin, const QString &known_gender) {
    QString fullPath = QString(_serverConfigs["chineseNameGenderCandidates"][_serverIndices.value("chineseNameGenderCandidates")].URL()+"/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString chinese_surname_latinPathParam("{");
        chinese_surname_latinPathParam.append("chineseSurnameLatin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseSurnameLatin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseSurnameLatin"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_surname_latinPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_surname_latin)));
    }
    
    {
        QString chinese_given_name_latinPathParam("{");
        chinese_given_name_latinPathParam.append("chineseGivenNameLatin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseGivenNameLatin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseGivenNameLatin"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_given_name_latinPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_given_name_latin)));
    }
    
    {
        QString known_genderPathParam("{");
        known_genderPathParam.append("knownGender").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "knownGender", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"knownGender"+pathSuffix : pathPrefix;
        fullPath.replace(known_genderPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(known_gender)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::chineseNameGenderCandidatesCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::chineseNameGenderCandidatesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINameMatchCandidatesOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chineseNameGenderCandidatesSignal(output);
        Q_EMIT chineseNameGenderCandidatesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chineseNameGenderCandidatesSignalE(output, error_type, error_str);
        Q_EMIT chineseNameGenderCandidatesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chineseNameGenderCandidatesSignalError(output, error_type, error_str);
        Q_EMIT chineseNameGenderCandidatesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::chineseNameMatch(const QString &chinese_surname_latin, const QString &chinese_given_name_latin, const QString &chinese_name) {
    QString fullPath = QString(_serverConfigs["chineseNameMatch"][_serverIndices.value("chineseNameMatch")].URL()+"/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString chinese_surname_latinPathParam("{");
        chinese_surname_latinPathParam.append("chineseSurnameLatin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseSurnameLatin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseSurnameLatin"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_surname_latinPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_surname_latin)));
    }
    
    {
        QString chinese_given_name_latinPathParam("{");
        chinese_given_name_latinPathParam.append("chineseGivenNameLatin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseGivenNameLatin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseGivenNameLatin"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_given_name_latinPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_given_name_latin)));
    }
    
    {
        QString chinese_namePathParam("{");
        chinese_namePathParam.append("chineseName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseName"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::chineseNameMatchCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::chineseNameMatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINameMatchedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chineseNameMatchSignal(output);
        Q_EMIT chineseNameMatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chineseNameMatchSignalE(output, error_type, error_str);
        Q_EMIT chineseNameMatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chineseNameMatchSignalError(output, error_type, error_str);
        Q_EMIT chineseNameMatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::chineseNameMatchBatch(const ::OpenAPI::OptionalParam<OAIBatchMatchPersonalFirstLastNameIn> &oai_batch_match_personal_first_last_name_in) {
    QString fullPath = QString(_serverConfigs["chineseNameMatchBatch"][_serverIndices.value("chineseNameMatchBatch")].URL()+"/api2/json/chineseNameMatchBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_match_personal_first_last_name_in.hasValue()){

        
        QByteArray output = oai_batch_match_personal_first_last_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::chineseNameMatchBatchCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::chineseNameMatchBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchNameMatchedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chineseNameMatchBatchSignal(output);
        Q_EMIT chineseNameMatchBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chineseNameMatchBatchSignalE(output, error_type, error_str);
        Q_EMIT chineseNameMatchBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chineseNameMatchBatchSignalError(output, error_type, error_str);
        Q_EMIT chineseNameMatchBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::genderChineseName(const QString &chinese_name) {
    QString fullPath = QString(_serverConfigs["genderChineseName"][_serverIndices.value("genderChineseName")].URL()+"/api2/json/genderChineseName/{chineseName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString chinese_namePathParam("{");
        chinese_namePathParam.append("chineseName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseName"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::genderChineseNameCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::genderChineseNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderChineseNameSignal(output);
        Q_EMIT genderChineseNameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderChineseNameSignalE(output, error_type, error_str);
        Q_EMIT genderChineseNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderChineseNameSignalError(output, error_type, error_str);
        Q_EMIT genderChineseNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::genderChineseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in) {
    QString fullPath = QString(_serverConfigs["genderChineseNameBatch"][_serverIndices.value("genderChineseNameBatch")].URL()+"/api2/json/genderChineseNameBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::genderChineseNameBatchCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::genderChineseNameBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderChineseNameBatchSignal(output);
        Q_EMIT genderChineseNameBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderChineseNameBatchSignalE(output, error_type, error_str);
        Q_EMIT genderChineseNameBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderChineseNameBatchSignalError(output, error_type, error_str);
        Q_EMIT genderChineseNameBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::genderChineseNamePinyin(const QString &chinese_surname_latin, const QString &chinese_given_name_latin) {
    QString fullPath = QString(_serverConfigs["genderChineseNamePinyin"][_serverIndices.value("genderChineseNamePinyin")].URL()+"/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString chinese_surname_latinPathParam("{");
        chinese_surname_latinPathParam.append("chineseSurnameLatin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseSurnameLatin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseSurnameLatin"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_surname_latinPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_surname_latin)));
    }
    
    {
        QString chinese_given_name_latinPathParam("{");
        chinese_given_name_latinPathParam.append("chineseGivenNameLatin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseGivenNameLatin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseGivenNameLatin"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_given_name_latinPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_given_name_latin)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::genderChineseNamePinyinCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::genderChineseNamePinyinCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFirstLastNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderChineseNamePinyinSignal(output);
        Q_EMIT genderChineseNamePinyinSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderChineseNamePinyinSignalE(output, error_type, error_str);
        Q_EMIT genderChineseNamePinyinSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderChineseNamePinyinSignalError(output, error_type, error_str);
        Q_EMIT genderChineseNamePinyinSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::genderChineseNamePinyinBatch(const ::OpenAPI::OptionalParam<OAIBatchFirstLastNameIn> &oai_batch_first_last_name_in) {
    QString fullPath = QString(_serverConfigs["genderChineseNamePinyinBatch"][_serverIndices.value("genderChineseNamePinyinBatch")].URL()+"/api2/json/genderChineseNamePinyinBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_first_last_name_in.hasValue()){

        
        QByteArray output = oai_batch_first_last_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::genderChineseNamePinyinBatchCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::genderChineseNamePinyinBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchFirstLastNameGenderedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT genderChineseNamePinyinBatchSignal(output);
        Q_EMIT genderChineseNamePinyinBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT genderChineseNamePinyinBatchSignalE(output, error_type, error_str);
        Q_EMIT genderChineseNamePinyinBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT genderChineseNamePinyinBatchSignalError(output, error_type, error_str);
        Q_EMIT genderChineseNamePinyinBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::parseChineseName(const QString &chinese_name) {
    QString fullPath = QString(_serverConfigs["parseChineseName"][_serverIndices.value("parseChineseName")].URL()+"/api2/json/parseChineseName/{chineseName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString chinese_namePathParam("{");
        chinese_namePathParam.append("chineseName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseName"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::parseChineseNameCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::parseChineseNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameParsedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT parseChineseNameSignal(output);
        Q_EMIT parseChineseNameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT parseChineseNameSignalE(output, error_type, error_str);
        Q_EMIT parseChineseNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT parseChineseNameSignalError(output, error_type, error_str);
        Q_EMIT parseChineseNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::parseChineseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in) {
    QString fullPath = QString(_serverConfigs["parseChineseNameBatch"][_serverIndices.value("parseChineseNameBatch")].URL()+"/api2/json/parseChineseNameBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::parseChineseNameBatchCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::parseChineseNameBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameParsedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT parseChineseNameBatchSignal(output);
        Q_EMIT parseChineseNameBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT parseChineseNameBatchSignalE(output, error_type, error_str);
        Q_EMIT parseChineseNameBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT parseChineseNameBatchSignalError(output, error_type, error_str);
        Q_EMIT parseChineseNameBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::pinyinChineseName(const QString &chinese_name) {
    QString fullPath = QString(_serverConfigs["pinyinChineseName"][_serverIndices.value("pinyinChineseName")].URL()+"/api2/json/pinyinChineseName/{chineseName}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString chinese_namePathParam("{");
        chinese_namePathParam.append("chineseName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "chineseName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"chineseName"+pathSuffix : pathPrefix;
        fullPath.replace(chinese_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chinese_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::pinyinChineseNameCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::pinyinChineseNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonalNameParsedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pinyinChineseNameSignal(output);
        Q_EMIT pinyinChineseNameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pinyinChineseNameSignalE(output, error_type, error_str);
        Q_EMIT pinyinChineseNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pinyinChineseNameSignalError(output, error_type, error_str);
        Q_EMIT pinyinChineseNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::pinyinChineseNameBatch(const ::OpenAPI::OptionalParam<OAIBatchPersonalNameIn> &oai_batch_personal_name_in) {
    QString fullPath = QString(_serverConfigs["pinyinChineseNameBatch"][_serverIndices.value("pinyinChineseNameBatch")].URL()+"/api2/json/pinyinChineseNameBatch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_batch_personal_name_in.hasValue()){

        
        QByteArray output = oai_batch_personal_name_in.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChineseApi::pinyinChineseNameBatchCallback);
    connect(this, &OAIChineseApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChineseApi::pinyinChineseNameBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBatchPersonalNameParsedOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pinyinChineseNameBatchSignal(output);
        Q_EMIT pinyinChineseNameBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pinyinChineseNameBatchSignalE(output, error_type, error_str);
        Q_EMIT pinyinChineseNameBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pinyinChineseNameBatchSignalError(output, error_type, error_str);
        Q_EMIT pinyinChineseNameBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChineseApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
