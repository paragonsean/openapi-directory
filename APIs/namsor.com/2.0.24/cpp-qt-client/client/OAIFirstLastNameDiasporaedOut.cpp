/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstLastNameDiasporaedOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstLastNameDiasporaedOut::OAIFirstLastNameDiasporaedOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstLastNameDiasporaedOut::OAIFirstLastNameDiasporaedOut() {
    this->initializeModel();
}

OAIFirstLastNameDiasporaedOut::~OAIFirstLastNameDiasporaedOut() {}

void OAIFirstLastNameDiasporaedOut::initializeModel() {

    m_country_iso2_isSet = false;
    m_country_iso2_isValid = false;

    m_ethnicities_top_isSet = false;
    m_ethnicities_top_isValid = false;

    m_ethnicity_isSet = false;
    m_ethnicity_isValid = false;

    m_ethnicity_alt_isSet = false;
    m_ethnicity_alt_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_lifted_isSet = false;
    m_lifted_isValid = false;

    m_probability_alt_calibrated_isSet = false;
    m_probability_alt_calibrated_isValid = false;

    m_probability_calibrated_isSet = false;
    m_probability_calibrated_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIFirstLastNameDiasporaedOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstLastNameDiasporaedOut::fromJsonObject(QJsonObject json) {

    m_country_iso2_isValid = ::OpenAPI::fromJsonValue(m_country_iso2, json[QString("countryIso2")]);
    m_country_iso2_isSet = !json[QString("countryIso2")].isNull() && m_country_iso2_isValid;

    m_ethnicities_top_isValid = ::OpenAPI::fromJsonValue(m_ethnicities_top, json[QString("ethnicitiesTop")]);
    m_ethnicities_top_isSet = !json[QString("ethnicitiesTop")].isNull() && m_ethnicities_top_isValid;

    m_ethnicity_isValid = ::OpenAPI::fromJsonValue(m_ethnicity, json[QString("ethnicity")]);
    m_ethnicity_isSet = !json[QString("ethnicity")].isNull() && m_ethnicity_isValid;

    m_ethnicity_alt_isValid = ::OpenAPI::fromJsonValue(m_ethnicity_alt, json[QString("ethnicityAlt")]);
    m_ethnicity_alt_isSet = !json[QString("ethnicityAlt")].isNull() && m_ethnicity_alt_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_lifted_isValid = ::OpenAPI::fromJsonValue(m_lifted, json[QString("lifted")]);
    m_lifted_isSet = !json[QString("lifted")].isNull() && m_lifted_isValid;

    m_probability_alt_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_alt_calibrated, json[QString("probabilityAltCalibrated")]);
    m_probability_alt_calibrated_isSet = !json[QString("probabilityAltCalibrated")].isNull() && m_probability_alt_calibrated_isValid;

    m_probability_calibrated_isValid = ::OpenAPI::fromJsonValue(m_probability_calibrated, json[QString("probabilityCalibrated")]);
    m_probability_calibrated_isSet = !json[QString("probabilityCalibrated")].isNull() && m_probability_calibrated_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIFirstLastNameDiasporaedOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstLastNameDiasporaedOut::asJsonObject() const {
    QJsonObject obj;
    if (m_country_iso2_isSet) {
        obj.insert(QString("countryIso2"), ::OpenAPI::toJsonValue(m_country_iso2));
    }
    if (m_ethnicities_top.size() > 0) {
        obj.insert(QString("ethnicitiesTop"), ::OpenAPI::toJsonValue(m_ethnicities_top));
    }
    if (m_ethnicity_isSet) {
        obj.insert(QString("ethnicity"), ::OpenAPI::toJsonValue(m_ethnicity));
    }
    if (m_ethnicity_alt_isSet) {
        obj.insert(QString("ethnicityAlt"), ::OpenAPI::toJsonValue(m_ethnicity_alt));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_lifted_isSet) {
        obj.insert(QString("lifted"), ::OpenAPI::toJsonValue(m_lifted));
    }
    if (m_probability_alt_calibrated_isSet) {
        obj.insert(QString("probabilityAltCalibrated"), ::OpenAPI::toJsonValue(m_probability_alt_calibrated));
    }
    if (m_probability_calibrated_isSet) {
        obj.insert(QString("probabilityCalibrated"), ::OpenAPI::toJsonValue(m_probability_calibrated));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIFirstLastNameDiasporaedOut::getCountryIso2() const {
    return m_country_iso2;
}
void OAIFirstLastNameDiasporaedOut::setCountryIso2(const QString &country_iso2) {
    m_country_iso2 = country_iso2;
    m_country_iso2_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_country_iso2_Set() const{
    return m_country_iso2_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_country_iso2_Valid() const{
    return m_country_iso2_isValid;
}

QList<QString> OAIFirstLastNameDiasporaedOut::getEthnicitiesTop() const {
    return m_ethnicities_top;
}
void OAIFirstLastNameDiasporaedOut::setEthnicitiesTop(const QList<QString> &ethnicities_top) {
    m_ethnicities_top = ethnicities_top;
    m_ethnicities_top_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_ethnicities_top_Set() const{
    return m_ethnicities_top_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_ethnicities_top_Valid() const{
    return m_ethnicities_top_isValid;
}

QString OAIFirstLastNameDiasporaedOut::getEthnicity() const {
    return m_ethnicity;
}
void OAIFirstLastNameDiasporaedOut::setEthnicity(const QString &ethnicity) {
    m_ethnicity = ethnicity;
    m_ethnicity_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_ethnicity_Set() const{
    return m_ethnicity_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_ethnicity_Valid() const{
    return m_ethnicity_isValid;
}

QString OAIFirstLastNameDiasporaedOut::getEthnicityAlt() const {
    return m_ethnicity_alt;
}
void OAIFirstLastNameDiasporaedOut::setEthnicityAlt(const QString &ethnicity_alt) {
    m_ethnicity_alt = ethnicity_alt;
    m_ethnicity_alt_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_ethnicity_alt_Set() const{
    return m_ethnicity_alt_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_ethnicity_alt_Valid() const{
    return m_ethnicity_alt_isValid;
}

QString OAIFirstLastNameDiasporaedOut::getFirstName() const {
    return m_first_name;
}
void OAIFirstLastNameDiasporaedOut::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIFirstLastNameDiasporaedOut::getId() const {
    return m_id;
}
void OAIFirstLastNameDiasporaedOut::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFirstLastNameDiasporaedOut::getLastName() const {
    return m_last_name;
}
void OAIFirstLastNameDiasporaedOut::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAIFirstLastNameDiasporaedOut::isLifted() const {
    return m_lifted;
}
void OAIFirstLastNameDiasporaedOut::setLifted(const bool &lifted) {
    m_lifted = lifted;
    m_lifted_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_lifted_Set() const{
    return m_lifted_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_lifted_Valid() const{
    return m_lifted_isValid;
}

double OAIFirstLastNameDiasporaedOut::getProbabilityAltCalibrated() const {
    return m_probability_alt_calibrated;
}
void OAIFirstLastNameDiasporaedOut::setProbabilityAltCalibrated(const double &probability_alt_calibrated) {
    m_probability_alt_calibrated = probability_alt_calibrated;
    m_probability_alt_calibrated_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_probability_alt_calibrated_Set() const{
    return m_probability_alt_calibrated_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_probability_alt_calibrated_Valid() const{
    return m_probability_alt_calibrated_isValid;
}

double OAIFirstLastNameDiasporaedOut::getProbabilityCalibrated() const {
    return m_probability_calibrated;
}
void OAIFirstLastNameDiasporaedOut::setProbabilityCalibrated(const double &probability_calibrated) {
    m_probability_calibrated = probability_calibrated;
    m_probability_calibrated_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_probability_calibrated_Set() const{
    return m_probability_calibrated_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_probability_calibrated_Valid() const{
    return m_probability_calibrated_isValid;
}

double OAIFirstLastNameDiasporaedOut::getScore() const {
    return m_score;
}
void OAIFirstLastNameDiasporaedOut::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_score_Set() const{
    return m_score_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIFirstLastNameDiasporaedOut::getScript() const {
    return m_script;
}
void OAIFirstLastNameDiasporaedOut::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIFirstLastNameDiasporaedOut::is_script_Set() const{
    return m_script_isSet;
}

bool OAIFirstLastNameDiasporaedOut::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIFirstLastNameDiasporaedOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethnicities_top.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethnicity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethnicity_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_alt_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_calibrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstLastNameDiasporaedOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
