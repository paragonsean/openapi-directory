/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPICounterV2Out.h
 *
 * Detailed usage as reported by the deduplicating API counter.
 */

#ifndef OAIAPICounterV2Out_H
#define OAIAPICounterV2Out_H

#include <QJsonObject>

#include "OAIAPIKeyOut.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAPIKeyOut;

class OAIAPICounterV2Out : public OAIObject {
public:
    OAIAPICounterV2Out();
    OAIAPICounterV2Out(QString json);
    ~OAIAPICounterV2Out() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAPIKeyOut getApiKey() const;
    void setApiKey(const OAIAPIKeyOut &api_key);
    bool is_api_key_Set() const;
    bool is_api_key_Valid() const;

    QString getApiService() const;
    void setApiService(const QString &api_service);
    bool is_api_service_Set() const;
    bool is_api_service_Valid() const;

    qint64 getCreatedDateTime() const;
    void setCreatedDateTime(const qint64 &created_date_time);
    bool is_created_date_time_Set() const;
    bool is_created_date_time_Valid() const;

    QString getHostAddress() const;
    void setHostAddress(const QString &host_address);
    bool is_host_address_Set() const;
    bool is_host_address_Valid() const;

    qint64 getLastFlushedDateTime() const;
    void setLastFlushedDateTime(const qint64 &last_flushed_date_time);
    bool is_last_flushed_date_time_Set() const;
    bool is_last_flushed_date_time_Valid() const;

    qint64 getLastUsedDateTime() const;
    void setLastUsedDateTime(const qint64 &last_used_date_time);
    bool is_last_used_date_time_Set() const;
    bool is_last_used_date_time_Valid() const;

    QMap<QString, qint64> getServiceFeaturesUsage() const;
    void setServiceFeaturesUsage(const QMap<QString, qint64> &service_features_usage);
    bool is_service_features_usage_Set() const;
    bool is_service_features_usage_Valid() const;

    qint64 getTotalUsage() const;
    void setTotalUsage(const qint64 &total_usage);
    bool is_total_usage_Set() const;
    bool is_total_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAPIKeyOut m_api_key;
    bool m_api_key_isSet;
    bool m_api_key_isValid;

    QString m_api_service;
    bool m_api_service_isSet;
    bool m_api_service_isValid;

    qint64 m_created_date_time;
    bool m_created_date_time_isSet;
    bool m_created_date_time_isValid;

    QString m_host_address;
    bool m_host_address_isSet;
    bool m_host_address_isValid;

    qint64 m_last_flushed_date_time;
    bool m_last_flushed_date_time_isSet;
    bool m_last_flushed_date_time_isValid;

    qint64 m_last_used_date_time;
    bool m_last_used_date_time_isSet;
    bool m_last_used_date_time_isValid;

    QMap<QString, qint64> m_service_features_usage;
    bool m_service_features_usage_isSet;
    bool m_service_features_usage_isValid;

    qint64 m_total_usage;
    bool m_total_usage_isSet;
    bool m_total_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPICounterV2Out)

#endif // OAIAPICounterV2Out_H
