/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPIPeriodUsageOut.h
 *
 * 
 */

#ifndef OAIAPIPeriodUsageOut_H
#define OAIAPIPeriodUsageOut_H

#include <QJsonObject>

#include "OAIAPIBillingPeriodUsageOut.h"
#include "OAIAPIPlanSubscriptionOut.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAPIBillingPeriodUsageOut;
class OAIAPIPlanSubscriptionOut;

class OAIAPIPeriodUsageOut : public OAIObject {
public:
    OAIAPIPeriodUsageOut();
    OAIAPIPeriodUsageOut(QString json);
    ~OAIAPIPeriodUsageOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAPIBillingPeriodUsageOut getBillingPeriod() const;
    void setBillingPeriod(const OAIAPIBillingPeriodUsageOut &billing_period);
    bool is_billing_period_Set() const;
    bool is_billing_period_Valid() const;

    QString getOverageCurrency() const;
    void setOverageCurrency(const QString &overage_currency);
    bool is_overage_currency_Set() const;
    bool is_overage_currency_Valid() const;

    double getOverageExclTax() const;
    void setOverageExclTax(const double &overage_excl_tax);
    bool is_overage_excl_tax_Set() const;
    bool is_overage_excl_tax_Valid() const;

    double getOverageInclTax() const;
    void setOverageInclTax(const double &overage_incl_tax);
    bool is_overage_incl_tax_Set() const;
    bool is_overage_incl_tax_Valid() const;

    qint64 getOverageQuantity() const;
    void setOverageQuantity(const qint64 &overage_quantity);
    bool is_overage_quantity_Set() const;
    bool is_overage_quantity_Valid() const;

    OAIAPIPlanSubscriptionOut getSubscription() const;
    void setSubscription(const OAIAPIPlanSubscriptionOut &subscription);
    bool is_subscription_Set() const;
    bool is_subscription_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAPIBillingPeriodUsageOut m_billing_period;
    bool m_billing_period_isSet;
    bool m_billing_period_isValid;

    QString m_overage_currency;
    bool m_overage_currency_isSet;
    bool m_overage_currency_isValid;

    double m_overage_excl_tax;
    bool m_overage_excl_tax_isSet;
    bool m_overage_excl_tax_isValid;

    double m_overage_incl_tax;
    bool m_overage_incl_tax_isSet;
    bool m_overage_incl_tax_isValid;

    qint64 m_overage_quantity;
    bool m_overage_quantity_isSet;
    bool m_overage_quantity_isValid;

    OAIAPIPlanSubscriptionOut m_subscription;
    bool m_subscription_isSet;
    bool m_subscription_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPIPeriodUsageOut)

#endif // OAIAPIPeriodUsageOut_H
