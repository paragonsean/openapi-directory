/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPersonalNameReligionedOut.h
 *
 * religious-coded names
 */

#ifndef OAIPersonalNameReligionedOut_H
#define OAIPersonalNameReligionedOut_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPersonalNameReligionedOut : public OAIObject {
public:
    OAIPersonalNameReligionedOut();
    OAIPersonalNameReligionedOut(QString json);
    ~OAIPersonalNameReligionedOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getProbabilityAltCalibrated() const;
    void setProbabilityAltCalibrated(const double &probability_alt_calibrated);
    bool is_probability_alt_calibrated_Set() const;
    bool is_probability_alt_calibrated_Valid() const;

    double getProbabilityCalibrated() const;
    void setProbabilityCalibrated(const double &probability_calibrated);
    bool is_probability_calibrated_Set() const;
    bool is_probability_calibrated_Valid() const;

    QString getReligion() const;
    void setReligion(const QString &religion);
    bool is_religion_Set() const;
    bool is_religion_Valid() const;

    QString getReligionAlt() const;
    void setReligionAlt(const QString &religion_alt);
    bool is_religion_alt_Set() const;
    bool is_religion_alt_Valid() const;

    QList<QString> getReligionsTop() const;
    void setReligionsTop(const QList<QString> &religions_top);
    bool is_religions_top_Set() const;
    bool is_religions_top_Valid() const;

    double getScore() const;
    void setScore(const double &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_probability_alt_calibrated;
    bool m_probability_alt_calibrated_isSet;
    bool m_probability_alt_calibrated_isValid;

    double m_probability_calibrated;
    bool m_probability_calibrated_isSet;
    bool m_probability_calibrated_isValid;

    QString m_religion;
    bool m_religion_isSet;
    bool m_religion_isValid;

    QString m_religion_alt;
    bool m_religion_alt_isSet;
    bool m_religion_alt_isValid;

    QList<QString> m_religions_top;
    bool m_religions_top_isSet;
    bool m_religions_top_isValid;

    double m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPersonalNameReligionedOut)

#endif // OAIPersonalNameReligionedOut_H
