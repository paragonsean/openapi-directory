# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirstLastNameOriginedOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries_origin_top: List[str]=None, country_origin: str=None, country_origin_alt: str=None, first_name: str=None, id: str=None, last_name: str=None, probability_alt_calibrated: float=None, probability_calibrated: float=None, region_origin: str=None, score: float=None, script: str=None, sub_region_origin: str=None, top_region_origin: str=None):
        """FirstLastNameOriginedOut - a model defined in OpenAPI

        :param countries_origin_top: The countries_origin_top of this FirstLastNameOriginedOut.
        :param country_origin: The country_origin of this FirstLastNameOriginedOut.
        :param country_origin_alt: The country_origin_alt of this FirstLastNameOriginedOut.
        :param first_name: The first_name of this FirstLastNameOriginedOut.
        :param id: The id of this FirstLastNameOriginedOut.
        :param last_name: The last_name of this FirstLastNameOriginedOut.
        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameOriginedOut.
        :param probability_calibrated: The probability_calibrated of this FirstLastNameOriginedOut.
        :param region_origin: The region_origin of this FirstLastNameOriginedOut.
        :param score: The score of this FirstLastNameOriginedOut.
        :param script: The script of this FirstLastNameOriginedOut.
        :param sub_region_origin: The sub_region_origin of this FirstLastNameOriginedOut.
        :param top_region_origin: The top_region_origin of this FirstLastNameOriginedOut.
        """
        self.openapi_types = {
            'countries_origin_top': List[str],
            'country_origin': str,
            'country_origin_alt': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'probability_alt_calibrated': float,
            'probability_calibrated': float,
            'region_origin': str,
            'score': float,
            'script': str,
            'sub_region_origin': str,
            'top_region_origin': str
        }

        self.attribute_map = {
            'countries_origin_top': 'countriesOriginTop',
            'country_origin': 'countryOrigin',
            'country_origin_alt': 'countryOriginAlt',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'probability_alt_calibrated': 'probabilityAltCalibrated',
            'probability_calibrated': 'probabilityCalibrated',
            'region_origin': 'regionOrigin',
            'score': 'score',
            'script': 'script',
            'sub_region_origin': 'subRegionOrigin',
            'top_region_origin': 'topRegionOrigin'
        }

        self._countries_origin_top = countries_origin_top
        self._country_origin = country_origin
        self._country_origin_alt = country_origin_alt
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._probability_alt_calibrated = probability_alt_calibrated
        self._probability_calibrated = probability_calibrated
        self._region_origin = region_origin
        self._score = score
        self._script = script
        self._sub_region_origin = sub_region_origin
        self._top_region_origin = top_region_origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirstLastNameOriginedOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirstLastNameOriginedOut of this FirstLastNameOriginedOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries_origin_top(self):
        """Gets the countries_origin_top of this FirstLastNameOriginedOut.

        List countries of Origin (top 10)

        :return: The countries_origin_top of this FirstLastNameOriginedOut.
        :rtype: List[str]
        """
        return self._countries_origin_top

    @countries_origin_top.setter
    def countries_origin_top(self, countries_origin_top):
        """Sets the countries_origin_top of this FirstLastNameOriginedOut.

        List countries of Origin (top 10)

        :param countries_origin_top: The countries_origin_top of this FirstLastNameOriginedOut.
        :type countries_origin_top: List[str]
        """

        self._countries_origin_top = countries_origin_top

    @property
    def country_origin(self):
        """Gets the country_origin of this FirstLastNameOriginedOut.

        Most likely country of Origin

        :return: The country_origin of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._country_origin

    @country_origin.setter
    def country_origin(self, country_origin):
        """Sets the country_origin of this FirstLastNameOriginedOut.

        Most likely country of Origin

        :param country_origin: The country_origin of this FirstLastNameOriginedOut.
        :type country_origin: str
        """

        self._country_origin = country_origin

    @property
    def country_origin_alt(self):
        """Gets the country_origin_alt of this FirstLastNameOriginedOut.

        Second best alternative : country of Origin

        :return: The country_origin_alt of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._country_origin_alt

    @country_origin_alt.setter
    def country_origin_alt(self, country_origin_alt):
        """Sets the country_origin_alt of this FirstLastNameOriginedOut.

        Second best alternative : country of Origin

        :param country_origin_alt: The country_origin_alt of this FirstLastNameOriginedOut.
        :type country_origin_alt: str
        """

        self._country_origin_alt = country_origin_alt

    @property
    def first_name(self):
        """Gets the first_name of this FirstLastNameOriginedOut.

        The first name (also known as given name)

        :return: The first_name of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FirstLastNameOriginedOut.

        The first name (also known as given name)

        :param first_name: The first_name of this FirstLastNameOriginedOut.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this FirstLastNameOriginedOut.


        :return: The id of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FirstLastNameOriginedOut.


        :param id: The id of this FirstLastNameOriginedOut.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this FirstLastNameOriginedOut.

        The last name (also known as family name, or surname)

        :return: The last_name of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FirstLastNameOriginedOut.

        The last name (also known as family name, or surname)

        :param last_name: The last_name of this FirstLastNameOriginedOut.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this FirstLastNameOriginedOut.

        The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_alt_calibrated of this FirstLastNameOriginedOut.
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this FirstLastNameOriginedOut.

        The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating. 

        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameOriginedOut.
        :type probability_alt_calibrated: float
        """
        if probability_alt_calibrated is not None and probability_alt_calibrated > 1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value less than or equal to `1`")
        if probability_alt_calibrated is not None and probability_alt_calibrated < -1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_alt_calibrated = probability_alt_calibrated

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this FirstLastNameOriginedOut.

        The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_calibrated of this FirstLastNameOriginedOut.
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this FirstLastNameOriginedOut.

        The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating. 

        :param probability_calibrated: The probability_calibrated of this FirstLastNameOriginedOut.
        :type probability_calibrated: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")
        if probability_calibrated is not None and probability_calibrated < -1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_calibrated = probability_calibrated

    @property
    def region_origin(self):
        """Gets the region_origin of this FirstLastNameOriginedOut.

        Most likely region of Origin (based on countryOrigin ISO2 code)

        :return: The region_origin of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._region_origin

    @region_origin.setter
    def region_origin(self, region_origin):
        """Sets the region_origin of this FirstLastNameOriginedOut.

        Most likely region of Origin (based on countryOrigin ISO2 code)

        :param region_origin: The region_origin of this FirstLastNameOriginedOut.
        :type region_origin: str
        """

        self._region_origin = region_origin

    @property
    def score(self):
        """Gets the score of this FirstLastNameOriginedOut.

        Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this FirstLastNameOriginedOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this FirstLastNameOriginedOut.

        Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this FirstLastNameOriginedOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this FirstLastNameOriginedOut.


        :return: The script of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this FirstLastNameOriginedOut.


        :param script: The script of this FirstLastNameOriginedOut.
        :type script: str
        """

        self._script = script

    @property
    def sub_region_origin(self):
        """Gets the sub_region_origin of this FirstLastNameOriginedOut.

        Most likely sub region of Origin (based on countryOrigin ISO2 code)

        :return: The sub_region_origin of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._sub_region_origin

    @sub_region_origin.setter
    def sub_region_origin(self, sub_region_origin):
        """Sets the sub_region_origin of this FirstLastNameOriginedOut.

        Most likely sub region of Origin (based on countryOrigin ISO2 code)

        :param sub_region_origin: The sub_region_origin of this FirstLastNameOriginedOut.
        :type sub_region_origin: str
        """

        self._sub_region_origin = sub_region_origin

    @property
    def top_region_origin(self):
        """Gets the top_region_origin of this FirstLastNameOriginedOut.

        Most likely top region of Origin (based on countryOrigin ISO2 code)

        :return: The top_region_origin of this FirstLastNameOriginedOut.
        :rtype: str
        """
        return self._top_region_origin

    @top_region_origin.setter
    def top_region_origin(self, top_region_origin):
        """Sets the top_region_origin of this FirstLastNameOriginedOut.

        Most likely top region of Origin (based on countryOrigin ISO2 code)

        :param top_region_origin: The top_region_origin of this FirstLastNameOriginedOut.
        :type top_region_origin: str
        """

        self._top_region_origin = top_region_origin
