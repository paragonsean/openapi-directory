# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionISO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_fips: str=None, country_iso2: str=None, country_iso3: str=None, country_name: str=None, country_num_code: str=None, region: str=None, subregion: str=None, topregion: str=None):
        """RegionISO - a model defined in OpenAPI

        :param country_fips: The country_fips of this RegionISO.
        :param country_iso2: The country_iso2 of this RegionISO.
        :param country_iso3: The country_iso3 of this RegionISO.
        :param country_name: The country_name of this RegionISO.
        :param country_num_code: The country_num_code of this RegionISO.
        :param region: The region of this RegionISO.
        :param subregion: The subregion of this RegionISO.
        :param topregion: The topregion of this RegionISO.
        """
        self.openapi_types = {
            'country_fips': str,
            'country_iso2': str,
            'country_iso3': str,
            'country_name': str,
            'country_num_code': str,
            'region': str,
            'subregion': str,
            'topregion': str
        }

        self.attribute_map = {
            'country_fips': 'countryFIPS',
            'country_iso2': 'countryISO2',
            'country_iso3': 'countryISO3',
            'country_name': 'countryName',
            'country_num_code': 'countryNumCode',
            'region': 'region',
            'subregion': 'subregion',
            'topregion': 'topregion'
        }

        self._country_fips = country_fips
        self._country_iso2 = country_iso2
        self._country_iso3 = country_iso3
        self._country_name = country_name
        self._country_num_code = country_num_code
        self._region = region
        self._subregion = subregion
        self._topregion = topregion

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionISO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionISO of this RegionISO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_fips(self):
        """Gets the country_fips of this RegionISO.


        :return: The country_fips of this RegionISO.
        :rtype: str
        """
        return self._country_fips

    @country_fips.setter
    def country_fips(self, country_fips):
        """Sets the country_fips of this RegionISO.


        :param country_fips: The country_fips of this RegionISO.
        :type country_fips: str
        """

        self._country_fips = country_fips

    @property
    def country_iso2(self):
        """Gets the country_iso2 of this RegionISO.


        :return: The country_iso2 of this RegionISO.
        :rtype: str
        """
        return self._country_iso2

    @country_iso2.setter
    def country_iso2(self, country_iso2):
        """Sets the country_iso2 of this RegionISO.


        :param country_iso2: The country_iso2 of this RegionISO.
        :type country_iso2: str
        """

        self._country_iso2 = country_iso2

    @property
    def country_iso3(self):
        """Gets the country_iso3 of this RegionISO.


        :return: The country_iso3 of this RegionISO.
        :rtype: str
        """
        return self._country_iso3

    @country_iso3.setter
    def country_iso3(self, country_iso3):
        """Sets the country_iso3 of this RegionISO.


        :param country_iso3: The country_iso3 of this RegionISO.
        :type country_iso3: str
        """

        self._country_iso3 = country_iso3

    @property
    def country_name(self):
        """Gets the country_name of this RegionISO.


        :return: The country_name of this RegionISO.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this RegionISO.


        :param country_name: The country_name of this RegionISO.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def country_num_code(self):
        """Gets the country_num_code of this RegionISO.


        :return: The country_num_code of this RegionISO.
        :rtype: str
        """
        return self._country_num_code

    @country_num_code.setter
    def country_num_code(self, country_num_code):
        """Sets the country_num_code of this RegionISO.


        :param country_num_code: The country_num_code of this RegionISO.
        :type country_num_code: str
        """

        self._country_num_code = country_num_code

    @property
    def region(self):
        """Gets the region of this RegionISO.


        :return: The region of this RegionISO.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RegionISO.


        :param region: The region of this RegionISO.
        :type region: str
        """

        self._region = region

    @property
    def subregion(self):
        """Gets the subregion of this RegionISO.


        :return: The subregion of this RegionISO.
        :rtype: str
        """
        return self._subregion

    @subregion.setter
    def subregion(self, subregion):
        """Sets the subregion of this RegionISO.


        :param subregion: The subregion of this RegionISO.
        :type subregion: str
        """

        self._subregion = subregion

    @property
    def topregion(self):
        """Gets the topregion of this RegionISO.


        :return: The topregion of this RegionISO.
        :rtype: str
        """
        return self._topregion

    @topregion.setter
    def topregion(self, topregion):
        """Sets the topregion of this RegionISO.


        :param topregion: The topregion of this RegionISO.
        :type topregion: str
        """

        self._topregion = topregion
