# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIClassifierTaxonomyOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classifier_name: str=None, classifying_scripts: List[str]=None, taxonomy_classes: List[str]=None):
        """APIClassifierTaxonomyOut - a model defined in OpenAPI

        :param classifier_name: The classifier_name of this APIClassifierTaxonomyOut.
        :param classifying_scripts: The classifying_scripts of this APIClassifierTaxonomyOut.
        :param taxonomy_classes: The taxonomy_classes of this APIClassifierTaxonomyOut.
        """
        self.openapi_types = {
            'classifier_name': str,
            'classifying_scripts': List[str],
            'taxonomy_classes': List[str]
        }

        self.attribute_map = {
            'classifier_name': 'classifierName',
            'classifying_scripts': 'classifyingScripts',
            'taxonomy_classes': 'taxonomyClasses'
        }

        self._classifier_name = classifier_name
        self._classifying_scripts = classifying_scripts
        self._taxonomy_classes = taxonomy_classes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIClassifierTaxonomyOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIClassifierTaxonomyOut of this APIClassifierTaxonomyOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classifier_name(self):
        """Gets the classifier_name of this APIClassifierTaxonomyOut.

        Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices)

        :return: The classifier_name of this APIClassifierTaxonomyOut.
        :rtype: str
        """
        return self._classifier_name

    @classifier_name.setter
    def classifier_name(self, classifier_name):
        """Sets the classifier_name of this APIClassifierTaxonomyOut.

        Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices)

        :param classifier_name: The classifier_name of this APIClassifierTaxonomyOut.
        :type classifier_name: str
        """

        self._classifier_name = classifier_name

    @property
    def classifying_scripts(self):
        """Gets the classifying_scripts of this APIClassifierTaxonomyOut.

        The scripts / alphabets this classifiers classifies to

        :return: The classifying_scripts of this APIClassifierTaxonomyOut.
        :rtype: List[str]
        """
        return self._classifying_scripts

    @classifying_scripts.setter
    def classifying_scripts(self, classifying_scripts):
        """Sets the classifying_scripts of this APIClassifierTaxonomyOut.

        The scripts / alphabets this classifiers classifies to

        :param classifying_scripts: The classifying_scripts of this APIClassifierTaxonomyOut.
        :type classifying_scripts: List[str]
        """

        self._classifying_scripts = classifying_scripts

    @property
    def taxonomy_classes(self):
        """Gets the taxonomy_classes of this APIClassifierTaxonomyOut.

        The taxonomy classes this classifier classifies to

        :return: The taxonomy_classes of this APIClassifierTaxonomyOut.
        :rtype: List[str]
        """
        return self._taxonomy_classes

    @taxonomy_classes.setter
    def taxonomy_classes(self, taxonomy_classes):
        """Sets the taxonomy_classes of this APIClassifierTaxonomyOut.

        The taxonomy classes this classifier classifies to

        :param taxonomy_classes: The taxonomy_classes of this APIClassifierTaxonomyOut.
        :type taxonomy_classes: List[str]
        """

        self._taxonomy_classes = taxonomy_classes
