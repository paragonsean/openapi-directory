# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIPlanSubscriptionOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, currency: str=None, currency_factor: float=None, plan_base_fees_key: str=None, plan_ended: int=None, plan_name: str=None, plan_quota: int=None, plan_started: int=None, plan_status: str=None, price: float=None, price_overage: float=None, price_overage_usd: float=None, price_usd: float=None, prior_plan_started: int=None, stripe_customer_id: str=None, stripe_status: str=None, stripe_subscription: str=None, tax_rate: float=None, user_id: str=None):
        """APIPlanSubscriptionOut - a model defined in OpenAPI

        :param api_key: The api_key of this APIPlanSubscriptionOut.
        :param currency: The currency of this APIPlanSubscriptionOut.
        :param currency_factor: The currency_factor of this APIPlanSubscriptionOut.
        :param plan_base_fees_key: The plan_base_fees_key of this APIPlanSubscriptionOut.
        :param plan_ended: The plan_ended of this APIPlanSubscriptionOut.
        :param plan_name: The plan_name of this APIPlanSubscriptionOut.
        :param plan_quota: The plan_quota of this APIPlanSubscriptionOut.
        :param plan_started: The plan_started of this APIPlanSubscriptionOut.
        :param plan_status: The plan_status of this APIPlanSubscriptionOut.
        :param price: The price of this APIPlanSubscriptionOut.
        :param price_overage: The price_overage of this APIPlanSubscriptionOut.
        :param price_overage_usd: The price_overage_usd of this APIPlanSubscriptionOut.
        :param price_usd: The price_usd of this APIPlanSubscriptionOut.
        :param prior_plan_started: The prior_plan_started of this APIPlanSubscriptionOut.
        :param stripe_customer_id: The stripe_customer_id of this APIPlanSubscriptionOut.
        :param stripe_status: The stripe_status of this APIPlanSubscriptionOut.
        :param stripe_subscription: The stripe_subscription of this APIPlanSubscriptionOut.
        :param tax_rate: The tax_rate of this APIPlanSubscriptionOut.
        :param user_id: The user_id of this APIPlanSubscriptionOut.
        """
        self.openapi_types = {
            'api_key': str,
            'currency': str,
            'currency_factor': float,
            'plan_base_fees_key': str,
            'plan_ended': int,
            'plan_name': str,
            'plan_quota': int,
            'plan_started': int,
            'plan_status': str,
            'price': float,
            'price_overage': float,
            'price_overage_usd': float,
            'price_usd': float,
            'prior_plan_started': int,
            'stripe_customer_id': str,
            'stripe_status': str,
            'stripe_subscription': str,
            'tax_rate': float,
            'user_id': str
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'currency': 'currency',
            'currency_factor': 'currencyFactor',
            'plan_base_fees_key': 'planBaseFeesKey',
            'plan_ended': 'planEnded',
            'plan_name': 'planName',
            'plan_quota': 'planQuota',
            'plan_started': 'planStarted',
            'plan_status': 'planStatus',
            'price': 'price',
            'price_overage': 'priceOverage',
            'price_overage_usd': 'priceOverageUSD',
            'price_usd': 'priceUSD',
            'prior_plan_started': 'priorPlanStarted',
            'stripe_customer_id': 'stripeCustomerId',
            'stripe_status': 'stripeStatus',
            'stripe_subscription': 'stripeSubscription',
            'tax_rate': 'taxRate',
            'user_id': 'userId'
        }

        self._api_key = api_key
        self._currency = currency
        self._currency_factor = currency_factor
        self._plan_base_fees_key = plan_base_fees_key
        self._plan_ended = plan_ended
        self._plan_name = plan_name
        self._plan_quota = plan_quota
        self._plan_started = plan_started
        self._plan_status = plan_status
        self._price = price
        self._price_overage = price_overage
        self._price_overage_usd = price_overage_usd
        self._price_usd = price_usd
        self._prior_plan_started = prior_plan_started
        self._stripe_customer_id = stripe_customer_id
        self._stripe_status = stripe_status
        self._stripe_subscription = stripe_subscription
        self._tax_rate = tax_rate
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIPlanSubscriptionOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIPlanSubscriptionOut of this APIPlanSubscriptionOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this APIPlanSubscriptionOut.

        User API Key.

        :return: The api_key of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this APIPlanSubscriptionOut.

        User API Key.

        :param api_key: The api_key of this APIPlanSubscriptionOut.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def currency(self):
        """Gets the currency of this APIPlanSubscriptionOut.

        Current plan Currency for prices.

        :return: The currency of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this APIPlanSubscriptionOut.

        Current plan Currency for prices.

        :param currency: The currency of this APIPlanSubscriptionOut.
        :type currency: str
        """

        self._currency = currency

    @property
    def currency_factor(self):
        """Gets the currency_factor of this APIPlanSubscriptionOut.

        For USD, GBP, EUR - the factor is 1.

        :return: The currency_factor of this APIPlanSubscriptionOut.
        :rtype: float
        """
        return self._currency_factor

    @currency_factor.setter
    def currency_factor(self, currency_factor):
        """Sets the currency_factor of this APIPlanSubscriptionOut.

        For USD, GBP, EUR - the factor is 1.

        :param currency_factor: The currency_factor of this APIPlanSubscriptionOut.
        :type currency_factor: float
        """

        self._currency_factor = currency_factor

    @property
    def plan_base_fees_key(self):
        """Gets the plan_base_fees_key of this APIPlanSubscriptionOut.

        Current plan key (as in Stripe product).

        :return: The plan_base_fees_key of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._plan_base_fees_key

    @plan_base_fees_key.setter
    def plan_base_fees_key(self, plan_base_fees_key):
        """Sets the plan_base_fees_key of this APIPlanSubscriptionOut.

        Current plan key (as in Stripe product).

        :param plan_base_fees_key: The plan_base_fees_key of this APIPlanSubscriptionOut.
        :type plan_base_fees_key: str
        """

        self._plan_base_fees_key = plan_base_fees_key

    @property
    def plan_ended(self):
        """Gets the plan_ended of this APIPlanSubscriptionOut.

        Datetime when the user ended the plan.

        :return: The plan_ended of this APIPlanSubscriptionOut.
        :rtype: int
        """
        return self._plan_ended

    @plan_ended.setter
    def plan_ended(self, plan_ended):
        """Sets the plan_ended of this APIPlanSubscriptionOut.

        Datetime when the user ended the plan.

        :param plan_ended: The plan_ended of this APIPlanSubscriptionOut.
        :type plan_ended: int
        """

        self._plan_ended = plan_ended

    @property
    def plan_name(self):
        """Gets the plan_name of this APIPlanSubscriptionOut.

        Current plan name.

        :return: The plan_name of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this APIPlanSubscriptionOut.

        Current plan name.

        :param plan_name: The plan_name of this APIPlanSubscriptionOut.
        :type plan_name: str
        """

        self._plan_name = plan_name

    @property
    def plan_quota(self):
        """Gets the plan_quota of this APIPlanSubscriptionOut.

        Current plan quota in quantity of units (NB: some API use several units per name).

        :return: The plan_quota of this APIPlanSubscriptionOut.
        :rtype: int
        """
        return self._plan_quota

    @plan_quota.setter
    def plan_quota(self, plan_quota):
        """Sets the plan_quota of this APIPlanSubscriptionOut.

        Current plan quota in quantity of units (NB: some API use several units per name).

        :param plan_quota: The plan_quota of this APIPlanSubscriptionOut.
        :type plan_quota: int
        """

        self._plan_quota = plan_quota

    @property
    def plan_started(self):
        """Gets the plan_started of this APIPlanSubscriptionOut.

        Datetime when the user subscribed to the current plan.

        :return: The plan_started of this APIPlanSubscriptionOut.
        :rtype: int
        """
        return self._plan_started

    @plan_started.setter
    def plan_started(self, plan_started):
        """Sets the plan_started of this APIPlanSubscriptionOut.

        Datetime when the user subscribed to the current plan.

        :param plan_started: The plan_started of this APIPlanSubscriptionOut.
        :type plan_started: int
        """

        self._plan_started = plan_started

    @property
    def plan_status(self):
        """Gets the plan_status of this APIPlanSubscriptionOut.

        Plan status.

        :return: The plan_status of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._plan_status

    @plan_status.setter
    def plan_status(self, plan_status):
        """Sets the plan_status of this APIPlanSubscriptionOut.

        Plan status.

        :param plan_status: The plan_status of this APIPlanSubscriptionOut.
        :type plan_status: str
        """

        self._plan_status = plan_status

    @property
    def price(self):
        """Gets the price of this APIPlanSubscriptionOut.

        Current plan price for overages expressed in Currency (extra price per unit above the free quota).

        :return: The price of this APIPlanSubscriptionOut.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this APIPlanSubscriptionOut.

        Current plan price for overages expressed in Currency (extra price per unit above the free quota).

        :param price: The price of this APIPlanSubscriptionOut.
        :type price: float
        """

        self._price = price

    @property
    def price_overage(self):
        """Gets the price_overage of this APIPlanSubscriptionOut.

        Current plan price for overages expressed in Currency (extra price per unit above the free quota).

        :return: The price_overage of this APIPlanSubscriptionOut.
        :rtype: float
        """
        return self._price_overage

    @price_overage.setter
    def price_overage(self, price_overage):
        """Sets the price_overage of this APIPlanSubscriptionOut.

        Current plan price for overages expressed in Currency (extra price per unit above the free quota).

        :param price_overage: The price_overage of this APIPlanSubscriptionOut.
        :type price_overage: float
        """

        self._price_overage = price_overage

    @property
    def price_overage_usd(self):
        """Gets the price_overage_usd of this APIPlanSubscriptionOut.

        Current plan price for overages expressed in USD (extra price per unit above the free quota).

        :return: The price_overage_usd of this APIPlanSubscriptionOut.
        :rtype: float
        """
        return self._price_overage_usd

    @price_overage_usd.setter
    def price_overage_usd(self, price_overage_usd):
        """Sets the price_overage_usd of this APIPlanSubscriptionOut.

        Current plan price for overages expressed in USD (extra price per unit above the free quota).

        :param price_overage_usd: The price_overage_usd of this APIPlanSubscriptionOut.
        :type price_overage_usd: float
        """

        self._price_overage_usd = price_overage_usd

    @property
    def price_usd(self):
        """Gets the price_usd of this APIPlanSubscriptionOut.

        Current plan monthly price expressed in USD (includes a free quota).

        :return: The price_usd of this APIPlanSubscriptionOut.
        :rtype: float
        """
        return self._price_usd

    @price_usd.setter
    def price_usd(self, price_usd):
        """Sets the price_usd of this APIPlanSubscriptionOut.

        Current plan monthly price expressed in USD (includes a free quota).

        :param price_usd: The price_usd of this APIPlanSubscriptionOut.
        :type price_usd: float
        """

        self._price_usd = price_usd

    @property
    def prior_plan_started(self):
        """Gets the prior_plan_started of this APIPlanSubscriptionOut.

        Datetime when the user subscribed to the prior plan.

        :return: The prior_plan_started of this APIPlanSubscriptionOut.
        :rtype: int
        """
        return self._prior_plan_started

    @prior_plan_started.setter
    def prior_plan_started(self, prior_plan_started):
        """Sets the prior_plan_started of this APIPlanSubscriptionOut.

        Datetime when the user subscribed to the prior plan.

        :param prior_plan_started: The prior_plan_started of this APIPlanSubscriptionOut.
        :type prior_plan_started: int
        """

        self._prior_plan_started = prior_plan_started

    @property
    def stripe_customer_id(self):
        """Gets the stripe_customer_id of this APIPlanSubscriptionOut.

        Stripe customer identifier.

        :return: The stripe_customer_id of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._stripe_customer_id

    @stripe_customer_id.setter
    def stripe_customer_id(self, stripe_customer_id):
        """Sets the stripe_customer_id of this APIPlanSubscriptionOut.

        Stripe customer identifier.

        :param stripe_customer_id: The stripe_customer_id of this APIPlanSubscriptionOut.
        :type stripe_customer_id: str
        """

        self._stripe_customer_id = stripe_customer_id

    @property
    def stripe_status(self):
        """Gets the stripe_status of this APIPlanSubscriptionOut.

        Stripe status ex active.

        :return: The stripe_status of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._stripe_status

    @stripe_status.setter
    def stripe_status(self, stripe_status):
        """Sets the stripe_status of this APIPlanSubscriptionOut.

        Stripe status ex active.

        :param stripe_status: The stripe_status of this APIPlanSubscriptionOut.
        :type stripe_status: str
        """

        self._stripe_status = stripe_status

    @property
    def stripe_subscription(self):
        """Gets the stripe_subscription of this APIPlanSubscriptionOut.

        Stripe subscription identifier.

        :return: The stripe_subscription of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._stripe_subscription

    @stripe_subscription.setter
    def stripe_subscription(self, stripe_subscription):
        """Sets the stripe_subscription of this APIPlanSubscriptionOut.

        Stripe subscription identifier.

        :param stripe_subscription: The stripe_subscription of this APIPlanSubscriptionOut.
        :type stripe_subscription: str
        """

        self._stripe_subscription = stripe_subscription

    @property
    def tax_rate(self):
        """Gets the tax_rate of this APIPlanSubscriptionOut.

        Applicable tax rate for the plan.

        :return: The tax_rate of this APIPlanSubscriptionOut.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this APIPlanSubscriptionOut.

        Applicable tax rate for the plan.

        :param tax_rate: The tax_rate of this APIPlanSubscriptionOut.
        :type tax_rate: float
        """

        self._tax_rate = tax_rate

    @property
    def user_id(self):
        """Gets the user_id of this APIPlanSubscriptionOut.

        Internal user identifier.

        :return: The user_id of this APIPlanSubscriptionOut.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this APIPlanSubscriptionOut.

        Internal user identifier.

        :param user_id: The user_id of this APIPlanSubscriptionOut.
        :type user_id: str
        """

        self._user_id = user_id
