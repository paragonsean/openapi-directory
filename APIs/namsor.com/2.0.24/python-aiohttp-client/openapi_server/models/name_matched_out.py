# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NameMatchedOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, match_status: str=None, score: float=None, script: str=None):
        """NameMatchedOut - a model defined in OpenAPI

        :param id: The id of this NameMatchedOut.
        :param match_status: The match_status of this NameMatchedOut.
        :param score: The score of this NameMatchedOut.
        :param script: The script of this NameMatchedOut.
        """
        self.openapi_types = {
            'id': str,
            'match_status': str,
            'score': float,
            'script': str
        }

        self.attribute_map = {
            'id': 'id',
            'match_status': 'matchStatus',
            'score': 'score',
            'script': 'script'
        }

        self._id = id
        self._match_status = match_status
        self._score = score
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NameMatchedOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NameMatchedOut of this NameMatchedOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NameMatchedOut.


        :return: The id of this NameMatchedOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NameMatchedOut.


        :param id: The id of this NameMatchedOut.
        :type id: str
        """

        self._id = id

    @property
    def match_status(self):
        """Gets the match_status of this NameMatchedOut.

        The name matching status.

        :return: The match_status of this NameMatchedOut.
        :rtype: str
        """
        return self._match_status

    @match_status.setter
    def match_status(self, match_status):
        """Sets the match_status of this NameMatchedOut.

        The name matching status.

        :param match_status: The match_status of this NameMatchedOut.
        :type match_status: str
        """
        allowed_values = ["Match", "Mismatch"]  # noqa: E501
        if match_status not in allowed_values:
            raise ValueError(
                "Invalid value for `match_status` ({0}), must be one of {1}"
                .format(match_status, allowed_values)
            )

        self._match_status = match_status

    @property
    def score(self):
        """Gets the score of this NameMatchedOut.


        :return: The score of this NameMatchedOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this NameMatchedOut.


        :param score: The score of this NameMatchedOut.
        :type score: float
        """

        self._score = score

    @property
    def script(self):
        """Gets the script of this NameMatchedOut.


        :return: The script of this NameMatchedOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this NameMatchedOut.


        :param script: The script of this NameMatchedOut.
        :type script: str
        """

        self._script = script
