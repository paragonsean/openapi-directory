# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProperNounCategorizedOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_type: str=None, common_type_alt: str=None, id: str=None, name: str=None, score: float=None, script: str=None):
        """ProperNounCategorizedOut - a model defined in OpenAPI

        :param common_type: The common_type of this ProperNounCategorizedOut.
        :param common_type_alt: The common_type_alt of this ProperNounCategorizedOut.
        :param id: The id of this ProperNounCategorizedOut.
        :param name: The name of this ProperNounCategorizedOut.
        :param score: The score of this ProperNounCategorizedOut.
        :param script: The script of this ProperNounCategorizedOut.
        """
        self.openapi_types = {
            'common_type': str,
            'common_type_alt': str,
            'id': str,
            'name': str,
            'score': float,
            'script': str
        }

        self.attribute_map = {
            'common_type': 'commonType',
            'common_type_alt': 'commonTypeAlt',
            'id': 'id',
            'name': 'name',
            'score': 'score',
            'script': 'script'
        }

        self._common_type = common_type
        self._common_type_alt = common_type_alt
        self._id = id
        self._name = name
        self._score = score
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProperNounCategorizedOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProperNounCategorizedOut of this ProperNounCategorizedOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_type(self):
        """Gets the common_type of this ProperNounCategorizedOut.

        The most likely common name type

        :return: The common_type of this ProperNounCategorizedOut.
        :rtype: str
        """
        return self._common_type

    @common_type.setter
    def common_type(self, common_type):
        """Sets the common_type of this ProperNounCategorizedOut.

        The most likely common name type

        :param common_type: The common_type of this ProperNounCategorizedOut.
        :type common_type: str
        """

        self._common_type = common_type

    @property
    def common_type_alt(self):
        """Gets the common_type_alt of this ProperNounCategorizedOut.

        Best alternative for : The most likely common name type

        :return: The common_type_alt of this ProperNounCategorizedOut.
        :rtype: str
        """
        return self._common_type_alt

    @common_type_alt.setter
    def common_type_alt(self, common_type_alt):
        """Sets the common_type_alt of this ProperNounCategorizedOut.

        Best alternative for : The most likely common name type

        :param common_type_alt: The common_type_alt of this ProperNounCategorizedOut.
        :type common_type_alt: str
        """

        self._common_type_alt = common_type_alt

    @property
    def id(self):
        """Gets the id of this ProperNounCategorizedOut.


        :return: The id of this ProperNounCategorizedOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProperNounCategorizedOut.


        :param id: The id of this ProperNounCategorizedOut.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProperNounCategorizedOut.

        The input name

        :return: The name of this ProperNounCategorizedOut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProperNounCategorizedOut.

        The input name

        :param name: The name of this ProperNounCategorizedOut.
        :type name: str
        """

        self._name = name

    @property
    def score(self):
        """Gets the score of this ProperNounCategorizedOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this ProperNounCategorizedOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ProperNounCategorizedOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this ProperNounCategorizedOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this ProperNounCategorizedOut.


        :return: The script of this ProperNounCategorizedOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this ProperNounCategorizedOut.


        :param script: The script of this ProperNounCategorizedOut.
        :type script: str
        """

        self._script = script
