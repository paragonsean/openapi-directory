# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirstLastNameGeoSubclassificationOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_iso2: str=None, first_name: str=None, id: str=None, last_name: str=None, probability_alt_calibrated: float=None, probability_calibrated: float=None, score: float=None, script: str=None, sub_classification: str=None, sub_classification_alt: str=None, subclassification_top: List[str]=None):
        """FirstLastNameGeoSubclassificationOut - a model defined in OpenAPI

        :param country_iso2: The country_iso2 of this FirstLastNameGeoSubclassificationOut.
        :param first_name: The first_name of this FirstLastNameGeoSubclassificationOut.
        :param id: The id of this FirstLastNameGeoSubclassificationOut.
        :param last_name: The last_name of this FirstLastNameGeoSubclassificationOut.
        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.
        :param probability_calibrated: The probability_calibrated of this FirstLastNameGeoSubclassificationOut.
        :param score: The score of this FirstLastNameGeoSubclassificationOut.
        :param script: The script of this FirstLastNameGeoSubclassificationOut.
        :param sub_classification: The sub_classification of this FirstLastNameGeoSubclassificationOut.
        :param sub_classification_alt: The sub_classification_alt of this FirstLastNameGeoSubclassificationOut.
        :param subclassification_top: The subclassification_top of this FirstLastNameGeoSubclassificationOut.
        """
        self.openapi_types = {
            'country_iso2': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'probability_alt_calibrated': float,
            'probability_calibrated': float,
            'score': float,
            'script': str,
            'sub_classification': str,
            'sub_classification_alt': str,
            'subclassification_top': List[str]
        }

        self.attribute_map = {
            'country_iso2': 'countryIso2',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'probability_alt_calibrated': 'probabilityAltCalibrated',
            'probability_calibrated': 'probabilityCalibrated',
            'score': 'score',
            'script': 'script',
            'sub_classification': 'subClassification',
            'sub_classification_alt': 'subClassificationAlt',
            'subclassification_top': 'subclassificationTop'
        }

        self._country_iso2 = country_iso2
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._probability_alt_calibrated = probability_alt_calibrated
        self._probability_calibrated = probability_calibrated
        self._score = score
        self._script = script
        self._sub_classification = sub_classification
        self._sub_classification_alt = sub_classification_alt
        self._subclassification_top = subclassification_top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirstLastNameGeoSubclassificationOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirstLastNameGeoSubclassificationOut of this FirstLastNameGeoSubclassificationOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_iso2(self):
        """Gets the country_iso2 of this FirstLastNameGeoSubclassificationOut.

        The input country ISO2 code

        :return: The country_iso2 of this FirstLastNameGeoSubclassificationOut.
        :rtype: str
        """
        return self._country_iso2

    @country_iso2.setter
    def country_iso2(self, country_iso2):
        """Sets the country_iso2 of this FirstLastNameGeoSubclassificationOut.

        The input country ISO2 code

        :param country_iso2: The country_iso2 of this FirstLastNameGeoSubclassificationOut.
        :type country_iso2: str
        """

        self._country_iso2 = country_iso2

    @property
    def first_name(self):
        """Gets the first_name of this FirstLastNameGeoSubclassificationOut.

        The first name (also known as given name)

        :return: The first_name of this FirstLastNameGeoSubclassificationOut.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FirstLastNameGeoSubclassificationOut.

        The first name (also known as given name)

        :param first_name: The first_name of this FirstLastNameGeoSubclassificationOut.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this FirstLastNameGeoSubclassificationOut.


        :return: The id of this FirstLastNameGeoSubclassificationOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FirstLastNameGeoSubclassificationOut.


        :param id: The id of this FirstLastNameGeoSubclassificationOut.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this FirstLastNameGeoSubclassificationOut.

        The last name (also known as family name, or surname)

        :return: The last_name of this FirstLastNameGeoSubclassificationOut.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FirstLastNameGeoSubclassificationOut.

        The last name (also known as family name, or surname)

        :param last_name: The last_name of this FirstLastNameGeoSubclassificationOut.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.

        The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.

        The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating. 

        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameGeoSubclassificationOut.
        :type probability_alt_calibrated: float
        """
        if probability_alt_calibrated is not None and probability_alt_calibrated > 1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value less than or equal to `1`")
        if probability_alt_calibrated is not None and probability_alt_calibrated < -1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_alt_calibrated = probability_alt_calibrated

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this FirstLastNameGeoSubclassificationOut.

        The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_calibrated of this FirstLastNameGeoSubclassificationOut.
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this FirstLastNameGeoSubclassificationOut.

        The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating. 

        :param probability_calibrated: The probability_calibrated of this FirstLastNameGeoSubclassificationOut.
        :type probability_calibrated: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")
        if probability_calibrated is not None and probability_calibrated < -1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_calibrated = probability_calibrated

    @property
    def score(self):
        """Gets the score of this FirstLastNameGeoSubclassificationOut.

        Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this FirstLastNameGeoSubclassificationOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this FirstLastNameGeoSubclassificationOut.

        Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this FirstLastNameGeoSubclassificationOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this FirstLastNameGeoSubclassificationOut.


        :return: The script of this FirstLastNameGeoSubclassificationOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this FirstLastNameGeoSubclassificationOut.


        :param script: The script of this FirstLastNameGeoSubclassificationOut.
        :type script: str
        """

        self._script = script

    @property
    def sub_classification(self):
        """Gets the sub_classification of this FirstLastNameGeoSubclassificationOut.

        Most likely subclassification ISO_3166-2 code

        :return: The sub_classification of this FirstLastNameGeoSubclassificationOut.
        :rtype: str
        """
        return self._sub_classification

    @sub_classification.setter
    def sub_classification(self, sub_classification):
        """Sets the sub_classification of this FirstLastNameGeoSubclassificationOut.

        Most likely subclassification ISO_3166-2 code

        :param sub_classification: The sub_classification of this FirstLastNameGeoSubclassificationOut.
        :type sub_classification: str
        """

        self._sub_classification = sub_classification

    @property
    def sub_classification_alt(self):
        """Gets the sub_classification_alt of this FirstLastNameGeoSubclassificationOut.

        Second best alternative : subclassification ISO_3166-2 code

        :return: The sub_classification_alt of this FirstLastNameGeoSubclassificationOut.
        :rtype: str
        """
        return self._sub_classification_alt

    @sub_classification_alt.setter
    def sub_classification_alt(self, sub_classification_alt):
        """Sets the sub_classification_alt of this FirstLastNameGeoSubclassificationOut.

        Second best alternative : subclassification ISO_3166-2 code

        :param sub_classification_alt: The sub_classification_alt of this FirstLastNameGeoSubclassificationOut.
        :type sub_classification_alt: str
        """

        self._sub_classification_alt = sub_classification_alt

    @property
    def subclassification_top(self):
        """Gets the subclassification_top of this FirstLastNameGeoSubclassificationOut.

        List subclassification ISO_3166-2 codes (top 10)

        :return: The subclassification_top of this FirstLastNameGeoSubclassificationOut.
        :rtype: List[str]
        """
        return self._subclassification_top

    @subclassification_top.setter
    def subclassification_top(self, subclassification_top):
        """Sets the subclassification_top of this FirstLastNameGeoSubclassificationOut.

        List subclassification ISO_3166-2 codes (top 10)

        :param subclassification_top: The subclassification_top of this FirstLastNameGeoSubclassificationOut.
        :type subclassification_top: List[str]
        """

        self._subclassification_top = subclassification_top
