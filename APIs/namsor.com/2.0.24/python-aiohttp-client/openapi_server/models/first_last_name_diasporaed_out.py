# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirstLastNameDiasporaedOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_iso2: str=None, ethnicities_top: List[str]=None, ethnicity: str=None, ethnicity_alt: str=None, first_name: str=None, id: str=None, last_name: str=None, lifted: bool=None, probability_alt_calibrated: float=None, probability_calibrated: float=None, score: float=None, script: str=None):
        """FirstLastNameDiasporaedOut - a model defined in OpenAPI

        :param country_iso2: The country_iso2 of this FirstLastNameDiasporaedOut.
        :param ethnicities_top: The ethnicities_top of this FirstLastNameDiasporaedOut.
        :param ethnicity: The ethnicity of this FirstLastNameDiasporaedOut.
        :param ethnicity_alt: The ethnicity_alt of this FirstLastNameDiasporaedOut.
        :param first_name: The first_name of this FirstLastNameDiasporaedOut.
        :param id: The id of this FirstLastNameDiasporaedOut.
        :param last_name: The last_name of this FirstLastNameDiasporaedOut.
        :param lifted: The lifted of this FirstLastNameDiasporaedOut.
        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameDiasporaedOut.
        :param probability_calibrated: The probability_calibrated of this FirstLastNameDiasporaedOut.
        :param score: The score of this FirstLastNameDiasporaedOut.
        :param script: The script of this FirstLastNameDiasporaedOut.
        """
        self.openapi_types = {
            'country_iso2': str,
            'ethnicities_top': List[str],
            'ethnicity': str,
            'ethnicity_alt': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'lifted': bool,
            'probability_alt_calibrated': float,
            'probability_calibrated': float,
            'score': float,
            'script': str
        }

        self.attribute_map = {
            'country_iso2': 'countryIso2',
            'ethnicities_top': 'ethnicitiesTop',
            'ethnicity': 'ethnicity',
            'ethnicity_alt': 'ethnicityAlt',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'lifted': 'lifted',
            'probability_alt_calibrated': 'probabilityAltCalibrated',
            'probability_calibrated': 'probabilityCalibrated',
            'score': 'score',
            'script': 'script'
        }

        self._country_iso2 = country_iso2
        self._ethnicities_top = ethnicities_top
        self._ethnicity = ethnicity
        self._ethnicity_alt = ethnicity_alt
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._lifted = lifted
        self._probability_alt_calibrated = probability_alt_calibrated
        self._probability_calibrated = probability_calibrated
        self._score = score
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirstLastNameDiasporaedOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirstLastNameDiasporaedOut of this FirstLastNameDiasporaedOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_iso2(self):
        """Gets the country_iso2 of this FirstLastNameDiasporaedOut.

        From input data, the countryIso2 of geographic context (US,CA etc.)

        :return: The country_iso2 of this FirstLastNameDiasporaedOut.
        :rtype: str
        """
        return self._country_iso2

    @country_iso2.setter
    def country_iso2(self, country_iso2):
        """Sets the country_iso2 of this FirstLastNameDiasporaedOut.

        From input data, the countryIso2 of geographic context (US,CA etc.)

        :param country_iso2: The country_iso2 of this FirstLastNameDiasporaedOut.
        :type country_iso2: str
        """

        self._country_iso2 = country_iso2

    @property
    def ethnicities_top(self):
        """Gets the ethnicities_top of this FirstLastNameDiasporaedOut.

        List most likely ethnicities (top 10)

        :return: The ethnicities_top of this FirstLastNameDiasporaedOut.
        :rtype: List[str]
        """
        return self._ethnicities_top

    @ethnicities_top.setter
    def ethnicities_top(self, ethnicities_top):
        """Sets the ethnicities_top of this FirstLastNameDiasporaedOut.

        List most likely ethnicities (top 10)

        :param ethnicities_top: The ethnicities_top of this FirstLastNameDiasporaedOut.
        :type ethnicities_top: List[str]
        """

        self._ethnicities_top = ethnicities_top

    @property
    def ethnicity(self):
        """Gets the ethnicity of this FirstLastNameDiasporaedOut.

        The most likely ethnicity

        :return: The ethnicity of this FirstLastNameDiasporaedOut.
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this FirstLastNameDiasporaedOut.

        The most likely ethnicity

        :param ethnicity: The ethnicity of this FirstLastNameDiasporaedOut.
        :type ethnicity: str
        """

        self._ethnicity = ethnicity

    @property
    def ethnicity_alt(self):
        """Gets the ethnicity_alt of this FirstLastNameDiasporaedOut.

        The second best alternative ethnicity

        :return: The ethnicity_alt of this FirstLastNameDiasporaedOut.
        :rtype: str
        """
        return self._ethnicity_alt

    @ethnicity_alt.setter
    def ethnicity_alt(self, ethnicity_alt):
        """Sets the ethnicity_alt of this FirstLastNameDiasporaedOut.

        The second best alternative ethnicity

        :param ethnicity_alt: The ethnicity_alt of this FirstLastNameDiasporaedOut.
        :type ethnicity_alt: str
        """

        self._ethnicity_alt = ethnicity_alt

    @property
    def first_name(self):
        """Gets the first_name of this FirstLastNameDiasporaedOut.

        The first name (also known as given name)

        :return: The first_name of this FirstLastNameDiasporaedOut.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FirstLastNameDiasporaedOut.

        The first name (also known as given name)

        :param first_name: The first_name of this FirstLastNameDiasporaedOut.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this FirstLastNameDiasporaedOut.


        :return: The id of this FirstLastNameDiasporaedOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FirstLastNameDiasporaedOut.


        :param id: The id of this FirstLastNameDiasporaedOut.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this FirstLastNameDiasporaedOut.

        The last name (also known as family name, or surname)

        :return: The last_name of this FirstLastNameDiasporaedOut.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FirstLastNameDiasporaedOut.

        The last name (also known as family name, or surname)

        :param last_name: The last_name of this FirstLastNameDiasporaedOut.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def lifted(self):
        """Gets the lifted of this FirstLastNameDiasporaedOut.

        Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true.

        :return: The lifted of this FirstLastNameDiasporaedOut.
        :rtype: bool
        """
        return self._lifted

    @lifted.setter
    def lifted(self, lifted):
        """Sets the lifted of this FirstLastNameDiasporaedOut.

        Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true.

        :param lifted: The lifted of this FirstLastNameDiasporaedOut.
        :type lifted: bool
        """

        self._lifted = lifted

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this FirstLastNameDiasporaedOut.

        The calibrated probability for ethnicity OR ethnicityAlt to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_alt_calibrated of this FirstLastNameDiasporaedOut.
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this FirstLastNameDiasporaedOut.

        The calibrated probability for ethnicity OR ethnicityAlt to have been guessed correctly. -1 = still calibrating. 

        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameDiasporaedOut.
        :type probability_alt_calibrated: float
        """
        if probability_alt_calibrated is not None and probability_alt_calibrated > 1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value less than or equal to `1`")
        if probability_alt_calibrated is not None and probability_alt_calibrated < -1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_alt_calibrated = probability_alt_calibrated

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this FirstLastNameDiasporaedOut.

        The calibrated probability for ethnicity to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_calibrated of this FirstLastNameDiasporaedOut.
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this FirstLastNameDiasporaedOut.

        The calibrated probability for ethnicity to have been guessed correctly. -1 = still calibrating. 

        :param probability_calibrated: The probability_calibrated of this FirstLastNameDiasporaedOut.
        :type probability_calibrated: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")
        if probability_calibrated is not None and probability_calibrated < -1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_calibrated = probability_calibrated

    @property
    def score(self):
        """Gets the score of this FirstLastNameDiasporaedOut.

        Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this FirstLastNameDiasporaedOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this FirstLastNameDiasporaedOut.

        Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this FirstLastNameDiasporaedOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this FirstLastNameDiasporaedOut.


        :return: The script of this FirstLastNameDiasporaedOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this FirstLastNameDiasporaedOut.


        :param script: The script of this FirstLastNameDiasporaedOut.
        :type script: str
        """

        self._script = script
