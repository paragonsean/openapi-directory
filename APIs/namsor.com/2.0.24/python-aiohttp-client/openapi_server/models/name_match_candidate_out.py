# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NameMatchCandidateOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_name: str=None, pred_score_family_name: float=None, pred_score_given_name: float=None, probability: float=None):
        """NameMatchCandidateOut - a model defined in OpenAPI

        :param candidate_name: The candidate_name of this NameMatchCandidateOut.
        :param pred_score_family_name: The pred_score_family_name of this NameMatchCandidateOut.
        :param pred_score_given_name: The pred_score_given_name of this NameMatchCandidateOut.
        :param probability: The probability of this NameMatchCandidateOut.
        """
        self.openapi_types = {
            'candidate_name': str,
            'pred_score_family_name': float,
            'pred_score_given_name': float,
            'probability': float
        }

        self.attribute_map = {
            'candidate_name': 'candidateName',
            'pred_score_family_name': 'predScoreFamilyName',
            'pred_score_given_name': 'predScoreGivenName',
            'probability': 'probability'
        }

        self._candidate_name = candidate_name
        self._pred_score_family_name = pred_score_family_name
        self._pred_score_given_name = pred_score_given_name
        self._probability = probability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NameMatchCandidateOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NameMatchCandidateOut of this NameMatchCandidateOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_name(self):
        """Gets the candidate_name of this NameMatchCandidateOut.

        The name matching candidate name

        :return: The candidate_name of this NameMatchCandidateOut.
        :rtype: str
        """
        return self._candidate_name

    @candidate_name.setter
    def candidate_name(self, candidate_name):
        """Sets the candidate_name of this NameMatchCandidateOut.

        The name matching candidate name

        :param candidate_name: The candidate_name of this NameMatchCandidateOut.
        :type candidate_name: str
        """

        self._candidate_name = candidate_name

    @property
    def pred_score_family_name(self):
        """Gets the pred_score_family_name of this NameMatchCandidateOut.

        The family name prediction score.

        :return: The pred_score_family_name of this NameMatchCandidateOut.
        :rtype: float
        """
        return self._pred_score_family_name

    @pred_score_family_name.setter
    def pred_score_family_name(self, pred_score_family_name):
        """Sets the pred_score_family_name of this NameMatchCandidateOut.

        The family name prediction score.

        :param pred_score_family_name: The pred_score_family_name of this NameMatchCandidateOut.
        :type pred_score_family_name: float
        """

        self._pred_score_family_name = pred_score_family_name

    @property
    def pred_score_given_name(self):
        """Gets the pred_score_given_name of this NameMatchCandidateOut.

        The given name prediction score.

        :return: The pred_score_given_name of this NameMatchCandidateOut.
        :rtype: float
        """
        return self._pred_score_given_name

    @pred_score_given_name.setter
    def pred_score_given_name(self, pred_score_given_name):
        """Sets the pred_score_given_name of this NameMatchCandidateOut.

        The given name prediction score.

        :param pred_score_given_name: The pred_score_given_name of this NameMatchCandidateOut.
        :type pred_score_given_name: float
        """

        self._pred_score_given_name = pred_score_given_name

    @property
    def probability(self):
        """Gets the probability of this NameMatchCandidateOut.

        The name matching estimated probability.

        :return: The probability of this NameMatchCandidateOut.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this NameMatchCandidateOut.

        The name matching estimated probability.

        :param probability: The probability of this NameMatchCandidateOut.
        :type probability: float
        """

        self._probability = probability
