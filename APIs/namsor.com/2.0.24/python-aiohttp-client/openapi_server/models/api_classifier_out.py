# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIClassifierOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classifier_name: str=None, learning: bool=None, probability_calibrated: bool=None, serving: bool=None, shutting_down: bool=None):
        """APIClassifierOut - a model defined in OpenAPI

        :param classifier_name: The classifier_name of this APIClassifierOut.
        :param learning: The learning of this APIClassifierOut.
        :param probability_calibrated: The probability_calibrated of this APIClassifierOut.
        :param serving: The serving of this APIClassifierOut.
        :param shutting_down: The shutting_down of this APIClassifierOut.
        """
        self.openapi_types = {
            'classifier_name': str,
            'learning': bool,
            'probability_calibrated': bool,
            'serving': bool,
            'shutting_down': bool
        }

        self.attribute_map = {
            'classifier_name': 'classifierName',
            'learning': 'learning',
            'probability_calibrated': 'probabilityCalibrated',
            'serving': 'serving',
            'shutting_down': 'shuttingDown'
        }

        self._classifier_name = classifier_name
        self._learning = learning
        self._probability_calibrated = probability_calibrated
        self._serving = serving
        self._shutting_down = shutting_down

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIClassifierOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIClassifierOut of this APIClassifierOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classifier_name(self):
        """Gets the classifier_name of this APIClassifierOut.

        The classifier name

        :return: The classifier_name of this APIClassifierOut.
        :rtype: str
        """
        return self._classifier_name

    @classifier_name.setter
    def classifier_name(self, classifier_name):
        """Sets the classifier_name of this APIClassifierOut.

        The classifier name

        :param classifier_name: The classifier_name of this APIClassifierOut.
        :type classifier_name: str
        """

        self._classifier_name = classifier_name

    @property
    def learning(self):
        """Gets the learning of this APIClassifierOut.

        True if the classifier is learning

        :return: The learning of this APIClassifierOut.
        :rtype: bool
        """
        return self._learning

    @learning.setter
    def learning(self, learning):
        """Sets the learning of this APIClassifierOut.

        True if the classifier is learning

        :param learning: The learning of this APIClassifierOut.
        :type learning: bool
        """

        self._learning = learning

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this APIClassifierOut.

        True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)

        :return: The probability_calibrated of this APIClassifierOut.
        :rtype: bool
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this APIClassifierOut.

        True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)

        :param probability_calibrated: The probability_calibrated of this APIClassifierOut.
        :type probability_calibrated: bool
        """

        self._probability_calibrated = probability_calibrated

    @property
    def serving(self):
        """Gets the serving of this APIClassifierOut.

        True if the classifier is serving requests (has reached minimal learning, is not shutting down)

        :return: The serving of this APIClassifierOut.
        :rtype: bool
        """
        return self._serving

    @serving.setter
    def serving(self, serving):
        """Sets the serving of this APIClassifierOut.

        True if the classifier is serving requests (has reached minimal learning, is not shutting down)

        :param serving: The serving of this APIClassifierOut.
        :type serving: bool
        """

        self._serving = serving

    @property
    def shutting_down(self):
        """Gets the shutting_down of this APIClassifierOut.

        True if the classifier is shutting down

        :return: The shutting_down of this APIClassifierOut.
        :rtype: bool
        """
        return self._shutting_down

    @shutting_down.setter
    def shutting_down(self, shutting_down):
        """Sets the shutting_down of this APIClassifierOut.

        True if the classifier is shutting down

        :param shutting_down: The shutting_down of this APIClassifierOut.
        :type shutting_down: bool
        """

        self._shutting_down = shutting_down
