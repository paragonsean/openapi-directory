# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.first_last_name_out import FirstLastNameOut
from openapi_server import util


class PersonalNameParsedOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_last_name: FirstLastNameOut=None, id: str=None, name: str=None, name_parser_type: str=None, name_parser_type_alt: str=None, score: float=None, script: str=None):
        """PersonalNameParsedOut - a model defined in OpenAPI

        :param first_last_name: The first_last_name of this PersonalNameParsedOut.
        :param id: The id of this PersonalNameParsedOut.
        :param name: The name of this PersonalNameParsedOut.
        :param name_parser_type: The name_parser_type of this PersonalNameParsedOut.
        :param name_parser_type_alt: The name_parser_type_alt of this PersonalNameParsedOut.
        :param score: The score of this PersonalNameParsedOut.
        :param script: The script of this PersonalNameParsedOut.
        """
        self.openapi_types = {
            'first_last_name': FirstLastNameOut,
            'id': str,
            'name': str,
            'name_parser_type': str,
            'name_parser_type_alt': str,
            'score': float,
            'script': str
        }

        self.attribute_map = {
            'first_last_name': 'firstLastName',
            'id': 'id',
            'name': 'name',
            'name_parser_type': 'nameParserType',
            'name_parser_type_alt': 'nameParserTypeAlt',
            'score': 'score',
            'script': 'script'
        }

        self._first_last_name = first_last_name
        self._id = id
        self._name = name
        self._name_parser_type = name_parser_type
        self._name_parser_type_alt = name_parser_type_alt
        self._score = score
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalNameParsedOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalNameParsedOut of this PersonalNameParsedOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_last_name(self):
        """Gets the first_last_name of this PersonalNameParsedOut.


        :return: The first_last_name of this PersonalNameParsedOut.
        :rtype: FirstLastNameOut
        """
        return self._first_last_name

    @first_last_name.setter
    def first_last_name(self, first_last_name):
        """Sets the first_last_name of this PersonalNameParsedOut.


        :param first_last_name: The first_last_name of this PersonalNameParsedOut.
        :type first_last_name: FirstLastNameOut
        """

        self._first_last_name = first_last_name

    @property
    def id(self):
        """Gets the id of this PersonalNameParsedOut.


        :return: The id of this PersonalNameParsedOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalNameParsedOut.


        :param id: The id of this PersonalNameParsedOut.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PersonalNameParsedOut.

        The input name

        :return: The name of this PersonalNameParsedOut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonalNameParsedOut.

        The input name

        :param name: The name of this PersonalNameParsedOut.
        :type name: str
        """

        self._name = name

    @property
    def name_parser_type(self):
        """Gets the name_parser_type of this PersonalNameParsedOut.

        Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.

        :return: The name_parser_type of this PersonalNameParsedOut.
        :rtype: str
        """
        return self._name_parser_type

    @name_parser_type.setter
    def name_parser_type(self, name_parser_type):
        """Sets the name_parser_type of this PersonalNameParsedOut.

        Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.

        :param name_parser_type: The name_parser_type of this PersonalNameParsedOut.
        :type name_parser_type: str
        """
        allowed_values = ["FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx"]  # noqa: E501
        if name_parser_type not in allowed_values:
            raise ValueError(
                "Invalid value for `name_parser_type` ({0}), must be one of {1}"
                .format(name_parser_type, allowed_values)
            )

        self._name_parser_type = name_parser_type

    @property
    def name_parser_type_alt(self):
        """Gets the name_parser_type_alt of this PersonalNameParsedOut.

        Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.

        :return: The name_parser_type_alt of this PersonalNameParsedOut.
        :rtype: str
        """
        return self._name_parser_type_alt

    @name_parser_type_alt.setter
    def name_parser_type_alt(self, name_parser_type_alt):
        """Sets the name_parser_type_alt of this PersonalNameParsedOut.

        Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.

        :param name_parser_type_alt: The name_parser_type_alt of this PersonalNameParsedOut.
        :type name_parser_type_alt: str
        """
        allowed_values = ["FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx"]  # noqa: E501
        if name_parser_type_alt not in allowed_values:
            raise ValueError(
                "Invalid value for `name_parser_type_alt` ({0}), must be one of {1}"
                .format(name_parser_type_alt, allowed_values)
            )

        self._name_parser_type_alt = name_parser_type_alt

    @property
    def score(self):
        """Gets the score of this PersonalNameParsedOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this PersonalNameParsedOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PersonalNameParsedOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this PersonalNameParsedOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this PersonalNameParsedOut.


        :return: The script of this PersonalNameParsedOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this PersonalNameParsedOut.


        :param script: The script of this PersonalNameParsedOut.
        :type script: str
        """

        self._script = script
