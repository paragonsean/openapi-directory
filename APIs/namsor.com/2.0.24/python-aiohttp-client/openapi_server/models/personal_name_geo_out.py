# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalNameGeoOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries_top: List[str]=None, country: str=None, country_alt: str=None, id: str=None, name: str=None, probability_alt_calibrated: float=None, probability_calibrated: float=None, region: str=None, score: float=None, script: str=None, sub_region: str=None, top_region: str=None):
        """PersonalNameGeoOut - a model defined in OpenAPI

        :param countries_top: The countries_top of this PersonalNameGeoOut.
        :param country: The country of this PersonalNameGeoOut.
        :param country_alt: The country_alt of this PersonalNameGeoOut.
        :param id: The id of this PersonalNameGeoOut.
        :param name: The name of this PersonalNameGeoOut.
        :param probability_alt_calibrated: The probability_alt_calibrated of this PersonalNameGeoOut.
        :param probability_calibrated: The probability_calibrated of this PersonalNameGeoOut.
        :param region: The region of this PersonalNameGeoOut.
        :param score: The score of this PersonalNameGeoOut.
        :param script: The script of this PersonalNameGeoOut.
        :param sub_region: The sub_region of this PersonalNameGeoOut.
        :param top_region: The top_region of this PersonalNameGeoOut.
        """
        self.openapi_types = {
            'countries_top': List[str],
            'country': str,
            'country_alt': str,
            'id': str,
            'name': str,
            'probability_alt_calibrated': float,
            'probability_calibrated': float,
            'region': str,
            'score': float,
            'script': str,
            'sub_region': str,
            'top_region': str
        }

        self.attribute_map = {
            'countries_top': 'countriesTop',
            'country': 'country',
            'country_alt': 'countryAlt',
            'id': 'id',
            'name': 'name',
            'probability_alt_calibrated': 'probabilityAltCalibrated',
            'probability_calibrated': 'probabilityCalibrated',
            'region': 'region',
            'score': 'score',
            'script': 'script',
            'sub_region': 'subRegion',
            'top_region': 'topRegion'
        }

        self._countries_top = countries_top
        self._country = country
        self._country_alt = country_alt
        self._id = id
        self._name = name
        self._probability_alt_calibrated = probability_alt_calibrated
        self._probability_calibrated = probability_calibrated
        self._region = region
        self._score = score
        self._script = script
        self._sub_region = sub_region
        self._top_region = top_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalNameGeoOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalNameGeoOut of this PersonalNameGeoOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries_top(self):
        """Gets the countries_top of this PersonalNameGeoOut.

        List countries (top 10)

        :return: The countries_top of this PersonalNameGeoOut.
        :rtype: List[str]
        """
        return self._countries_top

    @countries_top.setter
    def countries_top(self, countries_top):
        """Sets the countries_top of this PersonalNameGeoOut.

        List countries (top 10)

        :param countries_top: The countries_top of this PersonalNameGeoOut.
        :type countries_top: List[str]
        """

        self._countries_top = countries_top

    @property
    def country(self):
        """Gets the country of this PersonalNameGeoOut.

        Most likely country 

        :return: The country of this PersonalNameGeoOut.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PersonalNameGeoOut.

        Most likely country 

        :param country: The country of this PersonalNameGeoOut.
        :type country: str
        """

        self._country = country

    @property
    def country_alt(self):
        """Gets the country_alt of this PersonalNameGeoOut.

        Second best alternative : country 

        :return: The country_alt of this PersonalNameGeoOut.
        :rtype: str
        """
        return self._country_alt

    @country_alt.setter
    def country_alt(self, country_alt):
        """Sets the country_alt of this PersonalNameGeoOut.

        Second best alternative : country 

        :param country_alt: The country_alt of this PersonalNameGeoOut.
        :type country_alt: str
        """

        self._country_alt = country_alt

    @property
    def id(self):
        """Gets the id of this PersonalNameGeoOut.


        :return: The id of this PersonalNameGeoOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalNameGeoOut.


        :param id: The id of this PersonalNameGeoOut.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PersonalNameGeoOut.

        The input name.

        :return: The name of this PersonalNameGeoOut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonalNameGeoOut.

        The input name.

        :param name: The name of this PersonalNameGeoOut.
        :type name: str
        """

        self._name = name

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this PersonalNameGeoOut.

        The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_alt_calibrated of this PersonalNameGeoOut.
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this PersonalNameGeoOut.

        The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 

        :param probability_alt_calibrated: The probability_alt_calibrated of this PersonalNameGeoOut.
        :type probability_alt_calibrated: float
        """
        if probability_alt_calibrated is not None and probability_alt_calibrated > 1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value less than or equal to `1`")
        if probability_alt_calibrated is not None and probability_alt_calibrated < -1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_alt_calibrated = probability_alt_calibrated

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this PersonalNameGeoOut.

        The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_calibrated of this PersonalNameGeoOut.
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this PersonalNameGeoOut.

        The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 

        :param probability_calibrated: The probability_calibrated of this PersonalNameGeoOut.
        :type probability_calibrated: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")
        if probability_calibrated is not None and probability_calibrated < -1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_calibrated = probability_calibrated

    @property
    def region(self):
        """Gets the region of this PersonalNameGeoOut.

        Most likely region (based on country ISO2 code)

        :return: The region of this PersonalNameGeoOut.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PersonalNameGeoOut.

        Most likely region (based on country ISO2 code)

        :param region: The region of this PersonalNameGeoOut.
        :type region: str
        """

        self._region = region

    @property
    def score(self):
        """Gets the score of this PersonalNameGeoOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this PersonalNameGeoOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PersonalNameGeoOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this PersonalNameGeoOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this PersonalNameGeoOut.


        :return: The script of this PersonalNameGeoOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this PersonalNameGeoOut.


        :param script: The script of this PersonalNameGeoOut.
        :type script: str
        """

        self._script = script

    @property
    def sub_region(self):
        """Gets the sub_region of this PersonalNameGeoOut.

        Most likely sub region (based on country ISO2 code)

        :return: The sub_region of this PersonalNameGeoOut.
        :rtype: str
        """
        return self._sub_region

    @sub_region.setter
    def sub_region(self, sub_region):
        """Sets the sub_region of this PersonalNameGeoOut.

        Most likely sub region (based on country ISO2 code)

        :param sub_region: The sub_region of this PersonalNameGeoOut.
        :type sub_region: str
        """

        self._sub_region = sub_region

    @property
    def top_region(self):
        """Gets the top_region of this PersonalNameGeoOut.

        Most likely top region (based on country ISO2 code)

        :return: The top_region of this PersonalNameGeoOut.
        :rtype: str
        """
        return self._top_region

    @top_region.setter
    def top_region(self, top_region):
        """Sets the top_region of this PersonalNameGeoOut.

        Most likely top region (based on country ISO2 code)

        :param top_region: The top_region of this PersonalNameGeoOut.
        :type top_region: str
        """

        self._top_region = top_region
