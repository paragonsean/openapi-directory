# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalNameReligionedOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, probability_alt_calibrated: float=None, probability_calibrated: float=None, religion: str=None, religion_alt: str=None, religions_top: List[str]=None, score: float=None, script: str=None):
        """PersonalNameReligionedOut - a model defined in OpenAPI

        :param id: The id of this PersonalNameReligionedOut.
        :param name: The name of this PersonalNameReligionedOut.
        :param probability_alt_calibrated: The probability_alt_calibrated of this PersonalNameReligionedOut.
        :param probability_calibrated: The probability_calibrated of this PersonalNameReligionedOut.
        :param religion: The religion of this PersonalNameReligionedOut.
        :param religion_alt: The religion_alt of this PersonalNameReligionedOut.
        :param religions_top: The religions_top of this PersonalNameReligionedOut.
        :param score: The score of this PersonalNameReligionedOut.
        :param script: The script of this PersonalNameReligionedOut.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'probability_alt_calibrated': float,
            'probability_calibrated': float,
            'religion': str,
            'religion_alt': str,
            'religions_top': List[str],
            'score': float,
            'script': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'probability_alt_calibrated': 'probabilityAltCalibrated',
            'probability_calibrated': 'probabilityCalibrated',
            'religion': 'religion',
            'religion_alt': 'religionAlt',
            'religions_top': 'religionsTop',
            'score': 'score',
            'script': 'script'
        }

        self._id = id
        self._name = name
        self._probability_alt_calibrated = probability_alt_calibrated
        self._probability_calibrated = probability_calibrated
        self._religion = religion
        self._religion_alt = religion_alt
        self._religions_top = religions_top
        self._score = score
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalNameReligionedOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalNameReligionedOut of this PersonalNameReligionedOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PersonalNameReligionedOut.


        :return: The id of this PersonalNameReligionedOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalNameReligionedOut.


        :param id: The id of this PersonalNameReligionedOut.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PersonalNameReligionedOut.

        The input name.

        :return: The name of this PersonalNameReligionedOut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonalNameReligionedOut.

        The input name.

        :param name: The name of this PersonalNameReligionedOut.
        :type name: str
        """

        self._name = name

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this PersonalNameReligionedOut.

        The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_alt_calibrated of this PersonalNameReligionedOut.
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this PersonalNameReligionedOut.

        The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 

        :param probability_alt_calibrated: The probability_alt_calibrated of this PersonalNameReligionedOut.
        :type probability_alt_calibrated: float
        """
        if probability_alt_calibrated is not None and probability_alt_calibrated > 1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value less than or equal to `1`")
        if probability_alt_calibrated is not None and probability_alt_calibrated < -1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_alt_calibrated = probability_alt_calibrated

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this PersonalNameReligionedOut.

        The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_calibrated of this PersonalNameReligionedOut.
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this PersonalNameReligionedOut.

        The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 

        :param probability_calibrated: The probability_calibrated of this PersonalNameReligionedOut.
        :type probability_calibrated: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")
        if probability_calibrated is not None and probability_calibrated < -1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_calibrated = probability_calibrated

    @property
    def religion(self):
        """Gets the religion of this PersonalNameReligionedOut.

        Most likely religion

        :return: The religion of this PersonalNameReligionedOut.
        :rtype: str
        """
        return self._religion

    @religion.setter
    def religion(self, religion):
        """Sets the religion of this PersonalNameReligionedOut.

        Most likely religion

        :param religion: The religion of this PersonalNameReligionedOut.
        :type religion: str
        """

        self._religion = religion

    @property
    def religion_alt(self):
        """Gets the religion_alt of this PersonalNameReligionedOut.

        Second best alternative : religion 

        :return: The religion_alt of this PersonalNameReligionedOut.
        :rtype: str
        """
        return self._religion_alt

    @religion_alt.setter
    def religion_alt(self, religion_alt):
        """Sets the religion_alt of this PersonalNameReligionedOut.

        Second best alternative : religion 

        :param religion_alt: The religion_alt of this PersonalNameReligionedOut.
        :type religion_alt: str
        """

        self._religion_alt = religion_alt

    @property
    def religions_top(self):
        """Gets the religions_top of this PersonalNameReligionedOut.

        List countries (top 10)

        :return: The religions_top of this PersonalNameReligionedOut.
        :rtype: List[str]
        """
        return self._religions_top

    @religions_top.setter
    def religions_top(self, religions_top):
        """Sets the religions_top of this PersonalNameReligionedOut.

        List countries (top 10)

        :param religions_top: The religions_top of this PersonalNameReligionedOut.
        :type religions_top: List[str]
        """

        self._religions_top = religions_top

    @property
    def score(self):
        """Gets the score of this PersonalNameReligionedOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this PersonalNameReligionedOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PersonalNameReligionedOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this PersonalNameReligionedOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this PersonalNameReligionedOut.


        :return: The script of this PersonalNameReligionedOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this PersonalNameReligionedOut.


        :param script: The script of this PersonalNameReligionedOut.
        :type script: str
        """

        self._script = script
