# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirstLastNameUSRaceEthnicityOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, id: str=None, last_name: str=None, probability_alt_calibrated: float=None, probability_calibrated: float=None, race_ethnicities_top: List[str]=None, race_ethnicity: str=None, race_ethnicity_alt: str=None, score: float=None, script: str=None):
        """FirstLastNameUSRaceEthnicityOut - a model defined in OpenAPI

        :param first_name: The first_name of this FirstLastNameUSRaceEthnicityOut.
        :param id: The id of this FirstLastNameUSRaceEthnicityOut.
        :param last_name: The last_name of this FirstLastNameUSRaceEthnicityOut.
        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameUSRaceEthnicityOut.
        :param probability_calibrated: The probability_calibrated of this FirstLastNameUSRaceEthnicityOut.
        :param race_ethnicities_top: The race_ethnicities_top of this FirstLastNameUSRaceEthnicityOut.
        :param race_ethnicity: The race_ethnicity of this FirstLastNameUSRaceEthnicityOut.
        :param race_ethnicity_alt: The race_ethnicity_alt of this FirstLastNameUSRaceEthnicityOut.
        :param score: The score of this FirstLastNameUSRaceEthnicityOut.
        :param script: The script of this FirstLastNameUSRaceEthnicityOut.
        """
        self.openapi_types = {
            'first_name': str,
            'id': str,
            'last_name': str,
            'probability_alt_calibrated': float,
            'probability_calibrated': float,
            'race_ethnicities_top': List[str],
            'race_ethnicity': str,
            'race_ethnicity_alt': str,
            'score': float,
            'script': str
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'probability_alt_calibrated': 'probabilityAltCalibrated',
            'probability_calibrated': 'probabilityCalibrated',
            'race_ethnicities_top': 'raceEthnicitiesTop',
            'race_ethnicity': 'raceEthnicity',
            'race_ethnicity_alt': 'raceEthnicityAlt',
            'score': 'score',
            'script': 'script'
        }

        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._probability_alt_calibrated = probability_alt_calibrated
        self._probability_calibrated = probability_calibrated
        self._race_ethnicities_top = race_ethnicities_top
        self._race_ethnicity = race_ethnicity
        self._race_ethnicity_alt = race_ethnicity_alt
        self._score = score
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirstLastNameUSRaceEthnicityOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirstLastNameUSRaceEthnicityOut of this FirstLastNameUSRaceEthnicityOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this FirstLastNameUSRaceEthnicityOut.

        The first name (also known as given name)

        :return: The first_name of this FirstLastNameUSRaceEthnicityOut.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FirstLastNameUSRaceEthnicityOut.

        The first name (also known as given name)

        :param first_name: The first_name of this FirstLastNameUSRaceEthnicityOut.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this FirstLastNameUSRaceEthnicityOut.


        :return: The id of this FirstLastNameUSRaceEthnicityOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FirstLastNameUSRaceEthnicityOut.


        :param id: The id of this FirstLastNameUSRaceEthnicityOut.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this FirstLastNameUSRaceEthnicityOut.

        The last name (also known as family name, or surname)

        :return: The last_name of this FirstLastNameUSRaceEthnicityOut.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FirstLastNameUSRaceEthnicityOut.

        The last name (also known as family name, or surname)

        :param last_name: The last_name of this FirstLastNameUSRaceEthnicityOut.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this FirstLastNameUSRaceEthnicityOut.

        The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_alt_calibrated of this FirstLastNameUSRaceEthnicityOut.
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this FirstLastNameUSRaceEthnicityOut.

        The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 = still calibrating. 

        :param probability_alt_calibrated: The probability_alt_calibrated of this FirstLastNameUSRaceEthnicityOut.
        :type probability_alt_calibrated: float
        """
        if probability_alt_calibrated is not None and probability_alt_calibrated > 1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value less than or equal to `1`")
        if probability_alt_calibrated is not None and probability_alt_calibrated < -1:
            raise ValueError("Invalid value for `probability_alt_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_alt_calibrated = probability_alt_calibrated

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this FirstLastNameUSRaceEthnicityOut.

        The calibrated probability for raceEthnicity to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_calibrated of this FirstLastNameUSRaceEthnicityOut.
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this FirstLastNameUSRaceEthnicityOut.

        The calibrated probability for raceEthnicity to have been guessed correctly. -1 = still calibrating. 

        :param probability_calibrated: The probability_calibrated of this FirstLastNameUSRaceEthnicityOut.
        :type probability_calibrated: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")
        if probability_calibrated is not None and probability_calibrated < -1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_calibrated = probability_calibrated

    @property
    def race_ethnicities_top(self):
        """Gets the race_ethnicities_top of this FirstLastNameUSRaceEthnicityOut.

        List 'race'/ethnicities

        :return: The race_ethnicities_top of this FirstLastNameUSRaceEthnicityOut.
        :rtype: List[str]
        """
        return self._race_ethnicities_top

    @race_ethnicities_top.setter
    def race_ethnicities_top(self, race_ethnicities_top):
        """Sets the race_ethnicities_top of this FirstLastNameUSRaceEthnicityOut.

        List 'race'/ethnicities

        :param race_ethnicities_top: The race_ethnicities_top of this FirstLastNameUSRaceEthnicityOut.
        :type race_ethnicities_top: List[str]
        """

        self._race_ethnicities_top = race_ethnicities_top

    @property
    def race_ethnicity(self):
        """Gets the race_ethnicity of this FirstLastNameUSRaceEthnicityOut.

        Most likely US 'race'/ethnicity

        :return: The race_ethnicity of this FirstLastNameUSRaceEthnicityOut.
        :rtype: str
        """
        return self._race_ethnicity

    @race_ethnicity.setter
    def race_ethnicity(self, race_ethnicity):
        """Sets the race_ethnicity of this FirstLastNameUSRaceEthnicityOut.

        Most likely US 'race'/ethnicity

        :param race_ethnicity: The race_ethnicity of this FirstLastNameUSRaceEthnicityOut.
        :type race_ethnicity: str
        """
        allowed_values = ["W_NL", "HL", "A", "B_NL", "AI_AN", "PI"]  # noqa: E501
        if race_ethnicity not in allowed_values:
            raise ValueError(
                "Invalid value for `race_ethnicity` ({0}), must be one of {1}"
                .format(race_ethnicity, allowed_values)
            )

        self._race_ethnicity = race_ethnicity

    @property
    def race_ethnicity_alt(self):
        """Gets the race_ethnicity_alt of this FirstLastNameUSRaceEthnicityOut.

        Second most likely US 'race'/ethnicity

        :return: The race_ethnicity_alt of this FirstLastNameUSRaceEthnicityOut.
        :rtype: str
        """
        return self._race_ethnicity_alt

    @race_ethnicity_alt.setter
    def race_ethnicity_alt(self, race_ethnicity_alt):
        """Sets the race_ethnicity_alt of this FirstLastNameUSRaceEthnicityOut.

        Second most likely US 'race'/ethnicity

        :param race_ethnicity_alt: The race_ethnicity_alt of this FirstLastNameUSRaceEthnicityOut.
        :type race_ethnicity_alt: str
        """
        allowed_values = ["W_NL", "HL", "A", "B_NL", "AI_AN", "PI"]  # noqa: E501
        if race_ethnicity_alt not in allowed_values:
            raise ValueError(
                "Invalid value for `race_ethnicity_alt` ({0}), must be one of {1}"
                .format(race_ethnicity_alt, allowed_values)
            )

        self._race_ethnicity_alt = race_ethnicity_alt

    @property
    def score(self):
        """Gets the score of this FirstLastNameUSRaceEthnicityOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this FirstLastNameUSRaceEthnicityOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this FirstLastNameUSRaceEthnicityOut.

        Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this FirstLastNameUSRaceEthnicityOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this FirstLastNameUSRaceEthnicityOut.


        :return: The script of this FirstLastNameUSRaceEthnicityOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this FirstLastNameUSRaceEthnicityOut.


        :param script: The script of this FirstLastNameUSRaceEthnicityOut.
        :type script: str
        """

        self._script = script
