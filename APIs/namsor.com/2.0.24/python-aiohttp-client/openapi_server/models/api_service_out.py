# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIServiceOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_in_units: int=None, service_group: str=None, service_name: str=None):
        """APIServiceOut - a model defined in OpenAPI

        :param cost_in_units: The cost_in_units of this APIServiceOut.
        :param service_group: The service_group of this APIServiceOut.
        :param service_name: The service_name of this APIServiceOut.
        """
        self.openapi_types = {
            'cost_in_units': int,
            'service_group': str,
            'service_name': str
        }

        self.attribute_map = {
            'cost_in_units': 'costInUnits',
            'service_group': 'serviceGroup',
            'service_name': 'serviceName'
        }

        self._cost_in_units = cost_in_units
        self._service_group = service_group
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIServiceOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIServiceOut of this APIServiceOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_in_units(self):
        """Gets the cost_in_units of this APIServiceOut.

        Indicates how many units per call this service costs (ex. the number of units per name)

        :return: The cost_in_units of this APIServiceOut.
        :rtype: int
        """
        return self._cost_in_units

    @cost_in_units.setter
    def cost_in_units(self, cost_in_units):
        """Sets the cost_in_units of this APIServiceOut.

        Indicates how many units per call this service costs (ex. the number of units per name)

        :param cost_in_units: The cost_in_units of this APIServiceOut.
        :type cost_in_units: int
        """

        self._cost_in_units = cost_in_units

    @property
    def service_group(self):
        """Gets the service_group of this APIServiceOut.

        Groups together classifiers providing a similar service (ex. gender groups personalname_gender and personalfullname_gender)

        :return: The service_group of this APIServiceOut.
        :rtype: str
        """
        return self._service_group

    @service_group.setter
    def service_group(self, service_group):
        """Sets the service_group of this APIServiceOut.

        Groups together classifiers providing a similar service (ex. gender groups personalname_gender and personalfullname_gender)

        :param service_group: The service_group of this APIServiceOut.
        :type service_group: str
        """

        self._service_group = service_group

    @property
    def service_name(self):
        """Gets the service_name of this APIServiceOut.

        A service name corresponds to classifier name in apiStatus (ex. personalname_gender or personalfullname_gender)

        :return: The service_name of this APIServiceOut.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this APIServiceOut.

        A service name corresponds to classifier name in apiStatus (ex. personalname_gender or personalfullname_gender)

        :param service_name: The service_name of this APIServiceOut.
        :type service_name: str
        """

        self._service_name = service_name
