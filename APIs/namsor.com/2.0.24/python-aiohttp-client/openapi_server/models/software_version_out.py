# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SoftwareVersionOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, software_name_and_version: str=None, software_version: List[int]=None):
        """SoftwareVersionOut - a model defined in OpenAPI

        :param software_name_and_version: The software_name_and_version of this SoftwareVersionOut.
        :param software_version: The software_version of this SoftwareVersionOut.
        """
        self.openapi_types = {
            'software_name_and_version': str,
            'software_version': List[int]
        }

        self.attribute_map = {
            'software_name_and_version': 'softwareNameAndVersion',
            'software_version': 'softwareVersion'
        }

        self._software_name_and_version = software_name_and_version
        self._software_version = software_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareVersionOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareVersionOut of this SoftwareVersionOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def software_name_and_version(self):
        """Gets the software_name_and_version of this SoftwareVersionOut.

        The software version

        :return: The software_name_and_version of this SoftwareVersionOut.
        :rtype: str
        """
        return self._software_name_and_version

    @software_name_and_version.setter
    def software_name_and_version(self, software_name_and_version):
        """Sets the software_name_and_version of this SoftwareVersionOut.

        The software version

        :param software_name_and_version: The software_name_and_version of this SoftwareVersionOut.
        :type software_name_and_version: str
        """

        self._software_name_and_version = software_name_and_version

    @property
    def software_version(self):
        """Gets the software_version of this SoftwareVersionOut.

        The software version major minor build

        :return: The software_version of this SoftwareVersionOut.
        :rtype: List[int]
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this SoftwareVersionOut.

        The software version major minor build

        :param software_version: The software_version of this SoftwareVersionOut.
        :type software_version: List[int]
        """

        self._software_version = software_version
