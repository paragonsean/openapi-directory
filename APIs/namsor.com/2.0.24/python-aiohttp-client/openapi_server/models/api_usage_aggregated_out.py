# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIUsageAggregatedOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, col_headers: List[str]=None, data: List[List[int]]=None, history_truncated: bool=None, period_end: int=None, period_start: int=None, row_headers: List[str]=None, time_unit: str=None, total_usage: int=None):
        """APIUsageAggregatedOut - a model defined in OpenAPI

        :param col_headers: The col_headers of this APIUsageAggregatedOut.
        :param data: The data of this APIUsageAggregatedOut.
        :param history_truncated: The history_truncated of this APIUsageAggregatedOut.
        :param period_end: The period_end of this APIUsageAggregatedOut.
        :param period_start: The period_start of this APIUsageAggregatedOut.
        :param row_headers: The row_headers of this APIUsageAggregatedOut.
        :param time_unit: The time_unit of this APIUsageAggregatedOut.
        :param total_usage: The total_usage of this APIUsageAggregatedOut.
        """
        self.openapi_types = {
            'col_headers': List[str],
            'data': List[List[int]],
            'history_truncated': bool,
            'period_end': int,
            'period_start': int,
            'row_headers': List[str],
            'time_unit': str,
            'total_usage': int
        }

        self.attribute_map = {
            'col_headers': 'colHeaders',
            'data': 'data',
            'history_truncated': 'historyTruncated',
            'period_end': 'periodEnd',
            'period_start': 'periodStart',
            'row_headers': 'rowHeaders',
            'time_unit': 'timeUnit',
            'total_usage': 'totalUsage'
        }

        self._col_headers = col_headers
        self._data = data
        self._history_truncated = history_truncated
        self._period_end = period_end
        self._period_start = period_start
        self._row_headers = row_headers
        self._time_unit = time_unit
        self._total_usage = total_usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIUsageAggregatedOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIUsageAggregatedOut of this APIUsageAggregatedOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def col_headers(self):
        """Gets the col_headers of this APIUsageAggregatedOut.

        apiServices as column headers 

        :return: The col_headers of this APIUsageAggregatedOut.
        :rtype: List[str]
        """
        return self._col_headers

    @col_headers.setter
    def col_headers(self, col_headers):
        """Sets the col_headers of this APIUsageAggregatedOut.

        apiServices as column headers 

        :param col_headers: The col_headers of this APIUsageAggregatedOut.
        :type col_headers: List[str]
        """

        self._col_headers = col_headers

    @property
    def data(self):
        """Gets the data of this APIUsageAggregatedOut.

        Data points : usage per DAY, WEEK or MONTH and per apiService

        :return: The data of this APIUsageAggregatedOut.
        :rtype: List[List[int]]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this APIUsageAggregatedOut.

        Data points : usage per DAY, WEEK or MONTH and per apiService

        :param data: The data of this APIUsageAggregatedOut.
        :type data: List[List[int]]
        """

        self._data = data

    @property
    def history_truncated(self):
        """Gets the history_truncated of this APIUsageAggregatedOut.

        If the history was truncaded due to data limit

        :return: The history_truncated of this APIUsageAggregatedOut.
        :rtype: bool
        """
        return self._history_truncated

    @history_truncated.setter
    def history_truncated(self, history_truncated):
        """Sets the history_truncated of this APIUsageAggregatedOut.

        If the history was truncaded due to data limit

        :param history_truncated: The history_truncated of this APIUsageAggregatedOut.
        :type history_truncated: bool
        """

        self._history_truncated = history_truncated

    @property
    def period_end(self):
        """Gets the period_end of this APIUsageAggregatedOut.

        End datetime of the reporting period

        :return: The period_end of this APIUsageAggregatedOut.
        :rtype: int
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this APIUsageAggregatedOut.

        End datetime of the reporting period

        :param period_end: The period_end of this APIUsageAggregatedOut.
        :type period_end: int
        """

        self._period_end = period_end

    @property
    def period_start(self):
        """Gets the period_start of this APIUsageAggregatedOut.

        Start datetime of the reporting period

        :return: The period_start of this APIUsageAggregatedOut.
        :rtype: int
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this APIUsageAggregatedOut.

        Start datetime of the reporting period

        :param period_start: The period_start of this APIUsageAggregatedOut.
        :type period_start: int
        """

        self._period_start = period_start

    @property
    def row_headers(self):
        """Gets the row_headers of this APIUsageAggregatedOut.

        dates as row headers 

        :return: The row_headers of this APIUsageAggregatedOut.
        :rtype: List[str]
        """
        return self._row_headers

    @row_headers.setter
    def row_headers(self, row_headers):
        """Sets the row_headers of this APIUsageAggregatedOut.

        dates as row headers 

        :param row_headers: The row_headers of this APIUsageAggregatedOut.
        :type row_headers: List[str]
        """

        self._row_headers = row_headers

    @property
    def time_unit(self):
        """Gets the time_unit of this APIUsageAggregatedOut.

        Time unit is DAY, WEEK or MONTH depending on prior usage

        :return: The time_unit of this APIUsageAggregatedOut.
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this APIUsageAggregatedOut.

        Time unit is DAY, WEEK or MONTH depending on prior usage

        :param time_unit: The time_unit of this APIUsageAggregatedOut.
        :type time_unit: str
        """

        self._time_unit = time_unit

    @property
    def total_usage(self):
        """Gets the total_usage of this APIUsageAggregatedOut.

        Total usage in the current period

        :return: The total_usage of this APIUsageAggregatedOut.
        :rtype: int
        """
        return self._total_usage

    @total_usage.setter
    def total_usage(self, total_usage):
        """Sets the total_usage of this APIUsageAggregatedOut.

        Total usage in the current period

        :param total_usage: The total_usage of this APIUsageAggregatedOut.
        :type total_usage: int
        """

        self._total_usage = total_usage
