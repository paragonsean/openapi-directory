# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIBillingPeriodUsageOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, billing_status: str=None, hard_limit: int=None, period_ended: int=None, period_started: int=None, soft_limit: int=None, stripe_current_period_end: int=None, stripe_current_period_start: int=None, subscription_started: int=None, usage: int=None):
        """APIBillingPeriodUsageOut - a model defined in OpenAPI

        :param api_key: The api_key of this APIBillingPeriodUsageOut.
        :param billing_status: The billing_status of this APIBillingPeriodUsageOut.
        :param hard_limit: The hard_limit of this APIBillingPeriodUsageOut.
        :param period_ended: The period_ended of this APIBillingPeriodUsageOut.
        :param period_started: The period_started of this APIBillingPeriodUsageOut.
        :param soft_limit: The soft_limit of this APIBillingPeriodUsageOut.
        :param stripe_current_period_end: The stripe_current_period_end of this APIBillingPeriodUsageOut.
        :param stripe_current_period_start: The stripe_current_period_start of this APIBillingPeriodUsageOut.
        :param subscription_started: The subscription_started of this APIBillingPeriodUsageOut.
        :param usage: The usage of this APIBillingPeriodUsageOut.
        """
        self.openapi_types = {
            'api_key': str,
            'billing_status': str,
            'hard_limit': int,
            'period_ended': int,
            'period_started': int,
            'soft_limit': int,
            'stripe_current_period_end': int,
            'stripe_current_period_start': int,
            'subscription_started': int,
            'usage': int
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'billing_status': 'billingStatus',
            'hard_limit': 'hardLimit',
            'period_ended': 'periodEnded',
            'period_started': 'periodStarted',
            'soft_limit': 'softLimit',
            'stripe_current_period_end': 'stripeCurrentPeriodEnd',
            'stripe_current_period_start': 'stripeCurrentPeriodStart',
            'subscription_started': 'subscriptionStarted',
            'usage': 'usage'
        }

        self._api_key = api_key
        self._billing_status = billing_status
        self._hard_limit = hard_limit
        self._period_ended = period_ended
        self._period_started = period_started
        self._soft_limit = soft_limit
        self._stripe_current_period_end = stripe_current_period_end
        self._stripe_current_period_start = stripe_current_period_start
        self._subscription_started = subscription_started
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIBillingPeriodUsageOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIBillingPeriodUsageOut of this APIBillingPeriodUsageOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this APIBillingPeriodUsageOut.

        User API Key.

        :return: The api_key of this APIBillingPeriodUsageOut.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this APIBillingPeriodUsageOut.

        User API Key.

        :param api_key: The api_key of this APIBillingPeriodUsageOut.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def billing_status(self):
        """Gets the billing_status of this APIBillingPeriodUsageOut.

        Current period billing status ex OPEN.

        :return: The billing_status of this APIBillingPeriodUsageOut.
        :rtype: str
        """
        return self._billing_status

    @billing_status.setter
    def billing_status(self, billing_status):
        """Sets the billing_status of this APIBillingPeriodUsageOut.

        Current period billing status ex OPEN.

        :param billing_status: The billing_status of this APIBillingPeriodUsageOut.
        :type billing_status: str
        """

        self._billing_status = billing_status

    @property
    def hard_limit(self):
        """Gets the hard_limit of this APIBillingPeriodUsageOut.

        Current period hard limit (reaching the limit sends an email notification and blocks the API Key).

        :return: The hard_limit of this APIBillingPeriodUsageOut.
        :rtype: int
        """
        return self._hard_limit

    @hard_limit.setter
    def hard_limit(self, hard_limit):
        """Sets the hard_limit of this APIBillingPeriodUsageOut.

        Current period hard limit (reaching the limit sends an email notification and blocks the API Key).

        :param hard_limit: The hard_limit of this APIBillingPeriodUsageOut.
        :type hard_limit: int
        """

        self._hard_limit = hard_limit

    @property
    def period_ended(self):
        """Gets the period_ended of this APIBillingPeriodUsageOut.

        Datetime when the the plan's current period endend.

        :return: The period_ended of this APIBillingPeriodUsageOut.
        :rtype: int
        """
        return self._period_ended

    @period_ended.setter
    def period_ended(self, period_ended):
        """Sets the period_ended of this APIBillingPeriodUsageOut.

        Datetime when the the plan's current period endend.

        :param period_ended: The period_ended of this APIBillingPeriodUsageOut.
        :type period_ended: int
        """

        self._period_ended = period_ended

    @property
    def period_started(self):
        """Gets the period_started of this APIBillingPeriodUsageOut.

        Datetime when the the plan's current period started.

        :return: The period_started of this APIBillingPeriodUsageOut.
        :rtype: int
        """
        return self._period_started

    @period_started.setter
    def period_started(self, period_started):
        """Sets the period_started of this APIBillingPeriodUsageOut.

        Datetime when the the plan's current period started.

        :param period_started: The period_started of this APIBillingPeriodUsageOut.
        :type period_started: int
        """

        self._period_started = period_started

    @property
    def soft_limit(self):
        """Gets the soft_limit of this APIBillingPeriodUsageOut.

        Current period soft limit (reaching the limit sends an email notification).

        :return: The soft_limit of this APIBillingPeriodUsageOut.
        :rtype: int
        """
        return self._soft_limit

    @soft_limit.setter
    def soft_limit(self, soft_limit):
        """Sets the soft_limit of this APIBillingPeriodUsageOut.

        Current period soft limit (reaching the limit sends an email notification).

        :param soft_limit: The soft_limit of this APIBillingPeriodUsageOut.
        :type soft_limit: int
        """

        self._soft_limit = soft_limit

    @property
    def stripe_current_period_end(self):
        """Gets the stripe_current_period_end of this APIBillingPeriodUsageOut.

        Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.

        :return: The stripe_current_period_end of this APIBillingPeriodUsageOut.
        :rtype: int
        """
        return self._stripe_current_period_end

    @stripe_current_period_end.setter
    def stripe_current_period_end(self, stripe_current_period_end):
        """Sets the stripe_current_period_end of this APIBillingPeriodUsageOut.

        Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.

        :param stripe_current_period_end: The stripe_current_period_end of this APIBillingPeriodUsageOut.
        :type stripe_current_period_end: int
        """

        self._stripe_current_period_end = stripe_current_period_end

    @property
    def stripe_current_period_start(self):
        """Gets the stripe_current_period_start of this APIBillingPeriodUsageOut.

        Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.

        :return: The stripe_current_period_start of this APIBillingPeriodUsageOut.
        :rtype: int
        """
        return self._stripe_current_period_start

    @stripe_current_period_start.setter
    def stripe_current_period_start(self, stripe_current_period_start):
        """Sets the stripe_current_period_start of this APIBillingPeriodUsageOut.

        Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.

        :param stripe_current_period_start: The stripe_current_period_start of this APIBillingPeriodUsageOut.
        :type stripe_current_period_start: int
        """

        self._stripe_current_period_start = stripe_current_period_start

    @property
    def subscription_started(self):
        """Gets the subscription_started of this APIBillingPeriodUsageOut.

        Datetime when the user subscribed to the plan.

        :return: The subscription_started of this APIBillingPeriodUsageOut.
        :rtype: int
        """
        return self._subscription_started

    @subscription_started.setter
    def subscription_started(self, subscription_started):
        """Sets the subscription_started of this APIBillingPeriodUsageOut.

        Datetime when the user subscribed to the plan.

        :param subscription_started: The subscription_started of this APIBillingPeriodUsageOut.
        :type subscription_started: int
        """

        self._subscription_started = subscription_started

    @property
    def usage(self):
        """Gets the usage of this APIBillingPeriodUsageOut.

        Current period usage in units (NB some API endpoints use more than one unit).

        :return: The usage of this APIBillingPeriodUsageOut.
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this APIBillingPeriodUsageOut.

        Current period usage in units (NB some API endpoints use more than one unit).

        :param usage: The usage of this APIBillingPeriodUsageOut.
        :type usage: int
        """

        self._usage = usage
