# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIKeyOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, anonymized: bool=None, api_key: str=None, corporate: bool=None, disabled: bool=None, learnable: bool=None, partner: bool=None, striped: bool=None, user_id: str=None, vetted: bool=None):
        """APIKeyOut - a model defined in OpenAPI

        :param admin: The admin of this APIKeyOut.
        :param anonymized: The anonymized of this APIKeyOut.
        :param api_key: The api_key of this APIKeyOut.
        :param corporate: The corporate of this APIKeyOut.
        :param disabled: The disabled of this APIKeyOut.
        :param learnable: The learnable of this APIKeyOut.
        :param partner: The partner of this APIKeyOut.
        :param striped: The striped of this APIKeyOut.
        :param user_id: The user_id of this APIKeyOut.
        :param vetted: The vetted of this APIKeyOut.
        """
        self.openapi_types = {
            'admin': bool,
            'anonymized': bool,
            'api_key': str,
            'corporate': bool,
            'disabled': bool,
            'learnable': bool,
            'partner': bool,
            'striped': bool,
            'user_id': str,
            'vetted': bool
        }

        self.attribute_map = {
            'admin': 'admin',
            'anonymized': 'anonymized',
            'api_key': 'apiKey',
            'corporate': 'corporate',
            'disabled': 'disabled',
            'learnable': 'learnable',
            'partner': 'partner',
            'striped': 'striped',
            'user_id': 'userId',
            'vetted': 'vetted'
        }

        self._admin = admin
        self._anonymized = anonymized
        self._api_key = api_key
        self._corporate = corporate
        self._disabled = disabled
        self._learnable = learnable
        self._partner = partner
        self._striped = striped
        self._user_id = user_id
        self._vetted = vetted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIKeyOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIKeyOut of this APIKeyOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this APIKeyOut.

        The API Key has admin role.

        :return: The admin of this APIKeyOut.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this APIKeyOut.

        The API Key has admin role.

        :param admin: The admin of this APIKeyOut.
        :type admin: bool
        """

        self._admin = admin

    @property
    def anonymized(self):
        """Gets the anonymized of this APIKeyOut.

        The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).

        :return: The anonymized of this APIKeyOut.
        :rtype: bool
        """
        return self._anonymized

    @anonymized.setter
    def anonymized(self, anonymized):
        """Sets the anonymized of this APIKeyOut.

        The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).

        :param anonymized: The anonymized of this APIKeyOut.
        :type anonymized: bool
        """

        self._anonymized = anonymized

    @property
    def api_key(self):
        """Gets the api_key of this APIKeyOut.

        The user API Key.

        :return: The api_key of this APIKeyOut.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this APIKeyOut.

        The user API Key.

        :param api_key: The api_key of this APIKeyOut.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def corporate(self):
        """Gets the corporate of this APIKeyOut.

        The API Key has role corporate (ex SWIFT payments instead of Stripe payments).

        :return: The corporate of this APIKeyOut.
        :rtype: bool
        """
        return self._corporate

    @corporate.setter
    def corporate(self, corporate):
        """Sets the corporate of this APIKeyOut.

        The API Key has role corporate (ex SWIFT payments instead of Stripe payments).

        :param corporate: The corporate of this APIKeyOut.
        :type corporate: bool
        """

        self._corporate = corporate

    @property
    def disabled(self):
        """Gets the disabled of this APIKeyOut.

        The API Key is temporarily or permanently disabled.

        :return: The disabled of this APIKeyOut.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this APIKeyOut.

        The API Key is temporarily or permanently disabled.

        :param disabled: The disabled of this APIKeyOut.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def learnable(self):
        """Gets the learnable of this APIKeyOut.

        The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).

        :return: The learnable of this APIKeyOut.
        :rtype: bool
        """
        return self._learnable

    @learnable.setter
    def learnable(self, learnable):
        """Sets the learnable of this APIKeyOut.

        The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).

        :param learnable: The learnable of this APIKeyOut.
        :type learnable: bool
        """

        self._learnable = learnable

    @property
    def partner(self):
        """Gets the partner of this APIKeyOut.

        The API Key has partner role.

        :return: The partner of this APIKeyOut.
        :rtype: bool
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this APIKeyOut.

        The API Key has partner role.

        :param partner: The partner of this APIKeyOut.
        :type partner: bool
        """

        self._partner = partner

    @property
    def striped(self):
        """Gets the striped of this APIKeyOut.

        The API Key is associated to a valid Stripe account.

        :return: The striped of this APIKeyOut.
        :rtype: bool
        """
        return self._striped

    @striped.setter
    def striped(self, striped):
        """Sets the striped of this APIKeyOut.

        The API Key is associated to a valid Stripe account.

        :param striped: The striped of this APIKeyOut.
        :type striped: bool
        """

        self._striped = striped

    @property
    def user_id(self):
        """Gets the user_id of this APIKeyOut.

        The user identifier.

        :return: The user_id of this APIKeyOut.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this APIKeyOut.

        The user identifier.

        :param user_id: The user_id of this APIKeyOut.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def vetted(self):
        """Gets the vetted of this APIKeyOut.

        The API Key is vetted (assumed truthful) for machine learning.

        :return: The vetted of this APIKeyOut.
        :rtype: bool
        """
        return self._vetted

    @vetted.setter
    def vetted(self, vetted):
        """Sets the vetted of this APIKeyOut.

        The API Key is vetted (assumed truthful) for machine learning.

        :param vetted: The vetted of this APIKeyOut.
        :type vetted: bool
        """

        self._vetted = vetted
