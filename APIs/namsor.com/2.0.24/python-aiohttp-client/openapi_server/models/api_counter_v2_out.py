# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_key_out import APIKeyOut
from openapi_server import util


class APICounterV2Out(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: APIKeyOut=None, api_service: str=None, created_date_time: int=None, host_address: str=None, last_flushed_date_time: int=None, last_used_date_time: int=None, service_features_usage: Dict[str, int]=None, total_usage: int=None):
        """APICounterV2Out - a model defined in OpenAPI

        :param api_key: The api_key of this APICounterV2Out.
        :param api_service: The api_service of this APICounterV2Out.
        :param created_date_time: The created_date_time of this APICounterV2Out.
        :param host_address: The host_address of this APICounterV2Out.
        :param last_flushed_date_time: The last_flushed_date_time of this APICounterV2Out.
        :param last_used_date_time: The last_used_date_time of this APICounterV2Out.
        :param service_features_usage: The service_features_usage of this APICounterV2Out.
        :param total_usage: The total_usage of this APICounterV2Out.
        """
        self.openapi_types = {
            'api_key': APIKeyOut,
            'api_service': str,
            'created_date_time': int,
            'host_address': str,
            'last_flushed_date_time': int,
            'last_used_date_time': int,
            'service_features_usage': Dict[str, int],
            'total_usage': int
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'api_service': 'apiService',
            'created_date_time': 'createdDateTime',
            'host_address': 'hostAddress',
            'last_flushed_date_time': 'lastFlushedDateTime',
            'last_used_date_time': 'lastUsedDateTime',
            'service_features_usage': 'serviceFeaturesUsage',
            'total_usage': 'totalUsage'
        }

        self._api_key = api_key
        self._api_service = api_service
        self._created_date_time = created_date_time
        self._host_address = host_address
        self._last_flushed_date_time = last_flushed_date_time
        self._last_used_date_time = last_used_date_time
        self._service_features_usage = service_features_usage
        self._total_usage = total_usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APICounterV2Out':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APICounterV2Out of this APICounterV2Out.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this APICounterV2Out.


        :return: The api_key of this APICounterV2Out.
        :rtype: APIKeyOut
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this APICounterV2Out.


        :param api_key: The api_key of this APICounterV2Out.
        :type api_key: APIKeyOut
        """

        self._api_key = api_key

    @property
    def api_service(self):
        """Gets the api_service of this APICounterV2Out.

        The apiService corresponds to the classifier name.

        :return: The api_service of this APICounterV2Out.
        :rtype: str
        """
        return self._api_service

    @api_service.setter
    def api_service(self, api_service):
        """Sets the api_service of this APICounterV2Out.

        The apiService corresponds to the classifier name.

        :param api_service: The api_service of this APICounterV2Out.
        :type api_service: str
        """

        self._api_service = api_service

    @property
    def created_date_time(self):
        """Gets the created_date_time of this APICounterV2Out.

        The create datetime of the counter.

        :return: The created_date_time of this APICounterV2Out.
        :rtype: int
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this APICounterV2Out.

        The create datetime of the counter.

        :param created_date_time: The created_date_time of this APICounterV2Out.
        :type created_date_time: int
        """

        self._created_date_time = created_date_time

    @property
    def host_address(self):
        """Gets the host_address of this APICounterV2Out.

        The processing hostAddress.

        :return: The host_address of this APICounterV2Out.
        :rtype: str
        """
        return self._host_address

    @host_address.setter
    def host_address(self, host_address):
        """Sets the host_address of this APICounterV2Out.

        The processing hostAddress.

        :param host_address: The host_address of this APICounterV2Out.
        :type host_address: str
        """

        self._host_address = host_address

    @property
    def last_flushed_date_time(self):
        """Gets the last_flushed_date_time of this APICounterV2Out.

        The flush datetime of the counter.

        :return: The last_flushed_date_time of this APICounterV2Out.
        :rtype: int
        """
        return self._last_flushed_date_time

    @last_flushed_date_time.setter
    def last_flushed_date_time(self, last_flushed_date_time):
        """Sets the last_flushed_date_time of this APICounterV2Out.

        The flush datetime of the counter.

        :param last_flushed_date_time: The last_flushed_date_time of this APICounterV2Out.
        :type last_flushed_date_time: int
        """

        self._last_flushed_date_time = last_flushed_date_time

    @property
    def last_used_date_time(self):
        """Gets the last_used_date_time of this APICounterV2Out.

        The last usage datetime of the counter.

        :return: The last_used_date_time of this APICounterV2Out.
        :rtype: int
        """
        return self._last_used_date_time

    @last_used_date_time.setter
    def last_used_date_time(self, last_used_date_time):
        """Sets the last_used_date_time of this APICounterV2Out.

        The last usage datetime of the counter.

        :param last_used_date_time: The last_used_date_time of this APICounterV2Out.
        :type last_used_date_time: int
        """

        self._last_used_date_time = last_used_date_time

    @property
    def service_features_usage(self):
        """Gets the service_features_usage of this APICounterV2Out.

        Usage of special features, such as Chinese, Japanese.

        :return: The service_features_usage of this APICounterV2Out.
        :rtype: Dict[str, int]
        """
        return self._service_features_usage

    @service_features_usage.setter
    def service_features_usage(self, service_features_usage):
        """Sets the service_features_usage of this APICounterV2Out.

        Usage of special features, such as Chinese, Japanese.

        :param service_features_usage: The service_features_usage of this APICounterV2Out.
        :type service_features_usage: Dict[str, int]
        """

        self._service_features_usage = service_features_usage

    @property
    def total_usage(self):
        """Gets the total_usage of this APICounterV2Out.

        The usage of the counter.

        :return: The total_usage of this APICounterV2Out.
        :rtype: int
        """
        return self._total_usage

    @total_usage.setter
    def total_usage(self, total_usage):
        """Sets the total_usage of this APICounterV2Out.

        The usage of the counter.

        :param total_usage: The total_usage of this APICounterV2Out.
        :type total_usage: int
        """

        self._total_usage = total_usage
