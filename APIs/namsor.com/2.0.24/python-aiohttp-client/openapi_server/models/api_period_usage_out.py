# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_billing_period_usage_out import APIBillingPeriodUsageOut
from openapi_server.models.api_plan_subscription_out import APIPlanSubscriptionOut
from openapi_server import util


class APIPeriodUsageOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_period: APIBillingPeriodUsageOut=None, overage_currency: str=None, overage_excl_tax: float=None, overage_incl_tax: float=None, overage_quantity: int=None, subscription: APIPlanSubscriptionOut=None):
        """APIPeriodUsageOut - a model defined in OpenAPI

        :param billing_period: The billing_period of this APIPeriodUsageOut.
        :param overage_currency: The overage_currency of this APIPeriodUsageOut.
        :param overage_excl_tax: The overage_excl_tax of this APIPeriodUsageOut.
        :param overage_incl_tax: The overage_incl_tax of this APIPeriodUsageOut.
        :param overage_quantity: The overage_quantity of this APIPeriodUsageOut.
        :param subscription: The subscription of this APIPeriodUsageOut.
        """
        self.openapi_types = {
            'billing_period': APIBillingPeriodUsageOut,
            'overage_currency': str,
            'overage_excl_tax': float,
            'overage_incl_tax': float,
            'overage_quantity': int,
            'subscription': APIPlanSubscriptionOut
        }

        self.attribute_map = {
            'billing_period': 'billingPeriod',
            'overage_currency': 'overageCurrency',
            'overage_excl_tax': 'overageExclTax',
            'overage_incl_tax': 'overageInclTax',
            'overage_quantity': 'overageQuantity',
            'subscription': 'subscription'
        }

        self._billing_period = billing_period
        self._overage_currency = overage_currency
        self._overage_excl_tax = overage_excl_tax
        self._overage_incl_tax = overage_incl_tax
        self._overage_quantity = overage_quantity
        self._subscription = subscription

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIPeriodUsageOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIPeriodUsageOut of this APIPeriodUsageOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_period(self):
        """Gets the billing_period of this APIPeriodUsageOut.


        :return: The billing_period of this APIPeriodUsageOut.
        :rtype: APIBillingPeriodUsageOut
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this APIPeriodUsageOut.


        :param billing_period: The billing_period of this APIPeriodUsageOut.
        :type billing_period: APIBillingPeriodUsageOut
        """

        self._billing_period = billing_period

    @property
    def overage_currency(self):
        """Gets the overage_currency of this APIPeriodUsageOut.

        Currency of the overage amount.

        :return: The overage_currency of this APIPeriodUsageOut.
        :rtype: str
        """
        return self._overage_currency

    @overage_currency.setter
    def overage_currency(self, overage_currency):
        """Sets the overage_currency of this APIPeriodUsageOut.

        Currency of the overage amount.

        :param overage_currency: The overage_currency of this APIPeriodUsageOut.
        :type overage_currency: str
        """

        self._overage_currency = overage_currency

    @property
    def overage_excl_tax(self):
        """Gets the overage_excl_tax of this APIPeriodUsageOut.

        Overage amount including any tax.

        :return: The overage_excl_tax of this APIPeriodUsageOut.
        :rtype: float
        """
        return self._overage_excl_tax

    @overage_excl_tax.setter
    def overage_excl_tax(self, overage_excl_tax):
        """Sets the overage_excl_tax of this APIPeriodUsageOut.

        Overage amount including any tax.

        :param overage_excl_tax: The overage_excl_tax of this APIPeriodUsageOut.
        :type overage_excl_tax: float
        """

        self._overage_excl_tax = overage_excl_tax

    @property
    def overage_incl_tax(self):
        """Gets the overage_incl_tax of this APIPeriodUsageOut.

        Overage amount including tax (if applicable).

        :return: The overage_incl_tax of this APIPeriodUsageOut.
        :rtype: float
        """
        return self._overage_incl_tax

    @overage_incl_tax.setter
    def overage_incl_tax(self, overage_incl_tax):
        """Sets the overage_incl_tax of this APIPeriodUsageOut.

        Overage amount including tax (if applicable).

        :param overage_incl_tax: The overage_incl_tax of this APIPeriodUsageOut.
        :type overage_incl_tax: float
        """

        self._overage_incl_tax = overage_incl_tax

    @property
    def overage_quantity(self):
        """Gets the overage_quantity of this APIPeriodUsageOut.

        Quantity above monthly quota of the current subscritpion, in units.

        :return: The overage_quantity of this APIPeriodUsageOut.
        :rtype: int
        """
        return self._overage_quantity

    @overage_quantity.setter
    def overage_quantity(self, overage_quantity):
        """Sets the overage_quantity of this APIPeriodUsageOut.

        Quantity above monthly quota of the current subscritpion, in units.

        :param overage_quantity: The overage_quantity of this APIPeriodUsageOut.
        :type overage_quantity: int
        """

        self._overage_quantity = overage_quantity

    @property
    def subscription(self):
        """Gets the subscription of this APIPeriodUsageOut.


        :return: The subscription of this APIPeriodUsageOut.
        :rtype: APIPlanSubscriptionOut
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this APIPeriodUsageOut.


        :param subscription: The subscription of this APIPeriodUsageOut.
        :type subscription: APIPlanSubscriptionOut
        """

        self._subscription = subscription
