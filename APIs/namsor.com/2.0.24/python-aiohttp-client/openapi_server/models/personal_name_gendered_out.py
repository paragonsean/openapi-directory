# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalNameGenderedOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gender_scale: float=None, id: str=None, likely_gender: str=None, name: str=None, probability_calibrated: float=None, score: float=None, script: str=None):
        """PersonalNameGenderedOut - a model defined in OpenAPI

        :param gender_scale: The gender_scale of this PersonalNameGenderedOut.
        :param id: The id of this PersonalNameGenderedOut.
        :param likely_gender: The likely_gender of this PersonalNameGenderedOut.
        :param name: The name of this PersonalNameGenderedOut.
        :param probability_calibrated: The probability_calibrated of this PersonalNameGenderedOut.
        :param score: The score of this PersonalNameGenderedOut.
        :param script: The script of this PersonalNameGenderedOut.
        """
        self.openapi_types = {
            'gender_scale': float,
            'id': str,
            'likely_gender': str,
            'name': str,
            'probability_calibrated': float,
            'score': float,
            'script': str
        }

        self.attribute_map = {
            'gender_scale': 'genderScale',
            'id': 'id',
            'likely_gender': 'likelyGender',
            'name': 'name',
            'probability_calibrated': 'probabilityCalibrated',
            'score': 'score',
            'script': 'script'
        }

        self._gender_scale = gender_scale
        self._id = id
        self._likely_gender = likely_gender
        self._name = name
        self._probability_calibrated = probability_calibrated
        self._score = score
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalNameGenderedOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalNameGenderedOut of this PersonalNameGenderedOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender_scale(self):
        """Gets the gender_scale of this PersonalNameGenderedOut.

        Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.

        :return: The gender_scale of this PersonalNameGenderedOut.
        :rtype: float
        """
        return self._gender_scale

    @gender_scale.setter
    def gender_scale(self, gender_scale):
        """Sets the gender_scale of this PersonalNameGenderedOut.

        Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.

        :param gender_scale: The gender_scale of this PersonalNameGenderedOut.
        :type gender_scale: float
        """
        if gender_scale is not None and gender_scale > 1:
            raise ValueError("Invalid value for `gender_scale`, must be a value less than or equal to `1`")
        if gender_scale is not None and gender_scale < -1:
            raise ValueError("Invalid value for `gender_scale`, must be a value greater than or equal to `-1`")

        self._gender_scale = gender_scale

    @property
    def id(self):
        """Gets the id of this PersonalNameGenderedOut.


        :return: The id of this PersonalNameGenderedOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalNameGenderedOut.


        :param id: The id of this PersonalNameGenderedOut.
        :type id: str
        """

        self._id = id

    @property
    def likely_gender(self):
        """Gets the likely_gender of this PersonalNameGenderedOut.

        Most likely gender

        :return: The likely_gender of this PersonalNameGenderedOut.
        :rtype: str
        """
        return self._likely_gender

    @likely_gender.setter
    def likely_gender(self, likely_gender):
        """Sets the likely_gender of this PersonalNameGenderedOut.

        Most likely gender

        :param likely_gender: The likely_gender of this PersonalNameGenderedOut.
        :type likely_gender: str
        """
        allowed_values = ["male", "female", "unknown"]  # noqa: E501
        if likely_gender not in allowed_values:
            raise ValueError(
                "Invalid value for `likely_gender` ({0}), must be one of {1}"
                .format(likely_gender, allowed_values)
            )

        self._likely_gender = likely_gender

    @property
    def name(self):
        """Gets the name of this PersonalNameGenderedOut.

        The input name

        :return: The name of this PersonalNameGenderedOut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonalNameGenderedOut.

        The input name

        :param name: The name of this PersonalNameGenderedOut.
        :type name: str
        """

        self._name = name

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this PersonalNameGenderedOut.

        The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. 

        :return: The probability_calibrated of this PersonalNameGenderedOut.
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this PersonalNameGenderedOut.

        The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. 

        :param probability_calibrated: The probability_calibrated of this PersonalNameGenderedOut.
        :type probability_calibrated: float
        """
        if probability_calibrated is not None and probability_calibrated > 1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value less than or equal to `1`")
        if probability_calibrated is not None and probability_calibrated < -1:
            raise ValueError("Invalid value for `probability_calibrated`, must be a value greater than or equal to `-1`")

        self._probability_calibrated = probability_calibrated

    @property
    def score(self):
        """Gets the score of this PersonalNameGenderedOut.

        Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :return: The score of this PersonalNameGenderedOut.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PersonalNameGenderedOut.

        Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 

        :param score: The score of this PersonalNameGenderedOut.
        :type score: float
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def script(self):
        """Gets the script of this PersonalNameGenderedOut.


        :return: The script of this PersonalNameGenderedOut.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this PersonalNameGenderedOut.


        :param script: The script of this PersonalNameGenderedOut.
        :type script: str
        """

        self._script = script
