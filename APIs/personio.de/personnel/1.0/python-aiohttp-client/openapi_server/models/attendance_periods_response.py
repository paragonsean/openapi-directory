# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attendance_periods_response_all_of_data import AttendancePeriodsResponseAllOfData
from openapi_server import util


class AttendancePeriodsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[AttendancePeriodsResponseAllOfData]=None, success: bool=None, limit: int=None, offset: int=None):
        """AttendancePeriodsResponse - a model defined in OpenAPI

        :param data: The data of this AttendancePeriodsResponse.
        :param success: The success of this AttendancePeriodsResponse.
        :param limit: The limit of this AttendancePeriodsResponse.
        :param offset: The offset of this AttendancePeriodsResponse.
        """
        self.openapi_types = {
            'data': List[AttendancePeriodsResponseAllOfData],
            'success': bool,
            'limit': int,
            'offset': int
        }

        self.attribute_map = {
            'data': 'data',
            'success': 'success',
            'limit': 'limit',
            'offset': 'offset'
        }

        self._data = data
        self._success = success
        self._limit = limit
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttendancePeriodsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttendancePeriodsResponse of this AttendancePeriodsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this AttendancePeriodsResponse.


        :return: The data of this AttendancePeriodsResponse.
        :rtype: List[AttendancePeriodsResponseAllOfData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AttendancePeriodsResponse.


        :param data: The data of this AttendancePeriodsResponse.
        :type data: List[AttendancePeriodsResponseAllOfData]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def success(self):
        """Gets the success of this AttendancePeriodsResponse.


        :return: The success of this AttendancePeriodsResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this AttendancePeriodsResponse.


        :param success: The success of this AttendancePeriodsResponse.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success

    @property
    def limit(self):
        """Gets the limit of this AttendancePeriodsResponse.


        :return: The limit of this AttendancePeriodsResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AttendancePeriodsResponse.


        :param limit: The limit of this AttendancePeriodsResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this AttendancePeriodsResponse.


        :return: The offset of this AttendancePeriodsResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this AttendancePeriodsResponse.


        :param offset: The offset of this AttendancePeriodsResponse.
        :type offset: int
        """

        self._offset = offset
