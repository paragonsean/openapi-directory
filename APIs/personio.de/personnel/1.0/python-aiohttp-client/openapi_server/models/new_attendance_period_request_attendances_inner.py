# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class NewAttendancePeriodRequestAttendancesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _break: int=None, comment: str=None, _date: date=None, employee: int=None, end_time: str=None, start_time: str=None):
        """NewAttendancePeriodRequestAttendancesInner - a model defined in OpenAPI

        :param _break: The _break of this NewAttendancePeriodRequestAttendancesInner.
        :param comment: The comment of this NewAttendancePeriodRequestAttendancesInner.
        :param _date: The _date of this NewAttendancePeriodRequestAttendancesInner.
        :param employee: The employee of this NewAttendancePeriodRequestAttendancesInner.
        :param end_time: The end_time of this NewAttendancePeriodRequestAttendancesInner.
        :param start_time: The start_time of this NewAttendancePeriodRequestAttendancesInner.
        """
        self.openapi_types = {
            '_break': int,
            'comment': str,
            '_date': date,
            'employee': int,
            'end_time': str,
            'start_time': str
        }

        self.attribute_map = {
            '_break': 'break',
            'comment': 'comment',
            '_date': 'date',
            'employee': 'employee',
            'end_time': 'end_time',
            'start_time': 'start_time'
        }

        self.__break = _break
        self._comment = comment
        self.__date = _date
        self._employee = employee
        self._end_time = end_time
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewAttendancePeriodRequestAttendancesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewAttendancePeriodRequest_attendances_inner of this NewAttendancePeriodRequestAttendancesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _break(self):
        """Gets the _break of this NewAttendancePeriodRequestAttendancesInner.

        Break in minutes

        :return: The _break of this NewAttendancePeriodRequestAttendancesInner.
        :rtype: int
        """
        return self.__break

    @_break.setter
    def _break(self, _break):
        """Sets the _break of this NewAttendancePeriodRequestAttendancesInner.

        Break in minutes

        :param _break: The _break of this NewAttendancePeriodRequestAttendancesInner.
        :type _break: int
        """
        if _break is None:
            raise ValueError("Invalid value for `_break`, must not be `None`")

        self.__break = _break

    @property
    def comment(self):
        """Gets the comment of this NewAttendancePeriodRequestAttendancesInner.

        Optional comment

        :return: The comment of this NewAttendancePeriodRequestAttendancesInner.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this NewAttendancePeriodRequestAttendancesInner.

        Optional comment

        :param comment: The comment of this NewAttendancePeriodRequestAttendancesInner.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def _date(self):
        """Gets the _date of this NewAttendancePeriodRequestAttendancesInner.

        Attendance date as YYYY-MM-DD

        :return: The _date of this NewAttendancePeriodRequestAttendancesInner.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NewAttendancePeriodRequestAttendancesInner.

        Attendance date as YYYY-MM-DD

        :param _date: The _date of this NewAttendancePeriodRequestAttendancesInner.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def employee(self):
        """Gets the employee of this NewAttendancePeriodRequestAttendancesInner.

        Employee identifier

        :return: The employee of this NewAttendancePeriodRequestAttendancesInner.
        :rtype: int
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this NewAttendancePeriodRequestAttendancesInner.

        Employee identifier

        :param employee: The employee of this NewAttendancePeriodRequestAttendancesInner.
        :type employee: int
        """
        if employee is None:
            raise ValueError("Invalid value for `employee`, must not be `None`")

        self._employee = employee

    @property
    def end_time(self):
        """Gets the end_time of this NewAttendancePeriodRequestAttendancesInner.

        End time as HH:MM

        :return: The end_time of this NewAttendancePeriodRequestAttendancesInner.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this NewAttendancePeriodRequestAttendancesInner.

        End time as HH:MM

        :param end_time: The end_time of this NewAttendancePeriodRequestAttendancesInner.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")
        if end_time is not None and not re.search(r'^\d\d:\d\d$', end_time):
            raise ValueError("Invalid value for `end_time`, must be a follow pattern or equal to `/^\d\d:\d\d$/`")

        self._end_time = end_time

    @property
    def start_time(self):
        """Gets the start_time of this NewAttendancePeriodRequestAttendancesInner.

        Start time as HH:MM

        :return: The start_time of this NewAttendancePeriodRequestAttendancesInner.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this NewAttendancePeriodRequestAttendancesInner.

        Start time as HH:MM

        :param start_time: The start_time of this NewAttendancePeriodRequestAttendancesInner.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")
        if start_time is not None and not re.search(r'^\d\d:\d\d$', start_time):
            raise ValueError("Invalid value for `start_time`, must be a follow pattern or equal to `/^\d\d:\d\d$/`")

        self._start_time = start_time
