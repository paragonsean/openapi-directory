/*
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AbsenceEntitlement;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.CostCenters;
import org.openapitools.client.model.Department;
import org.openapitools.client.model.HolidayCalendar;
import org.openapitools.client.model.Office;
import org.openapitools.client.model.Supervisor;
import org.openapitools.client.model.WorkSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmployeeAttributesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:33.166267-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmployeeAttributesInner {
  public static final String SERIALIZED_NAME_ABSENCE_ENTITLEMENT = "absence_entitlement";
  @SerializedName(SERIALIZED_NAME_ABSENCE_ENTITLEMENT)
  private AbsenceEntitlement absenceEntitlement;

  public static final String SERIALIZED_NAME_CONTRACT_END_DATE = "contract_end_date";
  @SerializedName(SERIALIZED_NAME_CONTRACT_END_DATE)
  private Attribute contractEndDate;

  public static final String SERIALIZED_NAME_COST_CENTERS = "cost_centers";
  @SerializedName(SERIALIZED_NAME_COST_CENTERS)
  private CostCenters costCenters;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Attribute createdAt;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private Department department;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Attribute email;

  public static final String SERIALIZED_NAME_EMPLOYMENT_TYPE = "employment_type";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TYPE)
  private Attribute employmentType;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private Attribute firstName;

  public static final String SERIALIZED_NAME_FIX_SALARY = "fix_salary";
  @SerializedName(SERIALIZED_NAME_FIX_SALARY)
  private Attribute fixSalary;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Attribute gender;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hire_date";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private Attribute hireDate;

  public static final String SERIALIZED_NAME_HOLIDAY_CALENDAR = "holiday_calendar";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CALENDAR)
  private HolidayCalendar holidayCalendar;

  public static final String SERIALIZED_NAME_HOURLY_SALARY = "hourly_salary";
  @SerializedName(SERIALIZED_NAME_HOURLY_SALARY)
  private Attribute hourlySalary;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Attribute id;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private Attribute lastName;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private Office office;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Attribute position;

  public static final String SERIALIZED_NAME_PROBATION_PERIOD_END = "probation_period_end";
  @SerializedName(SERIALIZED_NAME_PROBATION_PERIOD_END)
  private Attribute probationPeriodEnd;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Attribute status;

  public static final String SERIALIZED_NAME_SUPERVISOR = "supervisor";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR)
  private Supervisor supervisor;

  public static final String SERIALIZED_NAME_TERMINATION_DATE = "termination_date";
  @SerializedName(SERIALIZED_NAME_TERMINATION_DATE)
  private Attribute terminationDate;

  public static final String SERIALIZED_NAME_TERMINATION_REASON = "termination_reason";
  @SerializedName(SERIALIZED_NAME_TERMINATION_REASON)
  private Attribute terminationReason;

  public static final String SERIALIZED_NAME_TERMINATION_TYPE = "termination_type";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TYPE)
  private Attribute terminationType;

  public static final String SERIALIZED_NAME_VACATION_DAY_BALANCE = "vacation_day_balance";
  @SerializedName(SERIALIZED_NAME_VACATION_DAY_BALANCE)
  private Attribute vacationDayBalance;

  public static final String SERIALIZED_NAME_WEEKLY_WORKING_HOURS = "weekly_working_hours";
  @SerializedName(SERIALIZED_NAME_WEEKLY_WORKING_HOURS)
  private Attribute weeklyWorkingHours;

  public static final String SERIALIZED_NAME_WORK_SCHEDULE = "work_schedule";
  @SerializedName(SERIALIZED_NAME_WORK_SCHEDULE)
  private WorkSchedule workSchedule;

  public EmployeeAttributesInner() {
  }

  public EmployeeAttributesInner absenceEntitlement(AbsenceEntitlement absenceEntitlement) {
    this.absenceEntitlement = absenceEntitlement;
    return this;
  }

  /**
   * Get absenceEntitlement
   * @return absenceEntitlement
   */
  @javax.annotation.Nullable
  public AbsenceEntitlement getAbsenceEntitlement() {
    return absenceEntitlement;
  }

  public void setAbsenceEntitlement(AbsenceEntitlement absenceEntitlement) {
    this.absenceEntitlement = absenceEntitlement;
  }


  public EmployeeAttributesInner contractEndDate(Attribute contractEndDate) {
    this.contractEndDate = contractEndDate;
    return this;
  }

  /**
   * Get contractEndDate
   * @return contractEndDate
   */
  @javax.annotation.Nullable
  public Attribute getContractEndDate() {
    return contractEndDate;
  }

  public void setContractEndDate(Attribute contractEndDate) {
    this.contractEndDate = contractEndDate;
  }


  public EmployeeAttributesInner costCenters(CostCenters costCenters) {
    this.costCenters = costCenters;
    return this;
  }

  /**
   * Get costCenters
   * @return costCenters
   */
  @javax.annotation.Nullable
  public CostCenters getCostCenters() {
    return costCenters;
  }

  public void setCostCenters(CostCenters costCenters) {
    this.costCenters = costCenters;
  }


  public EmployeeAttributesInner createdAt(Attribute createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public Attribute getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Attribute createdAt) {
    this.createdAt = createdAt;
  }


  public EmployeeAttributesInner department(Department department) {
    this.department = department;
    return this;
  }

  /**
   * Get department
   * @return department
   */
  @javax.annotation.Nullable
  public Department getDepartment() {
    return department;
  }

  public void setDepartment(Department department) {
    this.department = department;
  }


  public EmployeeAttributesInner email(Attribute email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public Attribute getEmail() {
    return email;
  }

  public void setEmail(Attribute email) {
    this.email = email;
  }


  public EmployeeAttributesInner employmentType(Attribute employmentType) {
    this.employmentType = employmentType;
    return this;
  }

  /**
   * Get employmentType
   * @return employmentType
   */
  @javax.annotation.Nullable
  public Attribute getEmploymentType() {
    return employmentType;
  }

  public void setEmploymentType(Attribute employmentType) {
    this.employmentType = employmentType;
  }


  public EmployeeAttributesInner firstName(Attribute firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public Attribute getFirstName() {
    return firstName;
  }

  public void setFirstName(Attribute firstName) {
    this.firstName = firstName;
  }


  public EmployeeAttributesInner fixSalary(Attribute fixSalary) {
    this.fixSalary = fixSalary;
    return this;
  }

  /**
   * Get fixSalary
   * @return fixSalary
   */
  @javax.annotation.Nullable
  public Attribute getFixSalary() {
    return fixSalary;
  }

  public void setFixSalary(Attribute fixSalary) {
    this.fixSalary = fixSalary;
  }


  public EmployeeAttributesInner gender(Attribute gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public Attribute getGender() {
    return gender;
  }

  public void setGender(Attribute gender) {
    this.gender = gender;
  }


  public EmployeeAttributesInner hireDate(Attribute hireDate) {
    this.hireDate = hireDate;
    return this;
  }

  /**
   * Get hireDate
   * @return hireDate
   */
  @javax.annotation.Nullable
  public Attribute getHireDate() {
    return hireDate;
  }

  public void setHireDate(Attribute hireDate) {
    this.hireDate = hireDate;
  }


  public EmployeeAttributesInner holidayCalendar(HolidayCalendar holidayCalendar) {
    this.holidayCalendar = holidayCalendar;
    return this;
  }

  /**
   * Get holidayCalendar
   * @return holidayCalendar
   */
  @javax.annotation.Nullable
  public HolidayCalendar getHolidayCalendar() {
    return holidayCalendar;
  }

  public void setHolidayCalendar(HolidayCalendar holidayCalendar) {
    this.holidayCalendar = holidayCalendar;
  }


  public EmployeeAttributesInner hourlySalary(Attribute hourlySalary) {
    this.hourlySalary = hourlySalary;
    return this;
  }

  /**
   * Get hourlySalary
   * @return hourlySalary
   */
  @javax.annotation.Nullable
  public Attribute getHourlySalary() {
    return hourlySalary;
  }

  public void setHourlySalary(Attribute hourlySalary) {
    this.hourlySalary = hourlySalary;
  }


  public EmployeeAttributesInner id(Attribute id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Attribute getId() {
    return id;
  }

  public void setId(Attribute id) {
    this.id = id;
  }


  public EmployeeAttributesInner lastName(Attribute lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public Attribute getLastName() {
    return lastName;
  }

  public void setLastName(Attribute lastName) {
    this.lastName = lastName;
  }


  public EmployeeAttributesInner office(Office office) {
    this.office = office;
    return this;
  }

  /**
   * Get office
   * @return office
   */
  @javax.annotation.Nullable
  public Office getOffice() {
    return office;
  }

  public void setOffice(Office office) {
    this.office = office;
  }


  public EmployeeAttributesInner position(Attribute position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public Attribute getPosition() {
    return position;
  }

  public void setPosition(Attribute position) {
    this.position = position;
  }


  public EmployeeAttributesInner probationPeriodEnd(Attribute probationPeriodEnd) {
    this.probationPeriodEnd = probationPeriodEnd;
    return this;
  }

  /**
   * Get probationPeriodEnd
   * @return probationPeriodEnd
   */
  @javax.annotation.Nullable
  public Attribute getProbationPeriodEnd() {
    return probationPeriodEnd;
  }

  public void setProbationPeriodEnd(Attribute probationPeriodEnd) {
    this.probationPeriodEnd = probationPeriodEnd;
  }


  public EmployeeAttributesInner status(Attribute status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Attribute getStatus() {
    return status;
  }

  public void setStatus(Attribute status) {
    this.status = status;
  }


  public EmployeeAttributesInner supervisor(Supervisor supervisor) {
    this.supervisor = supervisor;
    return this;
  }

  /**
   * Get supervisor
   * @return supervisor
   */
  @javax.annotation.Nullable
  public Supervisor getSupervisor() {
    return supervisor;
  }

  public void setSupervisor(Supervisor supervisor) {
    this.supervisor = supervisor;
  }


  public EmployeeAttributesInner terminationDate(Attribute terminationDate) {
    this.terminationDate = terminationDate;
    return this;
  }

  /**
   * Get terminationDate
   * @return terminationDate
   */
  @javax.annotation.Nullable
  public Attribute getTerminationDate() {
    return terminationDate;
  }

  public void setTerminationDate(Attribute terminationDate) {
    this.terminationDate = terminationDate;
  }


  public EmployeeAttributesInner terminationReason(Attribute terminationReason) {
    this.terminationReason = terminationReason;
    return this;
  }

  /**
   * Get terminationReason
   * @return terminationReason
   */
  @javax.annotation.Nullable
  public Attribute getTerminationReason() {
    return terminationReason;
  }

  public void setTerminationReason(Attribute terminationReason) {
    this.terminationReason = terminationReason;
  }


  public EmployeeAttributesInner terminationType(Attribute terminationType) {
    this.terminationType = terminationType;
    return this;
  }

  /**
   * Get terminationType
   * @return terminationType
   */
  @javax.annotation.Nullable
  public Attribute getTerminationType() {
    return terminationType;
  }

  public void setTerminationType(Attribute terminationType) {
    this.terminationType = terminationType;
  }


  public EmployeeAttributesInner vacationDayBalance(Attribute vacationDayBalance) {
    this.vacationDayBalance = vacationDayBalance;
    return this;
  }

  /**
   * Get vacationDayBalance
   * @return vacationDayBalance
   */
  @javax.annotation.Nullable
  public Attribute getVacationDayBalance() {
    return vacationDayBalance;
  }

  public void setVacationDayBalance(Attribute vacationDayBalance) {
    this.vacationDayBalance = vacationDayBalance;
  }


  public EmployeeAttributesInner weeklyWorkingHours(Attribute weeklyWorkingHours) {
    this.weeklyWorkingHours = weeklyWorkingHours;
    return this;
  }

  /**
   * Get weeklyWorkingHours
   * @return weeklyWorkingHours
   */
  @javax.annotation.Nullable
  public Attribute getWeeklyWorkingHours() {
    return weeklyWorkingHours;
  }

  public void setWeeklyWorkingHours(Attribute weeklyWorkingHours) {
    this.weeklyWorkingHours = weeklyWorkingHours;
  }


  public EmployeeAttributesInner workSchedule(WorkSchedule workSchedule) {
    this.workSchedule = workSchedule;
    return this;
  }

  /**
   * Get workSchedule
   * @return workSchedule
   */
  @javax.annotation.Nullable
  public WorkSchedule getWorkSchedule() {
    return workSchedule;
  }

  public void setWorkSchedule(WorkSchedule workSchedule) {
    this.workSchedule = workSchedule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeAttributesInner employeeAttributesInner = (EmployeeAttributesInner) o;
    return Objects.equals(this.absenceEntitlement, employeeAttributesInner.absenceEntitlement) &&
        Objects.equals(this.contractEndDate, employeeAttributesInner.contractEndDate) &&
        Objects.equals(this.costCenters, employeeAttributesInner.costCenters) &&
        Objects.equals(this.createdAt, employeeAttributesInner.createdAt) &&
        Objects.equals(this.department, employeeAttributesInner.department) &&
        Objects.equals(this.email, employeeAttributesInner.email) &&
        Objects.equals(this.employmentType, employeeAttributesInner.employmentType) &&
        Objects.equals(this.firstName, employeeAttributesInner.firstName) &&
        Objects.equals(this.fixSalary, employeeAttributesInner.fixSalary) &&
        Objects.equals(this.gender, employeeAttributesInner.gender) &&
        Objects.equals(this.hireDate, employeeAttributesInner.hireDate) &&
        Objects.equals(this.holidayCalendar, employeeAttributesInner.holidayCalendar) &&
        Objects.equals(this.hourlySalary, employeeAttributesInner.hourlySalary) &&
        Objects.equals(this.id, employeeAttributesInner.id) &&
        Objects.equals(this.lastName, employeeAttributesInner.lastName) &&
        Objects.equals(this.office, employeeAttributesInner.office) &&
        Objects.equals(this.position, employeeAttributesInner.position) &&
        Objects.equals(this.probationPeriodEnd, employeeAttributesInner.probationPeriodEnd) &&
        Objects.equals(this.status, employeeAttributesInner.status) &&
        Objects.equals(this.supervisor, employeeAttributesInner.supervisor) &&
        Objects.equals(this.terminationDate, employeeAttributesInner.terminationDate) &&
        Objects.equals(this.terminationReason, employeeAttributesInner.terminationReason) &&
        Objects.equals(this.terminationType, employeeAttributesInner.terminationType) &&
        Objects.equals(this.vacationDayBalance, employeeAttributesInner.vacationDayBalance) &&
        Objects.equals(this.weeklyWorkingHours, employeeAttributesInner.weeklyWorkingHours) &&
        Objects.equals(this.workSchedule, employeeAttributesInner.workSchedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absenceEntitlement, contractEndDate, costCenters, createdAt, department, email, employmentType, firstName, fixSalary, gender, hireDate, holidayCalendar, hourlySalary, id, lastName, office, position, probationPeriodEnd, status, supervisor, terminationDate, terminationReason, terminationType, vacationDayBalance, weeklyWorkingHours, workSchedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeAttributesInner {\n");
    sb.append("    absenceEntitlement: ").append(toIndentedString(absenceEntitlement)).append("\n");
    sb.append("    contractEndDate: ").append(toIndentedString(contractEndDate)).append("\n");
    sb.append("    costCenters: ").append(toIndentedString(costCenters)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    employmentType: ").append(toIndentedString(employmentType)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    fixSalary: ").append(toIndentedString(fixSalary)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    holidayCalendar: ").append(toIndentedString(holidayCalendar)).append("\n");
    sb.append("    hourlySalary: ").append(toIndentedString(hourlySalary)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    probationPeriodEnd: ").append(toIndentedString(probationPeriodEnd)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supervisor: ").append(toIndentedString(supervisor)).append("\n");
    sb.append("    terminationDate: ").append(toIndentedString(terminationDate)).append("\n");
    sb.append("    terminationReason: ").append(toIndentedString(terminationReason)).append("\n");
    sb.append("    terminationType: ").append(toIndentedString(terminationType)).append("\n");
    sb.append("    vacationDayBalance: ").append(toIndentedString(vacationDayBalance)).append("\n");
    sb.append("    weeklyWorkingHours: ").append(toIndentedString(weeklyWorkingHours)).append("\n");
    sb.append("    workSchedule: ").append(toIndentedString(workSchedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absence_entitlement");
    openapiFields.add("contract_end_date");
    openapiFields.add("cost_centers");
    openapiFields.add("created_at");
    openapiFields.add("department");
    openapiFields.add("email");
    openapiFields.add("employment_type");
    openapiFields.add("first_name");
    openapiFields.add("fix_salary");
    openapiFields.add("gender");
    openapiFields.add("hire_date");
    openapiFields.add("holiday_calendar");
    openapiFields.add("hourly_salary");
    openapiFields.add("id");
    openapiFields.add("last_name");
    openapiFields.add("office");
    openapiFields.add("position");
    openapiFields.add("probation_period_end");
    openapiFields.add("status");
    openapiFields.add("supervisor");
    openapiFields.add("termination_date");
    openapiFields.add("termination_reason");
    openapiFields.add("termination_type");
    openapiFields.add("vacation_day_balance");
    openapiFields.add("weekly_working_hours");
    openapiFields.add("work_schedule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmployeeAttributesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmployeeAttributesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeAttributesInner is not found in the empty JSON string", EmployeeAttributesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmployeeAttributesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmployeeAttributesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `absence_entitlement`
      if (jsonObj.get("absence_entitlement") != null && !jsonObj.get("absence_entitlement").isJsonNull()) {
        AbsenceEntitlement.validateJsonElement(jsonObj.get("absence_entitlement"));
      }
      // validate the optional field `contract_end_date`
      if (jsonObj.get("contract_end_date") != null && !jsonObj.get("contract_end_date").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("contract_end_date"));
      }
      // validate the optional field `cost_centers`
      if (jsonObj.get("cost_centers") != null && !jsonObj.get("cost_centers").isJsonNull()) {
        CostCenters.validateJsonElement(jsonObj.get("cost_centers"));
      }
      // validate the optional field `created_at`
      if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("created_at"));
      }
      // validate the optional field `department`
      if (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) {
        Department.validateJsonElement(jsonObj.get("department"));
      }
      // validate the optional field `email`
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("email"));
      }
      // validate the optional field `employment_type`
      if (jsonObj.get("employment_type") != null && !jsonObj.get("employment_type").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("employment_type"));
      }
      // validate the optional field `first_name`
      if (jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("first_name"));
      }
      // validate the optional field `fix_salary`
      if (jsonObj.get("fix_salary") != null && !jsonObj.get("fix_salary").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("fix_salary"));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("gender"));
      }
      // validate the optional field `hire_date`
      if (jsonObj.get("hire_date") != null && !jsonObj.get("hire_date").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("hire_date"));
      }
      // validate the optional field `holiday_calendar`
      if (jsonObj.get("holiday_calendar") != null && !jsonObj.get("holiday_calendar").isJsonNull()) {
        HolidayCalendar.validateJsonElement(jsonObj.get("holiday_calendar"));
      }
      // validate the optional field `hourly_salary`
      if (jsonObj.get("hourly_salary") != null && !jsonObj.get("hourly_salary").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("hourly_salary"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `last_name`
      if (jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("last_name"));
      }
      // validate the optional field `office`
      if (jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) {
        Office.validateJsonElement(jsonObj.get("office"));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("position"));
      }
      // validate the optional field `probation_period_end`
      if (jsonObj.get("probation_period_end") != null && !jsonObj.get("probation_period_end").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("probation_period_end"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `supervisor`
      if (jsonObj.get("supervisor") != null && !jsonObj.get("supervisor").isJsonNull()) {
        Supervisor.validateJsonElement(jsonObj.get("supervisor"));
      }
      // validate the optional field `termination_date`
      if (jsonObj.get("termination_date") != null && !jsonObj.get("termination_date").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("termination_date"));
      }
      // validate the optional field `termination_reason`
      if (jsonObj.get("termination_reason") != null && !jsonObj.get("termination_reason").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("termination_reason"));
      }
      // validate the optional field `termination_type`
      if (jsonObj.get("termination_type") != null && !jsonObj.get("termination_type").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("termination_type"));
      }
      // validate the optional field `vacation_day_balance`
      if (jsonObj.get("vacation_day_balance") != null && !jsonObj.get("vacation_day_balance").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("vacation_day_balance"));
      }
      // validate the optional field `weekly_working_hours`
      if (jsonObj.get("weekly_working_hours") != null && !jsonObj.get("weekly_working_hours").isJsonNull()) {
        Attribute.validateJsonElement(jsonObj.get("weekly_working_hours"));
      }
      // validate the optional field `work_schedule`
      if (jsonObj.get("work_schedule") != null && !jsonObj.get("work_schedule").isJsonNull()) {
        WorkSchedule.validateJsonElement(jsonObj.get("work_schedule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeAttributesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeAttributesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeAttributesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeAttributesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeAttributesInner>() {
           @Override
           public void write(JsonWriter out, EmployeeAttributesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeAttributesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmployeeAttributesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmployeeAttributesInner
   * @throws IOException if the JSON string is invalid with respect to EmployeeAttributesInner
   */
  public static EmployeeAttributesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeAttributesInner.class);
  }

  /**
   * Convert an instance of EmployeeAttributesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

