/*
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AbsencePeriodsResponseAllOfDataCertificate;
import org.openapitools.client.model.AbsencePeriodsResponseAllOfDataEmployee;
import org.openapitools.client.model.AbsencePeriodsResponseAllOfDataTimeOffType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTimeOffPeriodResponseAllOfDataAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:33.166267-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTimeOffPeriodResponseAllOfDataAttributes {
  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private AbsencePeriodsResponseAllOfDataCertificate certificate;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DAYS_COUNT = "days_count";
  @SerializedName(SERIALIZED_NAME_DAYS_COUNT)
  private BigDecimal daysCount;

  public static final String SERIALIZED_NAME_EMPLOYEE = "employee";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE)
  private AbsencePeriodsResponseAllOfDataEmployee employee;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_HALF_DAY_END = "half_day_end";
  @SerializedName(SERIALIZED_NAME_HALF_DAY_END)
  private BigDecimal halfDayEnd;

  public static final String SERIALIZED_NAME_HALF_DAY_START = "half_day_start";
  @SerializedName(SERIALIZED_NAME_HALF_DAY_START)
  private BigDecimal halfDayStart;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIME_OFF_TYPE = "time_off_type";
  @SerializedName(SERIALIZED_NAME_TIME_OFF_TYPE)
  private AbsencePeriodsResponseAllOfDataTimeOffType timeOffType;

  public CreateTimeOffPeriodResponseAllOfDataAttributes() {
  }

  public CreateTimeOffPeriodResponseAllOfDataAttributes certificate(AbsencePeriodsResponseAllOfDataCertificate certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public AbsencePeriodsResponseAllOfDataCertificate getCertificate() {
    return certificate;
  }

  public void setCertificate(AbsencePeriodsResponseAllOfDataCertificate certificate) {
    this.certificate = certificate;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes daysCount(BigDecimal daysCount) {
    this.daysCount = daysCount;
    return this;
  }

  /**
   * Get daysCount
   * @return daysCount
   */
  @javax.annotation.Nullable
  public BigDecimal getDaysCount() {
    return daysCount;
  }

  public void setDaysCount(BigDecimal daysCount) {
    this.daysCount = daysCount;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes employee(AbsencePeriodsResponseAllOfDataEmployee employee) {
    this.employee = employee;
    return this;
  }

  /**
   * Get employee
   * @return employee
   */
  @javax.annotation.Nullable
  public AbsencePeriodsResponseAllOfDataEmployee getEmployee() {
    return employee;
  }

  public void setEmployee(AbsencePeriodsResponseAllOfDataEmployee employee) {
    this.employee = employee;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes halfDayEnd(BigDecimal halfDayEnd) {
    this.halfDayEnd = halfDayEnd;
    return this;
  }

  /**
   * Get halfDayEnd
   * @return halfDayEnd
   */
  @javax.annotation.Nullable
  public BigDecimal getHalfDayEnd() {
    return halfDayEnd;
  }

  public void setHalfDayEnd(BigDecimal halfDayEnd) {
    this.halfDayEnd = halfDayEnd;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes halfDayStart(BigDecimal halfDayStart) {
    this.halfDayStart = halfDayStart;
    return this;
  }

  /**
   * Get halfDayStart
   * @return halfDayStart
   */
  @javax.annotation.Nullable
  public BigDecimal getHalfDayStart() {
    return halfDayStart;
  }

  public void setHalfDayStart(BigDecimal halfDayStart) {
    this.halfDayStart = halfDayStart;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public CreateTimeOffPeriodResponseAllOfDataAttributes timeOffType(AbsencePeriodsResponseAllOfDataTimeOffType timeOffType) {
    this.timeOffType = timeOffType;
    return this;
  }

  /**
   * Get timeOffType
   * @return timeOffType
   */
  @javax.annotation.Nullable
  public AbsencePeriodsResponseAllOfDataTimeOffType getTimeOffType() {
    return timeOffType;
  }

  public void setTimeOffType(AbsencePeriodsResponseAllOfDataTimeOffType timeOffType) {
    this.timeOffType = timeOffType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTimeOffPeriodResponseAllOfDataAttributes createTimeOffPeriodResponseAllOfDataAttributes = (CreateTimeOffPeriodResponseAllOfDataAttributes) o;
    return Objects.equals(this.certificate, createTimeOffPeriodResponseAllOfDataAttributes.certificate) &&
        Objects.equals(this.createdAt, createTimeOffPeriodResponseAllOfDataAttributes.createdAt) &&
        Objects.equals(this.daysCount, createTimeOffPeriodResponseAllOfDataAttributes.daysCount) &&
        Objects.equals(this.employee, createTimeOffPeriodResponseAllOfDataAttributes.employee) &&
        Objects.equals(this.endDate, createTimeOffPeriodResponseAllOfDataAttributes.endDate) &&
        Objects.equals(this.halfDayEnd, createTimeOffPeriodResponseAllOfDataAttributes.halfDayEnd) &&
        Objects.equals(this.halfDayStart, createTimeOffPeriodResponseAllOfDataAttributes.halfDayStart) &&
        Objects.equals(this.id, createTimeOffPeriodResponseAllOfDataAttributes.id) &&
        Objects.equals(this.startDate, createTimeOffPeriodResponseAllOfDataAttributes.startDate) &&
        Objects.equals(this.status, createTimeOffPeriodResponseAllOfDataAttributes.status) &&
        Objects.equals(this.timeOffType, createTimeOffPeriodResponseAllOfDataAttributes.timeOffType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, createdAt, daysCount, employee, endDate, halfDayEnd, halfDayStart, id, startDate, status, timeOffType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTimeOffPeriodResponseAllOfDataAttributes {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    daysCount: ").append(toIndentedString(daysCount)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    halfDayEnd: ").append(toIndentedString(halfDayEnd)).append("\n");
    sb.append("    halfDayStart: ").append(toIndentedString(halfDayStart)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeOffType: ").append(toIndentedString(timeOffType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificate");
    openapiFields.add("created_at");
    openapiFields.add("days_count");
    openapiFields.add("employee");
    openapiFields.add("end_date");
    openapiFields.add("half_day_end");
    openapiFields.add("half_day_start");
    openapiFields.add("id");
    openapiFields.add("start_date");
    openapiFields.add("status");
    openapiFields.add("time_off_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTimeOffPeriodResponseAllOfDataAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTimeOffPeriodResponseAllOfDataAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTimeOffPeriodResponseAllOfDataAttributes is not found in the empty JSON string", CreateTimeOffPeriodResponseAllOfDataAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTimeOffPeriodResponseAllOfDataAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTimeOffPeriodResponseAllOfDataAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certificate`
      if (jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) {
        AbsencePeriodsResponseAllOfDataCertificate.validateJsonElement(jsonObj.get("certificate"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // validate the optional field `employee`
      if (jsonObj.get("employee") != null && !jsonObj.get("employee").isJsonNull()) {
        AbsencePeriodsResponseAllOfDataEmployee.validateJsonElement(jsonObj.get("employee"));
      }
      if ((jsonObj.get("end_date") != null && !jsonObj.get("end_date").isJsonNull()) && !jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `time_off_type`
      if (jsonObj.get("time_off_type") != null && !jsonObj.get("time_off_type").isJsonNull()) {
        AbsencePeriodsResponseAllOfDataTimeOffType.validateJsonElement(jsonObj.get("time_off_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTimeOffPeriodResponseAllOfDataAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTimeOffPeriodResponseAllOfDataAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTimeOffPeriodResponseAllOfDataAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTimeOffPeriodResponseAllOfDataAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTimeOffPeriodResponseAllOfDataAttributes>() {
           @Override
           public void write(JsonWriter out, CreateTimeOffPeriodResponseAllOfDataAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTimeOffPeriodResponseAllOfDataAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTimeOffPeriodResponseAllOfDataAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTimeOffPeriodResponseAllOfDataAttributes
   * @throws IOException if the JSON string is invalid with respect to CreateTimeOffPeriodResponseAllOfDataAttributes
   */
  public static CreateTimeOffPeriodResponseAllOfDataAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTimeOffPeriodResponseAllOfDataAttributes.class);
  }

  /**
   * Convert an instance of CreateTimeOffPeriodResponseAllOfDataAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

