/*
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AbsencePeriodsResponse;
import org.openapitools.client.model.AttendancePeriodsResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CompanyTimeOffTypesGet200Response;
import org.openapitools.client.model.CompanyTimeOffsPost201Response;
import org.openapitools.client.model.CreateTimeOffPeriodRequest;
import org.openapitools.client.model.DetailedErrorResponse;
import org.openapitools.client.model.EmployeeResponse;
import org.openapitools.client.model.EmployeesResponse;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import java.time.LocalDate;
import org.openapitools.client.model.NewAttendancePeriodRequest;
import org.openapitools.client.model.NewAttendancePeriodResponse;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.UpdateAttendancePeriodRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for companyAttendancesGet
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (required)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (required)
     * @param updatedFrom Datetime from when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_from will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
     * @param updatedTo Datetime until when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_to will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
     * @param employees A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned. (optional)
     * @param limit Pagination attribute to limit how many attendances will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyAttendancesGetCall(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/attendances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_from", updatedFrom));
        }

        if (updatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_to", updatedTo));
        }

        if (employees != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "employees", employees));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyAttendancesGetValidateBeforeCall(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling companyAttendancesGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling companyAttendancesGet(Async)");
        }

        return companyAttendancesGetCall(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, _callback);

    }

    /**
     * 
     * This endpoint is responsible for fetching attendance data for the company employees. It is possible to paginate results, filter by period, the date and/or time it was updated, and/or specific employees. The result will contain a list of attendance periods, structured as defined here.
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (required)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (required)
     * @param updatedFrom Datetime from when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_from will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
     * @param updatedTo Datetime until when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_to will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
     * @param employees A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned. (optional)
     * @param limit Pagination attribute to limit how many attendances will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @return AttendancePeriodsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AttendancePeriodsResponse companyAttendancesGet(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset) throws ApiException {
        ApiResponse<AttendancePeriodsResponse> localVarResp = companyAttendancesGetWithHttpInfo(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is responsible for fetching attendance data for the company employees. It is possible to paginate results, filter by period, the date and/or time it was updated, and/or specific employees. The result will contain a list of attendance periods, structured as defined here.
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (required)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (required)
     * @param updatedFrom Datetime from when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_from will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
     * @param updatedTo Datetime until when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_to will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
     * @param employees A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned. (optional)
     * @param limit Pagination attribute to limit how many attendances will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @return ApiResponse&lt;AttendancePeriodsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttendancePeriodsResponse> companyAttendancesGetWithHttpInfo(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = companyAttendancesGetValidateBeforeCall(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, null);
        Type localVarReturnType = new TypeToken<AttendancePeriodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is responsible for fetching attendance data for the company employees. It is possible to paginate results, filter by period, the date and/or time it was updated, and/or specific employees. The result will contain a list of attendance periods, structured as defined here.
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (required)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (required)
     * @param updatedFrom Datetime from when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_from will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
     * @param updatedTo Datetime until when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_to will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
     * @param employees A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned. (optional)
     * @param limit Pagination attribute to limit how many attendances will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyAttendancesGetAsync(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback<AttendancePeriodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyAttendancesGetValidateBeforeCall(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AttendancePeriodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyAttendancesIdDelete
     * @param id ID of the attendance period to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyAttendancesIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/attendances/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyAttendancesIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling companyAttendancesIdDelete(Async)");
        }

        return companyAttendancesIdDeleteCall(id, _callback);

    }

    /**
     * 
     * This endpoint is responsible for deleting attendance data for the company employees.
     * @param id ID of the attendance period to delete (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public Response companyAttendancesIdDelete(Integer id) throws ApiException {
        ApiResponse<Response> localVarResp = companyAttendancesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is responsible for deleting attendance data for the company employees.
     * @param id ID of the attendance period to delete (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> companyAttendancesIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = companyAttendancesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is responsible for deleting attendance data for the company employees.
     * @param id ID of the attendance period to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyAttendancesIdDeleteAsync(Integer id, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyAttendancesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyAttendancesIdPatch
     * @param id ID of the attendance period to update (required)
     * @param updateAttendancePeriodRequest attendance period data to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyAttendancesIdPatchCall(Integer id, UpdateAttendancePeriodRequest updateAttendancePeriodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAttendancePeriodRequest;

        // create path and map variables
        String localVarPath = "/company/attendances/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyAttendancesIdPatchValidateBeforeCall(Integer id, UpdateAttendancePeriodRequest updateAttendancePeriodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling companyAttendancesIdPatch(Async)");
        }

        // verify the required parameter 'updateAttendancePeriodRequest' is set
        if (updateAttendancePeriodRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAttendancePeriodRequest' when calling companyAttendancesIdPatch(Async)");
        }

        return companyAttendancesIdPatchCall(id, updateAttendancePeriodRequest, _callback);

    }

    /**
     * 
     * This endpoint is responsible for updating attendance data for the company employees. Attributes are not required and if not specified, the current value will be used. It is not possible to change the employee id.
     * @param id ID of the attendance period to update (required)
     * @param updateAttendancePeriodRequest attendance period data to update (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public Response companyAttendancesIdPatch(Integer id, UpdateAttendancePeriodRequest updateAttendancePeriodRequest) throws ApiException {
        ApiResponse<Response> localVarResp = companyAttendancesIdPatchWithHttpInfo(id, updateAttendancePeriodRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is responsible for updating attendance data for the company employees. Attributes are not required and if not specified, the current value will be used. It is not possible to change the employee id.
     * @param id ID of the attendance period to update (required)
     * @param updateAttendancePeriodRequest attendance period data to update (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> companyAttendancesIdPatchWithHttpInfo(Integer id, UpdateAttendancePeriodRequest updateAttendancePeriodRequest) throws ApiException {
        okhttp3.Call localVarCall = companyAttendancesIdPatchValidateBeforeCall(id, updateAttendancePeriodRequest, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is responsible for updating attendance data for the company employees. Attributes are not required and if not specified, the current value will be used. It is not possible to change the employee id.
     * @param id ID of the attendance period to update (required)
     * @param updateAttendancePeriodRequest attendance period data to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyAttendancesIdPatchAsync(Integer id, UpdateAttendancePeriodRequest updateAttendancePeriodRequest, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyAttendancesIdPatchValidateBeforeCall(id, updateAttendancePeriodRequest, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyAttendancesPost
     * @param newAttendancePeriodRequest List of attendance periods to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attendance periods were created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyAttendancesPostCall(NewAttendancePeriodRequest newAttendancePeriodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newAttendancePeriodRequest;

        // create path and map variables
        String localVarPath = "/company/attendances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyAttendancesPostValidateBeforeCall(NewAttendancePeriodRequest newAttendancePeriodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newAttendancePeriodRequest' is set
        if (newAttendancePeriodRequest == null) {
            throw new ApiException("Missing the required parameter 'newAttendancePeriodRequest' when calling companyAttendancesPost(Async)");
        }

        return companyAttendancesPostCall(newAttendancePeriodRequest, _callback);

    }

    /**
     * 
     * This endpoint is responsible for adding attendance data for the company employees. It is possible to add attendances for one or many employees at the same time. The payload sent on the request should be a list of attendance periods, in the form of an array containing attendance period objects.
     * @param newAttendancePeriodRequest List of attendance periods to create (required)
     * @return NewAttendancePeriodResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attendance periods were created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public NewAttendancePeriodResponse companyAttendancesPost(NewAttendancePeriodRequest newAttendancePeriodRequest) throws ApiException {
        ApiResponse<NewAttendancePeriodResponse> localVarResp = companyAttendancesPostWithHttpInfo(newAttendancePeriodRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is responsible for adding attendance data for the company employees. It is possible to add attendances for one or many employees at the same time. The payload sent on the request should be a list of attendance periods, in the form of an array containing attendance period objects.
     * @param newAttendancePeriodRequest List of attendance periods to create (required)
     * @return ApiResponse&lt;NewAttendancePeriodResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attendance periods were created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewAttendancePeriodResponse> companyAttendancesPostWithHttpInfo(NewAttendancePeriodRequest newAttendancePeriodRequest) throws ApiException {
        okhttp3.Call localVarCall = companyAttendancesPostValidateBeforeCall(newAttendancePeriodRequest, null);
        Type localVarReturnType = new TypeToken<NewAttendancePeriodResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is responsible for adding attendance data for the company employees. It is possible to add attendances for one or many employees at the same time. The payload sent on the request should be a list of attendance periods, in the form of an array containing attendance period objects.
     * @param newAttendancePeriodRequest List of attendance periods to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attendance periods were created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyAttendancesPostAsync(NewAttendancePeriodRequest newAttendancePeriodRequest, final ApiCallback<NewAttendancePeriodResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyAttendancesPostValidateBeforeCall(newAttendancePeriodRequest, _callback);
        Type localVarReturnType = new TypeToken<NewAttendancePeriodResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyEmployeesEmployeeIdGet
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEmployeesEmployeeIdGetCall(Integer employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees/{employee_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyEmployeesEmployeeIdGetValidateBeforeCall(Integer employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling companyEmployeesEmployeeIdGet(Async)");
        }

        return companyEmployeesEmployeeIdGetCall(employeeId, _callback);

    }

    /**
     * 
     * Show employee by ID
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @return EmployeeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EmployeeResponse companyEmployeesEmployeeIdGet(Integer employeeId) throws ApiException {
        ApiResponse<EmployeeResponse> localVarResp = companyEmployeesEmployeeIdGetWithHttpInfo(employeeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Show employee by ID
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @return ApiResponse&lt;EmployeeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmployeeResponse> companyEmployeesEmployeeIdGetWithHttpInfo(Integer employeeId) throws ApiException {
        okhttp3.Call localVarCall = companyEmployeesEmployeeIdGetValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<EmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Show employee by ID
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEmployeesEmployeeIdGetAsync(Integer employeeId, final ApiCallback<EmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyEmployeesEmployeeIdGetValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyEmployeesEmployeeIdProfilePictureWidthGet
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @param width Width of the image. Default 75x75 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEmployeesEmployeeIdProfilePictureWidthGetCall(Integer employeeId, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees/{employee_id}/profile-picture/{width}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "width" + "}", localVarApiClient.escapeString(width.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyEmployeesEmployeeIdProfilePictureWidthGetValidateBeforeCall(Integer employeeId, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling companyEmployeesEmployeeIdProfilePictureWidthGet(Async)");
        }

        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling companyEmployeesEmployeeIdProfilePictureWidthGet(Async)");
        }

        return companyEmployeesEmployeeIdProfilePictureWidthGetCall(employeeId, width, _callback);

    }

    /**
     * 
     * Show employee profile picture
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @param width Width of the image. Default 75x75 (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File companyEmployeesEmployeeIdProfilePictureWidthGet(Integer employeeId, Integer width) throws ApiException {
        ApiResponse<File> localVarResp = companyEmployeesEmployeeIdProfilePictureWidthGetWithHttpInfo(employeeId, width);
        return localVarResp.getData();
    }

    /**
     * 
     * Show employee profile picture
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @param width Width of the image. Default 75x75 (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> companyEmployeesEmployeeIdProfilePictureWidthGetWithHttpInfo(Integer employeeId, Integer width) throws ApiException {
        okhttp3.Call localVarCall = companyEmployeesEmployeeIdProfilePictureWidthGetValidateBeforeCall(employeeId, width, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Show employee profile picture
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @param width Width of the image. Default 75x75 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEmployeesEmployeeIdProfilePictureWidthGetAsync(Integer employeeId, Integer width, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyEmployeesEmployeeIdProfilePictureWidthGetValidateBeforeCall(employeeId, width, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyEmployeesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEmployeesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyEmployeesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return companyEmployeesGetCall(_callback);

    }

    /**
     * 
     * List Employees
     * @return EmployeesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EmployeesResponse companyEmployeesGet() throws ApiException {
        ApiResponse<EmployeesResponse> localVarResp = companyEmployeesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * List Employees
     * @return ApiResponse&lt;EmployeesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmployeesResponse> companyEmployeesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = companyEmployeesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EmployeesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Employees
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEmployeesGetAsync(final ApiCallback<EmployeesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyEmployeesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EmployeesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyEmployeesPost
     * @param employeeEmail Employee email (required)
     * @param employeeFirstName Employee first name (required)
     * @param employeeLastName Employee last name (required)
     * @param employeeDepartment Employee department (optional)
     * @param employeeGender Employee gender (optional)
     * @param employeeHireDate Employee hire date (optional)
     * @param employeePosition Employee position (optional)
     * @param employeeWeeklyHours Employee weekly working hours (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEmployeesPostCall(String employeeEmail, String employeeFirstName, String employeeLastName, String employeeDepartment, String employeeGender, LocalDate employeeHireDate, String employeePosition, BigDecimal employeeWeeklyHours, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeDepartment != null) {
            localVarFormParams.put("employee[department]", employeeDepartment);
        }

        if (employeeEmail != null) {
            localVarFormParams.put("employee[email]", employeeEmail);
        }

        if (employeeFirstName != null) {
            localVarFormParams.put("employee[first_name]", employeeFirstName);
        }

        if (employeeGender != null) {
            localVarFormParams.put("employee[gender]", employeeGender);
        }

        if (employeeHireDate != null) {
            localVarFormParams.put("employee[hire_date]", employeeHireDate);
        }

        if (employeeLastName != null) {
            localVarFormParams.put("employee[last_name]", employeeLastName);
        }

        if (employeePosition != null) {
            localVarFormParams.put("employee[position]", employeePosition);
        }

        if (employeeWeeklyHours != null) {
            localVarFormParams.put("employee[weekly_hours]", employeeWeeklyHours);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyEmployeesPostValidateBeforeCall(String employeeEmail, String employeeFirstName, String employeeLastName, String employeeDepartment, String employeeGender, LocalDate employeeHireDate, String employeePosition, BigDecimal employeeWeeklyHours, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeEmail' is set
        if (employeeEmail == null) {
            throw new ApiException("Missing the required parameter 'employeeEmail' when calling companyEmployeesPost(Async)");
        }

        // verify the required parameter 'employeeFirstName' is set
        if (employeeFirstName == null) {
            throw new ApiException("Missing the required parameter 'employeeFirstName' when calling companyEmployeesPost(Async)");
        }

        // verify the required parameter 'employeeLastName' is set
        if (employeeLastName == null) {
            throw new ApiException("Missing the required parameter 'employeeLastName' when calling companyEmployeesPost(Async)");
        }

        return companyEmployeesPostCall(employeeEmail, employeeFirstName, employeeLastName, employeeDepartment, employeeGender, employeeHireDate, employeePosition, employeeWeeklyHours, _callback);

    }

    /**
     * Create an employee
     * Creates new employee. Status of the employee will be set to &#x60;active&#x60; if &#x60;hire_date&#x60; provided is in past. Otherwise status will be set to &#x60;onboarding&#x60;. This endpoint will respond with &#x60;id&#x60; of created employee in case of success. 
     * @param employeeEmail Employee email (required)
     * @param employeeFirstName Employee first name (required)
     * @param employeeLastName Employee last name (required)
     * @param employeeDepartment Employee department (optional)
     * @param employeeGender Employee gender (optional)
     * @param employeeHireDate Employee hire date (optional)
     * @param employeePosition Employee position (optional)
     * @param employeeWeeklyHours Employee weekly working hours (optional)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
     </table>
     */
    public Response companyEmployeesPost(String employeeEmail, String employeeFirstName, String employeeLastName, String employeeDepartment, String employeeGender, LocalDate employeeHireDate, String employeePosition, BigDecimal employeeWeeklyHours) throws ApiException {
        ApiResponse<Response> localVarResp = companyEmployeesPostWithHttpInfo(employeeEmail, employeeFirstName, employeeLastName, employeeDepartment, employeeGender, employeeHireDate, employeePosition, employeeWeeklyHours);
        return localVarResp.getData();
    }

    /**
     * Create an employee
     * Creates new employee. Status of the employee will be set to &#x60;active&#x60; if &#x60;hire_date&#x60; provided is in past. Otherwise status will be set to &#x60;onboarding&#x60;. This endpoint will respond with &#x60;id&#x60; of created employee in case of success. 
     * @param employeeEmail Employee email (required)
     * @param employeeFirstName Employee first name (required)
     * @param employeeLastName Employee last name (required)
     * @param employeeDepartment Employee department (optional)
     * @param employeeGender Employee gender (optional)
     * @param employeeHireDate Employee hire date (optional)
     * @param employeePosition Employee position (optional)
     * @param employeeWeeklyHours Employee weekly working hours (optional)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> companyEmployeesPostWithHttpInfo(String employeeEmail, String employeeFirstName, String employeeLastName, String employeeDepartment, String employeeGender, LocalDate employeeHireDate, String employeePosition, BigDecimal employeeWeeklyHours) throws ApiException {
        okhttp3.Call localVarCall = companyEmployeesPostValidateBeforeCall(employeeEmail, employeeFirstName, employeeLastName, employeeDepartment, employeeGender, employeeHireDate, employeePosition, employeeWeeklyHours, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an employee (asynchronously)
     * Creates new employee. Status of the employee will be set to &#x60;active&#x60; if &#x60;hire_date&#x60; provided is in past. Otherwise status will be set to &#x60;onboarding&#x60;. This endpoint will respond with &#x60;id&#x60; of created employee in case of success. 
     * @param employeeEmail Employee email (required)
     * @param employeeFirstName Employee first name (required)
     * @param employeeLastName Employee last name (required)
     * @param employeeDepartment Employee department (optional)
     * @param employeeGender Employee gender (optional)
     * @param employeeHireDate Employee hire date (optional)
     * @param employeePosition Employee position (optional)
     * @param employeeWeeklyHours Employee weekly working hours (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEmployeesPostAsync(String employeeEmail, String employeeFirstName, String employeeLastName, String employeeDepartment, String employeeGender, LocalDate employeeHireDate, String employeePosition, BigDecimal employeeWeeklyHours, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyEmployeesPostValidateBeforeCall(employeeEmail, employeeFirstName, employeeLastName, employeeDepartment, employeeGender, employeeHireDate, employeePosition, employeeWeeklyHours, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyTimeOffTypesGet
     * @param limit Pagination attribute to limit how many records will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffTypesGetCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/time-off-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyTimeOffTypesGetValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return companyTimeOffTypesGetCall(limit, offset, _callback);

    }

    /**
     * 
     * Provides a list of available time-off types, for example &#39;Paid vacation&#39;, &#39;Parental leave&#39; or &#39;Home office&#39;
     * @param limit Pagination attribute to limit how many records will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @return CompanyTimeOffTypesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CompanyTimeOffTypesGet200Response companyTimeOffTypesGet(Integer limit, Integer offset) throws ApiException {
        ApiResponse<CompanyTimeOffTypesGet200Response> localVarResp = companyTimeOffTypesGetWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides a list of available time-off types, for example &#39;Paid vacation&#39;, &#39;Parental leave&#39; or &#39;Home office&#39;
     * @param limit Pagination attribute to limit how many records will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @return ApiResponse&lt;CompanyTimeOffTypesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyTimeOffTypesGet200Response> companyTimeOffTypesGetWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = companyTimeOffTypesGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<CompanyTimeOffTypesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides a list of available time-off types, for example &#39;Paid vacation&#39;, &#39;Parental leave&#39; or &#39;Home office&#39;
     * @param limit Pagination attribute to limit how many records will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffTypesGetAsync(Integer limit, Integer offset, final ApiCallback<CompanyTimeOffTypesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyTimeOffTypesGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CompanyTimeOffTypesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyTimeOffsGet
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (optional)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (optional)
     * @param updatedFrom Datetime from when the queried periods have been updated. It is inclusive, so the day specified as updated_from will also be considered on the results. (optional)
     * @param updatedTo Datetime until when the queried periods have been updated. It is inclusive, so the day specified as updated_to will also be considered on the results. (optional)
     * @param employees A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned. (optional)
     * @param limit Pagination attribute to limit how many attendances will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffsGetCall(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/time-offs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_from", updatedFrom));
        }

        if (updatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_to", updatedTo));
        }

        if (employees != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "employees", employees));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyTimeOffsGetValidateBeforeCall(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return companyTimeOffsGetCall(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, _callback);

    }

    /**
     * 
     * This endpoint is responsible for fetching absence data for the company employees. It is possible to paginate results, filter by period and/or specific employees. The result will contain a list of absence periods, structured as defined here.
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (optional)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (optional)
     * @param updatedFrom Datetime from when the queried periods have been updated. It is inclusive, so the day specified as updated_from will also be considered on the results. (optional)
     * @param updatedTo Datetime until when the queried periods have been updated. It is inclusive, so the day specified as updated_to will also be considered on the results. (optional)
     * @param employees A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned. (optional)
     * @param limit Pagination attribute to limit how many attendances will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @return AbsencePeriodsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AbsencePeriodsResponse companyTimeOffsGet(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset) throws ApiException {
        ApiResponse<AbsencePeriodsResponse> localVarResp = companyTimeOffsGetWithHttpInfo(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is responsible for fetching absence data for the company employees. It is possible to paginate results, filter by period and/or specific employees. The result will contain a list of absence periods, structured as defined here.
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (optional)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (optional)
     * @param updatedFrom Datetime from when the queried periods have been updated. It is inclusive, so the day specified as updated_from will also be considered on the results. (optional)
     * @param updatedTo Datetime until when the queried periods have been updated. It is inclusive, so the day specified as updated_to will also be considered on the results. (optional)
     * @param employees A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned. (optional)
     * @param limit Pagination attribute to limit how many attendances will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @return ApiResponse&lt;AbsencePeriodsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbsencePeriodsResponse> companyTimeOffsGetWithHttpInfo(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = companyTimeOffsGetValidateBeforeCall(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, null);
        Type localVarReturnType = new TypeToken<AbsencePeriodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is responsible for fetching absence data for the company employees. It is possible to paginate results, filter by period and/or specific employees. The result will contain a list of absence periods, structured as defined here.
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (optional)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (optional)
     * @param updatedFrom Datetime from when the queried periods have been updated. It is inclusive, so the day specified as updated_from will also be considered on the results. (optional)
     * @param updatedTo Datetime until when the queried periods have been updated. It is inclusive, so the day specified as updated_to will also be considered on the results. (optional)
     * @param employees A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned. (optional)
     * @param limit Pagination attribute to limit how many attendances will be returned per page (optional, default to 200)
     * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffsGetAsync(LocalDate startDate, LocalDate endDate, String updatedFrom, String updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback<AbsencePeriodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyTimeOffsGetValidateBeforeCall(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AbsencePeriodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyTimeOffsIdDelete
     * @param id ID of the absence period to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/time-offs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyTimeOffsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling companyTimeOffsIdDelete(Async)");
        }

        return companyTimeOffsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * This endpoint is responsible for deleting absence period data for the company employees.
     * @param id ID of the absence period to delete (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public Response companyTimeOffsIdDelete(Integer id) throws ApiException {
        ApiResponse<Response> localVarResp = companyTimeOffsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is responsible for deleting absence period data for the company employees.
     * @param id ID of the absence period to delete (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> companyTimeOffsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = companyTimeOffsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is responsible for deleting absence period data for the company employees.
     * @param id ID of the absence period to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffsIdDeleteAsync(Integer id, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyTimeOffsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyTimeOffsIdGet
     * @param id Numeric &#x60;id&#x60; of the absence period (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/time-offs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyTimeOffsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling companyTimeOffsIdGet(Async)");
        }

        return companyTimeOffsIdGetCall(id, _callback);

    }

    /**
     * 
     * Absence Period
     * @param id Numeric &#x60;id&#x60; of the absence period (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object companyTimeOffsIdGet(Integer id) throws ApiException {
        ApiResponse<Object> localVarResp = companyTimeOffsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Absence Period
     * @param id Numeric &#x60;id&#x60; of the absence period (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> companyTimeOffsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = companyTimeOffsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Absence Period
     * @param id Numeric &#x60;id&#x60; of the absence period (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffsIdGetAsync(Integer id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyTimeOffsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyTimeOffsPost
     * @param createTimeOffPeriodRequest Absence period to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The absence period was created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Employee or Absence type not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffsPostCall(CreateTimeOffPeriodRequest createTimeOffPeriodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTimeOffPeriodRequest;

        // create path and map variables
        String localVarPath = "/company/time-offs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyTimeOffsPostValidateBeforeCall(CreateTimeOffPeriodRequest createTimeOffPeriodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTimeOffPeriodRequest' is set
        if (createTimeOffPeriodRequest == null) {
            throw new ApiException("Missing the required parameter 'createTimeOffPeriodRequest' when calling companyTimeOffsPost(Async)");
        }

        return companyTimeOffsPostCall(createTimeOffPeriodRequest, _callback);

    }

    /**
     * 
     * This endpoint is responsible for adding absence data for the company employees.
     * @param createTimeOffPeriodRequest Absence period to create (required)
     * @return CompanyTimeOffsPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The absence period was created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Employee or Absence type not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyTimeOffsPost201Response companyTimeOffsPost(CreateTimeOffPeriodRequest createTimeOffPeriodRequest) throws ApiException {
        ApiResponse<CompanyTimeOffsPost201Response> localVarResp = companyTimeOffsPostWithHttpInfo(createTimeOffPeriodRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is responsible for adding absence data for the company employees.
     * @param createTimeOffPeriodRequest Absence period to create (required)
     * @return ApiResponse&lt;CompanyTimeOffsPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The absence period was created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Employee or Absence type not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyTimeOffsPost201Response> companyTimeOffsPostWithHttpInfo(CreateTimeOffPeriodRequest createTimeOffPeriodRequest) throws ApiException {
        okhttp3.Call localVarCall = companyTimeOffsPostValidateBeforeCall(createTimeOffPeriodRequest, null);
        Type localVarReturnType = new TypeToken<CompanyTimeOffsPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is responsible for adding absence data for the company employees.
     * @param createTimeOffPeriodRequest Absence period to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The absence period was created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Employee or Absence type not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyTimeOffsPostAsync(CreateTimeOffPeriodRequest createTimeOffPeriodRequest, final ApiCallback<CompanyTimeOffsPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyTimeOffsPostValidateBeforeCall(createTimeOffPeriodRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyTimeOffsPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
