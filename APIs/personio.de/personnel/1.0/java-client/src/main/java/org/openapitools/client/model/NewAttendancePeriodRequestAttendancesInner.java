/*
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewAttendancePeriodRequestAttendancesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:33.166267-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewAttendancePeriodRequestAttendancesInner {
  public static final String SERIALIZED_NAME_BREAK = "break";
  @SerializedName(SERIALIZED_NAME_BREAK)
  private Integer _break;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_EMPLOYEE = "employee";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE)
  private Integer employee;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public NewAttendancePeriodRequestAttendancesInner() {
  }

  public NewAttendancePeriodRequestAttendancesInner _break(Integer _break) {
    this._break = _break;
    return this;
  }

  /**
   * Break in minutes
   * @return _break
   */
  @javax.annotation.Nonnull
  public Integer getBreak() {
    return _break;
  }

  public void setBreak(Integer _break) {
    this._break = _break;
  }


  public NewAttendancePeriodRequestAttendancesInner comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional comment
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public NewAttendancePeriodRequestAttendancesInner date(LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * Attendance date as YYYY-MM-DD
   * @return date
   */
  @javax.annotation.Nonnull
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }


  public NewAttendancePeriodRequestAttendancesInner employee(Integer employee) {
    this.employee = employee;
    return this;
  }

  /**
   * Employee identifier
   * @return employee
   */
  @javax.annotation.Nonnull
  public Integer getEmployee() {
    return employee;
  }

  public void setEmployee(Integer employee) {
    this.employee = employee;
  }


  public NewAttendancePeriodRequestAttendancesInner endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time as HH:MM
   * @return endTime
   */
  @javax.annotation.Nonnull
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public NewAttendancePeriodRequestAttendancesInner startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time as HH:MM
   * @return startTime
   */
  @javax.annotation.Nonnull
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewAttendancePeriodRequestAttendancesInner newAttendancePeriodRequestAttendancesInner = (NewAttendancePeriodRequestAttendancesInner) o;
    return Objects.equals(this._break, newAttendancePeriodRequestAttendancesInner._break) &&
        Objects.equals(this.comment, newAttendancePeriodRequestAttendancesInner.comment) &&
        Objects.equals(this.date, newAttendancePeriodRequestAttendancesInner.date) &&
        Objects.equals(this.employee, newAttendancePeriodRequestAttendancesInner.employee) &&
        Objects.equals(this.endTime, newAttendancePeriodRequestAttendancesInner.endTime) &&
        Objects.equals(this.startTime, newAttendancePeriodRequestAttendancesInner.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_break, comment, date, employee, endTime, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewAttendancePeriodRequestAttendancesInner {\n");
    sb.append("    _break: ").append(toIndentedString(_break)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("break");
    openapiFields.add("comment");
    openapiFields.add("date");
    openapiFields.add("employee");
    openapiFields.add("end_time");
    openapiFields.add("start_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("break");
    openapiRequiredFields.add("comment");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("employee");
    openapiRequiredFields.add("end_time");
    openapiRequiredFields.add("start_time");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewAttendancePeriodRequestAttendancesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewAttendancePeriodRequestAttendancesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewAttendancePeriodRequestAttendancesInner is not found in the empty JSON string", NewAttendancePeriodRequestAttendancesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewAttendancePeriodRequestAttendancesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewAttendancePeriodRequestAttendancesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewAttendancePeriodRequestAttendancesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("end_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_time").toString()));
      }
      if (!jsonObj.get("start_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewAttendancePeriodRequestAttendancesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewAttendancePeriodRequestAttendancesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewAttendancePeriodRequestAttendancesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewAttendancePeriodRequestAttendancesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<NewAttendancePeriodRequestAttendancesInner>() {
           @Override
           public void write(JsonWriter out, NewAttendancePeriodRequestAttendancesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewAttendancePeriodRequestAttendancesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewAttendancePeriodRequestAttendancesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewAttendancePeriodRequestAttendancesInner
   * @throws IOException if the JSON string is invalid with respect to NewAttendancePeriodRequestAttendancesInner
   */
  public static NewAttendancePeriodRequestAttendancesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewAttendancePeriodRequestAttendancesInner.class);
  }

  /**
   * Convert an instance of NewAttendancePeriodRequestAttendancesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

