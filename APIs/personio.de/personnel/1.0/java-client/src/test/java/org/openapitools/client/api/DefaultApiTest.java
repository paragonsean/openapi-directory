/*
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AbsencePeriodsResponse;
import org.openapitools.client.model.AttendancePeriodsResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CompanyTimeOffTypesGet200Response;
import org.openapitools.client.model.CompanyTimeOffsPost201Response;
import org.openapitools.client.model.CreateTimeOffPeriodRequest;
import org.openapitools.client.model.DetailedErrorResponse;
import org.openapitools.client.model.EmployeeResponse;
import org.openapitools.client.model.EmployeesResponse;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import java.time.LocalDate;
import org.openapitools.client.model.NewAttendancePeriodRequest;
import org.openapitools.client.model.NewAttendancePeriodResponse;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.UpdateAttendancePeriodRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * This endpoint is responsible for fetching attendance data for the company employees. It is possible to paginate results, filter by period, the date and/or time it was updated, and/or specific employees. The result will contain a list of attendance periods, structured as defined here.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyAttendancesGetTest() throws ApiException {
        LocalDate startDate = null;
        LocalDate endDate = null;
        String updatedFrom = null;
        String updatedTo = null;
        List<Integer> employees = null;
        Integer limit = null;
        Integer offset = null;
        AttendancePeriodsResponse response = api.companyAttendancesGet(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset);
        // TODO: test validations
    }

    /**
     * This endpoint is responsible for deleting attendance data for the company employees.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyAttendancesIdDeleteTest() throws ApiException {
        Integer id = null;
        Response response = api.companyAttendancesIdDelete(id);
        // TODO: test validations
    }

    /**
     * This endpoint is responsible for updating attendance data for the company employees. Attributes are not required and if not specified, the current value will be used. It is not possible to change the employee id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyAttendancesIdPatchTest() throws ApiException {
        Integer id = null;
        UpdateAttendancePeriodRequest updateAttendancePeriodRequest = null;
        Response response = api.companyAttendancesIdPatch(id, updateAttendancePeriodRequest);
        // TODO: test validations
    }

    /**
     * This endpoint is responsible for adding attendance data for the company employees. It is possible to add attendances for one or many employees at the same time. The payload sent on the request should be a list of attendance periods, in the form of an array containing attendance period objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyAttendancesPostTest() throws ApiException {
        NewAttendancePeriodRequest newAttendancePeriodRequest = null;
        NewAttendancePeriodResponse response = api.companyAttendancesPost(newAttendancePeriodRequest);
        // TODO: test validations
    }

    /**
     * Show employee by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyEmployeesEmployeeIdGetTest() throws ApiException {
        Integer employeeId = null;
        EmployeeResponse response = api.companyEmployeesEmployeeIdGet(employeeId);
        // TODO: test validations
    }

    /**
     * Show employee profile picture
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyEmployeesEmployeeIdProfilePictureWidthGetTest() throws ApiException {
        Integer employeeId = null;
        Integer width = null;
        File response = api.companyEmployeesEmployeeIdProfilePictureWidthGet(employeeId, width);
        // TODO: test validations
    }

    /**
     * List Employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyEmployeesGetTest() throws ApiException {
        EmployeesResponse response = api.companyEmployeesGet();
        // TODO: test validations
    }

    /**
     * Create an employee
     *
     * Creates new employee. Status of the employee will be set to &#x60;active&#x60; if &#x60;hire_date&#x60; provided is in past. Otherwise status will be set to &#x60;onboarding&#x60;. This endpoint will respond with &#x60;id&#x60; of created employee in case of success. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyEmployeesPostTest() throws ApiException {
        String employeeEmail = null;
        String employeeFirstName = null;
        String employeeLastName = null;
        String employeeDepartment = null;
        String employeeGender = null;
        LocalDate employeeHireDate = null;
        String employeePosition = null;
        BigDecimal employeeWeeklyHours = null;
        Response response = api.companyEmployeesPost(employeeEmail, employeeFirstName, employeeLastName, employeeDepartment, employeeGender, employeeHireDate, employeePosition, employeeWeeklyHours);
        // TODO: test validations
    }

    /**
     * Provides a list of available time-off types, for example &#39;Paid vacation&#39;, &#39;Parental leave&#39; or &#39;Home office&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyTimeOffTypesGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        CompanyTimeOffTypesGet200Response response = api.companyTimeOffTypesGet(limit, offset);
        // TODO: test validations
    }

    /**
     * This endpoint is responsible for fetching absence data for the company employees. It is possible to paginate results, filter by period and/or specific employees. The result will contain a list of absence periods, structured as defined here.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyTimeOffsGetTest() throws ApiException {
        LocalDate startDate = null;
        LocalDate endDate = null;
        String updatedFrom = null;
        String updatedTo = null;
        List<Integer> employees = null;
        Integer limit = null;
        Integer offset = null;
        AbsencePeriodsResponse response = api.companyTimeOffsGet(startDate, endDate, updatedFrom, updatedTo, employees, limit, offset);
        // TODO: test validations
    }

    /**
     * This endpoint is responsible for deleting absence period data for the company employees.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyTimeOffsIdDeleteTest() throws ApiException {
        Integer id = null;
        Response response = api.companyTimeOffsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Absence Period
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyTimeOffsIdGetTest() throws ApiException {
        Integer id = null;
        Object response = api.companyTimeOffsIdGet(id);
        // TODO: test validations
    }

    /**
     * This endpoint is responsible for adding absence data for the company employees.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyTimeOffsPostTest() throws ApiException {
        CreateTimeOffPeriodRequest createTimeOffPeriodRequest = null;
        CompanyTimeOffsPost201Response response = api.companyTimeOffsPost(createTimeOffPeriodRequest);
        // TODO: test validations
    }

}
