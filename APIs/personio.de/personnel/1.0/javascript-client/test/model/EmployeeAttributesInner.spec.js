/**
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PersonnelData);
  }
}(this, function(expect, PersonnelData) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PersonnelData.EmployeeAttributesInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EmployeeAttributesInner', function() {
    it('should create an instance of EmployeeAttributesInner', function() {
      // uncomment below and update the code to test EmployeeAttributesInner
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be.a(PersonnelData.EmployeeAttributesInner);
    });

    it('should have the property absenceEntitlement (base name: "absence_entitlement")', function() {
      // uncomment below and update the code to test the property absenceEntitlement
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property contractEndDate (base name: "contract_end_date")', function() {
      // uncomment below and update the code to test the property contractEndDate
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property costCenters (base name: "cost_centers")', function() {
      // uncomment below and update the code to test the property costCenters
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property department (base name: "department")', function() {
      // uncomment below and update the code to test the property department
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property employmentType (base name: "employment_type")', function() {
      // uncomment below and update the code to test the property employmentType
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "first_name")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property fixSalary (base name: "fix_salary")', function() {
      // uncomment below and update the code to test the property fixSalary
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property gender (base name: "gender")', function() {
      // uncomment below and update the code to test the property gender
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property hireDate (base name: "hire_date")', function() {
      // uncomment below and update the code to test the property hireDate
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property holidayCalendar (base name: "holiday_calendar")', function() {
      // uncomment below and update the code to test the property holidayCalendar
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property hourlySalary (base name: "hourly_salary")', function() {
      // uncomment below and update the code to test the property hourlySalary
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "last_name")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property office (base name: "office")', function() {
      // uncomment below and update the code to test the property office
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property position (base name: "position")', function() {
      // uncomment below and update the code to test the property position
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property probationPeriodEnd (base name: "probation_period_end")', function() {
      // uncomment below and update the code to test the property probationPeriodEnd
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property supervisor (base name: "supervisor")', function() {
      // uncomment below and update the code to test the property supervisor
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property terminationDate (base name: "termination_date")', function() {
      // uncomment below and update the code to test the property terminationDate
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property terminationReason (base name: "termination_reason")', function() {
      // uncomment below and update the code to test the property terminationReason
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property terminationType (base name: "termination_type")', function() {
      // uncomment below and update the code to test the property terminationType
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property vacationDayBalance (base name: "vacation_day_balance")', function() {
      // uncomment below and update the code to test the property vacationDayBalance
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property weeklyWorkingHours (base name: "weekly_working_hours")', function() {
      // uncomment below and update the code to test the property weeklyWorkingHours
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

    it('should have the property workSchedule (base name: "work_schedule")', function() {
      // uncomment below and update the code to test the property workSchedule
      //var instance = new PersonnelData.EmployeeAttributesInner();
      //expect(instance).to.be();
    });

  });

}));
