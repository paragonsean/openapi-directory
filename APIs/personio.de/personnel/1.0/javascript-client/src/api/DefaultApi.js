/**
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AbsencePeriodsResponse from '../model/AbsencePeriodsResponse';
import AttendancePeriodsResponse from '../model/AttendancePeriodsResponse';
import CompanyTimeOffTypesGet200Response from '../model/CompanyTimeOffTypesGet200Response';
import CompanyTimeOffsPost201Response from '../model/CompanyTimeOffsPost201Response';
import CreateTimeOffPeriodRequest from '../model/CreateTimeOffPeriodRequest';
import DetailedErrorResponse from '../model/DetailedErrorResponse';
import EmployeeResponse from '../model/EmployeeResponse';
import EmployeesResponse from '../model/EmployeesResponse';
import ErrorResponse from '../model/ErrorResponse';
import NewAttendancePeriodRequest from '../model/NewAttendancePeriodRequest';
import NewAttendancePeriodResponse from '../model/NewAttendancePeriodResponse';
import Response from '../model/Response';
import UpdateAttendancePeriodRequest from '../model/UpdateAttendancePeriodRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the companyAttendancesGet operation.
     * @callback module:api/DefaultApi~companyAttendancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttendancePeriodsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is responsible for fetching attendance data for the company employees. It is possible to paginate results, filter by period, the date and/or time it was updated, and/or specific employees. The result will contain a list of attendance periods, structured as defined here.
     * @param {Date} startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results
     * @param {Date} endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results.
     * @param {Object} opts Optional parameters
     * @param {String} [updatedFrom] Datetime from when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_from will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone.
     * @param {String} [updatedTo] Datetime until when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_to will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone.
     * @param {Array.<Number>} [employees] A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned.
     * @param {Number} [limit = 200)] Pagination attribute to limit how many attendances will be returned per page
     * @param {Number} [offset = 0)] Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned.
     * @param {module:api/DefaultApi~companyAttendancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttendancePeriodsResponse}
     */
    companyAttendancesGet(startDate, endDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling companyAttendancesGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling companyAttendancesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'updated_from': opts['updatedFrom'],
        'updated_to': opts['updatedTo'],
        'employees': this.apiClient.buildCollectionParam(opts['employees'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttendancePeriodsResponse;
      return this.apiClient.callApi(
        '/company/attendances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyAttendancesIdDelete operation.
     * @callback module:api/DefaultApi~companyAttendancesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is responsible for deleting attendance data for the company employees.
     * @param {Number} id ID of the attendance period to delete
     * @param {module:api/DefaultApi~companyAttendancesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    companyAttendancesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyAttendancesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/company/attendances/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyAttendancesIdPatch operation.
     * @callback module:api/DefaultApi~companyAttendancesIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is responsible for updating attendance data for the company employees. Attributes are not required and if not specified, the current value will be used. It is not possible to change the employee id.
     * @param {Number} id ID of the attendance period to update
     * @param {module:model/UpdateAttendancePeriodRequest} updateAttendancePeriodRequest attendance period data to update
     * @param {module:api/DefaultApi~companyAttendancesIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    companyAttendancesIdPatch(id, updateAttendancePeriodRequest, callback) {
      let postBody = updateAttendancePeriodRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyAttendancesIdPatch");
      }
      // verify the required parameter 'updateAttendancePeriodRequest' is set
      if (updateAttendancePeriodRequest === undefined || updateAttendancePeriodRequest === null) {
        throw new Error("Missing the required parameter 'updateAttendancePeriodRequest' when calling companyAttendancesIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/company/attendances/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyAttendancesPost operation.
     * @callback module:api/DefaultApi~companyAttendancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewAttendancePeriodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is responsible for adding attendance data for the company employees. It is possible to add attendances for one or many employees at the same time. The payload sent on the request should be a list of attendance periods, in the form of an array containing attendance period objects.
     * @param {module:model/NewAttendancePeriodRequest} newAttendancePeriodRequest List of attendance periods to create
     * @param {module:api/DefaultApi~companyAttendancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewAttendancePeriodResponse}
     */
    companyAttendancesPost(newAttendancePeriodRequest, callback) {
      let postBody = newAttendancePeriodRequest;
      // verify the required parameter 'newAttendancePeriodRequest' is set
      if (newAttendancePeriodRequest === undefined || newAttendancePeriodRequest === null) {
        throw new Error("Missing the required parameter 'newAttendancePeriodRequest' when calling companyAttendancesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewAttendancePeriodResponse;
      return this.apiClient.callApi(
        '/company/attendances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEmployeesEmployeeIdGet operation.
     * @callback module:api/DefaultApi~companyEmployeesEmployeeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show employee by ID
     * @param {Number} employeeId Numeric `id` of the employee
     * @param {module:api/DefaultApi~companyEmployeesEmployeeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeResponse}
     */
    companyEmployeesEmployeeIdGet(employeeId, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling companyEmployeesEmployeeIdGet");
      }

      let pathParams = {
        'employee_id': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmployeeResponse;
      return this.apiClient.callApi(
        '/company/employees/{employee_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEmployeesEmployeeIdProfilePictureWidthGet operation.
     * @callback module:api/DefaultApi~companyEmployeesEmployeeIdProfilePictureWidthGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show employee profile picture
     * @param {Number} employeeId Numeric `id` of the employee
     * @param {Number} width Width of the image. Default 75x75
     * @param {module:api/DefaultApi~companyEmployeesEmployeeIdProfilePictureWidthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    companyEmployeesEmployeeIdProfilePictureWidthGet(employeeId, width, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling companyEmployeesEmployeeIdProfilePictureWidthGet");
      }
      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling companyEmployeesEmployeeIdProfilePictureWidthGet");
      }

      let pathParams = {
        'employee_id': employeeId,
        'width': width
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/png'];
      let returnType = File;
      return this.apiClient.callApi(
        '/company/employees/{employee_id}/profile-picture/{width}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEmployeesGet operation.
     * @callback module:api/DefaultApi~companyEmployeesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Employees
     * @param {module:api/DefaultApi~companyEmployeesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeesResponse}
     */
    companyEmployeesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmployeesResponse;
      return this.apiClient.callApi(
        '/company/employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEmployeesPost operation.
     * @callback module:api/DefaultApi~companyEmployeesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an employee
     * Creates new employee. Status of the employee will be set to `active` if `hire_date` provided is in past. Otherwise status will be set to `onboarding`. This endpoint will respond with `id` of created employee in case of success. 
     * @param {String} employeeEmail Employee email
     * @param {String} employeeFirstName Employee first name
     * @param {String} employeeLastName Employee last name
     * @param {Object} opts Optional parameters
     * @param {String} [employeeDepartment] Employee department
     * @param {module:model/String} [employeeGender] Employee gender
     * @param {Date} [employeeHireDate] Employee hire date
     * @param {String} [employeePosition] Employee position
     * @param {Number} [employeeWeeklyHours] Employee weekly working hours
     * @param {module:api/DefaultApi~companyEmployeesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    companyEmployeesPost(employeeEmail, employeeFirstName, employeeLastName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employeeEmail' is set
      if (employeeEmail === undefined || employeeEmail === null) {
        throw new Error("Missing the required parameter 'employeeEmail' when calling companyEmployeesPost");
      }
      // verify the required parameter 'employeeFirstName' is set
      if (employeeFirstName === undefined || employeeFirstName === null) {
        throw new Error("Missing the required parameter 'employeeFirstName' when calling companyEmployeesPost");
      }
      // verify the required parameter 'employeeLastName' is set
      if (employeeLastName === undefined || employeeLastName === null) {
        throw new Error("Missing the required parameter 'employeeLastName' when calling companyEmployeesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'employee[department]': opts['employeeDepartment'],
        'employee[email]': employeeEmail,
        'employee[first_name]': employeeFirstName,
        'employee[gender]': opts['employeeGender'],
        'employee[hire_date]': opts['employeeHireDate'],
        'employee[last_name]': employeeLastName,
        'employee[position]': opts['employeePosition'],
        'employee[weekly_hours]': opts['employeeWeeklyHours']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/company/employees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyTimeOffTypesGet operation.
     * @callback module:api/DefaultApi~companyTimeOffTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyTimeOffTypesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of available time-off types, for example 'Paid vacation', 'Parental leave' or 'Home office'
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 200)] Pagination attribute to limit how many records will be returned per page
     * @param {Number} [offset = 0)] Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned.
     * @param {module:api/DefaultApi~companyTimeOffTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyTimeOffTypesGet200Response}
     */
    companyTimeOffTypesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompanyTimeOffTypesGet200Response;
      return this.apiClient.callApi(
        '/company/time-off-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyTimeOffsGet operation.
     * @callback module:api/DefaultApi~companyTimeOffsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbsencePeriodsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is responsible for fetching absence data for the company employees. It is possible to paginate results, filter by period and/or specific employees. The result will contain a list of absence periods, structured as defined here.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results
     * @param {Date} [endDate] Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results.
     * @param {String} [updatedFrom] Datetime from when the queried periods have been updated. It is inclusive, so the day specified as updated_from will also be considered on the results.
     * @param {String} [updatedTo] Datetime until when the queried periods have been updated. It is inclusive, so the day specified as updated_to will also be considered on the results.
     * @param {Array.<Number>} [employees] A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned.
     * @param {Number} [limit = 200)] Pagination attribute to limit how many attendances will be returned per page
     * @param {Number} [offset = 0)] Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned.
     * @param {module:api/DefaultApi~companyTimeOffsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AbsencePeriodsResponse}
     */
    companyTimeOffsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'updated_from': opts['updatedFrom'],
        'updated_to': opts['updatedTo'],
        'employees': this.apiClient.buildCollectionParam(opts['employees'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AbsencePeriodsResponse;
      return this.apiClient.callApi(
        '/company/time-offs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyTimeOffsIdDelete operation.
     * @callback module:api/DefaultApi~companyTimeOffsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is responsible for deleting absence period data for the company employees.
     * @param {Number} id ID of the absence period to delete
     * @param {module:api/DefaultApi~companyTimeOffsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    companyTimeOffsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyTimeOffsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/company/time-offs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyTimeOffsIdGet operation.
     * @callback module:api/DefaultApi~companyTimeOffsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Absence Period
     * @param {Number} id Numeric `id` of the absence period
     * @param {module:api/DefaultApi~companyTimeOffsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    companyTimeOffsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companyTimeOffsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/company/time-offs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyTimeOffsPost operation.
     * @callback module:api/DefaultApi~companyTimeOffsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyTimeOffsPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint is responsible for adding absence data for the company employees.
     * @param {module:model/CreateTimeOffPeriodRequest} createTimeOffPeriodRequest Absence period to create
     * @param {module:api/DefaultApi~companyTimeOffsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyTimeOffsPost201Response}
     */
    companyTimeOffsPost(createTimeOffPeriodRequest, callback) {
      let postBody = createTimeOffPeriodRequest;
      // verify the required parameter 'createTimeOffPeriodRequest' is set
      if (createTimeOffPeriodRequest === undefined || createTimeOffPeriodRequest === null) {
        throw new Error("Missing the required parameter 'createTimeOffPeriodRequest' when calling companyTimeOffsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanyTimeOffsPost201Response;
      return this.apiClient.callApi(
        '/company/time-offs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
