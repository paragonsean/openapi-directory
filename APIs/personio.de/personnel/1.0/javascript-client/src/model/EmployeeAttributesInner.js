/**
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbsenceEntitlement from './AbsenceEntitlement';
import Attribute from './Attribute';
import CostCenters from './CostCenters';
import Department from './Department';
import HolidayCalendar from './HolidayCalendar';
import Office from './Office';
import Supervisor from './Supervisor';
import WorkSchedule from './WorkSchedule';

/**
 * The EmployeeAttributesInner model module.
 * @module model/EmployeeAttributesInner
 * @version 1.0
 */
class EmployeeAttributesInner {
    /**
     * Constructs a new <code>EmployeeAttributesInner</code>.
     * @alias module:model/EmployeeAttributesInner
     */
    constructor() { 
        
        EmployeeAttributesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmployeeAttributesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmployeeAttributesInner} obj Optional instance to populate.
     * @return {module:model/EmployeeAttributesInner} The populated <code>EmployeeAttributesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmployeeAttributesInner();

            if (data.hasOwnProperty('absence_entitlement')) {
                obj['absence_entitlement'] = AbsenceEntitlement.constructFromObject(data['absence_entitlement']);
            }
            if (data.hasOwnProperty('contract_end_date')) {
                obj['contract_end_date'] = Attribute.constructFromObject(data['contract_end_date']);
            }
            if (data.hasOwnProperty('cost_centers')) {
                obj['cost_centers'] = CostCenters.constructFromObject(data['cost_centers']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = Attribute.constructFromObject(data['created_at']);
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = Department.constructFromObject(data['department']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = Attribute.constructFromObject(data['email']);
            }
            if (data.hasOwnProperty('employment_type')) {
                obj['employment_type'] = Attribute.constructFromObject(data['employment_type']);
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = Attribute.constructFromObject(data['first_name']);
            }
            if (data.hasOwnProperty('fix_salary')) {
                obj['fix_salary'] = Attribute.constructFromObject(data['fix_salary']);
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = Attribute.constructFromObject(data['gender']);
            }
            if (data.hasOwnProperty('hire_date')) {
                obj['hire_date'] = Attribute.constructFromObject(data['hire_date']);
            }
            if (data.hasOwnProperty('holiday_calendar')) {
                obj['holiday_calendar'] = HolidayCalendar.constructFromObject(data['holiday_calendar']);
            }
            if (data.hasOwnProperty('hourly_salary')) {
                obj['hourly_salary'] = Attribute.constructFromObject(data['hourly_salary']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = Attribute.constructFromObject(data['id']);
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = Attribute.constructFromObject(data['last_name']);
            }
            if (data.hasOwnProperty('office')) {
                obj['office'] = Office.constructFromObject(data['office']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = Attribute.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('probation_period_end')) {
                obj['probation_period_end'] = Attribute.constructFromObject(data['probation_period_end']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Attribute.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('supervisor')) {
                obj['supervisor'] = Supervisor.constructFromObject(data['supervisor']);
            }
            if (data.hasOwnProperty('termination_date')) {
                obj['termination_date'] = Attribute.constructFromObject(data['termination_date']);
            }
            if (data.hasOwnProperty('termination_reason')) {
                obj['termination_reason'] = Attribute.constructFromObject(data['termination_reason']);
            }
            if (data.hasOwnProperty('termination_type')) {
                obj['termination_type'] = Attribute.constructFromObject(data['termination_type']);
            }
            if (data.hasOwnProperty('vacation_day_balance')) {
                obj['vacation_day_balance'] = Attribute.constructFromObject(data['vacation_day_balance']);
            }
            if (data.hasOwnProperty('weekly_working_hours')) {
                obj['weekly_working_hours'] = Attribute.constructFromObject(data['weekly_working_hours']);
            }
            if (data.hasOwnProperty('work_schedule')) {
                obj['work_schedule'] = WorkSchedule.constructFromObject(data['work_schedule']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmployeeAttributesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmployeeAttributesInner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `absence_entitlement`
        if (data['absence_entitlement']) { // data not null
          AbsenceEntitlement.validateJSON(data['absence_entitlement']);
        }
        // validate the optional field `contract_end_date`
        if (data['contract_end_date']) { // data not null
          Attribute.validateJSON(data['contract_end_date']);
        }
        // validate the optional field `cost_centers`
        if (data['cost_centers']) { // data not null
          CostCenters.validateJSON(data['cost_centers']);
        }
        // validate the optional field `created_at`
        if (data['created_at']) { // data not null
          Attribute.validateJSON(data['created_at']);
        }
        // validate the optional field `department`
        if (data['department']) { // data not null
          Department.validateJSON(data['department']);
        }
        // validate the optional field `email`
        if (data['email']) { // data not null
          Attribute.validateJSON(data['email']);
        }
        // validate the optional field `employment_type`
        if (data['employment_type']) { // data not null
          Attribute.validateJSON(data['employment_type']);
        }
        // validate the optional field `first_name`
        if (data['first_name']) { // data not null
          Attribute.validateJSON(data['first_name']);
        }
        // validate the optional field `fix_salary`
        if (data['fix_salary']) { // data not null
          Attribute.validateJSON(data['fix_salary']);
        }
        // validate the optional field `gender`
        if (data['gender']) { // data not null
          Attribute.validateJSON(data['gender']);
        }
        // validate the optional field `hire_date`
        if (data['hire_date']) { // data not null
          Attribute.validateJSON(data['hire_date']);
        }
        // validate the optional field `holiday_calendar`
        if (data['holiday_calendar']) { // data not null
          HolidayCalendar.validateJSON(data['holiday_calendar']);
        }
        // validate the optional field `hourly_salary`
        if (data['hourly_salary']) { // data not null
          Attribute.validateJSON(data['hourly_salary']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          Attribute.validateJSON(data['id']);
        }
        // validate the optional field `last_name`
        if (data['last_name']) { // data not null
          Attribute.validateJSON(data['last_name']);
        }
        // validate the optional field `office`
        if (data['office']) { // data not null
          Office.validateJSON(data['office']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          Attribute.validateJSON(data['position']);
        }
        // validate the optional field `probation_period_end`
        if (data['probation_period_end']) { // data not null
          Attribute.validateJSON(data['probation_period_end']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Attribute.validateJSON(data['status']);
        }
        // validate the optional field `supervisor`
        if (data['supervisor']) { // data not null
          Supervisor.validateJSON(data['supervisor']);
        }
        // validate the optional field `termination_date`
        if (data['termination_date']) { // data not null
          Attribute.validateJSON(data['termination_date']);
        }
        // validate the optional field `termination_reason`
        if (data['termination_reason']) { // data not null
          Attribute.validateJSON(data['termination_reason']);
        }
        // validate the optional field `termination_type`
        if (data['termination_type']) { // data not null
          Attribute.validateJSON(data['termination_type']);
        }
        // validate the optional field `vacation_day_balance`
        if (data['vacation_day_balance']) { // data not null
          Attribute.validateJSON(data['vacation_day_balance']);
        }
        // validate the optional field `weekly_working_hours`
        if (data['weekly_working_hours']) { // data not null
          Attribute.validateJSON(data['weekly_working_hours']);
        }
        // validate the optional field `work_schedule`
        if (data['work_schedule']) { // data not null
          WorkSchedule.validateJSON(data['work_schedule']);
        }

        return true;
    }


}



/**
 * @member {module:model/AbsenceEntitlement} absence_entitlement
 */
EmployeeAttributesInner.prototype['absence_entitlement'] = undefined;

/**
 * @member {module:model/Attribute} contract_end_date
 */
EmployeeAttributesInner.prototype['contract_end_date'] = undefined;

/**
 * @member {module:model/CostCenters} cost_centers
 */
EmployeeAttributesInner.prototype['cost_centers'] = undefined;

/**
 * @member {module:model/Attribute} created_at
 */
EmployeeAttributesInner.prototype['created_at'] = undefined;

/**
 * @member {module:model/Department} department
 */
EmployeeAttributesInner.prototype['department'] = undefined;

/**
 * @member {module:model/Attribute} email
 */
EmployeeAttributesInner.prototype['email'] = undefined;

/**
 * @member {module:model/Attribute} employment_type
 */
EmployeeAttributesInner.prototype['employment_type'] = undefined;

/**
 * @member {module:model/Attribute} first_name
 */
EmployeeAttributesInner.prototype['first_name'] = undefined;

/**
 * @member {module:model/Attribute} fix_salary
 */
EmployeeAttributesInner.prototype['fix_salary'] = undefined;

/**
 * @member {module:model/Attribute} gender
 */
EmployeeAttributesInner.prototype['gender'] = undefined;

/**
 * @member {module:model/Attribute} hire_date
 */
EmployeeAttributesInner.prototype['hire_date'] = undefined;

/**
 * @member {module:model/HolidayCalendar} holiday_calendar
 */
EmployeeAttributesInner.prototype['holiday_calendar'] = undefined;

/**
 * @member {module:model/Attribute} hourly_salary
 */
EmployeeAttributesInner.prototype['hourly_salary'] = undefined;

/**
 * @member {module:model/Attribute} id
 */
EmployeeAttributesInner.prototype['id'] = undefined;

/**
 * @member {module:model/Attribute} last_name
 */
EmployeeAttributesInner.prototype['last_name'] = undefined;

/**
 * @member {module:model/Office} office
 */
EmployeeAttributesInner.prototype['office'] = undefined;

/**
 * @member {module:model/Attribute} position
 */
EmployeeAttributesInner.prototype['position'] = undefined;

/**
 * @member {module:model/Attribute} probation_period_end
 */
EmployeeAttributesInner.prototype['probation_period_end'] = undefined;

/**
 * @member {module:model/Attribute} status
 */
EmployeeAttributesInner.prototype['status'] = undefined;

/**
 * @member {module:model/Supervisor} supervisor
 */
EmployeeAttributesInner.prototype['supervisor'] = undefined;

/**
 * @member {module:model/Attribute} termination_date
 */
EmployeeAttributesInner.prototype['termination_date'] = undefined;

/**
 * @member {module:model/Attribute} termination_reason
 */
EmployeeAttributesInner.prototype['termination_reason'] = undefined;

/**
 * @member {module:model/Attribute} termination_type
 */
EmployeeAttributesInner.prototype['termination_type'] = undefined;

/**
 * @member {module:model/Attribute} vacation_day_balance
 */
EmployeeAttributesInner.prototype['vacation_day_balance'] = undefined;

/**
 * @member {module:model/Attribute} weekly_working_hours
 */
EmployeeAttributesInner.prototype['weekly_working_hours'] = undefined;

/**
 * @member {module:model/WorkSchedule} work_schedule
 */
EmployeeAttributesInner.prototype['work_schedule'] = undefined;






export default EmployeeAttributesInner;

