/**
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbsencePeriodsResponse_allOf_data_employee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbsencePeriodsResponse_allOf_data_employee::OAIAbsencePeriodsResponse_allOf_data_employee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbsencePeriodsResponse_allOf_data_employee::OAIAbsencePeriodsResponse_allOf_data_employee() {
    this->initializeModel();
}

OAIAbsencePeriodsResponse_allOf_data_employee::~OAIAbsencePeriodsResponse_allOf_data_employee() {}

void OAIAbsencePeriodsResponse_allOf_data_employee::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAbsencePeriodsResponse_allOf_data_employee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbsencePeriodsResponse_allOf_data_employee::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAbsencePeriodsResponse_allOf_data_employee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbsencePeriodsResponse_allOf_data_employee::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAbsencePeriodsResponse_allOf_data_employee_attributes> OAIAbsencePeriodsResponse_allOf_data_employee::getAttributes() const {
    return m_attributes;
}
void OAIAbsencePeriodsResponse_allOf_data_employee::setAttributes(const QList<OAIAbsencePeriodsResponse_allOf_data_employee_attributes> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_employee::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_employee::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIAbsencePeriodsResponse_allOf_data_employee::getType() const {
    return m_type;
}
void OAIAbsencePeriodsResponse_allOf_data_employee::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_employee::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_employee::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAbsencePeriodsResponse_allOf_data_employee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbsencePeriodsResponse_allOf_data_employee::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
