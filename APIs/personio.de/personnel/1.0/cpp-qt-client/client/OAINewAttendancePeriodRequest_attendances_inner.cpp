/**
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewAttendancePeriodRequest_attendances_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewAttendancePeriodRequest_attendances_inner::OAINewAttendancePeriodRequest_attendances_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewAttendancePeriodRequest_attendances_inner::OAINewAttendancePeriodRequest_attendances_inner() {
    this->initializeModel();
}

OAINewAttendancePeriodRequest_attendances_inner::~OAINewAttendancePeriodRequest_attendances_inner() {}

void OAINewAttendancePeriodRequest_attendances_inner::initializeModel() {

    m_r_break_isSet = false;
    m_r_break_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAINewAttendancePeriodRequest_attendances_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewAttendancePeriodRequest_attendances_inner::fromJsonObject(QJsonObject json) {

    m_r_break_isValid = ::OpenAPI::fromJsonValue(m_r_break, json[QString("break")]);
    m_r_break_isSet = !json[QString("break")].isNull() && m_r_break_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;
}

QString OAINewAttendancePeriodRequest_attendances_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewAttendancePeriodRequest_attendances_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_r_break_isSet) {
        obj.insert(QString("break"), ::OpenAPI::toJsonValue(m_r_break));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_employee_isSet) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

qint32 OAINewAttendancePeriodRequest_attendances_inner::getRBreak() const {
    return m_r_break;
}
void OAINewAttendancePeriodRequest_attendances_inner::setRBreak(const qint32 &r_break) {
    m_r_break = r_break;
    m_r_break_isSet = true;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_r_break_Set() const{
    return m_r_break_isSet;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_r_break_Valid() const{
    return m_r_break_isValid;
}

QString OAINewAttendancePeriodRequest_attendances_inner::getComment() const {
    return m_comment;
}
void OAINewAttendancePeriodRequest_attendances_inner::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

QDate OAINewAttendancePeriodRequest_attendances_inner::getDate() const {
    return m_date;
}
void OAINewAttendancePeriodRequest_attendances_inner::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAINewAttendancePeriodRequest_attendances_inner::getEmployee() const {
    return m_employee;
}
void OAINewAttendancePeriodRequest_attendances_inner::setEmployee(const qint32 &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_employee_Valid() const{
    return m_employee_isValid;
}

QString OAINewAttendancePeriodRequest_attendances_inner::getEndTime() const {
    return m_end_time;
}
void OAINewAttendancePeriodRequest_attendances_inner::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAINewAttendancePeriodRequest_attendances_inner::getStartTime() const {
    return m_start_time;
}
void OAINewAttendancePeriodRequest_attendances_inner::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAINewAttendancePeriodRequest_attendances_inner::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAINewAttendancePeriodRequest_attendances_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_break_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewAttendancePeriodRequest_attendances_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_break_isValid && m_comment_isValid && m_date_isValid && m_employee_isValid && m_end_time_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
