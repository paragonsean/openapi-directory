/**
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbsencePeriodsResponse_allOf_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbsencePeriodsResponse_allOf_data_attributes::OAIAbsencePeriodsResponse_allOf_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbsencePeriodsResponse_allOf_data_attributes::OAIAbsencePeriodsResponse_allOf_data_attributes() {
    this->initializeModel();
}

OAIAbsencePeriodsResponse_allOf_data_attributes::~OAIAbsencePeriodsResponse_allOf_data_attributes() {}

void OAIAbsencePeriodsResponse_allOf_data_attributes::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_days_count_isSet = false;
    m_days_count_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_half_day_end_isSet = false;
    m_half_day_end_isValid = false;

    m_half_day_start_isSet = false;
    m_half_day_start_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_off_type_isSet = false;
    m_time_off_type_isValid = false;
}

void OAIAbsencePeriodsResponse_allOf_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbsencePeriodsResponse_allOf_data_attributes::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_days_count_isValid = ::OpenAPI::fromJsonValue(m_days_count, json[QString("days_count")]);
    m_days_count_isSet = !json[QString("days_count")].isNull() && m_days_count_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_half_day_end_isValid = ::OpenAPI::fromJsonValue(m_half_day_end, json[QString("half_day_end")]);
    m_half_day_end_isSet = !json[QString("half_day_end")].isNull() && m_half_day_end_isValid;

    m_half_day_start_isValid = ::OpenAPI::fromJsonValue(m_half_day_start, json[QString("half_day_start")]);
    m_half_day_start_isSet = !json[QString("half_day_start")].isNull() && m_half_day_start_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_off_type_isValid = ::OpenAPI::fromJsonValue(m_time_off_type, json[QString("time_off_type")]);
    m_time_off_type_isSet = !json[QString("time_off_type")].isNull() && m_time_off_type_isValid;
}

QString OAIAbsencePeriodsResponse_allOf_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbsencePeriodsResponse_allOf_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate.isSet()) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_days_count_isSet) {
        obj.insert(QString("days_count"), ::OpenAPI::toJsonValue(m_days_count));
    }
    if (m_employee.isSet()) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_half_day_end_isSet) {
        obj.insert(QString("half_day_end"), ::OpenAPI::toJsonValue(m_half_day_end));
    }
    if (m_half_day_start_isSet) {
        obj.insert(QString("half_day_start"), ::OpenAPI::toJsonValue(m_half_day_start));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_off_type.isSet()) {
        obj.insert(QString("time_off_type"), ::OpenAPI::toJsonValue(m_time_off_type));
    }
    return obj;
}

OAIAbsencePeriodsResponse_allOf_data_certificate OAIAbsencePeriodsResponse_allOf_data_attributes::getCertificate() const {
    return m_certificate;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setCertificate(const OAIAbsencePeriodsResponse_allOf_data_certificate &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIAbsencePeriodsResponse_allOf_data_attributes::getCreatedAt() const {
    return m_created_at;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_created_at_Valid() const{
    return m_created_at_isValid;
}

double OAIAbsencePeriodsResponse_allOf_data_attributes::getDaysCount() const {
    return m_days_count;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setDaysCount(const double &days_count) {
    m_days_count = days_count;
    m_days_count_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_days_count_Set() const{
    return m_days_count_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_days_count_Valid() const{
    return m_days_count_isValid;
}

OAIAbsencePeriodsResponse_allOf_data_employee OAIAbsencePeriodsResponse_allOf_data_attributes::getEmployee() const {
    return m_employee;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setEmployee(const OAIAbsencePeriodsResponse_allOf_data_employee &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_employee_Valid() const{
    return m_employee_isValid;
}

QString OAIAbsencePeriodsResponse_allOf_data_attributes::getEndDate() const {
    return m_end_date;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAIAbsencePeriodsResponse_allOf_data_attributes::getHalfDayEnd() const {
    return m_half_day_end;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setHalfDayEnd(const double &half_day_end) {
    m_half_day_end = half_day_end;
    m_half_day_end_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_half_day_end_Set() const{
    return m_half_day_end_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_half_day_end_Valid() const{
    return m_half_day_end_isValid;
}

double OAIAbsencePeriodsResponse_allOf_data_attributes::getHalfDayStart() const {
    return m_half_day_start;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setHalfDayStart(const double &half_day_start) {
    m_half_day_start = half_day_start;
    m_half_day_start_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_half_day_start_Set() const{
    return m_half_day_start_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_half_day_start_Valid() const{
    return m_half_day_start_isValid;
}

qint32 OAIAbsencePeriodsResponse_allOf_data_attributes::getId() const {
    return m_id;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAbsencePeriodsResponse_allOf_data_attributes::getStartDate() const {
    return m_start_date;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIAbsencePeriodsResponse_allOf_data_attributes::getStatus() const {
    return m_status;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_status_Valid() const{
    return m_status_isValid;
}

OAIAbsencePeriodsResponse_allOf_data_time_off_type OAIAbsencePeriodsResponse_allOf_data_attributes::getTimeOffType() const {
    return m_time_off_type;
}
void OAIAbsencePeriodsResponse_allOf_data_attributes::setTimeOffType(const OAIAbsencePeriodsResponse_allOf_data_time_off_type &time_off_type) {
    m_time_off_type = time_off_type;
    m_time_off_type_isSet = true;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_time_off_type_Set() const{
    return m_time_off_type_isSet;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::is_time_off_type_Valid() const{
    return m_time_off_type_isValid;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_half_day_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_half_day_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_off_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbsencePeriodsResponse_allOf_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
