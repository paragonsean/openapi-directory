/**
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmployee_attributes_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmployee_attributes_inner::OAIEmployee_attributes_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmployee_attributes_inner::OAIEmployee_attributes_inner() {
    this->initializeModel();
}

OAIEmployee_attributes_inner::~OAIEmployee_attributes_inner() {}

void OAIEmployee_attributes_inner::initializeModel() {

    m_absence_entitlement_isSet = false;
    m_absence_entitlement_isValid = false;

    m_contract_end_date_isSet = false;
    m_contract_end_date_isValid = false;

    m_cost_centers_isSet = false;
    m_cost_centers_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_employment_type_isSet = false;
    m_employment_type_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_fix_salary_isSet = false;
    m_fix_salary_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_hire_date_isSet = false;
    m_hire_date_isValid = false;

    m_holiday_calendar_isSet = false;
    m_holiday_calendar_isValid = false;

    m_hourly_salary_isSet = false;
    m_hourly_salary_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_office_isSet = false;
    m_office_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_probation_period_end_isSet = false;
    m_probation_period_end_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supervisor_isSet = false;
    m_supervisor_isValid = false;

    m_termination_date_isSet = false;
    m_termination_date_isValid = false;

    m_termination_reason_isSet = false;
    m_termination_reason_isValid = false;

    m_termination_type_isSet = false;
    m_termination_type_isValid = false;

    m_vacation_day_balance_isSet = false;
    m_vacation_day_balance_isValid = false;

    m_weekly_working_hours_isSet = false;
    m_weekly_working_hours_isValid = false;

    m_work_schedule_isSet = false;
    m_work_schedule_isValid = false;
}

void OAIEmployee_attributes_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmployee_attributes_inner::fromJsonObject(QJsonObject json) {

    m_absence_entitlement_isValid = ::OpenAPI::fromJsonValue(m_absence_entitlement, json[QString("absence_entitlement")]);
    m_absence_entitlement_isSet = !json[QString("absence_entitlement")].isNull() && m_absence_entitlement_isValid;

    m_contract_end_date_isValid = ::OpenAPI::fromJsonValue(m_contract_end_date, json[QString("contract_end_date")]);
    m_contract_end_date_isSet = !json[QString("contract_end_date")].isNull() && m_contract_end_date_isValid;

    m_cost_centers_isValid = ::OpenAPI::fromJsonValue(m_cost_centers, json[QString("cost_centers")]);
    m_cost_centers_isSet = !json[QString("cost_centers")].isNull() && m_cost_centers_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_employment_type_isValid = ::OpenAPI::fromJsonValue(m_employment_type, json[QString("employment_type")]);
    m_employment_type_isSet = !json[QString("employment_type")].isNull() && m_employment_type_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_fix_salary_isValid = ::OpenAPI::fromJsonValue(m_fix_salary, json[QString("fix_salary")]);
    m_fix_salary_isSet = !json[QString("fix_salary")].isNull() && m_fix_salary_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_hire_date_isValid = ::OpenAPI::fromJsonValue(m_hire_date, json[QString("hire_date")]);
    m_hire_date_isSet = !json[QString("hire_date")].isNull() && m_hire_date_isValid;

    m_holiday_calendar_isValid = ::OpenAPI::fromJsonValue(m_holiday_calendar, json[QString("holiday_calendar")]);
    m_holiday_calendar_isSet = !json[QString("holiday_calendar")].isNull() && m_holiday_calendar_isValid;

    m_hourly_salary_isValid = ::OpenAPI::fromJsonValue(m_hourly_salary, json[QString("hourly_salary")]);
    m_hourly_salary_isSet = !json[QString("hourly_salary")].isNull() && m_hourly_salary_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_office_isValid = ::OpenAPI::fromJsonValue(m_office, json[QString("office")]);
    m_office_isSet = !json[QString("office")].isNull() && m_office_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_probation_period_end_isValid = ::OpenAPI::fromJsonValue(m_probation_period_end, json[QString("probation_period_end")]);
    m_probation_period_end_isSet = !json[QString("probation_period_end")].isNull() && m_probation_period_end_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supervisor_isValid = ::OpenAPI::fromJsonValue(m_supervisor, json[QString("supervisor")]);
    m_supervisor_isSet = !json[QString("supervisor")].isNull() && m_supervisor_isValid;

    m_termination_date_isValid = ::OpenAPI::fromJsonValue(m_termination_date, json[QString("termination_date")]);
    m_termination_date_isSet = !json[QString("termination_date")].isNull() && m_termination_date_isValid;

    m_termination_reason_isValid = ::OpenAPI::fromJsonValue(m_termination_reason, json[QString("termination_reason")]);
    m_termination_reason_isSet = !json[QString("termination_reason")].isNull() && m_termination_reason_isValid;

    m_termination_type_isValid = ::OpenAPI::fromJsonValue(m_termination_type, json[QString("termination_type")]);
    m_termination_type_isSet = !json[QString("termination_type")].isNull() && m_termination_type_isValid;

    m_vacation_day_balance_isValid = ::OpenAPI::fromJsonValue(m_vacation_day_balance, json[QString("vacation_day_balance")]);
    m_vacation_day_balance_isSet = !json[QString("vacation_day_balance")].isNull() && m_vacation_day_balance_isValid;

    m_weekly_working_hours_isValid = ::OpenAPI::fromJsonValue(m_weekly_working_hours, json[QString("weekly_working_hours")]);
    m_weekly_working_hours_isSet = !json[QString("weekly_working_hours")].isNull() && m_weekly_working_hours_isValid;

    m_work_schedule_isValid = ::OpenAPI::fromJsonValue(m_work_schedule, json[QString("work_schedule")]);
    m_work_schedule_isSet = !json[QString("work_schedule")].isNull() && m_work_schedule_isValid;
}

QString OAIEmployee_attributes_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmployee_attributes_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_absence_entitlement.isSet()) {
        obj.insert(QString("absence_entitlement"), ::OpenAPI::toJsonValue(m_absence_entitlement));
    }
    if (m_contract_end_date.isSet()) {
        obj.insert(QString("contract_end_date"), ::OpenAPI::toJsonValue(m_contract_end_date));
    }
    if (m_cost_centers.isSet()) {
        obj.insert(QString("cost_centers"), ::OpenAPI::toJsonValue(m_cost_centers));
    }
    if (m_created_at.isSet()) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_department.isSet()) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_email.isSet()) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_employment_type.isSet()) {
        obj.insert(QString("employment_type"), ::OpenAPI::toJsonValue(m_employment_type));
    }
    if (m_first_name.isSet()) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_fix_salary.isSet()) {
        obj.insert(QString("fix_salary"), ::OpenAPI::toJsonValue(m_fix_salary));
    }
    if (m_gender.isSet()) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_hire_date.isSet()) {
        obj.insert(QString("hire_date"), ::OpenAPI::toJsonValue(m_hire_date));
    }
    if (m_holiday_calendar.isSet()) {
        obj.insert(QString("holiday_calendar"), ::OpenAPI::toJsonValue(m_holiday_calendar));
    }
    if (m_hourly_salary.isSet()) {
        obj.insert(QString("hourly_salary"), ::OpenAPI::toJsonValue(m_hourly_salary));
    }
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name.isSet()) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_office.isSet()) {
        obj.insert(QString("office"), ::OpenAPI::toJsonValue(m_office));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_probation_period_end.isSet()) {
        obj.insert(QString("probation_period_end"), ::OpenAPI::toJsonValue(m_probation_period_end));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supervisor.isSet()) {
        obj.insert(QString("supervisor"), ::OpenAPI::toJsonValue(m_supervisor));
    }
    if (m_termination_date.isSet()) {
        obj.insert(QString("termination_date"), ::OpenAPI::toJsonValue(m_termination_date));
    }
    if (m_termination_reason.isSet()) {
        obj.insert(QString("termination_reason"), ::OpenAPI::toJsonValue(m_termination_reason));
    }
    if (m_termination_type.isSet()) {
        obj.insert(QString("termination_type"), ::OpenAPI::toJsonValue(m_termination_type));
    }
    if (m_vacation_day_balance.isSet()) {
        obj.insert(QString("vacation_day_balance"), ::OpenAPI::toJsonValue(m_vacation_day_balance));
    }
    if (m_weekly_working_hours.isSet()) {
        obj.insert(QString("weekly_working_hours"), ::OpenAPI::toJsonValue(m_weekly_working_hours));
    }
    if (m_work_schedule.isSet()) {
        obj.insert(QString("work_schedule"), ::OpenAPI::toJsonValue(m_work_schedule));
    }
    return obj;
}

OAIAbsenceEntitlement OAIEmployee_attributes_inner::getAbsenceEntitlement() const {
    return m_absence_entitlement;
}
void OAIEmployee_attributes_inner::setAbsenceEntitlement(const OAIAbsenceEntitlement &absence_entitlement) {
    m_absence_entitlement = absence_entitlement;
    m_absence_entitlement_isSet = true;
}

bool OAIEmployee_attributes_inner::is_absence_entitlement_Set() const{
    return m_absence_entitlement_isSet;
}

bool OAIEmployee_attributes_inner::is_absence_entitlement_Valid() const{
    return m_absence_entitlement_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getContractEndDate() const {
    return m_contract_end_date;
}
void OAIEmployee_attributes_inner::setContractEndDate(const OAIAttribute &contract_end_date) {
    m_contract_end_date = contract_end_date;
    m_contract_end_date_isSet = true;
}

bool OAIEmployee_attributes_inner::is_contract_end_date_Set() const{
    return m_contract_end_date_isSet;
}

bool OAIEmployee_attributes_inner::is_contract_end_date_Valid() const{
    return m_contract_end_date_isValid;
}

OAICostCenters OAIEmployee_attributes_inner::getCostCenters() const {
    return m_cost_centers;
}
void OAIEmployee_attributes_inner::setCostCenters(const OAICostCenters &cost_centers) {
    m_cost_centers = cost_centers;
    m_cost_centers_isSet = true;
}

bool OAIEmployee_attributes_inner::is_cost_centers_Set() const{
    return m_cost_centers_isSet;
}

bool OAIEmployee_attributes_inner::is_cost_centers_Valid() const{
    return m_cost_centers_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getCreatedAt() const {
    return m_created_at;
}
void OAIEmployee_attributes_inner::setCreatedAt(const OAIAttribute &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEmployee_attributes_inner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEmployee_attributes_inner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIDepartment OAIEmployee_attributes_inner::getDepartment() const {
    return m_department;
}
void OAIEmployee_attributes_inner::setDepartment(const OAIDepartment &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIEmployee_attributes_inner::is_department_Set() const{
    return m_department_isSet;
}

bool OAIEmployee_attributes_inner::is_department_Valid() const{
    return m_department_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getEmail() const {
    return m_email;
}
void OAIEmployee_attributes_inner::setEmail(const OAIAttribute &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEmployee_attributes_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEmployee_attributes_inner::is_email_Valid() const{
    return m_email_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getEmploymentType() const {
    return m_employment_type;
}
void OAIEmployee_attributes_inner::setEmploymentType(const OAIAttribute &employment_type) {
    m_employment_type = employment_type;
    m_employment_type_isSet = true;
}

bool OAIEmployee_attributes_inner::is_employment_type_Set() const{
    return m_employment_type_isSet;
}

bool OAIEmployee_attributes_inner::is_employment_type_Valid() const{
    return m_employment_type_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getFirstName() const {
    return m_first_name;
}
void OAIEmployee_attributes_inner::setFirstName(const OAIAttribute &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIEmployee_attributes_inner::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIEmployee_attributes_inner::is_first_name_Valid() const{
    return m_first_name_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getFixSalary() const {
    return m_fix_salary;
}
void OAIEmployee_attributes_inner::setFixSalary(const OAIAttribute &fix_salary) {
    m_fix_salary = fix_salary;
    m_fix_salary_isSet = true;
}

bool OAIEmployee_attributes_inner::is_fix_salary_Set() const{
    return m_fix_salary_isSet;
}

bool OAIEmployee_attributes_inner::is_fix_salary_Valid() const{
    return m_fix_salary_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getGender() const {
    return m_gender;
}
void OAIEmployee_attributes_inner::setGender(const OAIAttribute &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIEmployee_attributes_inner::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIEmployee_attributes_inner::is_gender_Valid() const{
    return m_gender_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getHireDate() const {
    return m_hire_date;
}
void OAIEmployee_attributes_inner::setHireDate(const OAIAttribute &hire_date) {
    m_hire_date = hire_date;
    m_hire_date_isSet = true;
}

bool OAIEmployee_attributes_inner::is_hire_date_Set() const{
    return m_hire_date_isSet;
}

bool OAIEmployee_attributes_inner::is_hire_date_Valid() const{
    return m_hire_date_isValid;
}

OAIHolidayCalendar OAIEmployee_attributes_inner::getHolidayCalendar() const {
    return m_holiday_calendar;
}
void OAIEmployee_attributes_inner::setHolidayCalendar(const OAIHolidayCalendar &holiday_calendar) {
    m_holiday_calendar = holiday_calendar;
    m_holiday_calendar_isSet = true;
}

bool OAIEmployee_attributes_inner::is_holiday_calendar_Set() const{
    return m_holiday_calendar_isSet;
}

bool OAIEmployee_attributes_inner::is_holiday_calendar_Valid() const{
    return m_holiday_calendar_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getHourlySalary() const {
    return m_hourly_salary;
}
void OAIEmployee_attributes_inner::setHourlySalary(const OAIAttribute &hourly_salary) {
    m_hourly_salary = hourly_salary;
    m_hourly_salary_isSet = true;
}

bool OAIEmployee_attributes_inner::is_hourly_salary_Set() const{
    return m_hourly_salary_isSet;
}

bool OAIEmployee_attributes_inner::is_hourly_salary_Valid() const{
    return m_hourly_salary_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getId() const {
    return m_id;
}
void OAIEmployee_attributes_inner::setId(const OAIAttribute &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEmployee_attributes_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEmployee_attributes_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getLastName() const {
    return m_last_name;
}
void OAIEmployee_attributes_inner::setLastName(const OAIAttribute &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIEmployee_attributes_inner::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIEmployee_attributes_inner::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAIOffice OAIEmployee_attributes_inner::getOffice() const {
    return m_office;
}
void OAIEmployee_attributes_inner::setOffice(const OAIOffice &office) {
    m_office = office;
    m_office_isSet = true;
}

bool OAIEmployee_attributes_inner::is_office_Set() const{
    return m_office_isSet;
}

bool OAIEmployee_attributes_inner::is_office_Valid() const{
    return m_office_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getPosition() const {
    return m_position;
}
void OAIEmployee_attributes_inner::setPosition(const OAIAttribute &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIEmployee_attributes_inner::is_position_Set() const{
    return m_position_isSet;
}

bool OAIEmployee_attributes_inner::is_position_Valid() const{
    return m_position_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getProbationPeriodEnd() const {
    return m_probation_period_end;
}
void OAIEmployee_attributes_inner::setProbationPeriodEnd(const OAIAttribute &probation_period_end) {
    m_probation_period_end = probation_period_end;
    m_probation_period_end_isSet = true;
}

bool OAIEmployee_attributes_inner::is_probation_period_end_Set() const{
    return m_probation_period_end_isSet;
}

bool OAIEmployee_attributes_inner::is_probation_period_end_Valid() const{
    return m_probation_period_end_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getStatus() const {
    return m_status;
}
void OAIEmployee_attributes_inner::setStatus(const OAIAttribute &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEmployee_attributes_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEmployee_attributes_inner::is_status_Valid() const{
    return m_status_isValid;
}

OAISupervisor OAIEmployee_attributes_inner::getSupervisor() const {
    return m_supervisor;
}
void OAIEmployee_attributes_inner::setSupervisor(const OAISupervisor &supervisor) {
    m_supervisor = supervisor;
    m_supervisor_isSet = true;
}

bool OAIEmployee_attributes_inner::is_supervisor_Set() const{
    return m_supervisor_isSet;
}

bool OAIEmployee_attributes_inner::is_supervisor_Valid() const{
    return m_supervisor_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getTerminationDate() const {
    return m_termination_date;
}
void OAIEmployee_attributes_inner::setTerminationDate(const OAIAttribute &termination_date) {
    m_termination_date = termination_date;
    m_termination_date_isSet = true;
}

bool OAIEmployee_attributes_inner::is_termination_date_Set() const{
    return m_termination_date_isSet;
}

bool OAIEmployee_attributes_inner::is_termination_date_Valid() const{
    return m_termination_date_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getTerminationReason() const {
    return m_termination_reason;
}
void OAIEmployee_attributes_inner::setTerminationReason(const OAIAttribute &termination_reason) {
    m_termination_reason = termination_reason;
    m_termination_reason_isSet = true;
}

bool OAIEmployee_attributes_inner::is_termination_reason_Set() const{
    return m_termination_reason_isSet;
}

bool OAIEmployee_attributes_inner::is_termination_reason_Valid() const{
    return m_termination_reason_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getTerminationType() const {
    return m_termination_type;
}
void OAIEmployee_attributes_inner::setTerminationType(const OAIAttribute &termination_type) {
    m_termination_type = termination_type;
    m_termination_type_isSet = true;
}

bool OAIEmployee_attributes_inner::is_termination_type_Set() const{
    return m_termination_type_isSet;
}

bool OAIEmployee_attributes_inner::is_termination_type_Valid() const{
    return m_termination_type_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getVacationDayBalance() const {
    return m_vacation_day_balance;
}
void OAIEmployee_attributes_inner::setVacationDayBalance(const OAIAttribute &vacation_day_balance) {
    m_vacation_day_balance = vacation_day_balance;
    m_vacation_day_balance_isSet = true;
}

bool OAIEmployee_attributes_inner::is_vacation_day_balance_Set() const{
    return m_vacation_day_balance_isSet;
}

bool OAIEmployee_attributes_inner::is_vacation_day_balance_Valid() const{
    return m_vacation_day_balance_isValid;
}

OAIAttribute OAIEmployee_attributes_inner::getWeeklyWorkingHours() const {
    return m_weekly_working_hours;
}
void OAIEmployee_attributes_inner::setWeeklyWorkingHours(const OAIAttribute &weekly_working_hours) {
    m_weekly_working_hours = weekly_working_hours;
    m_weekly_working_hours_isSet = true;
}

bool OAIEmployee_attributes_inner::is_weekly_working_hours_Set() const{
    return m_weekly_working_hours_isSet;
}

bool OAIEmployee_attributes_inner::is_weekly_working_hours_Valid() const{
    return m_weekly_working_hours_isValid;
}

OAIWorkSchedule OAIEmployee_attributes_inner::getWorkSchedule() const {
    return m_work_schedule;
}
void OAIEmployee_attributes_inner::setWorkSchedule(const OAIWorkSchedule &work_schedule) {
    m_work_schedule = work_schedule;
    m_work_schedule_isSet = true;
}

bool OAIEmployee_attributes_inner::is_work_schedule_Set() const{
    return m_work_schedule_isSet;
}

bool OAIEmployee_attributes_inner::is_work_schedule_Valid() const{
    return m_work_schedule_isValid;
}

bool OAIEmployee_attributes_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absence_entitlement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_centers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_department.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fix_salary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hire_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_holiday_calendar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_salary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_office.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_probation_period_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supervisor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vacation_day_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_working_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmployee_attributes_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
