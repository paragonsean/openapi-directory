/**
 * Personnel Data
 * API for reading and writing personnel data incl. data about attendances and absences
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTimeOffPeriodRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTimeOffPeriodRequest::OAICreateTimeOffPeriodRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTimeOffPeriodRequest::OAICreateTimeOffPeriodRequest() {
    this->initializeModel();
}

OAICreateTimeOffPeriodRequest::~OAICreateTimeOffPeriodRequest() {}

void OAICreateTimeOffPeriodRequest::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_employee_id_isSet = false;
    m_employee_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_half_day_end_isSet = false;
    m_half_day_end_isValid = false;

    m_half_day_start_isSet = false;
    m_half_day_start_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_time_off_type_id_isSet = false;
    m_time_off_type_id_isValid = false;
}

void OAICreateTimeOffPeriodRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTimeOffPeriodRequest::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_employee_id_isValid = ::OpenAPI::fromJsonValue(m_employee_id, json[QString("employee_id")]);
    m_employee_id_isSet = !json[QString("employee_id")].isNull() && m_employee_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_half_day_end_isValid = ::OpenAPI::fromJsonValue(m_half_day_end, json[QString("half_day_end")]);
    m_half_day_end_isSet = !json[QString("half_day_end")].isNull() && m_half_day_end_isValid;

    m_half_day_start_isValid = ::OpenAPI::fromJsonValue(m_half_day_start, json[QString("half_day_start")]);
    m_half_day_start_isSet = !json[QString("half_day_start")].isNull() && m_half_day_start_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_time_off_type_id_isValid = ::OpenAPI::fromJsonValue(m_time_off_type_id, json[QString("time_off_type_id")]);
    m_time_off_type_id_isSet = !json[QString("time_off_type_id")].isNull() && m_time_off_type_id_isValid;
}

QString OAICreateTimeOffPeriodRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTimeOffPeriodRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_employee_id_isSet) {
        obj.insert(QString("employee_id"), ::OpenAPI::toJsonValue(m_employee_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_half_day_end_isSet) {
        obj.insert(QString("half_day_end"), ::OpenAPI::toJsonValue(m_half_day_end));
    }
    if (m_half_day_start_isSet) {
        obj.insert(QString("half_day_start"), ::OpenAPI::toJsonValue(m_half_day_start));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_time_off_type_id_isSet) {
        obj.insert(QString("time_off_type_id"), ::OpenAPI::toJsonValue(m_time_off_type_id));
    }
    return obj;
}

QString OAICreateTimeOffPeriodRequest::getComment() const {
    return m_comment;
}
void OAICreateTimeOffPeriodRequest::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAICreateTimeOffPeriodRequest::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAICreateTimeOffPeriodRequest::is_comment_Valid() const{
    return m_comment_isValid;
}

qint32 OAICreateTimeOffPeriodRequest::getEmployeeId() const {
    return m_employee_id;
}
void OAICreateTimeOffPeriodRequest::setEmployeeId(const qint32 &employee_id) {
    m_employee_id = employee_id;
    m_employee_id_isSet = true;
}

bool OAICreateTimeOffPeriodRequest::is_employee_id_Set() const{
    return m_employee_id_isSet;
}

bool OAICreateTimeOffPeriodRequest::is_employee_id_Valid() const{
    return m_employee_id_isValid;
}

QDate OAICreateTimeOffPeriodRequest::getEndDate() const {
    return m_end_date;
}
void OAICreateTimeOffPeriodRequest::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAICreateTimeOffPeriodRequest::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICreateTimeOffPeriodRequest::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAICreateTimeOffPeriodRequest::isHalfDayEnd() const {
    return m_half_day_end;
}
void OAICreateTimeOffPeriodRequest::setHalfDayEnd(const bool &half_day_end) {
    m_half_day_end = half_day_end;
    m_half_day_end_isSet = true;
}

bool OAICreateTimeOffPeriodRequest::is_half_day_end_Set() const{
    return m_half_day_end_isSet;
}

bool OAICreateTimeOffPeriodRequest::is_half_day_end_Valid() const{
    return m_half_day_end_isValid;
}

bool OAICreateTimeOffPeriodRequest::isHalfDayStart() const {
    return m_half_day_start;
}
void OAICreateTimeOffPeriodRequest::setHalfDayStart(const bool &half_day_start) {
    m_half_day_start = half_day_start;
    m_half_day_start_isSet = true;
}

bool OAICreateTimeOffPeriodRequest::is_half_day_start_Set() const{
    return m_half_day_start_isSet;
}

bool OAICreateTimeOffPeriodRequest::is_half_day_start_Valid() const{
    return m_half_day_start_isValid;
}

QDate OAICreateTimeOffPeriodRequest::getStartDate() const {
    return m_start_date;
}
void OAICreateTimeOffPeriodRequest::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICreateTimeOffPeriodRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICreateTimeOffPeriodRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint32 OAICreateTimeOffPeriodRequest::getTimeOffTypeId() const {
    return m_time_off_type_id;
}
void OAICreateTimeOffPeriodRequest::setTimeOffTypeId(const qint32 &time_off_type_id) {
    m_time_off_type_id = time_off_type_id;
    m_time_off_type_id_isSet = true;
}

bool OAICreateTimeOffPeriodRequest::is_time_off_type_id_Set() const{
    return m_time_off_type_id_isSet;
}

bool OAICreateTimeOffPeriodRequest::is_time_off_type_id_Valid() const{
    return m_time_off_type_id_isValid;
}

bool OAICreateTimeOffPeriodRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_half_day_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_half_day_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_off_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTimeOffPeriodRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_employee_id_isValid && m_end_date_isValid && m_half_day_end_isValid && m_half_day_start_isValid && m_start_date_isValid && m_time_off_type_id_isValid && true;
}

} // namespace OpenAPI
