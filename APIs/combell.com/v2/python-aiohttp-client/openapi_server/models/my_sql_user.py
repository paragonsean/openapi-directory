# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_rights import UserRights
from openapi_server import util


class MySqlUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, name: str=None, rights: UserRights=None):
        """MySqlUser - a model defined in OpenAPI

        :param enabled: The enabled of this MySqlUser.
        :param name: The name of this MySqlUser.
        :param rights: The rights of this MySqlUser.
        """
        self.openapi_types = {
            'enabled': bool,
            'name': str,
            'rights': UserRights
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'name': 'name',
            'rights': 'rights'
        }

        self._enabled = enabled
        self._name = name
        self._rights = rights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MySqlUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MySqlUser of this MySqlUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this MySqlUser.

        User status

        :return: The enabled of this MySqlUser.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MySqlUser.

        User status

        :param enabled: The enabled of this MySqlUser.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this MySqlUser.

        User name

        :return: The name of this MySqlUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MySqlUser.

        User name

        :param name: The name of this MySqlUser.
        :type name: str
        """

        self._name = name

    @property
    def rights(self):
        """Gets the rights of this MySqlUser.


        :return: The rights of this MySqlUser.
        :rtype: UserRights
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this MySqlUser.


        :param rights: The rights of this MySqlUser.
        :type rights: UserRights
        """

        self._rights = rights
