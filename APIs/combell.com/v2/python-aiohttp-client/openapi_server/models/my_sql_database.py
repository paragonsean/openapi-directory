# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MySqlDatabase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, actual_size: int=None, hostname: str=None, max_size: int=None, name: str=None, user_count: int=None):
        """MySqlDatabase - a model defined in OpenAPI

        :param account_id: The account_id of this MySqlDatabase.
        :param actual_size: The actual_size of this MySqlDatabase.
        :param hostname: The hostname of this MySqlDatabase.
        :param max_size: The max_size of this MySqlDatabase.
        :param name: The name of this MySqlDatabase.
        :param user_count: The user_count of this MySqlDatabase.
        """
        self.openapi_types = {
            'account_id': int,
            'actual_size': int,
            'hostname': str,
            'max_size': int,
            'name': str,
            'user_count': int
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'actual_size': 'actual_size',
            'hostname': 'hostname',
            'max_size': 'max_size',
            'name': 'name',
            'user_count': 'user_count'
        }

        self._account_id = account_id
        self._actual_size = actual_size
        self._hostname = hostname
        self._max_size = max_size
        self._name = name
        self._user_count = user_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MySqlDatabase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MySqlDatabase of this MySqlDatabase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this MySqlDatabase.

        The account id for the database.

        :return: The account_id of this MySqlDatabase.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MySqlDatabase.

        The account id for the database.

        :param account_id: The account_id of this MySqlDatabase.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def actual_size(self):
        """Gets the actual_size of this MySqlDatabase.

        The actual size in MB for the database.

        :return: The actual_size of this MySqlDatabase.
        :rtype: int
        """
        return self._actual_size

    @actual_size.setter
    def actual_size(self, actual_size):
        """Sets the actual_size of this MySqlDatabase.

        The actual size in MB for the database.

        :param actual_size: The actual_size of this MySqlDatabase.
        :type actual_size: int
        """

        self._actual_size = actual_size

    @property
    def hostname(self):
        """Gets the hostname of this MySqlDatabase.

        Hostname

        :return: The hostname of this MySqlDatabase.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this MySqlDatabase.

        Hostname

        :param hostname: The hostname of this MySqlDatabase.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def max_size(self):
        """Gets the max_size of this MySqlDatabase.

        The maximim size in MB for the database.

        :return: The max_size of this MySqlDatabase.
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this MySqlDatabase.

        The maximim size in MB for the database.

        :param max_size: The max_size of this MySqlDatabase.
        :type max_size: int
        """

        self._max_size = max_size

    @property
    def name(self):
        """Gets the name of this MySqlDatabase.

        Database name

        :return: The name of this MySqlDatabase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MySqlDatabase.

        Database name

        :param name: The name of this MySqlDatabase.
        :type name: str
        """

        self._name = name

    @property
    def user_count(self):
        """Gets the user_count of this MySqlDatabase.

        The number of users.

        :return: The user_count of this MySqlDatabase.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this MySqlDatabase.

        The number of users.

        :param user_count: The user_count of this MySqlDatabase.
        :type user_count: int
        """

        self._user_count = user_count
