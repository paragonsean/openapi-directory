# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ftp_password: str=None, identifier: str=None, servicepack_id: int=None):
        """CreateAccount - a model defined in OpenAPI

        :param ftp_password: The ftp_password of this CreateAccount.
        :param identifier: The identifier of this CreateAccount.
        :param servicepack_id: The servicepack_id of this CreateAccount.
        """
        self.openapi_types = {
            'ftp_password': str,
            'identifier': str,
            'servicepack_id': int
        }

        self.attribute_map = {
            'ftp_password': 'ftp_password',
            'identifier': 'identifier',
            'servicepack_id': 'servicepack_id'
        }

        self._ftp_password = ftp_password
        self._identifier = identifier
        self._servicepack_id = servicepack_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccount of this CreateAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ftp_password(self):
        """Gets the ftp_password of this CreateAccount.

        Ftp password for the account.<br />  Applies only if the servicepack contains hosting.<br />  Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' \" \\ </li></ul>

        :return: The ftp_password of this CreateAccount.
        :rtype: str
        """
        return self._ftp_password

    @ftp_password.setter
    def ftp_password(self, ftp_password):
        """Sets the ftp_password of this CreateAccount.

        Ftp password for the account.<br />  Applies only if the servicepack contains hosting.<br />  Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' \" \\ </li></ul>

        :param ftp_password: The ftp_password of this CreateAccount.
        :type ftp_password: str
        """

        self._ftp_password = ftp_password

    @property
    def identifier(self):
        """Gets the identifier of this CreateAccount.

        An identifier for the account.<br />  Should be a domain name for hosting accounts.

        :return: The identifier of this CreateAccount.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CreateAccount.

        An identifier for the account.<br />  Should be a domain name for hosting accounts.

        :param identifier: The identifier of this CreateAccount.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def servicepack_id(self):
        """Gets the servicepack_id of this CreateAccount.

        The servicepack id that defines the account.

        :return: The servicepack_id of this CreateAccount.
        :rtype: int
        """
        return self._servicepack_id

    @servicepack_id.setter
    def servicepack_id(self, servicepack_id):
        """Sets the servicepack_id of this CreateAccount.

        The servicepack id that defines the account.

        :param servicepack_id: The servicepack_id of this CreateAccount.
        :type servicepack_id: int
        """

        self._servicepack_id = servicepack_id
