# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Domain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, expiration_date: datetime=None, will_renew: bool=None):
        """Domain - a model defined in OpenAPI

        :param domain_name: The domain_name of this Domain.
        :param expiration_date: The expiration_date of this Domain.
        :param will_renew: The will_renew of this Domain.
        """
        self.openapi_types = {
            'domain_name': str,
            'expiration_date': datetime,
            'will_renew': bool
        }

        self.attribute_map = {
            'domain_name': 'domain_name',
            'expiration_date': 'expiration_date',
            'will_renew': 'will_renew'
        }

        self._domain_name = domain_name
        self._expiration_date = expiration_date
        self._will_renew = will_renew

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Domain of this Domain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this Domain.

        The domain name

        :return: The domain_name of this Domain.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Domain.

        The domain name

        :param domain_name: The domain_name of this Domain.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Domain.

        Expiration date of the domain

        :return: The expiration_date of this Domain.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Domain.

        Expiration date of the domain

        :param expiration_date: The expiration_date of this Domain.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def will_renew(self):
        """Gets the will_renew of this Domain.

        Indication of renewal.<br />  No value indicates that the renewal state could not be determined at the moment.

        :return: The will_renew of this Domain.
        :rtype: bool
        """
        return self._will_renew

    @will_renew.setter
    def will_renew(self, will_renew):
        """Sets the will_renew of this Domain.

        Indication of renewal.<br />  No value indicates that the renewal state could not be determined at the moment.

        :param will_renew: The will_renew of this Domain.
        :type will_renew: bool
        """

        self._will_renew = will_renew
