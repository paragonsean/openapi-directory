# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatchAll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_addresses: List[str]=None):
        """CatchAll - a model defined in OpenAPI

        :param email_addresses: The email_addresses of this CatchAll.
        """
        self.openapi_types = {
            'email_addresses': List[str]
        }

        self.attribute_map = {
            'email_addresses': 'email_addresses'
        }

        self._email_addresses = email_addresses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatchAll':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatchAll of this CatchAll.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_addresses(self):
        """Gets the email_addresses of this CatchAll.

        E-mail addresses to which all e-mails are sent to inexistent mailboxes or aliases

        :return: The email_addresses of this CatchAll.
        :rtype: List[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this CatchAll.

        E-mail addresses to which all e-mails are sent to inexistent mailboxes or aliases

        :param email_addresses: The email_addresses of this CatchAll.
        :type email_addresses: List[str]
        """

        self._email_addresses = email_addresses
