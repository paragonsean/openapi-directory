# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registrant_input import RegistrantInput
from openapi_server import util


class TransferDomain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_code: str=None, domain_name: str=None, name_servers: List[str]=None, registrant: RegistrantInput=None):
        """TransferDomain - a model defined in OpenAPI

        :param auth_code: The auth_code of this TransferDomain.
        :param domain_name: The domain_name of this TransferDomain.
        :param name_servers: The name_servers of this TransferDomain.
        :param registrant: The registrant of this TransferDomain.
        """
        self.openapi_types = {
            'auth_code': str,
            'domain_name': str,
            'name_servers': List[str],
            'registrant': RegistrantInput
        }

        self.attribute_map = {
            'auth_code': 'auth_code',
            'domain_name': 'domain_name',
            'name_servers': 'name_servers',
            'registrant': 'registrant'
        }

        self._auth_code = auth_code
        self._domain_name = domain_name
        self._name_servers = name_servers
        self._registrant = registrant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferDomain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferDomain of this TransferDomain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_code(self):
        """Gets the auth_code of this TransferDomain.

        Authorization code which allows the transfer to execute.

        :return: The auth_code of this TransferDomain.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this TransferDomain.

        Authorization code which allows the transfer to execute.

        :param auth_code: The auth_code of this TransferDomain.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def domain_name(self):
        """Gets the domain_name of this TransferDomain.

        The domain name to transfer.<br />  Only pass the domain part and the tld.<br /><i>For abc.com, abc is the domain part, com is the tld.</i>

        :return: The domain_name of this TransferDomain.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this TransferDomain.

        The domain name to transfer.<br />  Only pass the domain part and the tld.<br /><i>For abc.com, abc is the domain part, com is the tld.</i>

        :param domain_name: The domain_name of this TransferDomain.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def name_servers(self):
        """Gets the name_servers of this TransferDomain.

        List of name servers. When empty, the transfer will be done on default name servers.

        :return: The name_servers of this TransferDomain.
        :rtype: List[str]
        """
        return self._name_servers

    @name_servers.setter
    def name_servers(self, name_servers):
        """Sets the name_servers of this TransferDomain.

        List of name servers. When empty, the transfer will be done on default name servers.

        :param name_servers: The name_servers of this TransferDomain.
        :type name_servers: List[str]
        """

        self._name_servers = name_servers

    @property
    def registrant(self):
        """Gets the registrant of this TransferDomain.


        :return: The registrant of this TransferDomain.
        :rtype: RegistrantInput
        """
        return self._registrant

    @registrant.setter
    def registrant(self, registrant):
        """Sets the registrant of this TransferDomain.


        :param registrant: The registrant of this TransferDomain.
        :type registrant: RegistrantInput
        """

        self._registrant = registrant
