# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extra_field import ExtraField
from openapi_server import util


class RegistrantInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, company_name: str=None, country_code: str=None, email: str=None, enterprise_number: str=None, extra_fields: List[ExtraField]=None, fax: str=None, first_name: str=None, language_code: str=None, last_name: str=None, phone: str=None, postal_code: str=None):
        """RegistrantInput - a model defined in OpenAPI

        :param address: The address of this RegistrantInput.
        :param city: The city of this RegistrantInput.
        :param company_name: The company_name of this RegistrantInput.
        :param country_code: The country_code of this RegistrantInput.
        :param email: The email of this RegistrantInput.
        :param enterprise_number: The enterprise_number of this RegistrantInput.
        :param extra_fields: The extra_fields of this RegistrantInput.
        :param fax: The fax of this RegistrantInput.
        :param first_name: The first_name of this RegistrantInput.
        :param language_code: The language_code of this RegistrantInput.
        :param last_name: The last_name of this RegistrantInput.
        :param phone: The phone of this RegistrantInput.
        :param postal_code: The postal_code of this RegistrantInput.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'company_name': str,
            'country_code': str,
            'email': str,
            'enterprise_number': str,
            'extra_fields': List[ExtraField],
            'fax': str,
            'first_name': str,
            'language_code': str,
            'last_name': str,
            'phone': str,
            'postal_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'company_name': 'company_name',
            'country_code': 'country_code',
            'email': 'email',
            'enterprise_number': 'enterprise_number',
            'extra_fields': 'extra_fields',
            'fax': 'fax',
            'first_name': 'first_name',
            'language_code': 'language_code',
            'last_name': 'last_name',
            'phone': 'phone',
            'postal_code': 'postal_code'
        }

        self._address = address
        self._city = city
        self._company_name = company_name
        self._country_code = country_code
        self._email = email
        self._enterprise_number = enterprise_number
        self._extra_fields = extra_fields
        self._fax = fax
        self._first_name = first_name
        self._language_code = language_code
        self._last_name = last_name
        self._phone = phone
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrantInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrantInput of this RegistrantInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this RegistrantInput.

        Address of the registrant.

        :return: The address of this RegistrantInput.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RegistrantInput.

        Address of the registrant.

        :param address: The address of this RegistrantInput.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this RegistrantInput.

        City of the registrant.

        :return: The city of this RegistrantInput.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RegistrantInput.

        City of the registrant.

        :param city: The city of this RegistrantInput.
        :type city: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this RegistrantInput.

        Company name of the registrant.<br />  The registrant is a company if not empty, otherwise the registrant is an individual when validating extra fields.

        :return: The company_name of this RegistrantInput.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this RegistrantInput.

        Company name of the registrant.<br />  The registrant is a company if not empty, otherwise the registrant is an individual when validating extra fields.

        :param company_name: The company_name of this RegistrantInput.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def country_code(self):
        """Gets the country_code of this RegistrantInput.

        Country code of the registrant.  Syntax: 'BE', 'NL, 'FR', ...

        :return: The country_code of this RegistrantInput.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this RegistrantInput.

        Country code of the registrant.  Syntax: 'BE', 'NL, 'FR', ...

        :param country_code: The country_code of this RegistrantInput.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def email(self):
        """Gets the email of this RegistrantInput.

        Email of the registrant.

        :return: The email of this RegistrantInput.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegistrantInput.

        Email of the registrant.

        :param email: The email of this RegistrantInput.
        :type email: str
        """

        self._email = email

    @property
    def enterprise_number(self):
        """Gets the enterprise_number of this RegistrantInput.

        Enterprise number of the registrant.<br />  Syntax: 'BE0123456789'

        :return: The enterprise_number of this RegistrantInput.
        :rtype: str
        """
        return self._enterprise_number

    @enterprise_number.setter
    def enterprise_number(self, enterprise_number):
        """Sets the enterprise_number of this RegistrantInput.

        Enterprise number of the registrant.<br />  Syntax: 'BE0123456789'

        :param enterprise_number: The enterprise_number of this RegistrantInput.
        :type enterprise_number: str
        """

        self._enterprise_number = enterprise_number

    @property
    def extra_fields(self):
        """Gets the extra_fields of this RegistrantInput.

        List of registrant extra fields for the domain name.  <table><tr><th>Extension</th><th>Registrant specifics</th><th>Required extra field(s)</th></tr><tr><td>.dk</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.es</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.es</td><td>is an individual</td><td>PassportNumber</td></tr><tr><td>.fr</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.it</td><td>is an individual and has country code 'IT'</td><td>CodiceFiscal</td></tr><tr><td>.it</td><td>is an individual and has not country code 'IT'</td><td>PassportNumber</td></tr><tr><td>.nu</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.nu</td><td>is an individual</td><td>PassportNumber</td></tr><tr><td>.se</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.se</td><td>is an individual</td><td>PassportNumber</td></tr></table>

        :return: The extra_fields of this RegistrantInput.
        :rtype: List[ExtraField]
        """
        return self._extra_fields

    @extra_fields.setter
    def extra_fields(self, extra_fields):
        """Sets the extra_fields of this RegistrantInput.

        List of registrant extra fields for the domain name.  <table><tr><th>Extension</th><th>Registrant specifics</th><th>Required extra field(s)</th></tr><tr><td>.dk</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.es</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.es</td><td>is an individual</td><td>PassportNumber</td></tr><tr><td>.fr</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.it</td><td>is an individual and has country code 'IT'</td><td>CodiceFiscal</td></tr><tr><td>.it</td><td>is an individual and has not country code 'IT'</td><td>PassportNumber</td></tr><tr><td>.nu</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.nu</td><td>is an individual</td><td>PassportNumber</td></tr><tr><td>.se</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.se</td><td>is an individual</td><td>PassportNumber</td></tr></table>

        :param extra_fields: The extra_fields of this RegistrantInput.
        :type extra_fields: List[ExtraField]
        """

        self._extra_fields = extra_fields

    @property
    def fax(self):
        """Gets the fax of this RegistrantInput.

        Fax of the registrant.  Syntax: '+32.123456789'

        :return: The fax of this RegistrantInput.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this RegistrantInput.

        Fax of the registrant.  Syntax: '+32.123456789'

        :param fax: The fax of this RegistrantInput.
        :type fax: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this RegistrantInput.

        First name of the registrant.

        :return: The first_name of this RegistrantInput.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RegistrantInput.

        First name of the registrant.

        :param first_name: The first_name of this RegistrantInput.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def language_code(self):
        """Gets the language_code of this RegistrantInput.

        Language code of the registrant.  Syntax: 'nl', 'fr', 'en', 'de', ...

        :return: The language_code of this RegistrantInput.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this RegistrantInput.

        Language code of the registrant.  Syntax: 'nl', 'fr', 'en', 'de', ...

        :param language_code: The language_code of this RegistrantInput.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def last_name(self):
        """Gets the last_name of this RegistrantInput.

        Last name of the registrant.

        :return: The last_name of this RegistrantInput.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RegistrantInput.

        Last name of the registrant.

        :param last_name: The last_name of this RegistrantInput.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this RegistrantInput.

        Phone of the registrant.<br />  Syntax: '+32.123456789'

        :return: The phone of this RegistrantInput.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this RegistrantInput.

        Phone of the registrant.<br />  Syntax: '+32.123456789'

        :param phone: The phone of this RegistrantInput.
        :type phone: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this RegistrantInput.

        Postal code of the registrant.

        :return: The postal_code of this RegistrantInput.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this RegistrantInput.

        Postal code of the registrant.

        :param postal_code: The postal_code of this RegistrantInput.
        :type postal_code: str
        """

        self._postal_code = postal_code
