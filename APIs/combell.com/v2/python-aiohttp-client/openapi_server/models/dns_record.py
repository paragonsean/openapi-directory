# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnsRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, id: str=None, port: int=None, priority: int=10, protocol: str='TCP', record_name: str=None, service: str=None, target: str=None, ttl: int=3600, type: str=None, weight: int=0):
        """DnsRecord - a model defined in OpenAPI

        :param content: The content of this DnsRecord.
        :param id: The id of this DnsRecord.
        :param port: The port of this DnsRecord.
        :param priority: The priority of this DnsRecord.
        :param protocol: The protocol of this DnsRecord.
        :param record_name: The record_name of this DnsRecord.
        :param service: The service of this DnsRecord.
        :param target: The target of this DnsRecord.
        :param ttl: The ttl of this DnsRecord.
        :param type: The type of this DnsRecord.
        :param weight: The weight of this DnsRecord.
        """
        self.openapi_types = {
            'content': str,
            'id': str,
            'port': int,
            'priority': int,
            'protocol': str,
            'record_name': str,
            'service': str,
            'target': str,
            'ttl': int,
            'type': str,
            'weight': int
        }

        self.attribute_map = {
            'content': 'content',
            'id': 'id',
            'port': 'port',
            'priority': 'priority',
            'protocol': 'protocol',
            'record_name': 'record_name',
            'service': 'service',
            'target': 'target',
            'ttl': 'ttl',
            'type': 'type',
            'weight': 'weight'
        }

        self._content = content
        self._id = id
        self._port = port
        self._priority = priority
        self._protocol = protocol
        self._record_name = record_name
        self._service = service
        self._target = target
        self._ttl = ttl
        self._type = type
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsRecord of this DnsRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this DnsRecord.

        Variable data depending on the record type.  <ul><li>A: the IPv4 address.</li><li>CNAME: canonical name of an alias.</li><li>MX: fully qualified domain name of a mail host.</li><li>SRV: does not apply. Data for the SRV records can be found in specific properties.</li><li>TXT: free form text data.</li><li>CAA: format should match specific values for flag, tag and ca: \"{flag} {tag} {ca}\".          <ul><li>The flag. The values 128 (critical) or 0 (non-critical) are expected, with 0 as the default.</li><li>The tag. A tag specifies which actions an authorized CA can take in terms of issuing SSL/TLS certificates.<br /><ul><li>The value \"issue\": explicitly authorizes a single certificate authority to issue a certificate (any type) for the hostname.</li><li>The value \"issuewild\": explicitly authorizes a single certificate authority to issue a wildcard certificate (and only wildcard) for the hostname.</li><li>The value \"iodef\": specifies a URL to which a certificate authority may report policy violations.</li></ul></li><li>The ca. This is the domain of the CA (Certification Authority) that has the authority to issue certificates for the domain in question. If the value is a semicolon (;), it means that no CA has the authority to issue a certificate for that domain.</li></ul></li><li>ALIAS: canonical name of an alias.</li><li>TLSA: format should match specific values for usage, selector, matching type and data: \"{usage} {selector} {matching_type} {data}\"          <ul><li>The usage. The first field after the TLSA text in the DNS RR, specifies how to verify the certificate.<br /><ul><li>A value of 0 is for what is commonly called CA constraint (and PKIX-TA). The certificate provided when establishing TLS must be issued by the listed root-CA or one of its intermediate CAs, with a valid certification path to a root-CA already trusted by the application doing the verification.</li><li>A value of 1 is for what is commonly called Service certificate constraint (and PKIX-EE). The certificate used must match the TLSA record exactly, and it must also pass PKIX certification path validation to a trusted root-CA.</li><li>A value of 2 is for what is commonly called Trust Anchor Assertion (and DANE-TA). The certificate used has a valid certification path pointing back to the certificate mention in this record, but there is no need for it to pass the PKIX certification path validation to a trusted root-CA.</li><li>A value of 3 is for what is commonly called Domain issued certificate (and DANE-EE). The services uses a self-signed certificate. It is not signed by anyone else, and is exactly this record.</li></ul></li><li>The selector. When connecting to the service and a certificate is received, the selector field specifies which parts of it should be checked.<br /><ul><li>A value of 0 means to select the entire certificate for matching.</li><li>A value of 1 means to select just the public key for certificate matching. Matching the public key is often sufficient, as this is likely to be unique.</li></ul></li><li>The matching type.<br /><ul><li>A type of 0 means the entire information selected is present in the certificate association data.</li><li>A type of 1 means to do a SHA-256 hash of the selected data.</li><li>A type of 2 means to do a SHA-512 hash of the selected data.</li></ul></li><li>The actual data to be matched given the settings of the other fields. This is a long text string of hexadecimal data.</li></ul></li></ul>

        :return: The content of this DnsRecord.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DnsRecord.

        Variable data depending on the record type.  <ul><li>A: the IPv4 address.</li><li>CNAME: canonical name of an alias.</li><li>MX: fully qualified domain name of a mail host.</li><li>SRV: does not apply. Data for the SRV records can be found in specific properties.</li><li>TXT: free form text data.</li><li>CAA: format should match specific values for flag, tag and ca: \"{flag} {tag} {ca}\".          <ul><li>The flag. The values 128 (critical) or 0 (non-critical) are expected, with 0 as the default.</li><li>The tag. A tag specifies which actions an authorized CA can take in terms of issuing SSL/TLS certificates.<br /><ul><li>The value \"issue\": explicitly authorizes a single certificate authority to issue a certificate (any type) for the hostname.</li><li>The value \"issuewild\": explicitly authorizes a single certificate authority to issue a wildcard certificate (and only wildcard) for the hostname.</li><li>The value \"iodef\": specifies a URL to which a certificate authority may report policy violations.</li></ul></li><li>The ca. This is the domain of the CA (Certification Authority) that has the authority to issue certificates for the domain in question. If the value is a semicolon (;), it means that no CA has the authority to issue a certificate for that domain.</li></ul></li><li>ALIAS: canonical name of an alias.</li><li>TLSA: format should match specific values for usage, selector, matching type and data: \"{usage} {selector} {matching_type} {data}\"          <ul><li>The usage. The first field after the TLSA text in the DNS RR, specifies how to verify the certificate.<br /><ul><li>A value of 0 is for what is commonly called CA constraint (and PKIX-TA). The certificate provided when establishing TLS must be issued by the listed root-CA or one of its intermediate CAs, with a valid certification path to a root-CA already trusted by the application doing the verification.</li><li>A value of 1 is for what is commonly called Service certificate constraint (and PKIX-EE). The certificate used must match the TLSA record exactly, and it must also pass PKIX certification path validation to a trusted root-CA.</li><li>A value of 2 is for what is commonly called Trust Anchor Assertion (and DANE-TA). The certificate used has a valid certification path pointing back to the certificate mention in this record, but there is no need for it to pass the PKIX certification path validation to a trusted root-CA.</li><li>A value of 3 is for what is commonly called Domain issued certificate (and DANE-EE). The services uses a self-signed certificate. It is not signed by anyone else, and is exactly this record.</li></ul></li><li>The selector. When connecting to the service and a certificate is received, the selector field specifies which parts of it should be checked.<br /><ul><li>A value of 0 means to select the entire certificate for matching.</li><li>A value of 1 means to select just the public key for certificate matching. Matching the public key is often sufficient, as this is likely to be unique.</li></ul></li><li>The matching type.<br /><ul><li>A type of 0 means the entire information selected is present in the certificate association data.</li><li>A type of 1 means to do a SHA-256 hash of the selected data.</li><li>A type of 2 means to do a SHA-512 hash of the selected data.</li></ul></li><li>The actual data to be matched given the settings of the other fields. This is a long text string of hexadecimal data.</li></ul></li></ul>

        :param content: The content of this DnsRecord.
        :type content: str
        """

        self._content = content

    @property
    def id(self):
        """Gets the id of this DnsRecord.

        The id of the record  This value is ignored for creation of new records.

        :return: The id of this DnsRecord.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DnsRecord.

        The id of the record  This value is ignored for creation of new records.

        :param id: The id of this DnsRecord.
        :type id: str
        """

        self._id = id

    @property
    def port(self):
        """Gets the port of this DnsRecord.

        The port for SRV records.<br />  The value MUST be a positive integer.<br />  Editing the value is not possible. You should add a new SRV record and delete the existing record.

        :return: The port of this DnsRecord.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DnsRecord.

        The port for SRV records.<br />  The value MUST be a positive integer.<br />  Editing the value is not possible. You should add a new SRV record and delete the existing record.

        :param port: The port of this DnsRecord.
        :type port: int
        """

        self._port = port

    @property
    def priority(self):
        """Gets the priority of this DnsRecord.

        The priority for MX or SRV records.<br />  A lower value means more preferred.<br />  The value MUST be a positive integer less or equal to 9999.

        :return: The priority of this DnsRecord.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DnsRecord.

        The priority for MX or SRV records.<br />  A lower value means more preferred.<br />  The value MUST be a positive integer less or equal to 9999.

        :param priority: The priority of this DnsRecord.
        :type priority: int
        """

        self._priority = priority

    @property
    def protocol(self):
        """Gets the protocol of this DnsRecord.

        Used for the creation of SRV records. Possible options: TCP, UDP, ...<br />  Editing the value is not possible. You should add a new SRV record and delete the existing record.

        :return: The protocol of this DnsRecord.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DnsRecord.

        Used for the creation of SRV records. Possible options: TCP, UDP, ...<br />  Editing the value is not possible. You should add a new SRV record and delete the existing record.

        :param protocol: The protocol of this DnsRecord.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def record_name(self):
        """Gets the record_name of this DnsRecord.

        The name of the record.<br />  This is the host name, alias defined by the record.<br />  An empty record or '@' is equal to the domain name.<br />  Applies to A, MX, CNAME, TXT, CAA, ALIAS and TLSA records.<br />  When type is TLSA the recommended value format is port number, protocol and host: _25._tcp.<br />  Does not apply for SRV records.

        :return: The record_name of this DnsRecord.
        :rtype: str
        """
        return self._record_name

    @record_name.setter
    def record_name(self, record_name):
        """Sets the record_name of this DnsRecord.

        The name of the record.<br />  This is the host name, alias defined by the record.<br />  An empty record or '@' is equal to the domain name.<br />  Applies to A, MX, CNAME, TXT, CAA, ALIAS and TLSA records.<br />  When type is TLSA the recommended value format is port number, protocol and host: _25._tcp.<br />  Does not apply for SRV records.

        :param record_name: The record_name of this DnsRecord.
        :type record_name: str
        """

        self._record_name = record_name

    @property
    def service(self):
        """Gets the service of this DnsRecord.

        The symbolic name of the desired service for SRV records.<br />  Editing the value is not possible. You should add a new SRV record and can delete the existing record.

        :return: The service of this DnsRecord.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this DnsRecord.

        The symbolic name of the desired service for SRV records.<br />  Editing the value is not possible. You should add a new SRV record and can delete the existing record.

        :param service: The service of this DnsRecord.
        :type service: str
        """

        self._service = service

    @property
    def target(self):
        """Gets the target of this DnsRecord.

        The canonical hostname of the machine providing the service for SRV records.<br />  Editing the value is not possible. You should add a new SRV record and delete the existing record.

        :return: The target of this DnsRecord.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this DnsRecord.

        The canonical hostname of the machine providing the service for SRV records.<br />  Editing the value is not possible. You should add a new SRV record and delete the existing record.

        :param target: The target of this DnsRecord.
        :type target: str
        """

        self._target = target

    @property
    def ttl(self):
        """Gets the ttl of this DnsRecord.

        Time to live of the record in seconds.<br />  It defines the time frame that clients can cache the information.<br />  The value MUST be between 60 and 86400. The default value is 3600 (= 1 hour).

        :return: The ttl of this DnsRecord.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this DnsRecord.

        Time to live of the record in seconds.<br />  It defines the time frame that clients can cache the information.<br />  The value MUST be between 60 and 86400. The default value is 3600 (= 1 hour).

        :param ttl: The ttl of this DnsRecord.
        :type ttl: int
        """

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this DnsRecord.

        The type of the record (A, MX, CNAME, SRV, TXT, CAA, ALIAS and TLSA).

        :return: The type of this DnsRecord.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DnsRecord.

        The type of the record (A, MX, CNAME, SRV, TXT, CAA, ALIAS and TLSA).

        :param type: The type of this DnsRecord.
        :type type: str
        """

        self._type = type

    @property
    def weight(self):
        """Gets the weight of this DnsRecord.

        The weight for SRV records with the same priority.<br />  A higher value means more preferred.

        :return: The weight of this DnsRecord.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DnsRecord.

        The weight for SRV records with the same priority.<br />  A higher value means more preferred.

        :param weight: The weight of this DnsRecord.
        :type weight: int
        """

        self._weight = weight
