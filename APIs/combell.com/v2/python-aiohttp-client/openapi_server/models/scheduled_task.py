# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduledTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cron_expression: str=None, enabled: bool=None, id: str=None, script_location: str=None):
        """ScheduledTask - a model defined in OpenAPI

        :param cron_expression: The cron_expression of this ScheduledTask.
        :param enabled: The enabled of this ScheduledTask.
        :param id: The id of this ScheduledTask.
        :param script_location: The script_location of this ScheduledTask.
        """
        self.openapi_types = {
            'cron_expression': str,
            'enabled': bool,
            'id': str,
            'script_location': str
        }

        self.attribute_map = {
            'cron_expression': 'cron_expression',
            'enabled': 'enabled',
            'id': 'id',
            'script_location': 'script_location'
        }

        self._cron_expression = cron_expression
        self._enabled = enabled
        self._id = id
        self._script_location = script_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledTask of this ScheduledTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cron_expression(self):
        """Gets the cron_expression of this ScheduledTask.

        Cron expression of scheduled task.<br />  5-digit expressions (*/5 * * * *) are required in the following sequence:<br /><ul><li>Minute (0 - 59, also */5, */10, */15 and */30 as every 5 minutes, every 10 minutes, every quarter or every half-hour are allowed)</li><li>Hour (0 - 23, also * as every hour is allowed)</li><li>Day of the month (1 - 31, also * as every day is allowed)</li><li>Month (1 - 12 as January to December, also * as every month is allowed)</li><li>Day of the week (1 - 7 as Monday to Sunday, also * as every day is allowed)</li></ul>

        :return: The cron_expression of this ScheduledTask.
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this ScheduledTask.

        Cron expression of scheduled task.<br />  5-digit expressions (*/5 * * * *) are required in the following sequence:<br /><ul><li>Minute (0 - 59, also */5, */10, */15 and */30 as every 5 minutes, every 10 minutes, every quarter or every half-hour are allowed)</li><li>Hour (0 - 23, also * as every hour is allowed)</li><li>Day of the month (1 - 31, also * as every day is allowed)</li><li>Month (1 - 12 as January to December, also * as every month is allowed)</li><li>Day of the week (1 - 7 as Monday to Sunday, also * as every day is allowed)</li></ul>

        :param cron_expression: The cron_expression of this ScheduledTask.
        :type cron_expression: str
        """

        self._cron_expression = cron_expression

    @property
    def enabled(self):
        """Gets the enabled of this ScheduledTask.

        Enabled.

        :return: The enabled of this ScheduledTask.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ScheduledTask.

        Enabled.

        :param enabled: The enabled of this ScheduledTask.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this ScheduledTask.

        The id of the scheduled task.<br />  This value is ignored for creation of new scheduled tasks.

        :return: The id of this ScheduledTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduledTask.

        The id of the scheduled task.<br />  This value is ignored for creation of new scheduled tasks.

        :param id: The id of this ScheduledTask.
        :type id: str
        """

        self._id = id

    @property
    def script_location(self):
        """Gets the script_location of this ScheduledTask.

        Absolute path from this linux hosting to execute.

        :return: The script_location of this ScheduledTask.
        :rtype: str
        """
        return self._script_location

    @script_location.setter
    def script_location(self, script_location):
        """Sets the script_location of this ScheduledTask.

        Absolute path from this linux hosting to execute.

        :param script_location: The script_location of this ScheduledTask.
        :type script_location: str
        """

        self._script_location = script_location
