# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_header import HostHeader
from openapi_server import util


class LinuxSite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_headers: List[HostHeader]=None, http2_enabled: bool=None, https_redirect_enabled: bool=None, name: str=None, path: str=None, ssl_enabled: bool=None):
        """LinuxSite - a model defined in OpenAPI

        :param host_headers: The host_headers of this LinuxSite.
        :param http2_enabled: The http2_enabled of this LinuxSite.
        :param https_redirect_enabled: The https_redirect_enabled of this LinuxSite.
        :param name: The name of this LinuxSite.
        :param path: The path of this LinuxSite.
        :param ssl_enabled: The ssl_enabled of this LinuxSite.
        """
        self.openapi_types = {
            'host_headers': List[HostHeader],
            'http2_enabled': bool,
            'https_redirect_enabled': bool,
            'name': str,
            'path': str,
            'ssl_enabled': bool
        }

        self.attribute_map = {
            'host_headers': 'host_headers',
            'http2_enabled': 'http2_enabled',
            'https_redirect_enabled': 'https_redirect_enabled',
            'name': 'name',
            'path': 'path',
            'ssl_enabled': 'ssl_enabled'
        }

        self._host_headers = host_headers
        self._http2_enabled = http2_enabled
        self._https_redirect_enabled = https_redirect_enabled
        self._name = name
        self._path = path
        self._ssl_enabled = ssl_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinuxSite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinuxSite of this LinuxSite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_headers(self):
        """Gets the host_headers of this LinuxSite.

        Host headers for the website.

        :return: The host_headers of this LinuxSite.
        :rtype: List[HostHeader]
        """
        return self._host_headers

    @host_headers.setter
    def host_headers(self, host_headers):
        """Sets the host_headers of this LinuxSite.

        Host headers for the website.

        :param host_headers: The host_headers of this LinuxSite.
        :type host_headers: List[HostHeader]
        """

        self._host_headers = host_headers

    @property
    def http2_enabled(self):
        """Gets the http2_enabled of this LinuxSite.

        Indicates whether http/2 protocol is enabled for the website.

        :return: The http2_enabled of this LinuxSite.
        :rtype: bool
        """
        return self._http2_enabled

    @http2_enabled.setter
    def http2_enabled(self, http2_enabled):
        """Sets the http2_enabled of this LinuxSite.

        Indicates whether http/2 protocol is enabled for the website.

        :param http2_enabled: The http2_enabled of this LinuxSite.
        :type http2_enabled: bool
        """

        self._http2_enabled = http2_enabled

    @property
    def https_redirect_enabled(self):
        """Gets the https_redirect_enabled of this LinuxSite.

        Indicates whether automatic https redirection is enabled for the website.

        :return: The https_redirect_enabled of this LinuxSite.
        :rtype: bool
        """
        return self._https_redirect_enabled

    @https_redirect_enabled.setter
    def https_redirect_enabled(self, https_redirect_enabled):
        """Sets the https_redirect_enabled of this LinuxSite.

        Indicates whether automatic https redirection is enabled for the website.

        :param https_redirect_enabled: The https_redirect_enabled of this LinuxSite.
        :type https_redirect_enabled: bool
        """

        self._https_redirect_enabled = https_redirect_enabled

    @property
    def name(self):
        """Gets the name of this LinuxSite.

        The name of the website.

        :return: The name of this LinuxSite.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LinuxSite.

        The name of the website.

        :param name: The name of this LinuxSite.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this LinuxSite.

        The path of the website.

        :return: The path of this LinuxSite.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LinuxSite.

        The path of the website.

        :param path: The path of this LinuxSite.
        :type path: str
        """

        self._path = path

    @property
    def ssl_enabled(self):
        """Gets the ssl_enabled of this LinuxSite.

        Indicates whether ssl is enabled for the website.

        :return: The ssl_enabled of this LinuxSite.
        :rtype: bool
        """
        return self._ssl_enabled

    @ssl_enabled.setter
    def ssl_enabled(self, ssl_enabled):
        """Sets the ssl_enabled of this LinuxSite.

        Indicates whether ssl is enabled for the website.

        :param ssl_enabled: The ssl_enabled of this LinuxSite.
        :type ssl_enabled: bool
        """

        self._ssl_enabled = ssl_enabled
