# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateMySqlDatabase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, database_name: str=None, password: str=None):
        """CreateMySqlDatabase - a model defined in OpenAPI

        :param account_id: The account_id of this CreateMySqlDatabase.
        :param database_name: The database_name of this CreateMySqlDatabase.
        :param password: The password of this CreateMySqlDatabase.
        """
        self.openapi_types = {
            'account_id': int,
            'database_name': str,
            'password': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'database_name': 'database_name',
            'password': 'password'
        }

        self._account_id = account_id
        self._database_name = database_name
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMySqlDatabase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMySqlDatabase of this CreateMySqlDatabase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateMySqlDatabase.

        The id of the account on which to create the database.

        :return: The account_id of this CreateMySqlDatabase.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateMySqlDatabase.

        The id of the account on which to create the database.

        :param account_id: The account_id of this CreateMySqlDatabase.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def database_name(self):
        """Gets the database_name of this CreateMySqlDatabase.

        The name for the database. This will be prefixed during provisioning.  The provided name during creation will be different from the provisioned database name.

        :return: The database_name of this CreateMySqlDatabase.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this CreateMySqlDatabase.

        The name for the database. This will be prefixed during provisioning.  The provided name during creation will be different from the provisioned database name.

        :param database_name: The database_name of this CreateMySqlDatabase.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def password(self):
        """Gets the password of this CreateMySqlDatabase.

        The password for the database user.<br />  Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' \" \\ </li></ul>

        :return: The password of this CreateMySqlDatabase.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateMySqlDatabase.

        The password for the database user.<br />  Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' \" \\ </li></ul>

        :param password: The password of this CreateMySqlDatabase.
        :type password: str
        """

        self._password = password
