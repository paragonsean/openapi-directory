# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ssl_certificate_type import SslCertificateType
from openapi_server.models.ssl_certificate_validation_level import SslCertificateValidationLevel
from openapi_server.models.ssl_subject_alt_name import SslSubjectAltName
from openapi_server import util


class SslCertificateDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_name: str=None, expires_after: datetime=None, sha1_fingerprint: str=None, subject_alt_names: List[SslSubjectAltName]=None, type: SslCertificateType=None, validation_level: SslCertificateValidationLevel=None):
        """SslCertificateDetail - a model defined in OpenAPI

        :param common_name: The common_name of this SslCertificateDetail.
        :param expires_after: The expires_after of this SslCertificateDetail.
        :param sha1_fingerprint: The sha1_fingerprint of this SslCertificateDetail.
        :param subject_alt_names: The subject_alt_names of this SslCertificateDetail.
        :param type: The type of this SslCertificateDetail.
        :param validation_level: The validation_level of this SslCertificateDetail.
        """
        self.openapi_types = {
            'common_name': str,
            'expires_after': datetime,
            'sha1_fingerprint': str,
            'subject_alt_names': List[SslSubjectAltName],
            'type': SslCertificateType,
            'validation_level': SslCertificateValidationLevel
        }

        self.attribute_map = {
            'common_name': 'common_name',
            'expires_after': 'expires_after',
            'sha1_fingerprint': 'sha1_fingerprint',
            'subject_alt_names': 'subject_alt_names',
            'type': 'type',
            'validation_level': 'validation_level'
        }

        self._common_name = common_name
        self._expires_after = expires_after
        self._sha1_fingerprint = sha1_fingerprint
        self._subject_alt_names = subject_alt_names
        self._type = type
        self._validation_level = validation_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SslCertificateDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SslCertificateDetail of this SslCertificateDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_name(self):
        """Gets the common_name of this SslCertificateDetail.

        The common name (e.g. domain.com) of the certificate.

        :return: The common_name of this SslCertificateDetail.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this SslCertificateDetail.

        The common name (e.g. domain.com) of the certificate.

        :param common_name: The common_name of this SslCertificateDetail.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def expires_after(self):
        """Gets the expires_after of this SslCertificateDetail.

        The exact time the certificate will expire.

        :return: The expires_after of this SslCertificateDetail.
        :rtype: datetime
        """
        return self._expires_after

    @expires_after.setter
    def expires_after(self, expires_after):
        """Sets the expires_after of this SslCertificateDetail.

        The exact time the certificate will expire.

        :param expires_after: The expires_after of this SslCertificateDetail.
        :type expires_after: datetime
        """

        self._expires_after = expires_after

    @property
    def sha1_fingerprint(self):
        """Gets the sha1_fingerprint of this SslCertificateDetail.

        The SHA-1 fingerprint of the certificate.<br />  The fingerprint is a cryptographic hash which is a short unique identification of the certificate.

        :return: The sha1_fingerprint of this SslCertificateDetail.
        :rtype: str
        """
        return self._sha1_fingerprint

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, sha1_fingerprint):
        """Sets the sha1_fingerprint of this SslCertificateDetail.

        The SHA-1 fingerprint of the certificate.<br />  The fingerprint is a cryptographic hash which is a short unique identification of the certificate.

        :param sha1_fingerprint: The sha1_fingerprint of this SslCertificateDetail.
        :type sha1_fingerprint: str
        """

        self._sha1_fingerprint = sha1_fingerprint

    @property
    def subject_alt_names(self):
        """Gets the subject_alt_names of this SslCertificateDetail.

        The list of all supported dns names in the certificate.

        :return: The subject_alt_names of this SslCertificateDetail.
        :rtype: List[SslSubjectAltName]
        """
        return self._subject_alt_names

    @subject_alt_names.setter
    def subject_alt_names(self, subject_alt_names):
        """Sets the subject_alt_names of this SslCertificateDetail.

        The list of all supported dns names in the certificate.

        :param subject_alt_names: The subject_alt_names of this SslCertificateDetail.
        :type subject_alt_names: List[SslSubjectAltName]
        """

        self._subject_alt_names = subject_alt_names

    @property
    def type(self):
        """Gets the type of this SslCertificateDetail.


        :return: The type of this SslCertificateDetail.
        :rtype: SslCertificateType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SslCertificateDetail.


        :param type: The type of this SslCertificateDetail.
        :type type: SslCertificateType
        """

        self._type = type

    @property
    def validation_level(self):
        """Gets the validation_level of this SslCertificateDetail.


        :return: The validation_level of this SslCertificateDetail.
        :rtype: SslCertificateValidationLevel
        """
        return self._validation_level

    @validation_level.setter
    def validation_level(self, validation_level):
        """Sets the validation_level of this SslCertificateDetail.


        :param validation_level: The validation_level of this SslCertificateDetail.
        :type validation_level: SslCertificateValidationLevel
        """

        self._validation_level = validation_level
