# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuestionPage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None, content: str=None, _date: str=None, excerpt: str=None, id: str=None, lang: str=None, path: str=None, published: bool=None, sort: float=None, tags: List[str]=None, title: str=None, url: str=None):
        """QuestionPage - a model defined in OpenAPI

        :param categories: The categories of this QuestionPage.
        :param content: The content of this QuestionPage.
        :param _date: The _date of this QuestionPage.
        :param excerpt: The excerpt of this QuestionPage.
        :param id: The id of this QuestionPage.
        :param lang: The lang of this QuestionPage.
        :param path: The path of this QuestionPage.
        :param published: The published of this QuestionPage.
        :param sort: The sort of this QuestionPage.
        :param tags: The tags of this QuestionPage.
        :param title: The title of this QuestionPage.
        :param url: The url of this QuestionPage.
        """
        self.openapi_types = {
            'categories': List[str],
            'content': str,
            '_date': str,
            'excerpt': str,
            'id': str,
            'lang': str,
            'path': str,
            'published': bool,
            'sort': float,
            'tags': List[str],
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'content': 'content',
            '_date': 'date',
            'excerpt': 'excerpt',
            'id': 'id',
            'lang': 'lang',
            'path': 'path',
            'published': 'published',
            'sort': 'sort',
            'tags': 'tags',
            'title': 'title',
            'url': 'url'
        }

        self._categories = categories
        self._content = content
        self.__date = _date
        self._excerpt = excerpt
        self._id = id
        self._lang = lang
        self._path = path
        self._published = published
        self._sort = sort
        self._tags = tags
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuestionPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The questionPage of this QuestionPage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this QuestionPage.


        :return: The categories of this QuestionPage.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this QuestionPage.


        :param categories: The categories of this QuestionPage.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def content(self):
        """Gets the content of this QuestionPage.


        :return: The content of this QuestionPage.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this QuestionPage.


        :param content: The content of this QuestionPage.
        :type content: str
        """

        self._content = content

    @property
    def _date(self):
        """Gets the _date of this QuestionPage.


        :return: The _date of this QuestionPage.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this QuestionPage.


        :param _date: The _date of this QuestionPage.
        :type _date: str
        """

        self.__date = _date

    @property
    def excerpt(self):
        """Gets the excerpt of this QuestionPage.


        :return: The excerpt of this QuestionPage.
        :rtype: str
        """
        return self._excerpt

    @excerpt.setter
    def excerpt(self, excerpt):
        """Sets the excerpt of this QuestionPage.


        :param excerpt: The excerpt of this QuestionPage.
        :type excerpt: str
        """

        self._excerpt = excerpt

    @property
    def id(self):
        """Gets the id of this QuestionPage.


        :return: The id of this QuestionPage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuestionPage.


        :param id: The id of this QuestionPage.
        :type id: str
        """

        self._id = id

    @property
    def lang(self):
        """Gets the lang of this QuestionPage.


        :return: The lang of this QuestionPage.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this QuestionPage.


        :param lang: The lang of this QuestionPage.
        :type lang: str
        """

        self._lang = lang

    @property
    def path(self):
        """Gets the path of this QuestionPage.


        :return: The path of this QuestionPage.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this QuestionPage.


        :param path: The path of this QuestionPage.
        :type path: str
        """

        self._path = path

    @property
    def published(self):
        """Gets the published of this QuestionPage.


        :return: The published of this QuestionPage.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this QuestionPage.


        :param published: The published of this QuestionPage.
        :type published: bool
        """

        self._published = published

    @property
    def sort(self):
        """Gets the sort of this QuestionPage.


        :return: The sort of this QuestionPage.
        :rtype: float
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this QuestionPage.


        :param sort: The sort of this QuestionPage.
        :type sort: float
        """

        self._sort = sort

    @property
    def tags(self):
        """Gets the tags of this QuestionPage.


        :return: The tags of this QuestionPage.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this QuestionPage.


        :param tags: The tags of this QuestionPage.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this QuestionPage.


        :return: The title of this QuestionPage.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QuestionPage.


        :param title: The title of this QuestionPage.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this QuestionPage.


        :return: The url of this QuestionPage.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this QuestionPage.


        :param url: The url of this QuestionPage.
        :type url: str
        """

        self._url = url
