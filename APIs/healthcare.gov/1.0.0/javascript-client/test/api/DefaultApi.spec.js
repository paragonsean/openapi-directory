/**
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Healthcare);
  }
}(this, function(expect, Healthcare) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Healthcare.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('apiArticlesmediaTypeExtensionGet', function() {
      it('should call apiArticlesmediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test apiArticlesmediaTypeExtensionGet
        //instance.apiArticlesmediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiBlogmediaTypeExtensionGet', function() {
      it('should call apiBlogmediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test apiBlogmediaTypeExtensionGet
        //instance.apiBlogmediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiGlossarymediaTypeExtensionGet', function() {
      it('should call apiGlossarymediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test apiGlossarymediaTypeExtensionGet
        //instance.apiGlossarymediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiQuestionsmediaTypeExtensionGet', function() {
      it('should call apiQuestionsmediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test apiQuestionsmediaTypeExtensionGet
        //instance.apiQuestionsmediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiStatesmediaTypeExtensionGet', function() {
      it('should call apiStatesmediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test apiStatesmediaTypeExtensionGet
        //instance.apiStatesmediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTopicsmediaTypeExtensionGet', function() {
      it('should call apiTopicsmediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test apiTopicsmediaTypeExtensionGet
        //instance.apiTopicsmediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('blogPageNamemediaTypeExtensionGet', function() {
      it('should call blogPageNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test blogPageNamemediaTypeExtensionGet
        //instance.blogPageNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('esBlogPageNamemediaTypeExtensionGet', function() {
      it('should call esBlogPageNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test esBlogPageNamemediaTypeExtensionGet
        //instance.esBlogPageNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('esGlossaryPageNamemediaTypeExtensionGet', function() {
      it('should call esGlossaryPageNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test esGlossaryPageNamemediaTypeExtensionGet
        //instance.esGlossaryPageNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('esPageNamemediaTypeExtensionGet', function() {
      it('should call esPageNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test esPageNamemediaTypeExtensionGet
        //instance.esPageNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('esQuestionPageNamemediaTypeExtensionGet', function() {
      it('should call esQuestionPageNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test esQuestionPageNamemediaTypeExtensionGet
        //instance.esQuestionPageNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('esStateNamemediaTypeExtensionGet', function() {
      it('should call esStateNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test esStateNamemediaTypeExtensionGet
        //instance.esStateNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('glossaryPageNamemediaTypeExtensionGet', function() {
      it('should call glossaryPageNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test glossaryPageNamemediaTypeExtensionGet
        //instance.glossaryPageNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pageNamemediaTypeExtensionGet', function() {
      it('should call pageNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test pageNamemediaTypeExtensionGet
        //instance.pageNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('questionPageNamemediaTypeExtensionGet', function() {
      it('should call questionPageNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test questionPageNamemediaTypeExtensionGet
        //instance.questionPageNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stateNamemediaTypeExtensionGet', function() {
      it('should call stateNamemediaTypeExtensionGet successfully', function(done) {
        //uncomment below and update the code to test stateNamemediaTypeExtensionGet
        //instance.stateNamemediaTypeExtensionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
