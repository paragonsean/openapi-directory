/**
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArticlesList from '../model/ArticlesList';
import BlogList from '../model/BlogList';
import BlogPage from '../model/BlogPage';
import GlossaryList from '../model/GlossaryList';
import GlossaryPage from '../model/GlossaryPage';
import Page from '../model/Page';
import QuestionPage from '../model/QuestionPage';
import QuestionsList from '../model/QuestionsList';
import StatePage from '../model/StatePage';
import StatesList from '../model/StatesList';
import TopicsList from '../model/TopicsList';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiArticlesmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~apiArticlesmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticlesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {module:api/DefaultApi~apiArticlesmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticlesList}
     */
    apiArticlesmediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling apiArticlesmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ArticlesList;
      return this.apiClient.callApi(
        '/api/articles{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBlogmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~apiBlogmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlogList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {module:api/DefaultApi~apiBlogmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlogList}
     */
    apiBlogmediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling apiBlogmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BlogList;
      return this.apiClient.callApi(
        '/api/blog{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGlossarymediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~apiGlossarymediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlossaryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {module:api/DefaultApi~apiGlossarymediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlossaryList}
     */
    apiGlossarymediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling apiGlossarymediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GlossaryList;
      return this.apiClient.callApi(
        '/api/glossary{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiQuestionsmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~apiQuestionsmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {module:api/DefaultApi~apiQuestionsmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionsList}
     */
    apiQuestionsmediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling apiQuestionsmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = QuestionsList;
      return this.apiClient.callApi(
        '/api/questions{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiStatesmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~apiStatesmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {module:api/DefaultApi~apiStatesmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatesList}
     */
    apiStatesmediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling apiStatesmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StatesList;
      return this.apiClient.callApi(
        '/api/states{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTopicsmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~apiTopicsmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {module:api/DefaultApi~apiTopicsmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicsList}
     */
    apiTopicsmediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling apiTopicsmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TopicsList;
      return this.apiClient.callApi(
        '/api/topics{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blogPageNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~blogPageNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlogPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} pageName 
     * @param {module:api/DefaultApi~blogPageNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlogPage}
     */
    blogPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling blogPageNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling blogPageNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/html'];
      let returnType = BlogPage;
      return this.apiClient.callApi(
        '/blog/{pageName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the esBlogPageNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~esBlogPageNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlogPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} pageName 
     * @param {module:api/DefaultApi~esBlogPageNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlogPage}
     */
    esBlogPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling esBlogPageNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling esBlogPageNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/html'];
      let returnType = BlogPage;
      return this.apiClient.callApi(
        '/es/blog/{pageName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the esGlossaryPageNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~esGlossaryPageNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlossaryPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} pageName 
     * @param {module:api/DefaultApi~esGlossaryPageNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlossaryPage}
     */
    esGlossaryPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling esGlossaryPageNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling esGlossaryPageNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/html'];
      let returnType = GlossaryPage;
      return this.apiClient.callApi(
        '/es/glossary/{pageName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the esPageNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~esPageNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Page} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} pageName 
     * @param {module:api/DefaultApi~esPageNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Page}
     */
    esPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling esPageNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling esPageNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/html'];
      let returnType = Page;
      return this.apiClient.callApi(
        '/es/{pageName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the esQuestionPageNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~esQuestionPageNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} pageName 
     * @param {module:api/DefaultApi~esQuestionPageNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionPage}
     */
    esQuestionPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling esQuestionPageNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling esQuestionPageNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = QuestionPage;
      return this.apiClient.callApi(
        '/es/question/{pageName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the esStateNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~esStateNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} stateName 
     * @param {module:api/DefaultApi~esStateNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatePage}
     */
    esStateNamemediaTypeExtensionGet(mediaTypeExtension, stateName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling esStateNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'stateName' is set
      if (stateName === undefined || stateName === null) {
        throw new Error("Missing the required parameter 'stateName' when calling esStateNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'stateName': stateName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StatePage;
      return this.apiClient.callApi(
        '/es/{stateName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the glossaryPageNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~glossaryPageNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlossaryPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} pageName 
     * @param {module:api/DefaultApi~glossaryPageNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlossaryPage}
     */
    glossaryPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling glossaryPageNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling glossaryPageNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/html'];
      let returnType = GlossaryPage;
      return this.apiClient.callApi(
        '/glossary/{pageName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pageNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~pageNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Page} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} pageName 
     * @param {module:api/DefaultApi~pageNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Page}
     */
    pageNamemediaTypeExtensionGet(mediaTypeExtension, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling pageNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling pageNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/html'];
      let returnType = Page;
      return this.apiClient.callApi(
        '/{pageName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionPageNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~questionPageNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} pageName 
     * @param {module:api/DefaultApi~questionPageNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionPage}
     */
    questionPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling questionPageNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'pageName' is set
      if (pageName === undefined || pageName === null) {
        throw new Error("Missing the required parameter 'pageName' when calling questionPageNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'pageName': pageName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = QuestionPage;
      return this.apiClient.callApi(
        '/question/{pageName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stateNamemediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~stateNamemediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pages content.
     * @param {module:model/String} mediaTypeExtension Omiting the param causes html to be returned.
     * @param {String} stateName 
     * @param {module:api/DefaultApi~stateNamemediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatePage}
     */
    stateNamemediaTypeExtensionGet(mediaTypeExtension, stateName, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling stateNamemediaTypeExtensionGet");
      }
      // verify the required parameter 'stateName' is set
      if (stateName === undefined || stateName === null) {
        throw new Error("Missing the required parameter 'stateName' when calling stateNamemediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'stateName': stateName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StatePage;
      return this.apiClient.callApi(
        '/{stateName}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
