/**
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StatesListStatesInnerInner model module.
 * @module model/StatesListStatesInnerInner
 * @version 1.0.0
 */
class StatesListStatesInnerInner {
    /**
     * Constructs a new <code>StatesListStatesInnerInner</code>.
     * @alias module:model/StatesListStatesInnerInner
     */
    constructor() { 
        
        StatesListStatesInnerInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatesListStatesInnerInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatesListStatesInnerInner} obj Optional instance to populate.
     * @return {module:model/StatesListStatesInnerInner} The populated <code>StatesListStatesInnerInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatesListStatesInnerInner();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [[Object]]);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('excerpt')) {
                obj['excerpt'] = ApiClient.convertToType(data['excerpt'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'Number');
            }
            if (data.hasOwnProperty('stateurl')) {
                obj['stateurl'] = ApiClient.convertToType(data['stateurl'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [['String']]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatesListStatesInnerInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatesListStatesInnerInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['excerpt'] && !(typeof data['excerpt'] === 'string' || data['excerpt'] instanceof String)) {
            throw new Error("Expected the field `excerpt` to be a primitive type in the JSON string but got " + data['excerpt']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['stateurl'] && !(typeof data['stateurl'] === 'string' || data['stateurl'] instanceof String)) {
            throw new Error("Expected the field `stateurl` to be a primitive type in the JSON string but got " + data['stateurl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {Array.<Array.<Object>>} categories
 */
StatesListStatesInnerInner.prototype['categories'] = undefined;

/**
 * @member {String} content
 */
StatesListStatesInnerInner.prototype['content'] = undefined;

/**
 * @member {String} date
 */
StatesListStatesInnerInner.prototype['date'] = undefined;

/**
 * @member {String} excerpt
 */
StatesListStatesInnerInner.prototype['excerpt'] = undefined;

/**
 * @member {String} id
 */
StatesListStatesInnerInner.prototype['id'] = undefined;

/**
 * @member {String} lang
 */
StatesListStatesInnerInner.prototype['lang'] = undefined;

/**
 * @member {String} path
 */
StatesListStatesInnerInner.prototype['path'] = undefined;

/**
 * @member {Number} sort
 */
StatesListStatesInnerInner.prototype['sort'] = undefined;

/**
 * @member {String} stateurl
 */
StatesListStatesInnerInner.prototype['stateurl'] = undefined;

/**
 * @member {Array.<Array.<String>>} tags
 */
StatesListStatesInnerInner.prototype['tags'] = undefined;

/**
 * @member {String} title
 */
StatesListStatesInnerInner.prototype['title'] = undefined;

/**
 * @member {String} url
 */
StatesListStatesInnerInner.prototype['url'] = undefined;






export default StatesListStatesInnerInner;

