/*
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArticlesList;
import org.openapitools.client.model.BlogList;
import org.openapitools.client.model.BlogPage;
import org.openapitools.client.model.GlossaryList;
import org.openapitools.client.model.GlossaryPage;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.QuestionPage;
import org.openapitools.client.model.QuestionsList;
import org.openapitools.client.model.StatePage;
import org.openapitools.client.model.StatesList;
import org.openapitools.client.model.TopicsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiArticlesmediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiArticlesmediaTypeExtensionGetCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiArticlesmediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling apiArticlesmediaTypeExtensionGet(Async)");
        }

        return apiArticlesmediaTypeExtensionGetCall(mediaTypeExtension, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return ArticlesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ArticlesList apiArticlesmediaTypeExtensionGet(String mediaTypeExtension) throws ApiException {
        ApiResponse<ArticlesList> localVarResp = apiArticlesmediaTypeExtensionGetWithHttpInfo(mediaTypeExtension);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return ApiResponse&lt;ArticlesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArticlesList> apiArticlesmediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension) throws ApiException {
        okhttp3.Call localVarCall = apiArticlesmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, null);
        Type localVarReturnType = new TypeToken<ArticlesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiArticlesmediaTypeExtensionGetAsync(String mediaTypeExtension, final ApiCallback<ArticlesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiArticlesmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, _callback);
        Type localVarReturnType = new TypeToken<ArticlesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBlogmediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlogmediaTypeExtensionGetCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/blog{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBlogmediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling apiBlogmediaTypeExtensionGet(Async)");
        }

        return apiBlogmediaTypeExtensionGetCall(mediaTypeExtension, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return BlogList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public BlogList apiBlogmediaTypeExtensionGet(String mediaTypeExtension) throws ApiException {
        ApiResponse<BlogList> localVarResp = apiBlogmediaTypeExtensionGetWithHttpInfo(mediaTypeExtension);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return ApiResponse&lt;BlogList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlogList> apiBlogmediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension) throws ApiException {
        okhttp3.Call localVarCall = apiBlogmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, null);
        Type localVarReturnType = new TypeToken<BlogList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBlogmediaTypeExtensionGetAsync(String mediaTypeExtension, final ApiCallback<BlogList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBlogmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, _callback);
        Type localVarReturnType = new TypeToken<BlogList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiGlossarymediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGlossarymediaTypeExtensionGetCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/glossary{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGlossarymediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling apiGlossarymediaTypeExtensionGet(Async)");
        }

        return apiGlossarymediaTypeExtensionGetCall(mediaTypeExtension, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return GlossaryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public GlossaryList apiGlossarymediaTypeExtensionGet(String mediaTypeExtension) throws ApiException {
        ApiResponse<GlossaryList> localVarResp = apiGlossarymediaTypeExtensionGetWithHttpInfo(mediaTypeExtension);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return ApiResponse&lt;GlossaryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlossaryList> apiGlossarymediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension) throws ApiException {
        okhttp3.Call localVarCall = apiGlossarymediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, null);
        Type localVarReturnType = new TypeToken<GlossaryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGlossarymediaTypeExtensionGetAsync(String mediaTypeExtension, final ApiCallback<GlossaryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGlossarymediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, _callback);
        Type localVarReturnType = new TypeToken<GlossaryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiQuestionsmediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiQuestionsmediaTypeExtensionGetCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/questions{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiQuestionsmediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling apiQuestionsmediaTypeExtensionGet(Async)");
        }

        return apiQuestionsmediaTypeExtensionGetCall(mediaTypeExtension, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return QuestionsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public QuestionsList apiQuestionsmediaTypeExtensionGet(String mediaTypeExtension) throws ApiException {
        ApiResponse<QuestionsList> localVarResp = apiQuestionsmediaTypeExtensionGetWithHttpInfo(mediaTypeExtension);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return ApiResponse&lt;QuestionsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuestionsList> apiQuestionsmediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension) throws ApiException {
        okhttp3.Call localVarCall = apiQuestionsmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, null);
        Type localVarReturnType = new TypeToken<QuestionsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiQuestionsmediaTypeExtensionGetAsync(String mediaTypeExtension, final ApiCallback<QuestionsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiQuestionsmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, _callback);
        Type localVarReturnType = new TypeToken<QuestionsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiStatesmediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiStatesmediaTypeExtensionGetCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/states{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiStatesmediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling apiStatesmediaTypeExtensionGet(Async)");
        }

        return apiStatesmediaTypeExtensionGetCall(mediaTypeExtension, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return StatesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public StatesList apiStatesmediaTypeExtensionGet(String mediaTypeExtension) throws ApiException {
        ApiResponse<StatesList> localVarResp = apiStatesmediaTypeExtensionGetWithHttpInfo(mediaTypeExtension);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return ApiResponse&lt;StatesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatesList> apiStatesmediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension) throws ApiException {
        okhttp3.Call localVarCall = apiStatesmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, null);
        Type localVarReturnType = new TypeToken<StatesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiStatesmediaTypeExtensionGetAsync(String mediaTypeExtension, final ApiCallback<StatesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiStatesmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, _callback);
        Type localVarReturnType = new TypeToken<StatesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTopicsmediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTopicsmediaTypeExtensionGetCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/topics{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTopicsmediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling apiTopicsmediaTypeExtensionGet(Async)");
        }

        return apiTopicsmediaTypeExtensionGetCall(mediaTypeExtension, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return TopicsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public TopicsList apiTopicsmediaTypeExtensionGet(String mediaTypeExtension) throws ApiException {
        ApiResponse<TopicsList> localVarResp = apiTopicsmediaTypeExtensionGetWithHttpInfo(mediaTypeExtension);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @return ApiResponse&lt;TopicsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicsList> apiTopicsmediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension) throws ApiException {
        okhttp3.Call localVarCall = apiTopicsmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, null);
        Type localVarReturnType = new TypeToken<TopicsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTopicsmediaTypeExtensionGetAsync(String mediaTypeExtension, final ApiCallback<TopicsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTopicsmediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, _callback);
        Type localVarReturnType = new TypeToken<TopicsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blogPageNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogPageNamemediaTypeExtensionGetCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blog/{pageName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blogPageNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling blogPageNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling blogPageNamemediaTypeExtensionGet(Async)");
        }

        return blogPageNamemediaTypeExtensionGetCall(mediaTypeExtension, pageName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return BlogPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public BlogPage blogPageNamemediaTypeExtensionGet(String mediaTypeExtension, String pageName) throws ApiException {
        ApiResponse<BlogPage> localVarResp = blogPageNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, pageName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return ApiResponse&lt;BlogPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlogPage> blogPageNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String pageName) throws ApiException {
        okhttp3.Call localVarCall = blogPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, null);
        Type localVarReturnType = new TypeToken<BlogPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blogPageNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String pageName, final ApiCallback<BlogPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = blogPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, _callback);
        Type localVarReturnType = new TypeToken<BlogPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esBlogPageNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esBlogPageNamemediaTypeExtensionGetCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/es/blog/{pageName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esBlogPageNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling esBlogPageNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling esBlogPageNamemediaTypeExtensionGet(Async)");
        }

        return esBlogPageNamemediaTypeExtensionGetCall(mediaTypeExtension, pageName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return BlogPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public BlogPage esBlogPageNamemediaTypeExtensionGet(String mediaTypeExtension, String pageName) throws ApiException {
        ApiResponse<BlogPage> localVarResp = esBlogPageNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, pageName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return ApiResponse&lt;BlogPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlogPage> esBlogPageNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String pageName) throws ApiException {
        okhttp3.Call localVarCall = esBlogPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, null);
        Type localVarReturnType = new TypeToken<BlogPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esBlogPageNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String pageName, final ApiCallback<BlogPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = esBlogPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, _callback);
        Type localVarReturnType = new TypeToken<BlogPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esGlossaryPageNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esGlossaryPageNamemediaTypeExtensionGetCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/es/glossary/{pageName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esGlossaryPageNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling esGlossaryPageNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling esGlossaryPageNamemediaTypeExtensionGet(Async)");
        }

        return esGlossaryPageNamemediaTypeExtensionGetCall(mediaTypeExtension, pageName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return GlossaryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public GlossaryPage esGlossaryPageNamemediaTypeExtensionGet(String mediaTypeExtension, String pageName) throws ApiException {
        ApiResponse<GlossaryPage> localVarResp = esGlossaryPageNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, pageName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return ApiResponse&lt;GlossaryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlossaryPage> esGlossaryPageNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String pageName) throws ApiException {
        okhttp3.Call localVarCall = esGlossaryPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, null);
        Type localVarReturnType = new TypeToken<GlossaryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esGlossaryPageNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String pageName, final ApiCallback<GlossaryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = esGlossaryPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, _callback);
        Type localVarReturnType = new TypeToken<GlossaryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esPageNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esPageNamemediaTypeExtensionGetCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/es/{pageName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esPageNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling esPageNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling esPageNamemediaTypeExtensionGet(Async)");
        }

        return esPageNamemediaTypeExtensionGetCall(mediaTypeExtension, pageName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public Page esPageNamemediaTypeExtensionGet(String mediaTypeExtension, String pageName) throws ApiException {
        ApiResponse<Page> localVarResp = esPageNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, pageName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Page> esPageNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String pageName) throws ApiException {
        okhttp3.Call localVarCall = esPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esPageNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String pageName, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = esPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esQuestionPageNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esQuestionPageNamemediaTypeExtensionGetCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/es/question/{pageName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esQuestionPageNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling esQuestionPageNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling esQuestionPageNamemediaTypeExtensionGet(Async)");
        }

        return esQuestionPageNamemediaTypeExtensionGetCall(mediaTypeExtension, pageName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return QuestionPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public QuestionPage esQuestionPageNamemediaTypeExtensionGet(String mediaTypeExtension, String pageName) throws ApiException {
        ApiResponse<QuestionPage> localVarResp = esQuestionPageNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, pageName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return ApiResponse&lt;QuestionPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuestionPage> esQuestionPageNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String pageName) throws ApiException {
        okhttp3.Call localVarCall = esQuestionPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, null);
        Type localVarReturnType = new TypeToken<QuestionPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esQuestionPageNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String pageName, final ApiCallback<QuestionPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = esQuestionPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, _callback);
        Type localVarReturnType = new TypeToken<QuestionPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esStateNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param stateName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esStateNamemediaTypeExtensionGetCall(String mediaTypeExtension, String stateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/es/{stateName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "stateName" + "}", localVarApiClient.escapeString(stateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esStateNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String stateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling esStateNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'stateName' is set
        if (stateName == null) {
            throw new ApiException("Missing the required parameter 'stateName' when calling esStateNamemediaTypeExtensionGet(Async)");
        }

        return esStateNamemediaTypeExtensionGetCall(mediaTypeExtension, stateName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param stateName  (required)
     * @return StatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public StatePage esStateNamemediaTypeExtensionGet(String mediaTypeExtension, String stateName) throws ApiException {
        ApiResponse<StatePage> localVarResp = esStateNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, stateName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param stateName  (required)
     * @return ApiResponse&lt;StatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatePage> esStateNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String stateName) throws ApiException {
        okhttp3.Call localVarCall = esStateNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, stateName, null);
        Type localVarReturnType = new TypeToken<StatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param stateName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esStateNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String stateName, final ApiCallback<StatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = esStateNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, stateName, _callback);
        Type localVarReturnType = new TypeToken<StatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for glossaryPageNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryPageNamemediaTypeExtensionGetCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/glossary/{pageName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call glossaryPageNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling glossaryPageNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling glossaryPageNamemediaTypeExtensionGet(Async)");
        }

        return glossaryPageNamemediaTypeExtensionGetCall(mediaTypeExtension, pageName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return GlossaryPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public GlossaryPage glossaryPageNamemediaTypeExtensionGet(String mediaTypeExtension, String pageName) throws ApiException {
        ApiResponse<GlossaryPage> localVarResp = glossaryPageNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, pageName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return ApiResponse&lt;GlossaryPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlossaryPage> glossaryPageNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String pageName) throws ApiException {
        okhttp3.Call localVarCall = glossaryPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, null);
        Type localVarReturnType = new TypeToken<GlossaryPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call glossaryPageNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String pageName, final ApiCallback<GlossaryPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = glossaryPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, _callback);
        Type localVarReturnType = new TypeToken<GlossaryPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageNamemediaTypeExtensionGetCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{pageName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling pageNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling pageNamemediaTypeExtensionGet(Async)");
        }

        return pageNamemediaTypeExtensionGetCall(mediaTypeExtension, pageName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public Page pageNamemediaTypeExtensionGet(String mediaTypeExtension, String pageName) throws ApiException {
        ApiResponse<Page> localVarResp = pageNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, pageName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Page> pageNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String pageName) throws ApiException {
        okhttp3.Call localVarCall = pageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String pageName, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for questionPageNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call questionPageNamemediaTypeExtensionGetCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/question/{pageName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "pageName" + "}", localVarApiClient.escapeString(pageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call questionPageNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String pageName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling questionPageNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'pageName' is set
        if (pageName == null) {
            throw new ApiException("Missing the required parameter 'pageName' when calling questionPageNamemediaTypeExtensionGet(Async)");
        }

        return questionPageNamemediaTypeExtensionGetCall(mediaTypeExtension, pageName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return QuestionPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public QuestionPage questionPageNamemediaTypeExtensionGet(String mediaTypeExtension, String pageName) throws ApiException {
        ApiResponse<QuestionPage> localVarResp = questionPageNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, pageName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @return ApiResponse&lt;QuestionPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuestionPage> questionPageNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String pageName) throws ApiException {
        okhttp3.Call localVarCall = questionPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, null);
        Type localVarReturnType = new TypeToken<QuestionPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param pageName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call questionPageNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String pageName, final ApiCallback<QuestionPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = questionPageNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, pageName, _callback);
        Type localVarReturnType = new TypeToken<QuestionPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stateNamemediaTypeExtensionGet
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param stateName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stateNamemediaTypeExtensionGetCall(String mediaTypeExtension, String stateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{stateName}{mediaTypeExtension}"
            .replace("{" + "mediaTypeExtension" + "}", localVarApiClient.escapeString(mediaTypeExtension.toString()))
            .replace("{" + "stateName" + "}", localVarApiClient.escapeString(stateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stateNamemediaTypeExtensionGetValidateBeforeCall(String mediaTypeExtension, String stateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaTypeExtension' is set
        if (mediaTypeExtension == null) {
            throw new ApiException("Missing the required parameter 'mediaTypeExtension' when calling stateNamemediaTypeExtensionGet(Async)");
        }

        // verify the required parameter 'stateName' is set
        if (stateName == null) {
            throw new ApiException("Missing the required parameter 'stateName' when calling stateNamemediaTypeExtensionGet(Async)");
        }

        return stateNamemediaTypeExtensionGetCall(mediaTypeExtension, stateName, _callback);

    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param stateName  (required)
     * @return StatePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public StatePage stateNamemediaTypeExtensionGet(String mediaTypeExtension, String stateName) throws ApiException {
        ApiResponse<StatePage> localVarResp = stateNamemediaTypeExtensionGetWithHttpInfo(mediaTypeExtension, stateName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param stateName  (required)
     * @return ApiResponse&lt;StatePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatePage> stateNamemediaTypeExtensionGetWithHttpInfo(String mediaTypeExtension, String stateName) throws ApiException {
        okhttp3.Call localVarCall = stateNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, stateName, null);
        Type localVarReturnType = new TypeToken<StatePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns pages content.
     * @param mediaTypeExtension Omiting the param causes html to be returned. (required)
     * @param stateName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stateNamemediaTypeExtensionGetAsync(String mediaTypeExtension, String stateName, final ApiCallback<StatePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stateNamemediaTypeExtensionGetValidateBeforeCall(mediaTypeExtension, stateName, _callback);
        Type localVarReturnType = new TypeToken<StatePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
