/*
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TopicsListTopicsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:31.317110-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopicsListTopicsInner {
  public static final String SERIALIZED_NAME_ARTICLEORDER = "articleorder";
  @SerializedName(SERIALIZED_NAME_ARTICLEORDER)
  private List<List<String>> articleorder = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<List<Object>> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_EXCERPT = "excerpt";
  @SerializedName(SERIALIZED_NAME_EXCERPT)
  private String excerpt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private String layout;

  public static final String SERIALIZED_NAME_META_DESCRIPTION = "meta-description";
  @SerializedName(SERIALIZED_NAME_META_DESCRIPTION)
  private String metaDescription;

  public static final String SERIALIZED_NAME_META_TITLE = "meta-title";
  @SerializedName(SERIALIZED_NAME_META_TITLE)
  private String metaTitle;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private BigDecimal order;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private BigDecimal sort;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<List<String>> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public TopicsListTopicsInner() {
  }

  public TopicsListTopicsInner articleorder(List<List<String>> articleorder) {
    this.articleorder = articleorder;
    return this;
  }

  public TopicsListTopicsInner addArticleorderItem(List<String> articleorderItem) {
    if (this.articleorder == null) {
      this.articleorder = new ArrayList<>();
    }
    this.articleorder.add(articleorderItem);
    return this;
  }

  /**
   * Get articleorder
   * @return articleorder
   */
  @javax.annotation.Nullable
  public List<List<String>> getArticleorder() {
    return articleorder;
  }

  public void setArticleorder(List<List<String>> articleorder) {
    this.articleorder = articleorder;
  }


  public TopicsListTopicsInner categories(List<List<Object>> categories) {
    this.categories = categories;
    return this;
  }

  public TopicsListTopicsInner addCategoriesItem(List<Object> categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List<List<Object>> getCategories() {
    return categories;
  }

  public void setCategories(List<List<Object>> categories) {
    this.categories = categories;
  }


  public TopicsListTopicsInner content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public TopicsListTopicsInner date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public TopicsListTopicsInner excerpt(String excerpt) {
    this.excerpt = excerpt;
    return this;
  }

  /**
   * Get excerpt
   * @return excerpt
   */
  @javax.annotation.Nullable
  public String getExcerpt() {
    return excerpt;
  }

  public void setExcerpt(String excerpt) {
    this.excerpt = excerpt;
  }


  public TopicsListTopicsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TopicsListTopicsInner lang(String lang) {
    this.lang = lang;
    return this;
  }

  /**
   * Get lang
   * @return lang
   */
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public TopicsListTopicsInner layout(String layout) {
    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nullable
  public String getLayout() {
    return layout;
  }

  public void setLayout(String layout) {
    this.layout = layout;
  }


  public TopicsListTopicsInner metaDescription(String metaDescription) {
    this.metaDescription = metaDescription;
    return this;
  }

  /**
   * Get metaDescription
   * @return metaDescription
   */
  @javax.annotation.Nullable
  public String getMetaDescription() {
    return metaDescription;
  }

  public void setMetaDescription(String metaDescription) {
    this.metaDescription = metaDescription;
  }


  public TopicsListTopicsInner metaTitle(String metaTitle) {
    this.metaTitle = metaTitle;
    return this;
  }

  /**
   * Get metaTitle
   * @return metaTitle
   */
  @javax.annotation.Nullable
  public String getMetaTitle() {
    return metaTitle;
  }

  public void setMetaTitle(String metaTitle) {
    this.metaTitle = metaTitle;
  }


  public TopicsListTopicsInner order(BigDecimal order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public BigDecimal getOrder() {
    return order;
  }

  public void setOrder(BigDecimal order) {
    this.order = order;
  }


  public TopicsListTopicsInner path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public TopicsListTopicsInner published(Boolean published) {
    this.published = published;
    return this;
  }

  /**
   * Get published
   * @return published
   */
  @javax.annotation.Nullable
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }


  public TopicsListTopicsInner sort(BigDecimal sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Get sort
   * @return sort
   */
  @javax.annotation.Nullable
  public BigDecimal getSort() {
    return sort;
  }

  public void setSort(BigDecimal sort) {
    this.sort = sort;
  }


  public TopicsListTopicsInner tags(List<List<String>> tags) {
    this.tags = tags;
    return this;
  }

  public TopicsListTopicsInner addTagsItem(List<String> tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<List<String>> getTags() {
    return tags;
  }

  public void setTags(List<List<String>> tags) {
    this.tags = tags;
  }


  public TopicsListTopicsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TopicsListTopicsInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopicsListTopicsInner topicsListTopicsInner = (TopicsListTopicsInner) o;
    return Objects.equals(this.articleorder, topicsListTopicsInner.articleorder) &&
        Objects.equals(this.categories, topicsListTopicsInner.categories) &&
        Objects.equals(this.content, topicsListTopicsInner.content) &&
        Objects.equals(this.date, topicsListTopicsInner.date) &&
        Objects.equals(this.excerpt, topicsListTopicsInner.excerpt) &&
        Objects.equals(this.id, topicsListTopicsInner.id) &&
        Objects.equals(this.lang, topicsListTopicsInner.lang) &&
        Objects.equals(this.layout, topicsListTopicsInner.layout) &&
        Objects.equals(this.metaDescription, topicsListTopicsInner.metaDescription) &&
        Objects.equals(this.metaTitle, topicsListTopicsInner.metaTitle) &&
        Objects.equals(this.order, topicsListTopicsInner.order) &&
        Objects.equals(this.path, topicsListTopicsInner.path) &&
        Objects.equals(this.published, topicsListTopicsInner.published) &&
        Objects.equals(this.sort, topicsListTopicsInner.sort) &&
        Objects.equals(this.tags, topicsListTopicsInner.tags) &&
        Objects.equals(this.title, topicsListTopicsInner.title) &&
        Objects.equals(this.url, topicsListTopicsInner.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(articleorder, categories, content, date, excerpt, id, lang, layout, metaDescription, metaTitle, order, path, published, sort, tags, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopicsListTopicsInner {\n");
    sb.append("    articleorder: ").append(toIndentedString(articleorder)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    excerpt: ").append(toIndentedString(excerpt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    metaDescription: ").append(toIndentedString(metaDescription)).append("\n");
    sb.append("    metaTitle: ").append(toIndentedString(metaTitle)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("articleorder");
    openapiFields.add("categories");
    openapiFields.add("content");
    openapiFields.add("date");
    openapiFields.add("excerpt");
    openapiFields.add("id");
    openapiFields.add("lang");
    openapiFields.add("layout");
    openapiFields.add("meta-description");
    openapiFields.add("meta-title");
    openapiFields.add("order");
    openapiFields.add("path");
    openapiFields.add("published");
    openapiFields.add("sort");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopicsListTopicsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopicsListTopicsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopicsListTopicsInner is not found in the empty JSON string", TopicsListTopicsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopicsListTopicsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopicsListTopicsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("articleorder") != null && !jsonObj.get("articleorder").isJsonNull() && !jsonObj.get("articleorder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `articleorder` to be an array in the JSON string but got `%s`", jsonObj.get("articleorder").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("excerpt") != null && !jsonObj.get("excerpt").isJsonNull()) && !jsonObj.get("excerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excerpt").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) && !jsonObj.get("layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layout").toString()));
      }
      if ((jsonObj.get("meta-description") != null && !jsonObj.get("meta-description").isJsonNull()) && !jsonObj.get("meta-description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta-description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta-description").toString()));
      }
      if ((jsonObj.get("meta-title") != null && !jsonObj.get("meta-title").isJsonNull()) && !jsonObj.get("meta-title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta-title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta-title").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopicsListTopicsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopicsListTopicsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopicsListTopicsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopicsListTopicsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TopicsListTopicsInner>() {
           @Override
           public void write(JsonWriter out, TopicsListTopicsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopicsListTopicsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopicsListTopicsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopicsListTopicsInner
   * @throws IOException if the JSON string is invalid with respect to TopicsListTopicsInner
   */
  public static TopicsListTopicsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopicsListTopicsInner.class);
  }

  /**
   * Convert an instance of TopicsListTopicsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

