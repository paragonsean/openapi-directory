/*
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArticlesList;
import org.openapitools.client.model.BlogList;
import org.openapitools.client.model.BlogPage;
import org.openapitools.client.model.GlossaryList;
import org.openapitools.client.model.GlossaryPage;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.QuestionPage;
import org.openapitools.client.model.QuestionsList;
import org.openapitools.client.model.StatePage;
import org.openapitools.client.model.StatesList;
import org.openapitools.client.model.TopicsList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiArticlesmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        ArticlesList response = api.apiArticlesmediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiBlogmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        BlogList response = api.apiBlogmediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiGlossarymediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        GlossaryList response = api.apiGlossarymediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiQuestionsmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        QuestionsList response = api.apiQuestionsmediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiStatesmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        StatesList response = api.apiStatesmediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTopicsmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        TopicsList response = api.apiTopicsmediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blogPageNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String pageName = null;
        BlogPage response = api.blogPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void esBlogPageNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String pageName = null;
        BlogPage response = api.esBlogPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void esGlossaryPageNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String pageName = null;
        GlossaryPage response = api.esGlossaryPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void esPageNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String pageName = null;
        Page response = api.esPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void esQuestionPageNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String pageName = null;
        QuestionPage response = api.esQuestionPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void esStateNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String stateName = null;
        StatePage response = api.esStateNamemediaTypeExtensionGet(mediaTypeExtension, stateName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void glossaryPageNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String pageName = null;
        GlossaryPage response = api.glossaryPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String pageName = null;
        Page response = api.pageNamemediaTypeExtensionGet(mediaTypeExtension, pageName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void questionPageNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String pageName = null;
        QuestionPage response = api.questionPageNamemediaTypeExtensionGet(mediaTypeExtension, pageName);
        // TODO: test validations
    }

    /**
     * Returns pages content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stateNamemediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String stateName = null;
        StatePage response = api.stateNamemediaTypeExtensionGet(mediaTypeExtension, stateName);
        // TODO: test validations
    }

}
