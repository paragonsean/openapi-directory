/**
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArticlesList.h"
#include "OAIBlogList.h"
#include "OAIBlogPage.h"
#include "OAIGlossaryList.h"
#include "OAIGlossaryPage.h"
#include "OAIPage.h"
#include "OAIQuestionPage.h"
#include "OAIQuestionsList.h"
#include "OAIStatePage.h"
#include "OAIStatesList.h"
#include "OAITopicsList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void apiArticlesmediaTypeExtensionGet(const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void apiBlogmediaTypeExtensionGet(const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void apiGlossarymediaTypeExtensionGet(const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void apiQuestionsmediaTypeExtensionGet(const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void apiStatesmediaTypeExtensionGet(const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void apiTopicsmediaTypeExtensionGet(const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void blogPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void esBlogPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void esGlossaryPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void esPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void esQuestionPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  state_name QString [required]
    */
    virtual void esStateNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &state_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void glossaryPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void pageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page_name QString [required]
    */
    virtual void questionPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  state_name QString [required]
    */
    virtual void stateNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &state_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiArticlesmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void apiBlogmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void apiGlossarymediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void apiQuestionsmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void apiStatesmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void apiTopicsmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void blogPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void esBlogPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void esGlossaryPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void esPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void esQuestionPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void esStateNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void glossaryPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void pageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void questionPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void stateNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiArticlesmediaTypeExtensionGetSignal(OAIArticlesList summary);
    void apiBlogmediaTypeExtensionGetSignal(OAIBlogList summary);
    void apiGlossarymediaTypeExtensionGetSignal(OAIGlossaryList summary);
    void apiQuestionsmediaTypeExtensionGetSignal(OAIQuestionsList summary);
    void apiStatesmediaTypeExtensionGetSignal(OAIStatesList summary);
    void apiTopicsmediaTypeExtensionGetSignal(OAITopicsList summary);
    void blogPageNamemediaTypeExtensionGetSignal(OAIBlogPage summary);
    void esBlogPageNamemediaTypeExtensionGetSignal(OAIBlogPage summary);
    void esGlossaryPageNamemediaTypeExtensionGetSignal(OAIGlossaryPage summary);
    void esPageNamemediaTypeExtensionGetSignal(OAIPage summary);
    void esQuestionPageNamemediaTypeExtensionGetSignal(OAIQuestionPage summary);
    void esStateNamemediaTypeExtensionGetSignal(OAIStatePage summary);
    void glossaryPageNamemediaTypeExtensionGetSignal(OAIGlossaryPage summary);
    void pageNamemediaTypeExtensionGetSignal(OAIPage summary);
    void questionPageNamemediaTypeExtensionGetSignal(OAIQuestionPage summary);
    void stateNamemediaTypeExtensionGetSignal(OAIStatePage summary);


    void apiArticlesmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIArticlesList summary);
    void apiBlogmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIBlogList summary);
    void apiGlossarymediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIGlossaryList summary);
    void apiQuestionsmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIQuestionsList summary);
    void apiStatesmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIStatesList summary);
    void apiTopicsmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAITopicsList summary);
    void blogPageNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIBlogPage summary);
    void esBlogPageNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIBlogPage summary);
    void esGlossaryPageNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIGlossaryPage summary);
    void esPageNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIPage summary);
    void esQuestionPageNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIQuestionPage summary);
    void esStateNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIStatePage summary);
    void glossaryPageNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIGlossaryPage summary);
    void pageNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIPage summary);
    void questionPageNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIQuestionPage summary);
    void stateNamemediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIStatePage summary);

    Q_DECL_DEPRECATED_X("Use apiArticlesmediaTypeExtensionGetSignalError() instead")
    void apiArticlesmediaTypeExtensionGetSignalE(OAIArticlesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiArticlesmediaTypeExtensionGetSignalError(OAIArticlesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBlogmediaTypeExtensionGetSignalError() instead")
    void apiBlogmediaTypeExtensionGetSignalE(OAIBlogList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBlogmediaTypeExtensionGetSignalError(OAIBlogList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiGlossarymediaTypeExtensionGetSignalError() instead")
    void apiGlossarymediaTypeExtensionGetSignalE(OAIGlossaryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiGlossarymediaTypeExtensionGetSignalError(OAIGlossaryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiQuestionsmediaTypeExtensionGetSignalError() instead")
    void apiQuestionsmediaTypeExtensionGetSignalE(OAIQuestionsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiQuestionsmediaTypeExtensionGetSignalError(OAIQuestionsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiStatesmediaTypeExtensionGetSignalError() instead")
    void apiStatesmediaTypeExtensionGetSignalE(OAIStatesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiStatesmediaTypeExtensionGetSignalError(OAIStatesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTopicsmediaTypeExtensionGetSignalError() instead")
    void apiTopicsmediaTypeExtensionGetSignalE(OAITopicsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTopicsmediaTypeExtensionGetSignalError(OAITopicsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blogPageNamemediaTypeExtensionGetSignalError() instead")
    void blogPageNamemediaTypeExtensionGetSignalE(OAIBlogPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blogPageNamemediaTypeExtensionGetSignalError(OAIBlogPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esBlogPageNamemediaTypeExtensionGetSignalError() instead")
    void esBlogPageNamemediaTypeExtensionGetSignalE(OAIBlogPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void esBlogPageNamemediaTypeExtensionGetSignalError(OAIBlogPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esGlossaryPageNamemediaTypeExtensionGetSignalError() instead")
    void esGlossaryPageNamemediaTypeExtensionGetSignalE(OAIGlossaryPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void esGlossaryPageNamemediaTypeExtensionGetSignalError(OAIGlossaryPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esPageNamemediaTypeExtensionGetSignalError() instead")
    void esPageNamemediaTypeExtensionGetSignalE(OAIPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void esPageNamemediaTypeExtensionGetSignalError(OAIPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esQuestionPageNamemediaTypeExtensionGetSignalError() instead")
    void esQuestionPageNamemediaTypeExtensionGetSignalE(OAIQuestionPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void esQuestionPageNamemediaTypeExtensionGetSignalError(OAIQuestionPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esStateNamemediaTypeExtensionGetSignalError() instead")
    void esStateNamemediaTypeExtensionGetSignalE(OAIStatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void esStateNamemediaTypeExtensionGetSignalError(OAIStatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use glossaryPageNamemediaTypeExtensionGetSignalError() instead")
    void glossaryPageNamemediaTypeExtensionGetSignalE(OAIGlossaryPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void glossaryPageNamemediaTypeExtensionGetSignalError(OAIGlossaryPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pageNamemediaTypeExtensionGetSignalError() instead")
    void pageNamemediaTypeExtensionGetSignalE(OAIPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pageNamemediaTypeExtensionGetSignalError(OAIPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionPageNamemediaTypeExtensionGetSignalError() instead")
    void questionPageNamemediaTypeExtensionGetSignalE(OAIQuestionPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionPageNamemediaTypeExtensionGetSignalError(OAIQuestionPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stateNamemediaTypeExtensionGetSignalError() instead")
    void stateNamemediaTypeExtensionGetSignalE(OAIStatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stateNamemediaTypeExtensionGetSignalError(OAIStatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiArticlesmediaTypeExtensionGetSignalErrorFull() instead")
    void apiArticlesmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiArticlesmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBlogmediaTypeExtensionGetSignalErrorFull() instead")
    void apiBlogmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBlogmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiGlossarymediaTypeExtensionGetSignalErrorFull() instead")
    void apiGlossarymediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiGlossarymediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiQuestionsmediaTypeExtensionGetSignalErrorFull() instead")
    void apiQuestionsmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiQuestionsmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiStatesmediaTypeExtensionGetSignalErrorFull() instead")
    void apiStatesmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiStatesmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTopicsmediaTypeExtensionGetSignalErrorFull() instead")
    void apiTopicsmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTopicsmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blogPageNamemediaTypeExtensionGetSignalErrorFull() instead")
    void blogPageNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blogPageNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esBlogPageNamemediaTypeExtensionGetSignalErrorFull() instead")
    void esBlogPageNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void esBlogPageNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esGlossaryPageNamemediaTypeExtensionGetSignalErrorFull() instead")
    void esGlossaryPageNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void esGlossaryPageNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esPageNamemediaTypeExtensionGetSignalErrorFull() instead")
    void esPageNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void esPageNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esQuestionPageNamemediaTypeExtensionGetSignalErrorFull() instead")
    void esQuestionPageNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void esQuestionPageNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use esStateNamemediaTypeExtensionGetSignalErrorFull() instead")
    void esStateNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void esStateNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use glossaryPageNamemediaTypeExtensionGetSignalErrorFull() instead")
    void glossaryPageNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void glossaryPageNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pageNamemediaTypeExtensionGetSignalErrorFull() instead")
    void pageNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pageNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionPageNamemediaTypeExtensionGetSignalErrorFull() instead")
    void questionPageNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionPageNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stateNamemediaTypeExtensionGetSignalErrorFull() instead")
    void stateNamemediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stateNamemediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
