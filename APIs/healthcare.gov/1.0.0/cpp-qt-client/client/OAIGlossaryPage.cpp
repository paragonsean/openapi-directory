/**
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlossaryPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlossaryPage::OAIGlossaryPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlossaryPage::OAIGlossaryPage() {
    this->initializeModel();
}

OAIGlossaryPage::~OAIGlossaryPage() {}

void OAIGlossaryPage::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_excerpt_isSet = false;
    m_excerpt_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGlossaryPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlossaryPage::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_excerpt_isValid = ::OpenAPI::fromJsonValue(m_excerpt, json[QString("excerpt")]);
    m_excerpt_isSet = !json[QString("excerpt")].isNull() && m_excerpt_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGlossaryPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlossaryPage::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_excerpt_isSet) {
        obj.insert(QString("excerpt"), ::OpenAPI::toJsonValue(m_excerpt));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_layout_isSet) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAIGlossaryPage::getCategories() const {
    return m_categories;
}
void OAIGlossaryPage::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIGlossaryPage::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIGlossaryPage::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIGlossaryPage::getContent() const {
    return m_content;
}
void OAIGlossaryPage::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGlossaryPage::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGlossaryPage::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIGlossaryPage::getDate() const {
    return m_date;
}
void OAIGlossaryPage::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGlossaryPage::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGlossaryPage::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIGlossaryPage::getExcerpt() const {
    return m_excerpt;
}
void OAIGlossaryPage::setExcerpt(const QString &excerpt) {
    m_excerpt = excerpt;
    m_excerpt_isSet = true;
}

bool OAIGlossaryPage::is_excerpt_Set() const{
    return m_excerpt_isSet;
}

bool OAIGlossaryPage::is_excerpt_Valid() const{
    return m_excerpt_isValid;
}

QString OAIGlossaryPage::getId() const {
    return m_id;
}
void OAIGlossaryPage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGlossaryPage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGlossaryPage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGlossaryPage::getLang() const {
    return m_lang;
}
void OAIGlossaryPage::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAIGlossaryPage::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAIGlossaryPage::is_lang_Valid() const{
    return m_lang_isValid;
}

QString OAIGlossaryPage::getLayout() const {
    return m_layout;
}
void OAIGlossaryPage::setLayout(const QString &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIGlossaryPage::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIGlossaryPage::is_layout_Valid() const{
    return m_layout_isValid;
}

QString OAIGlossaryPage::getPath() const {
    return m_path;
}
void OAIGlossaryPage::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGlossaryPage::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGlossaryPage::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIGlossaryPage::isPublished() const {
    return m_published;
}
void OAIGlossaryPage::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIGlossaryPage::is_published_Set() const{
    return m_published_isSet;
}

bool OAIGlossaryPage::is_published_Valid() const{
    return m_published_isValid;
}

double OAIGlossaryPage::getSort() const {
    return m_sort;
}
void OAIGlossaryPage::setSort(const double &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIGlossaryPage::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIGlossaryPage::is_sort_Valid() const{
    return m_sort_isValid;
}

QList<QString> OAIGlossaryPage::getTags() const {
    return m_tags;
}
void OAIGlossaryPage::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGlossaryPage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGlossaryPage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGlossaryPage::getTitle() const {
    return m_title;
}
void OAIGlossaryPage::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGlossaryPage::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGlossaryPage::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGlossaryPage::getUrl() const {
    return m_url;
}
void OAIGlossaryPage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGlossaryPage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGlossaryPage::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGlossaryPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlossaryPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
