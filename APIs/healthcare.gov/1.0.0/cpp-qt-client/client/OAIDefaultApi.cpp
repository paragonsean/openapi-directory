/**
 * Healthcare
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDefaultApi::~OAIDefaultApi() {
}

void OAIDefaultApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.healthcare.gov"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiArticlesmediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("apiArticlesmediaTypeExtensionGet", 0);
    _serverConfigs.insert("apiBlogmediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("apiBlogmediaTypeExtensionGet", 0);
    _serverConfigs.insert("apiGlossarymediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("apiGlossarymediaTypeExtensionGet", 0);
    _serverConfigs.insert("apiQuestionsmediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("apiQuestionsmediaTypeExtensionGet", 0);
    _serverConfigs.insert("apiStatesmediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("apiStatesmediaTypeExtensionGet", 0);
    _serverConfigs.insert("apiTopicsmediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("apiTopicsmediaTypeExtensionGet", 0);
    _serverConfigs.insert("blogPageNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("blogPageNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("esBlogPageNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("esBlogPageNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("esGlossaryPageNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("esGlossaryPageNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("esPageNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("esPageNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("esQuestionPageNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("esQuestionPageNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("esStateNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("esStateNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("glossaryPageNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("glossaryPageNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("pageNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("pageNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("questionPageNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("questionPageNamemediaTypeExtensionGet", 0);
    _serverConfigs.insert("stateNamemediaTypeExtensionGet", defaultConf);
    _serverIndices.insert("stateNamemediaTypeExtensionGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDefaultApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDefaultApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDefaultApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDefaultApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDefaultApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDefaultApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDefaultApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDefaultApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDefaultApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDefaultApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDefaultApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDefaultApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDefaultApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDefaultApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDefaultApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDefaultApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDefaultApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDefaultApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDefaultApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDefaultApi::apiArticlesmediaTypeExtensionGet(const QString &media_type_extension) {
    QString fullPath = QString(_serverConfigs["apiArticlesmediaTypeExtensionGet"][_serverIndices.value("apiArticlesmediaTypeExtensionGet")].URL()+"/api/articles{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiArticlesmediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiArticlesmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIArticlesList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiArticlesmediaTypeExtensionGetSignal(output);
        Q_EMIT apiArticlesmediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiArticlesmediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT apiArticlesmediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiArticlesmediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT apiArticlesmediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiBlogmediaTypeExtensionGet(const QString &media_type_extension) {
    QString fullPath = QString(_serverConfigs["apiBlogmediaTypeExtensionGet"][_serverIndices.value("apiBlogmediaTypeExtensionGet")].URL()+"/api/blog{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiBlogmediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiBlogmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBlogList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiBlogmediaTypeExtensionGetSignal(output);
        Q_EMIT apiBlogmediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiBlogmediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT apiBlogmediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiBlogmediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT apiBlogmediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiGlossarymediaTypeExtensionGet(const QString &media_type_extension) {
    QString fullPath = QString(_serverConfigs["apiGlossarymediaTypeExtensionGet"][_serverIndices.value("apiGlossarymediaTypeExtensionGet")].URL()+"/api/glossary{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiGlossarymediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiGlossarymediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGlossaryList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiGlossarymediaTypeExtensionGetSignal(output);
        Q_EMIT apiGlossarymediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiGlossarymediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT apiGlossarymediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiGlossarymediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT apiGlossarymediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiQuestionsmediaTypeExtensionGet(const QString &media_type_extension) {
    QString fullPath = QString(_serverConfigs["apiQuestionsmediaTypeExtensionGet"][_serverIndices.value("apiQuestionsmediaTypeExtensionGet")].URL()+"/api/questions{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiQuestionsmediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiQuestionsmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQuestionsList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiQuestionsmediaTypeExtensionGetSignal(output);
        Q_EMIT apiQuestionsmediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiQuestionsmediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT apiQuestionsmediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiQuestionsmediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT apiQuestionsmediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiStatesmediaTypeExtensionGet(const QString &media_type_extension) {
    QString fullPath = QString(_serverConfigs["apiStatesmediaTypeExtensionGet"][_serverIndices.value("apiStatesmediaTypeExtensionGet")].URL()+"/api/states{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiStatesmediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiStatesmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStatesList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiStatesmediaTypeExtensionGetSignal(output);
        Q_EMIT apiStatesmediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiStatesmediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT apiStatesmediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiStatesmediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT apiStatesmediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiTopicsmediaTypeExtensionGet(const QString &media_type_extension) {
    QString fullPath = QString(_serverConfigs["apiTopicsmediaTypeExtensionGet"][_serverIndices.value("apiTopicsmediaTypeExtensionGet")].URL()+"/api/topics{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiTopicsmediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiTopicsmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITopicsList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiTopicsmediaTypeExtensionGetSignal(output);
        Q_EMIT apiTopicsmediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiTopicsmediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT apiTopicsmediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiTopicsmediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT apiTopicsmediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::blogPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name) {
    QString fullPath = QString(_serverConfigs["blogPageNamemediaTypeExtensionGet"][_serverIndices.value("blogPageNamemediaTypeExtensionGet")].URL()+"/blog/{pageName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString page_namePathParam("{");
        page_namePathParam.append("pageName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageName"+pathSuffix : pathPrefix;
        fullPath.replace(page_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::blogPageNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::blogPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBlogPage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT blogPageNamemediaTypeExtensionGetSignal(output);
        Q_EMIT blogPageNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT blogPageNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT blogPageNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT blogPageNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT blogPageNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::esBlogPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name) {
    QString fullPath = QString(_serverConfigs["esBlogPageNamemediaTypeExtensionGet"][_serverIndices.value("esBlogPageNamemediaTypeExtensionGet")].URL()+"/es/blog/{pageName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString page_namePathParam("{");
        page_namePathParam.append("pageName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageName"+pathSuffix : pathPrefix;
        fullPath.replace(page_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::esBlogPageNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::esBlogPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBlogPage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT esBlogPageNamemediaTypeExtensionGetSignal(output);
        Q_EMIT esBlogPageNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT esBlogPageNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT esBlogPageNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT esBlogPageNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT esBlogPageNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::esGlossaryPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name) {
    QString fullPath = QString(_serverConfigs["esGlossaryPageNamemediaTypeExtensionGet"][_serverIndices.value("esGlossaryPageNamemediaTypeExtensionGet")].URL()+"/es/glossary/{pageName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString page_namePathParam("{");
        page_namePathParam.append("pageName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageName"+pathSuffix : pathPrefix;
        fullPath.replace(page_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::esGlossaryPageNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::esGlossaryPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGlossaryPage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT esGlossaryPageNamemediaTypeExtensionGetSignal(output);
        Q_EMIT esGlossaryPageNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT esGlossaryPageNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT esGlossaryPageNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT esGlossaryPageNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT esGlossaryPageNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::esPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name) {
    QString fullPath = QString(_serverConfigs["esPageNamemediaTypeExtensionGet"][_serverIndices.value("esPageNamemediaTypeExtensionGet")].URL()+"/es/{pageName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString page_namePathParam("{");
        page_namePathParam.append("pageName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageName"+pathSuffix : pathPrefix;
        fullPath.replace(page_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::esPageNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::esPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT esPageNamemediaTypeExtensionGetSignal(output);
        Q_EMIT esPageNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT esPageNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT esPageNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT esPageNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT esPageNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::esQuestionPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name) {
    QString fullPath = QString(_serverConfigs["esQuestionPageNamemediaTypeExtensionGet"][_serverIndices.value("esQuestionPageNamemediaTypeExtensionGet")].URL()+"/es/question/{pageName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString page_namePathParam("{");
        page_namePathParam.append("pageName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageName"+pathSuffix : pathPrefix;
        fullPath.replace(page_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::esQuestionPageNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::esQuestionPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQuestionPage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT esQuestionPageNamemediaTypeExtensionGetSignal(output);
        Q_EMIT esQuestionPageNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT esQuestionPageNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT esQuestionPageNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT esQuestionPageNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT esQuestionPageNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::esStateNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &state_name) {
    QString fullPath = QString(_serverConfigs["esStateNamemediaTypeExtensionGet"][_serverIndices.value("esStateNamemediaTypeExtensionGet")].URL()+"/es/{stateName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString state_namePathParam("{");
        state_namePathParam.append("stateName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stateName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stateName"+pathSuffix : pathPrefix;
        fullPath.replace(state_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(state_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::esStateNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::esStateNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStatePage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT esStateNamemediaTypeExtensionGetSignal(output);
        Q_EMIT esStateNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT esStateNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT esStateNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT esStateNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT esStateNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::glossaryPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name) {
    QString fullPath = QString(_serverConfigs["glossaryPageNamemediaTypeExtensionGet"][_serverIndices.value("glossaryPageNamemediaTypeExtensionGet")].URL()+"/glossary/{pageName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString page_namePathParam("{");
        page_namePathParam.append("pageName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageName"+pathSuffix : pathPrefix;
        fullPath.replace(page_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::glossaryPageNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::glossaryPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGlossaryPage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT glossaryPageNamemediaTypeExtensionGetSignal(output);
        Q_EMIT glossaryPageNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT glossaryPageNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT glossaryPageNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT glossaryPageNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT glossaryPageNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::pageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name) {
    QString fullPath = QString(_serverConfigs["pageNamemediaTypeExtensionGet"][_serverIndices.value("pageNamemediaTypeExtensionGet")].URL()+"/{pageName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString page_namePathParam("{");
        page_namePathParam.append("pageName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageName"+pathSuffix : pathPrefix;
        fullPath.replace(page_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::pageNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::pageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pageNamemediaTypeExtensionGetSignal(output);
        Q_EMIT pageNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pageNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT pageNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pageNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT pageNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::questionPageNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &page_name) {
    QString fullPath = QString(_serverConfigs["questionPageNamemediaTypeExtensionGet"][_serverIndices.value("questionPageNamemediaTypeExtensionGet")].URL()+"/question/{pageName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString page_namePathParam("{");
        page_namePathParam.append("pageName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageName"+pathSuffix : pathPrefix;
        fullPath.replace(page_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::questionPageNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::questionPageNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIQuestionPage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT questionPageNamemediaTypeExtensionGetSignal(output);
        Q_EMIT questionPageNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT questionPageNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT questionPageNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT questionPageNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT questionPageNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::stateNamemediaTypeExtensionGet(const QString &media_type_extension, const QString &state_name) {
    QString fullPath = QString(_serverConfigs["stateNamemediaTypeExtensionGet"][_serverIndices.value("stateNamemediaTypeExtensionGet")].URL()+"/{stateName}{mediaTypeExtension}");
    
    
    {
        QString media_type_extensionPathParam("{");
        media_type_extensionPathParam.append("mediaTypeExtension").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaTypeExtension", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaTypeExtension"+pathSuffix : pathPrefix;
        fullPath.replace(media_type_extensionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_type_extension)));
    }
    
    {
        QString state_namePathParam("{");
        state_namePathParam.append("stateName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stateName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stateName"+pathSuffix : pathPrefix;
        fullPath.replace(state_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(state_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::stateNamemediaTypeExtensionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::stateNamemediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStatePage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stateNamemediaTypeExtensionGetSignal(output);
        Q_EMIT stateNamemediaTypeExtensionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stateNamemediaTypeExtensionGetSignalE(output, error_type, error_str);
        Q_EMIT stateNamemediaTypeExtensionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stateNamemediaTypeExtensionGetSignalError(output, error_type, error_str);
        Q_EMIT stateNamemediaTypeExtensionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
