/*
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddUserResponse;
import org.openapitools.client.model.Allowance;
import java.math.BigDecimal;
import org.openapitools.client.model.Chorelist;
import org.openapitools.client.model.Model201Share;
import org.openapitools.client.model.Model405;
import org.openapitools.client.model.Model412;
import org.openapitools.client.model.Nodata;
import org.openapitools.client.model.Success;
import org.openapitools.client.model.Userlist;
import org.openapitools.client.model.Wishlist;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KKidApi
 */
@Disabled
public class KKidApiTest {

    private final KKidApi api = new KKidApi();

    /**
     * returns allowance balance and allowance transactions
     *
     * By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidAllowanceGetTest() throws ApiException {
        Integer kidUserId = null;
        Integer transactionDays = null;
        Allowance response = api.kkidAllowanceGet(kidUserId, transactionDays);
        // TODO: test validations
    }

    /**
     * adds new allowance transaction to kidUserID
     *
     * By passing in the appropriate options, you can add an allowance transaction to a given user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidAllowancePostTest() throws ApiException {
        Integer kidUserId = null;
        BigDecimal amount = null;
        String description = null;
        String transactionType = null;
        Success response = api.kkidAllowancePost(kidUserId, amount, description, transactionType);
        // TODO: test validations
    }

    /**
     * subscribes/unsubscribes/registers for apns push notifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidApnsPostTest() throws ApiException {
        Integer kidUserId = null;
        String tool = null;
        String token = null;
        String devicename = null;
        String title = null;
        String message = null;
        Integer badge = null;
        String sound = null;
        String section = null;
        String priority = null;
        Success response = api.kkidApnsPost(kidUserId, tool, token, devicename, title, message, badge, sound, section, priority);
        // TODO: test validations
    }

    /**
     * deletes chore for given chore id
     *
     * By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user&#39;s master account 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidChorelistDeleteTest() throws ApiException {
        Integer idChoreList = null;
        Success response = api.kkidChorelistDelete(idChoreList);
        // TODO: test validations
    }

    /**
     * returns list of chores for given user
     *
     * By passing in the appropriate options, you can search for chores assigned to a given user within the authenticated user&#39;s master account 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidChorelistGetTest() throws ApiException {
        String kidUsername = null;
        String day = null;
        String status = null;
        Boolean blockDash = null;
        Boolean optional = null;
        Boolean canSteal = null;
        Boolean includeCalendar = null;
        Chorelist response = api.kkidChorelistGet(kidUsername, day, status, blockDash, optional, canSteal, includeCalendar);
        // TODO: test validations
    }

    /**
     * adds chore for given user
     *
     * By passing in the appropriate options, you can add a chore to given kid username under authenticated user&#39;s master account 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidChorelistPostTest() throws ApiException {
        String kidUsername = null;
        String choreName = null;
        String day = null;
        String nfcTag = null;
        String status = null;
        String choreDescription = null;
        Integer choreNumber = null;
        Boolean blockDash = null;
        Boolean oneTime = null;
        Integer extraAllowance = null;
        Boolean optional = null;
        Boolean reassignable = null;
        Boolean canSteal = null;
        String startDate = null;
        String notes = null;
        Boolean requireObjectDetection = null;
        String objectDetectionTag = null;
        Boolean updatedByAutomation = null;
        String aiIcon = null;
        Boolean isCalendar = null;
        Success response = api.kkidChorelistPost(kidUsername, choreName, day, nfcTag, status, choreDescription, choreNumber, blockDash, oneTime, extraAllowance, optional, reassignable, canSteal, startDate, notes, requireObjectDetection, objectDetectionTag, updatedByAutomation, aiIcon, isCalendar);
        // TODO: test validations
    }

    /**
     * updates chore for given chore id
     *
     * By passing in the appropriate options, you can update the fields of a specific core within the authenticated user&#39;s master account 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidChorelistPutTest() throws ApiException {
        Integer idChoreList = null;
        String status = null;
        Boolean stolen = null;
        String stolenBy = null;
        String nfcTag = null;
        String notes = null;
        Integer latitude = null;
        Integer longitude = null;
        Integer altitude = null;
        Boolean updatedByAutomation = null;
        String whereDay = null;
        String whereStatus = null;
        String whereName = null;
        Success response = api.kkidChorelistPut(idChoreList, status, stolen, stolenBy, nfcTag, notes, latitude, longitude, altitude, updatedByAutomation, whereDay, whereStatus, whereName);
        // TODO: test validations
    }

    /**
     * adds new master user account
     *
     * By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidMasteruserPostTest() throws ApiException {
        String username = null;
        String password = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        AddUserResponse response = api.kkidMasteruserPost(username, password, email, firstName, lastName);
        // TODO: test validations
    }

    /**
     * Create Share Link
     *
     * Create share link
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidShareGetTest() throws ApiException {
        String linkUserId = null;
        String link = null;
        String scope = null;
        String scope2 = null;
        String scope3 = null;
        String scope4 = null;
        Model201Share response = api.kkidShareGet(linkUserId, link, scope, scope2, scope3, scope4);
        // TODO: test validations
    }

    /**
     * Gets user info
     *
     * Gets user info for authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidUserGetTest() throws ApiException {
        Boolean enableBool = null;
        Userlist response = api.kkidUserGet(enableBool);
        // TODO: test validations
    }

    /**
     * deletes user
     *
     * By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidUserlistDeleteTest() throws ApiException {
        Integer userID = null;
        api.kkidUserlistDelete(userID);
        // TODO: test validations
    }

    /**
     * returns list of users
     *
     * By passing in the appropriate options, you can search for users within the authenticated user&#39;s master account 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidUserlistGetTest() throws ApiException {
        Boolean isChild = null;
        Boolean isActive = null;
        Boolean isAdmin = null;
        Boolean enableAllowance = null;
        Boolean enableChores = null;
        Integer userID = null;
        String username = null;
        String email = null;
        Userlist response = api.kkidUserlistGet(isChild, isActive, isAdmin, enableAllowance, enableChores, userID, username, email);
        // TODO: test validations
    }

    /**
     * adds new child user
     *
     * By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidUserlistPostTest() throws ApiException {
        String username = null;
        String password = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        AddUserResponse response = api.kkidUserlistPost(username, password, email, firstName, lastName);
        // TODO: test validations
    }

    /**
     * updates user
     *
     * By passing in the appropriate variables this method updates the user&#39;s profile 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidUserlistPutTest() throws ApiException {
        Integer userID = null;
        String username = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        String emoji = null;
        String tmdbKey = null;
        Boolean enableWishList = null;
        Boolean enableChores = null;
        Boolean enableAllowance = null;
        Boolean enableAdmin = null;
        Boolean enableTmdb = null;
        Boolean enableObjectDetection = null;
        AddUserResponse response = api.kkidUserlistPut(userID, username, email, firstName, lastName, emoji, tmdbKey, enableWishList, enableChores, enableAllowance, enableAdmin, enableTmdb, enableObjectDetection);
        // TODO: test validations
    }

    /**
     * Delete item from wishlist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidWishlistDeleteTest() throws ApiException {
        Integer wishId = null;
        Success response = api.kkidWishlistDelete(wishId);
        // TODO: test validations
    }

    /**
     * Get list of wishlist items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidWishlistGetTest() throws ApiException {
        Integer kidUserId = null;
        Wishlist response = api.kkidWishlistGet(kidUserId);
        // TODO: test validations
    }

    /**
     * Add item to kid&#39;s wishlist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidWishlistPostTest() throws ApiException {
        Integer kidUserId = null;
        String title = null;
        String description = null;
        Integer priority = null;
        String link = null;
        Success response = api.kkidWishlistPost(kidUserId, title, description, priority, link);
        // TODO: test validations
    }

    /**
     * Update item on kid&#39;s wishlist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kkidWishlistPutTest() throws ApiException {
        Integer wishId = null;
        String title = null;
        String description = null;
        Integer priority = null;
        String link = null;
        Success response = api.kkidWishlistPut(wishId, title, description, priority, link);
        // TODO: test validations
    }

}
