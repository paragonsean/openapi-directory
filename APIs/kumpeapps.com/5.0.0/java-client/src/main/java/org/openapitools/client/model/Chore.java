/*
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * chore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:42.665983-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Chore {
  public static final String SERIALIZED_NAME_AI_ICON = "aiIcon";
  @SerializedName(SERIALIZED_NAME_AI_ICON)
  private String aiIcon;

  public static final String SERIALIZED_NAME_ALTITUDE = "altitude";
  @SerializedName(SERIALIZED_NAME_ALTITUDE)
  private Integer altitude;

  public static final String SERIALIZED_NAME_BLOCK_DASH = "blockDash";
  @SerializedName(SERIALIZED_NAME_BLOCK_DASH)
  private Boolean blockDash;

  public static final String SERIALIZED_NAME_CHORE_DESCRIPTION = "choreDescription";
  @SerializedName(SERIALIZED_NAME_CHORE_DESCRIPTION)
  private String choreDescription;

  public static final String SERIALIZED_NAME_CHORE_NAME = "choreName";
  @SerializedName(SERIALIZED_NAME_CHORE_NAME)
  private String choreName;

  public static final String SERIALIZED_NAME_CHORE_NUMBER = "choreNumber";
  @SerializedName(SERIALIZED_NAME_CHORE_NUMBER)
  private Integer choreNumber;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_EXTRA_ALLOWANCE = "extraAllowance";
  @SerializedName(SERIALIZED_NAME_EXTRA_ALLOWANCE)
  private Integer extraAllowance;

  public static final String SERIALIZED_NAME_ID_CHORE_LIST = "idChoreList";
  @SerializedName(SERIALIZED_NAME_ID_CHORE_LIST)
  private Integer idChoreList;

  public static final String SERIALIZED_NAME_IS_CALENDAR = "isCalendar";
  @SerializedName(SERIALIZED_NAME_IS_CALENDAR)
  private Boolean isCalendar;

  public static final String SERIALIZED_NAME_KID = "kid";
  @SerializedName(SERIALIZED_NAME_KID)
  private String kid;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Integer latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Integer longitude;

  public static final String SERIALIZED_NAME_NFC_TAG = "nfcTag";
  @SerializedName(SERIALIZED_NAME_NFC_TAG)
  private String nfcTag;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_ONE_TIME = "oneTime";
  @SerializedName(SERIALIZED_NAME_ONE_TIME)
  private Boolean oneTime;

  public static final String SERIALIZED_NAME_OPTIONAL = "optional";
  @SerializedName(SERIALIZED_NAME_OPTIONAL)
  private Boolean optional;

  public static final String SERIALIZED_NAME_REASSIGNABLE = "reassignable";
  @SerializedName(SERIALIZED_NAME_REASSIGNABLE)
  private Boolean reassignable;

  public static final String SERIALIZED_NAME_REASSIGNED = "reassigned";
  @SerializedName(SERIALIZED_NAME_REASSIGNED)
  private Boolean reassigned;

  public static final String SERIALIZED_NAME_REQUIRE_OBJECT_DETECTION = "requireObjectDetection";
  @SerializedName(SERIALIZED_NAME_REQUIRE_OBJECT_DETECTION)
  private String requireObjectDetection;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STOLEN = "stolen";
  @SerializedName(SERIALIZED_NAME_STOLEN)
  private Boolean stolen;

  public static final String SERIALIZED_NAME_STOLEN_BY = "stolenBy";
  @SerializedName(SERIALIZED_NAME_STOLEN_BY)
  private String stolenBy;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public Chore() {
  }

  public Chore aiIcon(String aiIcon) {
    this.aiIcon = aiIcon;
    return this;
  }

  /**
   * Get aiIcon
   * @return aiIcon
   */
  @javax.annotation.Nullable
  public String getAiIcon() {
    return aiIcon;
  }

  public void setAiIcon(String aiIcon) {
    this.aiIcon = aiIcon;
  }


  public Chore altitude(Integer altitude) {
    this.altitude = altitude;
    return this;
  }

  /**
   * Get altitude
   * @return altitude
   */
  @javax.annotation.Nullable
  public Integer getAltitude() {
    return altitude;
  }

  public void setAltitude(Integer altitude) {
    this.altitude = altitude;
  }


  public Chore blockDash(Boolean blockDash) {
    this.blockDash = blockDash;
    return this;
  }

  /**
   * Get blockDash
   * @return blockDash
   */
  @javax.annotation.Nullable
  public Boolean getBlockDash() {
    return blockDash;
  }

  public void setBlockDash(Boolean blockDash) {
    this.blockDash = blockDash;
  }


  public Chore choreDescription(String choreDescription) {
    this.choreDescription = choreDescription;
    return this;
  }

  /**
   * Get choreDescription
   * @return choreDescription
   */
  @javax.annotation.Nullable
  public String getChoreDescription() {
    return choreDescription;
  }

  public void setChoreDescription(String choreDescription) {
    this.choreDescription = choreDescription;
  }


  public Chore choreName(String choreName) {
    this.choreName = choreName;
    return this;
  }

  /**
   * Get choreName
   * @return choreName
   */
  @javax.annotation.Nullable
  public String getChoreName() {
    return choreName;
  }

  public void setChoreName(String choreName) {
    this.choreName = choreName;
  }


  public Chore choreNumber(Integer choreNumber) {
    this.choreNumber = choreNumber;
    return this;
  }

  /**
   * Get choreNumber
   * @return choreNumber
   */
  @javax.annotation.Nullable
  public Integer getChoreNumber() {
    return choreNumber;
  }

  public void setChoreNumber(Integer choreNumber) {
    this.choreNumber = choreNumber;
  }


  public Chore day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public Chore extraAllowance(Integer extraAllowance) {
    this.extraAllowance = extraAllowance;
    return this;
  }

  /**
   * Get extraAllowance
   * @return extraAllowance
   */
  @javax.annotation.Nullable
  public Integer getExtraAllowance() {
    return extraAllowance;
  }

  public void setExtraAllowance(Integer extraAllowance) {
    this.extraAllowance = extraAllowance;
  }


  public Chore idChoreList(Integer idChoreList) {
    this.idChoreList = idChoreList;
    return this;
  }

  /**
   * Get idChoreList
   * @return idChoreList
   */
  @javax.annotation.Nullable
  public Integer getIdChoreList() {
    return idChoreList;
  }

  public void setIdChoreList(Integer idChoreList) {
    this.idChoreList = idChoreList;
  }


  public Chore isCalendar(Boolean isCalendar) {
    this.isCalendar = isCalendar;
    return this;
  }

  /**
   * Get isCalendar
   * @return isCalendar
   */
  @javax.annotation.Nullable
  public Boolean getIsCalendar() {
    return isCalendar;
  }

  public void setIsCalendar(Boolean isCalendar) {
    this.isCalendar = isCalendar;
  }


  public Chore kid(String kid) {
    this.kid = kid;
    return this;
  }

  /**
   * Get kid
   * @return kid
   */
  @javax.annotation.Nullable
  public String getKid() {
    return kid;
  }

  public void setKid(String kid) {
    this.kid = kid;
  }


  public Chore latitude(Integer latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public Integer getLatitude() {
    return latitude;
  }

  public void setLatitude(Integer latitude) {
    this.latitude = latitude;
  }


  public Chore longitude(Integer longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public Integer getLongitude() {
    return longitude;
  }

  public void setLongitude(Integer longitude) {
    this.longitude = longitude;
  }


  public Chore nfcTag(String nfcTag) {
    this.nfcTag = nfcTag;
    return this;
  }

  /**
   * Get nfcTag
   * @return nfcTag
   */
  @javax.annotation.Nullable
  public String getNfcTag() {
    return nfcTag;
  }

  public void setNfcTag(String nfcTag) {
    this.nfcTag = nfcTag;
  }


  public Chore notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Chore oneTime(Boolean oneTime) {
    this.oneTime = oneTime;
    return this;
  }

  /**
   * Get oneTime
   * @return oneTime
   */
  @javax.annotation.Nullable
  public Boolean getOneTime() {
    return oneTime;
  }

  public void setOneTime(Boolean oneTime) {
    this.oneTime = oneTime;
  }


  public Chore optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

  /**
   * Get optional
   * @return optional
   */
  @javax.annotation.Nullable
  public Boolean getOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }


  public Chore reassignable(Boolean reassignable) {
    this.reassignable = reassignable;
    return this;
  }

  /**
   * Get reassignable
   * @return reassignable
   */
  @javax.annotation.Nullable
  public Boolean getReassignable() {
    return reassignable;
  }

  public void setReassignable(Boolean reassignable) {
    this.reassignable = reassignable;
  }


  public Chore reassigned(Boolean reassigned) {
    this.reassigned = reassigned;
    return this;
  }

  /**
   * Get reassigned
   * @return reassigned
   */
  @javax.annotation.Nullable
  public Boolean getReassigned() {
    return reassigned;
  }

  public void setReassigned(Boolean reassigned) {
    this.reassigned = reassigned;
  }


  public Chore requireObjectDetection(String requireObjectDetection) {
    this.requireObjectDetection = requireObjectDetection;
    return this;
  }

  /**
   * Get requireObjectDetection
   * @return requireObjectDetection
   */
  @javax.annotation.Nullable
  public String getRequireObjectDetection() {
    return requireObjectDetection;
  }

  public void setRequireObjectDetection(String requireObjectDetection) {
    this.requireObjectDetection = requireObjectDetection;
  }


  public Chore startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Chore status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Chore stolen(Boolean stolen) {
    this.stolen = stolen;
    return this;
  }

  /**
   * Get stolen
   * @return stolen
   */
  @javax.annotation.Nullable
  public Boolean getStolen() {
    return stolen;
  }

  public void setStolen(Boolean stolen) {
    this.stolen = stolen;
  }


  public Chore stolenBy(String stolenBy) {
    this.stolenBy = stolenBy;
    return this;
  }

  /**
   * Get stolenBy
   * @return stolenBy
   */
  @javax.annotation.Nullable
  public String getStolenBy() {
    return stolenBy;
  }

  public void setStolenBy(String stolenBy) {
    this.stolenBy = stolenBy;
  }


  public Chore updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Chore updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chore chore = (Chore) o;
    return Objects.equals(this.aiIcon, chore.aiIcon) &&
        Objects.equals(this.altitude, chore.altitude) &&
        Objects.equals(this.blockDash, chore.blockDash) &&
        Objects.equals(this.choreDescription, chore.choreDescription) &&
        Objects.equals(this.choreName, chore.choreName) &&
        Objects.equals(this.choreNumber, chore.choreNumber) &&
        Objects.equals(this.day, chore.day) &&
        Objects.equals(this.extraAllowance, chore.extraAllowance) &&
        Objects.equals(this.idChoreList, chore.idChoreList) &&
        Objects.equals(this.isCalendar, chore.isCalendar) &&
        Objects.equals(this.kid, chore.kid) &&
        Objects.equals(this.latitude, chore.latitude) &&
        Objects.equals(this.longitude, chore.longitude) &&
        Objects.equals(this.nfcTag, chore.nfcTag) &&
        Objects.equals(this.notes, chore.notes) &&
        Objects.equals(this.oneTime, chore.oneTime) &&
        Objects.equals(this.optional, chore.optional) &&
        Objects.equals(this.reassignable, chore.reassignable) &&
        Objects.equals(this.reassigned, chore.reassigned) &&
        Objects.equals(this.requireObjectDetection, chore.requireObjectDetection) &&
        Objects.equals(this.startDate, chore.startDate) &&
        Objects.equals(this.status, chore.status) &&
        Objects.equals(this.stolen, chore.stolen) &&
        Objects.equals(this.stolenBy, chore.stolenBy) &&
        Objects.equals(this.updated, chore.updated) &&
        Objects.equals(this.updatedBy, chore.updatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aiIcon, altitude, blockDash, choreDescription, choreName, choreNumber, day, extraAllowance, idChoreList, isCalendar, kid, latitude, longitude, nfcTag, notes, oneTime, optional, reassignable, reassigned, requireObjectDetection, startDate, status, stolen, stolenBy, updated, updatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chore {\n");
    sb.append("    aiIcon: ").append(toIndentedString(aiIcon)).append("\n");
    sb.append("    altitude: ").append(toIndentedString(altitude)).append("\n");
    sb.append("    blockDash: ").append(toIndentedString(blockDash)).append("\n");
    sb.append("    choreDescription: ").append(toIndentedString(choreDescription)).append("\n");
    sb.append("    choreName: ").append(toIndentedString(choreName)).append("\n");
    sb.append("    choreNumber: ").append(toIndentedString(choreNumber)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    extraAllowance: ").append(toIndentedString(extraAllowance)).append("\n");
    sb.append("    idChoreList: ").append(toIndentedString(idChoreList)).append("\n");
    sb.append("    isCalendar: ").append(toIndentedString(isCalendar)).append("\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    nfcTag: ").append(toIndentedString(nfcTag)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    oneTime: ").append(toIndentedString(oneTime)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    reassignable: ").append(toIndentedString(reassignable)).append("\n");
    sb.append("    reassigned: ").append(toIndentedString(reassigned)).append("\n");
    sb.append("    requireObjectDetection: ").append(toIndentedString(requireObjectDetection)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stolen: ").append(toIndentedString(stolen)).append("\n");
    sb.append("    stolenBy: ").append(toIndentedString(stolenBy)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aiIcon");
    openapiFields.add("altitude");
    openapiFields.add("blockDash");
    openapiFields.add("choreDescription");
    openapiFields.add("choreName");
    openapiFields.add("choreNumber");
    openapiFields.add("day");
    openapiFields.add("extraAllowance");
    openapiFields.add("idChoreList");
    openapiFields.add("isCalendar");
    openapiFields.add("kid");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("nfcTag");
    openapiFields.add("notes");
    openapiFields.add("oneTime");
    openapiFields.add("optional");
    openapiFields.add("reassignable");
    openapiFields.add("reassigned");
    openapiFields.add("requireObjectDetection");
    openapiFields.add("startDate");
    openapiFields.add("status");
    openapiFields.add("stolen");
    openapiFields.add("stolenBy");
    openapiFields.add("updated");
    openapiFields.add("updatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Chore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Chore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Chore is not found in the empty JSON string", Chore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Chore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Chore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aiIcon") != null && !jsonObj.get("aiIcon").isJsonNull()) && !jsonObj.get("aiIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aiIcon").toString()));
      }
      if ((jsonObj.get("choreDescription") != null && !jsonObj.get("choreDescription").isJsonNull()) && !jsonObj.get("choreDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `choreDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("choreDescription").toString()));
      }
      if ((jsonObj.get("choreName") != null && !jsonObj.get("choreName").isJsonNull()) && !jsonObj.get("choreName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `choreName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("choreName").toString()));
      }
      if ((jsonObj.get("day") != null && !jsonObj.get("day").isJsonNull()) && !jsonObj.get("day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day").toString()));
      }
      if ((jsonObj.get("kid") != null && !jsonObj.get("kid").isJsonNull()) && !jsonObj.get("kid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kid").toString()));
      }
      if ((jsonObj.get("nfcTag") != null && !jsonObj.get("nfcTag").isJsonNull()) && !jsonObj.get("nfcTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfcTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nfcTag").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("requireObjectDetection") != null && !jsonObj.get("requireObjectDetection").isJsonNull()) && !jsonObj.get("requireObjectDetection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requireObjectDetection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requireObjectDetection").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("stolenBy") != null && !jsonObj.get("stolenBy").isJsonNull()) && !jsonObj.get("stolenBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stolenBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stolenBy").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Chore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Chore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Chore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Chore.class));

       return (TypeAdapter<T>) new TypeAdapter<Chore>() {
           @Override
           public void write(JsonWriter out, Chore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Chore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Chore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Chore
   * @throws IOException if the JSON string is invalid with respect to Chore
   */
  public static Chore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Chore.class);
  }

  /**
   * Convert an instance of Chore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

