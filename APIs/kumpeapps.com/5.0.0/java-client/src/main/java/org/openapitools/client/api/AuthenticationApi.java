/*
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse201;
import org.openapitools.client.model.InlineResponse2011;
import org.openapitools.client.model.InlineResponse202;
import org.openapitools.client.model.Model403;
import org.openapitools.client.model.Model449;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appkeyPatch
     * @param appKey compromised app key (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appkeyPatchCall(String appKey, String comments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_key", appKey));
        }

        if (comments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comments", comments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call appkeyPatchValidateBeforeCall(String appKey, String comments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling appkeyPatch(Async)");
        }

        return appkeyPatchCall(appKey, comments, _callback);

    }

    /**
     * Compromise app key
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * @param appKey compromised app key (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public InlineResponse202 appkeyPatch(String appKey, String comments) throws ApiException {
        ApiResponse<InlineResponse202> localVarResp = appkeyPatchWithHttpInfo(appKey, comments);
        return localVarResp.getData();
    }

    /**
     * Compromise app key
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * @param appKey compromised app key (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InlineResponse202> appkeyPatchWithHttpInfo(String appKey, String comments) throws ApiException {
        okhttp3.Call localVarCall = appkeyPatchValidateBeforeCall(appKey, comments, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compromise app key (asynchronously)
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * @param appKey compromised app key (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appkeyPatchAsync(String appKey, String comments, final ApiCallback<InlineResponse202> _callback) throws ApiException {

        okhttp3.Call localVarCall = appkeyPatchValidateBeforeCall(appKey, comments, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appkeyPost
     * @param username Username assigned to your app (required)
     * @param password Password assigned to your app (required)
     * @param supportsYubikey App supports YubiKey OTP (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app key created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appkeyPostCall(String username, String password, Boolean supportsYubikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (supportsYubikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsYubikey", supportsYubikey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call appkeyPostValidateBeforeCall(String username, String password, Boolean supportsYubikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling appkeyPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling appkeyPost(Async)");
        }

        // verify the required parameter 'supportsYubikey' is set
        if (supportsYubikey == null) {
            throw new ApiException("Missing the required parameter 'supportsYubikey' when calling appkeyPost(Async)");
        }

        return appkeyPostCall(username, password, supportsYubikey, _callback);

    }

    /**
     * Request app key
     * Request a new app key by passing username and password for app account
     * @param username Username assigned to your app (required)
     * @param password Password assigned to your app (required)
     * @param supportsYubikey App supports YubiKey OTP (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app key created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public InlineResponse201 appkeyPost(String username, String password, Boolean supportsYubikey) throws ApiException {
        ApiResponse<InlineResponse201> localVarResp = appkeyPostWithHttpInfo(username, password, supportsYubikey);
        return localVarResp.getData();
    }

    /**
     * Request app key
     * Request a new app key by passing username and password for app account
     * @param username Username assigned to your app (required)
     * @param password Password assigned to your app (required)
     * @param supportsYubikey App supports YubiKey OTP (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app key created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InlineResponse201> appkeyPostWithHttpInfo(String username, String password, Boolean supportsYubikey) throws ApiException {
        okhttp3.Call localVarCall = appkeyPostValidateBeforeCall(username, password, supportsYubikey, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request app key (asynchronously)
     * Request a new app key by passing username and password for app account
     * @param username Username assigned to your app (required)
     * @param password Password assigned to your app (required)
     * @param supportsYubikey App supports YubiKey OTP (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app key created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appkeyPostAsync(String username, String password, Boolean supportsYubikey, final ApiCallback<InlineResponse201> _callback) throws ApiException {

        okhttp3.Call localVarCall = appkeyPostValidateBeforeCall(username, password, supportsYubikey, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appkeyPut
     * @param appKey app key to deactivate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appkeyPutCall(String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_key", appKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call appkeyPutValidateBeforeCall(String appKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling appkeyPut(Async)");
        }

        return appkeyPutCall(appKey, _callback);

    }

    /**
     * Deactivate app key
     * Pass your app key to deactivate the key
     * @param appKey app key to deactivate (required)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public InlineResponse202 appkeyPut(String appKey) throws ApiException {
        ApiResponse<InlineResponse202> localVarResp = appkeyPutWithHttpInfo(appKey);
        return localVarResp.getData();
    }

    /**
     * Deactivate app key
     * Pass your app key to deactivate the key
     * @param appKey app key to deactivate (required)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InlineResponse202> appkeyPutWithHttpInfo(String appKey) throws ApiException {
        okhttp3.Call localVarCall = appkeyPutValidateBeforeCall(appKey, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deactivate app key (asynchronously)
     * Pass your app key to deactivate the key
     * @param appKey app key to deactivate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appkeyPutAsync(String appKey, final ApiCallback<InlineResponse202> _callback) throws ApiException {

        okhttp3.Call localVarCall = appkeyPutValidateBeforeCall(appKey, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authAppkeyPatch
     * @param appKey compromised app key (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAppkeyPatchCall(String appKey, String comments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication/appkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_key", appKey));
        }

        if (comments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comments", comments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAppkeyPatchValidateBeforeCall(String appKey, String comments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling authAppkeyPatch(Async)");
        }

        return authAppkeyPatchCall(appKey, comments, _callback);

    }

    /**
     * Compromise app key
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * @param appKey compromised app key (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse202 authAppkeyPatch(String appKey, String comments) throws ApiException {
        ApiResponse<InlineResponse202> localVarResp = authAppkeyPatchWithHttpInfo(appKey, comments);
        return localVarResp.getData();
    }

    /**
     * Compromise app key
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * @param appKey compromised app key (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse202> authAppkeyPatchWithHttpInfo(String appKey, String comments) throws ApiException {
        okhttp3.Call localVarCall = authAppkeyPatchValidateBeforeCall(appKey, comments, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compromise app key (asynchronously)
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * @param appKey compromised app key (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAppkeyPatchAsync(String appKey, String comments, final ApiCallback<InlineResponse202> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAppkeyPatchValidateBeforeCall(appKey, comments, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authAppkeyPost
     * @param username Username assigned to your app (required)
     * @param password Password assigned to your app (required)
     * @param supportsYubikey App supports YubiKey OTP (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app key created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAppkeyPostCall(String username, String password, Boolean supportsYubikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication/appkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (supportsYubikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsYubikey", supportsYubikey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAppkeyPostValidateBeforeCall(String username, String password, Boolean supportsYubikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling authAppkeyPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling authAppkeyPost(Async)");
        }

        // verify the required parameter 'supportsYubikey' is set
        if (supportsYubikey == null) {
            throw new ApiException("Missing the required parameter 'supportsYubikey' when calling authAppkeyPost(Async)");
        }

        return authAppkeyPostCall(username, password, supportsYubikey, _callback);

    }

    /**
     * Request app key
     * Request a new app key by passing username and password for app account
     * @param username Username assigned to your app (required)
     * @param password Password assigned to your app (required)
     * @param supportsYubikey App supports YubiKey OTP (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app key created </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse201 authAppkeyPost(String username, String password, Boolean supportsYubikey) throws ApiException {
        ApiResponse<InlineResponse201> localVarResp = authAppkeyPostWithHttpInfo(username, password, supportsYubikey);
        return localVarResp.getData();
    }

    /**
     * Request app key
     * Request a new app key by passing username and password for app account
     * @param username Username assigned to your app (required)
     * @param password Password assigned to your app (required)
     * @param supportsYubikey App supports YubiKey OTP (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app key created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse201> authAppkeyPostWithHttpInfo(String username, String password, Boolean supportsYubikey) throws ApiException {
        okhttp3.Call localVarCall = authAppkeyPostValidateBeforeCall(username, password, supportsYubikey, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request app key (asynchronously)
     * Request a new app key by passing username and password for app account
     * @param username Username assigned to your app (required)
     * @param password Password assigned to your app (required)
     * @param supportsYubikey App supports YubiKey OTP (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app key created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAppkeyPostAsync(String username, String password, Boolean supportsYubikey, final ApiCallback<InlineResponse201> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAppkeyPostValidateBeforeCall(username, password, supportsYubikey, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authAppkeyPut
     * @param appKey app key to deactivate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAppkeyPutCall(String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication/appkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_key", appKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAppkeyPutValidateBeforeCall(String appKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling authAppkeyPut(Async)");
        }

        return authAppkeyPutCall(appKey, _callback);

    }

    /**
     * Deactivate app key
     * Pass your app key to deactivate the key
     * @param appKey app key to deactivate (required)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse202 authAppkeyPut(String appKey) throws ApiException {
        ApiResponse<InlineResponse202> localVarResp = authAppkeyPutWithHttpInfo(appKey);
        return localVarResp.getData();
    }

    /**
     * Deactivate app key
     * Pass your app key to deactivate the key
     * @param appKey app key to deactivate (required)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse202> authAppkeyPutWithHttpInfo(String appKey) throws ApiException {
        okhttp3.Call localVarCall = authAppkeyPutValidateBeforeCall(appKey, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deactivate app key (asynchronously)
     * Pass your app key to deactivate the key
     * @param appKey app key to deactivate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> App key deactivated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAppkeyPutAsync(String appKey, final ApiCallback<InlineResponse202> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAppkeyPutValidateBeforeCall(appKey, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authAuthkeyGet
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param deviceName User&#39;s device name (optional)
     * @param identifierForVendor identifierForVendor for User&#39;s Device (if app is iOS) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAuthkeyGetCall(String username, String password, String otp, String deviceName, String identifierForVendor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication/authkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (otp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otp", otp));
        }

        if (deviceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceName", deviceName));
        }

        if (identifierForVendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifierForVendor", identifierForVendor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAuthkeyGetValidateBeforeCall(String username, String password, String otp, String deviceName, String identifierForVendor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling authAuthkeyGet(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling authAuthkeyGet(Async)");
        }

        return authAuthkeyGetCall(username, password, otp, deviceName, identifierForVendor, _callback);

    }

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param deviceName User&#39;s device name (optional)
     * @param identifierForVendor identifierForVendor for User&#39;s Device (if app is iOS) (optional)
     * @return InlineResponse2011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2011 authAuthkeyGet(String username, String password, String otp, String deviceName, String identifierForVendor) throws ApiException {
        ApiResponse<InlineResponse2011> localVarResp = authAuthkeyGetWithHttpInfo(username, password, otp, deviceName, identifierForVendor);
        return localVarResp.getData();
    }

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param deviceName User&#39;s device name (optional)
     * @param identifierForVendor identifierForVendor for User&#39;s Device (if app is iOS) (optional)
     * @return ApiResponse&lt;InlineResponse2011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2011> authAuthkeyGetWithHttpInfo(String username, String password, String otp, String deviceName, String identifierForVendor) throws ApiException {
        okhttp3.Call localVarCall = authAuthkeyGetValidateBeforeCall(username, password, otp, deviceName, identifierForVendor, null);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request auth key for user (login user) (asynchronously)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param deviceName User&#39;s device name (optional)
     * @param identifierForVendor identifierForVendor for User&#39;s Device (if app is iOS) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAuthkeyGetAsync(String username, String password, String otp, String deviceName, String identifierForVendor, final ApiCallback<InlineResponse2011> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAuthkeyGetValidateBeforeCall(username, password, otp, deviceName, identifierForVendor, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authAuthkeyPatch
     * @param authKey auth key to mark as compromised (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Auth key marked as compromised and locked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAuthkeyPatchCall(String authKey, String comments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication/authkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key", authKey));
        }

        if (comments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comments", comments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAuthkeyPatchValidateBeforeCall(String authKey, String comments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authKey' is set
        if (authKey == null) {
            throw new ApiException("Missing the required parameter 'authKey' when calling authAuthkeyPatch(Async)");
        }

        return authAuthkeyPatchCall(authKey, comments, _callback);

    }

    /**
     * Compromise auth key
     * Mark user auth key as compromised
     * @param authKey auth key to mark as compromised (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Auth key marked as compromised and locked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse202 authAuthkeyPatch(String authKey, String comments) throws ApiException {
        ApiResponse<InlineResponse202> localVarResp = authAuthkeyPatchWithHttpInfo(authKey, comments);
        return localVarResp.getData();
    }

    /**
     * Compromise auth key
     * Mark user auth key as compromised
     * @param authKey auth key to mark as compromised (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Auth key marked as compromised and locked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse202> authAuthkeyPatchWithHttpInfo(String authKey, String comments) throws ApiException {
        okhttp3.Call localVarCall = authAuthkeyPatchValidateBeforeCall(authKey, comments, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compromise auth key (asynchronously)
     * Mark user auth key as compromised
     * @param authKey auth key to mark as compromised (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Auth key marked as compromised and locked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAuthkeyPatchAsync(String authKey, String comments, final ApiCallback<InlineResponse202> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAuthkeyPatchValidateBeforeCall(authKey, comments, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authAuthkeyPost
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAuthkeyPostCall(String username, String password, String otp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication/authkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (otp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otp", otp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAuthkeyPostValidateBeforeCall(String username, String password, String otp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling authAuthkeyPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling authAuthkeyPost(Async)");
        }

        return authAuthkeyPostCall(username, password, otp, _callback);

    }

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @return InlineResponse2011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2011 authAuthkeyPost(String username, String password, String otp) throws ApiException {
        ApiResponse<InlineResponse2011> localVarResp = authAuthkeyPostWithHttpInfo(username, password, otp);
        return localVarResp.getData();
    }

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @return ApiResponse&lt;InlineResponse2011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2011> authAuthkeyPostWithHttpInfo(String username, String password, String otp) throws ApiException {
        okhttp3.Call localVarCall = authAuthkeyPostValidateBeforeCall(username, password, otp, null);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request auth key for user (login user) (asynchronously)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAuthkeyPostAsync(String username, String password, String otp, final ApiCallback<InlineResponse2011> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAuthkeyPostValidateBeforeCall(username, password, otp, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authAuthkeyPut
     * @param authKey auth key to logout (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAuthkeyPutCall(String authKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication/authkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key", authKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAuthkeyPutValidateBeforeCall(String authKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authKey' is set
        if (authKey == null) {
            throw new ApiException("Missing the required parameter 'authKey' when calling authAuthkeyPut(Async)");
        }

        return authAuthkeyPutCall(authKey, _callback);

    }

    /**
     * Deactivate auth key (logout)
     * Deactivate auth key for user logging them out of your application
     * @param authKey auth key to logout (required)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse202 authAuthkeyPut(String authKey) throws ApiException {
        ApiResponse<InlineResponse202> localVarResp = authAuthkeyPutWithHttpInfo(authKey);
        return localVarResp.getData();
    }

    /**
     * Deactivate auth key (logout)
     * Deactivate auth key for user logging them out of your application
     * @param authKey auth key to logout (required)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse202> authAuthkeyPutWithHttpInfo(String authKey) throws ApiException {
        okhttp3.Call localVarCall = authAuthkeyPutValidateBeforeCall(authKey, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deactivate auth key (logout) (asynchronously)
     * Deactivate auth key for user logging them out of your application
     * @param authKey auth key to logout (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAuthkeyPutAsync(String authKey, final ApiCallback<InlineResponse202> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAuthkeyPutValidateBeforeCall(authKey, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authVerifyotpGet
     * @param otp YubiKey OTP code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey/AuthKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authVerifyotpGetCall(String otp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authentication/verifyotp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (otp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otp", otp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authVerifyotpGetValidateBeforeCall(String otp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'otp' is set
        if (otp == null) {
            throw new ApiException("Missing the required parameter 'otp' when calling authVerifyotpGet(Async)");
        }

        return authVerifyotpGetCall(otp, _callback);

    }

    /**
     * Verifies YubiKey OTP for authenticated user
     * Verifies YubiKey OTP for authenticated user
     * @param otp YubiKey OTP code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey/AuthKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public void authVerifyotpGet(String otp) throws ApiException {
        authVerifyotpGetWithHttpInfo(otp);
    }

    /**
     * Verifies YubiKey OTP for authenticated user
     * Verifies YubiKey OTP for authenticated user
     * @param otp YubiKey OTP code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey/AuthKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authVerifyotpGetWithHttpInfo(String otp) throws ApiException {
        okhttp3.Call localVarCall = authVerifyotpGetValidateBeforeCall(otp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verifies YubiKey OTP for authenticated user (asynchronously)
     * Verifies YubiKey OTP for authenticated user
     * @param otp YubiKey OTP code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey/AuthKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authVerifyotpGetAsync(String otp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authVerifyotpGetValidateBeforeCall(otp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authkeyGet
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call authkeyGetCall(String username, String password, String otp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (otp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otp", otp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call authkeyGetValidateBeforeCall(String username, String password, String otp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling authkeyGet(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling authkeyGet(Async)");
        }

        return authkeyGetCall(username, password, otp, _callback);

    }

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @return InlineResponse2011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public InlineResponse2011 authkeyGet(String username, String password, String otp) throws ApiException {
        ApiResponse<InlineResponse2011> localVarResp = authkeyGetWithHttpInfo(username, password, otp);
        return localVarResp.getData();
    }

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @return ApiResponse&lt;InlineResponse2011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InlineResponse2011> authkeyGetWithHttpInfo(String username, String password, String otp) throws ApiException {
        okhttp3.Call localVarCall = authkeyGetValidateBeforeCall(username, password, otp, null);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request auth key for user (login user) (asynchronously)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call authkeyGetAsync(String username, String password, String otp, final ApiCallback<InlineResponse2011> _callback) throws ApiException {

        okhttp3.Call localVarCall = authkeyGetValidateBeforeCall(username, password, otp, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authkeyPatch
     * @param authKey auth key to mark as compromised (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Auth key marked as compromised and locked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call authkeyPatchCall(String authKey, String comments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key", authKey));
        }

        if (comments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comments", comments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call authkeyPatchValidateBeforeCall(String authKey, String comments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authKey' is set
        if (authKey == null) {
            throw new ApiException("Missing the required parameter 'authKey' when calling authkeyPatch(Async)");
        }

        return authkeyPatchCall(authKey, comments, _callback);

    }

    /**
     * Compromise auth key
     * Mark user auth key as compromised
     * @param authKey auth key to mark as compromised (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Auth key marked as compromised and locked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public InlineResponse202 authkeyPatch(String authKey, String comments) throws ApiException {
        ApiResponse<InlineResponse202> localVarResp = authkeyPatchWithHttpInfo(authKey, comments);
        return localVarResp.getData();
    }

    /**
     * Compromise auth key
     * Mark user auth key as compromised
     * @param authKey auth key to mark as compromised (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Auth key marked as compromised and locked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InlineResponse202> authkeyPatchWithHttpInfo(String authKey, String comments) throws ApiException {
        okhttp3.Call localVarCall = authkeyPatchValidateBeforeCall(authKey, comments, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compromise auth key (asynchronously)
     * Mark user auth key as compromised
     * @param authKey auth key to mark as compromised (required)
     * @param comments Comments (like how was this compromised) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Auth key marked as compromised and locked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call authkeyPatchAsync(String authKey, String comments, final ApiCallback<InlineResponse202> _callback) throws ApiException {

        okhttp3.Call localVarCall = authkeyPatchValidateBeforeCall(authKey, comments, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authkeyPost
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call authkeyPostCall(String username, String password, String otp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (otp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otp", otp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call authkeyPostValidateBeforeCall(String username, String password, String otp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling authkeyPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling authkeyPost(Async)");
        }

        return authkeyPostCall(username, password, otp, _callback);

    }

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @return InlineResponse2011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public InlineResponse2011 authkeyPost(String username, String password, String otp) throws ApiException {
        ApiResponse<InlineResponse2011> localVarResp = authkeyPostWithHttpInfo(username, password, otp);
        return localVarResp.getData();
    }

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @return ApiResponse&lt;InlineResponse2011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InlineResponse2011> authkeyPostWithHttpInfo(String username, String password, String otp) throws ApiException {
        okhttp3.Call localVarCall = authkeyPostValidateBeforeCall(username, password, otp, null);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request auth key for user (login user) (asynchronously)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param username Authenticated username (required)
     * @param password Authenticated password (required)
     * @param otp YubiKey OTP (if configured for user) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Authenticated Sucessfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Denied </td><td>  -  </td></tr>
        <tr><td> 449 </td><td> OTP required but not supplied. Please resubmit request with OTP </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call authkeyPostAsync(String username, String password, String otp, final ApiCallback<InlineResponse2011> _callback) throws ApiException {

        okhttp3.Call localVarCall = authkeyPostValidateBeforeCall(username, password, otp, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authkeyPut
     * @param authKey auth key to logout (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call authkeyPutCall(String authKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_key", authKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call authkeyPutValidateBeforeCall(String authKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authKey' is set
        if (authKey == null) {
            throw new ApiException("Missing the required parameter 'authKey' when calling authkeyPut(Async)");
        }

        return authkeyPutCall(authKey, _callback);

    }

    /**
     * Deactivate auth key (logout)
     * Deactivate auth key for user logging them out of your application
     * @param authKey auth key to logout (required)
     * @return InlineResponse202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public InlineResponse202 authkeyPut(String authKey) throws ApiException {
        ApiResponse<InlineResponse202> localVarResp = authkeyPutWithHttpInfo(authKey);
        return localVarResp.getData();
    }

    /**
     * Deactivate auth key (logout)
     * Deactivate auth key for user logging them out of your application
     * @param authKey auth key to logout (required)
     * @return ApiResponse&lt;InlineResponse202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InlineResponse202> authkeyPutWithHttpInfo(String authKey) throws ApiException {
        okhttp3.Call localVarCall = authkeyPutValidateBeforeCall(authKey, null);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deactivate auth key (logout) (asynchronously)
     * Deactivate auth key for user logging them out of your application
     * @param authKey auth key to logout (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid/Locked/Blocked/Compromised AppKey </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call authkeyPutAsync(String authKey, final ApiCallback<InlineResponse202> _callback) throws ApiException {

        okhttp3.Call localVarCall = authkeyPutValidateBeforeCall(authKey, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse202>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
