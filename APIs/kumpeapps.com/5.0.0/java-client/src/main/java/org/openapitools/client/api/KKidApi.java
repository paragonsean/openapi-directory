/*
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddUserResponse;
import org.openapitools.client.model.Allowance;
import java.math.BigDecimal;
import org.openapitools.client.model.Chorelist;
import org.openapitools.client.model.Model201Share;
import org.openapitools.client.model.Model405;
import org.openapitools.client.model.Model412;
import org.openapitools.client.model.Nodata;
import org.openapitools.client.model.Success;
import org.openapitools.client.model.Userlist;
import org.openapitools.client.model.Wishlist;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KKidApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KKidApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KKidApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for kkidAllowanceGet
     * @param kidUserId userID of the kid (required)
     * @param transactionDays number of days you wish to search allowance transactions (default is 90 days) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidAllowanceGetCall(Integer kidUserId, Integer transactionDays, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/allowance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kidUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kidUserId", kidUserId));
        }

        if (transactionDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionDays", transactionDays));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidAllowanceGetValidateBeforeCall(Integer kidUserId, Integer transactionDays, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kidUserId' is set
        if (kidUserId == null) {
            throw new ApiException("Missing the required parameter 'kidUserId' when calling kkidAllowanceGet(Async)");
        }

        return kkidAllowanceGetCall(kidUserId, transactionDays, _callback);

    }

    /**
     * returns allowance balance and allowance transactions
     * By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user. 
     * @param kidUserId userID of the kid (required)
     * @param transactionDays number of days you wish to search allowance transactions (default is 90 days) (optional)
     * @return Allowance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public Allowance kkidAllowanceGet(Integer kidUserId, Integer transactionDays) throws ApiException {
        ApiResponse<Allowance> localVarResp = kkidAllowanceGetWithHttpInfo(kidUserId, transactionDays);
        return localVarResp.getData();
    }

    /**
     * returns allowance balance and allowance transactions
     * By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user. 
     * @param kidUserId userID of the kid (required)
     * @param transactionDays number of days you wish to search allowance transactions (default is 90 days) (optional)
     * @return ApiResponse&lt;Allowance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Allowance> kkidAllowanceGetWithHttpInfo(Integer kidUserId, Integer transactionDays) throws ApiException {
        okhttp3.Call localVarCall = kkidAllowanceGetValidateBeforeCall(kidUserId, transactionDays, null);
        Type localVarReturnType = new TypeToken<Allowance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns allowance balance and allowance transactions (asynchronously)
     * By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user. 
     * @param kidUserId userID of the kid (required)
     * @param transactionDays number of days you wish to search allowance transactions (default is 90 days) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidAllowanceGetAsync(Integer kidUserId, Integer transactionDays, final ApiCallback<Allowance> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidAllowanceGetValidateBeforeCall(kidUserId, transactionDays, _callback);
        Type localVarReturnType = new TypeToken<Allowance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidAllowancePost
     * @param kidUserId userID of the kid (required)
     * @param amount amount you wish to Add/Subtract (subtract value should be a negative value) (required)
     * @param description Description (reason) of allowance transaction (required)
     * @param transactionType Transaction Type (Add/Subtract) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidAllowancePostCall(Integer kidUserId, BigDecimal amount, String description, String transactionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/allowance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kidUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kidUserId", kidUserId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (transactionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionType", transactionType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidAllowancePostValidateBeforeCall(Integer kidUserId, BigDecimal amount, String description, String transactionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kidUserId' is set
        if (kidUserId == null) {
            throw new ApiException("Missing the required parameter 'kidUserId' when calling kkidAllowancePost(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling kkidAllowancePost(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling kkidAllowancePost(Async)");
        }

        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling kkidAllowancePost(Async)");
        }

        return kkidAllowancePostCall(kidUserId, amount, description, transactionType, _callback);

    }

    /**
     * adds new allowance transaction to kidUserID
     * By passing in the appropriate options, you can add an allowance transaction to a given user. 
     * @param kidUserId userID of the kid (required)
     * @param amount amount you wish to Add/Subtract (subtract value should be a negative value) (required)
     * @param description Description (reason) of allowance transaction (required)
     * @param transactionType Transaction Type (Add/Subtract) (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public Success kkidAllowancePost(Integer kidUserId, BigDecimal amount, String description, String transactionType) throws ApiException {
        ApiResponse<Success> localVarResp = kkidAllowancePostWithHttpInfo(kidUserId, amount, description, transactionType);
        return localVarResp.getData();
    }

    /**
     * adds new allowance transaction to kidUserID
     * By passing in the appropriate options, you can add an allowance transaction to a given user. 
     * @param kidUserId userID of the kid (required)
     * @param amount amount you wish to Add/Subtract (subtract value should be a negative value) (required)
     * @param description Description (reason) of allowance transaction (required)
     * @param transactionType Transaction Type (Add/Subtract) (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> kkidAllowancePostWithHttpInfo(Integer kidUserId, BigDecimal amount, String description, String transactionType) throws ApiException {
        okhttp3.Call localVarCall = kkidAllowancePostValidateBeforeCall(kidUserId, amount, description, transactionType, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * adds new allowance transaction to kidUserID (asynchronously)
     * By passing in the appropriate options, you can add an allowance transaction to a given user. 
     * @param kidUserId userID of the kid (required)
     * @param amount amount you wish to Add/Subtract (subtract value should be a negative value) (required)
     * @param description Description (reason) of allowance transaction (required)
     * @param transactionType Transaction Type (Add/Subtract) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidAllowancePostAsync(Integer kidUserId, BigDecimal amount, String description, String transactionType, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidAllowancePostValidateBeforeCall(kidUserId, amount, description, transactionType, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidApnsPost
     * @param kidUserId userID of the kid (required)
     * @param tool tool you wish to talk to (required)
     * @param token device APNS token (required for register) (optional)
     * @param devicename Name of device to associate to token (required for register) (optional)
     * @param title title of APNS message (required for send) (optional)
     * @param message APNS message body (required for send) (optional)
     * @param badge Number for badge icon (optional for send) (optional)
     * @param sound Name of sound file to play for send notification (optional for send) (optional)
     * @param section Notification section name (required for send/subscribe/unsubscribe) (optional)
     * @param priority Notification section name (optional for send, default is active) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidApnsPostCall(Integer kidUserId, String tool, String token, String devicename, String title, String message, Integer badge, String sound, String section, String priority, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/apns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kidUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kidUserId", kidUserId));
        }

        if (tool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tool", tool));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (devicename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicename", devicename));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        if (badge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("badge", badge));
        }

        if (sound != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sound", sound));
        }

        if (section != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("section", section));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidApnsPostValidateBeforeCall(Integer kidUserId, String tool, String token, String devicename, String title, String message, Integer badge, String sound, String section, String priority, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kidUserId' is set
        if (kidUserId == null) {
            throw new ApiException("Missing the required parameter 'kidUserId' when calling kkidApnsPost(Async)");
        }

        // verify the required parameter 'tool' is set
        if (tool == null) {
            throw new ApiException("Missing the required parameter 'tool' when calling kkidApnsPost(Async)");
        }

        return kkidApnsPostCall(kidUserId, tool, token, devicename, title, message, badge, sound, section, priority, _callback);

    }

    /**
     * subscribes/unsubscribes/registers for apns push notifications
     * 
     * @param kidUserId userID of the kid (required)
     * @param tool tool you wish to talk to (required)
     * @param token device APNS token (required for register) (optional)
     * @param devicename Name of device to associate to token (required for register) (optional)
     * @param title title of APNS message (required for send) (optional)
     * @param message APNS message body (required for send) (optional)
     * @param badge Number for badge icon (optional for send) (optional)
     * @param sound Name of sound file to play for send notification (optional for send) (optional)
     * @param section Notification section name (required for send/subscribe/unsubscribe) (optional)
     * @param priority Notification section name (optional for send, default is active) (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public Success kkidApnsPost(Integer kidUserId, String tool, String token, String devicename, String title, String message, Integer badge, String sound, String section, String priority) throws ApiException {
        ApiResponse<Success> localVarResp = kkidApnsPostWithHttpInfo(kidUserId, tool, token, devicename, title, message, badge, sound, section, priority);
        return localVarResp.getData();
    }

    /**
     * subscribes/unsubscribes/registers for apns push notifications
     * 
     * @param kidUserId userID of the kid (required)
     * @param tool tool you wish to talk to (required)
     * @param token device APNS token (required for register) (optional)
     * @param devicename Name of device to associate to token (required for register) (optional)
     * @param title title of APNS message (required for send) (optional)
     * @param message APNS message body (required for send) (optional)
     * @param badge Number for badge icon (optional for send) (optional)
     * @param sound Name of sound file to play for send notification (optional for send) (optional)
     * @param section Notification section name (required for send/subscribe/unsubscribe) (optional)
     * @param priority Notification section name (optional for send, default is active) (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> kkidApnsPostWithHttpInfo(Integer kidUserId, String tool, String token, String devicename, String title, String message, Integer badge, String sound, String section, String priority) throws ApiException {
        okhttp3.Call localVarCall = kkidApnsPostValidateBeforeCall(kidUserId, tool, token, devicename, title, message, badge, sound, section, priority, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * subscribes/unsubscribes/registers for apns push notifications (asynchronously)
     * 
     * @param kidUserId userID of the kid (required)
     * @param tool tool you wish to talk to (required)
     * @param token device APNS token (required for register) (optional)
     * @param devicename Name of device to associate to token (required for register) (optional)
     * @param title title of APNS message (required for send) (optional)
     * @param message APNS message body (required for send) (optional)
     * @param badge Number for badge icon (optional for send) (optional)
     * @param sound Name of sound file to play for send notification (optional for send) (optional)
     * @param section Notification section name (required for send/subscribe/unsubscribe) (optional)
     * @param priority Notification section name (optional for send, default is active) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidApnsPostAsync(Integer kidUserId, String tool, String token, String devicename, String title, String message, Integer badge, String sound, String section, String priority, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidApnsPostValidateBeforeCall(kidUserId, tool, token, devicename, title, message, badge, sound, section, priority, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidChorelistDelete
     * @param idChoreList id of the chore you wish to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletion successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict- idChoreList parameter was not supplied or is blank </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidChorelistDeleteCall(Integer idChoreList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/chorelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idChoreList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idChoreList", idChoreList));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidChorelistDeleteValidateBeforeCall(Integer idChoreList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChoreList' is set
        if (idChoreList == null) {
            throw new ApiException("Missing the required parameter 'idChoreList' when calling kkidChorelistDelete(Async)");
        }

        return kkidChorelistDeleteCall(idChoreList, _callback);

    }

    /**
     * deletes chore for given chore id
     * By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user&#39;s master account 
     * @param idChoreList id of the chore you wish to delete (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletion successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict- idChoreList parameter was not supplied or is blank </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public Success kkidChorelistDelete(Integer idChoreList) throws ApiException {
        ApiResponse<Success> localVarResp = kkidChorelistDeleteWithHttpInfo(idChoreList);
        return localVarResp.getData();
    }

    /**
     * deletes chore for given chore id
     * By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user&#39;s master account 
     * @param idChoreList id of the chore you wish to delete (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletion successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict- idChoreList parameter was not supplied or is blank </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> kkidChorelistDeleteWithHttpInfo(Integer idChoreList) throws ApiException {
        okhttp3.Call localVarCall = kkidChorelistDeleteValidateBeforeCall(idChoreList, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deletes chore for given chore id (asynchronously)
     * By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user&#39;s master account 
     * @param idChoreList id of the chore you wish to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletion successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict- idChoreList parameter was not supplied or is blank </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidChorelistDeleteAsync(Integer idChoreList, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidChorelistDeleteValidateBeforeCall(idChoreList, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidChorelistGet
     * @param kidUsername Username of kid you wish to search (optional)
     * @param day Day of week for chores (Weekly for weekly chores) (optional)
     * @param status Status of Chore to search (optional)
     * @param blockDash Filter results by blockDash parameter (optional)
     * @param optional Filter results by optional parameter (optional)
     * @param canSteal Filter results by canSteal parameter (optional)
     * @param includeCalendar include calendar notations (default is false) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidChorelistGetCall(String kidUsername, String day, String status, Boolean blockDash, Boolean optional, Boolean canSteal, Boolean includeCalendar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/chorelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kidUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kidUsername", kidUsername));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (blockDash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockDash", blockDash));
        }

        if (optional != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optional", optional));
        }

        if (canSteal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canSteal", canSteal));
        }

        if (includeCalendar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCalendar", includeCalendar));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidChorelistGetValidateBeforeCall(String kidUsername, String day, String status, Boolean blockDash, Boolean optional, Boolean canSteal, Boolean includeCalendar, final ApiCallback _callback) throws ApiException {
        return kkidChorelistGetCall(kidUsername, day, status, blockDash, optional, canSteal, includeCalendar, _callback);

    }

    /**
     * returns list of chores for given user
     * By passing in the appropriate options, you can search for chores assigned to a given user within the authenticated user&#39;s master account 
     * @param kidUsername Username of kid you wish to search (optional)
     * @param day Day of week for chores (Weekly for weekly chores) (optional)
     * @param status Status of Chore to search (optional)
     * @param blockDash Filter results by blockDash parameter (optional)
     * @param optional Filter results by optional parameter (optional)
     * @param canSteal Filter results by canSteal parameter (optional)
     * @param includeCalendar include calendar notations (default is false) (optional)
     * @return Chorelist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public Chorelist kkidChorelistGet(String kidUsername, String day, String status, Boolean blockDash, Boolean optional, Boolean canSteal, Boolean includeCalendar) throws ApiException {
        ApiResponse<Chorelist> localVarResp = kkidChorelistGetWithHttpInfo(kidUsername, day, status, blockDash, optional, canSteal, includeCalendar);
        return localVarResp.getData();
    }

    /**
     * returns list of chores for given user
     * By passing in the appropriate options, you can search for chores assigned to a given user within the authenticated user&#39;s master account 
     * @param kidUsername Username of kid you wish to search (optional)
     * @param day Day of week for chores (Weekly for weekly chores) (optional)
     * @param status Status of Chore to search (optional)
     * @param blockDash Filter results by blockDash parameter (optional)
     * @param optional Filter results by optional parameter (optional)
     * @param canSteal Filter results by canSteal parameter (optional)
     * @param includeCalendar include calendar notations (default is false) (optional)
     * @return ApiResponse&lt;Chorelist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Chorelist> kkidChorelistGetWithHttpInfo(String kidUsername, String day, String status, Boolean blockDash, Boolean optional, Boolean canSteal, Boolean includeCalendar) throws ApiException {
        okhttp3.Call localVarCall = kkidChorelistGetValidateBeforeCall(kidUsername, day, status, blockDash, optional, canSteal, includeCalendar, null);
        Type localVarReturnType = new TypeToken<Chorelist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns list of chores for given user (asynchronously)
     * By passing in the appropriate options, you can search for chores assigned to a given user within the authenticated user&#39;s master account 
     * @param kidUsername Username of kid you wish to search (optional)
     * @param day Day of week for chores (Weekly for weekly chores) (optional)
     * @param status Status of Chore to search (optional)
     * @param blockDash Filter results by blockDash parameter (optional)
     * @param optional Filter results by optional parameter (optional)
     * @param canSteal Filter results by canSteal parameter (optional)
     * @param includeCalendar include calendar notations (default is false) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidChorelistGetAsync(String kidUsername, String day, String status, Boolean blockDash, Boolean optional, Boolean canSteal, Boolean includeCalendar, final ApiCallback<Chorelist> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidChorelistGetValidateBeforeCall(kidUsername, day, status, blockDash, optional, canSteal, includeCalendar, _callback);
        Type localVarReturnType = new TypeToken<Chorelist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidChorelistPost
     * @param kidUsername username of kid to assign the chore to. (required)
     * @param choreName name of chore (required)
     * @param day day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank (optional)
     * @param nfcTag text field of nfc tag required to check off chore (optional)
     * @param status status of chore (default is todo) (optional)
     * @param choreDescription optional chore description (optional)
     * @param choreNumber number priority of chore (default is 5) (optional)
     * @param blockDash block dash option on this chore (optional)
     * @param oneTime mark as one time chore (does not repeat each week) (optional)
     * @param extraAllowance ammount of allowance added at end of week for completing this chore (optional)
     * @param optional mark as optional chore (optional)
     * @param reassignable mark as reassignable (default is true) (optional)
     * @param canSteal mark as sibling can steal chore (optional)
     * @param startDate date (yyyy-mm-dd) that you wish the chore to start showing up. (default is today) (optional)
     * @param notes notes added to chore (visable only on reports, kids do not see this note, this is mostly just for the developer) (optional)
     * @param requireObjectDetection require use of camera to detect object detection tag order to check off chore (optional)
     * @param objectDetectionTag tag for object detection to search for (required if requireObjectDetection is true) (optional)
     * @param updatedByAutomation true if chore updated via API from an Automation System (optional)
     * @param aiIcon Notes if AI Icons should be used (n for no, y for yes, e for yes- error) (optional)
     * @param isCalendar True if this is a calendar note instead of a chore. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict- idChoreList parameter was not supplied or is blank </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidChorelistPostCall(String kidUsername, String choreName, String day, String nfcTag, String status, String choreDescription, Integer choreNumber, Boolean blockDash, Boolean oneTime, Integer extraAllowance, Boolean optional, Boolean reassignable, Boolean canSteal, String startDate, String notes, Boolean requireObjectDetection, String objectDetectionTag, Boolean updatedByAutomation, String aiIcon, Boolean isCalendar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/chorelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kidUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kidUsername", kidUsername));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (nfcTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nfcTag", nfcTag));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (choreName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("choreName", choreName));
        }

        if (choreDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("choreDescription", choreDescription));
        }

        if (choreNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("choreNumber", choreNumber));
        }

        if (blockDash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockDash", blockDash));
        }

        if (oneTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oneTime", oneTime));
        }

        if (extraAllowance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extraAllowance", extraAllowance));
        }

        if (optional != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optional", optional));
        }

        if (reassignable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reassignable", reassignable));
        }

        if (canSteal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canSteal", canSteal));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (requireObjectDetection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requireObjectDetection", requireObjectDetection));
        }

        if (objectDetectionTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("objectDetectionTag", objectDetectionTag));
        }

        if (updatedByAutomation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedByAutomation", updatedByAutomation));
        }

        if (aiIcon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aiIcon", aiIcon));
        }

        if (isCalendar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isCalendar", isCalendar));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidChorelistPostValidateBeforeCall(String kidUsername, String choreName, String day, String nfcTag, String status, String choreDescription, Integer choreNumber, Boolean blockDash, Boolean oneTime, Integer extraAllowance, Boolean optional, Boolean reassignable, Boolean canSteal, String startDate, String notes, Boolean requireObjectDetection, String objectDetectionTag, Boolean updatedByAutomation, String aiIcon, Boolean isCalendar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kidUsername' is set
        if (kidUsername == null) {
            throw new ApiException("Missing the required parameter 'kidUsername' when calling kkidChorelistPost(Async)");
        }

        // verify the required parameter 'choreName' is set
        if (choreName == null) {
            throw new ApiException("Missing the required parameter 'choreName' when calling kkidChorelistPost(Async)");
        }

        return kkidChorelistPostCall(kidUsername, choreName, day, nfcTag, status, choreDescription, choreNumber, blockDash, oneTime, extraAllowance, optional, reassignable, canSteal, startDate, notes, requireObjectDetection, objectDetectionTag, updatedByAutomation, aiIcon, isCalendar, _callback);

    }

    /**
     * adds chore for given user
     * By passing in the appropriate options, you can add a chore to given kid username under authenticated user&#39;s master account 
     * @param kidUsername username of kid to assign the chore to. (required)
     * @param choreName name of chore (required)
     * @param day day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank (optional)
     * @param nfcTag text field of nfc tag required to check off chore (optional)
     * @param status status of chore (default is todo) (optional)
     * @param choreDescription optional chore description (optional)
     * @param choreNumber number priority of chore (default is 5) (optional)
     * @param blockDash block dash option on this chore (optional)
     * @param oneTime mark as one time chore (does not repeat each week) (optional)
     * @param extraAllowance ammount of allowance added at end of week for completing this chore (optional)
     * @param optional mark as optional chore (optional)
     * @param reassignable mark as reassignable (default is true) (optional)
     * @param canSteal mark as sibling can steal chore (optional)
     * @param startDate date (yyyy-mm-dd) that you wish the chore to start showing up. (default is today) (optional)
     * @param notes notes added to chore (visable only on reports, kids do not see this note, this is mostly just for the developer) (optional)
     * @param requireObjectDetection require use of camera to detect object detection tag order to check off chore (optional)
     * @param objectDetectionTag tag for object detection to search for (required if requireObjectDetection is true) (optional)
     * @param updatedByAutomation true if chore updated via API from an Automation System (optional)
     * @param aiIcon Notes if AI Icons should be used (n for no, y for yes, e for yes- error) (optional)
     * @param isCalendar True if this is a calendar note instead of a chore. (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict- idChoreList parameter was not supplied or is blank </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public Success kkidChorelistPost(String kidUsername, String choreName, String day, String nfcTag, String status, String choreDescription, Integer choreNumber, Boolean blockDash, Boolean oneTime, Integer extraAllowance, Boolean optional, Boolean reassignable, Boolean canSteal, String startDate, String notes, Boolean requireObjectDetection, String objectDetectionTag, Boolean updatedByAutomation, String aiIcon, Boolean isCalendar) throws ApiException {
        ApiResponse<Success> localVarResp = kkidChorelistPostWithHttpInfo(kidUsername, choreName, day, nfcTag, status, choreDescription, choreNumber, blockDash, oneTime, extraAllowance, optional, reassignable, canSteal, startDate, notes, requireObjectDetection, objectDetectionTag, updatedByAutomation, aiIcon, isCalendar);
        return localVarResp.getData();
    }

    /**
     * adds chore for given user
     * By passing in the appropriate options, you can add a chore to given kid username under authenticated user&#39;s master account 
     * @param kidUsername username of kid to assign the chore to. (required)
     * @param choreName name of chore (required)
     * @param day day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank (optional)
     * @param nfcTag text field of nfc tag required to check off chore (optional)
     * @param status status of chore (default is todo) (optional)
     * @param choreDescription optional chore description (optional)
     * @param choreNumber number priority of chore (default is 5) (optional)
     * @param blockDash block dash option on this chore (optional)
     * @param oneTime mark as one time chore (does not repeat each week) (optional)
     * @param extraAllowance ammount of allowance added at end of week for completing this chore (optional)
     * @param optional mark as optional chore (optional)
     * @param reassignable mark as reassignable (default is true) (optional)
     * @param canSteal mark as sibling can steal chore (optional)
     * @param startDate date (yyyy-mm-dd) that you wish the chore to start showing up. (default is today) (optional)
     * @param notes notes added to chore (visable only on reports, kids do not see this note, this is mostly just for the developer) (optional)
     * @param requireObjectDetection require use of camera to detect object detection tag order to check off chore (optional)
     * @param objectDetectionTag tag for object detection to search for (required if requireObjectDetection is true) (optional)
     * @param updatedByAutomation true if chore updated via API from an Automation System (optional)
     * @param aiIcon Notes if AI Icons should be used (n for no, y for yes, e for yes- error) (optional)
     * @param isCalendar True if this is a calendar note instead of a chore. (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict- idChoreList parameter was not supplied or is blank </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> kkidChorelistPostWithHttpInfo(String kidUsername, String choreName, String day, String nfcTag, String status, String choreDescription, Integer choreNumber, Boolean blockDash, Boolean oneTime, Integer extraAllowance, Boolean optional, Boolean reassignable, Boolean canSteal, String startDate, String notes, Boolean requireObjectDetection, String objectDetectionTag, Boolean updatedByAutomation, String aiIcon, Boolean isCalendar) throws ApiException {
        okhttp3.Call localVarCall = kkidChorelistPostValidateBeforeCall(kidUsername, choreName, day, nfcTag, status, choreDescription, choreNumber, blockDash, oneTime, extraAllowance, optional, reassignable, canSteal, startDate, notes, requireObjectDetection, objectDetectionTag, updatedByAutomation, aiIcon, isCalendar, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * adds chore for given user (asynchronously)
     * By passing in the appropriate options, you can add a chore to given kid username under authenticated user&#39;s master account 
     * @param kidUsername username of kid to assign the chore to. (required)
     * @param choreName name of chore (required)
     * @param day day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank (optional)
     * @param nfcTag text field of nfc tag required to check off chore (optional)
     * @param status status of chore (default is todo) (optional)
     * @param choreDescription optional chore description (optional)
     * @param choreNumber number priority of chore (default is 5) (optional)
     * @param blockDash block dash option on this chore (optional)
     * @param oneTime mark as one time chore (does not repeat each week) (optional)
     * @param extraAllowance ammount of allowance added at end of week for completing this chore (optional)
     * @param optional mark as optional chore (optional)
     * @param reassignable mark as reassignable (default is true) (optional)
     * @param canSteal mark as sibling can steal chore (optional)
     * @param startDate date (yyyy-mm-dd) that you wish the chore to start showing up. (default is today) (optional)
     * @param notes notes added to chore (visable only on reports, kids do not see this note, this is mostly just for the developer) (optional)
     * @param requireObjectDetection require use of camera to detect object detection tag order to check off chore (optional)
     * @param objectDetectionTag tag for object detection to search for (required if requireObjectDetection is true) (optional)
     * @param updatedByAutomation true if chore updated via API from an Automation System (optional)
     * @param aiIcon Notes if AI Icons should be used (n for no, y for yes, e for yes- error) (optional)
     * @param isCalendar True if this is a calendar note instead of a chore. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict- idChoreList parameter was not supplied or is blank </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidChorelistPostAsync(String kidUsername, String choreName, String day, String nfcTag, String status, String choreDescription, Integer choreNumber, Boolean blockDash, Boolean oneTime, Integer extraAllowance, Boolean optional, Boolean reassignable, Boolean canSteal, String startDate, String notes, Boolean requireObjectDetection, String objectDetectionTag, Boolean updatedByAutomation, String aiIcon, Boolean isCalendar, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidChorelistPostValidateBeforeCall(kidUsername, choreName, day, nfcTag, status, choreDescription, choreNumber, blockDash, oneTime, extraAllowance, optional, reassignable, canSteal, startDate, notes, requireObjectDetection, objectDetectionTag, updatedByAutomation, aiIcon, isCalendar, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidChorelistPut
     * @param idChoreList id number of chore you wish to update (required)
     * @param status new status of chore (optional)
     * @param stolen mark chore as stolen by sibling (optional)
     * @param stolenBy username of sibling that stole the chore (required if stolen is true) (optional)
     * @param nfcTag text field of NFC tag that is required to be scanned to check off this chore (normally null) (optional)
     * @param notes notes field for chore (optional)
     * @param latitude GPS latitude of where the chore was marked (optional)
     * @param longitude GPS longitude of where the chore was marked (optional)
     * @param altitude GPS altitude of where the chore was marked (optional)
     * @param updatedByAutomation true if updated via API by automation system (optional)
     * @param whereDay Where day equals... (optional)
     * @param whereStatus Where status equals... (optional)
     * @param whereName Where chore name equals... (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidChorelistPutCall(Integer idChoreList, String status, Boolean stolen, String stolenBy, String nfcTag, String notes, Integer latitude, Integer longitude, Integer altitude, Boolean updatedByAutomation, String whereDay, String whereStatus, String whereName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/chorelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idChoreList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idChoreList", idChoreList));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (stolen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stolen", stolen));
        }

        if (stolenBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stolenBy", stolenBy));
        }

        if (nfcTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nfcTag", nfcTag));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (altitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("altitude", altitude));
        }

        if (updatedByAutomation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedByAutomation", updatedByAutomation));
        }

        if (whereDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("whereDay", whereDay));
        }

        if (whereStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("whereStatus", whereStatus));
        }

        if (whereName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("whereName", whereName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidChorelistPutValidateBeforeCall(Integer idChoreList, String status, Boolean stolen, String stolenBy, String nfcTag, String notes, Integer latitude, Integer longitude, Integer altitude, Boolean updatedByAutomation, String whereDay, String whereStatus, String whereName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idChoreList' is set
        if (idChoreList == null) {
            throw new ApiException("Missing the required parameter 'idChoreList' when calling kkidChorelistPut(Async)");
        }

        return kkidChorelistPutCall(idChoreList, status, stolen, stolenBy, nfcTag, notes, latitude, longitude, altitude, updatedByAutomation, whereDay, whereStatus, whereName, _callback);

    }

    /**
     * updates chore for given chore id
     * By passing in the appropriate options, you can update the fields of a specific core within the authenticated user&#39;s master account 
     * @param idChoreList id number of chore you wish to update (required)
     * @param status new status of chore (optional)
     * @param stolen mark chore as stolen by sibling (optional)
     * @param stolenBy username of sibling that stole the chore (required if stolen is true) (optional)
     * @param nfcTag text field of NFC tag that is required to be scanned to check off this chore (normally null) (optional)
     * @param notes notes field for chore (optional)
     * @param latitude GPS latitude of where the chore was marked (optional)
     * @param longitude GPS longitude of where the chore was marked (optional)
     * @param altitude GPS altitude of where the chore was marked (optional)
     * @param updatedByAutomation true if updated via API by automation system (optional)
     * @param whereDay Where day equals... (optional)
     * @param whereStatus Where status equals... (optional)
     * @param whereName Where chore name equals... (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public Success kkidChorelistPut(Integer idChoreList, String status, Boolean stolen, String stolenBy, String nfcTag, String notes, Integer latitude, Integer longitude, Integer altitude, Boolean updatedByAutomation, String whereDay, String whereStatus, String whereName) throws ApiException {
        ApiResponse<Success> localVarResp = kkidChorelistPutWithHttpInfo(idChoreList, status, stolen, stolenBy, nfcTag, notes, latitude, longitude, altitude, updatedByAutomation, whereDay, whereStatus, whereName);
        return localVarResp.getData();
    }

    /**
     * updates chore for given chore id
     * By passing in the appropriate options, you can update the fields of a specific core within the authenticated user&#39;s master account 
     * @param idChoreList id number of chore you wish to update (required)
     * @param status new status of chore (optional)
     * @param stolen mark chore as stolen by sibling (optional)
     * @param stolenBy username of sibling that stole the chore (required if stolen is true) (optional)
     * @param nfcTag text field of NFC tag that is required to be scanned to check off this chore (normally null) (optional)
     * @param notes notes field for chore (optional)
     * @param latitude GPS latitude of where the chore was marked (optional)
     * @param longitude GPS longitude of where the chore was marked (optional)
     * @param altitude GPS altitude of where the chore was marked (optional)
     * @param updatedByAutomation true if updated via API by automation system (optional)
     * @param whereDay Where day equals... (optional)
     * @param whereStatus Where status equals... (optional)
     * @param whereName Where chore name equals... (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> kkidChorelistPutWithHttpInfo(Integer idChoreList, String status, Boolean stolen, String stolenBy, String nfcTag, String notes, Integer latitude, Integer longitude, Integer altitude, Boolean updatedByAutomation, String whereDay, String whereStatus, String whereName) throws ApiException {
        okhttp3.Call localVarCall = kkidChorelistPutValidateBeforeCall(idChoreList, status, stolen, stolenBy, nfcTag, notes, latitude, longitude, altitude, updatedByAutomation, whereDay, whereStatus, whereName, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * updates chore for given chore id (asynchronously)
     * By passing in the appropriate options, you can update the fields of a specific core within the authenticated user&#39;s master account 
     * @param idChoreList id number of chore you wish to update (required)
     * @param status new status of chore (optional)
     * @param stolen mark chore as stolen by sibling (optional)
     * @param stolenBy username of sibling that stole the chore (required if stolen is true) (optional)
     * @param nfcTag text field of NFC tag that is required to be scanned to check off this chore (normally null) (optional)
     * @param notes notes field for chore (optional)
     * @param latitude GPS latitude of where the chore was marked (optional)
     * @param longitude GPS longitude of where the chore was marked (optional)
     * @param altitude GPS altitude of where the chore was marked (optional)
     * @param updatedByAutomation true if updated via API by automation system (optional)
     * @param whereDay Where day equals... (optional)
     * @param whereStatus Where status equals... (optional)
     * @param whereName Where chore name equals... (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> No Data Found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidChorelistPutAsync(Integer idChoreList, String status, Boolean stolen, String stolenBy, String nfcTag, String notes, Integer latitude, Integer longitude, Integer altitude, Boolean updatedByAutomation, String whereDay, String whereStatus, String whereName, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidChorelistPutValidateBeforeCall(idChoreList, status, stolen, stolenBy, nfcTag, notes, latitude, longitude, altitude, updatedByAutomation, whereDay, whereStatus, whereName, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidMasteruserPost
     * @param username username of user to create (required)
     * @param password password of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Added </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidMasteruserPostCall(String username, String password, String email, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/masteruser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "app_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidMasteruserPostValidateBeforeCall(String username, String password, String email, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling kkidMasteruserPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling kkidMasteruserPost(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling kkidMasteruserPost(Async)");
        }

        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling kkidMasteruserPost(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling kkidMasteruserPost(Async)");
        }

        return kkidMasteruserPostCall(username, password, email, firstName, lastName, _callback);

    }

    /**
     * adds new master user account
     * By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY) 
     * @param username username of user to create (required)
     * @param password password of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @return AddUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Added </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
     </table>
     */
    public AddUserResponse kkidMasteruserPost(String username, String password, String email, String firstName, String lastName) throws ApiException {
        ApiResponse<AddUserResponse> localVarResp = kkidMasteruserPostWithHttpInfo(username, password, email, firstName, lastName);
        return localVarResp.getData();
    }

    /**
     * adds new master user account
     * By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY) 
     * @param username username of user to create (required)
     * @param password password of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @return ApiResponse&lt;AddUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Added </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddUserResponse> kkidMasteruserPostWithHttpInfo(String username, String password, String email, String firstName, String lastName) throws ApiException {
        okhttp3.Call localVarCall = kkidMasteruserPostValidateBeforeCall(username, password, email, firstName, lastName, null);
        Type localVarReturnType = new TypeToken<AddUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * adds new master user account (asynchronously)
     * By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY) 
     * @param username username of user to create (required)
     * @param password password of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Added </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidMasteruserPostAsync(String username, String password, String email, String firstName, String lastName, final ApiCallback<AddUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidMasteruserPostValidateBeforeCall(username, password, email, firstName, lastName, _callback);
        Type localVarReturnType = new TypeToken<AddUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidShareGet
     * @param linkUserId User ID that the link should be authenticated to (required)
     * @param link Link to share (required)
     * @param scope Authentication scope for link (required)
     * @param scope2 Authentication scope for link (optional)
     * @param scope3 Authentication scope for link (optional)
     * @param scope4 Authentication scope for link (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authenticated link created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidShareGetCall(String linkUserId, String link, String scope, String scope2, String scope3, String scope4, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (linkUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkUserId", linkUserId));
        }

        if (link != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link", link));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (scope2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope2", scope2));
        }

        if (scope3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope3", scope3));
        }

        if (scope4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope4", scope4));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidShareGetValidateBeforeCall(String linkUserId, String link, String scope, String scope2, String scope3, String scope4, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkUserId' is set
        if (linkUserId == null) {
            throw new ApiException("Missing the required parameter 'linkUserId' when calling kkidShareGet(Async)");
        }

        // verify the required parameter 'link' is set
        if (link == null) {
            throw new ApiException("Missing the required parameter 'link' when calling kkidShareGet(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling kkidShareGet(Async)");
        }

        return kkidShareGetCall(linkUserId, link, scope, scope2, scope3, scope4, _callback);

    }

    /**
     * Create Share Link
     * Create share link
     * @param linkUserId User ID that the link should be authenticated to (required)
     * @param link Link to share (required)
     * @param scope Authentication scope for link (required)
     * @param scope2 Authentication scope for link (optional)
     * @param scope3 Authentication scope for link (optional)
     * @param scope4 Authentication scope for link (optional)
     * @return Model201Share
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authenticated link created </td><td>  -  </td></tr>
     </table>
     */
    public Model201Share kkidShareGet(String linkUserId, String link, String scope, String scope2, String scope3, String scope4) throws ApiException {
        ApiResponse<Model201Share> localVarResp = kkidShareGetWithHttpInfo(linkUserId, link, scope, scope2, scope3, scope4);
        return localVarResp.getData();
    }

    /**
     * Create Share Link
     * Create share link
     * @param linkUserId User ID that the link should be authenticated to (required)
     * @param link Link to share (required)
     * @param scope Authentication scope for link (required)
     * @param scope2 Authentication scope for link (optional)
     * @param scope3 Authentication scope for link (optional)
     * @param scope4 Authentication scope for link (optional)
     * @return ApiResponse&lt;Model201Share&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authenticated link created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model201Share> kkidShareGetWithHttpInfo(String linkUserId, String link, String scope, String scope2, String scope3, String scope4) throws ApiException {
        okhttp3.Call localVarCall = kkidShareGetValidateBeforeCall(linkUserId, link, scope, scope2, scope3, scope4, null);
        Type localVarReturnType = new TypeToken<Model201Share>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Share Link (asynchronously)
     * Create share link
     * @param linkUserId User ID that the link should be authenticated to (required)
     * @param link Link to share (required)
     * @param scope Authentication scope for link (required)
     * @param scope2 Authentication scope for link (optional)
     * @param scope3 Authentication scope for link (optional)
     * @param scope4 Authentication scope for link (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authenticated link created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidShareGetAsync(String linkUserId, String link, String scope, String scope2, String scope3, String scope4, final ApiCallback<Model201Share> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidShareGetValidateBeforeCall(linkUserId, link, scope, scope2, scope3, scope4, _callback);
        Type localVarReturnType = new TypeToken<Model201Share>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidUserGet
     * @param enableBool Use bool values instead of Int 0/1 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserGetCall(Boolean enableBool, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enableBool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableBool", enableBool));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidUserGetValidateBeforeCall(Boolean enableBool, final ApiCallback _callback) throws ApiException {
        return kkidUserGetCall(enableBool, _callback);

    }

    /**
     * Gets user info
     * Gets user info for authenticated user
     * @param enableBool Use bool values instead of Int 0/1 (optional)
     * @return Userlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Userlist kkidUserGet(Boolean enableBool) throws ApiException {
        ApiResponse<Userlist> localVarResp = kkidUserGetWithHttpInfo(enableBool);
        return localVarResp.getData();
    }

    /**
     * Gets user info
     * Gets user info for authenticated user
     * @param enableBool Use bool values instead of Int 0/1 (optional)
     * @return ApiResponse&lt;Userlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Userlist> kkidUserGetWithHttpInfo(Boolean enableBool) throws ApiException {
        okhttp3.Call localVarCall = kkidUserGetValidateBeforeCall(enableBool, null);
        Type localVarReturnType = new TypeToken<Userlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets user info (asynchronously)
     * Gets user info for authenticated user
     * @param enableBool Use bool values instead of Int 0/1 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserGetAsync(Boolean enableBool, final ApiCallback<Userlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidUserGetValidateBeforeCall(enableBool, _callback);
        Type localVarReturnType = new TypeToken<Userlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidUserlistDelete
     * @param userID userID of the user you wish to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserlistDeleteCall(Integer userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/userlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userID", userID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidUserlistDeleteValidateBeforeCall(Integer userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling kkidUserlistDelete(Async)");
        }

        return kkidUserlistDeleteCall(userID, _callback);

    }

    /**
     * deletes user
     * By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY) 
     * @param userID userID of the user you wish to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public void kkidUserlistDelete(Integer userID) throws ApiException {
        kkidUserlistDeleteWithHttpInfo(userID);
    }

    /**
     * deletes user
     * By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY) 
     * @param userID userID of the user you wish to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> kkidUserlistDeleteWithHttpInfo(Integer userID) throws ApiException {
        okhttp3.Call localVarCall = kkidUserlistDeleteValidateBeforeCall(userID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deletes user (asynchronously)
     * By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY) 
     * @param userID userID of the user you wish to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserlistDeleteAsync(Integer userID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidUserlistDeleteValidateBeforeCall(userID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidUserlistGet
     * @param isChild Filter Search by isChild flag (optional)
     * @param isActive Filter Search by isActive flag (optional)
     * @param isAdmin Filter Search by isAdmin flag (optional)
     * @param enableAllowance Filter Search by enableAllowance flag (optional)
     * @param enableChores Filter Search by enableChores flag (optional)
     * @param userID userID of user to search (optional)
     * @param username Username of user to search (optional)
     * @param email Email address of user to search (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserlistGetCall(Boolean isChild, Boolean isActive, Boolean isAdmin, Boolean enableAllowance, Boolean enableChores, Integer userID, String username, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/userlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isChild != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isChild", isChild));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (isAdmin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAdmin", isAdmin));
        }

        if (enableAllowance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableAllowance", enableAllowance));
        }

        if (enableChores != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableChores", enableChores));
        }

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userID", userID));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidUserlistGetValidateBeforeCall(Boolean isChild, Boolean isActive, Boolean isAdmin, Boolean enableAllowance, Boolean enableChores, Integer userID, String username, String email, final ApiCallback _callback) throws ApiException {
        return kkidUserlistGetCall(isChild, isActive, isAdmin, enableAllowance, enableChores, userID, username, email, _callback);

    }

    /**
     * returns list of users
     * By passing in the appropriate options, you can search for users within the authenticated user&#39;s master account 
     * @param isChild Filter Search by isChild flag (optional)
     * @param isActive Filter Search by isActive flag (optional)
     * @param isAdmin Filter Search by isAdmin flag (optional)
     * @param enableAllowance Filter Search by enableAllowance flag (optional)
     * @param enableChores Filter Search by enableChores flag (optional)
     * @param userID userID of user to search (optional)
     * @param username Username of user to search (optional)
     * @param email Email address of user to search (optional)
     * @return Userlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public Userlist kkidUserlistGet(Boolean isChild, Boolean isActive, Boolean isAdmin, Boolean enableAllowance, Boolean enableChores, Integer userID, String username, String email) throws ApiException {
        ApiResponse<Userlist> localVarResp = kkidUserlistGetWithHttpInfo(isChild, isActive, isAdmin, enableAllowance, enableChores, userID, username, email);
        return localVarResp.getData();
    }

    /**
     * returns list of users
     * By passing in the appropriate options, you can search for users within the authenticated user&#39;s master account 
     * @param isChild Filter Search by isChild flag (optional)
     * @param isActive Filter Search by isActive flag (optional)
     * @param isAdmin Filter Search by isAdmin flag (optional)
     * @param enableAllowance Filter Search by enableAllowance flag (optional)
     * @param enableChores Filter Search by enableChores flag (optional)
     * @param userID userID of user to search (optional)
     * @param username Username of user to search (optional)
     * @param email Email address of user to search (optional)
     * @return ApiResponse&lt;Userlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Userlist> kkidUserlistGetWithHttpInfo(Boolean isChild, Boolean isActive, Boolean isAdmin, Boolean enableAllowance, Boolean enableChores, Integer userID, String username, String email) throws ApiException {
        okhttp3.Call localVarCall = kkidUserlistGetValidateBeforeCall(isChild, isActive, isAdmin, enableAllowance, enableChores, userID, username, email, null);
        Type localVarReturnType = new TypeToken<Userlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * returns list of users (asynchronously)
     * By passing in the appropriate options, you can search for users within the authenticated user&#39;s master account 
     * @param isChild Filter Search by isChild flag (optional)
     * @param isActive Filter Search by isActive flag (optional)
     * @param isAdmin Filter Search by isAdmin flag (optional)
     * @param enableAllowance Filter Search by enableAllowance flag (optional)
     * @param enableChores Filter Search by enableChores flag (optional)
     * @param userID userID of user to search (optional)
     * @param username Username of user to search (optional)
     * @param email Email address of user to search (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Data Returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized- API credentials not supplied. Ensure you have passed proper Username and Password parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden- User access is denied. API user either does not have access or has been banned/locked. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserlistGetAsync(Boolean isChild, Boolean isActive, Boolean isAdmin, Boolean enableAllowance, Boolean enableChores, Integer userID, String username, String email, final ApiCallback<Userlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidUserlistGetValidateBeforeCall(isChild, isActive, isAdmin, enableAllowance, enableChores, userID, username, email, _callback);
        Type localVarReturnType = new TypeToken<Userlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidUserlistPost
     * @param username username of user to create (required)
     * @param password password of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Added </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserlistPostCall(String username, String password, String email, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/userlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidUserlistPostValidateBeforeCall(String username, String password, String email, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling kkidUserlistPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling kkidUserlistPost(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling kkidUserlistPost(Async)");
        }

        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling kkidUserlistPost(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling kkidUserlistPost(Async)");
        }

        return kkidUserlistPostCall(username, password, email, firstName, lastName, _callback);

    }

    /**
     * adds new child user
     * By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access. 
     * @param username username of user to create (required)
     * @param password password of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @return AddUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Added </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public AddUserResponse kkidUserlistPost(String username, String password, String email, String firstName, String lastName) throws ApiException {
        ApiResponse<AddUserResponse> localVarResp = kkidUserlistPostWithHttpInfo(username, password, email, firstName, lastName);
        return localVarResp.getData();
    }

    /**
     * adds new child user
     * By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access. 
     * @param username username of user to create (required)
     * @param password password of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @return ApiResponse&lt;AddUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Added </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddUserResponse> kkidUserlistPostWithHttpInfo(String username, String password, String email, String firstName, String lastName) throws ApiException {
        okhttp3.Call localVarCall = kkidUserlistPostValidateBeforeCall(username, password, email, firstName, lastName, null);
        Type localVarReturnType = new TypeToken<AddUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * adds new child user (asynchronously)
     * By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access. 
     * @param username username of user to create (required)
     * @param password password of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Added </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Create user unsuccessful! This is normally because the username or password already exists in the KumpeApps system. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserlistPostAsync(String username, String password, String email, String firstName, String lastName, final ApiCallback<AddUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidUserlistPostValidateBeforeCall(username, password, email, firstName, lastName, _callback);
        Type localVarReturnType = new TypeToken<AddUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidUserlistPut
     * @param userID userID of the user you wish to update (required)
     * @param username username of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @param emoji emoji character for user (optional)
     * @param tmdbKey User&#39;s TMdB Session Key (optional)
     * @param enableWishList set status of Wish List module enabled (optional)
     * @param enableChores set status of chores module enabled (optional)
     * @param enableAllowance set status of allowance module enabled (optional)
     * @param enableAdmin set status of isAdmin (optional)
     * @param enableTmdb set status of enableTmdb (movie and tv search) (optional)
     * @param enableObjectDetection set status of enableObjectDetection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Updated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Update user unsuccessful. This could be due to invalid userID, new username already exists, new email already exists, or an unknown error. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserlistPutCall(Integer userID, String username, String email, String firstName, String lastName, String emoji, String tmdbKey, Boolean enableWishList, Boolean enableChores, Boolean enableAllowance, Boolean enableAdmin, Boolean enableTmdb, Boolean enableObjectDetection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/userlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userID", userID));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (emoji != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emoji", emoji));
        }

        if (tmdbKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tmdbKey", tmdbKey));
        }

        if (enableWishList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableWishList", enableWishList));
        }

        if (enableChores != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableChores", enableChores));
        }

        if (enableAllowance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableAllowance", enableAllowance));
        }

        if (enableAdmin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableAdmin", enableAdmin));
        }

        if (enableTmdb != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableTmdb", enableTmdb));
        }

        if (enableObjectDetection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableObjectDetection", enableObjectDetection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidUserlistPutValidateBeforeCall(Integer userID, String username, String email, String firstName, String lastName, String emoji, String tmdbKey, Boolean enableWishList, Boolean enableChores, Boolean enableAllowance, Boolean enableAdmin, Boolean enableTmdb, Boolean enableObjectDetection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling kkidUserlistPut(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling kkidUserlistPut(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling kkidUserlistPut(Async)");
        }

        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling kkidUserlistPut(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling kkidUserlistPut(Async)");
        }

        return kkidUserlistPutCall(userID, username, email, firstName, lastName, emoji, tmdbKey, enableWishList, enableChores, enableAllowance, enableAdmin, enableTmdb, enableObjectDetection, _callback);

    }

    /**
     * updates user
     * By passing in the appropriate variables this method updates the user&#39;s profile 
     * @param userID userID of the user you wish to update (required)
     * @param username username of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @param emoji emoji character for user (optional)
     * @param tmdbKey User&#39;s TMdB Session Key (optional)
     * @param enableWishList set status of Wish List module enabled (optional)
     * @param enableChores set status of chores module enabled (optional)
     * @param enableAllowance set status of allowance module enabled (optional)
     * @param enableAdmin set status of isAdmin (optional)
     * @param enableTmdb set status of enableTmdb (movie and tv search) (optional)
     * @param enableObjectDetection set status of enableObjectDetection (optional)
     * @return AddUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Updated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Update user unsuccessful. This could be due to invalid userID, new username already exists, new email already exists, or an unknown error. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public AddUserResponse kkidUserlistPut(Integer userID, String username, String email, String firstName, String lastName, String emoji, String tmdbKey, Boolean enableWishList, Boolean enableChores, Boolean enableAllowance, Boolean enableAdmin, Boolean enableTmdb, Boolean enableObjectDetection) throws ApiException {
        ApiResponse<AddUserResponse> localVarResp = kkidUserlistPutWithHttpInfo(userID, username, email, firstName, lastName, emoji, tmdbKey, enableWishList, enableChores, enableAllowance, enableAdmin, enableTmdb, enableObjectDetection);
        return localVarResp.getData();
    }

    /**
     * updates user
     * By passing in the appropriate variables this method updates the user&#39;s profile 
     * @param userID userID of the user you wish to update (required)
     * @param username username of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @param emoji emoji character for user (optional)
     * @param tmdbKey User&#39;s TMdB Session Key (optional)
     * @param enableWishList set status of Wish List module enabled (optional)
     * @param enableChores set status of chores module enabled (optional)
     * @param enableAllowance set status of allowance module enabled (optional)
     * @param enableAdmin set status of isAdmin (optional)
     * @param enableTmdb set status of enableTmdb (movie and tv search) (optional)
     * @param enableObjectDetection set status of enableObjectDetection (optional)
     * @return ApiResponse&lt;AddUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Updated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Update user unsuccessful. This could be due to invalid userID, new username already exists, new email already exists, or an unknown error. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddUserResponse> kkidUserlistPutWithHttpInfo(Integer userID, String username, String email, String firstName, String lastName, String emoji, String tmdbKey, Boolean enableWishList, Boolean enableChores, Boolean enableAllowance, Boolean enableAdmin, Boolean enableTmdb, Boolean enableObjectDetection) throws ApiException {
        okhttp3.Call localVarCall = kkidUserlistPutValidateBeforeCall(userID, username, email, firstName, lastName, emoji, tmdbKey, enableWishList, enableChores, enableAllowance, enableAdmin, enableTmdb, enableObjectDetection, null);
        Type localVarReturnType = new TypeToken<AddUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * updates user (asynchronously)
     * By passing in the appropriate variables this method updates the user&#39;s profile 
     * @param userID userID of the user you wish to update (required)
     * @param username username of user to create (required)
     * @param email email address of user to create (required)
     * @param firstName First Name of user to create (required)
     * @param lastName Last Name of user to create (required)
     * @param emoji emoji character for user (optional)
     * @param tmdbKey User&#39;s TMdB Session Key (optional)
     * @param enableWishList set status of Wish List module enabled (optional)
     * @param enableChores set status of chores module enabled (optional)
     * @param enableAllowance set status of allowance module enabled (optional)
     * @param enableAdmin set status of isAdmin (optional)
     * @param enableTmdb set status of enableTmdb (movie and tv search) (optional)
     * @param enableObjectDetection set status of enableObjectDetection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Updated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted- Access Granted but data flow did not complete due to an unknown error. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed- API user does not have access to use this method </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Update user unsuccessful. This could be due to invalid userID, new username already exists, new email already exists, or an unknown error. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> API Access Denied! Your API key is invalid, expired, or not supplied! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidUserlistPutAsync(Integer userID, String username, String email, String firstName, String lastName, String emoji, String tmdbKey, Boolean enableWishList, Boolean enableChores, Boolean enableAllowance, Boolean enableAdmin, Boolean enableTmdb, Boolean enableObjectDetection, final ApiCallback<AddUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidUserlistPutValidateBeforeCall(userID, username, email, firstName, lastName, emoji, tmdbKey, enableWishList, enableChores, enableAllowance, enableAdmin, enableTmdb, enableObjectDetection, _callback);
        Type localVarReturnType = new TypeToken<AddUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidWishlistDelete
     * @param wishId ID of wishlist item to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidWishlistDeleteCall(Integer wishId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/wishlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (wishId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wishId", wishId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidWishlistDeleteValidateBeforeCall(Integer wishId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wishId' is set
        if (wishId == null) {
            throw new ApiException("Missing the required parameter 'wishId' when calling kkidWishlistDelete(Async)");
        }

        return kkidWishlistDeleteCall(wishId, _callback);

    }

    /**
     * Delete item from wishlist
     * 
     * @param wishId ID of wishlist item to delete (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Success kkidWishlistDelete(Integer wishId) throws ApiException {
        ApiResponse<Success> localVarResp = kkidWishlistDeleteWithHttpInfo(wishId);
        return localVarResp.getData();
    }

    /**
     * Delete item from wishlist
     * 
     * @param wishId ID of wishlist item to delete (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> kkidWishlistDeleteWithHttpInfo(Integer wishId) throws ApiException {
        okhttp3.Call localVarCall = kkidWishlistDeleteValidateBeforeCall(wishId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete item from wishlist (asynchronously)
     * 
     * @param wishId ID of wishlist item to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidWishlistDeleteAsync(Integer wishId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidWishlistDeleteValidateBeforeCall(wishId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidWishlistGet
     * @param kidUserId userID of the kid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidWishlistGetCall(Integer kidUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/wishlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kidUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kidUserId", kidUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidWishlistGetValidateBeforeCall(Integer kidUserId, final ApiCallback _callback) throws ApiException {
        return kkidWishlistGetCall(kidUserId, _callback);

    }

    /**
     * Get list of wishlist items
     * 
     * @param kidUserId userID of the kid (optional)
     * @return Wishlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Wishlist kkidWishlistGet(Integer kidUserId) throws ApiException {
        ApiResponse<Wishlist> localVarResp = kkidWishlistGetWithHttpInfo(kidUserId);
        return localVarResp.getData();
    }

    /**
     * Get list of wishlist items
     * 
     * @param kidUserId userID of the kid (optional)
     * @return ApiResponse&lt;Wishlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wishlist> kkidWishlistGetWithHttpInfo(Integer kidUserId) throws ApiException {
        okhttp3.Call localVarCall = kkidWishlistGetValidateBeforeCall(kidUserId, null);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of wishlist items (asynchronously)
     * 
     * @param kidUserId userID of the kid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidWishlistGetAsync(Integer kidUserId, final ApiCallback<Wishlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidWishlistGetValidateBeforeCall(kidUserId, _callback);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidWishlistPost
     * @param kidUserId userID of the kid (required)
     * @param title Item title (required)
     * @param description Item Description (optional)
     * @param priority Item Priority (optional)
     * @param link URL Link to item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidWishlistPostCall(Integer kidUserId, String title, String description, Integer priority, String link, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/wishlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kidUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kidUserId", kidUserId));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }

        if (link != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link", link));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidWishlistPostValidateBeforeCall(Integer kidUserId, String title, String description, Integer priority, String link, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kidUserId' is set
        if (kidUserId == null) {
            throw new ApiException("Missing the required parameter 'kidUserId' when calling kkidWishlistPost(Async)");
        }

        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling kkidWishlistPost(Async)");
        }

        return kkidWishlistPostCall(kidUserId, title, description, priority, link, _callback);

    }

    /**
     * Add item to kid&#39;s wishlist
     * 
     * @param kidUserId userID of the kid (required)
     * @param title Item title (required)
     * @param description Item Description (optional)
     * @param priority Item Priority (optional)
     * @param link URL Link to item (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Success kkidWishlistPost(Integer kidUserId, String title, String description, Integer priority, String link) throws ApiException {
        ApiResponse<Success> localVarResp = kkidWishlistPostWithHttpInfo(kidUserId, title, description, priority, link);
        return localVarResp.getData();
    }

    /**
     * Add item to kid&#39;s wishlist
     * 
     * @param kidUserId userID of the kid (required)
     * @param title Item title (required)
     * @param description Item Description (optional)
     * @param priority Item Priority (optional)
     * @param link URL Link to item (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> kkidWishlistPostWithHttpInfo(Integer kidUserId, String title, String description, Integer priority, String link) throws ApiException {
        okhttp3.Call localVarCall = kkidWishlistPostValidateBeforeCall(kidUserId, title, description, priority, link, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add item to kid&#39;s wishlist (asynchronously)
     * 
     * @param kidUserId userID of the kid (required)
     * @param title Item title (required)
     * @param description Item Description (optional)
     * @param priority Item Priority (optional)
     * @param link URL Link to item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidWishlistPostAsync(Integer kidUserId, String title, String description, Integer priority, String link, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidWishlistPostValidateBeforeCall(kidUserId, title, description, priority, link, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kkidWishlistPut
     * @param wishId Wish list item ID to update (required)
     * @param title Item title (optional)
     * @param description Item Description (optional)
     * @param priority Item Priority (optional)
     * @param link URL Link to item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidWishlistPutCall(Integer wishId, String title, String description, Integer priority, String link, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kkid/wishlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (wishId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wishId", wishId));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }

        if (link != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link", link));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kkidWishlistPutValidateBeforeCall(Integer wishId, String title, String description, Integer priority, String link, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wishId' is set
        if (wishId == null) {
            throw new ApiException("Missing the required parameter 'wishId' when calling kkidWishlistPut(Async)");
        }

        return kkidWishlistPutCall(wishId, title, description, priority, link, _callback);

    }

    /**
     * Update item on kid&#39;s wishlist
     * 
     * @param wishId Wish list item ID to update (required)
     * @param title Item title (optional)
     * @param description Item Description (optional)
     * @param priority Item Priority (optional)
     * @param link URL Link to item (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public Success kkidWishlistPut(Integer wishId, String title, String description, Integer priority, String link) throws ApiException {
        ApiResponse<Success> localVarResp = kkidWishlistPutWithHttpInfo(wishId, title, description, priority, link);
        return localVarResp.getData();
    }

    /**
     * Update item on kid&#39;s wishlist
     * 
     * @param wishId Wish list item ID to update (required)
     * @param title Item title (optional)
     * @param description Item Description (optional)
     * @param priority Item Priority (optional)
     * @param link URL Link to item (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> kkidWishlistPutWithHttpInfo(Integer wishId, String title, String description, Integer priority, String link) throws ApiException {
        okhttp3.Call localVarCall = kkidWishlistPutValidateBeforeCall(wishId, title, description, priority, link, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update item on kid&#39;s wishlist (asynchronously)
     * 
     * @param wishId Wish list item ID to update (required)
     * @param title Item title (optional)
     * @param description Item Description (optional)
     * @param priority Item Priority (optional)
     * @param link URL Link to item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> search results matching criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kkidWishlistPutAsync(Integer wishId, String title, String description, Integer priority, String link, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = kkidWishlistPutValidateBeforeCall(wishId, title, description, priority, link, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
