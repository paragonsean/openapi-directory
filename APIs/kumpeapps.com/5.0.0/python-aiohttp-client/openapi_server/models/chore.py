# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Chore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ai_icon: str=None, altitude: int=None, block_dash: bool=None, chore_description: str=None, chore_name: str=None, chore_number: int=None, day: str=None, extra_allowance: int=None, id_chore_list: int=None, is_calendar: bool=None, kid: str=None, latitude: int=None, longitude: int=None, nfc_tag: str=None, notes: str=None, one_time: bool=None, optional: bool=None, reassignable: bool=None, reassigned: bool=None, require_object_detection: str=None, start_date: str=None, status: str=None, stolen: bool=None, stolen_by: str=None, updated: str=None, updated_by: str=None):
        """Chore - a model defined in OpenAPI

        :param ai_icon: The ai_icon of this Chore.
        :param altitude: The altitude of this Chore.
        :param block_dash: The block_dash of this Chore.
        :param chore_description: The chore_description of this Chore.
        :param chore_name: The chore_name of this Chore.
        :param chore_number: The chore_number of this Chore.
        :param day: The day of this Chore.
        :param extra_allowance: The extra_allowance of this Chore.
        :param id_chore_list: The id_chore_list of this Chore.
        :param is_calendar: The is_calendar of this Chore.
        :param kid: The kid of this Chore.
        :param latitude: The latitude of this Chore.
        :param longitude: The longitude of this Chore.
        :param nfc_tag: The nfc_tag of this Chore.
        :param notes: The notes of this Chore.
        :param one_time: The one_time of this Chore.
        :param optional: The optional of this Chore.
        :param reassignable: The reassignable of this Chore.
        :param reassigned: The reassigned of this Chore.
        :param require_object_detection: The require_object_detection of this Chore.
        :param start_date: The start_date of this Chore.
        :param status: The status of this Chore.
        :param stolen: The stolen of this Chore.
        :param stolen_by: The stolen_by of this Chore.
        :param updated: The updated of this Chore.
        :param updated_by: The updated_by of this Chore.
        """
        self.openapi_types = {
            'ai_icon': str,
            'altitude': int,
            'block_dash': bool,
            'chore_description': str,
            'chore_name': str,
            'chore_number': int,
            'day': str,
            'extra_allowance': int,
            'id_chore_list': int,
            'is_calendar': bool,
            'kid': str,
            'latitude': int,
            'longitude': int,
            'nfc_tag': str,
            'notes': str,
            'one_time': bool,
            'optional': bool,
            'reassignable': bool,
            'reassigned': bool,
            'require_object_detection': str,
            'start_date': str,
            'status': str,
            'stolen': bool,
            'stolen_by': str,
            'updated': str,
            'updated_by': str
        }

        self.attribute_map = {
            'ai_icon': 'aiIcon',
            'altitude': 'altitude',
            'block_dash': 'blockDash',
            'chore_description': 'choreDescription',
            'chore_name': 'choreName',
            'chore_number': 'choreNumber',
            'day': 'day',
            'extra_allowance': 'extraAllowance',
            'id_chore_list': 'idChoreList',
            'is_calendar': 'isCalendar',
            'kid': 'kid',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'nfc_tag': 'nfcTag',
            'notes': 'notes',
            'one_time': 'oneTime',
            'optional': 'optional',
            'reassignable': 'reassignable',
            'reassigned': 'reassigned',
            'require_object_detection': 'requireObjectDetection',
            'start_date': 'startDate',
            'status': 'status',
            'stolen': 'stolen',
            'stolen_by': 'stolenBy',
            'updated': 'updated',
            'updated_by': 'updatedBy'
        }

        self._ai_icon = ai_icon
        self._altitude = altitude
        self._block_dash = block_dash
        self._chore_description = chore_description
        self._chore_name = chore_name
        self._chore_number = chore_number
        self._day = day
        self._extra_allowance = extra_allowance
        self._id_chore_list = id_chore_list
        self._is_calendar = is_calendar
        self._kid = kid
        self._latitude = latitude
        self._longitude = longitude
        self._nfc_tag = nfc_tag
        self._notes = notes
        self._one_time = one_time
        self._optional = optional
        self._reassignable = reassignable
        self._reassigned = reassigned
        self._require_object_detection = require_object_detection
        self._start_date = start_date
        self._status = status
        self._stolen = stolen
        self._stolen_by = stolen_by
        self._updated = updated
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Chore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The chore of this Chore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ai_icon(self):
        """Gets the ai_icon of this Chore.


        :return: The ai_icon of this Chore.
        :rtype: str
        """
        return self._ai_icon

    @ai_icon.setter
    def ai_icon(self, ai_icon):
        """Sets the ai_icon of this Chore.


        :param ai_icon: The ai_icon of this Chore.
        :type ai_icon: str
        """

        self._ai_icon = ai_icon

    @property
    def altitude(self):
        """Gets the altitude of this Chore.


        :return: The altitude of this Chore.
        :rtype: int
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Chore.


        :param altitude: The altitude of this Chore.
        :type altitude: int
        """

        self._altitude = altitude

    @property
    def block_dash(self):
        """Gets the block_dash of this Chore.


        :return: The block_dash of this Chore.
        :rtype: bool
        """
        return self._block_dash

    @block_dash.setter
    def block_dash(self, block_dash):
        """Sets the block_dash of this Chore.


        :param block_dash: The block_dash of this Chore.
        :type block_dash: bool
        """

        self._block_dash = block_dash

    @property
    def chore_description(self):
        """Gets the chore_description of this Chore.


        :return: The chore_description of this Chore.
        :rtype: str
        """
        return self._chore_description

    @chore_description.setter
    def chore_description(self, chore_description):
        """Sets the chore_description of this Chore.


        :param chore_description: The chore_description of this Chore.
        :type chore_description: str
        """

        self._chore_description = chore_description

    @property
    def chore_name(self):
        """Gets the chore_name of this Chore.


        :return: The chore_name of this Chore.
        :rtype: str
        """
        return self._chore_name

    @chore_name.setter
    def chore_name(self, chore_name):
        """Sets the chore_name of this Chore.


        :param chore_name: The chore_name of this Chore.
        :type chore_name: str
        """

        self._chore_name = chore_name

    @property
    def chore_number(self):
        """Gets the chore_number of this Chore.


        :return: The chore_number of this Chore.
        :rtype: int
        """
        return self._chore_number

    @chore_number.setter
    def chore_number(self, chore_number):
        """Sets the chore_number of this Chore.


        :param chore_number: The chore_number of this Chore.
        :type chore_number: int
        """

        self._chore_number = chore_number

    @property
    def day(self):
        """Gets the day of this Chore.


        :return: The day of this Chore.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this Chore.


        :param day: The day of this Chore.
        :type day: str
        """

        self._day = day

    @property
    def extra_allowance(self):
        """Gets the extra_allowance of this Chore.


        :return: The extra_allowance of this Chore.
        :rtype: int
        """
        return self._extra_allowance

    @extra_allowance.setter
    def extra_allowance(self, extra_allowance):
        """Sets the extra_allowance of this Chore.


        :param extra_allowance: The extra_allowance of this Chore.
        :type extra_allowance: int
        """

        self._extra_allowance = extra_allowance

    @property
    def id_chore_list(self):
        """Gets the id_chore_list of this Chore.


        :return: The id_chore_list of this Chore.
        :rtype: int
        """
        return self._id_chore_list

    @id_chore_list.setter
    def id_chore_list(self, id_chore_list):
        """Sets the id_chore_list of this Chore.


        :param id_chore_list: The id_chore_list of this Chore.
        :type id_chore_list: int
        """

        self._id_chore_list = id_chore_list

    @property
    def is_calendar(self):
        """Gets the is_calendar of this Chore.


        :return: The is_calendar of this Chore.
        :rtype: bool
        """
        return self._is_calendar

    @is_calendar.setter
    def is_calendar(self, is_calendar):
        """Sets the is_calendar of this Chore.


        :param is_calendar: The is_calendar of this Chore.
        :type is_calendar: bool
        """

        self._is_calendar = is_calendar

    @property
    def kid(self):
        """Gets the kid of this Chore.


        :return: The kid of this Chore.
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this Chore.


        :param kid: The kid of this Chore.
        :type kid: str
        """

        self._kid = kid

    @property
    def latitude(self):
        """Gets the latitude of this Chore.


        :return: The latitude of this Chore.
        :rtype: int
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Chore.


        :param latitude: The latitude of this Chore.
        :type latitude: int
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Chore.


        :return: The longitude of this Chore.
        :rtype: int
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Chore.


        :param longitude: The longitude of this Chore.
        :type longitude: int
        """

        self._longitude = longitude

    @property
    def nfc_tag(self):
        """Gets the nfc_tag of this Chore.


        :return: The nfc_tag of this Chore.
        :rtype: str
        """
        return self._nfc_tag

    @nfc_tag.setter
    def nfc_tag(self, nfc_tag):
        """Sets the nfc_tag of this Chore.


        :param nfc_tag: The nfc_tag of this Chore.
        :type nfc_tag: str
        """

        self._nfc_tag = nfc_tag

    @property
    def notes(self):
        """Gets the notes of this Chore.


        :return: The notes of this Chore.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Chore.


        :param notes: The notes of this Chore.
        :type notes: str
        """

        self._notes = notes

    @property
    def one_time(self):
        """Gets the one_time of this Chore.


        :return: The one_time of this Chore.
        :rtype: bool
        """
        return self._one_time

    @one_time.setter
    def one_time(self, one_time):
        """Sets the one_time of this Chore.


        :param one_time: The one_time of this Chore.
        :type one_time: bool
        """

        self._one_time = one_time

    @property
    def optional(self):
        """Gets the optional of this Chore.


        :return: The optional of this Chore.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this Chore.


        :param optional: The optional of this Chore.
        :type optional: bool
        """

        self._optional = optional

    @property
    def reassignable(self):
        """Gets the reassignable of this Chore.


        :return: The reassignable of this Chore.
        :rtype: bool
        """
        return self._reassignable

    @reassignable.setter
    def reassignable(self, reassignable):
        """Sets the reassignable of this Chore.


        :param reassignable: The reassignable of this Chore.
        :type reassignable: bool
        """

        self._reassignable = reassignable

    @property
    def reassigned(self):
        """Gets the reassigned of this Chore.


        :return: The reassigned of this Chore.
        :rtype: bool
        """
        return self._reassigned

    @reassigned.setter
    def reassigned(self, reassigned):
        """Sets the reassigned of this Chore.


        :param reassigned: The reassigned of this Chore.
        :type reassigned: bool
        """

        self._reassigned = reassigned

    @property
    def require_object_detection(self):
        """Gets the require_object_detection of this Chore.


        :return: The require_object_detection of this Chore.
        :rtype: str
        """
        return self._require_object_detection

    @require_object_detection.setter
    def require_object_detection(self, require_object_detection):
        """Sets the require_object_detection of this Chore.


        :param require_object_detection: The require_object_detection of this Chore.
        :type require_object_detection: str
        """

        self._require_object_detection = require_object_detection

    @property
    def start_date(self):
        """Gets the start_date of this Chore.


        :return: The start_date of this Chore.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Chore.


        :param start_date: The start_date of this Chore.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this Chore.


        :return: The status of this Chore.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Chore.


        :param status: The status of this Chore.
        :type status: str
        """

        self._status = status

    @property
    def stolen(self):
        """Gets the stolen of this Chore.


        :return: The stolen of this Chore.
        :rtype: bool
        """
        return self._stolen

    @stolen.setter
    def stolen(self, stolen):
        """Sets the stolen of this Chore.


        :param stolen: The stolen of this Chore.
        :type stolen: bool
        """

        self._stolen = stolen

    @property
    def stolen_by(self):
        """Gets the stolen_by of this Chore.


        :return: The stolen_by of this Chore.
        :rtype: str
        """
        return self._stolen_by

    @stolen_by.setter
    def stolen_by(self, stolen_by):
        """Sets the stolen_by of this Chore.


        :param stolen_by: The stolen_by of this Chore.
        :type stolen_by: str
        """

        self._stolen_by = stolen_by

    @property
    def updated(self):
        """Gets the updated of this Chore.


        :return: The updated of this Chore.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Chore.


        :param updated: The updated of this Chore.
        :type updated: str
        """

        self._updated = updated

    @property
    def updated_by(self):
        """Gets the updated_by of this Chore.


        :return: The updated_by of this Chore.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Chore.


        :param updated_by: The updated_by of this Chore.
        :type updated_by: str
        """

        self._updated_by = updated_by
