# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, emoji: str=None, enable_allowance: bool=None, enable_behavior_chart: bool=None, enable_chores: bool=None, enable_no_ads: bool=None, enable_object_detection: bool=None, enable_tmdb: bool=None, first_name: str=None, home_id: int=None, is_active: bool=None, is_admin: bool=None, is_banned: bool=None, is_child: bool=None, is_disabled: bool=None, is_locked: bool=None, is_master: bool=None, last_name: str=None, master_id: int=None, push_allowance: bool=None, push_allowance_new: bool=None, push_chores: bool=None, push_chores_new: bool=None, push_chores_reminders: bool=None, tmdb_key: str=None, user_id: int=None, username: str=None, weekly_allowance: int=None):
        """User - a model defined in OpenAPI

        :param email: The email of this User.
        :param emoji: The emoji of this User.
        :param enable_allowance: The enable_allowance of this User.
        :param enable_behavior_chart: The enable_behavior_chart of this User.
        :param enable_chores: The enable_chores of this User.
        :param enable_no_ads: The enable_no_ads of this User.
        :param enable_object_detection: The enable_object_detection of this User.
        :param enable_tmdb: The enable_tmdb of this User.
        :param first_name: The first_name of this User.
        :param home_id: The home_id of this User.
        :param is_active: The is_active of this User.
        :param is_admin: The is_admin of this User.
        :param is_banned: The is_banned of this User.
        :param is_child: The is_child of this User.
        :param is_disabled: The is_disabled of this User.
        :param is_locked: The is_locked of this User.
        :param is_master: The is_master of this User.
        :param last_name: The last_name of this User.
        :param master_id: The master_id of this User.
        :param push_allowance: The push_allowance of this User.
        :param push_allowance_new: The push_allowance_new of this User.
        :param push_chores: The push_chores of this User.
        :param push_chores_new: The push_chores_new of this User.
        :param push_chores_reminders: The push_chores_reminders of this User.
        :param tmdb_key: The tmdb_key of this User.
        :param user_id: The user_id of this User.
        :param username: The username of this User.
        :param weekly_allowance: The weekly_allowance of this User.
        """
        self.openapi_types = {
            'email': str,
            'emoji': str,
            'enable_allowance': bool,
            'enable_behavior_chart': bool,
            'enable_chores': bool,
            'enable_no_ads': bool,
            'enable_object_detection': bool,
            'enable_tmdb': bool,
            'first_name': str,
            'home_id': int,
            'is_active': bool,
            'is_admin': bool,
            'is_banned': bool,
            'is_child': bool,
            'is_disabled': bool,
            'is_locked': bool,
            'is_master': bool,
            'last_name': str,
            'master_id': int,
            'push_allowance': bool,
            'push_allowance_new': bool,
            'push_chores': bool,
            'push_chores_new': bool,
            'push_chores_reminders': bool,
            'tmdb_key': str,
            'user_id': int,
            'username': str,
            'weekly_allowance': int
        }

        self.attribute_map = {
            'email': 'email',
            'emoji': 'emoji',
            'enable_allowance': 'enableAllowance',
            'enable_behavior_chart': 'enableBehaviorChart',
            'enable_chores': 'enableChores',
            'enable_no_ads': 'enableNoAds',
            'enable_object_detection': 'enableObjectDetection',
            'enable_tmdb': 'enableTmdb',
            'first_name': 'firstName',
            'home_id': 'homeId',
            'is_active': 'isActive',
            'is_admin': 'isAdmin',
            'is_banned': 'isBanned',
            'is_child': 'isChild',
            'is_disabled': 'isDisabled',
            'is_locked': 'isLocked',
            'is_master': 'isMaster',
            'last_name': 'lastName',
            'master_id': 'masterId',
            'push_allowance': 'pushAllowance',
            'push_allowance_new': 'pushAllowanceNew',
            'push_chores': 'pushChores',
            'push_chores_new': 'pushChoresNew',
            'push_chores_reminders': 'pushChoresReminders',
            'tmdb_key': 'tmdbKey',
            'user_id': 'userId',
            'username': 'username',
            'weekly_allowance': 'weeklyAllowance'
        }

        self._email = email
        self._emoji = emoji
        self._enable_allowance = enable_allowance
        self._enable_behavior_chart = enable_behavior_chart
        self._enable_chores = enable_chores
        self._enable_no_ads = enable_no_ads
        self._enable_object_detection = enable_object_detection
        self._enable_tmdb = enable_tmdb
        self._first_name = first_name
        self._home_id = home_id
        self._is_active = is_active
        self._is_admin = is_admin
        self._is_banned = is_banned
        self._is_child = is_child
        self._is_disabled = is_disabled
        self._is_locked = is_locked
        self._is_master = is_master
        self._last_name = last_name
        self._master_id = master_id
        self._push_allowance = push_allowance
        self._push_allowance_new = push_allowance_new
        self._push_chores = push_chores
        self._push_chores_new = push_chores_new
        self._push_chores_reminders = push_chores_reminders
        self._tmdb_key = tmdb_key
        self._user_id = user_id
        self._username = username
        self._weekly_allowance = weekly_allowance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def emoji(self):
        """Gets the emoji of this User.


        :return: The emoji of this User.
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this User.


        :param emoji: The emoji of this User.
        :type emoji: str
        """

        self._emoji = emoji

    @property
    def enable_allowance(self):
        """Gets the enable_allowance of this User.


        :return: The enable_allowance of this User.
        :rtype: bool
        """
        return self._enable_allowance

    @enable_allowance.setter
    def enable_allowance(self, enable_allowance):
        """Sets the enable_allowance of this User.


        :param enable_allowance: The enable_allowance of this User.
        :type enable_allowance: bool
        """

        self._enable_allowance = enable_allowance

    @property
    def enable_behavior_chart(self):
        """Gets the enable_behavior_chart of this User.


        :return: The enable_behavior_chart of this User.
        :rtype: bool
        """
        return self._enable_behavior_chart

    @enable_behavior_chart.setter
    def enable_behavior_chart(self, enable_behavior_chart):
        """Sets the enable_behavior_chart of this User.


        :param enable_behavior_chart: The enable_behavior_chart of this User.
        :type enable_behavior_chart: bool
        """

        self._enable_behavior_chart = enable_behavior_chart

    @property
    def enable_chores(self):
        """Gets the enable_chores of this User.


        :return: The enable_chores of this User.
        :rtype: bool
        """
        return self._enable_chores

    @enable_chores.setter
    def enable_chores(self, enable_chores):
        """Sets the enable_chores of this User.


        :param enable_chores: The enable_chores of this User.
        :type enable_chores: bool
        """

        self._enable_chores = enable_chores

    @property
    def enable_no_ads(self):
        """Gets the enable_no_ads of this User.


        :return: The enable_no_ads of this User.
        :rtype: bool
        """
        return self._enable_no_ads

    @enable_no_ads.setter
    def enable_no_ads(self, enable_no_ads):
        """Sets the enable_no_ads of this User.


        :param enable_no_ads: The enable_no_ads of this User.
        :type enable_no_ads: bool
        """

        self._enable_no_ads = enable_no_ads

    @property
    def enable_object_detection(self):
        """Gets the enable_object_detection of this User.


        :return: The enable_object_detection of this User.
        :rtype: bool
        """
        return self._enable_object_detection

    @enable_object_detection.setter
    def enable_object_detection(self, enable_object_detection):
        """Sets the enable_object_detection of this User.


        :param enable_object_detection: The enable_object_detection of this User.
        :type enable_object_detection: bool
        """

        self._enable_object_detection = enable_object_detection

    @property
    def enable_tmdb(self):
        """Gets the enable_tmdb of this User.


        :return: The enable_tmdb of this User.
        :rtype: bool
        """
        return self._enable_tmdb

    @enable_tmdb.setter
    def enable_tmdb(self, enable_tmdb):
        """Sets the enable_tmdb of this User.


        :param enable_tmdb: The enable_tmdb of this User.
        :type enable_tmdb: bool
        """

        self._enable_tmdb = enable_tmdb

    @property
    def first_name(self):
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def home_id(self):
        """Gets the home_id of this User.


        :return: The home_id of this User.
        :rtype: int
        """
        return self._home_id

    @home_id.setter
    def home_id(self, home_id):
        """Sets the home_id of this User.


        :param home_id: The home_id of this User.
        :type home_id: int
        """

        self._home_id = home_id

    @property
    def is_active(self):
        """Gets the is_active of this User.


        :return: The is_active of this User.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this User.


        :param is_active: The is_active of this User.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_admin(self):
        """Gets the is_admin of this User.


        :return: The is_admin of this User.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this User.


        :param is_admin: The is_admin of this User.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_banned(self):
        """Gets the is_banned of this User.


        :return: The is_banned of this User.
        :rtype: bool
        """
        return self._is_banned

    @is_banned.setter
    def is_banned(self, is_banned):
        """Sets the is_banned of this User.


        :param is_banned: The is_banned of this User.
        :type is_banned: bool
        """

        self._is_banned = is_banned

    @property
    def is_child(self):
        """Gets the is_child of this User.


        :return: The is_child of this User.
        :rtype: bool
        """
        return self._is_child

    @is_child.setter
    def is_child(self, is_child):
        """Sets the is_child of this User.


        :param is_child: The is_child of this User.
        :type is_child: bool
        """

        self._is_child = is_child

    @property
    def is_disabled(self):
        """Gets the is_disabled of this User.


        :return: The is_disabled of this User.
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this User.


        :param is_disabled: The is_disabled of this User.
        :type is_disabled: bool
        """

        self._is_disabled = is_disabled

    @property
    def is_locked(self):
        """Gets the is_locked of this User.


        :return: The is_locked of this User.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this User.


        :param is_locked: The is_locked of this User.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def is_master(self):
        """Gets the is_master of this User.


        :return: The is_master of this User.
        :rtype: bool
        """
        return self._is_master

    @is_master.setter
    def is_master(self, is_master):
        """Sets the is_master of this User.


        :param is_master: The is_master of this User.
        :type is_master: bool
        """

        self._is_master = is_master

    @property
    def last_name(self):
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def master_id(self):
        """Gets the master_id of this User.


        :return: The master_id of this User.
        :rtype: int
        """
        return self._master_id

    @master_id.setter
    def master_id(self, master_id):
        """Sets the master_id of this User.


        :param master_id: The master_id of this User.
        :type master_id: int
        """

        self._master_id = master_id

    @property
    def push_allowance(self):
        """Gets the push_allowance of this User.


        :return: The push_allowance of this User.
        :rtype: bool
        """
        return self._push_allowance

    @push_allowance.setter
    def push_allowance(self, push_allowance):
        """Sets the push_allowance of this User.


        :param push_allowance: The push_allowance of this User.
        :type push_allowance: bool
        """

        self._push_allowance = push_allowance

    @property
    def push_allowance_new(self):
        """Gets the push_allowance_new of this User.


        :return: The push_allowance_new of this User.
        :rtype: bool
        """
        return self._push_allowance_new

    @push_allowance_new.setter
    def push_allowance_new(self, push_allowance_new):
        """Sets the push_allowance_new of this User.


        :param push_allowance_new: The push_allowance_new of this User.
        :type push_allowance_new: bool
        """

        self._push_allowance_new = push_allowance_new

    @property
    def push_chores(self):
        """Gets the push_chores of this User.


        :return: The push_chores of this User.
        :rtype: bool
        """
        return self._push_chores

    @push_chores.setter
    def push_chores(self, push_chores):
        """Sets the push_chores of this User.


        :param push_chores: The push_chores of this User.
        :type push_chores: bool
        """

        self._push_chores = push_chores

    @property
    def push_chores_new(self):
        """Gets the push_chores_new of this User.


        :return: The push_chores_new of this User.
        :rtype: bool
        """
        return self._push_chores_new

    @push_chores_new.setter
    def push_chores_new(self, push_chores_new):
        """Sets the push_chores_new of this User.


        :param push_chores_new: The push_chores_new of this User.
        :type push_chores_new: bool
        """

        self._push_chores_new = push_chores_new

    @property
    def push_chores_reminders(self):
        """Gets the push_chores_reminders of this User.


        :return: The push_chores_reminders of this User.
        :rtype: bool
        """
        return self._push_chores_reminders

    @push_chores_reminders.setter
    def push_chores_reminders(self, push_chores_reminders):
        """Sets the push_chores_reminders of this User.


        :param push_chores_reminders: The push_chores_reminders of this User.
        :type push_chores_reminders: bool
        """

        self._push_chores_reminders = push_chores_reminders

    @property
    def tmdb_key(self):
        """Gets the tmdb_key of this User.


        :return: The tmdb_key of this User.
        :rtype: str
        """
        return self._tmdb_key

    @tmdb_key.setter
    def tmdb_key(self, tmdb_key):
        """Sets the tmdb_key of this User.


        :param tmdb_key: The tmdb_key of this User.
        :type tmdb_key: str
        """

        self._tmdb_key = tmdb_key

    @property
    def user_id(self):
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def weekly_allowance(self):
        """Gets the weekly_allowance of this User.


        :return: The weekly_allowance of this User.
        :rtype: int
        """
        return self._weekly_allowance

    @weekly_allowance.setter
    def weekly_allowance(self, weekly_allowance):
        """Sets the weekly_allowance of this User.


        :param weekly_allowance: The weekly_allowance of this User.
        :type weekly_allowance: int
        """

        self._weekly_allowance = weekly_allowance
