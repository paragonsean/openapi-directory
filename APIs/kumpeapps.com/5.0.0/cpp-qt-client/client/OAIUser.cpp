/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_emoji_isSet = false;
    m_emoji_isValid = false;

    m_enable_allowance_isSet = false;
    m_enable_allowance_isValid = false;

    m_enable_behavior_chart_isSet = false;
    m_enable_behavior_chart_isValid = false;

    m_enable_chores_isSet = false;
    m_enable_chores_isValid = false;

    m_enable_no_ads_isSet = false;
    m_enable_no_ads_isValid = false;

    m_enable_object_detection_isSet = false;
    m_enable_object_detection_isValid = false;

    m_enable_tmdb_isSet = false;
    m_enable_tmdb_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_home_id_isSet = false;
    m_home_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_is_banned_isSet = false;
    m_is_banned_isValid = false;

    m_is_child_isSet = false;
    m_is_child_isValid = false;

    m_is_disabled_isSet = false;
    m_is_disabled_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_is_master_isSet = false;
    m_is_master_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_master_id_isSet = false;
    m_master_id_isValid = false;

    m_push_allowance_isSet = false;
    m_push_allowance_isValid = false;

    m_push_allowance_new_isSet = false;
    m_push_allowance_new_isValid = false;

    m_push_chores_isSet = false;
    m_push_chores_isValid = false;

    m_push_chores_new_isSet = false;
    m_push_chores_new_isValid = false;

    m_push_chores_reminders_isSet = false;
    m_push_chores_reminders_isValid = false;

    m_tmdb_key_isSet = false;
    m_tmdb_key_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_weekly_allowance_isSet = false;
    m_weekly_allowance_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_emoji_isValid = ::OpenAPI::fromJsonValue(m_emoji, json[QString("emoji")]);
    m_emoji_isSet = !json[QString("emoji")].isNull() && m_emoji_isValid;

    m_enable_allowance_isValid = ::OpenAPI::fromJsonValue(m_enable_allowance, json[QString("enableAllowance")]);
    m_enable_allowance_isSet = !json[QString("enableAllowance")].isNull() && m_enable_allowance_isValid;

    m_enable_behavior_chart_isValid = ::OpenAPI::fromJsonValue(m_enable_behavior_chart, json[QString("enableBehaviorChart")]);
    m_enable_behavior_chart_isSet = !json[QString("enableBehaviorChart")].isNull() && m_enable_behavior_chart_isValid;

    m_enable_chores_isValid = ::OpenAPI::fromJsonValue(m_enable_chores, json[QString("enableChores")]);
    m_enable_chores_isSet = !json[QString("enableChores")].isNull() && m_enable_chores_isValid;

    m_enable_no_ads_isValid = ::OpenAPI::fromJsonValue(m_enable_no_ads, json[QString("enableNoAds")]);
    m_enable_no_ads_isSet = !json[QString("enableNoAds")].isNull() && m_enable_no_ads_isValid;

    m_enable_object_detection_isValid = ::OpenAPI::fromJsonValue(m_enable_object_detection, json[QString("enableObjectDetection")]);
    m_enable_object_detection_isSet = !json[QString("enableObjectDetection")].isNull() && m_enable_object_detection_isValid;

    m_enable_tmdb_isValid = ::OpenAPI::fromJsonValue(m_enable_tmdb, json[QString("enableTmdb")]);
    m_enable_tmdb_isSet = !json[QString("enableTmdb")].isNull() && m_enable_tmdb_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_home_id_isValid = ::OpenAPI::fromJsonValue(m_home_id, json[QString("homeId")]);
    m_home_id_isSet = !json[QString("homeId")].isNull() && m_home_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("isAdmin")]);
    m_is_admin_isSet = !json[QString("isAdmin")].isNull() && m_is_admin_isValid;

    m_is_banned_isValid = ::OpenAPI::fromJsonValue(m_is_banned, json[QString("isBanned")]);
    m_is_banned_isSet = !json[QString("isBanned")].isNull() && m_is_banned_isValid;

    m_is_child_isValid = ::OpenAPI::fromJsonValue(m_is_child, json[QString("isChild")]);
    m_is_child_isSet = !json[QString("isChild")].isNull() && m_is_child_isValid;

    m_is_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_disabled, json[QString("isDisabled")]);
    m_is_disabled_isSet = !json[QString("isDisabled")].isNull() && m_is_disabled_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("isLocked")]);
    m_is_locked_isSet = !json[QString("isLocked")].isNull() && m_is_locked_isValid;

    m_is_master_isValid = ::OpenAPI::fromJsonValue(m_is_master, json[QString("isMaster")]);
    m_is_master_isSet = !json[QString("isMaster")].isNull() && m_is_master_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_master_id_isValid = ::OpenAPI::fromJsonValue(m_master_id, json[QString("masterId")]);
    m_master_id_isSet = !json[QString("masterId")].isNull() && m_master_id_isValid;

    m_push_allowance_isValid = ::OpenAPI::fromJsonValue(m_push_allowance, json[QString("pushAllowance")]);
    m_push_allowance_isSet = !json[QString("pushAllowance")].isNull() && m_push_allowance_isValid;

    m_push_allowance_new_isValid = ::OpenAPI::fromJsonValue(m_push_allowance_new, json[QString("pushAllowanceNew")]);
    m_push_allowance_new_isSet = !json[QString("pushAllowanceNew")].isNull() && m_push_allowance_new_isValid;

    m_push_chores_isValid = ::OpenAPI::fromJsonValue(m_push_chores, json[QString("pushChores")]);
    m_push_chores_isSet = !json[QString("pushChores")].isNull() && m_push_chores_isValid;

    m_push_chores_new_isValid = ::OpenAPI::fromJsonValue(m_push_chores_new, json[QString("pushChoresNew")]);
    m_push_chores_new_isSet = !json[QString("pushChoresNew")].isNull() && m_push_chores_new_isValid;

    m_push_chores_reminders_isValid = ::OpenAPI::fromJsonValue(m_push_chores_reminders, json[QString("pushChoresReminders")]);
    m_push_chores_reminders_isSet = !json[QString("pushChoresReminders")].isNull() && m_push_chores_reminders_isValid;

    m_tmdb_key_isValid = ::OpenAPI::fromJsonValue(m_tmdb_key, json[QString("tmdbKey")]);
    m_tmdb_key_isSet = !json[QString("tmdbKey")].isNull() && m_tmdb_key_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_weekly_allowance_isValid = ::OpenAPI::fromJsonValue(m_weekly_allowance, json[QString("weeklyAllowance")]);
    m_weekly_allowance_isSet = !json[QString("weeklyAllowance")].isNull() && m_weekly_allowance_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_emoji_isSet) {
        obj.insert(QString("emoji"), ::OpenAPI::toJsonValue(m_emoji));
    }
    if (m_enable_allowance_isSet) {
        obj.insert(QString("enableAllowance"), ::OpenAPI::toJsonValue(m_enable_allowance));
    }
    if (m_enable_behavior_chart_isSet) {
        obj.insert(QString("enableBehaviorChart"), ::OpenAPI::toJsonValue(m_enable_behavior_chart));
    }
    if (m_enable_chores_isSet) {
        obj.insert(QString("enableChores"), ::OpenAPI::toJsonValue(m_enable_chores));
    }
    if (m_enable_no_ads_isSet) {
        obj.insert(QString("enableNoAds"), ::OpenAPI::toJsonValue(m_enable_no_ads));
    }
    if (m_enable_object_detection_isSet) {
        obj.insert(QString("enableObjectDetection"), ::OpenAPI::toJsonValue(m_enable_object_detection));
    }
    if (m_enable_tmdb_isSet) {
        obj.insert(QString("enableTmdb"), ::OpenAPI::toJsonValue(m_enable_tmdb));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_home_id_isSet) {
        obj.insert(QString("homeId"), ::OpenAPI::toJsonValue(m_home_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("isAdmin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_is_banned_isSet) {
        obj.insert(QString("isBanned"), ::OpenAPI::toJsonValue(m_is_banned));
    }
    if (m_is_child_isSet) {
        obj.insert(QString("isChild"), ::OpenAPI::toJsonValue(m_is_child));
    }
    if (m_is_disabled_isSet) {
        obj.insert(QString("isDisabled"), ::OpenAPI::toJsonValue(m_is_disabled));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("isLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_is_master_isSet) {
        obj.insert(QString("isMaster"), ::OpenAPI::toJsonValue(m_is_master));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_master_id_isSet) {
        obj.insert(QString("masterId"), ::OpenAPI::toJsonValue(m_master_id));
    }
    if (m_push_allowance_isSet) {
        obj.insert(QString("pushAllowance"), ::OpenAPI::toJsonValue(m_push_allowance));
    }
    if (m_push_allowance_new_isSet) {
        obj.insert(QString("pushAllowanceNew"), ::OpenAPI::toJsonValue(m_push_allowance_new));
    }
    if (m_push_chores_isSet) {
        obj.insert(QString("pushChores"), ::OpenAPI::toJsonValue(m_push_chores));
    }
    if (m_push_chores_new_isSet) {
        obj.insert(QString("pushChoresNew"), ::OpenAPI::toJsonValue(m_push_chores_new));
    }
    if (m_push_chores_reminders_isSet) {
        obj.insert(QString("pushChoresReminders"), ::OpenAPI::toJsonValue(m_push_chores_reminders));
    }
    if (m_tmdb_key_isSet) {
        obj.insert(QString("tmdbKey"), ::OpenAPI::toJsonValue(m_tmdb_key));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_weekly_allowance_isSet) {
        obj.insert(QString("weeklyAllowance"), ::OpenAPI::toJsonValue(m_weekly_allowance));
    }
    return obj;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getEmoji() const {
    return m_emoji;
}
void OAIUser::setEmoji(const QString &emoji) {
    m_emoji = emoji;
    m_emoji_isSet = true;
}

bool OAIUser::is_emoji_Set() const{
    return m_emoji_isSet;
}

bool OAIUser::is_emoji_Valid() const{
    return m_emoji_isValid;
}

bool OAIUser::isEnableAllowance() const {
    return m_enable_allowance;
}
void OAIUser::setEnableAllowance(const bool &enable_allowance) {
    m_enable_allowance = enable_allowance;
    m_enable_allowance_isSet = true;
}

bool OAIUser::is_enable_allowance_Set() const{
    return m_enable_allowance_isSet;
}

bool OAIUser::is_enable_allowance_Valid() const{
    return m_enable_allowance_isValid;
}

bool OAIUser::isEnableBehaviorChart() const {
    return m_enable_behavior_chart;
}
void OAIUser::setEnableBehaviorChart(const bool &enable_behavior_chart) {
    m_enable_behavior_chart = enable_behavior_chart;
    m_enable_behavior_chart_isSet = true;
}

bool OAIUser::is_enable_behavior_chart_Set() const{
    return m_enable_behavior_chart_isSet;
}

bool OAIUser::is_enable_behavior_chart_Valid() const{
    return m_enable_behavior_chart_isValid;
}

bool OAIUser::isEnableChores() const {
    return m_enable_chores;
}
void OAIUser::setEnableChores(const bool &enable_chores) {
    m_enable_chores = enable_chores;
    m_enable_chores_isSet = true;
}

bool OAIUser::is_enable_chores_Set() const{
    return m_enable_chores_isSet;
}

bool OAIUser::is_enable_chores_Valid() const{
    return m_enable_chores_isValid;
}

bool OAIUser::isEnableNoAds() const {
    return m_enable_no_ads;
}
void OAIUser::setEnableNoAds(const bool &enable_no_ads) {
    m_enable_no_ads = enable_no_ads;
    m_enable_no_ads_isSet = true;
}

bool OAIUser::is_enable_no_ads_Set() const{
    return m_enable_no_ads_isSet;
}

bool OAIUser::is_enable_no_ads_Valid() const{
    return m_enable_no_ads_isValid;
}

bool OAIUser::isEnableObjectDetection() const {
    return m_enable_object_detection;
}
void OAIUser::setEnableObjectDetection(const bool &enable_object_detection) {
    m_enable_object_detection = enable_object_detection;
    m_enable_object_detection_isSet = true;
}

bool OAIUser::is_enable_object_detection_Set() const{
    return m_enable_object_detection_isSet;
}

bool OAIUser::is_enable_object_detection_Valid() const{
    return m_enable_object_detection_isValid;
}

bool OAIUser::isEnableTmdb() const {
    return m_enable_tmdb;
}
void OAIUser::setEnableTmdb(const bool &enable_tmdb) {
    m_enable_tmdb = enable_tmdb;
    m_enable_tmdb_isSet = true;
}

bool OAIUser::is_enable_tmdb_Set() const{
    return m_enable_tmdb_isSet;
}

bool OAIUser::is_enable_tmdb_Valid() const{
    return m_enable_tmdb_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIUser::getHomeId() const {
    return m_home_id;
}
void OAIUser::setHomeId(const qint32 &home_id) {
    m_home_id = home_id;
    m_home_id_isSet = true;
}

bool OAIUser::is_home_id_Set() const{
    return m_home_id_isSet;
}

bool OAIUser::is_home_id_Valid() const{
    return m_home_id_isValid;
}

bool OAIUser::isIsActive() const {
    return m_is_active;
}
void OAIUser::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIUser::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIUser::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIUser::isIsAdmin() const {
    return m_is_admin;
}
void OAIUser::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIUser::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIUser::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

bool OAIUser::isIsBanned() const {
    return m_is_banned;
}
void OAIUser::setIsBanned(const bool &is_banned) {
    m_is_banned = is_banned;
    m_is_banned_isSet = true;
}

bool OAIUser::is_is_banned_Set() const{
    return m_is_banned_isSet;
}

bool OAIUser::is_is_banned_Valid() const{
    return m_is_banned_isValid;
}

bool OAIUser::isIsChild() const {
    return m_is_child;
}
void OAIUser::setIsChild(const bool &is_child) {
    m_is_child = is_child;
    m_is_child_isSet = true;
}

bool OAIUser::is_is_child_Set() const{
    return m_is_child_isSet;
}

bool OAIUser::is_is_child_Valid() const{
    return m_is_child_isValid;
}

bool OAIUser::isIsDisabled() const {
    return m_is_disabled;
}
void OAIUser::setIsDisabled(const bool &is_disabled) {
    m_is_disabled = is_disabled;
    m_is_disabled_isSet = true;
}

bool OAIUser::is_is_disabled_Set() const{
    return m_is_disabled_isSet;
}

bool OAIUser::is_is_disabled_Valid() const{
    return m_is_disabled_isValid;
}

bool OAIUser::isIsLocked() const {
    return m_is_locked;
}
void OAIUser::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIUser::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIUser::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

bool OAIUser::isIsMaster() const {
    return m_is_master;
}
void OAIUser::setIsMaster(const bool &is_master) {
    m_is_master = is_master;
    m_is_master_isSet = true;
}

bool OAIUser::is_is_master_Set() const{
    return m_is_master_isSet;
}

bool OAIUser::is_is_master_Valid() const{
    return m_is_master_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIUser::getMasterId() const {
    return m_master_id;
}
void OAIUser::setMasterId(const qint32 &master_id) {
    m_master_id = master_id;
    m_master_id_isSet = true;
}

bool OAIUser::is_master_id_Set() const{
    return m_master_id_isSet;
}

bool OAIUser::is_master_id_Valid() const{
    return m_master_id_isValid;
}

bool OAIUser::isPushAllowance() const {
    return m_push_allowance;
}
void OAIUser::setPushAllowance(const bool &push_allowance) {
    m_push_allowance = push_allowance;
    m_push_allowance_isSet = true;
}

bool OAIUser::is_push_allowance_Set() const{
    return m_push_allowance_isSet;
}

bool OAIUser::is_push_allowance_Valid() const{
    return m_push_allowance_isValid;
}

bool OAIUser::isPushAllowanceNew() const {
    return m_push_allowance_new;
}
void OAIUser::setPushAllowanceNew(const bool &push_allowance_new) {
    m_push_allowance_new = push_allowance_new;
    m_push_allowance_new_isSet = true;
}

bool OAIUser::is_push_allowance_new_Set() const{
    return m_push_allowance_new_isSet;
}

bool OAIUser::is_push_allowance_new_Valid() const{
    return m_push_allowance_new_isValid;
}

bool OAIUser::isPushChores() const {
    return m_push_chores;
}
void OAIUser::setPushChores(const bool &push_chores) {
    m_push_chores = push_chores;
    m_push_chores_isSet = true;
}

bool OAIUser::is_push_chores_Set() const{
    return m_push_chores_isSet;
}

bool OAIUser::is_push_chores_Valid() const{
    return m_push_chores_isValid;
}

bool OAIUser::isPushChoresNew() const {
    return m_push_chores_new;
}
void OAIUser::setPushChoresNew(const bool &push_chores_new) {
    m_push_chores_new = push_chores_new;
    m_push_chores_new_isSet = true;
}

bool OAIUser::is_push_chores_new_Set() const{
    return m_push_chores_new_isSet;
}

bool OAIUser::is_push_chores_new_Valid() const{
    return m_push_chores_new_isValid;
}

bool OAIUser::isPushChoresReminders() const {
    return m_push_chores_reminders;
}
void OAIUser::setPushChoresReminders(const bool &push_chores_reminders) {
    m_push_chores_reminders = push_chores_reminders;
    m_push_chores_reminders_isSet = true;
}

bool OAIUser::is_push_chores_reminders_Set() const{
    return m_push_chores_reminders_isSet;
}

bool OAIUser::is_push_chores_reminders_Valid() const{
    return m_push_chores_reminders_isValid;
}

QString OAIUser::getTmdbKey() const {
    return m_tmdb_key;
}
void OAIUser::setTmdbKey(const QString &tmdb_key) {
    m_tmdb_key = tmdb_key;
    m_tmdb_key_isSet = true;
}

bool OAIUser::is_tmdb_key_Set() const{
    return m_tmdb_key_isSet;
}

bool OAIUser::is_tmdb_key_Valid() const{
    return m_tmdb_key_isValid;
}

qint32 OAIUser::getUserId() const {
    return m_user_id;
}
void OAIUser::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUser::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUser::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

qint32 OAIUser::getWeeklyAllowance() const {
    return m_weekly_allowance;
}
void OAIUser::setWeeklyAllowance(const qint32 &weekly_allowance) {
    m_weekly_allowance = weekly_allowance;
    m_weekly_allowance_isSet = true;
}

bool OAIUser::is_weekly_allowance_Set() const{
    return m_weekly_allowance_isSet;
}

bool OAIUser::is_weekly_allowance_Valid() const{
    return m_weekly_allowance_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_behavior_chart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_chores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_no_ads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_object_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_tmdb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_banned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_child_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_master_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_allowance_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_chores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_chores_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_chores_reminders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tmdb_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
