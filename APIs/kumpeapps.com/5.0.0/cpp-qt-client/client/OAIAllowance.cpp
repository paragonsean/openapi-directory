/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowance::OAIAllowance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowance::OAIAllowance() {
    this->initializeModel();
}

OAIAllowance::~OAIAllowance() {}

void OAIAllowance::initializeModel() {

    m_allowance_transaction_isSet = false;
    m_allowance_transaction_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIAllowance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllowance::fromJsonObject(QJsonObject json) {

    m_allowance_transaction_isValid = ::OpenAPI::fromJsonValue(m_allowance_transaction, json[QString("allowanceTransaction")]);
    m_allowance_transaction_isSet = !json[QString("allowanceTransaction")].isNull() && m_allowance_transaction_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIAllowance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllowance::asJsonObject() const {
    QJsonObject obj;
    if (m_allowance_transaction.size() > 0) {
        obj.insert(QString("allowanceTransaction"), ::OpenAPI::toJsonValue(m_allowance_transaction));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QList<OAIAllowance_allowanceTransaction> OAIAllowance::getAllowanceTransaction() const {
    return m_allowance_transaction;
}
void OAIAllowance::setAllowanceTransaction(const QList<OAIAllowance_allowanceTransaction> &allowance_transaction) {
    m_allowance_transaction = allowance_transaction;
    m_allowance_transaction_isSet = true;
}

bool OAIAllowance::is_allowance_transaction_Set() const{
    return m_allowance_transaction_isSet;
}

bool OAIAllowance::is_allowance_transaction_Valid() const{
    return m_allowance_transaction_isValid;
}

qint32 OAIAllowance::getBalance() const {
    return m_balance;
}
void OAIAllowance::setBalance(const qint32 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIAllowance::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIAllowance::is_balance_Valid() const{
    return m_balance_isValid;
}

qint32 OAIAllowance::getId() const {
    return m_id;
}
void OAIAllowance::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAllowance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAllowance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAllowance::getLastUpdated() const {
    return m_last_updated;
}
void OAIAllowance::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAllowance::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAllowance::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIAllowance::getSuccess() const {
    return m_success;
}
void OAIAllowance::setSuccess(const qint32 &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIAllowance::is_success_Set() const{
    return m_success_isSet;
}

bool OAIAllowance::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIAllowance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowance_transaction.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllowance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
