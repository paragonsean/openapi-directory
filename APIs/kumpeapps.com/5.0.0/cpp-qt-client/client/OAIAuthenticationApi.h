/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationApi_H
#define OAI_OAIAuthenticationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI403.h"
#include "OAI449.h"
#include "OAIInline_response_201.h"
#include "OAIInline_response_201_1.h"
#include "OAIInline_response_202.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationApi(const int timeOut = 0);
    ~OAIAuthenticationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_key QString [required]
    * @param[in]  comments QString [optional]
    */
    Q_DECL_DEPRECATED virtual void appkeyPatch(const QString &app_key, const ::OpenAPI::OptionalParam<QString> &comments = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  supports_yubikey bool [required]
    */
    Q_DECL_DEPRECATED virtual void appkeyPost(const QString &username, const QString &password, const bool &supports_yubikey);

    /**
    * @param[in]  app_key QString [required]
    */
    Q_DECL_DEPRECATED virtual void appkeyPut(const QString &app_key);

    /**
    * @param[in]  app_key QString [required]
    * @param[in]  comments QString [optional]
    */
    virtual void authAppkeyPatch(const QString &app_key, const ::OpenAPI::OptionalParam<QString> &comments = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  supports_yubikey bool [required]
    */
    virtual void authAppkeyPost(const QString &username, const QString &password, const bool &supports_yubikey);

    /**
    * @param[in]  app_key QString [required]
    */
    virtual void authAppkeyPut(const QString &app_key);

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  otp QString [optional]
    * @param[in]  device_name QString [optional]
    * @param[in]  identifier_for_vendor QString [optional]
    */
    virtual void authAuthkeyGet(const QString &username, const QString &password, const ::OpenAPI::OptionalParam<QString> &otp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identifier_for_vendor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_key QString [required]
    * @param[in]  comments QString [optional]
    */
    virtual void authAuthkeyPatch(const QString &auth_key, const ::OpenAPI::OptionalParam<QString> &comments = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  otp QString [optional]
    */
    virtual void authAuthkeyPost(const QString &username, const QString &password, const ::OpenAPI::OptionalParam<QString> &otp = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_key QString [required]
    */
    virtual void authAuthkeyPut(const QString &auth_key);

    /**
    * @param[in]  otp QString [required]
    */
    virtual void authVerifyotpGet(const QString &otp);

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  otp QString [optional]
    */
    Q_DECL_DEPRECATED virtual void authkeyGet(const QString &username, const QString &password, const ::OpenAPI::OptionalParam<QString> &otp = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_key QString [required]
    * @param[in]  comments QString [optional]
    */
    Q_DECL_DEPRECATED virtual void authkeyPatch(const QString &auth_key, const ::OpenAPI::OptionalParam<QString> &comments = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  otp QString [optional]
    */
    Q_DECL_DEPRECATED virtual void authkeyPost(const QString &username, const QString &password, const ::OpenAPI::OptionalParam<QString> &otp = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  auth_key QString [required]
    */
    Q_DECL_DEPRECATED virtual void authkeyPut(const QString &auth_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appkeyPatchCallback(OAIHttpRequestWorker *worker);
    void appkeyPostCallback(OAIHttpRequestWorker *worker);
    void appkeyPutCallback(OAIHttpRequestWorker *worker);
    void authAppkeyPatchCallback(OAIHttpRequestWorker *worker);
    void authAppkeyPostCallback(OAIHttpRequestWorker *worker);
    void authAppkeyPutCallback(OAIHttpRequestWorker *worker);
    void authAuthkeyGetCallback(OAIHttpRequestWorker *worker);
    void authAuthkeyPatchCallback(OAIHttpRequestWorker *worker);
    void authAuthkeyPostCallback(OAIHttpRequestWorker *worker);
    void authAuthkeyPutCallback(OAIHttpRequestWorker *worker);
    void authVerifyotpGetCallback(OAIHttpRequestWorker *worker);
    void authkeyGetCallback(OAIHttpRequestWorker *worker);
    void authkeyPatchCallback(OAIHttpRequestWorker *worker);
    void authkeyPostCallback(OAIHttpRequestWorker *worker);
    void authkeyPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appkeyPatchSignal(OAIInline_response_202 summary);
    void appkeyPostSignal(OAIInline_response_201 summary);
    void appkeyPutSignal(OAIInline_response_202 summary);
    void authAppkeyPatchSignal(OAIInline_response_202 summary);
    void authAppkeyPostSignal(OAIInline_response_201 summary);
    void authAppkeyPutSignal(OAIInline_response_202 summary);
    void authAuthkeyGetSignal(OAIInline_response_201_1 summary);
    void authAuthkeyPatchSignal(OAIInline_response_202 summary);
    void authAuthkeyPostSignal(OAIInline_response_201_1 summary);
    void authAuthkeyPutSignal(OAIInline_response_202 summary);
    void authVerifyotpGetSignal();
    void authkeyGetSignal(OAIInline_response_201_1 summary);
    void authkeyPatchSignal(OAIInline_response_202 summary);
    void authkeyPostSignal(OAIInline_response_201_1 summary);
    void authkeyPutSignal(OAIInline_response_202 summary);


    void appkeyPatchSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_202 summary);
    void appkeyPostSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_201 summary);
    void appkeyPutSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_202 summary);
    void authAppkeyPatchSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_202 summary);
    void authAppkeyPostSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_201 summary);
    void authAppkeyPutSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_202 summary);
    void authAuthkeyGetSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_201_1 summary);
    void authAuthkeyPatchSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_202 summary);
    void authAuthkeyPostSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_201_1 summary);
    void authAuthkeyPutSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_202 summary);
    void authVerifyotpGetSignalFull(OAIHttpRequestWorker *worker);
    void authkeyGetSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_201_1 summary);
    void authkeyPatchSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_202 summary);
    void authkeyPostSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_201_1 summary);
    void authkeyPutSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_202 summary);

    Q_DECL_DEPRECATED_X("Use appkeyPatchSignalError() instead")
    void appkeyPatchSignalE(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appkeyPatchSignalError(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appkeyPostSignalError() instead")
    void appkeyPostSignalE(OAIInline_response_201 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appkeyPostSignalError(OAIInline_response_201 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appkeyPutSignalError() instead")
    void appkeyPutSignalE(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appkeyPutSignalError(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAppkeyPatchSignalError() instead")
    void authAppkeyPatchSignalE(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authAppkeyPatchSignalError(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAppkeyPostSignalError() instead")
    void authAppkeyPostSignalE(OAIInline_response_201 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authAppkeyPostSignalError(OAIInline_response_201 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAppkeyPutSignalError() instead")
    void authAppkeyPutSignalE(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authAppkeyPutSignalError(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAuthkeyGetSignalError() instead")
    void authAuthkeyGetSignalE(OAIInline_response_201_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authAuthkeyGetSignalError(OAIInline_response_201_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAuthkeyPatchSignalError() instead")
    void authAuthkeyPatchSignalE(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authAuthkeyPatchSignalError(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAuthkeyPostSignalError() instead")
    void authAuthkeyPostSignalE(OAIInline_response_201_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authAuthkeyPostSignalError(OAIInline_response_201_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAuthkeyPutSignalError() instead")
    void authAuthkeyPutSignalE(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authAuthkeyPutSignalError(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authVerifyotpGetSignalError() instead")
    void authVerifyotpGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authVerifyotpGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authkeyGetSignalError() instead")
    void authkeyGetSignalE(OAIInline_response_201_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authkeyGetSignalError(OAIInline_response_201_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authkeyPatchSignalError() instead")
    void authkeyPatchSignalE(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authkeyPatchSignalError(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authkeyPostSignalError() instead")
    void authkeyPostSignalE(OAIInline_response_201_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authkeyPostSignalError(OAIInline_response_201_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authkeyPutSignalError() instead")
    void authkeyPutSignalE(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authkeyPutSignalError(OAIInline_response_202 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appkeyPatchSignalErrorFull() instead")
    void appkeyPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appkeyPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appkeyPostSignalErrorFull() instead")
    void appkeyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appkeyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appkeyPutSignalErrorFull() instead")
    void appkeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appkeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAppkeyPatchSignalErrorFull() instead")
    void authAppkeyPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authAppkeyPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAppkeyPostSignalErrorFull() instead")
    void authAppkeyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authAppkeyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAppkeyPutSignalErrorFull() instead")
    void authAppkeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authAppkeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAuthkeyGetSignalErrorFull() instead")
    void authAuthkeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authAuthkeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAuthkeyPatchSignalErrorFull() instead")
    void authAuthkeyPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authAuthkeyPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAuthkeyPostSignalErrorFull() instead")
    void authAuthkeyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authAuthkeyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authAuthkeyPutSignalErrorFull() instead")
    void authAuthkeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authAuthkeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authVerifyotpGetSignalErrorFull() instead")
    void authVerifyotpGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authVerifyotpGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authkeyGetSignalErrorFull() instead")
    void authkeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authkeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authkeyPatchSignalErrorFull() instead")
    void authkeyPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authkeyPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authkeyPostSignalErrorFull() instead")
    void authkeyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authkeyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authkeyPutSignalErrorFull() instead")
    void authkeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authkeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
