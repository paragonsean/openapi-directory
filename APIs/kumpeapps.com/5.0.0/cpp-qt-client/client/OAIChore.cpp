/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChore::OAIChore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChore::OAIChore() {
    this->initializeModel();
}

OAIChore::~OAIChore() {}

void OAIChore::initializeModel() {

    m_ai_icon_isSet = false;
    m_ai_icon_isValid = false;

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_block_dash_isSet = false;
    m_block_dash_isValid = false;

    m_chore_description_isSet = false;
    m_chore_description_isValid = false;

    m_chore_name_isSet = false;
    m_chore_name_isValid = false;

    m_chore_number_isSet = false;
    m_chore_number_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_extra_allowance_isSet = false;
    m_extra_allowance_isValid = false;

    m_id_chore_list_isSet = false;
    m_id_chore_list_isValid = false;

    m_is_calendar_isSet = false;
    m_is_calendar_isValid = false;

    m_kid_isSet = false;
    m_kid_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_nfc_tag_isSet = false;
    m_nfc_tag_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_one_time_isSet = false;
    m_one_time_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;

    m_reassignable_isSet = false;
    m_reassignable_isValid = false;

    m_reassigned_isSet = false;
    m_reassigned_isValid = false;

    m_require_object_detection_isSet = false;
    m_require_object_detection_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stolen_isSet = false;
    m_stolen_isValid = false;

    m_stolen_by_isSet = false;
    m_stolen_by_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIChore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChore::fromJsonObject(QJsonObject json) {

    m_ai_icon_isValid = ::OpenAPI::fromJsonValue(m_ai_icon, json[QString("aiIcon")]);
    m_ai_icon_isSet = !json[QString("aiIcon")].isNull() && m_ai_icon_isValid;

    m_altitude_isValid = ::OpenAPI::fromJsonValue(m_altitude, json[QString("altitude")]);
    m_altitude_isSet = !json[QString("altitude")].isNull() && m_altitude_isValid;

    m_block_dash_isValid = ::OpenAPI::fromJsonValue(m_block_dash, json[QString("blockDash")]);
    m_block_dash_isSet = !json[QString("blockDash")].isNull() && m_block_dash_isValid;

    m_chore_description_isValid = ::OpenAPI::fromJsonValue(m_chore_description, json[QString("choreDescription")]);
    m_chore_description_isSet = !json[QString("choreDescription")].isNull() && m_chore_description_isValid;

    m_chore_name_isValid = ::OpenAPI::fromJsonValue(m_chore_name, json[QString("choreName")]);
    m_chore_name_isSet = !json[QString("choreName")].isNull() && m_chore_name_isValid;

    m_chore_number_isValid = ::OpenAPI::fromJsonValue(m_chore_number, json[QString("choreNumber")]);
    m_chore_number_isSet = !json[QString("choreNumber")].isNull() && m_chore_number_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_extra_allowance_isValid = ::OpenAPI::fromJsonValue(m_extra_allowance, json[QString("extraAllowance")]);
    m_extra_allowance_isSet = !json[QString("extraAllowance")].isNull() && m_extra_allowance_isValid;

    m_id_chore_list_isValid = ::OpenAPI::fromJsonValue(m_id_chore_list, json[QString("idChoreList")]);
    m_id_chore_list_isSet = !json[QString("idChoreList")].isNull() && m_id_chore_list_isValid;

    m_is_calendar_isValid = ::OpenAPI::fromJsonValue(m_is_calendar, json[QString("isCalendar")]);
    m_is_calendar_isSet = !json[QString("isCalendar")].isNull() && m_is_calendar_isValid;

    m_kid_isValid = ::OpenAPI::fromJsonValue(m_kid, json[QString("kid")]);
    m_kid_isSet = !json[QString("kid")].isNull() && m_kid_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_nfc_tag_isValid = ::OpenAPI::fromJsonValue(m_nfc_tag, json[QString("nfcTag")]);
    m_nfc_tag_isSet = !json[QString("nfcTag")].isNull() && m_nfc_tag_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_one_time_isValid = ::OpenAPI::fromJsonValue(m_one_time, json[QString("oneTime")]);
    m_one_time_isSet = !json[QString("oneTime")].isNull() && m_one_time_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;

    m_reassignable_isValid = ::OpenAPI::fromJsonValue(m_reassignable, json[QString("reassignable")]);
    m_reassignable_isSet = !json[QString("reassignable")].isNull() && m_reassignable_isValid;

    m_reassigned_isValid = ::OpenAPI::fromJsonValue(m_reassigned, json[QString("reassigned")]);
    m_reassigned_isSet = !json[QString("reassigned")].isNull() && m_reassigned_isValid;

    m_require_object_detection_isValid = ::OpenAPI::fromJsonValue(m_require_object_detection, json[QString("requireObjectDetection")]);
    m_require_object_detection_isSet = !json[QString("requireObjectDetection")].isNull() && m_require_object_detection_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stolen_isValid = ::OpenAPI::fromJsonValue(m_stolen, json[QString("stolen")]);
    m_stolen_isSet = !json[QString("stolen")].isNull() && m_stolen_isValid;

    m_stolen_by_isValid = ::OpenAPI::fromJsonValue(m_stolen_by, json[QString("stolenBy")]);
    m_stolen_by_isSet = !json[QString("stolenBy")].isNull() && m_stolen_by_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIChore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChore::asJsonObject() const {
    QJsonObject obj;
    if (m_ai_icon_isSet) {
        obj.insert(QString("aiIcon"), ::OpenAPI::toJsonValue(m_ai_icon));
    }
    if (m_altitude_isSet) {
        obj.insert(QString("altitude"), ::OpenAPI::toJsonValue(m_altitude));
    }
    if (m_block_dash_isSet) {
        obj.insert(QString("blockDash"), ::OpenAPI::toJsonValue(m_block_dash));
    }
    if (m_chore_description_isSet) {
        obj.insert(QString("choreDescription"), ::OpenAPI::toJsonValue(m_chore_description));
    }
    if (m_chore_name_isSet) {
        obj.insert(QString("choreName"), ::OpenAPI::toJsonValue(m_chore_name));
    }
    if (m_chore_number_isSet) {
        obj.insert(QString("choreNumber"), ::OpenAPI::toJsonValue(m_chore_number));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_extra_allowance_isSet) {
        obj.insert(QString("extraAllowance"), ::OpenAPI::toJsonValue(m_extra_allowance));
    }
    if (m_id_chore_list_isSet) {
        obj.insert(QString("idChoreList"), ::OpenAPI::toJsonValue(m_id_chore_list));
    }
    if (m_is_calendar_isSet) {
        obj.insert(QString("isCalendar"), ::OpenAPI::toJsonValue(m_is_calendar));
    }
    if (m_kid_isSet) {
        obj.insert(QString("kid"), ::OpenAPI::toJsonValue(m_kid));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_nfc_tag_isSet) {
        obj.insert(QString("nfcTag"), ::OpenAPI::toJsonValue(m_nfc_tag));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_one_time_isSet) {
        obj.insert(QString("oneTime"), ::OpenAPI::toJsonValue(m_one_time));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    if (m_reassignable_isSet) {
        obj.insert(QString("reassignable"), ::OpenAPI::toJsonValue(m_reassignable));
    }
    if (m_reassigned_isSet) {
        obj.insert(QString("reassigned"), ::OpenAPI::toJsonValue(m_reassigned));
    }
    if (m_require_object_detection_isSet) {
        obj.insert(QString("requireObjectDetection"), ::OpenAPI::toJsonValue(m_require_object_detection));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stolen_isSet) {
        obj.insert(QString("stolen"), ::OpenAPI::toJsonValue(m_stolen));
    }
    if (m_stolen_by_isSet) {
        obj.insert(QString("stolenBy"), ::OpenAPI::toJsonValue(m_stolen_by));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QString OAIChore::getAiIcon() const {
    return m_ai_icon;
}
void OAIChore::setAiIcon(const QString &ai_icon) {
    m_ai_icon = ai_icon;
    m_ai_icon_isSet = true;
}

bool OAIChore::is_ai_icon_Set() const{
    return m_ai_icon_isSet;
}

bool OAIChore::is_ai_icon_Valid() const{
    return m_ai_icon_isValid;
}

qint32 OAIChore::getAltitude() const {
    return m_altitude;
}
void OAIChore::setAltitude(const qint32 &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAIChore::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAIChore::is_altitude_Valid() const{
    return m_altitude_isValid;
}

bool OAIChore::isBlockDash() const {
    return m_block_dash;
}
void OAIChore::setBlockDash(const bool &block_dash) {
    m_block_dash = block_dash;
    m_block_dash_isSet = true;
}

bool OAIChore::is_block_dash_Set() const{
    return m_block_dash_isSet;
}

bool OAIChore::is_block_dash_Valid() const{
    return m_block_dash_isValid;
}

QString OAIChore::getChoreDescription() const {
    return m_chore_description;
}
void OAIChore::setChoreDescription(const QString &chore_description) {
    m_chore_description = chore_description;
    m_chore_description_isSet = true;
}

bool OAIChore::is_chore_description_Set() const{
    return m_chore_description_isSet;
}

bool OAIChore::is_chore_description_Valid() const{
    return m_chore_description_isValid;
}

QString OAIChore::getChoreName() const {
    return m_chore_name;
}
void OAIChore::setChoreName(const QString &chore_name) {
    m_chore_name = chore_name;
    m_chore_name_isSet = true;
}

bool OAIChore::is_chore_name_Set() const{
    return m_chore_name_isSet;
}

bool OAIChore::is_chore_name_Valid() const{
    return m_chore_name_isValid;
}

qint32 OAIChore::getChoreNumber() const {
    return m_chore_number;
}
void OAIChore::setChoreNumber(const qint32 &chore_number) {
    m_chore_number = chore_number;
    m_chore_number_isSet = true;
}

bool OAIChore::is_chore_number_Set() const{
    return m_chore_number_isSet;
}

bool OAIChore::is_chore_number_Valid() const{
    return m_chore_number_isValid;
}

QString OAIChore::getDay() const {
    return m_day;
}
void OAIChore::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIChore::is_day_Set() const{
    return m_day_isSet;
}

bool OAIChore::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIChore::getExtraAllowance() const {
    return m_extra_allowance;
}
void OAIChore::setExtraAllowance(const qint32 &extra_allowance) {
    m_extra_allowance = extra_allowance;
    m_extra_allowance_isSet = true;
}

bool OAIChore::is_extra_allowance_Set() const{
    return m_extra_allowance_isSet;
}

bool OAIChore::is_extra_allowance_Valid() const{
    return m_extra_allowance_isValid;
}

qint32 OAIChore::getIdChoreList() const {
    return m_id_chore_list;
}
void OAIChore::setIdChoreList(const qint32 &id_chore_list) {
    m_id_chore_list = id_chore_list;
    m_id_chore_list_isSet = true;
}

bool OAIChore::is_id_chore_list_Set() const{
    return m_id_chore_list_isSet;
}

bool OAIChore::is_id_chore_list_Valid() const{
    return m_id_chore_list_isValid;
}

bool OAIChore::isIsCalendar() const {
    return m_is_calendar;
}
void OAIChore::setIsCalendar(const bool &is_calendar) {
    m_is_calendar = is_calendar;
    m_is_calendar_isSet = true;
}

bool OAIChore::is_is_calendar_Set() const{
    return m_is_calendar_isSet;
}

bool OAIChore::is_is_calendar_Valid() const{
    return m_is_calendar_isValid;
}

QString OAIChore::getKid() const {
    return m_kid;
}
void OAIChore::setKid(const QString &kid) {
    m_kid = kid;
    m_kid_isSet = true;
}

bool OAIChore::is_kid_Set() const{
    return m_kid_isSet;
}

bool OAIChore::is_kid_Valid() const{
    return m_kid_isValid;
}

qint32 OAIChore::getLatitude() const {
    return m_latitude;
}
void OAIChore::setLatitude(const qint32 &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIChore::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIChore::is_latitude_Valid() const{
    return m_latitude_isValid;
}

qint32 OAIChore::getLongitude() const {
    return m_longitude;
}
void OAIChore::setLongitude(const qint32 &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIChore::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIChore::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIChore::getNfcTag() const {
    return m_nfc_tag;
}
void OAIChore::setNfcTag(const QString &nfc_tag) {
    m_nfc_tag = nfc_tag;
    m_nfc_tag_isSet = true;
}

bool OAIChore::is_nfc_tag_Set() const{
    return m_nfc_tag_isSet;
}

bool OAIChore::is_nfc_tag_Valid() const{
    return m_nfc_tag_isValid;
}

QString OAIChore::getNotes() const {
    return m_notes;
}
void OAIChore::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIChore::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIChore::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIChore::isOneTime() const {
    return m_one_time;
}
void OAIChore::setOneTime(const bool &one_time) {
    m_one_time = one_time;
    m_one_time_isSet = true;
}

bool OAIChore::is_one_time_Set() const{
    return m_one_time_isSet;
}

bool OAIChore::is_one_time_Valid() const{
    return m_one_time_isValid;
}

bool OAIChore::isOptional() const {
    return m_optional;
}
void OAIChore::setOptional(const bool &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAIChore::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAIChore::is_optional_Valid() const{
    return m_optional_isValid;
}

bool OAIChore::isReassignable() const {
    return m_reassignable;
}
void OAIChore::setReassignable(const bool &reassignable) {
    m_reassignable = reassignable;
    m_reassignable_isSet = true;
}

bool OAIChore::is_reassignable_Set() const{
    return m_reassignable_isSet;
}

bool OAIChore::is_reassignable_Valid() const{
    return m_reassignable_isValid;
}

bool OAIChore::isReassigned() const {
    return m_reassigned;
}
void OAIChore::setReassigned(const bool &reassigned) {
    m_reassigned = reassigned;
    m_reassigned_isSet = true;
}

bool OAIChore::is_reassigned_Set() const{
    return m_reassigned_isSet;
}

bool OAIChore::is_reassigned_Valid() const{
    return m_reassigned_isValid;
}

QString OAIChore::getRequireObjectDetection() const {
    return m_require_object_detection;
}
void OAIChore::setRequireObjectDetection(const QString &require_object_detection) {
    m_require_object_detection = require_object_detection;
    m_require_object_detection_isSet = true;
}

bool OAIChore::is_require_object_detection_Set() const{
    return m_require_object_detection_isSet;
}

bool OAIChore::is_require_object_detection_Valid() const{
    return m_require_object_detection_isValid;
}

QString OAIChore::getStartDate() const {
    return m_start_date;
}
void OAIChore::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIChore::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIChore::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIChore::getStatus() const {
    return m_status;
}
void OAIChore::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChore::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChore::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIChore::isStolen() const {
    return m_stolen;
}
void OAIChore::setStolen(const bool &stolen) {
    m_stolen = stolen;
    m_stolen_isSet = true;
}

bool OAIChore::is_stolen_Set() const{
    return m_stolen_isSet;
}

bool OAIChore::is_stolen_Valid() const{
    return m_stolen_isValid;
}

QString OAIChore::getStolenBy() const {
    return m_stolen_by;
}
void OAIChore::setStolenBy(const QString &stolen_by) {
    m_stolen_by = stolen_by;
    m_stolen_by_isSet = true;
}

bool OAIChore::is_stolen_by_Set() const{
    return m_stolen_by_isSet;
}

bool OAIChore::is_stolen_by_Valid() const{
    return m_stolen_by_isValid;
}

QString OAIChore::getUpdated() const {
    return m_updated;
}
void OAIChore::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIChore::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIChore::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIChore::getUpdatedBy() const {
    return m_updated_by;
}
void OAIChore::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIChore::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIChore::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIChore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ai_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_dash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chore_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chore_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chore_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_chore_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_calendar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfc_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reassignable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reassigned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_object_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stolen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stolen_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
