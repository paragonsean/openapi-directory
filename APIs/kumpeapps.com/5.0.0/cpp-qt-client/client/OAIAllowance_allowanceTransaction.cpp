/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowance_allowanceTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowance_allowanceTransaction::OAIAllowance_allowanceTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowance_allowanceTransaction::OAIAllowance_allowanceTransaction() {
    this->initializeModel();
}

OAIAllowance_allowanceTransaction::~OAIAllowance_allowanceTransaction() {}

void OAIAllowance_allowanceTransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_transaction_description_isSet = false;
    m_transaction_description_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAllowance_allowanceTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllowance_allowanceTransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_transaction_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_description, json[QString("transactionDescription")]);
    m_transaction_description_isSet = !json[QString("transactionDescription")].isNull() && m_transaction_description_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIAllowance_allowanceTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllowance_allowanceTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_transaction_description_isSet) {
        obj.insert(QString("transactionDescription"), ::OpenAPI::toJsonValue(m_transaction_description));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_transaction_type_isSet) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIAllowance_allowanceTransaction::getAmount() const {
    return m_amount;
}
void OAIAllowance_allowanceTransaction::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAllowance_allowanceTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAllowance_allowanceTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIAllowance_allowanceTransaction::getDate() const {
    return m_date;
}
void OAIAllowance_allowanceTransaction::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAllowance_allowanceTransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAllowance_allowanceTransaction::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAllowance_allowanceTransaction::getTransactionDescription() const {
    return m_transaction_description;
}
void OAIAllowance_allowanceTransaction::setTransactionDescription(const QString &transaction_description) {
    m_transaction_description = transaction_description;
    m_transaction_description_isSet = true;
}

bool OAIAllowance_allowanceTransaction::is_transaction_description_Set() const{
    return m_transaction_description_isSet;
}

bool OAIAllowance_allowanceTransaction::is_transaction_description_Valid() const{
    return m_transaction_description_isValid;
}

qint32 OAIAllowance_allowanceTransaction::getTransactionId() const {
    return m_transaction_id;
}
void OAIAllowance_allowanceTransaction::setTransactionId(const qint32 &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIAllowance_allowanceTransaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIAllowance_allowanceTransaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIAllowance_allowanceTransaction::getTransactionType() const {
    return m_transaction_type;
}
void OAIAllowance_allowanceTransaction::setTransactionType(const QString &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIAllowance_allowanceTransaction::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIAllowance_allowanceTransaction::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

qint32 OAIAllowance_allowanceTransaction::getUserId() const {
    return m_user_id;
}
void OAIAllowance_allowanceTransaction::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAllowance_allowanceTransaction::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAllowance_allowanceTransaction::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAllowance_allowanceTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllowance_allowanceTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
