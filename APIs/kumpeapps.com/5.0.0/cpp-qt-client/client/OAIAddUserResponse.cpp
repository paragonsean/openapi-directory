/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddUserResponse::OAIAddUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddUserResponse::OAIAddUserResponse() {
    this->initializeModel();
}

OAIAddUserResponse::~OAIAddUserResponse() {}

void OAIAddUserResponse::initializeModel() {

    m_added_isSet = false;
    m_added_isValid = false;

    m_aff_added_isSet = false;
    m_aff_added_isValid = false;

    m_aff_id_isSet = false;
    m_aff_id_isValid = false;

    m_aff_payout_type_isSet = false;
    m_aff_payout_type_isValid = false;

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_disable_lock_until_isSet = false;
    m_disable_lock_until_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_i_agree_isSet = false;
    m_i_agree_isValid = false;

    m_is_affiliate_isSet = false;
    m_is_affiliate_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_last_login_isSet = false;
    m_last_login_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_name_f_isSet = false;
    m_name_f_isValid = false;

    m_name_l_isSet = false;
    m_name_l_isValid = false;

    m_pass_isSet = false;
    m_pass_isValid = false;

    m_pass_dattm_isSet = false;
    m_pass_dattm_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_plain_password_isSet = false;
    m_plain_password_isValid = false;

    m_remember_key_isSet = false;
    m_remember_key_isValid = false;

    m_remote_addr_isSet = false;
    m_remote_addr_isValid = false;

    m_require_consent_isSet = false;
    m_require_consent_isValid = false;

    m_reseller_id_isSet = false;
    m_reseller_id_isValid = false;

    m_saved_form_id_isSet = false;
    m_saved_form_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_street2_isSet = false;
    m_street2_isValid = false;

    m_subusers_parent_id_isSet = false;
    m_subusers_parent_id_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;

    m_unsubscribed_isSet = false;
    m_unsubscribed_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIAddUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddUserResponse::fromJsonObject(QJsonObject json) {

    m_added_isValid = ::OpenAPI::fromJsonValue(m_added, json[QString("added")]);
    m_added_isSet = !json[QString("added")].isNull() && m_added_isValid;

    m_aff_added_isValid = ::OpenAPI::fromJsonValue(m_aff_added, json[QString("aff_added")]);
    m_aff_added_isSet = !json[QString("aff_added")].isNull() && m_aff_added_isValid;

    m_aff_id_isValid = ::OpenAPI::fromJsonValue(m_aff_id, json[QString("aff_id")]);
    m_aff_id_isSet = !json[QString("aff_id")].isNull() && m_aff_id_isValid;

    m_aff_payout_type_isValid = ::OpenAPI::fromJsonValue(m_aff_payout_type, json[QString("aff_payout_type")]);
    m_aff_payout_type_isSet = !json[QString("aff_payout_type")].isNull() && m_aff_payout_type_isValid;

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_disable_lock_until_isValid = ::OpenAPI::fromJsonValue(m_disable_lock_until, json[QString("disable_lock_until")]);
    m_disable_lock_until_isSet = !json[QString("disable_lock_until")].isNull() && m_disable_lock_until_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_i_agree_isValid = ::OpenAPI::fromJsonValue(m_i_agree, json[QString("i_agree")]);
    m_i_agree_isSet = !json[QString("i_agree")].isNull() && m_i_agree_isValid;

    m_is_affiliate_isValid = ::OpenAPI::fromJsonValue(m_is_affiliate, json[QString("is_affiliate")]);
    m_is_affiliate_isSet = !json[QString("is_affiliate")].isNull() && m_is_affiliate_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("is_locked")]);
    m_is_locked_isSet = !json[QString("is_locked")].isNull() && m_is_locked_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_last_login_isValid = ::OpenAPI::fromJsonValue(m_last_login, json[QString("last_login")]);
    m_last_login_isSet = !json[QString("last_login")].isNull() && m_last_login_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_name_f_isValid = ::OpenAPI::fromJsonValue(m_name_f, json[QString("name_f")]);
    m_name_f_isSet = !json[QString("name_f")].isNull() && m_name_f_isValid;

    m_name_l_isValid = ::OpenAPI::fromJsonValue(m_name_l, json[QString("name_l")]);
    m_name_l_isSet = !json[QString("name_l")].isNull() && m_name_l_isValid;

    m_pass_isValid = ::OpenAPI::fromJsonValue(m_pass, json[QString("pass")]);
    m_pass_isSet = !json[QString("pass")].isNull() && m_pass_isValid;

    m_pass_dattm_isValid = ::OpenAPI::fromJsonValue(m_pass_dattm, json[QString("pass_dattm")]);
    m_pass_dattm_isSet = !json[QString("pass_dattm")].isNull() && m_pass_dattm_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_plain_password_isValid = ::OpenAPI::fromJsonValue(m_plain_password, json[QString("plain_password")]);
    m_plain_password_isSet = !json[QString("plain_password")].isNull() && m_plain_password_isValid;

    m_remember_key_isValid = ::OpenAPI::fromJsonValue(m_remember_key, json[QString("remember_key")]);
    m_remember_key_isSet = !json[QString("remember_key")].isNull() && m_remember_key_isValid;

    m_remote_addr_isValid = ::OpenAPI::fromJsonValue(m_remote_addr, json[QString("remote_addr")]);
    m_remote_addr_isSet = !json[QString("remote_addr")].isNull() && m_remote_addr_isValid;

    m_require_consent_isValid = ::OpenAPI::fromJsonValue(m_require_consent, json[QString("require_consent")]);
    m_require_consent_isSet = !json[QString("require_consent")].isNull() && m_require_consent_isValid;

    m_reseller_id_isValid = ::OpenAPI::fromJsonValue(m_reseller_id, json[QString("reseller_id")]);
    m_reseller_id_isSet = !json[QString("reseller_id")].isNull() && m_reseller_id_isValid;

    m_saved_form_id_isValid = ::OpenAPI::fromJsonValue(m_saved_form_id, json[QString("saved_form_id")]);
    m_saved_form_id_isSet = !json[QString("saved_form_id")].isNull() && m_saved_form_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_street2_isValid = ::OpenAPI::fromJsonValue(m_street2, json[QString("street2")]);
    m_street2_isSet = !json[QString("street2")].isNull() && m_street2_isValid;

    m_subusers_parent_id_isValid = ::OpenAPI::fromJsonValue(m_subusers_parent_id, json[QString("subusers_parent_id")]);
    m_subusers_parent_id_isSet = !json[QString("subusers_parent_id")].isNull() && m_subusers_parent_id_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("tax_id")]);
    m_tax_id_isSet = !json[QString("tax_id")].isNull() && m_tax_id_isValid;

    m_unsubscribed_isValid = ::OpenAPI::fromJsonValue(m_unsubscribed, json[QString("unsubscribed")]);
    m_unsubscribed_isSet = !json[QString("unsubscribed")].isNull() && m_unsubscribed_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIAddUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_added_isSet) {
        obj.insert(QString("added"), ::OpenAPI::toJsonValue(m_added));
    }
    if (m_aff_added_isSet) {
        obj.insert(QString("aff_added"), ::OpenAPI::toJsonValue(m_aff_added));
    }
    if (m_aff_id_isSet) {
        obj.insert(QString("aff_id"), ::OpenAPI::toJsonValue(m_aff_id));
    }
    if (m_aff_payout_type_isSet) {
        obj.insert(QString("aff_payout_type"), ::OpenAPI::toJsonValue(m_aff_payout_type));
    }
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_disable_lock_until_isSet) {
        obj.insert(QString("disable_lock_until"), ::OpenAPI::toJsonValue(m_disable_lock_until));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_i_agree_isSet) {
        obj.insert(QString("i_agree"), ::OpenAPI::toJsonValue(m_i_agree));
    }
    if (m_is_affiliate_isSet) {
        obj.insert(QString("is_affiliate"), ::OpenAPI::toJsonValue(m_is_affiliate));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("is_locked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_last_login_isSet) {
        obj.insert(QString("last_login"), ::OpenAPI::toJsonValue(m_last_login));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_name_f_isSet) {
        obj.insert(QString("name_f"), ::OpenAPI::toJsonValue(m_name_f));
    }
    if (m_name_l_isSet) {
        obj.insert(QString("name_l"), ::OpenAPI::toJsonValue(m_name_l));
    }
    if (m_pass_isSet) {
        obj.insert(QString("pass"), ::OpenAPI::toJsonValue(m_pass));
    }
    if (m_pass_dattm_isSet) {
        obj.insert(QString("pass_dattm"), ::OpenAPI::toJsonValue(m_pass_dattm));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_plain_password_isSet) {
        obj.insert(QString("plain_password"), ::OpenAPI::toJsonValue(m_plain_password));
    }
    if (m_remember_key_isSet) {
        obj.insert(QString("remember_key"), ::OpenAPI::toJsonValue(m_remember_key));
    }
    if (m_remote_addr_isSet) {
        obj.insert(QString("remote_addr"), ::OpenAPI::toJsonValue(m_remote_addr));
    }
    if (m_require_consent_isSet) {
        obj.insert(QString("require_consent"), ::OpenAPI::toJsonValue(m_require_consent));
    }
    if (m_reseller_id_isSet) {
        obj.insert(QString("reseller_id"), ::OpenAPI::toJsonValue(m_reseller_id));
    }
    if (m_saved_form_id_isSet) {
        obj.insert(QString("saved_form_id"), ::OpenAPI::toJsonValue(m_saved_form_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_street2_isSet) {
        obj.insert(QString("street2"), ::OpenAPI::toJsonValue(m_street2));
    }
    if (m_subusers_parent_id_isSet) {
        obj.insert(QString("subusers_parent_id"), ::OpenAPI::toJsonValue(m_subusers_parent_id));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("tax_id"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    if (m_unsubscribed_isSet) {
        obj.insert(QString("unsubscribed"), ::OpenAPI::toJsonValue(m_unsubscribed));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIAddUserResponse::getAdded() const {
    return m_added;
}
void OAIAddUserResponse::setAdded(const QString &added) {
    m_added = added;
    m_added_isSet = true;
}

bool OAIAddUserResponse::is_added_Set() const{
    return m_added_isSet;
}

bool OAIAddUserResponse::is_added_Valid() const{
    return m_added_isValid;
}

QString OAIAddUserResponse::getAffAdded() const {
    return m_aff_added;
}
void OAIAddUserResponse::setAffAdded(const QString &aff_added) {
    m_aff_added = aff_added;
    m_aff_added_isSet = true;
}

bool OAIAddUserResponse::is_aff_added_Set() const{
    return m_aff_added_isSet;
}

bool OAIAddUserResponse::is_aff_added_Valid() const{
    return m_aff_added_isValid;
}

QString OAIAddUserResponse::getAffId() const {
    return m_aff_id;
}
void OAIAddUserResponse::setAffId(const QString &aff_id) {
    m_aff_id = aff_id;
    m_aff_id_isSet = true;
}

bool OAIAddUserResponse::is_aff_id_Set() const{
    return m_aff_id_isSet;
}

bool OAIAddUserResponse::is_aff_id_Valid() const{
    return m_aff_id_isValid;
}

QString OAIAddUserResponse::getAffPayoutType() const {
    return m_aff_payout_type;
}
void OAIAddUserResponse::setAffPayoutType(const QString &aff_payout_type) {
    m_aff_payout_type = aff_payout_type;
    m_aff_payout_type_isSet = true;
}

bool OAIAddUserResponse::is_aff_payout_type_Set() const{
    return m_aff_payout_type_isSet;
}

bool OAIAddUserResponse::is_aff_payout_type_Valid() const{
    return m_aff_payout_type_isValid;
}

QString OAIAddUserResponse::getAvatar() const {
    return m_avatar;
}
void OAIAddUserResponse::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIAddUserResponse::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIAddUserResponse::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QString OAIAddUserResponse::getCity() const {
    return m_city;
}
void OAIAddUserResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddUserResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddUserResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddUserResponse::getComment() const {
    return m_comment;
}
void OAIAddUserResponse::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIAddUserResponse::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIAddUserResponse::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIAddUserResponse::getCountry() const {
    return m_country;
}
void OAIAddUserResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddUserResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddUserResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddUserResponse::getDisableLockUntil() const {
    return m_disable_lock_until;
}
void OAIAddUserResponse::setDisableLockUntil(const QString &disable_lock_until) {
    m_disable_lock_until = disable_lock_until;
    m_disable_lock_until_isSet = true;
}

bool OAIAddUserResponse::is_disable_lock_until_Set() const{
    return m_disable_lock_until_isSet;
}

bool OAIAddUserResponse::is_disable_lock_until_Valid() const{
    return m_disable_lock_until_isValid;
}

QString OAIAddUserResponse::getEmail() const {
    return m_email;
}
void OAIAddUserResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAddUserResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAddUserResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAddUserResponse::getIAgree() const {
    return m_i_agree;
}
void OAIAddUserResponse::setIAgree(const QString &i_agree) {
    m_i_agree = i_agree;
    m_i_agree_isSet = true;
}

bool OAIAddUserResponse::is_i_agree_Set() const{
    return m_i_agree_isSet;
}

bool OAIAddUserResponse::is_i_agree_Valid() const{
    return m_i_agree_isValid;
}

QString OAIAddUserResponse::getIsAffiliate() const {
    return m_is_affiliate;
}
void OAIAddUserResponse::setIsAffiliate(const QString &is_affiliate) {
    m_is_affiliate = is_affiliate;
    m_is_affiliate_isSet = true;
}

bool OAIAddUserResponse::is_is_affiliate_Set() const{
    return m_is_affiliate_isSet;
}

bool OAIAddUserResponse::is_is_affiliate_Valid() const{
    return m_is_affiliate_isValid;
}

QString OAIAddUserResponse::getIsLocked() const {
    return m_is_locked;
}
void OAIAddUserResponse::setIsLocked(const QString &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIAddUserResponse::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIAddUserResponse::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

QString OAIAddUserResponse::getLang() const {
    return m_lang;
}
void OAIAddUserResponse::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAIAddUserResponse::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAIAddUserResponse::is_lang_Valid() const{
    return m_lang_isValid;
}

QString OAIAddUserResponse::getLastLogin() const {
    return m_last_login;
}
void OAIAddUserResponse::setLastLogin(const QString &last_login) {
    m_last_login = last_login;
    m_last_login_isSet = true;
}

bool OAIAddUserResponse::is_last_login_Set() const{
    return m_last_login_isSet;
}

bool OAIAddUserResponse::is_last_login_Valid() const{
    return m_last_login_isValid;
}

QString OAIAddUserResponse::getLogin() const {
    return m_login;
}
void OAIAddUserResponse::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIAddUserResponse::is_login_Set() const{
    return m_login_isSet;
}

bool OAIAddUserResponse::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIAddUserResponse::getNameF() const {
    return m_name_f;
}
void OAIAddUserResponse::setNameF(const QString &name_f) {
    m_name_f = name_f;
    m_name_f_isSet = true;
}

bool OAIAddUserResponse::is_name_f_Set() const{
    return m_name_f_isSet;
}

bool OAIAddUserResponse::is_name_f_Valid() const{
    return m_name_f_isValid;
}

QString OAIAddUserResponse::getNameL() const {
    return m_name_l;
}
void OAIAddUserResponse::setNameL(const QString &name_l) {
    m_name_l = name_l;
    m_name_l_isSet = true;
}

bool OAIAddUserResponse::is_name_l_Set() const{
    return m_name_l_isSet;
}

bool OAIAddUserResponse::is_name_l_Valid() const{
    return m_name_l_isValid;
}

QString OAIAddUserResponse::getPass() const {
    return m_pass;
}
void OAIAddUserResponse::setPass(const QString &pass) {
    m_pass = pass;
    m_pass_isSet = true;
}

bool OAIAddUserResponse::is_pass_Set() const{
    return m_pass_isSet;
}

bool OAIAddUserResponse::is_pass_Valid() const{
    return m_pass_isValid;
}

QString OAIAddUserResponse::getPassDattm() const {
    return m_pass_dattm;
}
void OAIAddUserResponse::setPassDattm(const QString &pass_dattm) {
    m_pass_dattm = pass_dattm;
    m_pass_dattm_isSet = true;
}

bool OAIAddUserResponse::is_pass_dattm_Set() const{
    return m_pass_dattm_isSet;
}

bool OAIAddUserResponse::is_pass_dattm_Valid() const{
    return m_pass_dattm_isValid;
}

QString OAIAddUserResponse::getPhone() const {
    return m_phone;
}
void OAIAddUserResponse::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIAddUserResponse::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIAddUserResponse::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIAddUserResponse::getPin() const {
    return m_pin;
}
void OAIAddUserResponse::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAIAddUserResponse::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAIAddUserResponse::is_pin_Valid() const{
    return m_pin_isValid;
}

QString OAIAddUserResponse::getPlainPassword() const {
    return m_plain_password;
}
void OAIAddUserResponse::setPlainPassword(const QString &plain_password) {
    m_plain_password = plain_password;
    m_plain_password_isSet = true;
}

bool OAIAddUserResponse::is_plain_password_Set() const{
    return m_plain_password_isSet;
}

bool OAIAddUserResponse::is_plain_password_Valid() const{
    return m_plain_password_isValid;
}

QString OAIAddUserResponse::getRememberKey() const {
    return m_remember_key;
}
void OAIAddUserResponse::setRememberKey(const QString &remember_key) {
    m_remember_key = remember_key;
    m_remember_key_isSet = true;
}

bool OAIAddUserResponse::is_remember_key_Set() const{
    return m_remember_key_isSet;
}

bool OAIAddUserResponse::is_remember_key_Valid() const{
    return m_remember_key_isValid;
}

QString OAIAddUserResponse::getRemoteAddr() const {
    return m_remote_addr;
}
void OAIAddUserResponse::setRemoteAddr(const QString &remote_addr) {
    m_remote_addr = remote_addr;
    m_remote_addr_isSet = true;
}

bool OAIAddUserResponse::is_remote_addr_Set() const{
    return m_remote_addr_isSet;
}

bool OAIAddUserResponse::is_remote_addr_Valid() const{
    return m_remote_addr_isValid;
}

QString OAIAddUserResponse::getRequireConsent() const {
    return m_require_consent;
}
void OAIAddUserResponse::setRequireConsent(const QString &require_consent) {
    m_require_consent = require_consent;
    m_require_consent_isSet = true;
}

bool OAIAddUserResponse::is_require_consent_Set() const{
    return m_require_consent_isSet;
}

bool OAIAddUserResponse::is_require_consent_Valid() const{
    return m_require_consent_isValid;
}

QString OAIAddUserResponse::getResellerId() const {
    return m_reseller_id;
}
void OAIAddUserResponse::setResellerId(const QString &reseller_id) {
    m_reseller_id = reseller_id;
    m_reseller_id_isSet = true;
}

bool OAIAddUserResponse::is_reseller_id_Set() const{
    return m_reseller_id_isSet;
}

bool OAIAddUserResponse::is_reseller_id_Valid() const{
    return m_reseller_id_isValid;
}

QString OAIAddUserResponse::getSavedFormId() const {
    return m_saved_form_id;
}
void OAIAddUserResponse::setSavedFormId(const QString &saved_form_id) {
    m_saved_form_id = saved_form_id;
    m_saved_form_id_isSet = true;
}

bool OAIAddUserResponse::is_saved_form_id_Set() const{
    return m_saved_form_id_isSet;
}

bool OAIAddUserResponse::is_saved_form_id_Valid() const{
    return m_saved_form_id_isValid;
}

QString OAIAddUserResponse::getState() const {
    return m_state;
}
void OAIAddUserResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAddUserResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAddUserResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAddUserResponse::getStatus() const {
    return m_status;
}
void OAIAddUserResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAddUserResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAddUserResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAddUserResponse::getStreet() const {
    return m_street;
}
void OAIAddUserResponse::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIAddUserResponse::is_street_Set() const{
    return m_street_isSet;
}

bool OAIAddUserResponse::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIAddUserResponse::getStreet2() const {
    return m_street2;
}
void OAIAddUserResponse::setStreet2(const QString &street2) {
    m_street2 = street2;
    m_street2_isSet = true;
}

bool OAIAddUserResponse::is_street2_Set() const{
    return m_street2_isSet;
}

bool OAIAddUserResponse::is_street2_Valid() const{
    return m_street2_isValid;
}

QString OAIAddUserResponse::getSubusersParentId() const {
    return m_subusers_parent_id;
}
void OAIAddUserResponse::setSubusersParentId(const QString &subusers_parent_id) {
    m_subusers_parent_id = subusers_parent_id;
    m_subusers_parent_id_isSet = true;
}

bool OAIAddUserResponse::is_subusers_parent_id_Set() const{
    return m_subusers_parent_id_isSet;
}

bool OAIAddUserResponse::is_subusers_parent_id_Valid() const{
    return m_subusers_parent_id_isValid;
}

QString OAIAddUserResponse::getTaxId() const {
    return m_tax_id;
}
void OAIAddUserResponse::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAIAddUserResponse::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAIAddUserResponse::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

QString OAIAddUserResponse::getUnsubscribed() const {
    return m_unsubscribed;
}
void OAIAddUserResponse::setUnsubscribed(const QString &unsubscribed) {
    m_unsubscribed = unsubscribed;
    m_unsubscribed_isSet = true;
}

bool OAIAddUserResponse::is_unsubscribed_Set() const{
    return m_unsubscribed_isSet;
}

bool OAIAddUserResponse::is_unsubscribed_Valid() const{
    return m_unsubscribed_isValid;
}

QString OAIAddUserResponse::getUserAgent() const {
    return m_user_agent;
}
void OAIAddUserResponse::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIAddUserResponse::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIAddUserResponse::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

qint32 OAIAddUserResponse::getUserId() const {
    return m_user_id;
}
void OAIAddUserResponse::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAddUserResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAddUserResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIAddUserResponse::getZip() const {
    return m_zip;
}
void OAIAddUserResponse::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIAddUserResponse::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIAddUserResponse::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIAddUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aff_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aff_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aff_payout_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_lock_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_agree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_affiliate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_f_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_l_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_dattm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plain_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remember_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_addr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_consent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reseller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saved_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subusers_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsubscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
