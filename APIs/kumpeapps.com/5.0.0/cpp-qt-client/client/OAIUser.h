/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * user
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getEmoji() const;
    void setEmoji(const QString &emoji);
    bool is_emoji_Set() const;
    bool is_emoji_Valid() const;

    bool isEnableAllowance() const;
    void setEnableAllowance(const bool &enable_allowance);
    bool is_enable_allowance_Set() const;
    bool is_enable_allowance_Valid() const;

    bool isEnableBehaviorChart() const;
    void setEnableBehaviorChart(const bool &enable_behavior_chart);
    bool is_enable_behavior_chart_Set() const;
    bool is_enable_behavior_chart_Valid() const;

    bool isEnableChores() const;
    void setEnableChores(const bool &enable_chores);
    bool is_enable_chores_Set() const;
    bool is_enable_chores_Valid() const;

    bool isEnableNoAds() const;
    void setEnableNoAds(const bool &enable_no_ads);
    bool is_enable_no_ads_Set() const;
    bool is_enable_no_ads_Valid() const;

    bool isEnableObjectDetection() const;
    void setEnableObjectDetection(const bool &enable_object_detection);
    bool is_enable_object_detection_Set() const;
    bool is_enable_object_detection_Valid() const;

    bool isEnableTmdb() const;
    void setEnableTmdb(const bool &enable_tmdb);
    bool is_enable_tmdb_Set() const;
    bool is_enable_tmdb_Valid() const;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    qint32 getHomeId() const;
    void setHomeId(const qint32 &home_id);
    bool is_home_id_Set() const;
    bool is_home_id_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    bool isIsAdmin() const;
    void setIsAdmin(const bool &is_admin);
    bool is_is_admin_Set() const;
    bool is_is_admin_Valid() const;

    bool isIsBanned() const;
    void setIsBanned(const bool &is_banned);
    bool is_is_banned_Set() const;
    bool is_is_banned_Valid() const;

    bool isIsChild() const;
    void setIsChild(const bool &is_child);
    bool is_is_child_Set() const;
    bool is_is_child_Valid() const;

    bool isIsDisabled() const;
    void setIsDisabled(const bool &is_disabled);
    bool is_is_disabled_Set() const;
    bool is_is_disabled_Valid() const;

    bool isIsLocked() const;
    void setIsLocked(const bool &is_locked);
    bool is_is_locked_Set() const;
    bool is_is_locked_Valid() const;

    bool isIsMaster() const;
    void setIsMaster(const bool &is_master);
    bool is_is_master_Set() const;
    bool is_is_master_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    qint32 getMasterId() const;
    void setMasterId(const qint32 &master_id);
    bool is_master_id_Set() const;
    bool is_master_id_Valid() const;

    bool isPushAllowance() const;
    void setPushAllowance(const bool &push_allowance);
    bool is_push_allowance_Set() const;
    bool is_push_allowance_Valid() const;

    bool isPushAllowanceNew() const;
    void setPushAllowanceNew(const bool &push_allowance_new);
    bool is_push_allowance_new_Set() const;
    bool is_push_allowance_new_Valid() const;

    bool isPushChores() const;
    void setPushChores(const bool &push_chores);
    bool is_push_chores_Set() const;
    bool is_push_chores_Valid() const;

    bool isPushChoresNew() const;
    void setPushChoresNew(const bool &push_chores_new);
    bool is_push_chores_new_Set() const;
    bool is_push_chores_new_Valid() const;

    bool isPushChoresReminders() const;
    void setPushChoresReminders(const bool &push_chores_reminders);
    bool is_push_chores_reminders_Set() const;
    bool is_push_chores_reminders_Valid() const;

    QString getTmdbKey() const;
    void setTmdbKey(const QString &tmdb_key);
    bool is_tmdb_key_Set() const;
    bool is_tmdb_key_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    qint32 getWeeklyAllowance() const;
    void setWeeklyAllowance(const qint32 &weekly_allowance);
    bool is_weekly_allowance_Set() const;
    bool is_weekly_allowance_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_emoji;
    bool m_emoji_isSet;
    bool m_emoji_isValid;

    bool m_enable_allowance;
    bool m_enable_allowance_isSet;
    bool m_enable_allowance_isValid;

    bool m_enable_behavior_chart;
    bool m_enable_behavior_chart_isSet;
    bool m_enable_behavior_chart_isValid;

    bool m_enable_chores;
    bool m_enable_chores_isSet;
    bool m_enable_chores_isValid;

    bool m_enable_no_ads;
    bool m_enable_no_ads_isSet;
    bool m_enable_no_ads_isValid;

    bool m_enable_object_detection;
    bool m_enable_object_detection_isSet;
    bool m_enable_object_detection_isValid;

    bool m_enable_tmdb;
    bool m_enable_tmdb_isSet;
    bool m_enable_tmdb_isValid;

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    qint32 m_home_id;
    bool m_home_id_isSet;
    bool m_home_id_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    bool m_is_admin;
    bool m_is_admin_isSet;
    bool m_is_admin_isValid;

    bool m_is_banned;
    bool m_is_banned_isSet;
    bool m_is_banned_isValid;

    bool m_is_child;
    bool m_is_child_isSet;
    bool m_is_child_isValid;

    bool m_is_disabled;
    bool m_is_disabled_isSet;
    bool m_is_disabled_isValid;

    bool m_is_locked;
    bool m_is_locked_isSet;
    bool m_is_locked_isValid;

    bool m_is_master;
    bool m_is_master_isSet;
    bool m_is_master_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    qint32 m_master_id;
    bool m_master_id_isSet;
    bool m_master_id_isValid;

    bool m_push_allowance;
    bool m_push_allowance_isSet;
    bool m_push_allowance_isValid;

    bool m_push_allowance_new;
    bool m_push_allowance_new_isSet;
    bool m_push_allowance_new_isValid;

    bool m_push_chores;
    bool m_push_chores_isSet;
    bool m_push_chores_isValid;

    bool m_push_chores_new;
    bool m_push_chores_new_isSet;
    bool m_push_chores_new_isValid;

    bool m_push_chores_reminders;
    bool m_push_chores_reminders_isSet;
    bool m_push_chores_reminders_isValid;

    QString m_tmdb_key;
    bool m_tmdb_key_isSet;
    bool m_tmdb_key_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    qint32 m_weekly_allowance;
    bool m_weekly_allowance_isSet;
    bool m_weekly_allowance_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
