/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthentication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthentication::OAIAuthentication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthentication::OAIAuthentication() {
    this->initializeModel();
}

OAIAuthentication::~OAIAuthentication() {}

void OAIAuthentication::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAuthentication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthentication::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAuthentication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthentication::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIAuthentication::getApiKey() const {
    return m_api_key;
}
void OAIAuthentication::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIAuthentication::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIAuthentication::is_api_key_Valid() const{
    return m_api_key_isValid;
}

qint32 OAIAuthentication::getSuccess() const {
    return m_success;
}
void OAIAuthentication::setSuccess(const qint32 &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIAuthentication::is_success_Set() const{
    return m_success_isSet;
}

bool OAIAuthentication::is_success_Valid() const{
    return m_success_isValid;
}

OAIUser OAIAuthentication::getUser() const {
    return m_user;
}
void OAIAuthentication::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAuthentication::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAuthentication::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAuthentication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthentication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
