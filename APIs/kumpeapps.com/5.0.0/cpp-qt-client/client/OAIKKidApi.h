/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKKidApi_H
#define OAI_OAIKKidApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI201_share.h"
#include "OAI405.h"
#include "OAI412.h"
#include "OAIAddUserResponse.h"
#include "OAIAllowance.h"
#include "OAIChorelist.h"
#include "OAINodata.h"
#include "OAISuccess.h"
#include "OAIUserlist.h"
#include "OAIWishlist.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKKidApi : public QObject {
    Q_OBJECT

public:
    OAIKKidApi(const int timeOut = 0);
    ~OAIKKidApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  kid_user_id qint32 [required]
    * @param[in]  transaction_days qint32 [optional]
    */
    virtual void kkidAllowanceGet(const qint32 &kid_user_id, const ::OpenAPI::OptionalParam<qint32> &transaction_days = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  kid_user_id qint32 [required]
    * @param[in]  amount double [required]
    * @param[in]  description QString [required]
    * @param[in]  transaction_type QString [required]
    */
    virtual void kkidAllowancePost(const qint32 &kid_user_id, const double &amount, const QString &description, const QString &transaction_type);

    /**
    * @param[in]  kid_user_id qint32 [required]
    * @param[in]  tool QString [required]
    * @param[in]  token QString [optional]
    * @param[in]  devicename QString [optional]
    * @param[in]  title QString [optional]
    * @param[in]  message QString [optional]
    * @param[in]  badge qint32 [optional]
    * @param[in]  sound QString [optional]
    * @param[in]  section QString [optional]
    * @param[in]  priority QString [optional]
    */
    virtual void kkidApnsPost(const qint32 &kid_user_id, const QString &tool, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &badge = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sound = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_chore_list qint32 [required]
    */
    virtual void kkidChorelistDelete(const qint32 &id_chore_list);

    /**
    * @param[in]  kid_username QString [optional]
    * @param[in]  day QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  block_dash bool [optional]
    * @param[in]  optional bool [optional]
    * @param[in]  can_steal bool [optional]
    * @param[in]  include_calendar bool [optional]
    */
    virtual void kkidChorelistGet(const ::OpenAPI::OptionalParam<QString> &kid_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &block_dash = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &optional = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &can_steal = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_calendar = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  kid_username QString [required]
    * @param[in]  chore_name QString [required]
    * @param[in]  day QString [optional]
    * @param[in]  nfc_tag QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  chore_description QString [optional]
    * @param[in]  chore_number qint32 [optional]
    * @param[in]  block_dash bool [optional]
    * @param[in]  one_time bool [optional]
    * @param[in]  extra_allowance qint32 [optional]
    * @param[in]  optional bool [optional]
    * @param[in]  reassignable bool [optional]
    * @param[in]  can_steal bool [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  require_object_detection bool [optional]
    * @param[in]  object_detection_tag QString [optional]
    * @param[in]  updated_by_automation bool [optional]
    * @param[in]  ai_icon QString [optional]
    * @param[in]  is_calendar bool [optional]
    */
    virtual void kkidChorelistPost(const QString &kid_username, const QString &chore_name, const ::OpenAPI::OptionalParam<QString> &day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nfc_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chore_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &chore_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &block_dash = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &one_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &extra_allowance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &optional = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &reassignable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &can_steal = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &require_object_detection = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &object_detection_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &updated_by_automation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ai_icon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_calendar = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id_chore_list qint32 [required]
    * @param[in]  status QString [optional]
    * @param[in]  stolen bool [optional]
    * @param[in]  stolen_by QString [optional]
    * @param[in]  nfc_tag QString [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  latitude qint32 [optional]
    * @param[in]  longitude qint32 [optional]
    * @param[in]  altitude qint32 [optional]
    * @param[in]  updated_by_automation bool [optional]
    * @param[in]  where_day QString [optional]
    * @param[in]  where_status QString [optional]
    * @param[in]  where_name QString [optional]
    */
    virtual void kkidChorelistPut(const qint32 &id_chore_list, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &stolen = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &stolen_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nfc_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &latitude = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &longitude = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &altitude = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &updated_by_automation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &where_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &where_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  email QString [required]
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    */
    virtual void kkidMasteruserPost(const QString &username, const QString &password, const QString &email, const QString &first_name, const QString &last_name);

    /**
    * @param[in]  link_user_id QString [required]
    * @param[in]  link QString [required]
    * @param[in]  scope QString [required]
    * @param[in]  scope2 QString [optional]
    * @param[in]  scope3 QString [optional]
    * @param[in]  scope4 QString [optional]
    */
    virtual void kkidShareGet(const QString &link_user_id, const QString &link, const QString &scope, const ::OpenAPI::OptionalParam<QString> &scope2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope4 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  enable_bool bool [optional]
    */
    virtual void kkidUserGet(const ::OpenAPI::OptionalParam<bool> &enable_bool = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id qint32 [required]
    */
    virtual void kkidUserlistDelete(const qint32 &user_id);

    /**
    * @param[in]  is_child bool [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  is_admin bool [optional]
    * @param[in]  enable_allowance bool [optional]
    * @param[in]  enable_chores bool [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    */
    virtual void kkidUserlistGet(const ::OpenAPI::OptionalParam<bool> &is_child = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_admin = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_allowance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_chores = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  email QString [required]
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    */
    virtual void kkidUserlistPost(const QString &username, const QString &password, const QString &email, const QString &first_name, const QString &last_name);

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  username QString [required]
    * @param[in]  email QString [required]
    * @param[in]  first_name QString [required]
    * @param[in]  last_name QString [required]
    * @param[in]  emoji QString [optional]
    * @param[in]  tmdb_key QString [optional]
    * @param[in]  enable_wish_list bool [optional]
    * @param[in]  enable_chores bool [optional]
    * @param[in]  enable_allowance bool [optional]
    * @param[in]  enable_admin bool [optional]
    * @param[in]  enable_tmdb bool [optional]
    * @param[in]  enable_object_detection bool [optional]
    */
    virtual void kkidUserlistPut(const qint32 &user_id, const QString &username, const QString &email, const QString &first_name, const QString &last_name, const ::OpenAPI::OptionalParam<QString> &emoji = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tmdb_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_wish_list = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_chores = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_allowance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_admin = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_tmdb = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_object_detection = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  wish_id qint32 [required]
    */
    virtual void kkidWishlistDelete(const qint32 &wish_id);

    /**
    * @param[in]  kid_user_id qint32 [optional]
    */
    virtual void kkidWishlistGet(const ::OpenAPI::OptionalParam<qint32> &kid_user_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  kid_user_id qint32 [required]
    * @param[in]  title QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  link QString [optional]
    */
    virtual void kkidWishlistPost(const qint32 &kid_user_id, const QString &title, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &link = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  wish_id qint32 [required]
    * @param[in]  title QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  link QString [optional]
    */
    virtual void kkidWishlistPut(const qint32 &wish_id, const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &link = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void kkidAllowanceGetCallback(OAIHttpRequestWorker *worker);
    void kkidAllowancePostCallback(OAIHttpRequestWorker *worker);
    void kkidApnsPostCallback(OAIHttpRequestWorker *worker);
    void kkidChorelistDeleteCallback(OAIHttpRequestWorker *worker);
    void kkidChorelistGetCallback(OAIHttpRequestWorker *worker);
    void kkidChorelistPostCallback(OAIHttpRequestWorker *worker);
    void kkidChorelistPutCallback(OAIHttpRequestWorker *worker);
    void kkidMasteruserPostCallback(OAIHttpRequestWorker *worker);
    void kkidShareGetCallback(OAIHttpRequestWorker *worker);
    void kkidUserGetCallback(OAIHttpRequestWorker *worker);
    void kkidUserlistDeleteCallback(OAIHttpRequestWorker *worker);
    void kkidUserlistGetCallback(OAIHttpRequestWorker *worker);
    void kkidUserlistPostCallback(OAIHttpRequestWorker *worker);
    void kkidUserlistPutCallback(OAIHttpRequestWorker *worker);
    void kkidWishlistDeleteCallback(OAIHttpRequestWorker *worker);
    void kkidWishlistGetCallback(OAIHttpRequestWorker *worker);
    void kkidWishlistPostCallback(OAIHttpRequestWorker *worker);
    void kkidWishlistPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void kkidAllowanceGetSignal(OAIAllowance summary);
    void kkidAllowancePostSignal(OAISuccess summary);
    void kkidApnsPostSignal(OAISuccess summary);
    void kkidChorelistDeleteSignal(OAISuccess summary);
    void kkidChorelistGetSignal(OAIChorelist summary);
    void kkidChorelistPostSignal(OAISuccess summary);
    void kkidChorelistPutSignal(OAISuccess summary);
    void kkidMasteruserPostSignal(OAIAddUserResponse summary);
    void kkidShareGetSignal(OAI201_share summary);
    void kkidUserGetSignal(OAIUserlist summary);
    void kkidUserlistDeleteSignal();
    void kkidUserlistGetSignal(OAIUserlist summary);
    void kkidUserlistPostSignal(OAIAddUserResponse summary);
    void kkidUserlistPutSignal(OAIAddUserResponse summary);
    void kkidWishlistDeleteSignal(OAISuccess summary);
    void kkidWishlistGetSignal(OAIWishlist summary);
    void kkidWishlistPostSignal(OAISuccess summary);
    void kkidWishlistPutSignal(OAISuccess summary);


    void kkidAllowanceGetSignalFull(OAIHttpRequestWorker *worker, OAIAllowance summary);
    void kkidAllowancePostSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void kkidApnsPostSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void kkidChorelistDeleteSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void kkidChorelistGetSignalFull(OAIHttpRequestWorker *worker, OAIChorelist summary);
    void kkidChorelistPostSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void kkidChorelistPutSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void kkidMasteruserPostSignalFull(OAIHttpRequestWorker *worker, OAIAddUserResponse summary);
    void kkidShareGetSignalFull(OAIHttpRequestWorker *worker, OAI201_share summary);
    void kkidUserGetSignalFull(OAIHttpRequestWorker *worker, OAIUserlist summary);
    void kkidUserlistDeleteSignalFull(OAIHttpRequestWorker *worker);
    void kkidUserlistGetSignalFull(OAIHttpRequestWorker *worker, OAIUserlist summary);
    void kkidUserlistPostSignalFull(OAIHttpRequestWorker *worker, OAIAddUserResponse summary);
    void kkidUserlistPutSignalFull(OAIHttpRequestWorker *worker, OAIAddUserResponse summary);
    void kkidWishlistDeleteSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void kkidWishlistGetSignalFull(OAIHttpRequestWorker *worker, OAIWishlist summary);
    void kkidWishlistPostSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void kkidWishlistPutSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);

    Q_DECL_DEPRECATED_X("Use kkidAllowanceGetSignalError() instead")
    void kkidAllowanceGetSignalE(OAIAllowance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidAllowanceGetSignalError(OAIAllowance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidAllowancePostSignalError() instead")
    void kkidAllowancePostSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidAllowancePostSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidApnsPostSignalError() instead")
    void kkidApnsPostSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidApnsPostSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidChorelistDeleteSignalError() instead")
    void kkidChorelistDeleteSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidChorelistDeleteSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidChorelistGetSignalError() instead")
    void kkidChorelistGetSignalE(OAIChorelist summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidChorelistGetSignalError(OAIChorelist summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidChorelistPostSignalError() instead")
    void kkidChorelistPostSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidChorelistPostSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidChorelistPutSignalError() instead")
    void kkidChorelistPutSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidChorelistPutSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidMasteruserPostSignalError() instead")
    void kkidMasteruserPostSignalE(OAIAddUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidMasteruserPostSignalError(OAIAddUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidShareGetSignalError() instead")
    void kkidShareGetSignalE(OAI201_share summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidShareGetSignalError(OAI201_share summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserGetSignalError() instead")
    void kkidUserGetSignalE(OAIUserlist summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserGetSignalError(OAIUserlist summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserlistDeleteSignalError() instead")
    void kkidUserlistDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserlistDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserlistGetSignalError() instead")
    void kkidUserlistGetSignalE(OAIUserlist summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserlistGetSignalError(OAIUserlist summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserlistPostSignalError() instead")
    void kkidUserlistPostSignalE(OAIAddUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserlistPostSignalError(OAIAddUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserlistPutSignalError() instead")
    void kkidUserlistPutSignalE(OAIAddUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserlistPutSignalError(OAIAddUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidWishlistDeleteSignalError() instead")
    void kkidWishlistDeleteSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidWishlistDeleteSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidWishlistGetSignalError() instead")
    void kkidWishlistGetSignalE(OAIWishlist summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidWishlistGetSignalError(OAIWishlist summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidWishlistPostSignalError() instead")
    void kkidWishlistPostSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidWishlistPostSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidWishlistPutSignalError() instead")
    void kkidWishlistPutSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidWishlistPutSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use kkidAllowanceGetSignalErrorFull() instead")
    void kkidAllowanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidAllowanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidAllowancePostSignalErrorFull() instead")
    void kkidAllowancePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidAllowancePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidApnsPostSignalErrorFull() instead")
    void kkidApnsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidApnsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidChorelistDeleteSignalErrorFull() instead")
    void kkidChorelistDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidChorelistDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidChorelistGetSignalErrorFull() instead")
    void kkidChorelistGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidChorelistGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidChorelistPostSignalErrorFull() instead")
    void kkidChorelistPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidChorelistPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidChorelistPutSignalErrorFull() instead")
    void kkidChorelistPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidChorelistPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidMasteruserPostSignalErrorFull() instead")
    void kkidMasteruserPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidMasteruserPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidShareGetSignalErrorFull() instead")
    void kkidShareGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidShareGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserGetSignalErrorFull() instead")
    void kkidUserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserlistDeleteSignalErrorFull() instead")
    void kkidUserlistDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserlistDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserlistGetSignalErrorFull() instead")
    void kkidUserlistGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserlistGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserlistPostSignalErrorFull() instead")
    void kkidUserlistPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserlistPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidUserlistPutSignalErrorFull() instead")
    void kkidUserlistPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidUserlistPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidWishlistDeleteSignalErrorFull() instead")
    void kkidWishlistDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidWishlistDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidWishlistGetSignalErrorFull() instead")
    void kkidWishlistGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidWishlistGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidWishlistPostSignalErrorFull() instead")
    void kkidWishlistPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidWishlistPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kkidWishlistPutSignalErrorFull() instead")
    void kkidWishlistPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kkidWishlistPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
