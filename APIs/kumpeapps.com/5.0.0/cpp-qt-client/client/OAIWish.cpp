/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWish.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWish::OAIWish(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWish::OAIWish() {
    this->initializeModel();
}

OAIWish::~OAIWish() {}

void OAIWish::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_master_id_isSet = false;
    m_master_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIWish::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWish::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_master_id_isValid = ::OpenAPI::fromJsonValue(m_master_id, json[QString("master_id")]);
    m_master_id_isSet = !json[QString("master_id")].isNull() && m_master_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIWish::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWish::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_master_id_isSet) {
        obj.insert(QString("master_id"), ::OpenAPI::toJsonValue(m_master_id));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIWish::getDescription() const {
    return m_description;
}
void OAIWish::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWish::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWish::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIWish::getId() const {
    return m_id;
}
void OAIWish::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWish::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWish::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWish::getLink() const {
    return m_link;
}
void OAIWish::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIWish::is_link_Set() const{
    return m_link_isSet;
}

bool OAIWish::is_link_Valid() const{
    return m_link_isValid;
}

qint32 OAIWish::getMasterId() const {
    return m_master_id;
}
void OAIWish::setMasterId(const qint32 &master_id) {
    m_master_id = master_id;
    m_master_id_isSet = true;
}

bool OAIWish::is_master_id_Set() const{
    return m_master_id_isSet;
}

bool OAIWish::is_master_id_Valid() const{
    return m_master_id_isValid;
}

qint32 OAIWish::getPriority() const {
    return m_priority;
}
void OAIWish::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIWish::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIWish::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIWish::getTitle() const {
    return m_title;
}
void OAIWish::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWish::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWish::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIWish::getUserId() const {
    return m_user_id;
}
void OAIWish::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIWish::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIWish::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIWish::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWish::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
