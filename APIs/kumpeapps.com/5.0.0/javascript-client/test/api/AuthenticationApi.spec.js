/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KumpeAppsApi);
  }
}(this, function(expect, KumpeAppsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KumpeAppsApi.AuthenticationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuthenticationApi', function() {
    describe('appkeyPatch', function() {
      it('should call appkeyPatch successfully', function(done) {
        //uncomment below and update the code to test appkeyPatch
        //instance.appkeyPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appkeyPost', function() {
      it('should call appkeyPost successfully', function(done) {
        //uncomment below and update the code to test appkeyPost
        //instance.appkeyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appkeyPut', function() {
      it('should call appkeyPut successfully', function(done) {
        //uncomment below and update the code to test appkeyPut
        //instance.appkeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authAppkeyPatch', function() {
      it('should call authAppkeyPatch successfully', function(done) {
        //uncomment below and update the code to test authAppkeyPatch
        //instance.authAppkeyPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authAppkeyPost', function() {
      it('should call authAppkeyPost successfully', function(done) {
        //uncomment below and update the code to test authAppkeyPost
        //instance.authAppkeyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authAppkeyPut', function() {
      it('should call authAppkeyPut successfully', function(done) {
        //uncomment below and update the code to test authAppkeyPut
        //instance.authAppkeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authAuthkeyGet', function() {
      it('should call authAuthkeyGet successfully', function(done) {
        //uncomment below and update the code to test authAuthkeyGet
        //instance.authAuthkeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authAuthkeyPatch', function() {
      it('should call authAuthkeyPatch successfully', function(done) {
        //uncomment below and update the code to test authAuthkeyPatch
        //instance.authAuthkeyPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authAuthkeyPost', function() {
      it('should call authAuthkeyPost successfully', function(done) {
        //uncomment below and update the code to test authAuthkeyPost
        //instance.authAuthkeyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authAuthkeyPut', function() {
      it('should call authAuthkeyPut successfully', function(done) {
        //uncomment below and update the code to test authAuthkeyPut
        //instance.authAuthkeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authVerifyotpGet', function() {
      it('should call authVerifyotpGet successfully', function(done) {
        //uncomment below and update the code to test authVerifyotpGet
        //instance.authVerifyotpGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authkeyGet', function() {
      it('should call authkeyGet successfully', function(done) {
        //uncomment below and update the code to test authkeyGet
        //instance.authkeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authkeyPatch', function() {
      it('should call authkeyPatch successfully', function(done) {
        //uncomment below and update the code to test authkeyPatch
        //instance.authkeyPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authkeyPost', function() {
      it('should call authkeyPost successfully', function(done) {
        //uncomment below and update the code to test authkeyPost
        //instance.authkeyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authkeyPut', function() {
      it('should call authkeyPut successfully', function(done) {
        //uncomment below and update the code to test authkeyPut
        //instance.authkeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
