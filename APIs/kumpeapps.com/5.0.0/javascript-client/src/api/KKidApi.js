/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddUserResponse from '../model/AddUserResponse';
import Allowance from '../model/Allowance';
import Chorelist from '../model/Chorelist';
import Model201Share from '../model/Model201Share';
import Model405 from '../model/Model405';
import Model412 from '../model/Model412';
import Nodata from '../model/Nodata';
import Success from '../model/Success';
import Userlist from '../model/Userlist';
import Wishlist from '../model/Wishlist';

/**
* KKid service.
* @module api/KKidApi
* @version 5.0.0
*/
export default class KKidApi {

    /**
    * Constructs a new KKidApi. 
    * @alias module:api/KKidApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the kkidAllowanceGet operation.
     * @callback module:api/KKidApi~kkidAllowanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Allowance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns allowance balance and allowance transactions
     * By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user. 
     * @param {Number} kidUserId userID of the kid
     * @param {Object} opts Optional parameters
     * @param {Number} [transactionDays] number of days you wish to search allowance transactions (default is 90 days)
     * @param {module:api/KKidApi~kkidAllowanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Allowance}
     */
    kkidAllowanceGet(kidUserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'kidUserId' is set
      if (kidUserId === undefined || kidUserId === null) {
        throw new Error("Missing the required parameter 'kidUserId' when calling kkidAllowanceGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'kidUserId': kidUserId,
        'transactionDays': opts['transactionDays']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Allowance;
      return this.apiClient.callApi(
        '/kkid/allowance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidAllowancePost operation.
     * @callback module:api/KKidApi~kkidAllowancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds new allowance transaction to kidUserID
     * By passing in the appropriate options, you can add an allowance transaction to a given user. 
     * @param {Number} kidUserId userID of the kid
     * @param {Number} amount amount you wish to Add/Subtract (subtract value should be a negative value)
     * @param {String} description Description (reason) of allowance transaction
     * @param {module:model/String} transactionType Transaction Type (Add/Subtract)
     * @param {module:api/KKidApi~kkidAllowancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    kkidAllowancePost(kidUserId, amount, description, transactionType, callback) {
      let postBody = null;
      // verify the required parameter 'kidUserId' is set
      if (kidUserId === undefined || kidUserId === null) {
        throw new Error("Missing the required parameter 'kidUserId' when calling kkidAllowancePost");
      }
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling kkidAllowancePost");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling kkidAllowancePost");
      }
      // verify the required parameter 'transactionType' is set
      if (transactionType === undefined || transactionType === null) {
        throw new Error("Missing the required parameter 'transactionType' when calling kkidAllowancePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'kidUserId': kidUserId,
        'amount': amount,
        'description': description,
        'transactionType': transactionType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/kkid/allowance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidApnsPost operation.
     * @callback module:api/KKidApi~kkidApnsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * subscribes/unsubscribes/registers for apns push notifications
     * @param {Number} kidUserId userID of the kid
     * @param {module:model/String} tool tool you wish to talk to
     * @param {Object} opts Optional parameters
     * @param {String} [token] device APNS token (required for register)
     * @param {String} [devicename] Name of device to associate to token (required for register)
     * @param {String} [title] title of APNS message (required for send)
     * @param {String} [message] APNS message body (required for send)
     * @param {Number} [badge] Number for badge icon (optional for send)
     * @param {String} [sound] Name of sound file to play for send notification (optional for send)
     * @param {module:model/String} [section] Notification section name (required for send/subscribe/unsubscribe)
     * @param {module:model/String} [priority] Notification section name (optional for send, default is active)
     * @param {module:api/KKidApi~kkidApnsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    kkidApnsPost(kidUserId, tool, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'kidUserId' is set
      if (kidUserId === undefined || kidUserId === null) {
        throw new Error("Missing the required parameter 'kidUserId' when calling kkidApnsPost");
      }
      // verify the required parameter 'tool' is set
      if (tool === undefined || tool === null) {
        throw new Error("Missing the required parameter 'tool' when calling kkidApnsPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'kidUserId': kidUserId,
        'tool': tool,
        'token': opts['token'],
        'devicename': opts['devicename'],
        'title': opts['title'],
        'message': opts['message'],
        'badge': opts['badge'],
        'sound': opts['sound'],
        'section': opts['section'],
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/kkid/apns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidChorelistDelete operation.
     * @callback module:api/KKidApi~kkidChorelistDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes chore for given chore id
     * By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user's master account 
     * @param {Number} idChoreList id of the chore you wish to delete
     * @param {module:api/KKidApi~kkidChorelistDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    kkidChorelistDelete(idChoreList, callback) {
      let postBody = null;
      // verify the required parameter 'idChoreList' is set
      if (idChoreList === undefined || idChoreList === null) {
        throw new Error("Missing the required parameter 'idChoreList' when calling kkidChorelistDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'idChoreList': idChoreList
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/kkid/chorelist', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidChorelistGet operation.
     * @callback module:api/KKidApi~kkidChorelistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chorelist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns list of chores for given user
     * By passing in the appropriate options, you can search for chores assigned to a given user within the authenticated user's master account 
     * @param {Object} opts Optional parameters
     * @param {String} [kidUsername] Username of kid you wish to search
     * @param {module:model/String} [day] Day of week for chores (Weekly for weekly chores)
     * @param {String} [status] Status of Chore to search
     * @param {Boolean} [blockDash] Filter results by blockDash parameter
     * @param {Boolean} [optional] Filter results by optional parameter
     * @param {Boolean} [canSteal] Filter results by canSteal parameter
     * @param {Boolean} [includeCalendar] include calendar notations (default is false)
     * @param {module:api/KKidApi~kkidChorelistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chorelist}
     */
    kkidChorelistGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'kidUsername': opts['kidUsername'],
        'day': opts['day'],
        'status': opts['status'],
        'blockDash': opts['blockDash'],
        'optional': opts['optional'],
        'canSteal': opts['canSteal'],
        'includeCalendar': opts['includeCalendar']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Chorelist;
      return this.apiClient.callApi(
        '/kkid/chorelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidChorelistPost operation.
     * @callback module:api/KKidApi~kkidChorelistPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds chore for given user
     * By passing in the appropriate options, you can add a chore to given kid username under authenticated user's master account 
     * @param {String} kidUsername username of kid to assign the chore to.
     * @param {String} choreName name of chore
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [day] day of week (Monday, Tuesday....) for the chore. For weekly chores put Weekly or leave blank
     * @param {String} [nfcTag] text field of nfc tag required to check off chore
     * @param {String} [status] status of chore (default is todo)
     * @param {String} [choreDescription] optional chore description
     * @param {Number} [choreNumber] number priority of chore (default is 5)
     * @param {Boolean} [blockDash] block dash option on this chore
     * @param {Boolean} [oneTime] mark as one time chore (does not repeat each week)
     * @param {Number} [extraAllowance] ammount of allowance added at end of week for completing this chore
     * @param {Boolean} [optional] mark as optional chore
     * @param {Boolean} [reassignable] mark as reassignable (default is true)
     * @param {Boolean} [canSteal] mark as sibling can steal chore
     * @param {String} [startDate] date (yyyy-mm-dd) that you wish the chore to start showing up. (default is today)
     * @param {String} [notes] notes added to chore (visable only on reports, kids do not see this note, this is mostly just for the developer)
     * @param {Boolean} [requireObjectDetection] require use of camera to detect object detection tag order to check off chore
     * @param {String} [objectDetectionTag] tag for object detection to search for (required if requireObjectDetection is true)
     * @param {Boolean} [updatedByAutomation] true if chore updated via API from an Automation System
     * @param {String} [aiIcon] Notes if AI Icons should be used (n for no, y for yes, e for yes- error)
     * @param {Boolean} [isCalendar] True if this is a calendar note instead of a chore.
     * @param {module:api/KKidApi~kkidChorelistPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    kkidChorelistPost(kidUsername, choreName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'kidUsername' is set
      if (kidUsername === undefined || kidUsername === null) {
        throw new Error("Missing the required parameter 'kidUsername' when calling kkidChorelistPost");
      }
      // verify the required parameter 'choreName' is set
      if (choreName === undefined || choreName === null) {
        throw new Error("Missing the required parameter 'choreName' when calling kkidChorelistPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'kidUsername': kidUsername,
        'day': opts['day'],
        'nfcTag': opts['nfcTag'],
        'status': opts['status'],
        'choreName': choreName,
        'choreDescription': opts['choreDescription'],
        'choreNumber': opts['choreNumber'],
        'blockDash': opts['blockDash'],
        'oneTime': opts['oneTime'],
        'extraAllowance': opts['extraAllowance'],
        'optional': opts['optional'],
        'reassignable': opts['reassignable'],
        'canSteal': opts['canSteal'],
        'startDate': opts['startDate'],
        'notes': opts['notes'],
        'requireObjectDetection': opts['requireObjectDetection'],
        'objectDetectionTag': opts['objectDetectionTag'],
        'updatedByAutomation': opts['updatedByAutomation'],
        'aiIcon': opts['aiIcon'],
        'isCalendar': opts['isCalendar']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/kkid/chorelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidChorelistPut operation.
     * @callback module:api/KKidApi~kkidChorelistPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates chore for given chore id
     * By passing in the appropriate options, you can update the fields of a specific core within the authenticated user's master account 
     * @param {Number} idChoreList id number of chore you wish to update
     * @param {Object} opts Optional parameters
     * @param {String} [status] new status of chore
     * @param {Boolean} [stolen] mark chore as stolen by sibling
     * @param {String} [stolenBy] username of sibling that stole the chore (required if stolen is true)
     * @param {String} [nfcTag] text field of NFC tag that is required to be scanned to check off this chore (normally null)
     * @param {String} [notes] notes field for chore
     * @param {Number} [latitude] GPS latitude of where the chore was marked
     * @param {Number} [longitude] GPS longitude of where the chore was marked
     * @param {Number} [altitude] GPS altitude of where the chore was marked
     * @param {Boolean} [updatedByAutomation] true if updated via API by automation system
     * @param {module:model/String} [whereDay] Where day equals...
     * @param {String} [whereStatus] Where status equals...
     * @param {String} [whereName] Where chore name equals...
     * @param {module:api/KKidApi~kkidChorelistPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    kkidChorelistPut(idChoreList, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idChoreList' is set
      if (idChoreList === undefined || idChoreList === null) {
        throw new Error("Missing the required parameter 'idChoreList' when calling kkidChorelistPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'idChoreList': idChoreList,
        'status': opts['status'],
        'stolen': opts['stolen'],
        'stolenBy': opts['stolenBy'],
        'nfcTag': opts['nfcTag'],
        'notes': opts['notes'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'altitude': opts['altitude'],
        'updatedByAutomation': opts['updatedByAutomation'],
        'whereDay': opts['whereDay'],
        'whereStatus': opts['whereStatus'],
        'whereName': opts['whereName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/kkid/chorelist', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidMasteruserPost operation.
     * @callback module:api/KKidApi~kkidMasteruserPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds new master user account
     * By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY) 
     * @param {String} username username of user to create
     * @param {String} password password of user to create
     * @param {String} email email address of user to create
     * @param {String} firstName First Name of user to create
     * @param {String} lastName Last Name of user to create
     * @param {module:api/KKidApi~kkidMasteruserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddUserResponse}
     */
    kkidMasteruserPost(username, password, email, firstName, lastName, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling kkidMasteruserPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling kkidMasteruserPost");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling kkidMasteruserPost");
      }
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling kkidMasteruserPost");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling kkidMasteruserPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password,
        'email': email,
        'firstName': firstName,
        'lastName': lastName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddUserResponse;
      return this.apiClient.callApi(
        '/kkid/masteruser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidShareGet operation.
     * @callback module:api/KKidApi~kkidShareGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model201Share} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Share Link
     * Create share link
     * @param {String} linkUserId User ID that the link should be authenticated to
     * @param {module:model/String} link Link to share
     * @param {module:model/String} scope Authentication scope for link
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [scope2] Authentication scope for link
     * @param {module:model/String} [scope3] Authentication scope for link
     * @param {module:model/String} [scope4] Authentication scope for link
     * @param {module:api/KKidApi~kkidShareGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model201Share}
     */
    kkidShareGet(linkUserId, link, scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'linkUserId' is set
      if (linkUserId === undefined || linkUserId === null) {
        throw new Error("Missing the required parameter 'linkUserId' when calling kkidShareGet");
      }
      // verify the required parameter 'link' is set
      if (link === undefined || link === null) {
        throw new Error("Missing the required parameter 'link' when calling kkidShareGet");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling kkidShareGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'linkUserId': linkUserId,
        'link': link,
        'scope': scope,
        'scope2': opts['scope2'],
        'scope3': opts['scope3'],
        'scope4': opts['scope4']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model201Share;
      return this.apiClient.callApi(
        '/kkid/share', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidUserGet operation.
     * @callback module:api/KKidApi~kkidUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Userlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets user info
     * Gets user info for authenticated user
     * @param {Object} opts Optional parameters
     * @param {Boolean} [enableBool] Use bool values instead of Int 0/1
     * @param {module:api/KKidApi~kkidUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Userlist}
     */
    kkidUserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'enableBool': opts['enableBool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Userlist;
      return this.apiClient.callApi(
        '/kkid/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidUserlistDelete operation.
     * @callback module:api/KKidApi~kkidUserlistDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes user
     * By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY) 
     * @param {Number} userID userID of the user you wish to delete
     * @param {module:api/KKidApi~kkidUserlistDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    kkidUserlistDelete(userID, callback) {
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling kkidUserlistDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'userID': userID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/kkid/userlist', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidUserlistGet operation.
     * @callback module:api/KKidApi~kkidUserlistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Userlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns list of users
     * By passing in the appropriate options, you can search for users within the authenticated user's master account 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isChild] Filter Search by isChild flag
     * @param {Boolean} [isActive] Filter Search by isActive flag
     * @param {Boolean} [isAdmin] Filter Search by isAdmin flag
     * @param {Boolean} [enableAllowance] Filter Search by enableAllowance flag
     * @param {Boolean} [enableChores] Filter Search by enableChores flag
     * @param {Number} [userID] userID of user to search
     * @param {String} [username] Username of user to search
     * @param {String} [email] Email address of user to search
     * @param {module:api/KKidApi~kkidUserlistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Userlist}
     */
    kkidUserlistGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isChild': opts['isChild'],
        'isActive': opts['isActive'],
        'isAdmin': opts['isAdmin'],
        'enableAllowance': opts['enableAllowance'],
        'enableChores': opts['enableChores'],
        'userID': opts['userID'],
        'username': opts['username'],
        'email': opts['email']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Userlist;
      return this.apiClient.callApi(
        '/kkid/userlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidUserlistPost operation.
     * @callback module:api/KKidApi~kkidUserlistPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds new child user
     * By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access. 
     * @param {String} username username of user to create
     * @param {String} password password of user to create
     * @param {String} email email address of user to create
     * @param {String} firstName First Name of user to create
     * @param {String} lastName Last Name of user to create
     * @param {module:api/KKidApi~kkidUserlistPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddUserResponse}
     */
    kkidUserlistPost(username, password, email, firstName, lastName, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling kkidUserlistPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling kkidUserlistPost");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling kkidUserlistPost");
      }
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling kkidUserlistPost");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling kkidUserlistPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password,
        'email': email,
        'firstName': firstName,
        'lastName': lastName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddUserResponse;
      return this.apiClient.callApi(
        '/kkid/userlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidUserlistPut operation.
     * @callback module:api/KKidApi~kkidUserlistPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates user
     * By passing in the appropriate variables this method updates the user's profile 
     * @param {Number} userID userID of the user you wish to update
     * @param {String} username username of user to create
     * @param {String} email email address of user to create
     * @param {String} firstName First Name of user to create
     * @param {String} lastName Last Name of user to create
     * @param {Object} opts Optional parameters
     * @param {String} [emoji] emoji character for user
     * @param {String} [tmdbKey] User's TMdB Session Key
     * @param {Boolean} [enableWishList] set status of Wish List module enabled
     * @param {Boolean} [enableChores] set status of chores module enabled
     * @param {Boolean} [enableAllowance] set status of allowance module enabled
     * @param {Boolean} [enableAdmin] set status of isAdmin
     * @param {Boolean} [enableTmdb] set status of enableTmdb (movie and tv search)
     * @param {Boolean} [enableObjectDetection] set status of enableObjectDetection
     * @param {module:api/KKidApi~kkidUserlistPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddUserResponse}
     */
    kkidUserlistPut(userID, username, email, firstName, lastName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling kkidUserlistPut");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling kkidUserlistPut");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling kkidUserlistPut");
      }
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling kkidUserlistPut");
      }
      // verify the required parameter 'lastName' is set
      if (lastName === undefined || lastName === null) {
        throw new Error("Missing the required parameter 'lastName' when calling kkidUserlistPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'userID': userID,
        'username': username,
        'email': email,
        'firstName': firstName,
        'lastName': lastName,
        'emoji': opts['emoji'],
        'tmdbKey': opts['tmdbKey'],
        'enableWishList': opts['enableWishList'],
        'enableChores': opts['enableChores'],
        'enableAllowance': opts['enableAllowance'],
        'enableAdmin': opts['enableAdmin'],
        'enableTmdb': opts['enableTmdb'],
        'enableObjectDetection': opts['enableObjectDetection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddUserResponse;
      return this.apiClient.callApi(
        '/kkid/userlist', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidWishlistDelete operation.
     * @callback module:api/KKidApi~kkidWishlistDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete item from wishlist
     * @param {Number} wishId ID of wishlist item to delete
     * @param {module:api/KKidApi~kkidWishlistDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    kkidWishlistDelete(wishId, callback) {
      let postBody = null;
      // verify the required parameter 'wishId' is set
      if (wishId === undefined || wishId === null) {
        throw new Error("Missing the required parameter 'wishId' when calling kkidWishlistDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'wishId': wishId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/kkid/wishlist', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidWishlistGet operation.
     * @callback module:api/KKidApi~kkidWishlistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wishlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of wishlist items
     * @param {Object} opts Optional parameters
     * @param {Number} [kidUserId] userID of the kid
     * @param {module:api/KKidApi~kkidWishlistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wishlist}
     */
    kkidWishlistGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'kidUserId': opts['kidUserId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Wishlist;
      return this.apiClient.callApi(
        '/kkid/wishlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidWishlistPost operation.
     * @callback module:api/KKidApi~kkidWishlistPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add item to kid's wishlist
     * @param {Number} kidUserId userID of the kid
     * @param {String} title Item title
     * @param {Object} opts Optional parameters
     * @param {String} [description] Item Description
     * @param {Number} [priority] Item Priority
     * @param {String} [link] URL Link to item
     * @param {module:api/KKidApi~kkidWishlistPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    kkidWishlistPost(kidUserId, title, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'kidUserId' is set
      if (kidUserId === undefined || kidUserId === null) {
        throw new Error("Missing the required parameter 'kidUserId' when calling kkidWishlistPost");
      }
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling kkidWishlistPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'kidUserId': kidUserId,
        'title': title,
        'description': opts['description'],
        'priority': opts['priority'],
        'link': opts['link']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/kkid/wishlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the kkidWishlistPut operation.
     * @callback module:api/KKidApi~kkidWishlistPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update item on kid's wishlist
     * @param {Number} wishId Wish list item ID to update
     * @param {Object} opts Optional parameters
     * @param {String} [title] Item title
     * @param {String} [description] Item Description
     * @param {Number} [priority] Item Priority
     * @param {String} [link] URL Link to item
     * @param {module:api/KKidApi~kkidWishlistPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    kkidWishlistPut(wishId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wishId' is set
      if (wishId === undefined || wishId === null) {
        throw new Error("Missing the required parameter 'wishId' when calling kkidWishlistPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'wishId': wishId,
        'title': opts['title'],
        'description': opts['description'],
        'priority': opts['priority'],
        'link': opts['link']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/kkid/wishlist', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
