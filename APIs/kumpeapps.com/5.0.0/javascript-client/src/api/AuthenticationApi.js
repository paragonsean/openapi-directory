/**
 * KumpeApps API
 * KKid API. Due to security concerns all calls to this API requires authentication. If you have access then you may use your KumpeApps username/password to authenticate. To gain access please use the contact developer link below.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: helpdesk@kumpeapps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse201 from '../model/InlineResponse201';
import InlineResponse2011 from '../model/InlineResponse2011';
import InlineResponse202 from '../model/InlineResponse202';
import Model403 from '../model/Model403';
import Model449 from '../model/Model449';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 5.0.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appkeyPatch operation.
     * @callback module:api/AuthenticationApi~appkeyPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compromise app key
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * @param {String} appKey compromised app key
     * @param {Object} opts Optional parameters
     * @param {String} [comments] Comments (like how was this compromised)
     * @param {module:api/AuthenticationApi~appkeyPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    appkeyPatch(appKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling appkeyPatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'app_key': appKey,
        'comments': opts['comments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/appkey', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appkeyPost operation.
     * @callback module:api/AuthenticationApi~appkeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request app key
     * Request a new app key by passing username and password for app account
     * @param {String} username Username assigned to your app
     * @param {String} password Password assigned to your app
     * @param {Boolean} supportsYubikey App supports YubiKey OTP
     * @param {module:api/AuthenticationApi~appkeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    appkeyPost(username, password, supportsYubikey, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling appkeyPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling appkeyPost");
      }
      // verify the required parameter 'supportsYubikey' is set
      if (supportsYubikey === undefined || supportsYubikey === null) {
        throw new Error("Missing the required parameter 'supportsYubikey' when calling appkeyPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password,
        'supportsYubikey': supportsYubikey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/appkey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appkeyPut operation.
     * @callback module:api/AuthenticationApi~appkeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate app key
     * Pass your app key to deactivate the key
     * @param {String} appKey app key to deactivate
     * @param {module:api/AuthenticationApi~appkeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    appkeyPut(appKey, callback) {
      let postBody = null;
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling appkeyPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'app_key': appKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/appkey', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authAppkeyPatch operation.
     * @callback module:api/AuthenticationApi~authAppkeyPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compromise app key
     * Pass an app key to mark it as compromised. This may be submitted by the app owner or a concerned party that has optained the compromised app key.
     * @param {String} appKey compromised app key
     * @param {Object} opts Optional parameters
     * @param {String} [comments] Comments (like how was this compromised)
     * @param {module:api/AuthenticationApi~authAppkeyPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    authAppkeyPatch(appKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling authAppkeyPatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'app_key': appKey,
        'comments': opts['comments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/authentication/appkey', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authAppkeyPost operation.
     * @callback module:api/AuthenticationApi~authAppkeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request app key
     * Request a new app key by passing username and password for app account
     * @param {String} username Username assigned to your app
     * @param {String} password Password assigned to your app
     * @param {Boolean} supportsYubikey App supports YubiKey OTP
     * @param {module:api/AuthenticationApi~authAppkeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    authAppkeyPost(username, password, supportsYubikey, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling authAppkeyPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authAppkeyPost");
      }
      // verify the required parameter 'supportsYubikey' is set
      if (supportsYubikey === undefined || supportsYubikey === null) {
        throw new Error("Missing the required parameter 'supportsYubikey' when calling authAppkeyPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password,
        'supportsYubikey': supportsYubikey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/authentication/appkey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authAppkeyPut operation.
     * @callback module:api/AuthenticationApi~authAppkeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate app key
     * Pass your app key to deactivate the key
     * @param {String} appKey app key to deactivate
     * @param {module:api/AuthenticationApi~authAppkeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    authAppkeyPut(appKey, callback) {
      let postBody = null;
      // verify the required parameter 'appKey' is set
      if (appKey === undefined || appKey === null) {
        throw new Error("Missing the required parameter 'appKey' when calling authAppkeyPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'app_key': appKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/authentication/appkey', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authAuthkeyGet operation.
     * @callback module:api/AuthenticationApi~authAuthkeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param {String} username Authenticated username
     * @param {String} password Authenticated password
     * @param {Object} opts Optional parameters
     * @param {String} [otp] YubiKey OTP (if configured for user)
     * @param {String} [deviceName] User's device name
     * @param {String} [identifierForVendor] identifierForVendor for User's Device (if app is iOS)
     * @param {module:api/AuthenticationApi~authAuthkeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2011}
     */
    authAuthkeyGet(username, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling authAuthkeyGet");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authAuthkeyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password,
        'otp': opts['otp'],
        'deviceName': opts['deviceName'],
        'identifierForVendor': opts['identifierForVendor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;
      return this.apiClient.callApi(
        '/authentication/authkey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authAuthkeyPatch operation.
     * @callback module:api/AuthenticationApi~authAuthkeyPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compromise auth key
     * Mark user auth key as compromised
     * @param {String} authKey auth key to mark as compromised
     * @param {Object} opts Optional parameters
     * @param {String} [comments] Comments (like how was this compromised)
     * @param {module:api/AuthenticationApi~authAuthkeyPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    authAuthkeyPatch(authKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authKey' is set
      if (authKey === undefined || authKey === null) {
        throw new Error("Missing the required parameter 'authKey' when calling authAuthkeyPatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'auth_key': authKey,
        'comments': opts['comments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/authentication/authkey', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authAuthkeyPost operation.
     * @callback module:api/AuthenticationApi~authAuthkeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param {String} username Authenticated username
     * @param {String} password Authenticated password
     * @param {Object} opts Optional parameters
     * @param {String} [otp] YubiKey OTP (if configured for user)
     * @param {module:api/AuthenticationApi~authAuthkeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2011}
     */
    authAuthkeyPost(username, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling authAuthkeyPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authAuthkeyPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password,
        'otp': opts['otp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;
      return this.apiClient.callApi(
        '/authentication/authkey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authAuthkeyPut operation.
     * @callback module:api/AuthenticationApi~authAuthkeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate auth key (logout)
     * Deactivate auth key for user logging them out of your application
     * @param {String} authKey auth key to logout
     * @param {module:api/AuthenticationApi~authAuthkeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    authAuthkeyPut(authKey, callback) {
      let postBody = null;
      // verify the required parameter 'authKey' is set
      if (authKey === undefined || authKey === null) {
        throw new Error("Missing the required parameter 'authKey' when calling authAuthkeyPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'auth_key': authKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/authentication/authkey', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authVerifyotpGet operation.
     * @callback module:api/AuthenticationApi~authVerifyotpGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies YubiKey OTP for authenticated user
     * Verifies YubiKey OTP for authenticated user
     * @param {String} otp YubiKey OTP code
     * @param {module:api/AuthenticationApi~authVerifyotpGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authVerifyotpGet(otp, callback) {
      let postBody = null;
      // verify the required parameter 'otp' is set
      if (otp === undefined || otp === null) {
        throw new Error("Missing the required parameter 'otp' when calling authVerifyotpGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'otp': otp
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/authentication/verifyotp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authkeyGet operation.
     * @callback module:api/AuthenticationApi~authkeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param {String} username Authenticated username
     * @param {String} password Authenticated password
     * @param {Object} opts Optional parameters
     * @param {String} [otp] YubiKey OTP (if configured for user)
     * @param {module:api/AuthenticationApi~authkeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2011}
     */
    authkeyGet(username, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling authkeyGet");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authkeyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password,
        'otp': opts['otp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;
      return this.apiClient.callApi(
        '/authkey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authkeyPatch operation.
     * @callback module:api/AuthenticationApi~authkeyPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compromise auth key
     * Mark user auth key as compromised
     * @param {String} authKey auth key to mark as compromised
     * @param {Object} opts Optional parameters
     * @param {String} [comments] Comments (like how was this compromised)
     * @param {module:api/AuthenticationApi~authkeyPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    authkeyPatch(authKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authKey' is set
      if (authKey === undefined || authKey === null) {
        throw new Error("Missing the required parameter 'authKey' when calling authkeyPatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'auth_key': authKey,
        'comments': opts['comments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/authkey', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authkeyPost operation.
     * @callback module:api/AuthenticationApi~authkeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request auth key for user (login user)
     * Obtain auth key for user that has provided their username and password to login to your app. (or to obtain an auth key for a script like IFTTT)
     * @param {String} username Authenticated username
     * @param {String} password Authenticated password
     * @param {Object} opts Optional parameters
     * @param {String} [otp] YubiKey OTP (if configured for user)
     * @param {module:api/AuthenticationApi~authkeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2011}
     */
    authkeyPost(username, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling authkeyPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authkeyPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password,
        'otp': opts['otp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;
      return this.apiClient.callApi(
        '/authkey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authkeyPut operation.
     * @callback module:api/AuthenticationApi~authkeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate auth key (logout)
     * Deactivate auth key for user logging them out of your application
     * @param {String} authKey auth key to logout
     * @param {module:api/AuthenticationApi~authkeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse202}
     */
    authkeyPut(authKey, callback) {
      let postBody = null;
      // verify the required parameter 'authKey' is set
      if (authKey === undefined || authKey === null) {
        throw new Error("Missing the required parameter 'authKey' when calling authkeyPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'auth_key': authKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/authkey', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
