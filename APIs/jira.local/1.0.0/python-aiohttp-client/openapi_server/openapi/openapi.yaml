openapi: 3.0.1
info:
  contact: {}
  title: JIRA 7.6.1
  version: 1.0.0
  x-apisguru-categories:
  - developer_tools
  x-logo:
    url: https://twitter.com/Atlassian/profile_image?size=original
  x-origin:
  - converter:
      url: https://github.com/lucybot/api-spec-converter
      version: 2.7.18
    format: wadl
    url: https://docs.atlassian.com/jira/REST/server/jira-rest-plugin.wadl
    version: "1.0"
  x-providerName: jira.local
servers:
- url: http://jira.local:8080/jira/rest/
paths:
  /api/2/application-properties:
    get:
      description: Returns an application property.
      operationId: api2_application_properties_get
      parameters:
      - description: a String containing the property key
        in: query
        name: key
        schema:
          type: string
      - description: |-
          when fetching a list specifies the permission level of all items in the list
                                  see {@link com.atlassian.jira.bc.admin.ApplicationPropertiesService.EditPermissionLevel}
        in: query
        name: permissionLevel
        schema:
          type: string
      - description: |-
          when fetching a list allows the list to be filtered by the property's start of key
                                  e.g. "jira.lf.*" whould fetch only those permissions that are editable and whose keys start with
                                  "jira.lf.". This is a regex.
        in: query
        name: keyFilter
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/application-properties/advanced-settings:
    get:
      description: Returns the properties that are displayed on the "General Configuration
        > Advanced Settings" page.
      operationId: get_advanced_settings
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/application-properties/{id}:
    put:
      description: Modify an application property via PUT. The "value" field present
        in the PUT will override the existing value.
      operationId: set_property_via_restful_table
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/applicationrole:
    get:
      description: |-
        Returns all ApplicationRoles in the system. Will also return an ETag header containing a version hash of the
         collection of ApplicationRoles.
      operationId: get_all
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Updates the ApplicationRoles with the passed data if the version hash is the same as the server.
         Only the groups and default groups setting of the role may be updated. Requests to change the key
         or the name of the role will be silently ignored. It is acceptable to pass only the roles that are updated
         as roles that are present in the server but not in data to update with, will not be deleted.
      operationId: put_bulk
      parameters:
      - in: header
        name: If-Match
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/applicationrole/{key}:
    get:
      description: Returns the ApplicationRole with passed key if it exists.
      operationId: get
      parameters:
      - description: the key of the role to update.
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Updates the ApplicationRole with the passed data. Only the groups and default groups setting of the
         role may be updated. Requests to change the key or the name of the role will be silently ignored.
         <p>
         Optional: If versionHash is passed through the If-Match header the request will be rejected if not the
         same as server
      operationId: put
      parameters:
      - description: the key of the role to update.
        in: path
        name: key
        required: true
        schema:
          type: string
      - description: the hash of the version to update. Optional Param
        in: header
        name: If-Match
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/attachment/meta:
    get:
      description: |-
        Returns the meta information for an attachments, specifically if they are enabled and the maximum upload size
         allowed.
      operationId: get_attachment_meta
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/attachment/{id}:
    delete:
      description: Remove an attachment from an issue.
      operationId: remove_attachment
      parameters:
      - description: id of the attachment to remove
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: "Returns the meta-data for an attachment, including the URI of\
        \ the actual attached file."
      operationId: get_attachment
      parameters:
      - description: id of the attachment to remove
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/attachment/{id}/expand/human:
    get:
      description: Tries to expand an attachment. Output is human-readable and subject
        to change.
      operationId: expand_for_humans
      parameters:
      - description: the id of the attachment to expand.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/attachment/{id}/expand/raw:
    get:
      description: Tries to expand an attachment. Output is raw and should be backwards-compatible
        through the course of time.
      operationId: expand_for_machines
      parameters:
      - description: the id of the attachment to expand.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/auditing/record:
    get:
      description: Returns auditing records filtered using provided parameters
      operationId: get_records
      parameters:
      - description: '- the number of record from which search starts'
        in: query
        name: offset
        schema:
          format: int32
          type: integer
      - description: "- maximum number of returned results (if is limit is <= 0 or\
          \ > 1000, it will be set do default value: 1000)"
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: '- text query; each record that will be returned must contain
          the provided text in one of its fields'
        in: query
        name: filter
        schema:
          type: string
      - description: |-
          - timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty
                         only records that where created in the same moment or after the 'from' timestamp will be provided in response
        in: query
        name: from
        schema:
          type: string
      - description: |-
          - timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty
                         only records that where created in the same moment or earlier than the 'to' timestamp will be provided in response
        in: query
        name: to
        schema:
          type: string
      - description: '- list of project ids to look for'
        in: query
        name: projectIds
        schema:
          type: string
      - description: '- list of user ids to look for'
        in: query
        name: userIds
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Store a record in Audit Log
      operationId: add_record
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/avatar/{type}/system:
    get:
      description: Returns all system avatars of the given type.
      operationId: get_all_system_avatars
      parameters:
      - description: the avatar type
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/avatar/{type}/temporary:
    post:
      description: Creates temporary avatar
      operationId: store_temporary_avatar
      parameters:
      - description: the avatar type
        in: path
        name: type
        required: true
        schema:
          type: string
      - description: name of file being uploaded
        in: query
        name: filename
        schema:
          type: string
      - description: size of file
        in: query
        name: size
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/avatar/{type}/temporaryCrop:
    post:
      description: Updates the cropping instructions of the temporary avatar.
      operationId: api2_avatar_type_temporary_crop_post
      parameters:
      - description: the avatar type
        in: path
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/cluster/zdu/approve:
    post:
      operationId: approve_upgrade
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/cluster/zdu/cancel:
    post:
      operationId: cancel_upgrade
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/cluster/zdu/retryUpgrade:
    post:
      operationId: acknowledge_errors
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/cluster/zdu/start:
    post:
      operationId: set_ready_to_upgrade
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/cluster/zdu/state:
    get:
      operationId: get_state
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/comment/{commentId}/properties:
    get:
      description: Returns the keys of all properties for the comment identified by
        the key or by the id.
      operationId: api2_comment_comment_id_properties_get
      parameters:
      - description: the comment from which keys will be returned.
        in: path
        name: commentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/comment/{commentId}/properties/{propertyKey}:
    delete:
      description: |-
        Removes the property from the comment identified by the key or by the id. Ths user removing the property is required
         to have permissions to administer the comment.
      operationId: api2_comment_comment_id_properties_property_key_delete
      parameters:
      - description: the comment from which keys will be returned.
        in: path
        name: comment_id
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns the value of the property with a given key from the comment identified by the key or by the id. The user who retrieves
         the property is required to have permissions to read the comment.
      operationId: api2_comment_comment_id_properties_property_key_get
      parameters:
      - description: the comment from which keys will be returned.
        in: path
        name: commentId
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Sets the value of the specified comment's property.
         <p>
         You can use this resource to store a custom data against the comment identified by the key or by the id. The user
         who stores the data is required to have permissions to administer the comment.
         </p>
      operationId: api2_comment_comment_id_properties_property_key_put
      parameters:
      - description: the comment from which keys will be returned.
        in: path
        name: comment_id
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/component:
    post:
      description: Create a component via POST.
      operationId: create_component
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/component/{id}:
    delete:
      description: Delete a project component.
      operationId: api2_component_id_delete
      parameters:
      - description: The component to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The new component applied to issues whose 'id' component will be deleted.
                               If this value is null, then the 'id' component is simply removed from the related isues.
        in: query
        name: moveIssuesTo
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a project component.
      operationId: get_component
      parameters:
      - description: The component to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Modify a component via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field
         is not present, it is silently ignored.
         <p>
         If leadUserName is an empty string ("") the component lead will be removed.
      operationId: update_component
      parameters:
      - description: The component to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/component/{id}/relatedIssueCounts:
    get:
      description: Returns counts of issues related to this component.
      operationId: get_component_related_issues
      parameters:
      - description: a String containing the component id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/configuration:
    get:
      description: |-
        Returns the information if the optional features in JIRA are enabled or disabled. If the time tracking is enabled,
         it also returns the detailed information about time tracking configuration.
      operationId: get_configuration
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/customFieldOption/{id}:
    get:
      description: Returns a full representation of the Custom Field Option that has
        the given id.
      operationId: get_custom_field_option
      parameters:
      - description: a String containing an Custom Field Option id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/dashboard:
    get:
      description: "Returns a list of all dashboards, optionally filtering them."
      operationId: list
      parameters:
      - description: |-
          an optional filter that is applied to the list of dashboards. Valid values include
                                  <code>"favourite"</code> for returning only favourite dashboards, and <code>"my"</code> for returning
                                  dashboards that are owned by the calling user.
        in: query
        name: filter
        schema:
          type: string
      - description: |-
          the index of the first dashboard to return (0-based). must be 0 or a multiple of
                                  <code>maxResults</code>
        in: query
        name: startAt
        schema:
          format: int32
          type: integer
      - description: |-
          a hint as to the the maximum number of dashboards to return in each call. Note that the
                                  JIRA server reserves the right to impose a <code>maxResults</code> limit that is lower than the value that a
                                  client provides, dues to lack or resources or any other condition. When this happens, your results will be
                                  truncated. Callers should always check the returned <code>maxResults</code> to determine the value that is
                                  effectively being used.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/dashboard/{dashboardId}/items/{itemId}/properties:
    get:
      description: Returns the keys of all properties for the dashboard item identified
        by the id.
      operationId: api2_dashboard_dashboard_id_items_item_id_properties_get
      parameters:
      - description: the dashboard item from which keys will be returned.
        in: path
        name: itemId
        required: true
        schema:
          type: string
      - in: path
        name: dashboardId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}:
    delete:
      description: |-
        Removes the property from the dashboard item identified by the key or by the id. Ths user removing the property is required
         to have permissions to administer the dashboard item.
      operationId: api2_dashboard_dashboard_id_items_item_id_properties_property_key_delete
      parameters:
      - description: the dashboard item from which keys will be returned.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      - in: path
        name: dashboard_id
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns the value of the property with a given key from the dashboard item identified by the id.
         The user who retrieves the property is required to have permissions to read the dashboard item.
      operationId: api2_dashboard_dashboard_id_items_item_id_properties_property_key_get
      parameters:
      - description: the dashboard item from which keys will be returned.
        in: path
        name: itemId
        required: true
        schema:
          type: string
      - in: path
        name: dashboardId
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Sets the value of the specified dashboard item's property.
         <p>
         You can use this resource to store a custom data against the dashboard item identified by the id.
         The user who stores the data is required to have permissions to administer the dashboard item.
         </p>
      operationId: api2_dashboard_dashboard_id_items_item_id_properties_property_key_put
      parameters:
      - description: the dashboard item from which keys will be returned.
        in: path
        name: item_id
        required: true
        schema:
          type: string
      - in: path
        name: dashboard_id
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/dashboard/{id}:
    get:
      description: Returns a single dashboard.
      operationId: get_dashboard
      parameters:
      - description: the dashboard id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/field:
    get:
      description: "Returns a list of all fields, both System and Custom"
      operationId: get_fields
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Creates a custom field using a definition (object encapsulating
        custom field data)
      operationId: create_custom_field
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/filter:
    post:
      description: |-
        Creates a new filter, and returns newly created filter.
         Currently sets permissions just using the users default sharing permissions
      operationId: create_filter
      parameters:
      - description: the parameters to expand
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/filter/defaultShareScope:
    get:
      description: Returns the default share scope of the logged-in user.
      operationId: get_default_share_scope
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Sets the default share scope of the logged-in user. Available values
        are GLOBAL and PRIVATE.
      operationId: set_default_share_scope
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/filter/favourite:
    get:
      description: Returns the favourite filters of the logged-in user.
      operationId: get_favourite_filters
      parameters:
      - description: the parameters to expand
        in: query
        name: expand
        schema:
          type: string
      - description: enable calculating shared users collection
        in: query
        name: enableSharedUsers
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/filter/{id}:
    delete:
      description: Delete a filter.
      operationId: delete_filter
      parameters:
      - description: the id of the filter being looked up
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a filter given an id
      operationId: get_filter
      parameters:
      - description: the id of the filter being looked up
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the parameters to expand
        in: query
        name: expand
        schema:
          type: string
      - description: enable calculating shared users collection
        in: query
        name: enableSharedUsers
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: "Updates an existing filter, and returns its new value."
      operationId: edit_filter
      parameters:
      - description: the id of the filter being looked up
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the parameters to expand
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/filter/{id}/columns:
    delete:
      description: Resets the columns for the given filter such that the filter no
        longer has its own column config.
      operationId: api2_filter_id_columns_delete
      parameters:
      - description: id of the filter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns the default columns for the given filter. Currently logged in user will be used as
         the user making such request.
      operationId: api2_filter_id_columns_get
      parameters:
      - description: id of the filter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Sets the default columns for the given filter.
      operationId: api2_filter_id_columns_put
      parameters:
      - description: id of the filter
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/filter/{id}/permission:
    get:
      description: Returns all share permissions of the given filter.
      operationId: get_share_permissions
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Adds a share permissions to the given filter. Adding a global permission
        removes all previous permissions from the filter.
      operationId: add_share_permission
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/filter/{id}/permission/{permissionId}:
    get:
      description: Returns a single share permission of the given filter.
      operationId: get_share_permission
      parameters:
      - in: path
        name: permissionId
        required: true
        schema:
          format: int64
          type: integer
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/group:
    delete:
      description: |-
        Deletes a group by given group parameter.
         <p>
         Returns no content
      operationId: remove_group
      parameters:
      - description: (mandatory) The name of the group to delete.
        in: query
        name: groupname
        schema:
          type: string
      - description: "If you delete a group and content is restricted to that group,\
          \ the content will be hidden from all users. \n To prevent this, use this\
          \ parameter to specify a different group to transfer the restrictions (comments\
          \ and worklogs only) to."
        in: query
        name: swapGroup
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns REST representation for the requested group. Allows to get list of active users belonging to the
         specified group and its subgroups if "users" expand option is provided. You can page through users list by using
         indexes in expand param. For example to get users from index 10 to index 15 use "users[10:15]" expand value. This
         will return 6 users (if there are at least 16 users in this group). Indexes are 0-based and inclusive.
         <p>
         This resource is deprecated, please use group/member API instead.
      operationId: get_group
      parameters:
      - description: A name of requested group.
        in: query
        name: groupname
        schema:
          type: string
      - description: List of fields to expand. Currently only available expand is
          "users".
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Creates a group by given group parameter
         <p>
         Returns REST representation for the requested group.
      operationId: create_group
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/group/member:
    get:
      description: |-
        This resource returns a <a href="#pagination">paginated</a> list of users who are members of the specified group and its subgroups.
         Users in the page are ordered by user names. User of this resource is required to have sysadmin or admin permissions.
      operationId: get_users_from_group
      parameters:
      - description: a name of the group for which members will be returned.
        in: query
        name: groupname
        schema:
          type: string
      - description: inactive users will be included in the response if set to true.
        in: query
        name: includeInactiveUsers
        schema:
          default: false
          type: boolean
      - description: the index of the first user in group to return (0 based).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: the maximum number of users to return (max 50).
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/group/user:
    delete:
      description: |-
        Removes given user from a group.
         <p>
         Returns no content
      operationId: remove_user_from_group
      parameters:
      - description: A name of requested group.
        in: query
        name: groupname
        schema:
          type: string
      - description: User to remove from a group
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Adds given user to a group.
         <p>
         Returns the current state of the group.
      operationId: add_user_to_group
      parameters:
      - description: A name of requested group.
        in: query
        name: groupname
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/groups/picker:
    get:
      description: |-
        Returns groups with substrings matching a given query. This is mainly for use with
         the group picker, so the returned groups contain html to be used as picker suggestions.
         The groups are also wrapped in a single response object that also contains a header for
         use in the picker, specifically <i>Showing X of Y matching groups</i>.
         <p>
         The number of groups returned is limited by the system property "jira.ajax.autocomplete.limit"
         <p>
         The groups will be unique and sorted.
      operationId: find_groups
      parameters:
      - description: a String to match groups agains
        in: query
        name: query
        schema:
          type: string
      - in: query
        name: exclude
        schema:
          type: string
      - in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - in: query
        name: userName
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/groupuserpicker:
    get:
      description: |-
        Returns a list of users and groups matching query with highlighting. This resource cannot be accessed
         anonymously.
      operationId: find_users_and_groups
      parameters:
      - description: "A string used to search username, Name or e-mail address"
        in: query
        name: query
        schema:
          type: string
      - description: |-
          the maximum number of users to return (defaults to 50). The maximum allowed value is 1000. If
                              you specify a value that is higher than this number, your search results will be truncated.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - in: query
        name: showAvatar
        schema:
          type: boolean
      - description: "The custom field id, if this request comes from a custom field,\
          \ such as a user picker. Optional."
        in: query
        name: fieldId
        schema:
          type: string
      - description: |-
          The list of project ids to further restrict the search
                              This parameter can occur multiple times to pass in multiple project ids.
                              Comma separated value is not supported.
                              This parameter is only used when fieldId is present.
        in: query
        name: projectId
        schema:
          type: string
      - description: |-
          The list of issue type ids to further restrict the search.
                              This parameter can occur multiple times to pass in multiple issue type ids.
                              Comma separated value is not supported.
                              Special values such as -1 (all standard issue types), -2 (all subtask issue types) are supported.
                              This parameter is only used when fieldId is present.
        in: query
        name: issueTypeId
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/index/summary:
    get:
      description: |-
        Summarizes index condition of current node.
         <p/>
         Returned data consists of:
         <ul>
         <li><code>nodeId</code> - Node identifier.</li>
         <li><code>reportTime</code> - Time of this report creation.</li>
         <li><code>issueIndex</code> - Summary of issue index status.</li>
         <li><code>replicationQueues</code> - Map of index replication queues, where
         keys represent nodes from which replication operations came from.</li>
         </ul>
         <p/>
         <code>issueIndex</code> can contain:
         <ul>
         <li><code>indexReadable</code> - If <code>false</code> the end point failed to read data from issue index
         (check JIRA logs for detailed stack trace), otherwise <code>true</code>.
         When <code>false</code> other fields of <code>issueIndex</code> can be not visible.</li>
         <li><code>countInDatabase</code> - Count of issues found in database.</li>
         <li><code>countInIndex</code> - Count of issues found while querying index.</li>
         <li><code>lastUpdatedInDatabase</code> - Time of last update of issue found in database.</li>
         <li><code>lastUpdatedInIndex</code> - Time of last update of issue found while querying index.</li>
         </ul>
         <p/>
         <code>replicationQueues</code>'s map values can contain:
         <ul>
         <li><code>lastConsumedOperation</code> - Last executed index replication operation by current node from sending node's queue.</li>
         <li><code>lastConsumedOperation.id</code> - Identifier of the operation.</li>
         <li><code>lastConsumedOperation.replicationTime</code> - Time when the operation was sent to other nodes.</li>
         <li><code>lastOperationInQueue</code> - Last index replication operation in sending node's queue.</li>
         <li><code>lastOperationInQueue.id</code> - Identifier of the operation.</li>
         <li><code>lastOperationInQueue.replicationTime</code> - Time when the operation was sent to other nodes.</li>
         <li><code>queueSize</code> - Number of operations in queue from sending node to current node.</li>
         </ul>
      operationId: get_index_summary
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue:
    post:
      description: |-
        Creates an issue or a sub-task from a JSON representation.
         <p/>
         The fields that can be set on create, in either the fields parameter or the update parameter can be determined
         using the <b>/rest/api/2/issue/createmeta</b> resource.
         If a field is not configured to appear on the create screen, then it will not be in the createmeta, and a field
         validation error will occur if it is submitted.
         <p/>
         Creating a sub-task is similar to creating a regular issue, with two important differences:
         <ul>
         <li>the <code>issueType</code> field must correspond to a sub-task issue type (you can use
         <code>/issue/createmeta</code> to discover sub-task issue types), and</li>
         <li>you must provide a <code>parent</code> field in the issue create request containing the id or key of the
         parent issue.</li>
         </ul>
      operationId: create_issue
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/bulk:
    post:
      description: |-
        Creates issues or sub-tasks from a JSON representation.
         <p/>
         Creates many issues in one bulk operation.
         <p/>
         Creating a sub-task is similar to creating a regular issue. More details can be found in createIssue section:
         {@link IssueResource#createIssue(IssueUpdateBean)}}
      operationId: create_issues
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/createmeta:
    get:
      description: |-
        Returns the meta data for creating issues. This includes the available projects, issue types and fields,
         including field types and whether or not those fields are required.
         Projects will not be returned if the user does not have permission to create issues in that project.
         <p/>
         The fields in the createmeta correspond to the fields in the create screen for the project/issuetype.
         Fields not in the screen will not be in the createmeta.
         <p/>
         Fields will only be returned if <code>expand=projects.issuetypes.fields</code>.
         <p/>
         The results can be filtered by project and/or issue type, given by the query params.
      operationId: get_create_issue_meta
      parameters:
      - description: |-
          combined with the projectKeys param, lists the projects with which to filter the results. If absent, all projects are returned.
                                 This parameter can be specified multiple times, and/or be a comma-separated list.
                                 Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results.
        in: query
        name: projectIds
        schema:
          type: string
      - description: |-
          combined with the projectIds param, lists the projects with which to filter the results. If null, all projects are returned.
                                 This parameter can be specified multiple times, and/or be a comma-separated list.
                                 Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results.
        in: query
        name: projectKeys
        schema:
          type: string
      - description: |-
          combinded with issuetypeNames, lists the issue types with which to filter the results. If null, all issue types are returned.
                                 This parameter can be specified multiple times, and/or be a comma-separated list.
                                 Specifiying an issue type that does not exist is not an error.
        in: query
        name: issuetypeIds
        schema:
          type: string
      - description: |-
          combinded with issuetypeIds, lists the issue types with which to filter the results. If null, all issue types are returned.
                                 This parameter can be specified multiple times, but is NOT interpreted as a comma-separated list.
                                 Specifiying an issue type that does not exist is not an error.
        in: query
        name: issuetypeNames
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/picker:
    get:
      description: |-
        Returns suggested issues which match the auto-completion query for the user which executes this request. This REST
         method will check the user's history and the user's browsing context and select this issues, which match the query.
      operationId: get_issue_picker_resource
      parameters:
      - description: the query.
        in: query
        name: query
        schema:
          type: string
      - description: the JQL in context of which the request is executed. Only issues
          which match this JQL query will be included in results.
        in: query
        name: currentJQL
        schema:
          type: string
      - description: "the key of the issue in context of which the request is executed.\
          \ The issue which is in context will not be included in the auto-completion\
          \ result, even if it matches the query."
        in: query
        name: currentIssueKey
        schema:
          type: string
      - description: the id of the project in context of which the request is executed.
          Suggested issues will be only from this project.
        in: query
        name: currentProjectId
        schema:
          type: string
      - description: "if set to false, subtasks will not be included in the list."
        in: query
        name: showSubTasks
        schema:
          type: boolean
      - description: "if set to false and request is executed in context of a subtask,\
          \ the parent issue will not be included in the auto-completion result, even\
          \ if it matches the query."
        in: query
        name: showSubTaskParent
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}:
    delete:
      description: |-
        Delete an issue.
         <p/>
         If the issue has subtasks you must set the parameter deleteSubtasks=true to delete the issue.
         You cannot delete an issue without its subtasks also being deleted.
      operationId: delete_issue
      parameters:
      - description: the issue id or key to update (i.e. JRA-1330)
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: |-
          a String of true or false indicating that any subtasks should also be deleted.  If the
                                 issue has no subtasks this parameter is ignored.  If the issue has subtasks and this parameter is missing or false,
                                 then the issue will not be deleted and an error will be returned.
        in: query
        name: deleteSubtasks
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns a full representation of the issue for the given issue key.
         <p>
         An issue JSON consists of the issue key, a collection of fields,
         a link to the workflow transition sub-resource, and (optionally) the HTML rendered values of any fields that support it
         (e.g. if wiki syntax is enabled for the description or comments).
         <p>
         The <code>fields</code> param (which can be specified multiple times) gives a comma-separated list of fields
         to include in the response. This can be used to retrieve a subset of fields.
         A particular field can be excluded by prefixing it with a minus.
         <p>
         By default, all (<code>*all</code>) fields are returned in this get-issue resource. Note: the default is different
         when doing a jql search -- the default there is just navigable fields (<code>*navigable</code>).
         <ul>
         <li><code>*all</code> - include all fields</li>
         <li><code>*navigable</code> - include just navigable fields</li>
         <li><code>summary,comment</code> - include just the summary and comments</li>
         <li><code>-comment</code> - include everything except comments (the default is <code>*all</code> for get-issue)</li>
         <li><code>*all,-comment</code> - include everything except comments</li>
         </ul>
         <p>
         The {@code properties} param is similar to {@code fields} and specifies a comma-separated list of issue
         properties to include. Unlike {@code fields}, properties are not included by default. To include them all
         send {@code ?properties=*all}. You can also include only specified properties or exclude some properties
         with a minus (-) sign.
         <p>
         <ul>
         <li>{@code *all} - include all properties</li>
         <li>{@code *all, -prop1} - include all properties except {@code prop1} </li>
         <li>{@code prop1, prop1} - include {@code prop1} and {@code prop2} properties </li>
         </ul>
         </p>
         <p/>
         JIRA will attempt to identify the issue by the <code>issueIdOrKey</code> path parameter. This can be an issue id,
         or an issue key. If the issue cannot be found via an exact match, JIRA will also look for the issue in a case-insensitive way, or
         by looking to see if the issue was moved. In either of these cases, the request will proceed as normal (a 302 or other redirect
         will <b>not</b> be returned). The issue key contained in the response will indicate the current value of issue's key.
         <p/>
         The <code>expand</code> param is used to include, hidden by default, parts of response. This can be used to include:
         <ul>
         <li><code>renderedFields</code> - field values in HTML format</li>
         <li><code>names</code> - display name of each field</li>
         <li><code>schema</code> - schema for each field which describes a type of the field</li>
         <li><code>transitions</code> - all possible transitions for the given issue</li>
         <li><code>operations</code> - all possibles operations which may be applied on issue</li>
         <li><code>editmeta</code> - information about how each field may be edited. It contains field's schema as well.</li>
         <li><code>changelog</code> - history of all changes of the given issue</li>
         <li><code>versionedRepresentations</code> -
         REST representations of all fields. Some field may contain more recent versions. RESET representations are numbered.
         The greatest number always represents the most recent version. It is recommended that the most recent version is used.
         version for these fields which provide a more recent REST representation.
         After including <code>versionedRepresentations</code> "fields" field become hidden.</li>
         </ul>
      operationId: get_issue
      parameters:
      - description: the issue id or key to update (i.e. JRA-1330)
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: "the list of fields to return for the issue. By default, all\
          \ fields are returned."
        in: query
        name: fields
        schema:
          type: string
      - in: query
        name: expand
        schema:
          type: string
      - description: the list of properties to return for the issue. By default no
          properties are returned.
        in: query
        name: properties
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Edits an issue from a JSON representation.
         <p/>
         The issue can either be updated by setting explicit the field value(s)
         or by using an operation to change the field value.
         <p/>
         The fields that can be updated, in either the fields parameter or the update parameter, can be determined
         using the <b>/rest/api/2/issue/{issueIdOrKey}/editmeta</b> resource.<br>
         If a field is not configured to appear on the edit screen, then it will not be in the editmeta, and a field
         validation error will occur if it is submitted.
         <p/>
         Specifying a "field_id": field_value in the "fields" is a shorthand for a "set" operation in the "update" section.<br>
         Field should appear either in "fields" or "update", not in both.
      operationId: edit_issue
      parameters:
      - description: the issue id or key to update (i.e. JRA-1330)
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: |-
          send the email with notification that the issue was updated to users that watch it.
                              Admin or project admin permissions are required to disable the notification.
        in: query
        name: notifyUsers
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/assignee:
    put:
      description: |-
        Assigns an issue to a user.
         You can use this resource to assign issues when the user submitting the request has the assign permission but not the
         edit issue permission.
         If the name is "-1" automatic assignee is used.  A null name will remove the assignee.
      operationId: assign
      parameters:
      - description: a String containing an issue key
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/attachments:
    post:
      description: |-
        Add one or more attachments to an issue.
         <p>
         This resource expects a multipart post. The media-type multipart/form-data is defined in RFC 1867. Most client
         libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components
         library provides a
         <a href="http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html">MultiPartEntity</a>
         that makes it simple to submit a multipart POST.
         <p>
         In order to protect against XSRF attacks, because this method accepts multipart/form-data, it has XSRF protection
         on it.  This means you must submit a header of X-Atlassian-Token: no-check with the request, otherwise it will be
         blocked.
         <p>
         The name of the multipart/form-data parameter that contains attachments must be "file"
         <p>
         A simple example to upload a file called "myfile.txt" to issue REST-123:
         <pre>curl -D- -u admin:admin -X POST -H "X-Atlassian-Token: no-check" -F "file=@myfile.txt" http://myhost/rest/api/2/issue/TEST-123/attachments</pre>
      operationId: add_attachment
      parameters:
      - description: the issue that you want to add the attachments to
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/comment:
    get:
      description: |-
        Returns all comments for an issue.
         <p>
         Results can be ordered by the "created" field which means the date a comment was added.
         </p>
      operationId: get_comments
      parameters:
      - description: a string containing the issue id or key the comment will be added
          to
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: "the page offset, if not specified then defaults to 0"
        in: query
        name: startAt
        schema:
          format: int64
          type: integer
      - description: how many results on the page should be included. Defaults to
          50.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - description: ordering of the results.
        in: query
        name: orderBy
        schema:
          type: string
      - description: "optional flags: renderedBody (provides body rendered in HTML)"
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Adds a new comment to an issue.
      operationId: add_comment
      parameters:
      - description: a string containing the issue id or key the comment will be added
          to
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: "optional flags: renderedBody (provides body rendered in HTML)"
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/comment/{id}:
    delete:
      description: Deletes an existing comment .
      operationId: delete_comment
      parameters:
      - description: of the issue the comment belongs to
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: the ID of the comment to request
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a single comment.
      operationId: get_comment
      parameters:
      - description: of the issue the comment belongs to
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: the ID of the comment to request
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "optional flags: renderedBody (provides body rendered in HTML)"
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates an existing comment using its JSON representation.
      operationId: update_comment
      parameters:
      - description: of the issue the comment belongs to
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: the ID of the comment to request
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "optional flags: renderedBody (provides body rendered in HTML)"
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/editmeta:
    get:
      description: |-
        Returns the meta data for editing an issue.
         <p/>
         The fields in the editmeta correspond to the fields in the edit screen for the issue.
         Fields not in the screen will not be in the editmeta.
      operationId: get_edit_issue_meta
      parameters:
      - description: the issue whose edit meta data you want to view
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/notify:
    post:
      description: Sends a notification (email) to the list or recipients defined
        in the request.
      operationId: notify
      parameters:
      - description: a string containing the issue id or key the comment will be added
          to
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/properties:
    get:
      description: Returns the keys of all properties for the issue identified by
        the key or by the id.
      operationId: api2_issue_issue_id_or_key_properties_get
      parameters:
      - description: the issue from which keys will be returned.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/properties/{propertyKey}:
    delete:
      description: |-
        Removes the property from the issue identified by the key or by the id. Ths user removing the property is required
         to have permissions to edit the issue.
      operationId: api2_issue_issue_id_or_key_properties_property_key_delete
      parameters:
      - description: the issue from which keys will be returned.
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns the value of the property with a given key from the issue identified by the key or by the id. The user who retrieves
         the property is required to have permissions to read the issue.
      operationId: api2_issue_issue_id_or_key_properties_property_key_get
      parameters:
      - description: the issue from which keys will be returned.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Sets the value of the specified issue's property.
         <p>
         You can use this resource to store a custom data against the issue identified by the key or by the id. The user
         who stores the data is required to have permissions to edit the issue.
         </p>
      operationId: api2_issue_issue_id_or_key_properties_property_key_put
      parameters:
      - description: the issue from which keys will be returned.
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/remotelink:
    delete:
      description: Delete the remote issue link with the given global id on the issue.
      operationId: delete_remote_issue_link_by_global_id
      parameters:
      - description: the issue to create the remote issue link for
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: the global id of the remote issue link
        in: query
        name: globalId
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: A REST sub-resource representing the remote issue links on the
        issue.
      operationId: get_remote_issue_links
      parameters:
      - description: the issue to create the remote issue link for
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: |-
          The id of the remote issue link to be returned.  If null (not provided) all remote links for the
                               issue are returned.
                               <p>For a fullexplanation of Issue Link fields please refer to
                               <a href="https://developer.atlassian.com/display/JIRADEV/Fields+in+Remote+Issue+Links">https://developer.atlassian.com/display/JIRADEV/Fields+in+Remote+Issue+Links</a></p>
        in: query
        name: globalId
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Creates or updates a remote issue link from a JSON representation. If a globalId is provided and a remote issue link
         exists with that globalId, the remote issue link is updated. Otherwise, the remote issue link is created.
      operationId: create_or_update_remote_issue_link
      parameters:
      - description: the issue to create the remote issue link for
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/remotelink/{linkId}:
    delete:
      description: Delete the remote issue link with the given id on the issue.
      operationId: delete_remote_issue_link_by_id
      parameters:
      - description: the id of the remote issue link
        in: path
        name: link_id
        required: true
        schema:
          type: string
      - description: the issue to create the remote issue link for
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Get the remote issue link with the given id on the issue.
      operationId: get_remote_issue_link_by_id
      parameters:
      - description: the id of the remote issue link
        in: path
        name: linkId
        required: true
        schema:
          type: string
      - description: the issue to create the remote issue link for
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates a remote issue link from a JSON representation. Any fields
        not provided are set to null.
      operationId: update_remote_issue_link
      parameters:
      - description: the id of the remote issue link
        in: path
        name: link_id
        required: true
        schema:
          type: string
      - description: the issue to create the remote issue link for
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/subtask:
    get:
      description: Returns an issue's subtask list
      operationId: get_sub_tasks
      parameters:
      - description: The parent issue's key or id
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/subtask/move:
    get:
      operationId: can_move_sub_task
      parameters:
      - description: The parent issue's key or id
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Reorders an issue's subtasks by moving the subtask at index "from"
         to index "to".
      operationId: move_sub_tasks
      parameters:
      - description: The parent issue's key or id
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/transitions:
    get:
      description: |-
        Get a list of the transitions possible for this issue by the current user, along with fields that are required and their types.
         <p/>
         Fields will only be returned if <code>expand=transitions.fields</code>.
         <p/>
         The fields in the metadata correspond to the fields in the transition screen for that transition.
         Fields not in the screen will not be in the metadata.
      operationId: get_transitions
      parameters:
      - description: the issue whose transitions you want to view
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - in: query
        name: transitionId
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Perform a transition on an issue.
         When performing the transition you can update or set other issue fields.
         <p/>
         The fields that can be set on transtion, in either the fields parameter or the update parameter can be determined
         using the <b>/rest/api/2/issue/{issueIdOrKey}/transitions?expand=transitions.fields</b> resource.
         If a field is not configured to appear on the transition screen, then it will not be in the transition metadata, and a field
         validation error will occur if it is submitted.
      operationId: do_transition
      parameters:
      - description: the issue whose transitions you want to view
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/votes:
    delete:
      description: Remove your vote from an issue. (i.e. "unvote")
      operationId: remove_vote
      parameters:
      - description: the issue to view voting information for
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: A REST sub-resource representing the voters on the issue.
      operationId: get_votes
      parameters:
      - description: the issue to view voting information for
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Cast your vote in favour of an issue.
      operationId: add_vote
      parameters:
      - description: the issue to view voting information for
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/watchers:
    delete:
      description: Removes a user from an issue's watcher list.
      operationId: remove_watcher
      parameters:
      - description: a String containing an issue key.
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: a String containing the name of the user to remove from the watcher
          list. Must not be null.
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the list of watchers for the issue with the given key.
      operationId: get_issue_watchers
      parameters:
      - description: a String containing an issue key.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Adds a user to an issue's watcher list.
      operationId: add_watcher
      parameters:
      - description: a String containing an issue key.
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/worklog:
    get:
      description: |-
        Returns all work logs for an issue. <br/>
         <strong>Note:</strong> Work logs won't be returned if the Log work field is hidden for the project.
      operationId: get_issue_worklog
      parameters:
      - description: a string containing the issue id or key the worklog will be added
          to
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Adds a new worklog entry to an issue.
      operationId: add_worklog
      parameters:
      - description: a string containing the issue id or key the worklog will be added
          to
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: |-
          (optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are
                                 <ul>
                                 <li>"new" - sets the estimate to a specific value</li>
                                 <li>"leave"- leaves the estimate as is</li>
                                 <li>"manual" - specify a specific amount to increase remaining estimate by</li>
                                 <li>"auto"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog</li> </ul>
        in: query
        name: adjustEstimate
        schema:
          type: string
      - description: (required when "new" is selected for adjustEstimate) the new
          value for the remaining estimate field. e.g. "2d"
        in: query
        name: newEstimate
        schema:
          type: string
      - description: (required when "manual" is selected for adjustEstimate) the amount
          to reduce the remaining estimate by e.g. "2d"
        in: query
        name: reduceBy
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issue/{issueIdOrKey}/worklog/{id}:
    delete:
      description: Deletes an existing worklog entry.
      operationId: delete_worklog
      parameters:
      - description: a string containing the issue id or key the worklog belongs to
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: id of the worklog to be deleted
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          (optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are
                                 <ul>
                                 <li>"new" - sets the estimate to a specific value</li>
                                 <li>"leave"- leaves the estimate as is</li>
                                 <li>"manual" - specify a specific amount to increase remaining estimate by</li>
                                 <li>"auto"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog</li> </ul>
        in: query
        name: adjustEstimate
        schema:
          type: string
      - description: (required when "new" is selected for adjustEstimate) the new
          value for the remaining estimate field. e.g. "2d"
        in: query
        name: newEstimate
        schema:
          type: string
      - description: (required when "manual" is selected for adjustEstimate) the amount
          to increase the remaining estimate by e.g. "2d"
        in: query
        name: increaseBy
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns a specific worklog. <br/>
         <strong>Note:</strong> The work log won't be returned if the Log work field is hidden for the project.
      operationId: get_worklog
      parameters:
      - description: a string containing the issue id or key the worklog belongs to
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: id of the worklog to be deleted
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Updates an existing worklog entry.
         <p>Note that:</p>
          <ul>
              <li>Fields possible for editing are: comment, visibility, started, timeSpent and timeSpentSeconds.</li>
              <li>Either timeSpent or timeSpentSeconds can be set.</li>
              <li>Fields which are not set will not be updated.</li>
              <li>For a request to be valid, it has to have at least one field change.</li>
          </ul>
      operationId: update_worklog
      parameters:
      - description: a string containing the issue id or key the worklog belongs to
        in: path
        name: issue_id_or_key
        required: true
        schema:
          type: string
      - description: id of the worklog to be deleted
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          (optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are
                                 <ul>
                                 <li>"new" - sets the estimate to a specific value</li>
                                 <li>"leave"- leaves the estimate as is</li>
                                 <li>"auto"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog</li> </ul>
        in: query
        name: adjustEstimate
        schema:
          type: string
      - description: (required when "new" is selected for adjustEstimate) the new
          value for the remaining estimate field.
        in: query
        name: newEstimate
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issueLink:
    post:
      description: |-
        Creates an issue link between two issues.
         The user requires the link issue permission for the issue which will be linked to another issue.
         The specified link type in the request is used to create the link and will create a link from the first issue
         to the second issue using the outward description. It also create a link from the second issue to the first issue using the
         inward description of the issue link type.
         It will add the supplied comment to the first issue. The comment can have a restriction who can view it.
         If group is specified, only users of this group can view this comment, if roleLevel is specified only users who have the specified role can view this comment.
         The user who creates the issue link needs to belong to the specified group or have the specified role.
      operationId: link_issues
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issueLink/{linkId}:
    delete:
      description: |-
        Deletes an issue link with the specified id.
         To be able to delete an issue link you must be able to view both issues and must have the link issue permission
         for at least one of the issues.
      operationId: delete_issue_link
      parameters:
      - description: the issue link id.
        in: path
        name: link_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns an issue link with the specified id.
      operationId: get_issue_link
      parameters:
      - description: the issue link id.
        in: path
        name: linkId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issueLinkType:
    get:
      description: |-
        Returns a list of available issue link types, if issue linking is enabled.
         Each issue link type has an id, a name and a label for the outward and inward link relationship.
      operationId: get_issue_link_types
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Create a new issue link type.
      operationId: create_issue_link_type
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issueLinkType/{issueLinkTypeId}:
    delete:
      description: Delete the specified issue link type.
      operationId: delete_issue_link_type
      parameters:
      - in: path
        name: issue_link_type_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns for a given issue link type id all information about this
        issue link type.
      operationId: get_issue_link_type
      parameters:
      - in: path
        name: issueLinkTypeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Update the specified issue link type.
      operationId: update_issue_link_type
      parameters:
      - in: path
        name: issue_link_type_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuesecurityschemes:
    get:
      description: Returns all issue security schemes that are defined.
      operationId: get_issue_security_schemes
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuesecurityschemes/{id}:
    get:
      description: Returns the issue security scheme along with that are defined.
      operationId: api2_issuesecurityschemes_id_get
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuetype:
    get:
      description: Returns a list of all issue types visible to the user
      operationId: get_issue_all_types
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Creates an issue type from a JSON representation and adds the issue newly created issue type to the default issue
         type scheme.
      operationId: create_issue_type
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuetype/{id}:
    delete:
      description: |-
        Deletes the specified issue type. If the issue type has any associated issues, these issues will be migrated to
         the alternative issue type specified in the parameter. You can determine the alternative issue types by calling
         the <b>/rest/api/2/issuetype/{id}/alternatives</b> resource.
      operationId: api2_issuetype_id_delete
      parameters:
      - description: the id of the issue type to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: the id of an issue type to which issues associated with the removed
          issue type will be migrated.
        in: query
        name: alternativeIssueTypeId
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a full representation of the issue type that has the given
        id.
      operationId: api2_issuetype_id_get
      parameters:
      - description: the id of the issue type to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates the specified issue type from a JSON representation.
      operationId: update_issue_type
      parameters:
      - description: the id of the issue type to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuetype/{id}/alternatives:
    get:
      description: |-
        Returns a list of all alternative issue types for the given issue type id. The list will contain these issues types, to which
         issues assigned to the given issue type can be migrated. The suitable alternatives are issue types which are assigned
         to the same workflow, the same field configuration and the same screen scheme.
      operationId: get_alternative_issue_types
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuetype/{id}/avatar:
    post:
      description: Converts temporary avatar into a real avatar
      operationId: api2_issuetype_id_avatar_post
      parameters:
      - description: "the id of the issue type, which avatar is updated."
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuetype/{id}/avatar/temporary:
    post:
      description: |-
        Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because
         the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from
         which the client parses the JSON from.
         <p>
         Creating a temporary avatar is part of a 3-step process in uploading a new
         avatar for an issue type: upload, crop, confirm. This endpoint allows you to use a multipart upload
         instead of sending the image directly as the request body.
         </p>
         <p>
         You *must* use "avatar" as the name of the upload parameter:</p>
         <p>
         <pre>
         curl -c cookiejar.txt -X POST -u admin:admin -H "X-Atlassian-Token: no-check" \
           -F "avatar=@mynewavatar.png;type=image/png" \
           'http://localhost:8090/jira/rest/api/2/issuetype/1/avatar/temporary'
         </pre>
      operationId: api2_issuetype_id_avatar_temporary_post
      parameters:
      - description: "the id of the issue type, which avatar is updated."
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuetype/{issueTypeId}/properties:
    get:
      description: Returns the keys of all properties for the issue type identified
        by the id.
      operationId: get_property_keys
      parameters:
      - description: the issue type from which the keys will be returned
        in: path
        name: issueTypeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/issuetype/{issueTypeId}/properties/{propertyKey}:
    delete:
      description: |-
        Removes the property from the issue type identified by the id. Ths user removing the property is required
         to have permissions to edit the issue type.
      operationId: api2_issuetype_issue_type_id_properties_property_key_delete
      parameters:
      - description: the issue type from which the keys will be returned
        in: path
        name: issue_type_id
        required: true
        schema:
          type: string
      - description: the key of the property to return
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns the value of the property with a given key from the issue type identified by the id. The user who retrieves
         the property is required to have permissions to view the issue type.
      operationId: api2_issuetype_issue_type_id_properties_property_key_get
      parameters:
      - description: the issue type from which the keys will be returned
        in: path
        name: issueTypeId
        required: true
        schema:
          type: string
      - description: the key of the property to return
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Sets the value of the specified issue type's property.
         <p>
         You can use this resource to store a custom data against an issue type identified by the id. The user
         who stores the data is required to have permissions to edit an issue type.
         </p>
      operationId: api2_issuetype_issue_type_id_properties_property_key_put
      parameters:
      - description: the issue type from which the keys will be returned
        in: path
        name: issue_type_id
        required: true
        schema:
          type: string
      - description: the key of the property to return
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/jql/autocompletedata:
    get:
      description: Returns the auto complete data required for JQL searches.
      operationId: get_auto_complete
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/jql/autocompletedata/suggestions:
    get:
      description: Returns auto complete suggestions for JQL search.
      operationId: get_field_auto_complete_for_query_string
      parameters:
      - description: the field name for which the suggestions are generated.
        in: query
        name: fieldName
        schema:
          type: string
      - description: the portion of the field value that has already been provided
          by the user.
        in: query
        name: fieldValue
        schema:
          type: string
      - description: "the predicate for which the suggestions are generated. Suggestions\
          \ are generated only for: \"by\", \"from\" and \"to\"."
        in: query
        name: predicateName
        schema:
          type: string
      - description: the portion of the predicate value that has already been provided
          by the user.
        in: query
        name: predicateValue
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/licenseValidator:
    post:
      operationId: validate
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/monitoring/jmx/areMetricsExposed:
    get:
      operationId: are_metrics_exposed
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/monitoring/jmx/getAvailableMetrics:
    get:
      operationId: get_available_metrics
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/monitoring/jmx/startExposing:
    get:
      operationId: start
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/monitoring/jmx/stopExposing:
    get:
      operationId: stop
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/mypermissions:
    get:
      description: |-
        Returns all permissions in the system and whether the currently logged in user has them. You can optionally provide a specific context to get permissions for
         (projectKey OR projectId OR issueKey OR issueId)
         <ul>
         <li> When no context supplied the project related permissions will return true if the user has that permission in ANY project </li>
         <li> If a project context is provided, project related permissions will return true if the user has the permissions in the specified project.
         For permissions that are determined using issue data (e.g Current Assignee), true will be returned if the user meets the permission criteria in ANY issue in that project </li>
         <li> If an issue context is provided, it will return whether or not the user has each permission in that specific issue</li>
         </ul>
         <p>
         NB: The above means that for issue-level permissions (EDIT_ISSUE for example), hasPermission may be true when no context is provided, or when a project context is provided,
         <b>but</b> may be false for any given (or all) issues. This would occur (for example) if Reporters were given the EDIT_ISSUE permission. This is because
         any user could be a reporter, except in the context of a concrete issue, where the reporter is known.
         </p>
         <p>
         Global permissions will still be returned for all scopes.
         </p>
         <p>
         Prior to version 6.4 this service returned project permissions with keys corresponding to com.atlassian.jira.security.Permissions.Permission constants.
         Since 6.4 those keys are considered deprecated and this service returns system project permission keys corresponding to constants defined in com.atlassian.jira.permission.ProjectPermissions.
         Permissions with legacy keys are still also returned for backwards compatibility, they are marked with an attribute deprecatedKey=true.
         The attribute is missing for project permissions with the current keys.
         </p>
      operationId: get_permissions
      parameters:
      - description: '- key of project to scope returned permissions for.'
        in: query
        name: projectKey
        schema:
          type: string
      - description: '- id of project to scope returned permissions for.'
        in: query
        name: projectId
        schema:
          type: string
      - description: '- key of the issue to scope returned permissions for.'
        in: query
        name: issueKey
        schema:
          type: string
      - description: '- id of the issue to scope returned permissions for.'
        in: query
        name: issueId
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/mypreferences:
    delete:
      description: |-
        Removes preference of the currently logged in user. Preference key must be provided as input parameters (key). If
         key parameter is not provided or wrong - status code 404. If preference is unset - status code 204.
      operationId: remove_preference
      parameters:
      - description: '- key of the preference to be removed.'
        in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns preference of the currently logged in user. Preference key must be provided as input parameter (key). The
         value is returned exactly as it is. If key parameter is not provided or wrong - status code 404. If value is
         found  - status code 200.
      operationId: get_preference
      parameters:
      - description: '- key of the preference to be returned.'
        in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Sets preference of the currently logged in user. Preference key must be provided as input parameters (key). Value
         must be provided as post body. If key or value parameter is not provided - status code 404. If preference is set
         - status code 204.
      operationId: set_preference
      parameters:
      - description: '- key of the preference to be set.'
        in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/myself:
    get:
      description: Returns currently logged user. This resource cannot be accessed
        anonymously.
      operationId: api2_myself_get
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Modify currently logged user. The "value" fields present will override the existing value.
         Fields skipped in request will not be changed. Only email and display name can be change that way.
         Requires user password.
      operationId: api2_myself_put
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/myself/password:
    put:
      description: Modify caller password.
      operationId: change_my_password
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/notificationscheme:
    get:
      description: |-
        Returns a <a href="#pagination">paginated</a> list of notification schemes. In order to access notification scheme, the calling user is
         required to have permissions to administer at least one project associated with the requested notification scheme. Each scheme contains
         a list of events and recipient configured to receive notifications for these events. Consumer should allow events without recipients to appear in response.
         The list is ordered by the scheme's name.
         Follow the documentation of /notificationscheme/{id} resource for all details about returned value.
      operationId: get_notification_schemes
      parameters:
      - description: the index of the first notification scheme to return (0 based).
        in: query
        name: startAt
        schema:
          format: int64
          type: integer
      - description: the maximum number of notification schemes to return (max 50).
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/notificationscheme/{id}:
    get:
      description: |-
        Returns a full representation of the notification scheme for the given id. This resource will return a
         notification scheme containing a list of events and recipient configured to receive notifications for these events. Consumer
         should allow events without recipients to appear in response. User accessing
         the data is required to have permissions to administer at least one project associated with the requested notification scheme.
         <p>
         Notification recipients can be:
         <ul>
         <li>current assignee - the value of the notificationType is CurrentAssignee</li>
         <li>issue reporter - the value of the notificationType is Reporter</li>
         <li>current user - the value of the notificationType is CurrentUser</li>
         <li>project lead - the value of the notificationType is ProjectLead</li>
         <li>component lead - the value of the notificationType is ComponentLead</li>
         <li>all watchers - the value of the notification type is AllWatchers</li>
         <li>configured user - the value of the notification type is User. Parameter will contain key of the user. Information about the user will be provided
         if <b>user</b> expand parameter is used. </li>
         <li>configured group - the value of the notification type is Group. Parameter will contain name of the group. Information about the group will be provided
         if <b>group</b> expand parameter is used. </li>
         <li>configured email address - the value of the notification type is EmailAddress, additionally information about the email will be provided.</li>
         <li>users or users in groups in the configured custom fields - the value of the notification type is UserCustomField or GroupCustomField. Parameter
         will contain id of the custom field. Information about the field will be provided if <b>field</b> expand parameter is used. </li>
         <li>configured project role - the value of the notification type is ProjectRole. Parameter will contain project role id. Information about the project role
         will be provided if <b>projectRole</b> expand parameter is used. </li>
         </ul>
         Please see the example for reference.
         </p>
         The events can be JIRA system events or events configured by administrator. In case of the system events, data about theirs
         ids, names and descriptions is provided. In case of custom events, the template event is included as well.
      operationId: api2_notificationscheme_id_get
      parameters:
      - description: an id of the notification scheme to retrieve
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/password/policy:
    get:
      description: |-
        Returns the list of requirements for the current password policy. For example, "The password must have at least 10 characters.",
         "The password must not be similar to the user's name or email address.", etc.
      operationId: get_password_policy
      parameters:
      - description: |-
          whether or not the user will be required to enter their current password.  Use
                                 {@code false} (the default) if this is a new user or if an administrator is forcibly changing
                                 another user's password.
        in: query
        name: hasOldPassword
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/password/policy/createUser:
    post:
      description: "Returns a list of statements explaining why the password policy\
        \ would disallow a proposed password for a new user.\n <p>\n You can use this\
        \ method to test the password policy validation. This could be done prior\
        \ to an action \n where a new user and related password are created, using\
        \ methods like the ones in \n <a href=\"https://docs.atlassian.com/jira/latest/com/atlassian/jira/bc/user/UserService.html\"\
        >UserService</a>.      \n For example, you could use this to validate a password\
        \ in a create user form in the user interface, as the user enters it.<br/>\n\
        \ The username and new password must be not empty to perform the validation.<br/>\n\
        \ Note, this method will help you validate against the policy only. It won't\
        \ check any other validations that might be performed \n when creating a new\
        \ user, e.g. checking whether a user with the same name already exists.\n\
        \ </p>"
      operationId: policy_check_create_user
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/password/policy/updateUser:
    post:
      description: "Returns a list of statements explaining why the password policy\
        \ would disallow a proposed new password for a user with an existing password.\n\
        \ <p>\n You can use this method to test the password policy validation. This\
        \ could be done prior to an action where the password \n is actually updated,\
        \ using methods like <a href=\"https://docs.atlassian.com/jira/latest/com/atlassian/jira/web/action/user/ChangePassword.html\"\
        >ChangePassword</a>      \n or <a href=\"https://docs.atlassian.com/jira/latest/com/atlassian/jira/web/action/user/ResetPassword.html\"\
        >ResetPassword</a>. \n For example, you could use this to validate a password\
        \ in a change password form in the user interface, as the user enters it.<br/>\n\
        \ The user must exist and the username and new password must be not empty,\
        \ to perform the validation.<br/>\n Note, this method will help you validate\
        \ against the policy only. It won't check any other validations that might\
        \ be performed \n when submitting a password change/reset request, e.g. verifying\
        \ whether the old password is valid.\n </p>"
      operationId: policy_check_update_user
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/permissions:
    get:
      description: "Returns all permissions that are present in the JIRA instance\
        \ - Global, Project and the global ones added by plugins"
      operationId: get_all_permissions
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/permissionscheme:
    get:
      description: |-
        Returns a list of all permission schemes.
         <p>
         By default only shortened beans are returned. If you want to include permissions of all the schemes,
         then specify the <b>permissions</b> expand parameter. Permissions will be included also if you specify
         any other expand parameter.
         </p>
      operationId: get_permission_schemes
      parameters:
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Create a new permission scheme.
         This method can create schemes with a defined permission set, or without.
      operationId: create_permission_scheme
      parameters:
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/permissionscheme/{permissionSchemeId}/attribute/{attributeKey}:
    get:
      operationId: get_scheme_attribute
      parameters:
      - description: permission scheme id
        in: path
        name: permissionSchemeId
        required: true
        schema:
          format: int64
          type: integer
      - description: permission scheme attribute key
        in: path
        name: attributeKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/permissionscheme/{permissionSchemeId}/attribute/{key}:
    put:
      description: |-
        Updates or inserts the attribute for a permission scheme specified by permission scheme id.
         The attribute consists of the key and the value. The value will be converted to Boolean using Boolean#valueOf.
      operationId: set_scheme_attribute
      parameters:
      - description: permission scheme id
        in: path
        name: permissionSchemeId
        required: true
        schema:
          format: int64
          type: integer
      - description: permission scheme attribute key
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/permissionscheme/{schemeId}:
    delete:
      description: Deletes a permission scheme identified by the given id.
      operationId: delete_permission_scheme
      parameters:
      - in: path
        name: scheme_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a permission scheme identified by the given id.
      operationId: get_permission_scheme
      parameters:
      - in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Updates a permission scheme.
         <p>
         If the permissions list is present then it will be set in the permission scheme, which basically means it will overwrite any permission grants that
         existed in the permission scheme. Sending an empty list will remove all permission grants from the permission scheme.
         </p>
         <p>
         To update just the name and description, do not send permissions list at all.
         </p>
         <p>
         To add or remove a single permission grant instead of updating the whole list at once use the <b>{schemeId}/permission/</b> resource.
         </p>
      operationId: update_permission_scheme
      parameters:
      - in: path
        name: scheme_id
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/permissionscheme/{schemeId}/permission:
    get:
      description: Returns all permission grants of the given permission scheme.
      operationId: get_permission_scheme_grants
      parameters:
      - in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Creates a permission grant in a permission scheme.
      operationId: create_permission_grant
      parameters:
      - in: path
        name: scheme_id
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/permissionscheme/{schemeId}/permission/{permissionId}:
    delete:
      description: Deletes a permission grant from a permission scheme.
      operationId: delete_permission_scheme_entity
      parameters:
      - in: path
        name: permission_id
        required: true
        schema:
          format: int64
          type: integer
      - in: path
        name: scheme_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a permission grant identified by the given id.
      operationId: get_permission_scheme_grant
      parameters:
      - in: path
        name: permissionId
        required: true
        schema:
          format: int64
          type: integer
      - in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/priority:
    get:
      description: Returns a list of all issue priorities.
      operationId: get_priorities
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/priority/{id}:
    get:
      description: Returns an issue priority.
      operationId: get_priority
      parameters:
      - description: a String containing the priority id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project:
    get:
      description: |-
        Returns all projects which are visible for the currently logged in user. If no user is logged in, it returns the
         list of projects that are visible when using anonymous access.
      operationId: get_all_projects
      parameters:
      - description: the parameters to expand
        in: query
        name: expand
        schema:
          type: string
      - description: if this parameter is set then only projects recently accessed
          by the current user (if not logged in then based on HTTP session) will be
          returned (maximum count limited to the specified number but no more than
          20).
        in: query
        name: recent
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Creates a new project.
      operationId: create_project
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/type:
    get:
      description: |-
        Returns all the project types defined on the JIRA instance, not taking into account whether
         the license to use those project types is valid or not.
      operationId: get_all_project_types
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/type/{projectTypeKey}:
    get:
      description: Returns the project type with the given key.
      operationId: get_project_type_by_key
      parameters:
      - in: path
        name: projectTypeKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/type/{projectTypeKey}/accessible:
    get:
      description: |-
        Returns the project type with the given key, if it is accessible to the logged in user.
         This takes into account whether the user is licensed on the Application that defines the project type.
      operationId: get_accessible_project_type_by_key
      parameters:
      - in: path
        name: projectTypeKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}:
    delete:
      description: Deletes a project.
      operationId: delete_project
      parameters:
      - description: the project id or project key
        in: path
        name: project_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Contains a full representation of a project in JSON format.
         <p>
         All project keys associated with the project will only be returned if <code>expand=projectKeys</code>.
         <p>
      operationId: api2_project_project_id_or_key_get
      parameters:
      - description: the project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: the parameters to expand
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Updates a project.
         <p>
         Only non null values sent in JSON will be updated in the project.</p>
         <p>
         Values available for the assigneeType field are: "PROJECT_LEAD" and "UNASSIGNED".</p>
      operationId: update_project
      parameters:
      - description: the project id or project key
        in: path
        name: project_id_or_key
        required: true
        schema:
          type: string
      - description: the parameters to expand in returned project
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/avatar:
    post:
      description: Converts temporary avatar into a real avatar
      operationId: api2_project_project_id_or_key_avatar_post
      parameters:
      - in: path
        name: project_id_or_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      operationId: api2_project_project_id_or_key_avatar_put
      parameters:
      - in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/avatar/temporary:
    post:
      description: |-
        Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because
         the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from
         which the client parses the JSON.
      operationId: api2_project_project_id_or_key_avatar_temporary_post
      parameters:
      - description: Project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/avatar/{id}:
    delete:
      description: Deletes avatar
      operationId: api2_project_project_id_or_key_avatar_id_delete
      parameters:
      - description: Project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: database id for avatar
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/avatars:
    get:
      description: |-
        Returns all avatars which are visible for the currently logged in user.  The avatars are grouped into
         system and custom.
      operationId: api2_project_project_id_or_key_avatars_get
      parameters:
      - description: project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/components:
    get:
      description: Contains a full representation of a the specified project's components.
      operationId: get_project_components
      parameters:
      - description: the project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/properties:
    get:
      description: Returns the keys of all properties for the project identified by
        the key or by the id.
      operationId: api2_project_project_id_or_key_properties_get
      parameters:
      - description: the project from which keys will be returned.
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/properties/{propertyKey}:
    delete:
      description: |-
        Removes the property from the project identified by the key or by the id. Ths user removing the property is required
         to have permissions to administer the project.
      operationId: api2_project_project_id_or_key_properties_property_key_delete
      parameters:
      - description: the project from which keys will be returned.
        in: path
        name: project_id_or_key
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns the value of the property with a given key from the project identified by the key or by the id. The user who retrieves
         the property is required to have permissions to read the project.
      operationId: api2_project_project_id_or_key_properties_property_key_get
      parameters:
      - description: the project from which keys will be returned.
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Sets the value of the specified project's property.
         <p>
         You can use this resource to store a custom data against the project identified by the key or by the id. The user
         who stores the data is required to have permissions to administer the project.
         </p>
      operationId: api2_project_project_id_or_key_properties_property_key_put
      parameters:
      - description: the project from which keys will be returned.
        in: path
        name: project_id_or_key
        required: true
        schema:
          type: string
      - description: the key of the property to return.
        in: path
        name: property_key
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/role:
    get:
      description: "Returns all roles in the given project Id or key, with links to\
        \ full details on each role."
      operationId: api2_project_project_id_or_key_role_get
      parameters:
      - description: the project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/role/{id}:
    delete:
      description: |-
        Deletes actors (users or groups) from a project role.
         <p>
         <ul>
         <li>Delete a user from the role: <code>/rest/api/2/project/{projectIdOrKey}/role/{roleId}?user={username}</code></li>
         <li>Delete a group from the role: <code>/rest/api/2/project/{projectIdOrKey}/role/{roleId}?group={groupname}</code></li>
         </ul>
      operationId: delete_actor
      parameters:
      - description: the project id or project key
        in: path
        name: project_id_or_key
        required: true
        schema:
          type: string
      - description: the project role id
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the username to remove from the project role
        in: query
        name: user
        schema:
          type: string
      - description: the groupname to remove from the project role
        in: query
        name: group
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the details for a given project role in a project.
      operationId: get_project_role
      parameters:
      - description: the project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: the project role id
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Adds an actor (user or group) to a project role.
      operationId: add_actor_users
      parameters:
      - description: the project id or project key
        in: path
        name: project_id_or_key
        required: true
        schema:
          type: string
      - description: the project role id
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates a project role to include the specified actors (users or
        groups).
      operationId: set_actors
      parameters:
      - description: the project id or project key
        in: path
        name: project_id_or_key
        required: true
        schema:
          type: string
      - description: the project role id
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/statuses:
    get:
      description: Get all issue types with valid status values for a project
      operationId: get_all_statuses
      parameters:
      - description: Project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/type/{newProjectTypeKey}:
    put:
      description: Updates the type of a project.
      operationId: update_project_type
      parameters:
      - description: identity of the project to update
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The key of the new project type
        in: path
        name: newProjectTypeKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/version:
    get:
      description: |-
        Returns all versions for the specified project. Results are <a href="#pagination">paginated</a>.
         <p>
         Results can be ordered by the following fields:
         <ul>
         <li>sequence</li>
         <li>name</li>
         <li>startDate</li>
         <li>releaseDate</li>
         </ul>
         </p>
      operationId: get_project_versions_paginated
      parameters:
      - description: the project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: "the page offset, if not specified then defaults to 0"
        in: query
        name: startAt
        schema:
          format: int64
          type: integer
      - description: how many results on the page should be included. Defaults to
          50.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - description: ordering of the results.
        in: query
        name: orderBy
        schema:
          type: string
      - description: the parameters to expand
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectIdOrKey}/versions:
    get:
      description: Contains a full representation of a the specified project's versions.
      operationId: get_project_versions
      parameters:
      - description: the project id or project key
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: the parameters to expand
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectKeyOrId}/issuesecuritylevelscheme:
    get:
      description: Returns the issue security scheme for project.
      operationId: api2_project_project_key_or_id_issuesecuritylevelscheme_get
      parameters:
      - in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectKeyOrId}/notificationscheme:
    get:
      description: |-
        Gets a notification scheme associated with the project.
         Follow the documentation of /notificationscheme/{id} resource for all details about returned value.
      operationId: api2_project_project_key_or_id_notificationscheme_get
      parameters:
      - description: key or id of the project
        in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectKeyOrId}/permissionscheme:
    get:
      description: Gets a permission scheme assigned with a project.
      operationId: get_assigned_permission_scheme
      parameters:
      - description: key or id of the project
        in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Assigns a permission scheme with a project.
      operationId: assign_permission_scheme
      parameters:
      - description: key or id of the project
        in: path
        name: project_key_or_id
        required: true
        schema:
          type: string
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/project/{projectKeyOrId}/securitylevel:
    get:
      description: |-
        Returns all security levels for the project that the current logged in user has access to.
         If the user does not have the Set Issue Security permission, the list will be empty.
      operationId: get_security_levels_for_project
      parameters:
      - description: '- key or id of project to list the security levels for'
        in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/projectCategory:
    get:
      description: Returns all project categories
      operationId: get_all_project_categories
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Create a project category via POST.
      operationId: create_project_category
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/projectCategory/{id}:
    delete:
      description: Delete a project category.
      operationId: remove_project_category
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Contains a representation of a project category in JSON format.
      operationId: get_project_category_by_id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Modify a project category via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field
         is not present, it is silently ignored.
      operationId: update_project_category
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/projectvalidate/key:
    get:
      description: Validates a project key.
      operationId: api2_projectvalidate_key_get
      parameters:
      - description: the project key
        in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/reindex:
    get:
      description: |-
        Returns information on the system reindexes.  If a reindex is currently taking place then information about this reindex is returned.
         If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404
         indicating that no reindex has taken place.
      operationId: get_reindex_info
      parameters:
      - description: |-
          the id of an indexing task you wish to obtain details on.  If omitted, then defaults to the standard behaviour and
                         returns information on the active reindex task, or the last task to run if no reindex is taking place. .  If there is no
                         reindexing task with that id then a 404 is returned.
        in: query
        name: taskId
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Kicks off a reindex.  Need Admin permissions to perform this reindex.
      operationId: reindex
      parameters:
      - description: "Case insensitive String indicating type of reindex.  If omitted,\
          \ then defaults to BACKGROUND_PREFERRED."
        in: query
        name: type
        schema:
          type: string
      - description: "Indicates that comments should also be reindexed. Not relevant\
          \ for foreground reindex, where comments are always reindexed."
        in: query
        name: indexComments
        schema:
          default: false
          type: boolean
      - description: "Indicates that changeHistory should also be reindexed. Not relevant\
          \ for foreground reindex, where changeHistory is always reindexed."
        in: query
        name: indexChangeHistory
        schema:
          default: false
          type: boolean
      - description: "Indicates that changeHistory should also be reindexed. Not relevant\
          \ for foreground reindex, where changeHistory is always reindexed."
        in: query
        name: indexWorklogs
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/reindex/issue:
    post:
      description: |-
        Reindexes one or more individual issues.  Indexing is performed synchronously - the call returns when indexing of
         the issues has completed or a failure occurs.
         <p>
         Use either explicitly specified issue IDs or a JQL query to select issues to reindex.
      operationId: reindex_issues
      parameters:
      - description: the IDs or keys of one or more issues to reindex.
        in: query
        name: issueId
        schema:
          type: string
      - description: Indicates that comments should also be reindexed.
        in: query
        name: indexComments
        schema:
          default: false
          type: boolean
      - description: Indicates that changeHistory should also be reindexed.
        in: query
        name: indexChangeHistory
        schema:
          default: false
          type: boolean
      - description: Indicates that changeHistory should also be reindexed.
        in: query
        name: indexWorklogs
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/reindex/progress:
    get:
      description: |-
        Returns information on the system reindexes.  If a reindex is currently taking place then information about this reindex is returned.
         If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404
         indicating that no reindex has taken place.
      operationId: get_reindex_progress
      parameters:
      - description: |-
          the id of an indexing task you wish to obtain details on.  If omitted, then defaults to the standard behaviour and
                         returns information on the active reindex task, or the last task to run if no reindex is taking place. .  If there is no
                         reindexing task with that id then a 404 is returned.
        in: query
        name: taskId
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/reindex/request:
    post:
      description: |-
        Executes any pending reindex requests.  Returns a JSON array containing the IDs of the reindex requests
         that are being processed.  Execution is asynchronous - progress of the returned tasks can be monitored through
         other REST calls.
      operationId: process_requests
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/reindex/request/bulk:
    get:
      description: |-
        Retrieves the progress of a multiple reindex requests.  Only reindex requests that actually exist will be returned
         in the results.
      operationId: get_progress_bulk
      parameters:
      - description: the reindex request IDs.
        in: query
        name: requestId
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/reindex/request/{requestId}:
    get:
      description: Retrieves the progress of a single reindex request.
      operationId: get_progress
      parameters:
      - description: the reindex request ID.
        in: path
        name: requestId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/resolution:
    get:
      description: Returns a list of all resolutions.
      operationId: get_resolutions
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/resolution/{id}:
    get:
      description: Returns a resolution.
      operationId: get_resolution
      parameters:
      - description: a String containing the resolution id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/role:
    get:
      description: Get all the ProjectRoles available in JIRA. Currently this list
        is global.
      operationId: api2_role_get
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Creates a new ProjectRole to be available in JIRA.
         The created role does not have any default actors assigned.
      operationId: create_project_role
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/role/{id}:
    delete:
      description: Deletes a role. May return 403 in the future
      operationId: delete_project_role
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: "if given, removes a role even if it is used in scheme by replacing\
          \ the role with the given one"
        in: query
        name: swap
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Get a specific ProjectRole available in JIRA.
      operationId: get_project_roles_by_id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Partially updates a roles name or description.
      operationId: partial_update_project_role
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Fully updates a roles. Both name and description must be given.
      operationId: fully_update_project_role
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/role/{id}/actors:
    delete:
      description: Removes default actor from the given role.
      operationId: delete_project_role_actors_from_role
      parameters:
      - description: the role id to remove the actors from
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: "if given, removes an actor from given role"
        in: query
        name: user
        schema:
          type: string
      - description: "if given, removes an actor from given role"
        in: query
        name: group
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets default actors for the given role.
      operationId: get_project_role_actors_for_role
      parameters:
      - description: the role id to remove the actors from
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Adds default actors to the given role. The request data should
        contain a list of usernames or a list of groups to add.
      operationId: add_project_role_actors_to_role
      parameters:
      - description: the role id to remove the actors from
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/screens/addToDefault/{fieldId}:
    post:
      description: Adds field or custom field to the default tab
      operationId: add_field_to_default_screen
      parameters:
      - description: id of field / custom field
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/screens/{screenId}/availableFields:
    get:
      description: Gets available fields for screen. i.e ones that haven't already
        been added.
      operationId: get_fields_to_add
      parameters:
      - description: id of screen
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/screens/{screenId}/tabs:
    get:
      description: Returns a list of all tabs for the given screen
      operationId: get_all_tabs
      parameters:
      - description: id of screen
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: the key of the project; this parameter is optional
        in: query
        name: projectKey
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Creates tab for given screen
      operationId: add_tab
      parameters:
      - description: id of screen
        in: path
        name: screen_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/screens/{screenId}/tabs/{tabId}:
    delete:
      description: Deletes tab to give screen
      operationId: delete_tab
      parameters:
      - description: id of screen
        in: path
        name: screen_id
        required: true
        schema:
          format: int64
          type: integer
      - description: id of tab
        in: path
        name: tab_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Renames tab on given screen
      operationId: rename_tab
      parameters:
      - description: id of screen
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: id of tab
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/screens/{screenId}/tabs/{tabId}/fields:
    get:
      description: Gets all fields for a given tab
      operationId: get_all_fields
      parameters:
      - description: id of screen
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: id of tab
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      - description: the key of the project; this parameter is optional
        in: query
        name: projectKey
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Adds field to the given tab.
      operationId: add_field
      parameters:
      - description: id of screen
        in: path
        name: screen_id
        required: true
        schema:
          format: int64
          type: integer
      - description: id of tab
        in: path
        name: tab_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/screens/{screenId}/tabs/{tabId}/fields/{id}:
    delete:
      description: Removes field from given tab
      operationId: remove_field
      parameters:
      - description: id of screen
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: id of tab
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/screens/{screenId}/tabs/{tabId}/fields/{id}/move:
    post:
      description: Moves field on the given tab
      operationId: move_field
      parameters:
      - description: id of screen
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: id of tab
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/screens/{screenId}/tabs/{tabId}/move/{pos}:
    post:
      description: Moves tab position
      operationId: move_tab
      parameters:
      - description: id of screen
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: id of tab
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      - description: position of tab
        in: path
        name: pos
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/search:
    get:
      description: |-
        Searches for issues using JQL.
         <p>
         <b>Sorting</b>
         the <code>jql</code> parameter is a full <a href="http://confluence.atlassian.com/display/JIRA/Advanced+Searching">JQL</a>
         expression, and includes an <code>ORDER BY</code> clause.
         </p>
         <p>
         The <code>fields</code> param (which can be specified multiple times) gives a comma-separated list of fields
         to include in the response. This can be used to retrieve a subset of fields.
         A particular field can be excluded by prefixing it with a minus.
         <p>
         By default, only navigable (<code>*navigable</code>) fields are returned in this search resource. Note: the default is different
         in the get-issue resource -- the default there all fields (<code>*all</code>).
         <ul>
         <li><code>*all</code> - include all fields</li>
         <li><code>*navigable</code> - include just navigable fields</li>
         <li><code>summary,comment</code> - include just the summary and comments</li>
         <li><code>-description</code> - include navigable fields except the description (the default is <code>*navigable</code> for search)</li>
         <li><code>*all,-comment</code> - include everything except comments</li>
         </ul>
         <p>
         </p>
         <p><b>GET vs POST:</b>
         If the JQL query is too large to be encoded as a query param you should instead
         POST to this resource.
         </p>
         <p>
         <b>Expanding Issues in the Search Result:</b>
         It is possible to expand the issues returned by directly specifying the expansion on the expand parameter passed
         in to this resources.
         </p>
         <p>
         For instance, to expand the &quot;changelog&quot; for all the issues on the search result, it is neccesary to
         specify &quot;changelog&quot; as one of the values to expand.
         </p>
      operationId: search
      parameters:
      - description: a JQL query string
        in: query
        name: jql
        schema:
          type: string
      - description: the index of the first issue to return (0-based)
        in: query
        name: startAt
        schema:
          format: int32
          type: integer
      - description: |-
          the maximum number of issues to return (defaults to 50). The maximum allowable value is
                                dictated by the JIRA property 'jira.search.views.default.max'. If you specify a value that is higher than this
                                number, your search results will be truncated.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - description: whether to validate the JQL query
        in: query
        name: validateQuery
        schema:
          default: true
          type: boolean
      - description: "the list of fields to return for each issue. By default, all\
          \ navigable fields are returned."
        in: query
        name: fields
        schema:
          type: string
      - description: A comma-separated list of the parameters to expand.
        in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Performs a search using JQL.
      operationId: search_using_search_request
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/securitylevel/{id}:
    get:
      description: Returns a full representation of the security level that has the
        given id.
      operationId: get_issuesecuritylevel
      parameters:
      - description: a String containing an issue security level id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/serverInfo:
    get:
      description: Returns general information about the current JIRA server.
      operationId: get_server_info
      parameters:
      - in: query
        name: doHealthCheck
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/settings/baseUrl:
    put:
      description: Sets the base URL that is configured for this JIRA instance.
      operationId: set_base_url
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/settings/columns:
    get:
      description: Returns the default system columns for issue navigator. Admin permission
        will be required.
      operationId: get_issue_navigator_default_columns
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Sets the default system columns for issue navigator. Admin permission
        will be required.
      operationId: set_issue_navigator_default_columns
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/status:
    get:
      description: Returns a list of all statuses
      operationId: get_statuses
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/status/{idOrName}:
    get:
      description: Returns a full representation of the Status having the given id
        or name.
      operationId: get_status
      parameters:
      - description: a numeric Status id or a status name
        in: path
        name: idOrName
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/statuscategory:
    get:
      description: Returns a list of all status categories
      operationId: get_status_categories
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/statuscategory/{idOrKey}:
    get:
      description: Returns a full representation of the StatusCategory having the
        given id or key
      operationId: get_status_category
      parameters:
      - description: a numeric StatusCategory id or a status category key
        in: path
        name: idOrKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/universal_avatar/type/{type}/owner/{owningObjectId}:
    get:
      operationId: get_avatars
      parameters:
      - in: path
        name: type
        required: true
        schema:
          type: string
      - in: path
        name: owningObjectId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/universal_avatar/type/{type}/owner/{owningObjectId}/avatar:
    post:
      operationId: api2_universal_avatar_type_type_owner_owning_object_id_avatar_post
      parameters:
      - in: path
        name: type
        required: true
        schema:
          type: string
      - in: path
        name: owningObjectId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}:
    delete:
      description: Deletes avatar
      operationId: api2_universal_avatar_type_type_owner_owning_object_id_avatar_id_delete
      parameters:
      - description: database id for avatar
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Project id or project key
        in: path
        name: type
        required: true
        schema:
          type: string
      - in: path
        name: owningObjectId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/universal_avatar/type/{type}/owner/{owningObjectId}/temp:
    post:
      operationId: api2_universal_avatar_type_type_owner_owning_object_id_temp_post
      parameters:
      - in: path
        name: type
        required: true
        schema:
          type: string
      - in: path
        name: owningObjectId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/upgrade:
    get:
      description: |-
        Returns the result of the last upgrade task.

         Returns {@link javax.ws.rs.core.Response#seeOther(java.net.URI)} if still running.
      operationId: get_upgrade_result
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Runs any pending delayed upgrade tasks.  Need Admin permissions
        to do this.
      operationId: run_upgrades_now
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user:
    delete:
      description: Removes user.
      operationId: remove_user
      parameters:
      - description: the username
        in: query
        name: username
        schema:
          type: string
      - description: user key
        in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a user. This resource cannot be accessed anonymously.
      operationId: api2_user_get
      parameters:
      - description: the username
        in: query
        name: username
        schema:
          type: string
      - description: user key
        in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Create user. By default created user will not be notified with email.
         If password field is not set then password will be randomly generated.
      operationId: create_user
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Modify user. The "value" fields present will override the existing value.
         Fields skipped in request will not be changed.
      operationId: api2_user_put
      parameters:
      - description: the username
        in: query
        name: username
        schema:
          type: string
      - description: user key
        in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/application:
    delete:
      description: Remove user from given application. Admin permission will be required
        to perform this operation.
      operationId: remove_user_from_application
      parameters:
      - description: username
        in: query
        name: username
        schema:
          type: string
      - description: application key
        in: query
        name: applicationKey
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Add user to given application. Admin permission will be required
        to perform this operation.
      operationId: add_user_to_application
      parameters:
      - description: username
        in: query
        name: username
        schema:
          type: string
      - description: application key
        in: query
        name: applicationKey
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/assignable/multiProjectSearch:
    get:
      description: |-
        Returns a list of users that match the search string and can be assigned issues for all the given projects.
         This resource cannot be accessed anonymously.
      operationId: find_bulk_assignable_users
      parameters:
      - description: the username
        in: query
        name: username
        schema:
          type: string
      - description: "the keys of the projects we are finding assignable users for,\
          \ comma-separated"
        in: query
        name: projectKeys
        schema:
          type: string
      - description: the index of the first user to return (0-based)
        in: query
        name: startAt
        schema:
          format: int32
          type: integer
      - description: |-
          the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.
                                 If you specify a value that is higher than this number, your search results will be truncated.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/assignable/search:
    get:
      description: |-
        Returns a list of users that match the search string. This resource cannot be accessed anonymously.
         Please note that this resource should be called with an issue key when a list of assignable users is retrieved
         for editing.  For create only a project key should be supplied.  The list of assignable users may be incorrect
         if it's called with the project key for editing.
      operationId: find_assignable_users
      parameters:
      - description: the username
        in: query
        name: username
        schema:
          type: string
      - description: the key of the project we are finding assignable users for
        in: query
        name: project
        schema:
          type: string
      - description: the issue key for the issue being edited we need to find assignable
          users for.
        in: query
        name: issueKey
        schema:
          type: string
      - description: the index of the first user to return (0-based)
        in: query
        name: startAt
        schema:
          format: int32
          type: integer
      - description: |-
          the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.
                             If you specify a value that is higher than this number, your search results will be truncated.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - in: query
        name: actionDescriptorId
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/avatar:
    post:
      description: Converts temporary avatar into a real avatar
      operationId: api2_user_avatar_post
      parameters:
      - description: username
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      operationId: api2_user_avatar_put
      parameters:
      - in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/avatar/temporary:
    post:
      description: |-
        Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because
         the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from
         which the client parses the JSON from.
         <p>
         Creating a temporary avatar is part of a 3-step process in uploading a new
         avatar for a user: upload, crop, confirm. This endpoint allows you to use a multipart upload
         instead of sending the image directly as the request body.
         </p>
         <p>
         You *must* use "avatar" as the name of the upload parameter:</p>
         <p/>
         <pre>
         curl -c cookiejar.txt -X POST -u admin:admin -H "X-Atlassian-Token: no-check" \
           -F "avatar=@mynewavatar.png;type=image/png" \
           'http://localhost:8090/jira/rest/api/2/user/avatar/temporary?username=admin'
         </pre>
      operationId: api2_user_avatar_temporary_post
      parameters:
      - description: Username
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/avatar/{id}:
    delete:
      description: Deletes avatar
      operationId: api2_user_avatar_id_delete
      parameters:
      - description: database id for avatar
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: username
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/avatars:
    get:
      description: Returns all avatars which are visible for the currently logged
        in user.
      operationId: api2_user_avatars_get
      parameters:
      - description: username
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/columns:
    delete:
      description: |-
        Reset the default columns for the given user to the system default. Admin permission will be required to get
         columns for a user other than the currently logged in user.
      operationId: api2_user_columns_delete
      parameters:
      - description: username
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns the default columns for the given user. Admin permission will be required to get columns for a user
         other than the currently logged in user.
      operationId: api2_user_columns_get
      parameters:
      - description: username
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Sets the default columns for the given user.  Admin permission will be required to get columns for a user
         other than the currently logged in user.
      operationId: api2_user_columns_put
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/password:
    put:
      description: Modify user password.
      operationId: change_user_password
      parameters:
      - description: the username
        in: query
        name: username
        schema:
          type: string
      - description: user key
        in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/permission/search:
    get:
      description: |-
        Returns a list of active users that match the search string and have all specified permissions for the project or issue.<br>
         This resource can be accessed by users with ADMINISTER_PROJECT permission for the project or global ADMIN or SYSADMIN rights.
      operationId: find_users_with_all_permissions
      parameters:
      - description: "the username filter, list includes all users if unspecified"
        in: query
        name: username
        schema:
          type: string
      - description: |-
          comma separated list of permissions for project or issue returned users must have, see
                              <a href="https://developer.atlassian.com/static/javadoc/jira/6.0/reference/com/atlassian/jira/security/Permissions.Permission.html">Permissions</a>
                              JavaDoc for the list of all possible permissions.
        in: query
        name: permissions
        schema:
          type: string
      - description: the issue key for the issue for which returned users have specified
          permissions.
        in: query
        name: issueKey
        schema:
          type: string
      - description: the optional project key to search for users with if no issueKey
          is supplied.
        in: query
        name: projectKey
        schema:
          type: string
      - description: the index of the first user to return (0-based)
        in: query
        name: startAt
        schema:
          format: int32
          type: integer
      - description: |-
          the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.
                              If you specify a value that is higher than this number, your search results will be truncated.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/picker:
    get:
      description: Returns a list of users matching query with highlighting. This
        resource cannot be accessed anonymously.
      operationId: find_users_for_picker
      parameters:
      - description: "A string used to search username, Name or e-mail address"
        in: query
        name: query
        schema:
          type: string
      - description: |-
          the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.
                             If you specify a value that is higher than this number, your search results will be truncated.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - in: query
        name: showAvatar
        schema:
          type: boolean
      - in: query
        name: exclude
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/properties/:
    get:
      description: Returns the keys of all properties for the user identified by the
        key or by the id.
      operationId: api2_user_properties_get
      parameters:
      - description: key of the user whose properties are to be returned
        in: query
        name: userKey
        schema:
          type: string
      - description: username of the user whose properties are to be returned
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/properties/{propertyKey}:
    delete:
      description: |-
        Removes the property from the user identified by the key or by the id. Ths user removing the property is required
         to have permissions to administer the user.
      operationId: api2_user_properties_property_key_delete
      parameters:
      - in: path
        name: property_key
        required: true
        schema:
          type: string
      - description: key of the user whose property is to be removed
        in: query
        name: userKey
        schema:
          type: string
      - description: username of the user whose property is to be removed
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns the value of the property with a given key from the user identified by the key or by the id. The user who retrieves
         the property is required to have permissions to read the user.
      operationId: api2_user_properties_property_key_get
      parameters:
      - in: path
        name: propertyKey
        required: true
        schema:
          type: string
      - description: key of the user whose property is to be returned
        in: query
        name: userKey
        schema:
          type: string
      - description: username of the user whose property is to be returned
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Sets the value of the specified user's property.
         <p>
         You can use this resource to store a custom data against the user identified by the key or by the id. The user
         who stores the data is required to have permissions to administer the user.
         </p>
      operationId: api2_user_properties_property_key_put
      parameters:
      - in: path
        name: property_key
        required: true
        schema:
          type: string
      - description: key of the user whose property is to be set
        in: query
        name: userKey
        schema:
          type: string
      - description: username of the user whose property is to be set
        in: query
        name: username
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/search:
    get:
      description: Returns a list of users that match the search string. This resource
        cannot be accessed anonymously.
      operationId: find_users
      parameters:
      - description: "A query string used to search username, name or e-mail address"
        in: query
        name: username
        schema:
          type: string
      - description: the index of the first user to return (0-based)
        in: query
        name: startAt
        schema:
          format: int32
          type: integer
      - description: |-
          the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.
                                  If you specify a value that is higher than this number, your search results will be truncated.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - description: "If true, then active users are included in the results (default\
          \ true)"
        in: query
        name: includeActive
        schema:
          type: boolean
      - description: "If true, then inactive users are included in the results (default\
          \ false)"
        in: query
        name: includeInactive
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/user/viewissue/search:
    get:
      description: "Returns a list of active users that match the search string. This\
        \ resource cannot be accessed anonymously \n and requires the Browse Users\
        \ global permission.\n Given an issue key this resource will provide a list\
        \ of users that match the search string and have\n the browse issue permission\
        \ for the issue provided."
      operationId: find_users_with_browse_permission
      parameters:
      - description: "the username filter, no users returned if left blank"
        in: query
        name: username
        schema:
          type: string
      - description: the issue key for the issue being edited we need to find viewable
          users for.
        in: query
        name: issueKey
        schema:
          type: string
      - description: the optional project key to search for users with if no issueKey
          is supplied.
        in: query
        name: projectKey
        schema:
          type: string
      - description: the index of the first user to return (0-based)
        in: query
        name: startAt
        schema:
          format: int32
          type: integer
      - description: |-
          the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.
                             If you specify a value that is higher than this number, your search results will be truncated.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version:
    post:
      description: Create a version via POST.
      operationId: create_version
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/remotelink:
    get:
      description: Returns the remote version links for a given global ID.
      operationId: get_remote_version_links
      parameters:
      - description: the global ID of the remote resource that is linked to the versions
        in: query
        name: globalId
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/{id}:
    delete:
      description: Delete a project version.
      operationId: api2_version_id_delete
      parameters:
      - description: The version to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The version to set fixVersion to on issues where the deleted version is the fix version,
                                       If null then the fixVersion is removed.
        in: query
        name: moveFixIssuesTo
        schema:
          type: string
      - description: |-
          The version to set affectedVersion to on issues where the deleted version is the affected version,
                                       If null then the affectedVersion is removed.
        in: query
        name: moveAffectedIssuesTo
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns a project version.
      operationId: get_version
      parameters:
      - description: The version to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: expand
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Modify a version via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field
         is not present, it is silently ignored.
      operationId: update_version
      parameters:
      - description: The version to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/{id}/mergeto/{moveIssuesTo}:
    put:
      description: Merge versions
      operationId: merge
      parameters:
      - description: |-
          The version to set fixVersion to on issues where the deleted version is the fix version,
                               If null then the fixVersion is removed.
        in: path
        name: moveIssuesTo
        required: true
        schema:
          type: string
      - description: "The version that will be merged to version {@code moveIssuesTo}\
          \ and removed"
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/{id}/move:
    post:
      description: |-
        Modify a version's sequence within a project.
         <p/>
         The move version bean has 2 alternative field value pairs:
         <dl>
         <dt>position</dt><dd>An absolute position, which may have a value of 'First', 'Last', 'Earlier' or 'Later'</dd>
         <dt>after</dt><dd>A version to place this version after.  The value should be the self link of another version</dd>
         </dl>
      operationId: move_version
      parameters:
      - description: a String containing the version id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/{id}/relatedIssueCounts:
    get:
      description: Returns a bean containing the number of fixed in and affected issues
        for the given version.
      operationId: get_version_related_issues
      parameters:
      - description: a String containing the version id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/{id}/removeAndSwap:
    post:
      description: Delete a project version.
      operationId: api2_version_id_remove_and_swap_post
      parameters:
      - description: The version to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/{id}/unresolvedIssueCount:
    get:
      description: Returns the number of unresolved issues for the given version
      operationId: get_version_unresolved_issues
      parameters:
      - description: a String containing the version id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/{versionId}/remotelink:
    delete:
      description: Delete all remote version links for a given version ID.
      operationId: delete_remote_version_links_by_version_id
      parameters:
      - description: The version for which to delete ALL existing remote version links
        in: path
        name: version_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the remote version links associated with the given version
        ID.
      operationId: get_remote_version_links_by_version_id
      parameters:
      - description: The version for which to delete ALL existing remote version links
        in: path
        name: versionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Create a remote version link via POST.  The link's global ID will be taken from the
         JSON payload if provided; otherwise, it will be generated.
      operationId: api2_version_version_id_remotelink_post
      parameters:
      - description: The version for which to delete ALL existing remote version links
        in: path
        name: version_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/version/{versionId}/remotelink/{globalId}:
    delete:
      description: Delete a specific remote version link with the given version ID
        and global ID.
      operationId: delete_remote_version_link
      parameters:
      - description: The version ID of the remote link
        in: path
        name: version_id
        required: true
        schema:
          type: string
      - description: The global ID of the remote link
        in: path
        name: global_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: A REST sub-resource representing a remote version link
      operationId: get_remote_version_link
      parameters:
      - description: The version ID of the remote link
        in: path
        name: versionId
        required: true
        schema:
          type: string
      - description: The global ID of the remote link
        in: path
        name: globalId
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Create a remote version link via POST.  The link's global ID will be taken from the
         JSON payload if provided; otherwise, it will be generated.
      operationId: api2_version_version_id_remotelink_global_id_post
      parameters:
      - description: The version ID of the remote link
        in: path
        name: version_id
        required: true
        schema:
          type: string
      - description: The global ID of the remote link
        in: path
        name: global_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflow:
    get:
      description: Returns all workflows.
      operationId: get_all_workflows
      parameters:
      - in: query
        name: workflowName
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflow/api/2/transitions/{id}/properties:
    delete:
      description: |-
        Delete a property from the passed transition on the passed workflow. It is not an error to delete a property that
         does not exist.
      operationId: api2_workflow_api2_transitions_id_properties_delete
      parameters:
      - description: the ID of the transition within the workflow.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the name of the property to add.
        in: query
        name: key
        schema:
          type: string
      - description: the name of the workflow to use.
        in: query
        name: workflowName
        schema:
          type: string
      - description: the type of workflow to use. Can either be "live" or "draft".
        in: query
        name: workflowMode
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Return the property or properties associated with a transition.
      operationId: get_properties
      parameters:
      - description: the ID of the transition within the workflow.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: |-
          some keys under the "jira." prefix are editable, some are not. Set this to true
                                      in order to include the non-editable keys in the response.
        in: query
        name: includeReservedKeys
        schema:
          type: boolean
      - description: the name of the property key to query. Can be left off the query
          to return all properties.
        in: query
        name: key
        schema:
          type: string
      - description: the name of the workflow to use.
        in: query
        name: workflowName
        schema:
          type: string
      - description: the type of workflow to use. Can either be "live" or "draft".
        in: query
        name: workflowMode
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Add a new property to a transition. Trying to add a property that already
         exists will fail.
      operationId: create_property
      parameters:
      - description: the ID of the transition within the workflow.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the name of the property to add.
        in: query
        name: key
        schema:
          type: string
      - description: the name of the workflow to use.
        in: query
        name: workflowName
        schema:
          type: string
      - description: the type of workflow to use. Can either be "live" or "draft".
        in: query
        name: workflowMode
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Update/add new property to a transition. Trying to update a property that does
         not exist will result in a new property being added.
      operationId: update_property
      parameters:
      - description: the ID of the transition within the workflow.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the name of the property to add.
        in: query
        name: key
        schema:
          type: string
      - description: the name of the workflow to use.
        in: query
        name: workflowName
        schema:
          type: string
      - description: the type of workflow to use. Can either be "live" or "draft".
        in: query
        name: workflowMode
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme:
    post:
      description: |-
        Create a new workflow scheme.
         <p/>
         The body contains a representation of the new scheme. Values not passed are assumed to be set to their defaults.
      operationId: create_scheme
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}:
    delete:
      description: Delete the passed workflow scheme.
      operationId: delete_scheme
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the requested workflow scheme to the caller.
      operationId: get_by_id
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: |-
          when true indicates that a scheme's draft, if it exists, should be queried instead of
                                      the scheme itself.
        in: query
        name: returnDraftIfExists
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Update the passed workflow scheme.
         <p/>
         The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate
         no change for that field.
         <p/>
         The passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft
         should be created and/or updated when the actual scheme cannot be edited (e.g. when the scheme is being used by
         a project). Values not appearing the body will not be touched.
      operationId: update
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}/createdraft:
    post:
      description: Create a draft for the passed scheme. The draft will be a copy
        of the state of the parent.
      operationId: create_draft_for_parent
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}/default:
    delete:
      description: Remove the default workflow from the passed workflow scheme.
      operationId: delete_default
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: |-
          when true will create and return a draft when the workflow scheme cannot be edited
                                      (e.g. when it is being used by a project).
        in: query
        name: updateDraftIfNeeded
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Return the default workflow from the passed workflow scheme.
      operationId: get_default
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: |-
          when true indicates that a scheme's draft, if it exists, should be queried instead of
                                      the scheme itself.
        in: query
        name: returnDraftIfExists
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Set the default workflow for the passed workflow scheme.
         <p/>
         The passed representation can have its
         updateDraftIfNeeded flag set to true to indicate that the draft should be created/updated when the actual scheme
         cannot be edited.
      operationId: update_default
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}/draft:
    delete:
      description: Delete the passed draft workflow scheme.
      operationId: delete_draft_by_id
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the requested draft workflow scheme to the caller.
      operationId: get_draft_by_id
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Update a draft workflow scheme. The draft will created if necessary.
         <p/>
         The body is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.
      operationId: update_draft
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}/draft/default:
    delete:
      description: Remove the default workflow from the passed draft workflow scheme.
      operationId: delete_draft_default
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Return the default workflow from the passed draft workflow scheme
        to the caller.
      operationId: get_draft_default
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Set the default workflow for the passed draft workflow scheme.
      operationId: update_draft_default
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}/draft/issuetype/{issueType}:
    delete:
      description: Remove the specified issue type mapping from the draft scheme.
      operationId: delete_draft_issue_type
      parameters:
      - description: the issue type being set.
        in: path
        name: issue_type
        required: true
        schema:
          type: string
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the issue type mapping for the passed draft workflow scheme.
      operationId: get_draft_issue_type
      parameters:
      - description: the issue type being set.
        in: path
        name: issueType
        required: true
        schema:
          type: string
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Set the issue type mapping for the passed draft scheme.
         <p/>
         The passed representation can have its updateDraftIfNeeded flag set to true to indicate that
         the draft should be created/updated when the actual scheme cannot be edited.
      operationId: set_draft_issue_type
      parameters:
      - description: the issue type being set.
        in: path
        name: issue_type
        required: true
        schema:
          type: string
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}/draft/workflow:
    delete:
      description: Delete the passed workflow from the draft workflow scheme.
      operationId: delete_draft_workflow_mapping
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the name of the workflow to delete.
        in: query
        name: workflowName
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the draft workflow mappings or requested mapping to the
        caller.
      operationId: get_draft_workflow
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the workflow mapping to return. Null can be passed to return
          all mappings. Must be a valid workflow name.
        in: query
        name: workflowName
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Update the draft scheme to include the passed mapping.
         <p/>
         The body is a representation of the workflow mapping.
         Values not passed are assumed to indicate no change for that field.
      operationId: update_draft_workflow_mapping
      parameters:
      - description: the id of the parent scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the name of the workflow mapping to update.
        in: query
        name: workflowName
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}/issuetype/{issueType}:
    delete:
      description: Remove the specified issue type mapping from the scheme.
      operationId: api2_workflowscheme_id_issuetype_issue_type_delete
      parameters:
      - description: the issue type being set.
        in: path
        name: issue_type
        required: true
        schema:
          type: string
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: |-
          when true will create and return a draft when the workflow scheme cannot be edited
                                      (e.g. when it is being used by a project).
        in: query
        name: updateDraftIfNeeded
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the issue type mapping for the passed workflow scheme.
      operationId: api2_workflowscheme_id_issuetype_issue_type_get
      parameters:
      - description: the issue type being set.
        in: path
        name: issueType
        required: true
        schema:
          type: string
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: |-
          when true indicates that a scheme's draft, if it exists, should be queried instead of
                                      the scheme itself.
        in: query
        name: returnDraftIfExists
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Set the issue type mapping for the passed scheme.
         <p/>
         The passed representation can have its updateDraftIfNeeded flag set to true to indicate that
         the draft should be created/updated when the actual scheme cannot be edited.
      operationId: set_issue_type
      parameters:
      - description: the issue type being set.
        in: path
        name: issue_type
        required: true
        schema:
          type: string
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/workflowscheme/{id}/workflow:
    delete:
      description: Delete the passed workflow from the workflow scheme.
      operationId: delete_workflow_mapping
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the name of the workflow to delete.
        in: query
        name: workflowName
        schema:
          type: string
      - description: |-
          flag to indicate if a draft should be created if necessary to delete the workflow
                                      from the scheme.
        in: query
        name: updateDraftIfNeeded
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns the workflow mappings or requested mapping to the caller
        for the passed scheme.
      operationId: get_workflow
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the workflow mapping to return. Null can be passed to return
          all mappings. Must be a valid workflow name.
        in: query
        name: workflowName
        schema:
          type: string
      - description: |-
          when true indicates that a scheme's draft, if it exists, should be queried instead of
                                      the scheme itself.
        in: query
        name: returnDraftIfExists
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        Update the scheme to include the passed mapping.
         <p/>
         The body is a representation of the workflow mapping.
         Values not passed are assumed to indicate no change for that field.
         <p/>
         The passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft
         should be created/updated when the actual scheme cannot be edited.
      operationId: update_workflow_mapping
      parameters:
      - description: the id of the scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the name of the workflow mapping to update.
        in: query
        name: workflowName
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/worklog/deleted:
    get:
      description: |-
        Returns worklogs id and delete time of worklogs that was deleted since given time.
         The returns set of worklogs is limited to 1000 elements.
         This API will not return worklogs deleted during last minute.
      operationId: get_ids_of_worklogs_deleted_since
      parameters:
      - description: a date time in unix timestamp format since when deleted worklogs
          will be returned.
        in: query
        name: since
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/worklog/list:
    post:
      description: |-
        Returns worklogs for given worklog ids. Only worklogs to which the calling user has permissions, will be included in the result.
         The returns set of worklogs is limited to 1000 elements.
      operationId: get_worklogs_for_ids
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /api/2/worklog/updated:
    get:
      description: |-
        Returns worklogs id and update time of worklogs that was updated since given time.
         The returns set of worklogs is limited to 1000 elements.
         This API will not return worklogs updated during last minute.
      operationId: get_ids_of_worklogs_modified_since
      parameters:
      - description: a date time in unix timestamp format since when updated worklogs
          will be returned.
        in: query
        name: since
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /auth/1/session:
    delete:
      description: "Logs the current user out of JIRA, destroying the existing session,\
        \ if any."
      operationId: logout
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: |-
        Returns information about the currently authenticated user's session. If the caller is not authenticated they
         will get a 401 Unauthorized status code.
      operationId: current_user
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: |-
        Creates a new session for a user in JIRA. Once a session has been successfully created it can be used to access
         any of JIRA's remote APIs and also the web UI by passing the appropriate HTTP Cookie header.
         <p>
         Note that it is generally preferrable to use HTTP BASIC authentication with the REST API. However, this resource
         may be used to mimic the behaviour of JIRA's log-in page (e.g. to display log-in errors to a user).
      operationId: login
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /auth/1/websudo:
    delete:
      description: This method invalidates the any current WebSudo session.
      operationId: release
      responses:
        "200":
          content: {}
          description: Successful Response
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  schemas: {}
x-hasEquivalentPaths: true
x-original-swagger-version: "2.0"
