/**
 * JIRA 7.6.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void acknowledgeErrors();

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void addActorUsers(const QString &project_id_or_key, const qint64 &id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void addAttachment(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void addComment(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    */
    virtual void addField(const qint64 &screen_id, const qint64 &tab_id);

    /**
    * @param[in]  field_id QString [required]
    */
    virtual void addFieldToDefaultScreen(const QString &field_id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void addProjectRoleActorsToRole(const qint64 &id);


    virtual void addRecord();

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void addSharePermission(const qint64 &id);

    /**
    * @param[in]  screen_id qint64 [required]
    */
    virtual void addTab(const qint64 &screen_id);

    /**
    * @param[in]  username QString [optional]
    * @param[in]  application_key QString [optional]
    */
    virtual void addUserToApplication(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  groupname QString [optional]
    */
    virtual void addUserToGroup(const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void addVote(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void addWatcher(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  adjust_estimate QString [optional]
    * @param[in]  new_estimate QString [optional]
    * @param[in]  reduce_by QString [optional]
    */
    virtual void addWorklog(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &adjust_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reduce_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [optional]
    * @param[in]  permission_level QString [optional]
    * @param[in]  key_filter QString [optional]
    */
    virtual void api2ApplicationPropertiesGet(const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    */
    virtual void api2AvatarTypeTemporaryCropPost(const QString &type);

    /**
    * @param[in]  comment_id QString [required]
    */
    virtual void api2CommentCommentIdPropertiesGet(const QString &comment_id);

    /**
    * @param[in]  comment_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2CommentCommentIdPropertiesPropertyKeyDelete(const QString &comment_id, const QString &property_key);

    /**
    * @param[in]  comment_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2CommentCommentIdPropertiesPropertyKeyGet(const QString &comment_id, const QString &property_key);

    /**
    * @param[in]  comment_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2CommentCommentIdPropertiesPropertyKeyPut(const QString &comment_id, const QString &property_key);

    /**
    * @param[in]  id QString [required]
    * @param[in]  move_issues_to QString [optional]
    */
    virtual void api2ComponentIdDelete(const QString &id, const ::OpenAPI::OptionalParam<QString> &move_issues_to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  dashboard_id QString [required]
    */
    virtual void api2DashboardDashboardIdItemsItemIdPropertiesGet(const QString &item_id, const QString &dashboard_id);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete(const QString &item_id, const QString &dashboard_id, const QString &property_key);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet(const QString &item_id, const QString &dashboard_id, const QString &property_key);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  dashboard_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut(const QString &item_id, const QString &dashboard_id, const QString &property_key);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void api2FilterIdColumnsDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void api2FilterIdColumnsGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void api2FilterIdColumnsPut(const qint64 &id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void api2IssueIssueIdOrKeyPropertiesGet(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete(const QString &issue_id_or_key, const QString &property_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2IssueIssueIdOrKeyPropertiesPropertyKeyGet(const QString &issue_id_or_key, const QString &property_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2IssueIssueIdOrKeyPropertiesPropertyKeyPut(const QString &issue_id_or_key, const QString &property_key);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void api2IssuesecurityschemesIdGet(const qint64 &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void api2IssuetypeIdAvatarPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void api2IssuetypeIdAvatarTemporaryPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  alternative_issue_type_id QString [optional]
    */
    virtual void api2IssuetypeIdDelete(const QString &id, const ::OpenAPI::OptionalParam<QString> &alternative_issue_type_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void api2IssuetypeIdGet(const QString &id);

    /**
    * @param[in]  issue_type_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete(const QString &issue_type_id, const QString &property_key);

    /**
    * @param[in]  issue_type_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet(const QString &issue_type_id, const QString &property_key);

    /**
    * @param[in]  issue_type_id QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut(const QString &issue_type_id, const QString &property_key);


    virtual void api2MyselfGet();


    virtual void api2MyselfPut();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void api2NotificationschemeIdGet(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void api2ProjectProjectIdOrKeyAvatarIdDelete(const QString &project_id_or_key, const qint64 &id);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyAvatarPost(const QString &project_id_or_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyAvatarPut(const QString &project_id_or_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyAvatarTemporaryPost(const QString &project_id_or_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyAvatarsGet(const QString &project_id_or_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void api2ProjectProjectIdOrKeyGet(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyPropertiesGet(const QString &project_id_or_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete(const QString &project_id_or_key, const QString &property_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet(const QString &project_id_or_key, const QString &property_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  property_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut(const QString &project_id_or_key, const QString &property_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void api2ProjectProjectIdOrKeyRoleGet(const QString &project_id_or_key);

    /**
    * @param[in]  project_key_or_id QString [required]
    */
    virtual void api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGet(const QString &project_key_or_id);

    /**
    * @param[in]  project_key_or_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void api2ProjectProjectKeyOrIdNotificationschemeGet(const QString &project_key_or_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [optional]
    */
    virtual void api2ProjectvalidateKeyGet(const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());


    virtual void api2RoleGet();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  type QString [required]
    * @param[in]  owning_object_id QString [required]
    */
    virtual void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete(const qint64 &id, const QString &type, const QString &owning_object_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  owning_object_id QString [required]
    */
    virtual void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost(const QString &type, const QString &owning_object_id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  owning_object_id QString [required]
    */
    virtual void api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost(const QString &type, const QString &owning_object_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  username QString [optional]
    */
    virtual void api2UserAvatarIdDelete(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    */
    virtual void api2UserAvatarPost(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    */
    virtual void api2UserAvatarPut(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    */
    virtual void api2UserAvatarTemporaryPost(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    */
    virtual void api2UserAvatarsGet(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    */
    virtual void api2UserColumnsDelete(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    */
    virtual void api2UserColumnsGet(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());


    virtual void api2UserColumnsPut();

    /**
    * @param[in]  username QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void api2UserGet(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_key QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void api2UserPropertiesGet(const ::OpenAPI::OptionalParam<QString> &user_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  property_key QString [required]
    * @param[in]  user_key QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void api2UserPropertiesPropertyKeyDelete(const QString &property_key, const ::OpenAPI::OptionalParam<QString> &user_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  property_key QString [required]
    * @param[in]  user_key QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void api2UserPropertiesPropertyKeyGet(const QString &property_key, const ::OpenAPI::OptionalParam<QString> &user_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  property_key QString [required]
    * @param[in]  user_key QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void api2UserPropertiesPropertyKeyPut(const QString &property_key, const ::OpenAPI::OptionalParam<QString> &user_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void api2UserPut(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  move_fix_issues_to QString [optional]
    * @param[in]  move_affected_issues_to QString [optional]
    */
    virtual void api2VersionIdDelete(const QString &id, const ::OpenAPI::OptionalParam<QString> &move_fix_issues_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &move_affected_issues_to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void api2VersionIdRemoveAndSwapPost(const QString &id);

    /**
    * @param[in]  version_id QString [required]
    * @param[in]  global_id QString [required]
    */
    virtual void api2VersionVersionIdRemotelinkGlobalIdPost(const QString &version_id, const QString &global_id);

    /**
    * @param[in]  version_id QString [required]
    */
    virtual void api2VersionVersionIdRemotelinkPost(const QString &version_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  key QString [optional]
    * @param[in]  workflow_name QString [optional]
    * @param[in]  workflow_mode QString [optional]
    */
    virtual void api2WorkflowApi2TransitionsIdPropertiesDelete(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_mode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_type QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  update_draft_if_needed bool [optional]
    */
    virtual void api2WorkflowschemeIdIssuetypeIssueTypeDelete(const QString &issue_type, const qint64 &id, const ::OpenAPI::OptionalParam<bool> &update_draft_if_needed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_type QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  return_draft_if_exists bool [optional]
    */
    virtual void api2WorkflowschemeIdIssuetypeIssueTypeGet(const QString &issue_type, const qint64 &id, const ::OpenAPI::OptionalParam<bool> &return_draft_if_exists = ::OpenAPI::OptionalParam<bool>());


    virtual void approveUpgrade();


    virtual void areMetricsExposed();

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void assign(const QString &issue_id_or_key);

    /**
    * @param[in]  project_key_or_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void assignPermissionScheme(const QString &project_key_or_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void canMoveSubTask(const QString &issue_id_or_key);


    virtual void cancelUpgrade();


    virtual void changeMyPassword();

    /**
    * @param[in]  username QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void changeUserPassword(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());


    virtual void createComponent();


    virtual void createCustomField();

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void createDraftForParent(const qint64 &id);

    /**
    * @param[in]  expand QString [optional]
    */
    virtual void createFilter(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());


    virtual void createGroup();


    virtual void createIssue();


    virtual void createIssueLinkType();


    virtual void createIssueType();


    virtual void createIssues();

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void createOrUpdateRemoteIssueLink(const QString &issue_id_or_key);

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void createPermissionGrant(const qint64 &scheme_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expand QString [optional]
    */
    virtual void createPermissionScheme(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());


    virtual void createProject();


    virtual void createProjectCategory();


    virtual void createProjectRole();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  key QString [optional]
    * @param[in]  workflow_name QString [optional]
    * @param[in]  workflow_mode QString [optional]
    */
    virtual void createProperty(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_mode = ::OpenAPI::OptionalParam<QString>());


    virtual void createScheme();


    virtual void createUser();


    virtual void createVersion();


    virtual void currentUser();

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  user QString [optional]
    * @param[in]  group QString [optional]
    */
    virtual void deleteActor(const QString &project_id_or_key, const qint64 &id, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteComment(const QString &issue_id_or_key, const QString &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  update_draft_if_needed bool [optional]
    */
    virtual void deleteDefault(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &update_draft_if_needed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteDraftById(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteDraftDefault(const qint64 &id);

    /**
    * @param[in]  issue_type QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void deleteDraftIssueType(const QString &issue_type, const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [optional]
    */
    virtual void deleteDraftWorkflowMapping(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteFilter(const qint64 &id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  delete_subtasks QString [optional]
    */
    virtual void deleteIssue(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &delete_subtasks = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  link_id QString [required]
    */
    virtual void deleteIssueLink(const QString &link_id);

    /**
    * @param[in]  issue_link_type_id QString [required]
    */
    virtual void deleteIssueLinkType(const QString &issue_link_type_id);

    /**
    * @param[in]  scheme_id qint64 [required]
    */
    virtual void deletePermissionScheme(const qint64 &scheme_id);

    /**
    * @param[in]  permission_id qint64 [required]
    * @param[in]  scheme_id qint64 [required]
    */
    virtual void deletePermissionSchemeEntity(const qint64 &permission_id, const qint64 &scheme_id);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void deleteProject(const QString &project_id_or_key);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  swap qint64 [optional]
    */
    virtual void deleteProjectRole(const qint64 &id, const ::OpenAPI::OptionalParam<qint64> &swap = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  user QString [optional]
    * @param[in]  group QString [optional]
    */
    virtual void deleteProjectRoleActorsFromRole(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  global_id QString [optional]
    */
    virtual void deleteRemoteIssueLinkByGlobalId(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &global_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  link_id QString [required]
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void deleteRemoteIssueLinkById(const QString &link_id, const QString &issue_id_or_key);

    /**
    * @param[in]  version_id QString [required]
    * @param[in]  global_id QString [required]
    */
    virtual void deleteRemoteVersionLink(const QString &version_id, const QString &global_id);

    /**
    * @param[in]  version_id QString [required]
    */
    virtual void deleteRemoteVersionLinksByVersionId(const QString &version_id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteScheme(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  permission_id qint64 [required]
    */
    virtual void deleteSharePermission(const qint64 &id, const qint64 &permission_id);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    */
    virtual void deleteTab(const qint64 &screen_id, const qint64 &tab_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [optional]
    * @param[in]  update_draft_if_needed bool [optional]
    */
    virtual void deleteWorkflowMapping(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &update_draft_if_needed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  adjust_estimate QString [optional]
    * @param[in]  new_estimate QString [optional]
    * @param[in]  increase_by QString [optional]
    */
    virtual void deleteWorklog(const QString &issue_id_or_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &adjust_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &increase_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void doTransition(const QString &issue_id_or_key);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void editFilter(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  notify_users bool [optional]
    */
    virtual void editIssue(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<bool> &notify_users = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void expandForHumans(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void expandForMachines(const QString &id);

    /**
    * @param[in]  username QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  issue_key QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  action_descriptor_id qint32 [optional]
    */
    virtual void findAssignableUsers(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &action_descriptor_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [optional]
    * @param[in]  project_keys QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void findBulkAssignableUsers(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_keys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  user_name QString [optional]
    */
    virtual void findGroups(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  include_active bool [optional]
    * @param[in]  include_inactive bool [optional]
    */
    virtual void findUsers(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_inactive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  show_avatar bool [optional]
    * @param[in]  field_id QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  issue_type_id QString [optional]
    */
    virtual void findUsersAndGroups(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &show_avatar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &field_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_type_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  show_avatar bool [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void findUsersForPicker(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &show_avatar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    * @param[in]  permissions QString [optional]
    * @param[in]  issue_key QString [optional]
    * @param[in]  project_key QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void findUsersWithAllPermissions(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permissions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [optional]
    * @param[in]  issue_key QString [optional]
    * @param[in]  project_key QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void findUsersWithBrowsePermission(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void fullyUpdateProjectRole(const qint64 &id);

    /**
    * @param[in]  key QString [required]
    */
    virtual void get(const QString &key);

    /**
    * @param[in]  project_type_key QString [required]
    */
    virtual void getAccessibleProjectTypeByKey(const QString &project_type_key);


    virtual void getAdvancedSettings();


    virtual void getAll();

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  project_key QString [optional]
    */
    virtual void getAllFields(const qint64 &screen_id, const qint64 &tab_id, const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>());


    virtual void getAllPermissions();


    virtual void getAllProjectCategories();


    virtual void getAllProjectTypes();

    /**
    * @param[in]  expand QString [optional]
    * @param[in]  recent qint32 [optional]
    */
    virtual void getAllProjects(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &recent = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void getAllStatuses(const QString &project_id_or_key);

    /**
    * @param[in]  type QString [required]
    */
    virtual void getAllSystemAvatars(const QString &type);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  project_key QString [optional]
    */
    virtual void getAllTabs(const qint64 &screen_id, const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_name QString [optional]
    */
    virtual void getAllWorkflows(const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAlternativeIssueTypes(const QString &id);

    /**
    * @param[in]  project_key_or_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getAssignedPermissionScheme(const QString &project_key_or_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAttachment(const QString &id);


    virtual void getAttachmentMeta();


    virtual void getAutoComplete();


    virtual void getAvailableMetrics();

    /**
    * @param[in]  type QString [required]
    * @param[in]  owning_object_id QString [required]
    */
    virtual void getAvatars(const QString &type, const QString &owning_object_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  return_draft_if_exists bool [optional]
    */
    virtual void getById(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &return_draft_if_exists = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getComment(const QString &issue_id_or_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getComments(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getComponent(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getComponentRelatedIssues(const QString &id);


    virtual void getConfiguration();

    /**
    * @param[in]  project_ids QString [optional]
    * @param[in]  project_keys QString [optional]
    * @param[in]  issuetype_ids QString [optional]
    * @param[in]  issuetype_names QString [optional]
    */
    virtual void getCreateIssueMeta(const ::OpenAPI::OptionalParam<QString> &project_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_keys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issuetype_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issuetype_names = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getCustomFieldOption(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDashboard(const QString &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  return_draft_if_exists bool [optional]
    */
    virtual void getDefault(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &return_draft_if_exists = ::OpenAPI::OptionalParam<bool>());


    virtual void getDefaultShareScope();

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getDraftById(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getDraftDefault(const qint64 &id);

    /**
    * @param[in]  issue_type QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void getDraftIssueType(const QString &issue_type, const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [optional]
    */
    virtual void getDraftWorkflow(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void getEditIssueMeta(const QString &issue_id_or_key);

    /**
    * @param[in]  expand QString [optional]
    * @param[in]  enable_shared_users bool [optional]
    */
    virtual void getFavouriteFilters(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_shared_users = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  field_name QString [optional]
    * @param[in]  field_value QString [optional]
    * @param[in]  predicate_name QString [optional]
    * @param[in]  predicate_value QString [optional]
    */
    virtual void getFieldAutoCompleteForQueryString(const ::OpenAPI::OptionalParam<QString> &field_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &field_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &predicate_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &predicate_value = ::OpenAPI::OptionalParam<QString>());


    virtual void getFields();

    /**
    * @param[in]  screen_id qint64 [required]
    */
    virtual void getFieldsToAdd(const qint64 &screen_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  expand QString [optional]
    * @param[in]  enable_shared_users bool [optional]
    */
    virtual void getFilter(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_shared_users = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  groupname QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getGroup(const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  since qint64 [optional]
    */
    virtual void getIdsOfWorklogsDeletedSince(const ::OpenAPI::OptionalParam<qint64> &since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  since qint64 [optional]
    */
    virtual void getIdsOfWorklogsModifiedSince(const ::OpenAPI::OptionalParam<qint64> &since = ::OpenAPI::OptionalParam<qint64>());


    virtual void getIndexSummary();

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  fields QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  properties QString [optional]
    */
    virtual void getIssue(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &properties = ::OpenAPI::OptionalParam<QString>());


    virtual void getIssueAllTypes();

    /**
    * @param[in]  link_id QString [required]
    */
    virtual void getIssueLink(const QString &link_id);

    /**
    * @param[in]  issue_link_type_id QString [required]
    */
    virtual void getIssueLinkType(const QString &issue_link_type_id);


    virtual void getIssueLinkTypes();


    virtual void getIssueNavigatorDefaultColumns();

    /**
    * @param[in]  query QString [optional]
    * @param[in]  current_jql QString [optional]
    * @param[in]  current_issue_key QString [optional]
    * @param[in]  current_project_id QString [optional]
    * @param[in]  show_sub_tasks bool [optional]
    * @param[in]  show_sub_task_parent bool [optional]
    */
    virtual void getIssuePickerResource(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_jql = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_sub_tasks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_sub_task_parent = ::OpenAPI::OptionalParam<bool>());


    virtual void getIssueSecuritySchemes();

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void getIssueWatchers(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void getIssueWorklog(const QString &issue_id_or_key);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getIssuesecuritylevel(const QString &id);

    /**
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getNotificationSchemes(const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  has_old_password bool [optional]
    */
    virtual void getPasswordPolicy(const ::OpenAPI::OptionalParam<bool> &has_old_password = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getPermissionScheme(const qint64 &scheme_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  permission_id qint64 [required]
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getPermissionSchemeGrant(const qint64 &permission_id, const qint64 &scheme_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getPermissionSchemeGrants(const qint64 &scheme_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  expand QString [optional]
    */
    virtual void getPermissionSchemes(const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_key QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  issue_key QString [optional]
    * @param[in]  issue_id QString [optional]
    */
    virtual void getPermissions(const ::OpenAPI::OptionalParam<QString> &project_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [optional]
    */
    virtual void getPreference(const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());


    virtual void getPriorities();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getPriority(const QString &id);

    /**
    * @param[in]  request_id qint64 [required]
    */
    virtual void getProgress(const qint64 &request_id);

    /**
    * @param[in]  request_id QString [optional]
    */
    virtual void getProgressBulk(const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getProjectCategoryById(const qint64 &id);

    /**
    * @param[in]  project_id_or_key QString [required]
    */
    virtual void getProjectComponents(const QString &project_id_or_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void getProjectRole(const QString &project_id_or_key, const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getProjectRoleActorsForRole(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getProjectRolesById(const qint64 &id);

    /**
    * @param[in]  project_type_key QString [required]
    */
    virtual void getProjectTypeByKey(const QString &project_type_key);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getProjectVersions(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void getProjectVersionsPaginated(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  include_reserved_keys bool [optional]
    * @param[in]  key QString [optional]
    * @param[in]  workflow_name QString [optional]
    * @param[in]  workflow_mode QString [optional]
    */
    virtual void getProperties(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &include_reserved_keys = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_mode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_type_id QString [required]
    */
    virtual void getPropertyKeys(const QString &issue_type_id);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    * @param[in]  project_ids QString [optional]
    * @param[in]  user_ids QString [optional]
    */
    virtual void getRecords(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id qint64 [optional]
    */
    virtual void getReindexInfo(const ::OpenAPI::OptionalParam<qint64> &task_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  task_id qint64 [optional]
    */
    virtual void getReindexProgress(const ::OpenAPI::OptionalParam<qint64> &task_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  link_id QString [required]
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void getRemoteIssueLinkById(const QString &link_id, const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  global_id QString [optional]
    */
    virtual void getRemoteIssueLinks(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &global_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_id QString [required]
    * @param[in]  global_id QString [required]
    */
    virtual void getRemoteVersionLink(const QString &version_id, const QString &global_id);

    /**
    * @param[in]  global_id QString [optional]
    */
    virtual void getRemoteVersionLinks(const ::OpenAPI::OptionalParam<QString> &global_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_id QString [required]
    */
    virtual void getRemoteVersionLinksByVersionId(const QString &version_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getResolution(const QString &id);


    virtual void getResolutions();

    /**
    * @param[in]  permission_scheme_id qint64 [required]
    * @param[in]  attribute_key QString [required]
    */
    virtual void getSchemeAttribute(const qint64 &permission_scheme_id, const QString &attribute_key);

    /**
    * @param[in]  project_key_or_id QString [required]
    */
    virtual void getSecurityLevelsForProject(const QString &project_key_or_id);

    /**
    * @param[in]  do_health_check bool [optional]
    */
    virtual void getServerInfo(const ::OpenAPI::OptionalParam<bool> &do_health_check = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  permission_id qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void getSharePermission(const qint64 &permission_id, const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getSharePermissions(const qint64 &id);


    virtual void getState();

    /**
    * @param[in]  id_or_name QString [required]
    */
    virtual void getStatus(const QString &id_or_name);


    virtual void getStatusCategories();

    /**
    * @param[in]  id_or_key QString [required]
    */
    virtual void getStatusCategory(const QString &id_or_key);


    virtual void getStatuses();

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void getSubTasks(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  transition_id QString [optional]
    */
    virtual void getTransitions(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &transition_id = ::OpenAPI::OptionalParam<QString>());


    virtual void getUpgradeResult();

    /**
    * @param[in]  groupname QString [optional]
    * @param[in]  include_inactive_users bool [optional]
    * @param[in]  start_at qint64 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void getUsersFromGroup(const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_inactive_users = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_at = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void getVersion(const QString &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getVersionRelatedIssues(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getVersionUnresolvedIssues(const QString &id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void getVotes(const QString &issue_id_or_key);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [optional]
    * @param[in]  return_draft_if_exists bool [optional]
    */
    virtual void getWorkflow(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_draft_if_exists = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getWorklog(const QString &issue_id_or_key, const QString &id);


    virtual void getWorklogsForIds();


    virtual void linkIssues();

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void list(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());


    virtual void login();


    virtual void logout();

    /**
    * @param[in]  move_issues_to QString [required]
    * @param[in]  id QString [required]
    */
    virtual void merge(const QString &move_issues_to, const QString &id);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  id QString [required]
    */
    virtual void moveField(const qint64 &screen_id, const qint64 &tab_id, const QString &id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void moveSubTasks(const QString &issue_id_or_key);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  pos qint32 [required]
    */
    virtual void moveTab(const qint64 &screen_id, const qint64 &tab_id, const qint32 &pos);

    /**
    * @param[in]  id QString [required]
    */
    virtual void moveVersion(const QString &id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void notify(const QString &issue_id_or_key);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void partialUpdateProjectRole(const qint64 &id);


    virtual void policyCheckCreateUser();


    virtual void policyCheckUpdateUser();


    virtual void processRequests();

    /**
    * @param[in]  key QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void put(const QString &key, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  if_match QString [optional]
    */
    virtual void putBulk(const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [optional]
    * @param[in]  index_comments bool [optional]
    * @param[in]  index_change_history bool [optional]
    * @param[in]  index_worklogs bool [optional]
    */
    virtual void reindex(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &index_comments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &index_change_history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &index_worklogs = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  issue_id QString [optional]
    * @param[in]  index_comments bool [optional]
    * @param[in]  index_change_history bool [optional]
    * @param[in]  index_worklogs bool [optional]
    */
    virtual void reindexIssues(const ::OpenAPI::OptionalParam<QString> &issue_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &index_comments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &index_change_history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &index_worklogs = ::OpenAPI::OptionalParam<bool>());


    virtual void release();

    /**
    * @param[in]  id QString [required]
    */
    virtual void removeAttachment(const QString &id);

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    * @param[in]  id QString [required]
    */
    virtual void removeField(const qint64 &screen_id, const qint64 &tab_id, const QString &id);

    /**
    * @param[in]  groupname QString [optional]
    * @param[in]  swap_group QString [optional]
    */
    virtual void removeGroup(const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &swap_group = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [optional]
    */
    virtual void removePreference(const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void removeProjectCategory(const qint64 &id);

    /**
    * @param[in]  username QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void removeUser(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [optional]
    * @param[in]  application_key QString [optional]
    */
    virtual void removeUserFromApplication(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  groupname QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void removeUserFromGroup(const ::OpenAPI::OptionalParam<QString> &groupname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void removeVote(const QString &issue_id_or_key);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  username QString [optional]
    */
    virtual void removeWatcher(const QString &issue_id_or_key, const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  screen_id qint64 [required]
    * @param[in]  tab_id qint64 [required]
    */
    virtual void renameTab(const qint64 &screen_id, const qint64 &tab_id);


    virtual void runUpgradesNow();

    /**
    * @param[in]  jql QString [optional]
    * @param[in]  start_at qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  validate_query bool [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void search(const ::OpenAPI::OptionalParam<QString> &jql = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_at = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &validate_query = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());


    virtual void searchUsingSearchRequest();

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void setActors(const QString &project_id_or_key, const qint64 &id);


    virtual void setBaseURL();


    virtual void setDefaultShareScope();

    /**
    * @param[in]  issue_type QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void setDraftIssueType(const QString &issue_type, const qint64 &id);


    virtual void setIssueNavigatorDefaultColumns();

    /**
    * @param[in]  issue_type QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void setIssueType(const QString &issue_type, const qint64 &id);

    /**
    * @param[in]  key QString [optional]
    */
    virtual void setPreference(const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setPropertyViaRestfulTable(const QString &id);


    virtual void setReadyToUpgrade();

    /**
    * @param[in]  permission_scheme_id qint64 [required]
    * @param[in]  key QString [required]
    */
    virtual void setSchemeAttribute(const qint64 &permission_scheme_id, const QString &key);


    virtual void start();


    virtual void stop();

    /**
    * @param[in]  type QString [required]
    * @param[in]  filename QString [optional]
    * @param[in]  size qint64 [optional]
    */
    virtual void storeTemporaryAvatar(const QString &type, const ::OpenAPI::OptionalParam<QString> &filename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &size = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void update(const qint64 &id);

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void updateComment(const QString &issue_id_or_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void updateComponent(const QString &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void updateDefault(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void updateDraft(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void updateDraftDefault(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [optional]
    */
    virtual void updateDraftWorkflowMapping(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_link_type_id QString [required]
    */
    virtual void updateIssueLinkType(const QString &issue_link_type_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void updateIssueType(const QString &id);

    /**
    * @param[in]  scheme_id qint64 [required]
    * @param[in]  expand QString [optional]
    */
    virtual void updatePermissionScheme(const qint64 &scheme_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void updateProject(const QString &project_id_or_key, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void updateProjectCategory(const qint64 &id);

    /**
    * @param[in]  project_id_or_key QString [required]
    * @param[in]  new_project_type_key QString [required]
    */
    virtual void updateProjectType(const QString &project_id_or_key, const QString &new_project_type_key);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  key QString [optional]
    * @param[in]  workflow_name QString [optional]
    * @param[in]  workflow_mode QString [optional]
    */
    virtual void updateProperty(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_mode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  link_id QString [required]
    * @param[in]  issue_id_or_key QString [required]
    */
    virtual void updateRemoteIssueLink(const QString &link_id, const QString &issue_id_or_key);

    /**
    * @param[in]  id QString [required]
    */
    virtual void updateVersion(const QString &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  workflow_name QString [optional]
    */
    virtual void updateWorkflowMapping(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id_or_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  adjust_estimate QString [optional]
    * @param[in]  new_estimate QString [optional]
    */
    virtual void updateWorklog(const QString &issue_id_or_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &adjust_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_estimate = ::OpenAPI::OptionalParam<QString>());


    virtual void validate();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acknowledgeErrorsCallback(OAIHttpRequestWorker *worker);
    void addActorUsersCallback(OAIHttpRequestWorker *worker);
    void addAttachmentCallback(OAIHttpRequestWorker *worker);
    void addCommentCallback(OAIHttpRequestWorker *worker);
    void addFieldCallback(OAIHttpRequestWorker *worker);
    void addFieldToDefaultScreenCallback(OAIHttpRequestWorker *worker);
    void addProjectRoleActorsToRoleCallback(OAIHttpRequestWorker *worker);
    void addRecordCallback(OAIHttpRequestWorker *worker);
    void addSharePermissionCallback(OAIHttpRequestWorker *worker);
    void addTabCallback(OAIHttpRequestWorker *worker);
    void addUserToApplicationCallback(OAIHttpRequestWorker *worker);
    void addUserToGroupCallback(OAIHttpRequestWorker *worker);
    void addVoteCallback(OAIHttpRequestWorker *worker);
    void addWatcherCallback(OAIHttpRequestWorker *worker);
    void addWorklogCallback(OAIHttpRequestWorker *worker);
    void api2ApplicationPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void api2AvatarTypeTemporaryCropPostCallback(OAIHttpRequestWorker *worker);
    void api2CommentCommentIdPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void api2CommentCommentIdPropertiesPropertyKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void api2CommentCommentIdPropertiesPropertyKeyGetCallback(OAIHttpRequestWorker *worker);
    void api2CommentCommentIdPropertiesPropertyKeyPutCallback(OAIHttpRequestWorker *worker);
    void api2ComponentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void api2DashboardDashboardIdItemsItemIdPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetCallback(OAIHttpRequestWorker *worker);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutCallback(OAIHttpRequestWorker *worker);
    void api2FilterIdColumnsDeleteCallback(OAIHttpRequestWorker *worker);
    void api2FilterIdColumnsGetCallback(OAIHttpRequestWorker *worker);
    void api2FilterIdColumnsPutCallback(OAIHttpRequestWorker *worker);
    void api2IssueIssueIdOrKeyPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyGetCallback(OAIHttpRequestWorker *worker);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyPutCallback(OAIHttpRequestWorker *worker);
    void api2IssuesecurityschemesIdGetCallback(OAIHttpRequestWorker *worker);
    void api2IssuetypeIdAvatarPostCallback(OAIHttpRequestWorker *worker);
    void api2IssuetypeIdAvatarTemporaryPostCallback(OAIHttpRequestWorker *worker);
    void api2IssuetypeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void api2IssuetypeIdGetCallback(OAIHttpRequestWorker *worker);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetCallback(OAIHttpRequestWorker *worker);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutCallback(OAIHttpRequestWorker *worker);
    void api2MyselfGetCallback(OAIHttpRequestWorker *worker);
    void api2MyselfPutCallback(OAIHttpRequestWorker *worker);
    void api2NotificationschemeIdGetCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarIdDeleteCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarPostCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarPutCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarTemporaryPostCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarsGetCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyGetCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyRoleGetCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetCallback(OAIHttpRequestWorker *worker);
    void api2ProjectProjectKeyOrIdNotificationschemeGetCallback(OAIHttpRequestWorker *worker);
    void api2ProjectvalidateKeyGetCallback(OAIHttpRequestWorker *worker);
    void api2RoleGetCallback(OAIHttpRequestWorker *worker);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteCallback(OAIHttpRequestWorker *worker);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostCallback(OAIHttpRequestWorker *worker);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostCallback(OAIHttpRequestWorker *worker);
    void api2UserAvatarIdDeleteCallback(OAIHttpRequestWorker *worker);
    void api2UserAvatarPostCallback(OAIHttpRequestWorker *worker);
    void api2UserAvatarPutCallback(OAIHttpRequestWorker *worker);
    void api2UserAvatarTemporaryPostCallback(OAIHttpRequestWorker *worker);
    void api2UserAvatarsGetCallback(OAIHttpRequestWorker *worker);
    void api2UserColumnsDeleteCallback(OAIHttpRequestWorker *worker);
    void api2UserColumnsGetCallback(OAIHttpRequestWorker *worker);
    void api2UserColumnsPutCallback(OAIHttpRequestWorker *worker);
    void api2UserGetCallback(OAIHttpRequestWorker *worker);
    void api2UserPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void api2UserPropertiesPropertyKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void api2UserPropertiesPropertyKeyGetCallback(OAIHttpRequestWorker *worker);
    void api2UserPropertiesPropertyKeyPutCallback(OAIHttpRequestWorker *worker);
    void api2UserPutCallback(OAIHttpRequestWorker *worker);
    void api2VersionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void api2VersionIdRemoveAndSwapPostCallback(OAIHttpRequestWorker *worker);
    void api2VersionVersionIdRemotelinkGlobalIdPostCallback(OAIHttpRequestWorker *worker);
    void api2VersionVersionIdRemotelinkPostCallback(OAIHttpRequestWorker *worker);
    void api2WorkflowApi2TransitionsIdPropertiesDeleteCallback(OAIHttpRequestWorker *worker);
    void api2WorkflowschemeIdIssuetypeIssueTypeDeleteCallback(OAIHttpRequestWorker *worker);
    void api2WorkflowschemeIdIssuetypeIssueTypeGetCallback(OAIHttpRequestWorker *worker);
    void approveUpgradeCallback(OAIHttpRequestWorker *worker);
    void areMetricsExposedCallback(OAIHttpRequestWorker *worker);
    void assignCallback(OAIHttpRequestWorker *worker);
    void assignPermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void canMoveSubTaskCallback(OAIHttpRequestWorker *worker);
    void cancelUpgradeCallback(OAIHttpRequestWorker *worker);
    void changeMyPasswordCallback(OAIHttpRequestWorker *worker);
    void changeUserPasswordCallback(OAIHttpRequestWorker *worker);
    void createComponentCallback(OAIHttpRequestWorker *worker);
    void createCustomFieldCallback(OAIHttpRequestWorker *worker);
    void createDraftForParentCallback(OAIHttpRequestWorker *worker);
    void createFilterCallback(OAIHttpRequestWorker *worker);
    void createGroupCallback(OAIHttpRequestWorker *worker);
    void createIssueCallback(OAIHttpRequestWorker *worker);
    void createIssueLinkTypeCallback(OAIHttpRequestWorker *worker);
    void createIssueTypeCallback(OAIHttpRequestWorker *worker);
    void createIssuesCallback(OAIHttpRequestWorker *worker);
    void createOrUpdateRemoteIssueLinkCallback(OAIHttpRequestWorker *worker);
    void createPermissionGrantCallback(OAIHttpRequestWorker *worker);
    void createPermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void createProjectCallback(OAIHttpRequestWorker *worker);
    void createProjectCategoryCallback(OAIHttpRequestWorker *worker);
    void createProjectRoleCallback(OAIHttpRequestWorker *worker);
    void createPropertyCallback(OAIHttpRequestWorker *worker);
    void createSchemeCallback(OAIHttpRequestWorker *worker);
    void createUserCallback(OAIHttpRequestWorker *worker);
    void createVersionCallback(OAIHttpRequestWorker *worker);
    void currentUserCallback(OAIHttpRequestWorker *worker);
    void deleteActorCallback(OAIHttpRequestWorker *worker);
    void deleteCommentCallback(OAIHttpRequestWorker *worker);
    void deleteDefaultCallback(OAIHttpRequestWorker *worker);
    void deleteDraftByIdCallback(OAIHttpRequestWorker *worker);
    void deleteDraftDefaultCallback(OAIHttpRequestWorker *worker);
    void deleteDraftIssueTypeCallback(OAIHttpRequestWorker *worker);
    void deleteDraftWorkflowMappingCallback(OAIHttpRequestWorker *worker);
    void deleteFilterCallback(OAIHttpRequestWorker *worker);
    void deleteIssueCallback(OAIHttpRequestWorker *worker);
    void deleteIssueLinkCallback(OAIHttpRequestWorker *worker);
    void deleteIssueLinkTypeCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeEntityCallback(OAIHttpRequestWorker *worker);
    void deleteProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectRoleCallback(OAIHttpRequestWorker *worker);
    void deleteProjectRoleActorsFromRoleCallback(OAIHttpRequestWorker *worker);
    void deleteRemoteIssueLinkByGlobalIdCallback(OAIHttpRequestWorker *worker);
    void deleteRemoteIssueLinkByIdCallback(OAIHttpRequestWorker *worker);
    void deleteRemoteVersionLinkCallback(OAIHttpRequestWorker *worker);
    void deleteRemoteVersionLinksByVersionIdCallback(OAIHttpRequestWorker *worker);
    void deleteSchemeCallback(OAIHttpRequestWorker *worker);
    void deleteSharePermissionCallback(OAIHttpRequestWorker *worker);
    void deleteTabCallback(OAIHttpRequestWorker *worker);
    void deleteWorkflowMappingCallback(OAIHttpRequestWorker *worker);
    void deleteWorklogCallback(OAIHttpRequestWorker *worker);
    void doTransitionCallback(OAIHttpRequestWorker *worker);
    void editFilterCallback(OAIHttpRequestWorker *worker);
    void editIssueCallback(OAIHttpRequestWorker *worker);
    void expandForHumansCallback(OAIHttpRequestWorker *worker);
    void expandForMachinesCallback(OAIHttpRequestWorker *worker);
    void findAssignableUsersCallback(OAIHttpRequestWorker *worker);
    void findBulkAssignableUsersCallback(OAIHttpRequestWorker *worker);
    void findGroupsCallback(OAIHttpRequestWorker *worker);
    void findUsersCallback(OAIHttpRequestWorker *worker);
    void findUsersAndGroupsCallback(OAIHttpRequestWorker *worker);
    void findUsersForPickerCallback(OAIHttpRequestWorker *worker);
    void findUsersWithAllPermissionsCallback(OAIHttpRequestWorker *worker);
    void findUsersWithBrowsePermissionCallback(OAIHttpRequestWorker *worker);
    void fullyUpdateProjectRoleCallback(OAIHttpRequestWorker *worker);
    void getCallback(OAIHttpRequestWorker *worker);
    void getAccessibleProjectTypeByKeyCallback(OAIHttpRequestWorker *worker);
    void getAdvancedSettingsCallback(OAIHttpRequestWorker *worker);
    void getAllCallback(OAIHttpRequestWorker *worker);
    void getAllFieldsCallback(OAIHttpRequestWorker *worker);
    void getAllPermissionsCallback(OAIHttpRequestWorker *worker);
    void getAllProjectCategoriesCallback(OAIHttpRequestWorker *worker);
    void getAllProjectTypesCallback(OAIHttpRequestWorker *worker);
    void getAllProjectsCallback(OAIHttpRequestWorker *worker);
    void getAllStatusesCallback(OAIHttpRequestWorker *worker);
    void getAllSystemAvatarsCallback(OAIHttpRequestWorker *worker);
    void getAllTabsCallback(OAIHttpRequestWorker *worker);
    void getAllWorkflowsCallback(OAIHttpRequestWorker *worker);
    void getAlternativeIssueTypesCallback(OAIHttpRequestWorker *worker);
    void getAssignedPermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void getAttachmentCallback(OAIHttpRequestWorker *worker);
    void getAttachmentMetaCallback(OAIHttpRequestWorker *worker);
    void getAutoCompleteCallback(OAIHttpRequestWorker *worker);
    void getAvailableMetricsCallback(OAIHttpRequestWorker *worker);
    void getAvatarsCallback(OAIHttpRequestWorker *worker);
    void getByIdCallback(OAIHttpRequestWorker *worker);
    void getCommentCallback(OAIHttpRequestWorker *worker);
    void getCommentsCallback(OAIHttpRequestWorker *worker);
    void getComponentCallback(OAIHttpRequestWorker *worker);
    void getComponentRelatedIssuesCallback(OAIHttpRequestWorker *worker);
    void getConfigurationCallback(OAIHttpRequestWorker *worker);
    void getCreateIssueMetaCallback(OAIHttpRequestWorker *worker);
    void getCustomFieldOptionCallback(OAIHttpRequestWorker *worker);
    void getDashboardCallback(OAIHttpRequestWorker *worker);
    void getDefaultCallback(OAIHttpRequestWorker *worker);
    void getDefaultShareScopeCallback(OAIHttpRequestWorker *worker);
    void getDraftByIdCallback(OAIHttpRequestWorker *worker);
    void getDraftDefaultCallback(OAIHttpRequestWorker *worker);
    void getDraftIssueTypeCallback(OAIHttpRequestWorker *worker);
    void getDraftWorkflowCallback(OAIHttpRequestWorker *worker);
    void getEditIssueMetaCallback(OAIHttpRequestWorker *worker);
    void getFavouriteFiltersCallback(OAIHttpRequestWorker *worker);
    void getFieldAutoCompleteForQueryStringCallback(OAIHttpRequestWorker *worker);
    void getFieldsCallback(OAIHttpRequestWorker *worker);
    void getFieldsToAddCallback(OAIHttpRequestWorker *worker);
    void getFilterCallback(OAIHttpRequestWorker *worker);
    void getGroupCallback(OAIHttpRequestWorker *worker);
    void getIdsOfWorklogsDeletedSinceCallback(OAIHttpRequestWorker *worker);
    void getIdsOfWorklogsModifiedSinceCallback(OAIHttpRequestWorker *worker);
    void getIndexSummaryCallback(OAIHttpRequestWorker *worker);
    void getIssueCallback(OAIHttpRequestWorker *worker);
    void getIssueAllTypesCallback(OAIHttpRequestWorker *worker);
    void getIssueLinkCallback(OAIHttpRequestWorker *worker);
    void getIssueLinkTypeCallback(OAIHttpRequestWorker *worker);
    void getIssueLinkTypesCallback(OAIHttpRequestWorker *worker);
    void getIssueNavigatorDefaultColumnsCallback(OAIHttpRequestWorker *worker);
    void getIssuePickerResourceCallback(OAIHttpRequestWorker *worker);
    void getIssueSecuritySchemesCallback(OAIHttpRequestWorker *worker);
    void getIssueWatchersCallback(OAIHttpRequestWorker *worker);
    void getIssueWorklogCallback(OAIHttpRequestWorker *worker);
    void getIssuesecuritylevelCallback(OAIHttpRequestWorker *worker);
    void getNotificationSchemesCallback(OAIHttpRequestWorker *worker);
    void getPasswordPolicyCallback(OAIHttpRequestWorker *worker);
    void getPermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void getPermissionSchemeGrantCallback(OAIHttpRequestWorker *worker);
    void getPermissionSchemeGrantsCallback(OAIHttpRequestWorker *worker);
    void getPermissionSchemesCallback(OAIHttpRequestWorker *worker);
    void getPermissionsCallback(OAIHttpRequestWorker *worker);
    void getPreferenceCallback(OAIHttpRequestWorker *worker);
    void getPrioritiesCallback(OAIHttpRequestWorker *worker);
    void getPriorityCallback(OAIHttpRequestWorker *worker);
    void getProgressCallback(OAIHttpRequestWorker *worker);
    void getProgressBulkCallback(OAIHttpRequestWorker *worker);
    void getProjectCategoryByIdCallback(OAIHttpRequestWorker *worker);
    void getProjectComponentsCallback(OAIHttpRequestWorker *worker);
    void getProjectRoleCallback(OAIHttpRequestWorker *worker);
    void getProjectRoleActorsForRoleCallback(OAIHttpRequestWorker *worker);
    void getProjectRolesByIdCallback(OAIHttpRequestWorker *worker);
    void getProjectTypeByKeyCallback(OAIHttpRequestWorker *worker);
    void getProjectVersionsCallback(OAIHttpRequestWorker *worker);
    void getProjectVersionsPaginatedCallback(OAIHttpRequestWorker *worker);
    void getPropertiesCallback(OAIHttpRequestWorker *worker);
    void getPropertyKeysCallback(OAIHttpRequestWorker *worker);
    void getRecordsCallback(OAIHttpRequestWorker *worker);
    void getReindexInfoCallback(OAIHttpRequestWorker *worker);
    void getReindexProgressCallback(OAIHttpRequestWorker *worker);
    void getRemoteIssueLinkByIdCallback(OAIHttpRequestWorker *worker);
    void getRemoteIssueLinksCallback(OAIHttpRequestWorker *worker);
    void getRemoteVersionLinkCallback(OAIHttpRequestWorker *worker);
    void getRemoteVersionLinksCallback(OAIHttpRequestWorker *worker);
    void getRemoteVersionLinksByVersionIdCallback(OAIHttpRequestWorker *worker);
    void getResolutionCallback(OAIHttpRequestWorker *worker);
    void getResolutionsCallback(OAIHttpRequestWorker *worker);
    void getSchemeAttributeCallback(OAIHttpRequestWorker *worker);
    void getSecurityLevelsForProjectCallback(OAIHttpRequestWorker *worker);
    void getServerInfoCallback(OAIHttpRequestWorker *worker);
    void getSharePermissionCallback(OAIHttpRequestWorker *worker);
    void getSharePermissionsCallback(OAIHttpRequestWorker *worker);
    void getStateCallback(OAIHttpRequestWorker *worker);
    void getStatusCallback(OAIHttpRequestWorker *worker);
    void getStatusCategoriesCallback(OAIHttpRequestWorker *worker);
    void getStatusCategoryCallback(OAIHttpRequestWorker *worker);
    void getStatusesCallback(OAIHttpRequestWorker *worker);
    void getSubTasksCallback(OAIHttpRequestWorker *worker);
    void getTransitionsCallback(OAIHttpRequestWorker *worker);
    void getUpgradeResultCallback(OAIHttpRequestWorker *worker);
    void getUsersFromGroupCallback(OAIHttpRequestWorker *worker);
    void getVersionCallback(OAIHttpRequestWorker *worker);
    void getVersionRelatedIssuesCallback(OAIHttpRequestWorker *worker);
    void getVersionUnresolvedIssuesCallback(OAIHttpRequestWorker *worker);
    void getVotesCallback(OAIHttpRequestWorker *worker);
    void getWorkflowCallback(OAIHttpRequestWorker *worker);
    void getWorklogCallback(OAIHttpRequestWorker *worker);
    void getWorklogsForIdsCallback(OAIHttpRequestWorker *worker);
    void linkIssuesCallback(OAIHttpRequestWorker *worker);
    void listCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void logoutCallback(OAIHttpRequestWorker *worker);
    void mergeCallback(OAIHttpRequestWorker *worker);
    void moveFieldCallback(OAIHttpRequestWorker *worker);
    void moveSubTasksCallback(OAIHttpRequestWorker *worker);
    void moveTabCallback(OAIHttpRequestWorker *worker);
    void moveVersionCallback(OAIHttpRequestWorker *worker);
    void notifyCallback(OAIHttpRequestWorker *worker);
    void partialUpdateProjectRoleCallback(OAIHttpRequestWorker *worker);
    void policyCheckCreateUserCallback(OAIHttpRequestWorker *worker);
    void policyCheckUpdateUserCallback(OAIHttpRequestWorker *worker);
    void processRequestsCallback(OAIHttpRequestWorker *worker);
    void putCallback(OAIHttpRequestWorker *worker);
    void putBulkCallback(OAIHttpRequestWorker *worker);
    void reindexCallback(OAIHttpRequestWorker *worker);
    void reindexIssuesCallback(OAIHttpRequestWorker *worker);
    void releaseCallback(OAIHttpRequestWorker *worker);
    void removeAttachmentCallback(OAIHttpRequestWorker *worker);
    void removeFieldCallback(OAIHttpRequestWorker *worker);
    void removeGroupCallback(OAIHttpRequestWorker *worker);
    void removePreferenceCallback(OAIHttpRequestWorker *worker);
    void removeProjectCategoryCallback(OAIHttpRequestWorker *worker);
    void removeUserCallback(OAIHttpRequestWorker *worker);
    void removeUserFromApplicationCallback(OAIHttpRequestWorker *worker);
    void removeUserFromGroupCallback(OAIHttpRequestWorker *worker);
    void removeVoteCallback(OAIHttpRequestWorker *worker);
    void removeWatcherCallback(OAIHttpRequestWorker *worker);
    void renameTabCallback(OAIHttpRequestWorker *worker);
    void runUpgradesNowCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);
    void searchUsingSearchRequestCallback(OAIHttpRequestWorker *worker);
    void setActorsCallback(OAIHttpRequestWorker *worker);
    void setBaseURLCallback(OAIHttpRequestWorker *worker);
    void setDefaultShareScopeCallback(OAIHttpRequestWorker *worker);
    void setDraftIssueTypeCallback(OAIHttpRequestWorker *worker);
    void setIssueNavigatorDefaultColumnsCallback(OAIHttpRequestWorker *worker);
    void setIssueTypeCallback(OAIHttpRequestWorker *worker);
    void setPreferenceCallback(OAIHttpRequestWorker *worker);
    void setPropertyViaRestfulTableCallback(OAIHttpRequestWorker *worker);
    void setReadyToUpgradeCallback(OAIHttpRequestWorker *worker);
    void setSchemeAttributeCallback(OAIHttpRequestWorker *worker);
    void startCallback(OAIHttpRequestWorker *worker);
    void stopCallback(OAIHttpRequestWorker *worker);
    void storeTemporaryAvatarCallback(OAIHttpRequestWorker *worker);
    void updateCallback(OAIHttpRequestWorker *worker);
    void updateCommentCallback(OAIHttpRequestWorker *worker);
    void updateComponentCallback(OAIHttpRequestWorker *worker);
    void updateDefaultCallback(OAIHttpRequestWorker *worker);
    void updateDraftCallback(OAIHttpRequestWorker *worker);
    void updateDraftDefaultCallback(OAIHttpRequestWorker *worker);
    void updateDraftWorkflowMappingCallback(OAIHttpRequestWorker *worker);
    void updateIssueLinkTypeCallback(OAIHttpRequestWorker *worker);
    void updateIssueTypeCallback(OAIHttpRequestWorker *worker);
    void updatePermissionSchemeCallback(OAIHttpRequestWorker *worker);
    void updateProjectCallback(OAIHttpRequestWorker *worker);
    void updateProjectCategoryCallback(OAIHttpRequestWorker *worker);
    void updateProjectTypeCallback(OAIHttpRequestWorker *worker);
    void updatePropertyCallback(OAIHttpRequestWorker *worker);
    void updateRemoteIssueLinkCallback(OAIHttpRequestWorker *worker);
    void updateVersionCallback(OAIHttpRequestWorker *worker);
    void updateWorkflowMappingCallback(OAIHttpRequestWorker *worker);
    void updateWorklogCallback(OAIHttpRequestWorker *worker);
    void validateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acknowledgeErrorsSignal();
    void addActorUsersSignal();
    void addAttachmentSignal();
    void addCommentSignal();
    void addFieldSignal();
    void addFieldToDefaultScreenSignal();
    void addProjectRoleActorsToRoleSignal();
    void addRecordSignal();
    void addSharePermissionSignal();
    void addTabSignal();
    void addUserToApplicationSignal();
    void addUserToGroupSignal();
    void addVoteSignal();
    void addWatcherSignal();
    void addWorklogSignal();
    void api2ApplicationPropertiesGetSignal();
    void api2AvatarTypeTemporaryCropPostSignal();
    void api2CommentCommentIdPropertiesGetSignal();
    void api2CommentCommentIdPropertiesPropertyKeyDeleteSignal();
    void api2CommentCommentIdPropertiesPropertyKeyGetSignal();
    void api2CommentCommentIdPropertiesPropertyKeyPutSignal();
    void api2ComponentIdDeleteSignal();
    void api2DashboardDashboardIdItemsItemIdPropertiesGetSignal();
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteSignal();
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetSignal();
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutSignal();
    void api2FilterIdColumnsDeleteSignal();
    void api2FilterIdColumnsGetSignal();
    void api2FilterIdColumnsPutSignal();
    void api2IssueIssueIdOrKeyPropertiesGetSignal();
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteSignal();
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyGetSignal();
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyPutSignal();
    void api2IssuesecurityschemesIdGetSignal();
    void api2IssuetypeIdAvatarPostSignal();
    void api2IssuetypeIdAvatarTemporaryPostSignal();
    void api2IssuetypeIdDeleteSignal();
    void api2IssuetypeIdGetSignal();
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteSignal();
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetSignal();
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutSignal();
    void api2MyselfGetSignal();
    void api2MyselfPutSignal();
    void api2NotificationschemeIdGetSignal();
    void api2ProjectProjectIdOrKeyAvatarIdDeleteSignal();
    void api2ProjectProjectIdOrKeyAvatarPostSignal();
    void api2ProjectProjectIdOrKeyAvatarPutSignal();
    void api2ProjectProjectIdOrKeyAvatarTemporaryPostSignal();
    void api2ProjectProjectIdOrKeyAvatarsGetSignal();
    void api2ProjectProjectIdOrKeyGetSignal();
    void api2ProjectProjectIdOrKeyPropertiesGetSignal();
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteSignal();
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetSignal();
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutSignal();
    void api2ProjectProjectIdOrKeyRoleGetSignal();
    void api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetSignal();
    void api2ProjectProjectKeyOrIdNotificationschemeGetSignal();
    void api2ProjectvalidateKeyGetSignal();
    void api2RoleGetSignal();
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteSignal();
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostSignal();
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostSignal();
    void api2UserAvatarIdDeleteSignal();
    void api2UserAvatarPostSignal();
    void api2UserAvatarPutSignal();
    void api2UserAvatarTemporaryPostSignal();
    void api2UserAvatarsGetSignal();
    void api2UserColumnsDeleteSignal();
    void api2UserColumnsGetSignal();
    void api2UserColumnsPutSignal();
    void api2UserGetSignal();
    void api2UserPropertiesGetSignal();
    void api2UserPropertiesPropertyKeyDeleteSignal();
    void api2UserPropertiesPropertyKeyGetSignal();
    void api2UserPropertiesPropertyKeyPutSignal();
    void api2UserPutSignal();
    void api2VersionIdDeleteSignal();
    void api2VersionIdRemoveAndSwapPostSignal();
    void api2VersionVersionIdRemotelinkGlobalIdPostSignal();
    void api2VersionVersionIdRemotelinkPostSignal();
    void api2WorkflowApi2TransitionsIdPropertiesDeleteSignal();
    void api2WorkflowschemeIdIssuetypeIssueTypeDeleteSignal();
    void api2WorkflowschemeIdIssuetypeIssueTypeGetSignal();
    void approveUpgradeSignal();
    void areMetricsExposedSignal();
    void assignSignal();
    void assignPermissionSchemeSignal();
    void canMoveSubTaskSignal();
    void cancelUpgradeSignal();
    void changeMyPasswordSignal();
    void changeUserPasswordSignal();
    void createComponentSignal();
    void createCustomFieldSignal();
    void createDraftForParentSignal();
    void createFilterSignal();
    void createGroupSignal();
    void createIssueSignal();
    void createIssueLinkTypeSignal();
    void createIssueTypeSignal();
    void createIssuesSignal();
    void createOrUpdateRemoteIssueLinkSignal();
    void createPermissionGrantSignal();
    void createPermissionSchemeSignal();
    void createProjectSignal();
    void createProjectCategorySignal();
    void createProjectRoleSignal();
    void createPropertySignal();
    void createSchemeSignal();
    void createUserSignal();
    void createVersionSignal();
    void currentUserSignal();
    void deleteActorSignal();
    void deleteCommentSignal();
    void deleteDefaultSignal();
    void deleteDraftByIdSignal();
    void deleteDraftDefaultSignal();
    void deleteDraftIssueTypeSignal();
    void deleteDraftWorkflowMappingSignal();
    void deleteFilterSignal();
    void deleteIssueSignal();
    void deleteIssueLinkSignal();
    void deleteIssueLinkTypeSignal();
    void deletePermissionSchemeSignal();
    void deletePermissionSchemeEntitySignal();
    void deleteProjectSignal();
    void deleteProjectRoleSignal();
    void deleteProjectRoleActorsFromRoleSignal();
    void deleteRemoteIssueLinkByGlobalIdSignal();
    void deleteRemoteIssueLinkByIdSignal();
    void deleteRemoteVersionLinkSignal();
    void deleteRemoteVersionLinksByVersionIdSignal();
    void deleteSchemeSignal();
    void deleteSharePermissionSignal();
    void deleteTabSignal();
    void deleteWorkflowMappingSignal();
    void deleteWorklogSignal();
    void doTransitionSignal();
    void editFilterSignal();
    void editIssueSignal();
    void expandForHumansSignal();
    void expandForMachinesSignal();
    void findAssignableUsersSignal();
    void findBulkAssignableUsersSignal();
    void findGroupsSignal();
    void findUsersSignal();
    void findUsersAndGroupsSignal();
    void findUsersForPickerSignal();
    void findUsersWithAllPermissionsSignal();
    void findUsersWithBrowsePermissionSignal();
    void fullyUpdateProjectRoleSignal();
    void getSignal();
    void getAccessibleProjectTypeByKeySignal();
    void getAdvancedSettingsSignal();
    void getAllSignal();
    void getAllFieldsSignal();
    void getAllPermissionsSignal();
    void getAllProjectCategoriesSignal();
    void getAllProjectTypesSignal();
    void getAllProjectsSignal();
    void getAllStatusesSignal();
    void getAllSystemAvatarsSignal();
    void getAllTabsSignal();
    void getAllWorkflowsSignal();
    void getAlternativeIssueTypesSignal();
    void getAssignedPermissionSchemeSignal();
    void getAttachmentSignal();
    void getAttachmentMetaSignal();
    void getAutoCompleteSignal();
    void getAvailableMetricsSignal();
    void getAvatarsSignal();
    void getByIdSignal();
    void getCommentSignal();
    void getCommentsSignal();
    void getComponentSignal();
    void getComponentRelatedIssuesSignal();
    void getConfigurationSignal();
    void getCreateIssueMetaSignal();
    void getCustomFieldOptionSignal();
    void getDashboardSignal();
    void getDefaultSignal();
    void getDefaultShareScopeSignal();
    void getDraftByIdSignal();
    void getDraftDefaultSignal();
    void getDraftIssueTypeSignal();
    void getDraftWorkflowSignal();
    void getEditIssueMetaSignal();
    void getFavouriteFiltersSignal();
    void getFieldAutoCompleteForQueryStringSignal();
    void getFieldsSignal();
    void getFieldsToAddSignal();
    void getFilterSignal();
    void getGroupSignal();
    void getIdsOfWorklogsDeletedSinceSignal();
    void getIdsOfWorklogsModifiedSinceSignal();
    void getIndexSummarySignal();
    void getIssueSignal();
    void getIssueAllTypesSignal();
    void getIssueLinkSignal();
    void getIssueLinkTypeSignal();
    void getIssueLinkTypesSignal();
    void getIssueNavigatorDefaultColumnsSignal();
    void getIssuePickerResourceSignal();
    void getIssueSecuritySchemesSignal();
    void getIssueWatchersSignal();
    void getIssueWorklogSignal();
    void getIssuesecuritylevelSignal();
    void getNotificationSchemesSignal();
    void getPasswordPolicySignal();
    void getPermissionSchemeSignal();
    void getPermissionSchemeGrantSignal();
    void getPermissionSchemeGrantsSignal();
    void getPermissionSchemesSignal();
    void getPermissionsSignal();
    void getPreferenceSignal();
    void getPrioritiesSignal();
    void getPrioritySignal();
    void getProgressSignal();
    void getProgressBulkSignal();
    void getProjectCategoryByIdSignal();
    void getProjectComponentsSignal();
    void getProjectRoleSignal();
    void getProjectRoleActorsForRoleSignal();
    void getProjectRolesByIdSignal();
    void getProjectTypeByKeySignal();
    void getProjectVersionsSignal();
    void getProjectVersionsPaginatedSignal();
    void getPropertiesSignal();
    void getPropertyKeysSignal();
    void getRecordsSignal();
    void getReindexInfoSignal();
    void getReindexProgressSignal();
    void getRemoteIssueLinkByIdSignal();
    void getRemoteIssueLinksSignal();
    void getRemoteVersionLinkSignal();
    void getRemoteVersionLinksSignal();
    void getRemoteVersionLinksByVersionIdSignal();
    void getResolutionSignal();
    void getResolutionsSignal();
    void getSchemeAttributeSignal();
    void getSecurityLevelsForProjectSignal();
    void getServerInfoSignal();
    void getSharePermissionSignal();
    void getSharePermissionsSignal();
    void getStateSignal();
    void getStatusSignal();
    void getStatusCategoriesSignal();
    void getStatusCategorySignal();
    void getStatusesSignal();
    void getSubTasksSignal();
    void getTransitionsSignal();
    void getUpgradeResultSignal();
    void getUsersFromGroupSignal();
    void getVersionSignal();
    void getVersionRelatedIssuesSignal();
    void getVersionUnresolvedIssuesSignal();
    void getVotesSignal();
    void getWorkflowSignal();
    void getWorklogSignal();
    void getWorklogsForIdsSignal();
    void linkIssuesSignal();
    void listSignal();
    void loginSignal();
    void logoutSignal();
    void mergeSignal();
    void moveFieldSignal();
    void moveSubTasksSignal();
    void moveTabSignal();
    void moveVersionSignal();
    void notifySignal();
    void partialUpdateProjectRoleSignal();
    void policyCheckCreateUserSignal();
    void policyCheckUpdateUserSignal();
    void processRequestsSignal();
    void putSignal();
    void putBulkSignal();
    void reindexSignal();
    void reindexIssuesSignal();
    void releaseSignal();
    void removeAttachmentSignal();
    void removeFieldSignal();
    void removeGroupSignal();
    void removePreferenceSignal();
    void removeProjectCategorySignal();
    void removeUserSignal();
    void removeUserFromApplicationSignal();
    void removeUserFromGroupSignal();
    void removeVoteSignal();
    void removeWatcherSignal();
    void renameTabSignal();
    void runUpgradesNowSignal();
    void searchSignal();
    void searchUsingSearchRequestSignal();
    void setActorsSignal();
    void setBaseURLSignal();
    void setDefaultShareScopeSignal();
    void setDraftIssueTypeSignal();
    void setIssueNavigatorDefaultColumnsSignal();
    void setIssueTypeSignal();
    void setPreferenceSignal();
    void setPropertyViaRestfulTableSignal();
    void setReadyToUpgradeSignal();
    void setSchemeAttributeSignal();
    void startSignal();
    void stopSignal();
    void storeTemporaryAvatarSignal();
    void updateSignal();
    void updateCommentSignal();
    void updateComponentSignal();
    void updateDefaultSignal();
    void updateDraftSignal();
    void updateDraftDefaultSignal();
    void updateDraftWorkflowMappingSignal();
    void updateIssueLinkTypeSignal();
    void updateIssueTypeSignal();
    void updatePermissionSchemeSignal();
    void updateProjectSignal();
    void updateProjectCategorySignal();
    void updateProjectTypeSignal();
    void updatePropertySignal();
    void updateRemoteIssueLinkSignal();
    void updateVersionSignal();
    void updateWorkflowMappingSignal();
    void updateWorklogSignal();
    void validateSignal();


    void acknowledgeErrorsSignalFull(OAIHttpRequestWorker *worker);
    void addActorUsersSignalFull(OAIHttpRequestWorker *worker);
    void addAttachmentSignalFull(OAIHttpRequestWorker *worker);
    void addCommentSignalFull(OAIHttpRequestWorker *worker);
    void addFieldSignalFull(OAIHttpRequestWorker *worker);
    void addFieldToDefaultScreenSignalFull(OAIHttpRequestWorker *worker);
    void addProjectRoleActorsToRoleSignalFull(OAIHttpRequestWorker *worker);
    void addRecordSignalFull(OAIHttpRequestWorker *worker);
    void addSharePermissionSignalFull(OAIHttpRequestWorker *worker);
    void addTabSignalFull(OAIHttpRequestWorker *worker);
    void addUserToApplicationSignalFull(OAIHttpRequestWorker *worker);
    void addUserToGroupSignalFull(OAIHttpRequestWorker *worker);
    void addVoteSignalFull(OAIHttpRequestWorker *worker);
    void addWatcherSignalFull(OAIHttpRequestWorker *worker);
    void addWorklogSignalFull(OAIHttpRequestWorker *worker);
    void api2ApplicationPropertiesGetSignalFull(OAIHttpRequestWorker *worker);
    void api2AvatarTypeTemporaryCropPostSignalFull(OAIHttpRequestWorker *worker);
    void api2CommentCommentIdPropertiesGetSignalFull(OAIHttpRequestWorker *worker);
    void api2CommentCommentIdPropertiesPropertyKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2CommentCommentIdPropertiesPropertyKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void api2CommentCommentIdPropertiesPropertyKeyPutSignalFull(OAIHttpRequestWorker *worker);
    void api2ComponentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2DashboardDashboardIdItemsItemIdPropertiesGetSignalFull(OAIHttpRequestWorker *worker);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutSignalFull(OAIHttpRequestWorker *worker);
    void api2FilterIdColumnsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2FilterIdColumnsGetSignalFull(OAIHttpRequestWorker *worker);
    void api2FilterIdColumnsPutSignalFull(OAIHttpRequestWorker *worker);
    void api2IssueIssueIdOrKeyPropertiesGetSignalFull(OAIHttpRequestWorker *worker);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyPutSignalFull(OAIHttpRequestWorker *worker);
    void api2IssuesecurityschemesIdGetSignalFull(OAIHttpRequestWorker *worker);
    void api2IssuetypeIdAvatarPostSignalFull(OAIHttpRequestWorker *worker);
    void api2IssuetypeIdAvatarTemporaryPostSignalFull(OAIHttpRequestWorker *worker);
    void api2IssuetypeIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2IssuetypeIdGetSignalFull(OAIHttpRequestWorker *worker);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutSignalFull(OAIHttpRequestWorker *worker);
    void api2MyselfGetSignalFull(OAIHttpRequestWorker *worker);
    void api2MyselfPutSignalFull(OAIHttpRequestWorker *worker);
    void api2NotificationschemeIdGetSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarPostSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarPutSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarTemporaryPostSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyAvatarsGetSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyPropertiesGetSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectIdOrKeyRoleGetSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectProjectKeyOrIdNotificationschemeGetSignalFull(OAIHttpRequestWorker *worker);
    void api2ProjectvalidateKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void api2RoleGetSignalFull(OAIHttpRequestWorker *worker);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostSignalFull(OAIHttpRequestWorker *worker);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostSignalFull(OAIHttpRequestWorker *worker);
    void api2UserAvatarIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2UserAvatarPostSignalFull(OAIHttpRequestWorker *worker);
    void api2UserAvatarPutSignalFull(OAIHttpRequestWorker *worker);
    void api2UserAvatarTemporaryPostSignalFull(OAIHttpRequestWorker *worker);
    void api2UserAvatarsGetSignalFull(OAIHttpRequestWorker *worker);
    void api2UserColumnsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2UserColumnsGetSignalFull(OAIHttpRequestWorker *worker);
    void api2UserColumnsPutSignalFull(OAIHttpRequestWorker *worker);
    void api2UserGetSignalFull(OAIHttpRequestWorker *worker);
    void api2UserPropertiesGetSignalFull(OAIHttpRequestWorker *worker);
    void api2UserPropertiesPropertyKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2UserPropertiesPropertyKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void api2UserPropertiesPropertyKeyPutSignalFull(OAIHttpRequestWorker *worker);
    void api2UserPutSignalFull(OAIHttpRequestWorker *worker);
    void api2VersionIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2VersionIdRemoveAndSwapPostSignalFull(OAIHttpRequestWorker *worker);
    void api2VersionVersionIdRemotelinkGlobalIdPostSignalFull(OAIHttpRequestWorker *worker);
    void api2VersionVersionIdRemotelinkPostSignalFull(OAIHttpRequestWorker *worker);
    void api2WorkflowApi2TransitionsIdPropertiesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2WorkflowschemeIdIssuetypeIssueTypeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void api2WorkflowschemeIdIssuetypeIssueTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void approveUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void areMetricsExposedSignalFull(OAIHttpRequestWorker *worker);
    void assignSignalFull(OAIHttpRequestWorker *worker);
    void assignPermissionSchemeSignalFull(OAIHttpRequestWorker *worker);
    void canMoveSubTaskSignalFull(OAIHttpRequestWorker *worker);
    void cancelUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void changeMyPasswordSignalFull(OAIHttpRequestWorker *worker);
    void changeUserPasswordSignalFull(OAIHttpRequestWorker *worker);
    void createComponentSignalFull(OAIHttpRequestWorker *worker);
    void createCustomFieldSignalFull(OAIHttpRequestWorker *worker);
    void createDraftForParentSignalFull(OAIHttpRequestWorker *worker);
    void createFilterSignalFull(OAIHttpRequestWorker *worker);
    void createGroupSignalFull(OAIHttpRequestWorker *worker);
    void createIssueSignalFull(OAIHttpRequestWorker *worker);
    void createIssueLinkTypeSignalFull(OAIHttpRequestWorker *worker);
    void createIssueTypeSignalFull(OAIHttpRequestWorker *worker);
    void createIssuesSignalFull(OAIHttpRequestWorker *worker);
    void createOrUpdateRemoteIssueLinkSignalFull(OAIHttpRequestWorker *worker);
    void createPermissionGrantSignalFull(OAIHttpRequestWorker *worker);
    void createPermissionSchemeSignalFull(OAIHttpRequestWorker *worker);
    void createProjectSignalFull(OAIHttpRequestWorker *worker);
    void createProjectCategorySignalFull(OAIHttpRequestWorker *worker);
    void createProjectRoleSignalFull(OAIHttpRequestWorker *worker);
    void createPropertySignalFull(OAIHttpRequestWorker *worker);
    void createSchemeSignalFull(OAIHttpRequestWorker *worker);
    void createUserSignalFull(OAIHttpRequestWorker *worker);
    void createVersionSignalFull(OAIHttpRequestWorker *worker);
    void currentUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteActorSignalFull(OAIHttpRequestWorker *worker);
    void deleteCommentSignalFull(OAIHttpRequestWorker *worker);
    void deleteDefaultSignalFull(OAIHttpRequestWorker *worker);
    void deleteDraftByIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteDraftDefaultSignalFull(OAIHttpRequestWorker *worker);
    void deleteDraftIssueTypeSignalFull(OAIHttpRequestWorker *worker);
    void deleteDraftWorkflowMappingSignalFull(OAIHttpRequestWorker *worker);
    void deleteFilterSignalFull(OAIHttpRequestWorker *worker);
    void deleteIssueSignalFull(OAIHttpRequestWorker *worker);
    void deleteIssueLinkSignalFull(OAIHttpRequestWorker *worker);
    void deleteIssueLinkTypeSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeEntitySignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectSignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectRoleSignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectRoleActorsFromRoleSignalFull(OAIHttpRequestWorker *worker);
    void deleteRemoteIssueLinkByGlobalIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteRemoteIssueLinkByIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteRemoteVersionLinkSignalFull(OAIHttpRequestWorker *worker);
    void deleteRemoteVersionLinksByVersionIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSchemeSignalFull(OAIHttpRequestWorker *worker);
    void deleteSharePermissionSignalFull(OAIHttpRequestWorker *worker);
    void deleteTabSignalFull(OAIHttpRequestWorker *worker);
    void deleteWorkflowMappingSignalFull(OAIHttpRequestWorker *worker);
    void deleteWorklogSignalFull(OAIHttpRequestWorker *worker);
    void doTransitionSignalFull(OAIHttpRequestWorker *worker);
    void editFilterSignalFull(OAIHttpRequestWorker *worker);
    void editIssueSignalFull(OAIHttpRequestWorker *worker);
    void expandForHumansSignalFull(OAIHttpRequestWorker *worker);
    void expandForMachinesSignalFull(OAIHttpRequestWorker *worker);
    void findAssignableUsersSignalFull(OAIHttpRequestWorker *worker);
    void findBulkAssignableUsersSignalFull(OAIHttpRequestWorker *worker);
    void findGroupsSignalFull(OAIHttpRequestWorker *worker);
    void findUsersSignalFull(OAIHttpRequestWorker *worker);
    void findUsersAndGroupsSignalFull(OAIHttpRequestWorker *worker);
    void findUsersForPickerSignalFull(OAIHttpRequestWorker *worker);
    void findUsersWithAllPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void findUsersWithBrowsePermissionSignalFull(OAIHttpRequestWorker *worker);
    void fullyUpdateProjectRoleSignalFull(OAIHttpRequestWorker *worker);
    void getSignalFull(OAIHttpRequestWorker *worker);
    void getAccessibleProjectTypeByKeySignalFull(OAIHttpRequestWorker *worker);
    void getAdvancedSettingsSignalFull(OAIHttpRequestWorker *worker);
    void getAllSignalFull(OAIHttpRequestWorker *worker);
    void getAllFieldsSignalFull(OAIHttpRequestWorker *worker);
    void getAllPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void getAllProjectCategoriesSignalFull(OAIHttpRequestWorker *worker);
    void getAllProjectTypesSignalFull(OAIHttpRequestWorker *worker);
    void getAllProjectsSignalFull(OAIHttpRequestWorker *worker);
    void getAllStatusesSignalFull(OAIHttpRequestWorker *worker);
    void getAllSystemAvatarsSignalFull(OAIHttpRequestWorker *worker);
    void getAllTabsSignalFull(OAIHttpRequestWorker *worker);
    void getAllWorkflowsSignalFull(OAIHttpRequestWorker *worker);
    void getAlternativeIssueTypesSignalFull(OAIHttpRequestWorker *worker);
    void getAssignedPermissionSchemeSignalFull(OAIHttpRequestWorker *worker);
    void getAttachmentSignalFull(OAIHttpRequestWorker *worker);
    void getAttachmentMetaSignalFull(OAIHttpRequestWorker *worker);
    void getAutoCompleteSignalFull(OAIHttpRequestWorker *worker);
    void getAvailableMetricsSignalFull(OAIHttpRequestWorker *worker);
    void getAvatarsSignalFull(OAIHttpRequestWorker *worker);
    void getByIdSignalFull(OAIHttpRequestWorker *worker);
    void getCommentSignalFull(OAIHttpRequestWorker *worker);
    void getCommentsSignalFull(OAIHttpRequestWorker *worker);
    void getComponentSignalFull(OAIHttpRequestWorker *worker);
    void getComponentRelatedIssuesSignalFull(OAIHttpRequestWorker *worker);
    void getConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void getCreateIssueMetaSignalFull(OAIHttpRequestWorker *worker);
    void getCustomFieldOptionSignalFull(OAIHttpRequestWorker *worker);
    void getDashboardSignalFull(OAIHttpRequestWorker *worker);
    void getDefaultSignalFull(OAIHttpRequestWorker *worker);
    void getDefaultShareScopeSignalFull(OAIHttpRequestWorker *worker);
    void getDraftByIdSignalFull(OAIHttpRequestWorker *worker);
    void getDraftDefaultSignalFull(OAIHttpRequestWorker *worker);
    void getDraftIssueTypeSignalFull(OAIHttpRequestWorker *worker);
    void getDraftWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void getEditIssueMetaSignalFull(OAIHttpRequestWorker *worker);
    void getFavouriteFiltersSignalFull(OAIHttpRequestWorker *worker);
    void getFieldAutoCompleteForQueryStringSignalFull(OAIHttpRequestWorker *worker);
    void getFieldsSignalFull(OAIHttpRequestWorker *worker);
    void getFieldsToAddSignalFull(OAIHttpRequestWorker *worker);
    void getFilterSignalFull(OAIHttpRequestWorker *worker);
    void getGroupSignalFull(OAIHttpRequestWorker *worker);
    void getIdsOfWorklogsDeletedSinceSignalFull(OAIHttpRequestWorker *worker);
    void getIdsOfWorklogsModifiedSinceSignalFull(OAIHttpRequestWorker *worker);
    void getIndexSummarySignalFull(OAIHttpRequestWorker *worker);
    void getIssueSignalFull(OAIHttpRequestWorker *worker);
    void getIssueAllTypesSignalFull(OAIHttpRequestWorker *worker);
    void getIssueLinkSignalFull(OAIHttpRequestWorker *worker);
    void getIssueLinkTypeSignalFull(OAIHttpRequestWorker *worker);
    void getIssueLinkTypesSignalFull(OAIHttpRequestWorker *worker);
    void getIssueNavigatorDefaultColumnsSignalFull(OAIHttpRequestWorker *worker);
    void getIssuePickerResourceSignalFull(OAIHttpRequestWorker *worker);
    void getIssueSecuritySchemesSignalFull(OAIHttpRequestWorker *worker);
    void getIssueWatchersSignalFull(OAIHttpRequestWorker *worker);
    void getIssueWorklogSignalFull(OAIHttpRequestWorker *worker);
    void getIssuesecuritylevelSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationSchemesSignalFull(OAIHttpRequestWorker *worker);
    void getPasswordPolicySignalFull(OAIHttpRequestWorker *worker);
    void getPermissionSchemeSignalFull(OAIHttpRequestWorker *worker);
    void getPermissionSchemeGrantSignalFull(OAIHttpRequestWorker *worker);
    void getPermissionSchemeGrantsSignalFull(OAIHttpRequestWorker *worker);
    void getPermissionSchemesSignalFull(OAIHttpRequestWorker *worker);
    void getPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void getPreferenceSignalFull(OAIHttpRequestWorker *worker);
    void getPrioritiesSignalFull(OAIHttpRequestWorker *worker);
    void getPrioritySignalFull(OAIHttpRequestWorker *worker);
    void getProgressSignalFull(OAIHttpRequestWorker *worker);
    void getProgressBulkSignalFull(OAIHttpRequestWorker *worker);
    void getProjectCategoryByIdSignalFull(OAIHttpRequestWorker *worker);
    void getProjectComponentsSignalFull(OAIHttpRequestWorker *worker);
    void getProjectRoleSignalFull(OAIHttpRequestWorker *worker);
    void getProjectRoleActorsForRoleSignalFull(OAIHttpRequestWorker *worker);
    void getProjectRolesByIdSignalFull(OAIHttpRequestWorker *worker);
    void getProjectTypeByKeySignalFull(OAIHttpRequestWorker *worker);
    void getProjectVersionsSignalFull(OAIHttpRequestWorker *worker);
    void getProjectVersionsPaginatedSignalFull(OAIHttpRequestWorker *worker);
    void getPropertiesSignalFull(OAIHttpRequestWorker *worker);
    void getPropertyKeysSignalFull(OAIHttpRequestWorker *worker);
    void getRecordsSignalFull(OAIHttpRequestWorker *worker);
    void getReindexInfoSignalFull(OAIHttpRequestWorker *worker);
    void getReindexProgressSignalFull(OAIHttpRequestWorker *worker);
    void getRemoteIssueLinkByIdSignalFull(OAIHttpRequestWorker *worker);
    void getRemoteIssueLinksSignalFull(OAIHttpRequestWorker *worker);
    void getRemoteVersionLinkSignalFull(OAIHttpRequestWorker *worker);
    void getRemoteVersionLinksSignalFull(OAIHttpRequestWorker *worker);
    void getRemoteVersionLinksByVersionIdSignalFull(OAIHttpRequestWorker *worker);
    void getResolutionSignalFull(OAIHttpRequestWorker *worker);
    void getResolutionsSignalFull(OAIHttpRequestWorker *worker);
    void getSchemeAttributeSignalFull(OAIHttpRequestWorker *worker);
    void getSecurityLevelsForProjectSignalFull(OAIHttpRequestWorker *worker);
    void getServerInfoSignalFull(OAIHttpRequestWorker *worker);
    void getSharePermissionSignalFull(OAIHttpRequestWorker *worker);
    void getSharePermissionsSignalFull(OAIHttpRequestWorker *worker);
    void getStateSignalFull(OAIHttpRequestWorker *worker);
    void getStatusSignalFull(OAIHttpRequestWorker *worker);
    void getStatusCategoriesSignalFull(OAIHttpRequestWorker *worker);
    void getStatusCategorySignalFull(OAIHttpRequestWorker *worker);
    void getStatusesSignalFull(OAIHttpRequestWorker *worker);
    void getSubTasksSignalFull(OAIHttpRequestWorker *worker);
    void getTransitionsSignalFull(OAIHttpRequestWorker *worker);
    void getUpgradeResultSignalFull(OAIHttpRequestWorker *worker);
    void getUsersFromGroupSignalFull(OAIHttpRequestWorker *worker);
    void getVersionSignalFull(OAIHttpRequestWorker *worker);
    void getVersionRelatedIssuesSignalFull(OAIHttpRequestWorker *worker);
    void getVersionUnresolvedIssuesSignalFull(OAIHttpRequestWorker *worker);
    void getVotesSignalFull(OAIHttpRequestWorker *worker);
    void getWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void getWorklogSignalFull(OAIHttpRequestWorker *worker);
    void getWorklogsForIdsSignalFull(OAIHttpRequestWorker *worker);
    void linkIssuesSignalFull(OAIHttpRequestWorker *worker);
    void listSignalFull(OAIHttpRequestWorker *worker);
    void loginSignalFull(OAIHttpRequestWorker *worker);
    void logoutSignalFull(OAIHttpRequestWorker *worker);
    void mergeSignalFull(OAIHttpRequestWorker *worker);
    void moveFieldSignalFull(OAIHttpRequestWorker *worker);
    void moveSubTasksSignalFull(OAIHttpRequestWorker *worker);
    void moveTabSignalFull(OAIHttpRequestWorker *worker);
    void moveVersionSignalFull(OAIHttpRequestWorker *worker);
    void notifySignalFull(OAIHttpRequestWorker *worker);
    void partialUpdateProjectRoleSignalFull(OAIHttpRequestWorker *worker);
    void policyCheckCreateUserSignalFull(OAIHttpRequestWorker *worker);
    void policyCheckUpdateUserSignalFull(OAIHttpRequestWorker *worker);
    void processRequestsSignalFull(OAIHttpRequestWorker *worker);
    void putSignalFull(OAIHttpRequestWorker *worker);
    void putBulkSignalFull(OAIHttpRequestWorker *worker);
    void reindexSignalFull(OAIHttpRequestWorker *worker);
    void reindexIssuesSignalFull(OAIHttpRequestWorker *worker);
    void releaseSignalFull(OAIHttpRequestWorker *worker);
    void removeAttachmentSignalFull(OAIHttpRequestWorker *worker);
    void removeFieldSignalFull(OAIHttpRequestWorker *worker);
    void removeGroupSignalFull(OAIHttpRequestWorker *worker);
    void removePreferenceSignalFull(OAIHttpRequestWorker *worker);
    void removeProjectCategorySignalFull(OAIHttpRequestWorker *worker);
    void removeUserSignalFull(OAIHttpRequestWorker *worker);
    void removeUserFromApplicationSignalFull(OAIHttpRequestWorker *worker);
    void removeUserFromGroupSignalFull(OAIHttpRequestWorker *worker);
    void removeVoteSignalFull(OAIHttpRequestWorker *worker);
    void removeWatcherSignalFull(OAIHttpRequestWorker *worker);
    void renameTabSignalFull(OAIHttpRequestWorker *worker);
    void runUpgradesNowSignalFull(OAIHttpRequestWorker *worker);
    void searchSignalFull(OAIHttpRequestWorker *worker);
    void searchUsingSearchRequestSignalFull(OAIHttpRequestWorker *worker);
    void setActorsSignalFull(OAIHttpRequestWorker *worker);
    void setBaseURLSignalFull(OAIHttpRequestWorker *worker);
    void setDefaultShareScopeSignalFull(OAIHttpRequestWorker *worker);
    void setDraftIssueTypeSignalFull(OAIHttpRequestWorker *worker);
    void setIssueNavigatorDefaultColumnsSignalFull(OAIHttpRequestWorker *worker);
    void setIssueTypeSignalFull(OAIHttpRequestWorker *worker);
    void setPreferenceSignalFull(OAIHttpRequestWorker *worker);
    void setPropertyViaRestfulTableSignalFull(OAIHttpRequestWorker *worker);
    void setReadyToUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void setSchemeAttributeSignalFull(OAIHttpRequestWorker *worker);
    void startSignalFull(OAIHttpRequestWorker *worker);
    void stopSignalFull(OAIHttpRequestWorker *worker);
    void storeTemporaryAvatarSignalFull(OAIHttpRequestWorker *worker);
    void updateSignalFull(OAIHttpRequestWorker *worker);
    void updateCommentSignalFull(OAIHttpRequestWorker *worker);
    void updateComponentSignalFull(OAIHttpRequestWorker *worker);
    void updateDefaultSignalFull(OAIHttpRequestWorker *worker);
    void updateDraftSignalFull(OAIHttpRequestWorker *worker);
    void updateDraftDefaultSignalFull(OAIHttpRequestWorker *worker);
    void updateDraftWorkflowMappingSignalFull(OAIHttpRequestWorker *worker);
    void updateIssueLinkTypeSignalFull(OAIHttpRequestWorker *worker);
    void updateIssueTypeSignalFull(OAIHttpRequestWorker *worker);
    void updatePermissionSchemeSignalFull(OAIHttpRequestWorker *worker);
    void updateProjectSignalFull(OAIHttpRequestWorker *worker);
    void updateProjectCategorySignalFull(OAIHttpRequestWorker *worker);
    void updateProjectTypeSignalFull(OAIHttpRequestWorker *worker);
    void updatePropertySignalFull(OAIHttpRequestWorker *worker);
    void updateRemoteIssueLinkSignalFull(OAIHttpRequestWorker *worker);
    void updateVersionSignalFull(OAIHttpRequestWorker *worker);
    void updateWorkflowMappingSignalFull(OAIHttpRequestWorker *worker);
    void updateWorklogSignalFull(OAIHttpRequestWorker *worker);
    void validateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use acknowledgeErrorsSignalError() instead")
    void acknowledgeErrorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void acknowledgeErrorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addActorUsersSignalError() instead")
    void addActorUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addActorUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAttachmentSignalError() instead")
    void addAttachmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addAttachmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCommentSignalError() instead")
    void addCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFieldSignalError() instead")
    void addFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFieldToDefaultScreenSignalError() instead")
    void addFieldToDefaultScreenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFieldToDefaultScreenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addProjectRoleActorsToRoleSignalError() instead")
    void addProjectRoleActorsToRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addProjectRoleActorsToRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRecordSignalError() instead")
    void addRecordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addRecordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addSharePermissionSignalError() instead")
    void addSharePermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addSharePermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTabSignalError() instead")
    void addTabSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addTabSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUserToApplicationSignalError() instead")
    void addUserToApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addUserToApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUserToGroupSignalError() instead")
    void addUserToGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addUserToGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVoteSignalError() instead")
    void addVoteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVoteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addWatcherSignalError() instead")
    void addWatcherSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addWatcherSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addWorklogSignalError() instead")
    void addWorklogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addWorklogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ApplicationPropertiesGetSignalError() instead")
    void api2ApplicationPropertiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ApplicationPropertiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2AvatarTypeTemporaryCropPostSignalError() instead")
    void api2AvatarTypeTemporaryCropPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2AvatarTypeTemporaryCropPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2CommentCommentIdPropertiesGetSignalError() instead")
    void api2CommentCommentIdPropertiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2CommentCommentIdPropertiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2CommentCommentIdPropertiesPropertyKeyDeleteSignalError() instead")
    void api2CommentCommentIdPropertiesPropertyKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2CommentCommentIdPropertiesPropertyKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2CommentCommentIdPropertiesPropertyKeyGetSignalError() instead")
    void api2CommentCommentIdPropertiesPropertyKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2CommentCommentIdPropertiesPropertyKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2CommentCommentIdPropertiesPropertyKeyPutSignalError() instead")
    void api2CommentCommentIdPropertiesPropertyKeyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2CommentCommentIdPropertiesPropertyKeyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ComponentIdDeleteSignalError() instead")
    void api2ComponentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ComponentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2DashboardDashboardIdItemsItemIdPropertiesGetSignalError() instead")
    void api2DashboardDashboardIdItemsItemIdPropertiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2DashboardDashboardIdItemsItemIdPropertiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteSignalError() instead")
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetSignalError() instead")
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutSignalError() instead")
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2FilterIdColumnsDeleteSignalError() instead")
    void api2FilterIdColumnsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2FilterIdColumnsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2FilterIdColumnsGetSignalError() instead")
    void api2FilterIdColumnsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2FilterIdColumnsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2FilterIdColumnsPutSignalError() instead")
    void api2FilterIdColumnsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2FilterIdColumnsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssueIssueIdOrKeyPropertiesGetSignalError() instead")
    void api2IssueIssueIdOrKeyPropertiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssueIssueIdOrKeyPropertiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteSignalError() instead")
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssueIssueIdOrKeyPropertiesPropertyKeyGetSignalError() instead")
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssueIssueIdOrKeyPropertiesPropertyKeyPutSignalError() instead")
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuesecurityschemesIdGetSignalError() instead")
    void api2IssuesecurityschemesIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuesecurityschemesIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIdAvatarPostSignalError() instead")
    void api2IssuetypeIdAvatarPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIdAvatarPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIdAvatarTemporaryPostSignalError() instead")
    void api2IssuetypeIdAvatarTemporaryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIdAvatarTemporaryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIdDeleteSignalError() instead")
    void api2IssuetypeIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIdGetSignalError() instead")
    void api2IssuetypeIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteSignalError() instead")
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetSignalError() instead")
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutSignalError() instead")
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2MyselfGetSignalError() instead")
    void api2MyselfGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2MyselfGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2MyselfPutSignalError() instead")
    void api2MyselfPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2MyselfPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2NotificationschemeIdGetSignalError() instead")
    void api2NotificationschemeIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2NotificationschemeIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarIdDeleteSignalError() instead")
    void api2ProjectProjectIdOrKeyAvatarIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarPostSignalError() instead")
    void api2ProjectProjectIdOrKeyAvatarPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarPutSignalError() instead")
    void api2ProjectProjectIdOrKeyAvatarPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarTemporaryPostSignalError() instead")
    void api2ProjectProjectIdOrKeyAvatarTemporaryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarTemporaryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarsGetSignalError() instead")
    void api2ProjectProjectIdOrKeyAvatarsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyGetSignalError() instead")
    void api2ProjectProjectIdOrKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyPropertiesGetSignalError() instead")
    void api2ProjectProjectIdOrKeyPropertiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyPropertiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteSignalError() instead")
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetSignalError() instead")
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutSignalError() instead")
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyRoleGetSignalError() instead")
    void api2ProjectProjectIdOrKeyRoleGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyRoleGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetSignalError() instead")
    void api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectKeyOrIdNotificationschemeGetSignalError() instead")
    void api2ProjectProjectKeyOrIdNotificationschemeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectKeyOrIdNotificationschemeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectvalidateKeyGetSignalError() instead")
    void api2ProjectvalidateKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectvalidateKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2RoleGetSignalError() instead")
    void api2RoleGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2RoleGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteSignalError() instead")
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostSignalError() instead")
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostSignalError() instead")
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarIdDeleteSignalError() instead")
    void api2UserAvatarIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarPostSignalError() instead")
    void api2UserAvatarPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarPutSignalError() instead")
    void api2UserAvatarPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarTemporaryPostSignalError() instead")
    void api2UserAvatarTemporaryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarTemporaryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarsGetSignalError() instead")
    void api2UserAvatarsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserColumnsDeleteSignalError() instead")
    void api2UserColumnsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserColumnsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserColumnsGetSignalError() instead")
    void api2UserColumnsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserColumnsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserColumnsPutSignalError() instead")
    void api2UserColumnsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserColumnsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserGetSignalError() instead")
    void api2UserGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPropertiesGetSignalError() instead")
    void api2UserPropertiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPropertiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPropertiesPropertyKeyDeleteSignalError() instead")
    void api2UserPropertiesPropertyKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPropertiesPropertyKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPropertiesPropertyKeyGetSignalError() instead")
    void api2UserPropertiesPropertyKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPropertiesPropertyKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPropertiesPropertyKeyPutSignalError() instead")
    void api2UserPropertiesPropertyKeyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPropertiesPropertyKeyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPutSignalError() instead")
    void api2UserPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2VersionIdDeleteSignalError() instead")
    void api2VersionIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2VersionIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2VersionIdRemoveAndSwapPostSignalError() instead")
    void api2VersionIdRemoveAndSwapPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2VersionIdRemoveAndSwapPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2VersionVersionIdRemotelinkGlobalIdPostSignalError() instead")
    void api2VersionVersionIdRemotelinkGlobalIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2VersionVersionIdRemotelinkGlobalIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2VersionVersionIdRemotelinkPostSignalError() instead")
    void api2VersionVersionIdRemotelinkPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2VersionVersionIdRemotelinkPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2WorkflowApi2TransitionsIdPropertiesDeleteSignalError() instead")
    void api2WorkflowApi2TransitionsIdPropertiesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2WorkflowApi2TransitionsIdPropertiesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2WorkflowschemeIdIssuetypeIssueTypeDeleteSignalError() instead")
    void api2WorkflowschemeIdIssuetypeIssueTypeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2WorkflowschemeIdIssuetypeIssueTypeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2WorkflowschemeIdIssuetypeIssueTypeGetSignalError() instead")
    void api2WorkflowschemeIdIssuetypeIssueTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void api2WorkflowschemeIdIssuetypeIssueTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveUpgradeSignalError() instead")
    void approveUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void approveUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use areMetricsExposedSignalError() instead")
    void areMetricsExposedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void areMetricsExposedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignSignalError() instead")
    void assignSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assignSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignPermissionSchemeSignalError() instead")
    void assignPermissionSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assignPermissionSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use canMoveSubTaskSignalError() instead")
    void canMoveSubTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void canMoveSubTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelUpgradeSignalError() instead")
    void cancelUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeMyPasswordSignalError() instead")
    void changeMyPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeMyPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeUserPasswordSignalError() instead")
    void changeUserPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeUserPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createComponentSignalError() instead")
    void createComponentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createComponentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomFieldSignalError() instead")
    void createCustomFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDraftForParentSignalError() instead")
    void createDraftForParentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createDraftForParentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFilterSignalError() instead")
    void createFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalError() instead")
    void createGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueSignalError() instead")
    void createIssueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueLinkTypeSignalError() instead")
    void createIssueLinkTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueLinkTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueTypeSignalError() instead")
    void createIssueTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssuesSignalError() instead")
    void createIssuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createIssuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrUpdateRemoteIssueLinkSignalError() instead")
    void createOrUpdateRemoteIssueLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateRemoteIssueLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPermissionGrantSignalError() instead")
    void createPermissionGrantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionGrantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPermissionSchemeSignalError() instead")
    void createPermissionSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalError() instead")
    void createProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectCategorySignalError() instead")
    void createProjectCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectRoleSignalError() instead")
    void createProjectRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPropertySignalError() instead")
    void createPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSchemeSignalError() instead")
    void createSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVersionSignalError() instead")
    void createVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentUserSignalError() instead")
    void currentUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void currentUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActorSignalError() instead")
    void deleteActorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCommentSignalError() instead")
    void deleteCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDefaultSignalError() instead")
    void deleteDefaultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDefaultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftByIdSignalError() instead")
    void deleteDraftByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftDefaultSignalError() instead")
    void deleteDraftDefaultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftDefaultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftIssueTypeSignalError() instead")
    void deleteDraftIssueTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftIssueTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftWorkflowMappingSignalError() instead")
    void deleteDraftWorkflowMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftWorkflowMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFilterSignalError() instead")
    void deleteFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueSignalError() instead")
    void deleteIssueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueLinkSignalError() instead")
    void deleteIssueLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueLinkTypeSignalError() instead")
    void deleteIssueLinkTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueLinkTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeSignalError() instead")
    void deletePermissionSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeEntitySignalError() instead")
    void deletePermissionSchemeEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalError() instead")
    void deleteProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectRoleSignalError() instead")
    void deleteProjectRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectRoleActorsFromRoleSignalError() instead")
    void deleteProjectRoleActorsFromRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectRoleActorsFromRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteIssueLinkByGlobalIdSignalError() instead")
    void deleteRemoteIssueLinkByGlobalIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteIssueLinkByGlobalIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteIssueLinkByIdSignalError() instead")
    void deleteRemoteIssueLinkByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteIssueLinkByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteVersionLinkSignalError() instead")
    void deleteRemoteVersionLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteVersionLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteVersionLinksByVersionIdSignalError() instead")
    void deleteRemoteVersionLinksByVersionIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteVersionLinksByVersionIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSchemeSignalError() instead")
    void deleteSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSharePermissionSignalError() instead")
    void deleteSharePermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSharePermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTabSignalError() instead")
    void deleteTabSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTabSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowMappingSignalError() instead")
    void deleteWorkflowMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorklogSignalError() instead")
    void deleteWorklogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorklogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doTransitionSignalError() instead")
    void doTransitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void doTransitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editFilterSignalError() instead")
    void editFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void editFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editIssueSignalError() instead")
    void editIssueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void editIssueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expandForHumansSignalError() instead")
    void expandForHumansSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expandForHumansSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expandForMachinesSignalError() instead")
    void expandForMachinesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expandForMachinesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findAssignableUsersSignalError() instead")
    void findAssignableUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findAssignableUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findBulkAssignableUsersSignalError() instead")
    void findBulkAssignableUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findBulkAssignableUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGroupsSignalError() instead")
    void findGroupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findGroupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersSignalError() instead")
    void findUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersAndGroupsSignalError() instead")
    void findUsersAndGroupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersAndGroupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersForPickerSignalError() instead")
    void findUsersForPickerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersForPickerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersWithAllPermissionsSignalError() instead")
    void findUsersWithAllPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersWithAllPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersWithBrowsePermissionSignalError() instead")
    void findUsersWithBrowsePermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersWithBrowsePermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fullyUpdateProjectRoleSignalError() instead")
    void fullyUpdateProjectRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fullyUpdateProjectRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignalError() instead")
    void getSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessibleProjectTypeByKeySignalError() instead")
    void getAccessibleProjectTypeByKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessibleProjectTypeByKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdvancedSettingsSignalError() instead")
    void getAdvancedSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSignalError() instead")
    void getAllSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllFieldsSignalError() instead")
    void getAllFieldsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllFieldsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionsSignalError() instead")
    void getAllPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectCategoriesSignalError() instead")
    void getAllProjectCategoriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectCategoriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectTypesSignalError() instead")
    void getAllProjectTypesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectTypesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectsSignalError() instead")
    void getAllProjectsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllStatusesSignalError() instead")
    void getAllStatusesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllStatusesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSystemAvatarsSignalError() instead")
    void getAllSystemAvatarsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSystemAvatarsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTabsSignalError() instead")
    void getAllTabsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTabsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWorkflowsSignalError() instead")
    void getAllWorkflowsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWorkflowsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlternativeIssueTypesSignalError() instead")
    void getAlternativeIssueTypesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAlternativeIssueTypesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssignedPermissionSchemeSignalError() instead")
    void getAssignedPermissionSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAssignedPermissionSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentSignalError() instead")
    void getAttachmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentMetaSignalError() instead")
    void getAttachmentMetaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentMetaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutoCompleteSignalError() instead")
    void getAutoCompleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAutoCompleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableMetricsSignalError() instead")
    void getAvailableMetricsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableMetricsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarsSignalError() instead")
    void getAvatarsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByIdSignalError() instead")
    void getByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentSignalError() instead")
    void getCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsSignalError() instead")
    void getCommentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComponentSignalError() instead")
    void getComponentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getComponentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComponentRelatedIssuesSignalError() instead")
    void getComponentRelatedIssuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getComponentRelatedIssuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigurationSignalError() instead")
    void getConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreateIssueMetaSignalError() instead")
    void getCreateIssueMetaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCreateIssueMetaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldOptionSignalError() instead")
    void getCustomFieldOptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldOptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardSignalError() instead")
    void getDashboardSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultSignalError() instead")
    void getDefaultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultShareScopeSignalError() instead")
    void getDefaultShareScopeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultShareScopeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftByIdSignalError() instead")
    void getDraftByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftDefaultSignalError() instead")
    void getDraftDefaultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftDefaultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftIssueTypeSignalError() instead")
    void getDraftIssueTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftIssueTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftWorkflowSignalError() instead")
    void getDraftWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditIssueMetaSignalError() instead")
    void getEditIssueMetaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getEditIssueMetaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavouriteFiltersSignalError() instead")
    void getFavouriteFiltersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFavouriteFiltersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldAutoCompleteForQueryStringSignalError() instead")
    void getFieldAutoCompleteForQueryStringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldAutoCompleteForQueryStringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsSignalError() instead")
    void getFieldsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsToAddSignalError() instead")
    void getFieldsToAddSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsToAddSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilterSignalError() instead")
    void getFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupSignalError() instead")
    void getGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdsOfWorklogsDeletedSinceSignalError() instead")
    void getIdsOfWorklogsDeletedSinceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIdsOfWorklogsDeletedSinceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdsOfWorklogsModifiedSinceSignalError() instead")
    void getIdsOfWorklogsModifiedSinceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIdsOfWorklogsModifiedSinceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIndexSummarySignalError() instead")
    void getIndexSummarySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIndexSummarySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSignalError() instead")
    void getIssueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueAllTypesSignalError() instead")
    void getIssueAllTypesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueAllTypesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueLinkSignalError() instead")
    void getIssueLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueLinkTypeSignalError() instead")
    void getIssueLinkTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueLinkTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueLinkTypesSignalError() instead")
    void getIssueLinkTypesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueLinkTypesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueNavigatorDefaultColumnsSignalError() instead")
    void getIssueNavigatorDefaultColumnsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueNavigatorDefaultColumnsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssuePickerResourceSignalError() instead")
    void getIssuePickerResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuePickerResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSecuritySchemesSignalError() instead")
    void getIssueSecuritySchemesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSecuritySchemesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueWatchersSignalError() instead")
    void getIssueWatchersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueWatchersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueWorklogSignalError() instead")
    void getIssueWorklogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueWorklogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssuesecuritylevelSignalError() instead")
    void getIssuesecuritylevelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuesecuritylevelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemesSignalError() instead")
    void getNotificationSchemesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPasswordPolicySignalError() instead")
    void getPasswordPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPasswordPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeSignalError() instead")
    void getPermissionSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeGrantSignalError() instead")
    void getPermissionSchemeGrantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeGrantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeGrantsSignalError() instead")
    void getPermissionSchemeGrantsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeGrantsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemesSignalError() instead")
    void getPermissionSchemesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalError() instead")
    void getPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPreferenceSignalError() instead")
    void getPreferenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPreferenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrioritiesSignalError() instead")
    void getPrioritiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPrioritiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrioritySignalError() instead")
    void getPrioritySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPrioritySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgressSignalError() instead")
    void getProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgressBulkSignalError() instead")
    void getProgressBulkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProgressBulkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectCategoryByIdSignalError() instead")
    void getProjectCategoryByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectCategoryByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectComponentsSignalError() instead")
    void getProjectComponentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectComponentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleSignalError() instead")
    void getProjectRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleActorsForRoleSignalError() instead")
    void getProjectRoleActorsForRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleActorsForRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRolesByIdSignalError() instead")
    void getProjectRolesByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRolesByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectTypeByKeySignalError() instead")
    void getProjectTypeByKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectTypeByKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVersionsSignalError() instead")
    void getProjectVersionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVersionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVersionsPaginatedSignalError() instead")
    void getProjectVersionsPaginatedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVersionsPaginatedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertiesSignalError() instead")
    void getPropertiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertyKeysSignalError() instead")
    void getPropertyKeysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertyKeysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsSignalError() instead")
    void getRecordsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReindexInfoSignalError() instead")
    void getReindexInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReindexInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReindexProgressSignalError() instead")
    void getReindexProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReindexProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteIssueLinkByIdSignalError() instead")
    void getRemoteIssueLinkByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteIssueLinkByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteIssueLinksSignalError() instead")
    void getRemoteIssueLinksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteIssueLinksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteVersionLinkSignalError() instead")
    void getRemoteVersionLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteVersionLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteVersionLinksSignalError() instead")
    void getRemoteVersionLinksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteVersionLinksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteVersionLinksByVersionIdSignalError() instead")
    void getRemoteVersionLinksByVersionIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteVersionLinksByVersionIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolutionSignalError() instead")
    void getResolutionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getResolutionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolutionsSignalError() instead")
    void getResolutionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getResolutionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchemeAttributeSignalError() instead")
    void getSchemeAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSchemeAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityLevelsForProjectSignalError() instead")
    void getSecurityLevelsForProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityLevelsForProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerInfoSignalError() instead")
    void getServerInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getServerInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharePermissionSignalError() instead")
    void getSharePermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSharePermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharePermissionsSignalError() instead")
    void getSharePermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSharePermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStateSignalError() instead")
    void getStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalError() instead")
    void getStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusCategoriesSignalError() instead")
    void getStatusCategoriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusCategoriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusCategorySignalError() instead")
    void getStatusCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusesSignalError() instead")
    void getStatusesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubTasksSignalError() instead")
    void getSubTasksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSubTasksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransitionsSignalError() instead")
    void getTransitionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTransitionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpgradeResultSignalError() instead")
    void getUpgradeResultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUpgradeResultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersFromGroupSignalError() instead")
    void getUsersFromGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersFromGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalError() instead")
    void getVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionRelatedIssuesSignalError() instead")
    void getVersionRelatedIssuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionRelatedIssuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionUnresolvedIssuesSignalError() instead")
    void getVersionUnresolvedIssuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionUnresolvedIssuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVotesSignalError() instead")
    void getVotesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVotesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSignalError() instead")
    void getWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorklogSignalError() instead")
    void getWorklogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getWorklogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorklogsForIdsSignalError() instead")
    void getWorklogsForIdsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getWorklogsForIdsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkIssuesSignalError() instead")
    void linkIssuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void linkIssuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSignalError() instead")
    void listSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalError() instead")
    void logoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeSignalError() instead")
    void mergeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mergeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveFieldSignalError() instead")
    void moveFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveSubTasksSignalError() instead")
    void moveSubTasksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveSubTasksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveTabSignalError() instead")
    void moveTabSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveTabSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveVersionSignalError() instead")
    void moveVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifySignalError() instead")
    void notifySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notifySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partialUpdateProjectRoleSignalError() instead")
    void partialUpdateProjectRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void partialUpdateProjectRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyCheckCreateUserSignalError() instead")
    void policyCheckCreateUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policyCheckCreateUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyCheckUpdateUserSignalError() instead")
    void policyCheckUpdateUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policyCheckUpdateUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processRequestsSignalError() instead")
    void processRequestsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void processRequestsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSignalError() instead")
    void putSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBulkSignalError() instead")
    void putBulkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putBulkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexSignalError() instead")
    void reindexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reindexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexIssuesSignalError() instead")
    void reindexIssuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reindexIssuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseSignalError() instead")
    void releaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAttachmentSignalError() instead")
    void removeAttachmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAttachmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFieldSignalError() instead")
    void removeFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupSignalError() instead")
    void removeGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePreferenceSignalError() instead")
    void removePreferenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removePreferenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeProjectCategorySignalError() instead")
    void removeProjectCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeProjectCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserSignalError() instead")
    void removeUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserFromApplicationSignalError() instead")
    void removeUserFromApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserFromApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserFromGroupSignalError() instead")
    void removeUserFromGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserFromGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVoteSignalError() instead")
    void removeVoteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeVoteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWatcherSignalError() instead")
    void removeWatcherSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeWatcherSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameTabSignalError() instead")
    void renameTabSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameTabSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runUpgradesNowSignalError() instead")
    void runUpgradesNowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void runUpgradesNowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchUsingSearchRequestSignalError() instead")
    void searchUsingSearchRequestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchUsingSearchRequestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setActorsSignalError() instead")
    void setActorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setActorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setBaseURLSignalError() instead")
    void setBaseURLSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setBaseURLSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultShareScopeSignalError() instead")
    void setDefaultShareScopeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultShareScopeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDraftIssueTypeSignalError() instead")
    void setDraftIssueTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setDraftIssueTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setIssueNavigatorDefaultColumnsSignalError() instead")
    void setIssueNavigatorDefaultColumnsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setIssueNavigatorDefaultColumnsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setIssueTypeSignalError() instead")
    void setIssueTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setIssueTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPreferenceSignalError() instead")
    void setPreferenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPreferenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPropertyViaRestfulTableSignalError() instead")
    void setPropertyViaRestfulTableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPropertyViaRestfulTableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReadyToUpgradeSignalError() instead")
    void setReadyToUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setReadyToUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSchemeAttributeSignalError() instead")
    void setSchemeAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setSchemeAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSignalError() instead")
    void startSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSignalError() instead")
    void stopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeTemporaryAvatarSignalError() instead")
    void storeTemporaryAvatarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storeTemporaryAvatarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalError() instead")
    void updateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCommentSignalError() instead")
    void updateCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateComponentSignalError() instead")
    void updateComponentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateComponentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDefaultSignalError() instead")
    void updateDefaultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDefaultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftSignalError() instead")
    void updateDraftSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftDefaultSignalError() instead")
    void updateDraftDefaultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftDefaultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftWorkflowMappingSignalError() instead")
    void updateDraftWorkflowMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftWorkflowMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueLinkTypeSignalError() instead")
    void updateIssueLinkTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueLinkTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueTypeSignalError() instead")
    void updateIssueTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionSchemeSignalError() instead")
    void updatePermissionSchemeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionSchemeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalError() instead")
    void updateProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectCategorySignalError() instead")
    void updateProjectCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectTypeSignalError() instead")
    void updateProjectTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePropertySignalError() instead")
    void updatePropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRemoteIssueLinkSignalError() instead")
    void updateRemoteIssueLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRemoteIssueLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVersionSignalError() instead")
    void updateVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowMappingSignalError() instead")
    void updateWorkflowMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorklogSignalError() instead")
    void updateWorklogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorklogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateSignalError() instead")
    void validateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void validateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acknowledgeErrorsSignalErrorFull() instead")
    void acknowledgeErrorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acknowledgeErrorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addActorUsersSignalErrorFull() instead")
    void addActorUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addActorUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAttachmentSignalErrorFull() instead")
    void addAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCommentSignalErrorFull() instead")
    void addCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFieldSignalErrorFull() instead")
    void addFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFieldToDefaultScreenSignalErrorFull() instead")
    void addFieldToDefaultScreenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFieldToDefaultScreenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addProjectRoleActorsToRoleSignalErrorFull() instead")
    void addProjectRoleActorsToRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addProjectRoleActorsToRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRecordSignalErrorFull() instead")
    void addRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addSharePermissionSignalErrorFull() instead")
    void addSharePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSharePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTabSignalErrorFull() instead")
    void addTabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUserToApplicationSignalErrorFull() instead")
    void addUserToApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addUserToApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUserToGroupSignalErrorFull() instead")
    void addUserToGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addUserToGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVoteSignalErrorFull() instead")
    void addVoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addWatcherSignalErrorFull() instead")
    void addWatcherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWatcherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addWorklogSignalErrorFull() instead")
    void addWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ApplicationPropertiesGetSignalErrorFull() instead")
    void api2ApplicationPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ApplicationPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2AvatarTypeTemporaryCropPostSignalErrorFull() instead")
    void api2AvatarTypeTemporaryCropPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2AvatarTypeTemporaryCropPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2CommentCommentIdPropertiesGetSignalErrorFull() instead")
    void api2CommentCommentIdPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2CommentCommentIdPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2CommentCommentIdPropertiesPropertyKeyDeleteSignalErrorFull() instead")
    void api2CommentCommentIdPropertiesPropertyKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2CommentCommentIdPropertiesPropertyKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2CommentCommentIdPropertiesPropertyKeyGetSignalErrorFull() instead")
    void api2CommentCommentIdPropertiesPropertyKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2CommentCommentIdPropertiesPropertyKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2CommentCommentIdPropertiesPropertyKeyPutSignalErrorFull() instead")
    void api2CommentCommentIdPropertiesPropertyKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2CommentCommentIdPropertiesPropertyKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ComponentIdDeleteSignalErrorFull() instead")
    void api2ComponentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ComponentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2DashboardDashboardIdItemsItemIdPropertiesGetSignalErrorFull() instead")
    void api2DashboardDashboardIdItemsItemIdPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2DashboardDashboardIdItemsItemIdPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteSignalErrorFull() instead")
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetSignalErrorFull() instead")
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutSignalErrorFull() instead")
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2FilterIdColumnsDeleteSignalErrorFull() instead")
    void api2FilterIdColumnsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2FilterIdColumnsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2FilterIdColumnsGetSignalErrorFull() instead")
    void api2FilterIdColumnsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2FilterIdColumnsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2FilterIdColumnsPutSignalErrorFull() instead")
    void api2FilterIdColumnsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2FilterIdColumnsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssueIssueIdOrKeyPropertiesGetSignalErrorFull() instead")
    void api2IssueIssueIdOrKeyPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssueIssueIdOrKeyPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteSignalErrorFull() instead")
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssueIssueIdOrKeyPropertiesPropertyKeyGetSignalErrorFull() instead")
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssueIssueIdOrKeyPropertiesPropertyKeyPutSignalErrorFull() instead")
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssueIssueIdOrKeyPropertiesPropertyKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuesecurityschemesIdGetSignalErrorFull() instead")
    void api2IssuesecurityschemesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuesecurityschemesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIdAvatarPostSignalErrorFull() instead")
    void api2IssuetypeIdAvatarPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIdAvatarPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIdAvatarTemporaryPostSignalErrorFull() instead")
    void api2IssuetypeIdAvatarTemporaryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIdAvatarTemporaryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIdDeleteSignalErrorFull() instead")
    void api2IssuetypeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIdGetSignalErrorFull() instead")
    void api2IssuetypeIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteSignalErrorFull() instead")
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetSignalErrorFull() instead")
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutSignalErrorFull() instead")
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2MyselfGetSignalErrorFull() instead")
    void api2MyselfGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2MyselfGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2MyselfPutSignalErrorFull() instead")
    void api2MyselfPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2MyselfPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2NotificationschemeIdGetSignalErrorFull() instead")
    void api2NotificationschemeIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2NotificationschemeIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarIdDeleteSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyAvatarIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarPostSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyAvatarPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarPutSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyAvatarPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarTemporaryPostSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyAvatarTemporaryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarTemporaryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyAvatarsGetSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyAvatarsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyAvatarsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyGetSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyPropertiesGetSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectIdOrKeyRoleGetSignalErrorFull() instead")
    void api2ProjectProjectIdOrKeyRoleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectIdOrKeyRoleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetSignalErrorFull() instead")
    void api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectProjectKeyOrIdNotificationschemeGetSignalErrorFull() instead")
    void api2ProjectProjectKeyOrIdNotificationschemeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectProjectKeyOrIdNotificationschemeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2ProjectvalidateKeyGetSignalErrorFull() instead")
    void api2ProjectvalidateKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2ProjectvalidateKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2RoleGetSignalErrorFull() instead")
    void api2RoleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2RoleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteSignalErrorFull() instead")
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostSignalErrorFull() instead")
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostSignalErrorFull() instead")
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarIdDeleteSignalErrorFull() instead")
    void api2UserAvatarIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarPostSignalErrorFull() instead")
    void api2UserAvatarPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarPutSignalErrorFull() instead")
    void api2UserAvatarPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarTemporaryPostSignalErrorFull() instead")
    void api2UserAvatarTemporaryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarTemporaryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserAvatarsGetSignalErrorFull() instead")
    void api2UserAvatarsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserAvatarsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserColumnsDeleteSignalErrorFull() instead")
    void api2UserColumnsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserColumnsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserColumnsGetSignalErrorFull() instead")
    void api2UserColumnsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserColumnsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserColumnsPutSignalErrorFull() instead")
    void api2UserColumnsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserColumnsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserGetSignalErrorFull() instead")
    void api2UserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPropertiesGetSignalErrorFull() instead")
    void api2UserPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPropertiesPropertyKeyDeleteSignalErrorFull() instead")
    void api2UserPropertiesPropertyKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPropertiesPropertyKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPropertiesPropertyKeyGetSignalErrorFull() instead")
    void api2UserPropertiesPropertyKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPropertiesPropertyKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPropertiesPropertyKeyPutSignalErrorFull() instead")
    void api2UserPropertiesPropertyKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPropertiesPropertyKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2UserPutSignalErrorFull() instead")
    void api2UserPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2UserPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2VersionIdDeleteSignalErrorFull() instead")
    void api2VersionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2VersionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2VersionIdRemoveAndSwapPostSignalErrorFull() instead")
    void api2VersionIdRemoveAndSwapPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2VersionIdRemoveAndSwapPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2VersionVersionIdRemotelinkGlobalIdPostSignalErrorFull() instead")
    void api2VersionVersionIdRemotelinkGlobalIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2VersionVersionIdRemotelinkGlobalIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2VersionVersionIdRemotelinkPostSignalErrorFull() instead")
    void api2VersionVersionIdRemotelinkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2VersionVersionIdRemotelinkPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2WorkflowApi2TransitionsIdPropertiesDeleteSignalErrorFull() instead")
    void api2WorkflowApi2TransitionsIdPropertiesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2WorkflowApi2TransitionsIdPropertiesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2WorkflowschemeIdIssuetypeIssueTypeDeleteSignalErrorFull() instead")
    void api2WorkflowschemeIdIssuetypeIssueTypeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2WorkflowschemeIdIssuetypeIssueTypeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use api2WorkflowschemeIdIssuetypeIssueTypeGetSignalErrorFull() instead")
    void api2WorkflowschemeIdIssuetypeIssueTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void api2WorkflowschemeIdIssuetypeIssueTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveUpgradeSignalErrorFull() instead")
    void approveUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void approveUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use areMetricsExposedSignalErrorFull() instead")
    void areMetricsExposedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void areMetricsExposedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignSignalErrorFull() instead")
    void assignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignPermissionSchemeSignalErrorFull() instead")
    void assignPermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignPermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use canMoveSubTaskSignalErrorFull() instead")
    void canMoveSubTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void canMoveSubTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelUpgradeSignalErrorFull() instead")
    void cancelUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeMyPasswordSignalErrorFull() instead")
    void changeMyPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeMyPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeUserPasswordSignalErrorFull() instead")
    void changeUserPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeUserPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createComponentSignalErrorFull() instead")
    void createComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCustomFieldSignalErrorFull() instead")
    void createCustomFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDraftForParentSignalErrorFull() instead")
    void createDraftForParentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDraftForParentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFilterSignalErrorFull() instead")
    void createFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalErrorFull() instead")
    void createGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueSignalErrorFull() instead")
    void createIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueLinkTypeSignalErrorFull() instead")
    void createIssueLinkTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueLinkTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssueTypeSignalErrorFull() instead")
    void createIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIssuesSignalErrorFull() instead")
    void createIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrUpdateRemoteIssueLinkSignalErrorFull() instead")
    void createOrUpdateRemoteIssueLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateRemoteIssueLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPermissionGrantSignalErrorFull() instead")
    void createPermissionGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPermissionSchemeSignalErrorFull() instead")
    void createPermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalErrorFull() instead")
    void createProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectCategorySignalErrorFull() instead")
    void createProjectCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectRoleSignalErrorFull() instead")
    void createProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPropertySignalErrorFull() instead")
    void createPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSchemeSignalErrorFull() instead")
    void createSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVersionSignalErrorFull() instead")
    void createVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentUserSignalErrorFull() instead")
    void currentUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currentUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActorSignalErrorFull() instead")
    void deleteActorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCommentSignalErrorFull() instead")
    void deleteCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDefaultSignalErrorFull() instead")
    void deleteDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftByIdSignalErrorFull() instead")
    void deleteDraftByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftDefaultSignalErrorFull() instead")
    void deleteDraftDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftIssueTypeSignalErrorFull() instead")
    void deleteDraftIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDraftWorkflowMappingSignalErrorFull() instead")
    void deleteDraftWorkflowMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDraftWorkflowMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFilterSignalErrorFull() instead")
    void deleteFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueSignalErrorFull() instead")
    void deleteIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueLinkSignalErrorFull() instead")
    void deleteIssueLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIssueLinkTypeSignalErrorFull() instead")
    void deleteIssueLinkTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIssueLinkTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeSignalErrorFull() instead")
    void deletePermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeEntitySignalErrorFull() instead")
    void deletePermissionSchemeEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalErrorFull() instead")
    void deleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectRoleSignalErrorFull() instead")
    void deleteProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectRoleActorsFromRoleSignalErrorFull() instead")
    void deleteProjectRoleActorsFromRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectRoleActorsFromRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteIssueLinkByGlobalIdSignalErrorFull() instead")
    void deleteRemoteIssueLinkByGlobalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteIssueLinkByGlobalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteIssueLinkByIdSignalErrorFull() instead")
    void deleteRemoteIssueLinkByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteIssueLinkByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteVersionLinkSignalErrorFull() instead")
    void deleteRemoteVersionLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteVersionLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRemoteVersionLinksByVersionIdSignalErrorFull() instead")
    void deleteRemoteVersionLinksByVersionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteVersionLinksByVersionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSchemeSignalErrorFull() instead")
    void deleteSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSharePermissionSignalErrorFull() instead")
    void deleteSharePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSharePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTabSignalErrorFull() instead")
    void deleteTabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowMappingSignalErrorFull() instead")
    void deleteWorkflowMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorklogSignalErrorFull() instead")
    void deleteWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doTransitionSignalErrorFull() instead")
    void doTransitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void doTransitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editFilterSignalErrorFull() instead")
    void editFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editIssueSignalErrorFull() instead")
    void editIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expandForHumansSignalErrorFull() instead")
    void expandForHumansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expandForHumansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expandForMachinesSignalErrorFull() instead")
    void expandForMachinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expandForMachinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findAssignableUsersSignalErrorFull() instead")
    void findAssignableUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findAssignableUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findBulkAssignableUsersSignalErrorFull() instead")
    void findBulkAssignableUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findBulkAssignableUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGroupsSignalErrorFull() instead")
    void findGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersSignalErrorFull() instead")
    void findUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersAndGroupsSignalErrorFull() instead")
    void findUsersAndGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersAndGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersForPickerSignalErrorFull() instead")
    void findUsersForPickerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersForPickerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersWithAllPermissionsSignalErrorFull() instead")
    void findUsersWithAllPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersWithAllPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersWithBrowsePermissionSignalErrorFull() instead")
    void findUsersWithBrowsePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersWithBrowsePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fullyUpdateProjectRoleSignalErrorFull() instead")
    void fullyUpdateProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fullyUpdateProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignalErrorFull() instead")
    void getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessibleProjectTypeByKeySignalErrorFull() instead")
    void getAccessibleProjectTypeByKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessibleProjectTypeByKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdvancedSettingsSignalErrorFull() instead")
    void getAdvancedSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSignalErrorFull() instead")
    void getAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllFieldsSignalErrorFull() instead")
    void getAllFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionsSignalErrorFull() instead")
    void getAllPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectCategoriesSignalErrorFull() instead")
    void getAllProjectCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectTypesSignalErrorFull() instead")
    void getAllProjectTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProjectsSignalErrorFull() instead")
    void getAllProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllStatusesSignalErrorFull() instead")
    void getAllStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSystemAvatarsSignalErrorFull() instead")
    void getAllSystemAvatarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSystemAvatarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTabsSignalErrorFull() instead")
    void getAllTabsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTabsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWorkflowsSignalErrorFull() instead")
    void getAllWorkflowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWorkflowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlternativeIssueTypesSignalErrorFull() instead")
    void getAlternativeIssueTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlternativeIssueTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssignedPermissionSchemeSignalErrorFull() instead")
    void getAssignedPermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssignedPermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentSignalErrorFull() instead")
    void getAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentMetaSignalErrorFull() instead")
    void getAttachmentMetaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentMetaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutoCompleteSignalErrorFull() instead")
    void getAutoCompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutoCompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableMetricsSignalErrorFull() instead")
    void getAvailableMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvatarsSignalErrorFull() instead")
    void getAvatarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvatarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByIdSignalErrorFull() instead")
    void getByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentSignalErrorFull() instead")
    void getCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsSignalErrorFull() instead")
    void getCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComponentSignalErrorFull() instead")
    void getComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComponentRelatedIssuesSignalErrorFull() instead")
    void getComponentRelatedIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComponentRelatedIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigurationSignalErrorFull() instead")
    void getConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreateIssueMetaSignalErrorFull() instead")
    void getCreateIssueMetaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreateIssueMetaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldOptionSignalErrorFull() instead")
    void getCustomFieldOptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldOptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardSignalErrorFull() instead")
    void getDashboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultSignalErrorFull() instead")
    void getDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultShareScopeSignalErrorFull() instead")
    void getDefaultShareScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultShareScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftByIdSignalErrorFull() instead")
    void getDraftByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftDefaultSignalErrorFull() instead")
    void getDraftDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftIssueTypeSignalErrorFull() instead")
    void getDraftIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftWorkflowSignalErrorFull() instead")
    void getDraftWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditIssueMetaSignalErrorFull() instead")
    void getEditIssueMetaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditIssueMetaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavouriteFiltersSignalErrorFull() instead")
    void getFavouriteFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavouriteFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldAutoCompleteForQueryStringSignalErrorFull() instead")
    void getFieldAutoCompleteForQueryStringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldAutoCompleteForQueryStringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsSignalErrorFull() instead")
    void getFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsToAddSignalErrorFull() instead")
    void getFieldsToAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsToAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilterSignalErrorFull() instead")
    void getFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupSignalErrorFull() instead")
    void getGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdsOfWorklogsDeletedSinceSignalErrorFull() instead")
    void getIdsOfWorklogsDeletedSinceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIdsOfWorklogsDeletedSinceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdsOfWorklogsModifiedSinceSignalErrorFull() instead")
    void getIdsOfWorklogsModifiedSinceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIdsOfWorklogsModifiedSinceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIndexSummarySignalErrorFull() instead")
    void getIndexSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIndexSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSignalErrorFull() instead")
    void getIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueAllTypesSignalErrorFull() instead")
    void getIssueAllTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueAllTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueLinkSignalErrorFull() instead")
    void getIssueLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueLinkTypeSignalErrorFull() instead")
    void getIssueLinkTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueLinkTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueLinkTypesSignalErrorFull() instead")
    void getIssueLinkTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueLinkTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueNavigatorDefaultColumnsSignalErrorFull() instead")
    void getIssueNavigatorDefaultColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueNavigatorDefaultColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssuePickerResourceSignalErrorFull() instead")
    void getIssuePickerResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuePickerResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueSecuritySchemesSignalErrorFull() instead")
    void getIssueSecuritySchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueSecuritySchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueWatchersSignalErrorFull() instead")
    void getIssueWatchersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueWatchersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssueWorklogSignalErrorFull() instead")
    void getIssueWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssueWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIssuesecuritylevelSignalErrorFull() instead")
    void getIssuesecuritylevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIssuesecuritylevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationSchemesSignalErrorFull() instead")
    void getNotificationSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPasswordPolicySignalErrorFull() instead")
    void getPasswordPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPasswordPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeSignalErrorFull() instead")
    void getPermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeGrantSignalErrorFull() instead")
    void getPermissionSchemeGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemeGrantsSignalErrorFull() instead")
    void getPermissionSchemeGrantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemeGrantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSchemesSignalErrorFull() instead")
    void getPermissionSchemesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSchemesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalErrorFull() instead")
    void getPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPreferenceSignalErrorFull() instead")
    void getPreferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPreferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrioritiesSignalErrorFull() instead")
    void getPrioritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrioritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPrioritySignalErrorFull() instead")
    void getPrioritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPrioritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgressSignalErrorFull() instead")
    void getProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgressBulkSignalErrorFull() instead")
    void getProgressBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgressBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectCategoryByIdSignalErrorFull() instead")
    void getProjectCategoryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectCategoryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectComponentsSignalErrorFull() instead")
    void getProjectComponentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectComponentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleSignalErrorFull() instead")
    void getProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRoleActorsForRoleSignalErrorFull() instead")
    void getProjectRoleActorsForRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRoleActorsForRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectRolesByIdSignalErrorFull() instead")
    void getProjectRolesByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectRolesByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectTypeByKeySignalErrorFull() instead")
    void getProjectTypeByKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectTypeByKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVersionsSignalErrorFull() instead")
    void getProjectVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVersionsPaginatedSignalErrorFull() instead")
    void getProjectVersionsPaginatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVersionsPaginatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertiesSignalErrorFull() instead")
    void getPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertyKeysSignalErrorFull() instead")
    void getPropertyKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertyKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsSignalErrorFull() instead")
    void getRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReindexInfoSignalErrorFull() instead")
    void getReindexInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReindexInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReindexProgressSignalErrorFull() instead")
    void getReindexProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReindexProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteIssueLinkByIdSignalErrorFull() instead")
    void getRemoteIssueLinkByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteIssueLinkByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteIssueLinksSignalErrorFull() instead")
    void getRemoteIssueLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteIssueLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteVersionLinkSignalErrorFull() instead")
    void getRemoteVersionLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteVersionLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteVersionLinksSignalErrorFull() instead")
    void getRemoteVersionLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteVersionLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteVersionLinksByVersionIdSignalErrorFull() instead")
    void getRemoteVersionLinksByVersionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteVersionLinksByVersionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolutionSignalErrorFull() instead")
    void getResolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolutionsSignalErrorFull() instead")
    void getResolutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchemeAttributeSignalErrorFull() instead")
    void getSchemeAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchemeAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityLevelsForProjectSignalErrorFull() instead")
    void getSecurityLevelsForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityLevelsForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerInfoSignalErrorFull() instead")
    void getServerInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharePermissionSignalErrorFull() instead")
    void getSharePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharePermissionsSignalErrorFull() instead")
    void getSharePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStateSignalErrorFull() instead")
    void getStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalErrorFull() instead")
    void getStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusCategoriesSignalErrorFull() instead")
    void getStatusCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusCategorySignalErrorFull() instead")
    void getStatusCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusesSignalErrorFull() instead")
    void getStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubTasksSignalErrorFull() instead")
    void getSubTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransitionsSignalErrorFull() instead")
    void getTransitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpgradeResultSignalErrorFull() instead")
    void getUpgradeResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpgradeResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersFromGroupSignalErrorFull() instead")
    void getUsersFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalErrorFull() instead")
    void getVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionRelatedIssuesSignalErrorFull() instead")
    void getVersionRelatedIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionRelatedIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionUnresolvedIssuesSignalErrorFull() instead")
    void getVersionUnresolvedIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionUnresolvedIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVotesSignalErrorFull() instead")
    void getVotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkflowSignalErrorFull() instead")
    void getWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorklogSignalErrorFull() instead")
    void getWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorklogsForIdsSignalErrorFull() instead")
    void getWorklogsForIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorklogsForIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkIssuesSignalErrorFull() instead")
    void linkIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSignalErrorFull() instead")
    void listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalErrorFull() instead")
    void logoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeSignalErrorFull() instead")
    void mergeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mergeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveFieldSignalErrorFull() instead")
    void moveFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveSubTasksSignalErrorFull() instead")
    void moveSubTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveSubTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveTabSignalErrorFull() instead")
    void moveTabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveTabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveVersionSignalErrorFull() instead")
    void moveVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifySignalErrorFull() instead")
    void notifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partialUpdateProjectRoleSignalErrorFull() instead")
    void partialUpdateProjectRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partialUpdateProjectRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyCheckCreateUserSignalErrorFull() instead")
    void policyCheckCreateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyCheckCreateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyCheckUpdateUserSignalErrorFull() instead")
    void policyCheckUpdateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyCheckUpdateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processRequestsSignalErrorFull() instead")
    void processRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSignalErrorFull() instead")
    void putSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBulkSignalErrorFull() instead")
    void putBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexSignalErrorFull() instead")
    void reindexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reindexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexIssuesSignalErrorFull() instead")
    void reindexIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reindexIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseSignalErrorFull() instead")
    void releaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAttachmentSignalErrorFull() instead")
    void removeAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFieldSignalErrorFull() instead")
    void removeFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupSignalErrorFull() instead")
    void removeGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePreferenceSignalErrorFull() instead")
    void removePreferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePreferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeProjectCategorySignalErrorFull() instead")
    void removeProjectCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeProjectCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserSignalErrorFull() instead")
    void removeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserFromApplicationSignalErrorFull() instead")
    void removeUserFromApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserFromApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserFromGroupSignalErrorFull() instead")
    void removeUserFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVoteSignalErrorFull() instead")
    void removeVoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWatcherSignalErrorFull() instead")
    void removeWatcherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeWatcherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameTabSignalErrorFull() instead")
    void renameTabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameTabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runUpgradesNowSignalErrorFull() instead")
    void runUpgradesNowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runUpgradesNowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchUsingSearchRequestSignalErrorFull() instead")
    void searchUsingSearchRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchUsingSearchRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setActorsSignalErrorFull() instead")
    void setActorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setActorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setBaseURLSignalErrorFull() instead")
    void setBaseURLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setBaseURLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDefaultShareScopeSignalErrorFull() instead")
    void setDefaultShareScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDefaultShareScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDraftIssueTypeSignalErrorFull() instead")
    void setDraftIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDraftIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setIssueNavigatorDefaultColumnsSignalErrorFull() instead")
    void setIssueNavigatorDefaultColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setIssueNavigatorDefaultColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setIssueTypeSignalErrorFull() instead")
    void setIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPreferenceSignalErrorFull() instead")
    void setPreferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPreferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPropertyViaRestfulTableSignalErrorFull() instead")
    void setPropertyViaRestfulTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPropertyViaRestfulTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReadyToUpgradeSignalErrorFull() instead")
    void setReadyToUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setReadyToUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSchemeAttributeSignalErrorFull() instead")
    void setSchemeAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setSchemeAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSignalErrorFull() instead")
    void startSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSignalErrorFull() instead")
    void stopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeTemporaryAvatarSignalErrorFull() instead")
    void storeTemporaryAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeTemporaryAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalErrorFull() instead")
    void updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCommentSignalErrorFull() instead")
    void updateCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateComponentSignalErrorFull() instead")
    void updateComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDefaultSignalErrorFull() instead")
    void updateDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftSignalErrorFull() instead")
    void updateDraftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftDefaultSignalErrorFull() instead")
    void updateDraftDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDraftWorkflowMappingSignalErrorFull() instead")
    void updateDraftWorkflowMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDraftWorkflowMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueLinkTypeSignalErrorFull() instead")
    void updateIssueLinkTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueLinkTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIssueTypeSignalErrorFull() instead")
    void updateIssueTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIssueTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionSchemeSignalErrorFull() instead")
    void updatePermissionSchemeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionSchemeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalErrorFull() instead")
    void updateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectCategorySignalErrorFull() instead")
    void updateProjectCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectTypeSignalErrorFull() instead")
    void updateProjectTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePropertySignalErrorFull() instead")
    void updatePropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRemoteIssueLinkSignalErrorFull() instead")
    void updateRemoteIssueLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRemoteIssueLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVersionSignalErrorFull() instead")
    void updateVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowMappingSignalErrorFull() instead")
    void updateWorkflowMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorklogSignalErrorFull() instead")
    void updateWorklogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorklogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateSignalErrorFull() instead")
    void validateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
