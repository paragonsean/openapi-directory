/**
 * JIRA 7.6.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acknowledgeErrors operation.
     * @callback module:api/DefaultApi~acknowledgeErrorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~acknowledgeErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    acknowledgeErrors(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/cluster/zdu/retryUpgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addActorUsers operation.
     * @callback module:api/DefaultApi~addActorUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an actor (user or group) to a project role.
     * @param {String} projectIdOrKey the project id or project key
     * @param {Number} id the project role id
     * @param {module:api/DefaultApi~addActorUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addActorUsers(projectIdOrKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling addActorUsers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addActorUsers");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/role/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAttachment operation.
     * @callback module:api/DefaultApi~addAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add one or more attachments to an issue.  <p>  This resource expects a multipart post. The media-type multipart/form-data is defined in RFC 1867. Most client  libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components  library provides a  <a href=\"http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html\">MultiPartEntity</a>  that makes it simple to submit a multipart POST.  <p>  In order to protect against XSRF attacks, because this method accepts multipart/form-data, it has XSRF protection  on it.  This means you must submit a header of X-Atlassian-Token: no-check with the request, otherwise it will be  blocked.  <p>  The name of the multipart/form-data parameter that contains attachments must be \"file\"  <p>  A simple example to upload a file called \"myfile.txt\" to issue REST-123:  <pre>curl -D- -u admin:admin -X POST -H \"X-Atlassian-Token: no-check\" -F \"file=@myfile.txt\" http://myhost/rest/api/2/issue/TEST-123/attachments</pre>
     * @param {String} issueIdOrKey the issue that you want to add the attachments to
     * @param {module:api/DefaultApi~addAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addAttachment(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling addAttachment");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addComment operation.
     * @callback module:api/DefaultApi~addCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new comment to an issue.
     * @param {String} issueIdOrKey a string containing the issue id or key the comment will be added to
     * @param {Object} opts Optional parameters
     * @param {String} [expand] optional flags: renderedBody (provides body rendered in HTML)
     * @param {module:api/DefaultApi~addCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addComment(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling addComment");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addField operation.
     * @callback module:api/DefaultApi~addFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds field to the given tab.
     * @param {Number} screenId id of screen
     * @param {Number} tabId id of tab
     * @param {module:api/DefaultApi~addFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addField(screenId, tabId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling addField");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling addField");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs/{tabId}/fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFieldToDefaultScreen operation.
     * @callback module:api/DefaultApi~addFieldToDefaultScreenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds field or custom field to the default tab
     * @param {String} fieldId id of field / custom field
     * @param {module:api/DefaultApi~addFieldToDefaultScreenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addFieldToDefaultScreen(fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling addFieldToDefaultScreen");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/addToDefault/{fieldId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addProjectRoleActorsToRole operation.
     * @callback module:api/DefaultApi~addProjectRoleActorsToRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds default actors to the given role. The request data should contain a list of usernames or a list of groups to add.
     * @param {Number} id the role id to remove the actors from
     * @param {module:api/DefaultApi~addProjectRoleActorsToRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addProjectRoleActorsToRole(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addProjectRoleActorsToRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role/{id}/actors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRecord operation.
     * @callback module:api/DefaultApi~addRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a record in Audit Log
     * @param {module:api/DefaultApi~addRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addRecord(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/auditing/record', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addSharePermission operation.
     * @callback module:api/DefaultApi~addSharePermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a share permissions to the given filter. Adding a global permission removes all previous permissions from the filter.
     * @param {Number} id 
     * @param {module:api/DefaultApi~addSharePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addSharePermission(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSharePermission");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTab operation.
     * @callback module:api/DefaultApi~addTabCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates tab for given screen
     * @param {Number} screenId id of screen
     * @param {module:api/DefaultApi~addTabCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTab(screenId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling addTab");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUserToApplication operation.
     * @callback module:api/DefaultApi~addUserToApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user to given application. Admin permission will be required to perform this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [username] username
     * @param {String} [applicationKey] application key
     * @param {module:api/DefaultApi~addUserToApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addUserToApplication(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'applicationKey': opts['applicationKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUserToGroup operation.
     * @callback module:api/DefaultApi~addUserToGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds given user to a group.  <p>  Returns the current state of the group.
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] A name of requested group.
     * @param {module:api/DefaultApi~addUserToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addUserToGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/group/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVote operation.
     * @callback module:api/DefaultApi~addVoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cast your vote in favour of an issue.
     * @param {String} issueIdOrKey the issue to view voting information for
     * @param {module:api/DefaultApi~addVoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVote(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling addVote");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/votes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addWatcher operation.
     * @callback module:api/DefaultApi~addWatcherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a user to an issue's watcher list.
     * @param {String} issueIdOrKey a String containing an issue key.
     * @param {module:api/DefaultApi~addWatcherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addWatcher(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling addWatcher");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/watchers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addWorklog operation.
     * @callback module:api/DefaultApi~addWorklogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new worklog entry to an issue.
     * @param {String} issueIdOrKey a string containing the issue id or key the worklog will be added to
     * @param {Object} opts Optional parameters
     * @param {String} [adjustEstimate] (optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are                        <ul>                        <li>\"new\" - sets the estimate to a specific value</li>                        <li>\"leave\"- leaves the estimate as is</li>                        <li>\"manual\" - specify a specific amount to increase remaining estimate by</li>                        <li>\"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog</li> </ul>
     * @param {String} [newEstimate] (required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field. e.g. \"2d\"
     * @param {String} [reduceBy] (required when \"manual\" is selected for adjustEstimate) the amount to reduce the remaining estimate by e.g. \"2d\"
     * @param {module:api/DefaultApi~addWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addWorklog(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling addWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'adjustEstimate': opts['adjustEstimate'],
        'newEstimate': opts['newEstimate'],
        'reduceBy': opts['reduceBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/worklog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ApplicationPropertiesGet operation.
     * @callback module:api/DefaultApi~api2ApplicationPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an application property.
     * @param {Object} opts Optional parameters
     * @param {String} [key] a String containing the property key
     * @param {String} [permissionLevel] when fetching a list specifies the permission level of all items in the list                         see {@link com.atlassian.jira.bc.admin.ApplicationPropertiesService.EditPermissionLevel}
     * @param {String} [keyFilter] when fetching a list allows the list to be filtered by the property's start of key                         e.g. \"jira.lf.*\" whould fetch only those permissions that are editable and whose keys start with                         \"jira.lf.\". This is a regex.
     * @param {module:api/DefaultApi~api2ApplicationPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ApplicationPropertiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key'],
        'permissionLevel': opts['permissionLevel'],
        'keyFilter': opts['keyFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/application-properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2AvatarTypeTemporaryCropPost operation.
     * @callback module:api/DefaultApi~api2AvatarTypeTemporaryCropPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the cropping instructions of the temporary avatar.
     * @param {String} type the avatar type
     * @param {module:api/DefaultApi~api2AvatarTypeTemporaryCropPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2AvatarTypeTemporaryCropPost(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling api2AvatarTypeTemporaryCropPost");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/avatar/{type}/temporaryCrop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2CommentCommentIdPropertiesGet operation.
     * @callback module:api/DefaultApi~api2CommentCommentIdPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for the comment identified by the key or by the id.
     * @param {String} commentId the comment from which keys will be returned.
     * @param {module:api/DefaultApi~api2CommentCommentIdPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2CommentCommentIdPropertiesGet(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling api2CommentCommentIdPropertiesGet");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/comment/{commentId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2CommentCommentIdPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~api2CommentCommentIdPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the property from the comment identified by the key or by the id. Ths user removing the property is required  to have permissions to administer the comment.
     * @param {String} commentId the comment from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2CommentCommentIdPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2CommentCommentIdPropertiesPropertyKeyDelete(commentId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling api2CommentCommentIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2CommentCommentIdPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'commentId': commentId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/comment/{commentId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2CommentCommentIdPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~api2CommentCommentIdPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of the property with a given key from the comment identified by the key or by the id. The user who retrieves  the property is required to have permissions to read the comment.
     * @param {String} commentId the comment from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2CommentCommentIdPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2CommentCommentIdPropertiesPropertyKeyGet(commentId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling api2CommentCommentIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2CommentCommentIdPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'commentId': commentId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/comment/{commentId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2CommentCommentIdPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~api2CommentCommentIdPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified comment's property.  <p>  You can use this resource to store a custom data against the comment identified by the key or by the id. The user  who stores the data is required to have permissions to administer the comment.  </p>
     * @param {String} commentId the comment from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2CommentCommentIdPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2CommentCommentIdPropertiesPropertyKeyPut(commentId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling api2CommentCommentIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2CommentCommentIdPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'commentId': commentId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/comment/{commentId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ComponentIdDelete operation.
     * @callback module:api/DefaultApi~api2ComponentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project component.
     * @param {String} id The component to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [moveIssuesTo] The new component applied to issues whose 'id' component will be deleted.                      If this value is null, then the 'id' component is simply removed from the related isues.
     * @param {module:api/DefaultApi~api2ComponentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ComponentIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2ComponentIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'moveIssuesTo': opts['moveIssuesTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/component/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2DashboardDashboardIdItemsItemIdPropertiesGet operation.
     * @callback module:api/DefaultApi~api2DashboardDashboardIdItemsItemIdPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for the dashboard item identified by the id.
     * @param {String} itemId the dashboard item from which keys will be returned.
     * @param {String} dashboardId 
     * @param {module:api/DefaultApi~api2DashboardDashboardIdItemsItemIdPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2DashboardDashboardIdItemsItemIdPropertiesGet(itemId, dashboardId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling api2DashboardDashboardIdItemsItemIdPropertiesGet");
      }
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling api2DashboardDashboardIdItemsItemIdPropertiesGet");
      }

      let pathParams = {
        'itemId': itemId,
        'dashboardId': dashboardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/dashboard/{dashboardId}/items/{itemId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the property from the dashboard item identified by the key or by the id. Ths user removing the property is required  to have permissions to administer the dashboard item.
     * @param {String} itemId the dashboard item from which keys will be returned.
     * @param {String} dashboardId 
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete(itemId, dashboardId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'itemId': itemId,
        'dashboardId': dashboardId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of the property with a given key from the dashboard item identified by the id.  The user who retrieves the property is required to have permissions to read the dashboard item.
     * @param {String} itemId the dashboard item from which keys will be returned.
     * @param {String} dashboardId 
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet(itemId, dashboardId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'itemId': itemId,
        'dashboardId': dashboardId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified dashboard item's property.  <p>  You can use this resource to store a custom data against the dashboard item identified by the id.  The user who stores the data is required to have permissions to administer the dashboard item.  </p>
     * @param {String} itemId the dashboard item from which keys will be returned.
     * @param {String} dashboardId 
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut(itemId, dashboardId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'itemId': itemId,
        'dashboardId': dashboardId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2FilterIdColumnsDelete operation.
     * @callback module:api/DefaultApi~api2FilterIdColumnsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the columns for the given filter such that the filter no longer has its own column config.
     * @param {Number} id id of the filter
     * @param {module:api/DefaultApi~api2FilterIdColumnsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2FilterIdColumnsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2FilterIdColumnsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}/columns', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2FilterIdColumnsGet operation.
     * @callback module:api/DefaultApi~api2FilterIdColumnsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default columns for the given filter. Currently logged in user will be used as  the user making such request.
     * @param {Number} id id of the filter
     * @param {module:api/DefaultApi~api2FilterIdColumnsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2FilterIdColumnsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2FilterIdColumnsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}/columns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2FilterIdColumnsPut operation.
     * @callback module:api/DefaultApi~api2FilterIdColumnsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default columns for the given filter.
     * @param {Number} id id of the filter
     * @param {module:api/DefaultApi~api2FilterIdColumnsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2FilterIdColumnsPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2FilterIdColumnsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}/columns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssueIssueIdOrKeyPropertiesGet operation.
     * @callback module:api/DefaultApi~api2IssueIssueIdOrKeyPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for the issue identified by the key or by the id.
     * @param {String} issueIdOrKey the issue from which keys will be returned.
     * @param {module:api/DefaultApi~api2IssueIssueIdOrKeyPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssueIssueIdOrKeyPropertiesGet(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling api2IssueIssueIdOrKeyPropertiesGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the property from the issue identified by the key or by the id. Ths user removing the property is required  to have permissions to edit the issue.
     * @param {String} issueIdOrKey the issue from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2IssueIssueIdOrKeyPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete(issueIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssueIssueIdOrKeyPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~api2IssueIssueIdOrKeyPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of the property with a given key from the issue identified by the key or by the id. The user who retrieves  the property is required to have permissions to read the issue.
     * @param {String} issueIdOrKey the issue from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2IssueIssueIdOrKeyPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssueIssueIdOrKeyPropertiesPropertyKeyGet(issueIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling api2IssueIssueIdOrKeyPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2IssueIssueIdOrKeyPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssueIssueIdOrKeyPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~api2IssueIssueIdOrKeyPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified issue's property.  <p>  You can use this resource to store a custom data against the issue identified by the key or by the id. The user  who stores the data is required to have permissions to edit the issue.  </p>
     * @param {String} issueIdOrKey the issue from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2IssueIssueIdOrKeyPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssueIssueIdOrKeyPropertiesPropertyKeyPut(issueIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling api2IssueIssueIdOrKeyPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2IssueIssueIdOrKeyPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssuesecurityschemesIdGet operation.
     * @callback module:api/DefaultApi~api2IssuesecurityschemesIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the issue security scheme along with that are defined.
     * @param {Number} id 
     * @param {module:api/DefaultApi~api2IssuesecurityschemesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssuesecurityschemesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2IssuesecurityschemesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuesecurityschemes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssuetypeIdAvatarPost operation.
     * @callback module:api/DefaultApi~api2IssuetypeIdAvatarPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converts temporary avatar into a real avatar
     * @param {String} id the id of the issue type, which avatar is updated.
     * @param {module:api/DefaultApi~api2IssuetypeIdAvatarPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssuetypeIdAvatarPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2IssuetypeIdAvatarPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{id}/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssuetypeIdAvatarTemporaryPost operation.
     * @callback module:api/DefaultApi~api2IssuetypeIdAvatarTemporaryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because  the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from  which the client parses the JSON from.  <p>  Creating a temporary avatar is part of a 3-step process in uploading a new  avatar for an issue type: upload, crop, confirm. This endpoint allows you to use a multipart upload  instead of sending the image directly as the request body.  </p>  <p>  You *must* use \"avatar\" as the name of the upload parameter:</p>  <p>  <pre>  curl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\    -F \"avatar=@mynewavatar.png;type=image/png\" \\    'http://localhost:8090/jira/rest/api/2/issuetype/1/avatar/temporary'  </pre>
     * @param {String} id the id of the issue type, which avatar is updated.
     * @param {module:api/DefaultApi~api2IssuetypeIdAvatarTemporaryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssuetypeIdAvatarTemporaryPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2IssuetypeIdAvatarTemporaryPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{id}/avatar/temporary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssuetypeIdDelete operation.
     * @callback module:api/DefaultApi~api2IssuetypeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified issue type. If the issue type has any associated issues, these issues will be migrated to  the alternative issue type specified in the parameter. You can determine the alternative issue types by calling  the <b>/rest/api/2/issuetype/{id}/alternatives</b> resource.
     * @param {String} id the id of the issue type to update.
     * @param {Object} opts Optional parameters
     * @param {String} [alternativeIssueTypeId] the id of an issue type to which issues associated with the removed issue type will be migrated.
     * @param {module:api/DefaultApi~api2IssuetypeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssuetypeIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2IssuetypeIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'alternativeIssueTypeId': opts['alternativeIssueTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssuetypeIdGet operation.
     * @callback module:api/DefaultApi~api2IssuetypeIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a full representation of the issue type that has the given id.
     * @param {String} id the id of the issue type to update.
     * @param {module:api/DefaultApi~api2IssuetypeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssuetypeIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2IssuetypeIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the property from the issue type identified by the id. Ths user removing the property is required  to have permissions to edit the issue type.
     * @param {String} issueTypeId the issue type from which the keys will be returned
     * @param {String} propertyKey the key of the property to return
     * @param {module:api/DefaultApi~api2IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete(issueTypeId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{issueTypeId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of the property with a given key from the issue type identified by the id. The user who retrieves  the property is required to have permissions to view the issue type.
     * @param {String} issueTypeId the issue type from which the keys will be returned
     * @param {String} propertyKey the key of the property to return
     * @param {module:api/DefaultApi~api2IssuetypeIssueTypeIdPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet(issueTypeId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{issueTypeId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified issue type's property.  <p>  You can use this resource to store a custom data against an issue type identified by the id. The user  who stores the data is required to have permissions to edit an issue type.  </p>
     * @param {String} issueTypeId the issue type from which the keys will be returned
     * @param {String} propertyKey the key of the property to return
     * @param {module:api/DefaultApi~api2IssuetypeIssueTypeIdPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut(issueTypeId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{issueTypeId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2MyselfGet operation.
     * @callback module:api/DefaultApi~api2MyselfGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns currently logged user. This resource cannot be accessed anonymously.
     * @param {module:api/DefaultApi~api2MyselfGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2MyselfGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/myself', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2MyselfPut operation.
     * @callback module:api/DefaultApi~api2MyselfPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify currently logged user. The \"value\" fields present will override the existing value.  Fields skipped in request will not be changed. Only email and display name can be change that way.  Requires user password.
     * @param {module:api/DefaultApi~api2MyselfPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2MyselfPut(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/myself', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2NotificationschemeIdGet operation.
     * @callback module:api/DefaultApi~api2NotificationschemeIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a full representation of the notification scheme for the given id. This resource will return a  notification scheme containing a list of events and recipient configured to receive notifications for these events. Consumer  should allow events without recipients to appear in response. User accessing  the data is required to have permissions to administer at least one project associated with the requested notification scheme.  <p>  Notification recipients can be:  <ul>  <li>current assignee - the value of the notificationType is CurrentAssignee</li>  <li>issue reporter - the value of the notificationType is Reporter</li>  <li>current user - the value of the notificationType is CurrentUser</li>  <li>project lead - the value of the notificationType is ProjectLead</li>  <li>component lead - the value of the notificationType is ComponentLead</li>  <li>all watchers - the value of the notification type is AllWatchers</li>  <li>configured user - the value of the notification type is User. Parameter will contain key of the user. Information about the user will be provided  if <b>user</b> expand parameter is used. </li>  <li>configured group - the value of the notification type is Group. Parameter will contain name of the group. Information about the group will be provided  if <b>group</b> expand parameter is used. </li>  <li>configured email address - the value of the notification type is EmailAddress, additionally information about the email will be provided.</li>  <li>users or users in groups in the configured custom fields - the value of the notification type is UserCustomField or GroupCustomField. Parameter  will contain id of the custom field. Information about the field will be provided if <b>field</b> expand parameter is used. </li>  <li>configured project role - the value of the notification type is ProjectRole. Parameter will contain project role id. Information about the project role  will be provided if <b>projectRole</b> expand parameter is used. </li>  </ul>  Please see the example for reference.  </p>  The events can be JIRA system events or events configured by administrator. In case of the system events, data about theirs  ids, names and descriptions is provided. In case of custom events, the template event is included as well.
     * @param {Number} id an id of the notification scheme to retrieve
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~api2NotificationschemeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2NotificationschemeIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2NotificationschemeIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/notificationscheme/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyAvatarIdDelete operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes avatar
     * @param {String} projectIdOrKey Project id or project key
     * @param {Number} id database id for avatar
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyAvatarIdDelete(projectIdOrKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyAvatarIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2ProjectProjectIdOrKeyAvatarIdDelete");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/avatar/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyAvatarPost operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converts temporary avatar into a real avatar
     * @param {String} projectIdOrKey 
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyAvatarPost(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyAvatarPost");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyAvatarPut operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectIdOrKey 
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyAvatarPut(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyAvatarPut");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyAvatarTemporaryPost operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarTemporaryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because  the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from  which the client parses the JSON.
     * @param {String} projectIdOrKey Project id or project key
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarTemporaryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyAvatarTemporaryPost(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyAvatarTemporaryPost");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/avatar/temporary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyAvatarsGet operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all avatars which are visible for the currently logged in user.  The avatars are grouped into  system and custom.
     * @param {String} projectIdOrKey project id or project key
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyAvatarsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyAvatarsGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyAvatarsGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/avatars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyGet operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains a full representation of a project in JSON format.  <p>  All project keys associated with the project will only be returned if <code>expand=projectKeys</code>.  <p>
     * @param {String} projectIdOrKey the project id or project key
     * @param {Object} opts Optional parameters
     * @param {String} [expand] the parameters to expand
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyGet(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyPropertiesGet operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for the project identified by the key or by the id.
     * @param {String} projectIdOrKey the project from which keys will be returned.
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyPropertiesGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyPropertiesGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the property from the project identified by the key or by the id. Ths user removing the property is required  to have permissions to administer the project.
     * @param {String} projectIdOrKey the project from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete(projectIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of the property with a given key from the project identified by the key or by the id. The user who retrieves  the property is required to have permissions to read the project.
     * @param {String} projectIdOrKey the project from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet(projectIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified project's property.  <p>  You can use this resource to store a custom data against the project identified by the key or by the id. The user  who stores the data is required to have permissions to administer the project.  </p>
     * @param {String} projectIdOrKey the project from which keys will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut(projectIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectIdOrKeyRoleGet operation.
     * @callback module:api/DefaultApi~api2ProjectProjectIdOrKeyRoleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all roles in the given project Id or key, with links to full details on each role.
     * @param {String} projectIdOrKey the project id or project key
     * @param {module:api/DefaultApi~api2ProjectProjectIdOrKeyRoleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectIdOrKeyRoleGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling api2ProjectProjectIdOrKeyRoleGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGet operation.
     * @callback module:api/DefaultApi~api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the issue security scheme for project.
     * @param {String} projectKeyOrId 
     * @param {module:api/DefaultApi~api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGet(projectKeyOrId, callback) {
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGet");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectKeyOrId}/issuesecuritylevelscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectProjectKeyOrIdNotificationschemeGet operation.
     * @callback module:api/DefaultApi~api2ProjectProjectKeyOrIdNotificationschemeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a notification scheme associated with the project.  Follow the documentation of /notificationscheme/{id} resource for all details about returned value.
     * @param {String} projectKeyOrId key or id of the project
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~api2ProjectProjectKeyOrIdNotificationschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectProjectKeyOrIdNotificationschemeGet(projectKeyOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling api2ProjectProjectKeyOrIdNotificationschemeGet");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectKeyOrId}/notificationscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2ProjectvalidateKeyGet operation.
     * @callback module:api/DefaultApi~api2ProjectvalidateKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates a project key.
     * @param {Object} opts Optional parameters
     * @param {String} [key] the project key
     * @param {module:api/DefaultApi~api2ProjectvalidateKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2ProjectvalidateKeyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/projectvalidate/key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2RoleGet operation.
     * @callback module:api/DefaultApi~api2RoleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the ProjectRoles available in JIRA. Currently this list is global.
     * @param {module:api/DefaultApi~api2RoleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2RoleGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete operation.
     * @callback module:api/DefaultApi~api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes avatar
     * @param {Number} id database id for avatar
     * @param {String} type Project id or project key
     * @param {String} owningObjectId 
     * @param {module:api/DefaultApi~api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete(id, type, owningObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete");
      }
      // verify the required parameter 'owningObjectId' is set
      if (owningObjectId === undefined || owningObjectId === null) {
        throw new Error("Missing the required parameter 'owningObjectId' when calling api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete");
      }

      let pathParams = {
        'id': id,
        'type': type,
        'owningObjectId': owningObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost operation.
     * @callback module:api/DefaultApi~api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} type 
     * @param {String} owningObjectId 
     * @param {module:api/DefaultApi~api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost(type, owningObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost");
      }
      // verify the required parameter 'owningObjectId' is set
      if (owningObjectId === undefined || owningObjectId === null) {
        throw new Error("Missing the required parameter 'owningObjectId' when calling api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost");
      }

      let pathParams = {
        'type': type,
        'owningObjectId': owningObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/universal_avatar/type/{type}/owner/{owningObjectId}/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost operation.
     * @callback module:api/DefaultApi~api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} type 
     * @param {String} owningObjectId 
     * @param {module:api/DefaultApi~api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost(type, owningObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost");
      }
      // verify the required parameter 'owningObjectId' is set
      if (owningObjectId === undefined || owningObjectId === null) {
        throw new Error("Missing the required parameter 'owningObjectId' when calling api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost");
      }

      let pathParams = {
        'type': type,
        'owningObjectId': owningObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/universal_avatar/type/{type}/owner/{owningObjectId}/temp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserAvatarIdDelete operation.
     * @callback module:api/DefaultApi~api2UserAvatarIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes avatar
     * @param {Number} id database id for avatar
     * @param {Object} opts Optional parameters
     * @param {String} [username] username
     * @param {module:api/DefaultApi~api2UserAvatarIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserAvatarIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2UserAvatarIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/avatar/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserAvatarPost operation.
     * @callback module:api/DefaultApi~api2UserAvatarPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converts temporary avatar into a real avatar
     * @param {Object} opts Optional parameters
     * @param {String} [username] username
     * @param {module:api/DefaultApi~api2UserAvatarPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserAvatarPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserAvatarPut operation.
     * @callback module:api/DefaultApi~api2UserAvatarPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [username] 
     * @param {module:api/DefaultApi~api2UserAvatarPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserAvatarPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserAvatarTemporaryPost operation.
     * @callback module:api/DefaultApi~api2UserAvatarTemporaryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because  the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from  which the client parses the JSON from.  <p>  Creating a temporary avatar is part of a 3-step process in uploading a new  avatar for a user: upload, crop, confirm. This endpoint allows you to use a multipart upload  instead of sending the image directly as the request body.  </p>  <p>  You *must* use \"avatar\" as the name of the upload parameter:</p>  <p/>  <pre>  curl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\    -F \"avatar=@mynewavatar.png;type=image/png\" \\    'http://localhost:8090/jira/rest/api/2/user/avatar/temporary?username=admin'  </pre>
     * @param {Object} opts Optional parameters
     * @param {String} [username] Username
     * @param {module:api/DefaultApi~api2UserAvatarTemporaryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserAvatarTemporaryPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/avatar/temporary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserAvatarsGet operation.
     * @callback module:api/DefaultApi~api2UserAvatarsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all avatars which are visible for the currently logged in user.
     * @param {Object} opts Optional parameters
     * @param {String} [username] username
     * @param {module:api/DefaultApi~api2UserAvatarsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserAvatarsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/avatars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserColumnsDelete operation.
     * @callback module:api/DefaultApi~api2UserColumnsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the default columns for the given user to the system default. Admin permission will be required to get  columns for a user other than the currently logged in user.
     * @param {Object} opts Optional parameters
     * @param {String} [username] username
     * @param {module:api/DefaultApi~api2UserColumnsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserColumnsDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/columns', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserColumnsGet operation.
     * @callback module:api/DefaultApi~api2UserColumnsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default columns for the given user. Admin permission will be required to get columns for a user  other than the currently logged in user.
     * @param {Object} opts Optional parameters
     * @param {String} [username] username
     * @param {module:api/DefaultApi~api2UserColumnsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserColumnsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/columns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserColumnsPut operation.
     * @callback module:api/DefaultApi~api2UserColumnsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default columns for the given user.  Admin permission will be required to get columns for a user  other than the currently logged in user.
     * @param {module:api/DefaultApi~api2UserColumnsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserColumnsPut(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/columns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserGet operation.
     * @callback module:api/DefaultApi~api2UserGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user. This resource cannot be accessed anonymously.
     * @param {Object} opts Optional parameters
     * @param {String} [username] the username
     * @param {String} [key] user key
     * @param {module:api/DefaultApi~api2UserGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserPropertiesGet operation.
     * @callback module:api/DefaultApi~api2UserPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for the user identified by the key or by the id.
     * @param {Object} opts Optional parameters
     * @param {String} [userKey] key of the user whose properties are to be returned
     * @param {String} [username] username of the user whose properties are to be returned
     * @param {module:api/DefaultApi~api2UserPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserPropertiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userKey': opts['userKey'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/properties/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~api2UserPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the property from the user identified by the key or by the id. Ths user removing the property is required  to have permissions to administer the user.
     * @param {String} propertyKey 
     * @param {Object} opts Optional parameters
     * @param {String} [userKey] key of the user whose property is to be removed
     * @param {String} [username] username of the user whose property is to be removed
     * @param {module:api/DefaultApi~api2UserPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserPropertiesPropertyKeyDelete(propertyKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2UserPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'propertyKey': propertyKey
      };
      let queryParams = {
        'userKey': opts['userKey'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~api2UserPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of the property with a given key from the user identified by the key or by the id. The user who retrieves  the property is required to have permissions to read the user.
     * @param {String} propertyKey 
     * @param {Object} opts Optional parameters
     * @param {String} [userKey] key of the user whose property is to be returned
     * @param {String} [username] username of the user whose property is to be returned
     * @param {module:api/DefaultApi~api2UserPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserPropertiesPropertyKeyGet(propertyKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2UserPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'propertyKey': propertyKey
      };
      let queryParams = {
        'userKey': opts['userKey'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~api2UserPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the specified user's property.  <p>  You can use this resource to store a custom data against the user identified by the key or by the id. The user  who stores the data is required to have permissions to administer the user.  </p>
     * @param {String} propertyKey 
     * @param {Object} opts Optional parameters
     * @param {String} [userKey] key of the user whose property is to be set
     * @param {String} [username] username of the user whose property is to be set
     * @param {module:api/DefaultApi~api2UserPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserPropertiesPropertyKeyPut(propertyKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling api2UserPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'propertyKey': propertyKey
      };
      let queryParams = {
        'userKey': opts['userKey'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2UserPut operation.
     * @callback module:api/DefaultApi~api2UserPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify user. The \"value\" fields present will override the existing value.  Fields skipped in request will not be changed.
     * @param {Object} opts Optional parameters
     * @param {String} [username] the username
     * @param {String} [key] user key
     * @param {module:api/DefaultApi~api2UserPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2UserPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2VersionIdDelete operation.
     * @callback module:api/DefaultApi~api2VersionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project version.
     * @param {String} id The version to delete
     * @param {Object} opts Optional parameters
     * @param {String} [moveFixIssuesTo] The version to set fixVersion to on issues where the deleted version is the fix version,                              If null then the fixVersion is removed.
     * @param {String} [moveAffectedIssuesTo] The version to set affectedVersion to on issues where the deleted version is the affected version,                              If null then the affectedVersion is removed.
     * @param {module:api/DefaultApi~api2VersionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2VersionIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2VersionIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'moveFixIssuesTo': opts['moveFixIssuesTo'],
        'moveAffectedIssuesTo': opts['moveAffectedIssuesTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2VersionIdRemoveAndSwapPost operation.
     * @callback module:api/DefaultApi~api2VersionIdRemoveAndSwapPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project version.
     * @param {String} id The version to delete
     * @param {module:api/DefaultApi~api2VersionIdRemoveAndSwapPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2VersionIdRemoveAndSwapPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2VersionIdRemoveAndSwapPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{id}/removeAndSwap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2VersionVersionIdRemotelinkGlobalIdPost operation.
     * @callback module:api/DefaultApi~api2VersionVersionIdRemotelinkGlobalIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a remote version link via POST.  The link's global ID will be taken from the  JSON payload if provided; otherwise, it will be generated.
     * @param {String} versionId The version ID of the remote link
     * @param {String} globalId The global ID of the remote link
     * @param {module:api/DefaultApi~api2VersionVersionIdRemotelinkGlobalIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2VersionVersionIdRemotelinkGlobalIdPost(versionId, globalId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling api2VersionVersionIdRemotelinkGlobalIdPost");
      }
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling api2VersionVersionIdRemotelinkGlobalIdPost");
      }

      let pathParams = {
        'versionId': versionId,
        'globalId': globalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{versionId}/remotelink/{globalId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2VersionVersionIdRemotelinkPost operation.
     * @callback module:api/DefaultApi~api2VersionVersionIdRemotelinkPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a remote version link via POST.  The link's global ID will be taken from the  JSON payload if provided; otherwise, it will be generated.
     * @param {String} versionId The version for which to delete ALL existing remote version links
     * @param {module:api/DefaultApi~api2VersionVersionIdRemotelinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2VersionVersionIdRemotelinkPost(versionId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling api2VersionVersionIdRemotelinkPost");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{versionId}/remotelink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2WorkflowApi2TransitionsIdPropertiesDelete operation.
     * @callback module:api/DefaultApi~api2WorkflowApi2TransitionsIdPropertiesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a property from the passed transition on the passed workflow. It is not an error to delete a property that  does not exist.
     * @param {Number} id the ID of the transition within the workflow.
     * @param {Object} opts Optional parameters
     * @param {String} [key] the name of the property to add.
     * @param {String} [workflowName] the name of the workflow to use.
     * @param {String} [workflowMode] the type of workflow to use. Can either be \"live\" or \"draft\".
     * @param {module:api/DefaultApi~api2WorkflowApi2TransitionsIdPropertiesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2WorkflowApi2TransitionsIdPropertiesDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2WorkflowApi2TransitionsIdPropertiesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'key': opts['key'],
        'workflowName': opts['workflowName'],
        'workflowMode': opts['workflowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflow/api/2/transitions/{id}/properties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2WorkflowschemeIdIssuetypeIssueTypeDelete operation.
     * @callback module:api/DefaultApi~api2WorkflowschemeIdIssuetypeIssueTypeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the specified issue type mapping from the scheme.
     * @param {String} issueType the issue type being set.
     * @param {Number} id the id of the scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updateDraftIfNeeded] when true will create and return a draft when the workflow scheme cannot be edited                             (e.g. when it is being used by a project).
     * @param {module:api/DefaultApi~api2WorkflowschemeIdIssuetypeIssueTypeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2WorkflowschemeIdIssuetypeIssueTypeDelete(issueType, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling api2WorkflowschemeIdIssuetypeIssueTypeDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2WorkflowschemeIdIssuetypeIssueTypeDelete");
      }

      let pathParams = {
        'issueType': issueType,
        'id': id
      };
      let queryParams = {
        'updateDraftIfNeeded': opts['updateDraftIfNeeded']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/issuetype/{issueType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the api2WorkflowschemeIdIssuetypeIssueTypeGet operation.
     * @callback module:api/DefaultApi~api2WorkflowschemeIdIssuetypeIssueTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the issue type mapping for the passed workflow scheme.
     * @param {String} issueType the issue type being set.
     * @param {Number} id the id of the scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnDraftIfExists = false)] when true indicates that a scheme's draft, if it exists, should be queried instead of                             the scheme itself.
     * @param {module:api/DefaultApi~api2WorkflowschemeIdIssuetypeIssueTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    api2WorkflowschemeIdIssuetypeIssueTypeGet(issueType, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling api2WorkflowschemeIdIssuetypeIssueTypeGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling api2WorkflowschemeIdIssuetypeIssueTypeGet");
      }

      let pathParams = {
        'issueType': issueType,
        'id': id
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/issuetype/{issueType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the approveUpgrade operation.
     * @callback module:api/DefaultApi~approveUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~approveUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    approveUpgrade(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/cluster/zdu/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the areMetricsExposed operation.
     * @callback module:api/DefaultApi~areMetricsExposedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~areMetricsExposedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    areMetricsExposed(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/monitoring/jmx/areMetricsExposed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assign operation.
     * @callback module:api/DefaultApi~assignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns an issue to a user.  You can use this resource to assign issues when the user submitting the request has the assign permission but not the  edit issue permission.  If the name is \"-1\" automatic assignee is used.  A null name will remove the assignee.
     * @param {String} issueIdOrKey a String containing an issue key
     * @param {module:api/DefaultApi~assignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assign(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling assign");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/assignee', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignPermissionScheme operation.
     * @callback module:api/DefaultApi~assignPermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns a permission scheme with a project.
     * @param {String} projectKeyOrId key or id of the project
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~assignPermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assignPermissionScheme(projectKeyOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling assignPermissionScheme");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectKeyOrId}/permissionscheme', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the canMoveSubTask operation.
     * @callback module:api/DefaultApi~canMoveSubTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} issueIdOrKey The parent issue's key or id
     * @param {module:api/DefaultApi~canMoveSubTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    canMoveSubTask(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling canMoveSubTask");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/subtask/move', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelUpgrade operation.
     * @callback module:api/DefaultApi~cancelUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~cancelUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelUpgrade(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/cluster/zdu/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeMyPassword operation.
     * @callback module:api/DefaultApi~changeMyPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify caller password.
     * @param {module:api/DefaultApi~changeMyPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeMyPassword(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/myself/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeUserPassword operation.
     * @callback module:api/DefaultApi~changeUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify user password.
     * @param {Object} opts Optional parameters
     * @param {String} [username] the username
     * @param {String} [key] user key
     * @param {module:api/DefaultApi~changeUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeUserPassword(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createComponent operation.
     * @callback module:api/DefaultApi~createComponentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a component via POST.
     * @param {module:api/DefaultApi~createComponentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createComponent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/component', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomField operation.
     * @callback module:api/DefaultApi~createCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a custom field using a definition (object encapsulating custom field data)
     * @param {module:api/DefaultApi~createCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createCustomField(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/field', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDraftForParent operation.
     * @callback module:api/DefaultApi~createDraftForParentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a draft for the passed scheme. The draft will be a copy of the state of the parent.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~createDraftForParentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createDraftForParent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createDraftForParent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/createdraft', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFilter operation.
     * @callback module:api/DefaultApi~createFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new filter, and returns newly created filter.  Currently sets permissions just using the users default sharing permissions
     * @param {Object} opts Optional parameters
     * @param {String} [expand] the parameters to expand
     * @param {module:api/DefaultApi~createFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/DefaultApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a group by given group parameter  <p>  Returns REST representation for the requested group.
     * @param {module:api/DefaultApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createGroup(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIssue operation.
     * @callback module:api/DefaultApi~createIssueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an issue or a sub-task from a JSON representation.  <p/>  The fields that can be set on create, in either the fields parameter or the update parameter can be determined  using the <b>/rest/api/2/issue/createmeta</b> resource.  If a field is not configured to appear on the create screen, then it will not be in the createmeta, and a field  validation error will occur if it is submitted.  <p/>  Creating a sub-task is similar to creating a regular issue, with two important differences:  <ul>  <li>the <code>issueType</code> field must correspond to a sub-task issue type (you can use  <code>/issue/createmeta</code> to discover sub-task issue types), and</li>  <li>you must provide a <code>parent</code> field in the issue create request containing the id or key of the  parent issue.</li>  </ul>
     * @param {module:api/DefaultApi~createIssueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createIssue(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIssueLinkType operation.
     * @callback module:api/DefaultApi~createIssueLinkTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new issue link type.
     * @param {module:api/DefaultApi~createIssueLinkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createIssueLinkType(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issueLinkType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIssueType operation.
     * @callback module:api/DefaultApi~createIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an issue type from a JSON representation and adds the issue newly created issue type to the default issue  type scheme.
     * @param {module:api/DefaultApi~createIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createIssueType(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIssues operation.
     * @callback module:api/DefaultApi~createIssuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates issues or sub-tasks from a JSON representation.  <p/>  Creates many issues in one bulk operation.  <p/>  Creating a sub-task is similar to creating a regular issue. More details can be found in createIssue section:  {@link IssueResource#createIssue(IssueUpdateBean)}}
     * @param {module:api/DefaultApi~createIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createIssues(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrUpdateRemoteIssueLink operation.
     * @callback module:api/DefaultApi~createOrUpdateRemoteIssueLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a remote issue link from a JSON representation. If a globalId is provided and a remote issue link  exists with that globalId, the remote issue link is updated. Otherwise, the remote issue link is created.
     * @param {String} issueIdOrKey the issue to create the remote issue link for
     * @param {module:api/DefaultApi~createOrUpdateRemoteIssueLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createOrUpdateRemoteIssueLink(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling createOrUpdateRemoteIssueLink");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/remotelink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPermissionGrant operation.
     * @callback module:api/DefaultApi~createPermissionGrantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a permission grant in a permission scheme.
     * @param {Number} schemeId 
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~createPermissionGrantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createPermissionGrant(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling createPermissionGrant");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{schemeId}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPermissionScheme operation.
     * @callback module:api/DefaultApi~createPermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new permission scheme.  This method can create schemes with a defined permission set, or without.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~createPermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createPermissionScheme(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/DefaultApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new project.
     * @param {module:api/DefaultApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createProject(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectCategory operation.
     * @callback module:api/DefaultApi~createProjectCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project category via POST.
     * @param {module:api/DefaultApi~createProjectCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createProjectCategory(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/projectCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectRole operation.
     * @callback module:api/DefaultApi~createProjectRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new ProjectRole to be available in JIRA.  The created role does not have any default actors assigned.
     * @param {module:api/DefaultApi~createProjectRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createProjectRole(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProperty operation.
     * @callback module:api/DefaultApi~createPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new property to a transition. Trying to add a property that already  exists will fail.
     * @param {Number} id the ID of the transition within the workflow.
     * @param {Object} opts Optional parameters
     * @param {String} [key] the name of the property to add.
     * @param {String} [workflowName] the name of the workflow to use.
     * @param {String} [workflowMode] the type of workflow to use. Can either be \"live\" or \"draft\".
     * @param {module:api/DefaultApi~createPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createProperty(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createProperty");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'key': opts['key'],
        'workflowName': opts['workflowName'],
        'workflowMode': opts['workflowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflow/api/2/transitions/{id}/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScheme operation.
     * @callback module:api/DefaultApi~createSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new workflow scheme.  <p/>  The body contains a representation of the new scheme. Values not passed are assumed to be set to their defaults.
     * @param {module:api/DefaultApi~createSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createScheme(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user. By default created user will not be notified with email.  If password field is not set then password will be randomly generated.
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVersion operation.
     * @callback module:api/DefaultApi~createVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a version via POST.
     * @param {module:api/DefaultApi~createVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createVersion(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentUser operation.
     * @callback module:api/DefaultApi~currentUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the currently authenticated user's session. If the caller is not authenticated they  will get a 401 Unauthorized status code.
     * @param {module:api/DefaultApi~currentUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    currentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/1/session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteActor operation.
     * @callback module:api/DefaultApi~deleteActorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes actors (users or groups) from a project role.  <p>  <ul>  <li>Delete a user from the role: <code>/rest/api/2/project/{projectIdOrKey}/role/{roleId}?user={username}</code></li>  <li>Delete a group from the role: <code>/rest/api/2/project/{projectIdOrKey}/role/{roleId}?group={groupname}</code></li>  </ul>
     * @param {String} projectIdOrKey the project id or project key
     * @param {Number} id the project role id
     * @param {Object} opts Optional parameters
     * @param {String} [user] the username to remove from the project role
     * @param {String} [group] the groupname to remove from the project role
     * @param {module:api/DefaultApi~deleteActorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteActor(projectIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling deleteActor");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteActor");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
        'user': opts['user'],
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/role/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComment operation.
     * @callback module:api/DefaultApi~deleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing comment .
     * @param {String} issueIdOrKey of the issue the comment belongs to
     * @param {String} id the ID of the comment to request
     * @param {module:api/DefaultApi~deleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComment(issueIdOrKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteComment");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/comment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDefault operation.
     * @callback module:api/DefaultApi~deleteDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the default workflow from the passed workflow scheme.
     * @param {Number} id the id of the scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updateDraftIfNeeded] when true will create and return a draft when the workflow scheme cannot be edited                             (e.g. when it is being used by a project).
     * @param {module:api/DefaultApi~deleteDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDefault(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDefault");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'updateDraftIfNeeded': opts['updateDraftIfNeeded']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/default', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDraftById operation.
     * @callback module:api/DefaultApi~deleteDraftByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the passed draft workflow scheme.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~deleteDraftByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDraftById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDraftById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDraftDefault operation.
     * @callback module:api/DefaultApi~deleteDraftDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the default workflow from the passed draft workflow scheme.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~deleteDraftDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDraftDefault(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDraftDefault");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/default', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDraftIssueType operation.
     * @callback module:api/DefaultApi~deleteDraftIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the specified issue type mapping from the draft scheme.
     * @param {String} issueType the issue type being set.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~deleteDraftIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDraftIssueType(issueType, id, callback) {
      let postBody = null;
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling deleteDraftIssueType");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDraftIssueType");
      }

      let pathParams = {
        'issueType': issueType,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/issuetype/{issueType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDraftWorkflowMapping operation.
     * @callback module:api/DefaultApi~deleteDraftWorkflowMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the passed workflow from the draft workflow scheme.
     * @param {Number} id the id of the parent scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] the name of the workflow to delete.
     * @param {module:api/DefaultApi~deleteDraftWorkflowMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDraftWorkflowMapping(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDraftWorkflowMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/workflow', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFilter operation.
     * @callback module:api/DefaultApi~deleteFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a filter.
     * @param {Number} id the id of the filter being looked up
     * @param {module:api/DefaultApi~deleteFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFilter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFilter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIssue operation.
     * @callback module:api/DefaultApi~deleteIssueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue.  <p/>  If the issue has subtasks you must set the parameter deleteSubtasks=true to delete the issue.  You cannot delete an issue without its subtasks also being deleted.
     * @param {String} issueIdOrKey the issue id or key to update (i.e. JRA-1330)
     * @param {Object} opts Optional parameters
     * @param {String} [deleteSubtasks] a String of true or false indicating that any subtasks should also be deleted.  If the                        issue has no subtasks this parameter is ignored.  If the issue has subtasks and this parameter is missing or false,                        then the issue will not be deleted and an error will be returned.
     * @param {module:api/DefaultApi~deleteIssueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIssue(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteIssue");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'deleteSubtasks': opts['deleteSubtasks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIssueLink operation.
     * @callback module:api/DefaultApi~deleteIssueLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an issue link with the specified id.  To be able to delete an issue link you must be able to view both issues and must have the link issue permission  for at least one of the issues.
     * @param {String} linkId the issue link id.
     * @param {module:api/DefaultApi~deleteIssueLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIssueLink(linkId, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling deleteIssueLink");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issueLink/{linkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIssueLinkType operation.
     * @callback module:api/DefaultApi~deleteIssueLinkTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified issue link type.
     * @param {String} issueLinkTypeId 
     * @param {module:api/DefaultApi~deleteIssueLinkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIssueLinkType(issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling deleteIssueLinkType");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issueLinkType/{issueLinkTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionScheme operation.
     * @callback module:api/DefaultApi~deletePermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a permission scheme identified by the given id.
     * @param {Number} schemeId 
     * @param {module:api/DefaultApi~deletePermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionScheme(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling deletePermissionScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{schemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSchemeEntity operation.
     * @callback module:api/DefaultApi~deletePermissionSchemeEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a permission grant from a permission scheme.
     * @param {Number} permissionId 
     * @param {Number} schemeId 
     * @param {module:api/DefaultApi~deletePermissionSchemeEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionSchemeEntity(permissionId, schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling deletePermissionSchemeEntity");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling deletePermissionSchemeEntity");
      }

      let pathParams = {
        'permissionId': permissionId,
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{schemeId}/permission/{permissionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/DefaultApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project.
     * @param {String} projectIdOrKey the project id or project key
     * @param {module:api/DefaultApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling deleteProject");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectRole operation.
     * @callback module:api/DefaultApi~deleteProjectRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a role. May return 403 in the future
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [swap] if given, removes a role even if it is used in scheme by replacing the role with the given one
     * @param {module:api/DefaultApi~deleteProjectRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectRole(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'swap': opts['swap']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectRoleActorsFromRole operation.
     * @callback module:api/DefaultApi~deleteProjectRoleActorsFromRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes default actor from the given role.
     * @param {Number} id the role id to remove the actors from
     * @param {Object} opts Optional parameters
     * @param {String} [user] if given, removes an actor from given role
     * @param {String} [group] if given, removes an actor from given role
     * @param {module:api/DefaultApi~deleteProjectRoleActorsFromRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectRoleActorsFromRole(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectRoleActorsFromRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'user': opts['user'],
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role/{id}/actors', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRemoteIssueLinkByGlobalId operation.
     * @callback module:api/DefaultApi~deleteRemoteIssueLinkByGlobalIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the remote issue link with the given global id on the issue.
     * @param {String} issueIdOrKey the issue to create the remote issue link for
     * @param {Object} opts Optional parameters
     * @param {String} [globalId] the global id of the remote issue link
     * @param {module:api/DefaultApi~deleteRemoteIssueLinkByGlobalIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteIssueLinkByGlobalId(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteRemoteIssueLinkByGlobalId");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'globalId': opts['globalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/remotelink', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRemoteIssueLinkById operation.
     * @callback module:api/DefaultApi~deleteRemoteIssueLinkByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the remote issue link with the given id on the issue.
     * @param {String} linkId the id of the remote issue link
     * @param {String} issueIdOrKey the issue to create the remote issue link for
     * @param {module:api/DefaultApi~deleteRemoteIssueLinkByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteIssueLinkById(linkId, issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling deleteRemoteIssueLinkById");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteRemoteIssueLinkById");
      }

      let pathParams = {
        'linkId': linkId,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/remotelink/{linkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRemoteVersionLink operation.
     * @callback module:api/DefaultApi~deleteRemoteVersionLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific remote version link with the given version ID and global ID.
     * @param {String} versionId The version ID of the remote link
     * @param {String} globalId The global ID of the remote link
     * @param {module:api/DefaultApi~deleteRemoteVersionLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteVersionLink(versionId, globalId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteRemoteVersionLink");
      }
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling deleteRemoteVersionLink");
      }

      let pathParams = {
        'versionId': versionId,
        'globalId': globalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{versionId}/remotelink/{globalId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRemoteVersionLinksByVersionId operation.
     * @callback module:api/DefaultApi~deleteRemoteVersionLinksByVersionIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all remote version links for a given version ID.
     * @param {String} versionId The version for which to delete ALL existing remote version links
     * @param {module:api/DefaultApi~deleteRemoteVersionLinksByVersionIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteVersionLinksByVersionId(versionId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteRemoteVersionLinksByVersionId");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{versionId}/remotelink', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScheme operation.
     * @callback module:api/DefaultApi~deleteSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the passed workflow scheme.
     * @param {Number} id the id of the scheme.
     * @param {module:api/DefaultApi~deleteSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScheme(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteScheme");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSharePermission operation.
     * @callback module:api/DefaultApi~deleteSharePermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a share permissions from the given filter.
     * @param {Number} id 
     * @param {Number} permissionId 
     * @param {module:api/DefaultApi~deleteSharePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSharePermission(id, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSharePermission");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling deleteSharePermission");
      }

      let pathParams = {
        'id': id,
        'permission-id': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}/permission/{permission-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTab operation.
     * @callback module:api/DefaultApi~deleteTabCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes tab to give screen
     * @param {Number} screenId id of screen
     * @param {Number} tabId id of tab
     * @param {module:api/DefaultApi~deleteTabCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTab(screenId, tabId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling deleteTab");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling deleteTab");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs/{tabId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflowMapping operation.
     * @callback module:api/DefaultApi~deleteWorkflowMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the passed workflow from the workflow scheme.
     * @param {Number} id the id of the scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] the name of the workflow to delete.
     * @param {Boolean} [updateDraftIfNeeded] flag to indicate if a draft should be created if necessary to delete the workflow                             from the scheme.
     * @param {module:api/DefaultApi~deleteWorkflowMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkflowMapping(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkflowMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName'],
        'updateDraftIfNeeded': opts['updateDraftIfNeeded']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/workflow', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorklog operation.
     * @callback module:api/DefaultApi~deleteWorklogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing worklog entry.
     * @param {String} issueIdOrKey a string containing the issue id or key the worklog belongs to
     * @param {String} id id of the worklog to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [adjustEstimate] (optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are                        <ul>                        <li>\"new\" - sets the estimate to a specific value</li>                        <li>\"leave\"- leaves the estimate as is</li>                        <li>\"manual\" - specify a specific amount to increase remaining estimate by</li>                        <li>\"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog</li> </ul>
     * @param {String} [newEstimate] (required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field. e.g. \"2d\"
     * @param {String} [increaseBy] (required when \"manual\" is selected for adjustEstimate) the amount to increase the remaining estimate by e.g. \"2d\"
     * @param {module:api/DefaultApi~deleteWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorklog(issueIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling deleteWorklog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
        'adjustEstimate': opts['adjustEstimate'],
        'newEstimate': opts['newEstimate'],
        'increaseBy': opts['increaseBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/worklog/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doTransition operation.
     * @callback module:api/DefaultApi~doTransitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a transition on an issue.  When performing the transition you can update or set other issue fields.  <p/>  The fields that can be set on transtion, in either the fields parameter or the update parameter can be determined  using the <b>/rest/api/2/issue/{issueIdOrKey}/transitions?expand=transitions.fields</b> resource.  If a field is not configured to appear on the transition screen, then it will not be in the transition metadata, and a field  validation error will occur if it is submitted.
     * @param {String} issueIdOrKey the issue whose transitions you want to view
     * @param {module:api/DefaultApi~doTransitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doTransition(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling doTransition");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/transitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editFilter operation.
     * @callback module:api/DefaultApi~editFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing filter, and returns its new value.
     * @param {Number} id the id of the filter being looked up
     * @param {Object} opts Optional parameters
     * @param {String} [expand] the parameters to expand
     * @param {module:api/DefaultApi~editFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editFilter(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editFilter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editIssue operation.
     * @callback module:api/DefaultApi~editIssueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edits an issue from a JSON representation.  <p/>  The issue can either be updated by setting explicit the field value(s)  or by using an operation to change the field value.  <p/>  The fields that can be updated, in either the fields parameter or the update parameter, can be determined  using the <b>/rest/api/2/issue/{issueIdOrKey}/editmeta</b> resource.<br>  If a field is not configured to appear on the edit screen, then it will not be in the editmeta, and a field  validation error will occur if it is submitted.  <p/>  Specifying a \"field_id\": field_value in the \"fields\" is a shorthand for a \"set\" operation in the \"update\" section.<br>  Field should appear either in \"fields\" or \"update\", not in both.
     * @param {String} issueIdOrKey the issue id or key to update (i.e. JRA-1330)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [notifyUsers = true)] send the email with notification that the issue was updated to users that watch it.                     Admin or project admin permissions are required to disable the notification.
     * @param {module:api/DefaultApi~editIssueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editIssue(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling editIssue");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'notifyUsers': opts['notifyUsers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expandForHumans operation.
     * @callback module:api/DefaultApi~expandForHumansCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tries to expand an attachment. Output is human-readable and subject to change.
     * @param {String} id the id of the attachment to expand.
     * @param {module:api/DefaultApi~expandForHumansCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expandForHumans(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expandForHumans");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/attachment/{id}/expand/human', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expandForMachines operation.
     * @callback module:api/DefaultApi~expandForMachinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tries to expand an attachment. Output is raw and should be backwards-compatible through the course of time.
     * @param {String} id the id of the attachment to expand.
     * @param {module:api/DefaultApi~expandForMachinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expandForMachines(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expandForMachines");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/attachment/{id}/expand/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAssignableUsers operation.
     * @callback module:api/DefaultApi~findAssignableUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users that match the search string. This resource cannot be accessed anonymously.  Please note that this resource should be called with an issue key when a list of assignable users is retrieved  for editing.  For create only a project key should be supplied.  The list of assignable users may be incorrect  if it's called with the project key for editing.
     * @param {Object} opts Optional parameters
     * @param {String} [username] the username
     * @param {String} [project] the key of the project we are finding assignable users for
     * @param {String} [issueKey] the issue key for the issue being edited we need to find assignable users for.
     * @param {Number} [startAt] the index of the first user to return (0-based)
     * @param {Number} [maxResults] the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.                    If you specify a value that is higher than this number, your search results will be truncated.
     * @param {Number} [actionDescriptorId] 
     * @param {module:api/DefaultApi~findAssignableUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findAssignableUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'project': opts['project'],
        'issueKey': opts['issueKey'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'actionDescriptorId': opts['actionDescriptorId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/assignable/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findBulkAssignableUsers operation.
     * @callback module:api/DefaultApi~findBulkAssignableUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users that match the search string and can be assigned issues for all the given projects.  This resource cannot be accessed anonymously.
     * @param {Object} opts Optional parameters
     * @param {String} [username] the username
     * @param {String} [projectKeys] the keys of the projects we are finding assignable users for, comma-separated
     * @param {Number} [startAt] the index of the first user to return (0-based)
     * @param {Number} [maxResults] the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.                        If you specify a value that is higher than this number, your search results will be truncated.
     * @param {module:api/DefaultApi~findBulkAssignableUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findBulkAssignableUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'projectKeys': opts['projectKeys'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/assignable/multiProjectSearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findGroups operation.
     * @callback module:api/DefaultApi~findGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns groups with substrings matching a given query. This is mainly for use with  the group picker, so the returned groups contain html to be used as picker suggestions.  The groups are also wrapped in a single response object that also contains a header for  use in the picker, specifically <i>Showing X of Y matching groups</i>.  <p>  The number of groups returned is limited by the system property \"jira.ajax.autocomplete.limit\"  <p>  The groups will be unique and sorted.
     * @param {Object} opts Optional parameters
     * @param {String} [query] a String to match groups agains
     * @param {String} [exclude] 
     * @param {Number} [maxResults] 
     * @param {String} [userName] 
     * @param {module:api/DefaultApi~findGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'exclude': opts['exclude'],
        'maxResults': opts['maxResults'],
        'userName': opts['userName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/groups/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsers operation.
     * @callback module:api/DefaultApi~findUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users that match the search string. This resource cannot be accessed anonymously.
     * @param {Object} opts Optional parameters
     * @param {String} [username] A query string used to search username, name or e-mail address
     * @param {Number} [startAt] the index of the first user to return (0-based)
     * @param {Number} [maxResults] the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.                         If you specify a value that is higher than this number, your search results will be truncated.
     * @param {Boolean} [includeActive] If true, then active users are included in the results (default true)
     * @param {Boolean} [includeInactive] If true, then inactive users are included in the results (default false)
     * @param {module:api/DefaultApi~findUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'includeActive': opts['includeActive'],
        'includeInactive': opts['includeInactive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsersAndGroups operation.
     * @callback module:api/DefaultApi~findUsersAndGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users and groups matching query with highlighting. This resource cannot be accessed  anonymously.
     * @param {Object} opts Optional parameters
     * @param {String} [query] A string used to search username, Name or e-mail address
     * @param {Number} [maxResults] the maximum number of users to return (defaults to 50). The maximum allowed value is 1000. If                     you specify a value that is higher than this number, your search results will be truncated.
     * @param {Boolean} [showAvatar] 
     * @param {String} [fieldId] The custom field id, if this request comes from a custom field, such as a user picker. Optional.
     * @param {String} [projectId] The list of project ids to further restrict the search                     This parameter can occur multiple times to pass in multiple project ids.                     Comma separated value is not supported.                     This parameter is only used when fieldId is present.
     * @param {String} [issueTypeId] The list of issue type ids to further restrict the search.                     This parameter can occur multiple times to pass in multiple issue type ids.                     Comma separated value is not supported.                     Special values such as -1 (all standard issue types), -2 (all subtask issue types) are supported.                     This parameter is only used when fieldId is present.
     * @param {module:api/DefaultApi~findUsersAndGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findUsersAndGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'maxResults': opts['maxResults'],
        'showAvatar': opts['showAvatar'],
        'fieldId': opts['fieldId'],
        'projectId': opts['projectId'],
        'issueTypeId': opts['issueTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/groupuserpicker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsersForPicker operation.
     * @callback module:api/DefaultApi~findUsersForPickerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users matching query with highlighting. This resource cannot be accessed anonymously.
     * @param {Object} opts Optional parameters
     * @param {String} [query] A string used to search username, Name or e-mail address
     * @param {Number} [maxResults] the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.                    If you specify a value that is higher than this number, your search results will be truncated.
     * @param {Boolean} [showAvatar] 
     * @param {String} [exclude] 
     * @param {module:api/DefaultApi~findUsersForPickerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findUsersForPicker(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'maxResults': opts['maxResults'],
        'showAvatar': opts['showAvatar'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsersWithAllPermissions operation.
     * @callback module:api/DefaultApi~findUsersWithAllPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of active users that match the search string and have all specified permissions for the project or issue.<br>  This resource can be accessed by users with ADMINISTER_PROJECT permission for the project or global ADMIN or SYSADMIN rights.
     * @param {Object} opts Optional parameters
     * @param {String} [username] the username filter, list includes all users if unspecified
     * @param {String} [permissions] comma separated list of permissions for project or issue returned users must have, see                     <a href=\"https://developer.atlassian.com/static/javadoc/jira/6.0/reference/com/atlassian/jira/security/Permissions.Permission.html\">Permissions</a>                     JavaDoc for the list of all possible permissions.
     * @param {String} [issueKey] the issue key for the issue for which returned users have specified permissions.
     * @param {String} [projectKey] the optional project key to search for users with if no issueKey is supplied.
     * @param {Number} [startAt] the index of the first user to return (0-based)
     * @param {Number} [maxResults] the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.                     If you specify a value that is higher than this number, your search results will be truncated.
     * @param {module:api/DefaultApi~findUsersWithAllPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findUsersWithAllPermissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'permissions': opts['permissions'],
        'issueKey': opts['issueKey'],
        'projectKey': opts['projectKey'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/permission/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsersWithBrowsePermission operation.
     * @callback module:api/DefaultApi~findUsersWithBrowsePermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of active users that match the search string. This resource cannot be accessed anonymously   and requires the Browse Users global permission.  Given an issue key this resource will provide a list of users that match the search string and have  the browse issue permission for the issue provided.
     * @param {Object} opts Optional parameters
     * @param {String} [username] the username filter, no users returned if left blank
     * @param {String} [issueKey] the issue key for the issue being edited we need to find viewable users for.
     * @param {String} [projectKey] the optional project key to search for users with if no issueKey is supplied.
     * @param {Number} [startAt] the index of the first user to return (0-based)
     * @param {Number} [maxResults] the maximum number of users to return (defaults to 50). The maximum allowed value is 1000.                    If you specify a value that is higher than this number, your search results will be truncated.
     * @param {module:api/DefaultApi~findUsersWithBrowsePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findUsersWithBrowsePermission(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'issueKey': opts['issueKey'],
        'projectKey': opts['projectKey'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/viewissue/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullyUpdateProjectRole operation.
     * @callback module:api/DefaultApi~fullyUpdateProjectRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fully updates a roles. Both name and description must be given.
     * @param {Number} id 
     * @param {module:api/DefaultApi~fullyUpdateProjectRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fullyUpdateProjectRole(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullyUpdateProjectRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/DefaultApi~getCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the ApplicationRole with passed key if it exists.
     * @param {String} key the key of the role to update.
     * @param {module:api/DefaultApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     */
    get(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling get");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/applicationrole/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessibleProjectTypeByKey operation.
     * @callback module:api/DefaultApi~getAccessibleProjectTypeByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the project type with the given key, if it is accessible to the logged in user.  This takes into account whether the user is licensed on the Application that defines the project type.
     * @param {String} projectTypeKey 
     * @param {module:api/DefaultApi~getAccessibleProjectTypeByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAccessibleProjectTypeByKey(projectTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectTypeKey' is set
      if (projectTypeKey === undefined || projectTypeKey === null) {
        throw new Error("Missing the required parameter 'projectTypeKey' when calling getAccessibleProjectTypeByKey");
      }

      let pathParams = {
        'projectTypeKey': projectTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/type/{projectTypeKey}/accessible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdvancedSettings operation.
     * @callback module:api/DefaultApi~getAdvancedSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the properties that are displayed on the \"General Configuration > Advanced Settings\" page.
     * @param {module:api/DefaultApi~getAdvancedSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAdvancedSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/application-properties/advanced-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll operation.
     * @callback module:api/DefaultApi~getAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all ApplicationRoles in the system. Will also return an ETag header containing a version hash of the  collection of ApplicationRoles.
     * @param {module:api/DefaultApi~getAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/applicationrole', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFields operation.
     * @callback module:api/DefaultApi~getAllFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all fields for a given tab
     * @param {Number} screenId id of screen
     * @param {Number} tabId id of tab
     * @param {Object} opts Optional parameters
     * @param {String} [projectKey] the key of the project; this parameter is optional
     * @param {module:api/DefaultApi~getAllFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllFields(screenId, tabId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling getAllFields");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling getAllFields");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
        'projectKey': opts['projectKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs/{tabId}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPermissions operation.
     * @callback module:api/DefaultApi~getAllPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all permissions that are present in the JIRA instance - Global, Project and the global ones added by plugins
     * @param {module:api/DefaultApi~getAllPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllPermissions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProjectCategories operation.
     * @callback module:api/DefaultApi~getAllProjectCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all project categories
     * @param {module:api/DefaultApi~getAllProjectCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllProjectCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/projectCategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProjectTypes operation.
     * @callback module:api/DefaultApi~getAllProjectTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the project types defined on the JIRA instance, not taking into account whether  the license to use those project types is valid or not.
     * @param {module:api/DefaultApi~getAllProjectTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllProjectTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProjects operation.
     * @callback module:api/DefaultApi~getAllProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all projects which are visible for the currently logged in user. If no user is logged in, it returns the  list of projects that are visible when using anonymous access.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] the parameters to expand
     * @param {Number} [recent] if this parameter is set then only projects recently accessed by the current user (if not logged in then based on HTTP session) will be returned (maximum count limited to the specified number but no more than 20).
     * @param {module:api/DefaultApi~getAllProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'recent': opts['recent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllStatuses operation.
     * @callback module:api/DefaultApi~getAllStatusesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issue types with valid status values for a project
     * @param {String} projectIdOrKey Project id or project key
     * @param {module:api/DefaultApi~getAllStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllStatuses(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getAllStatuses");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSystemAvatars operation.
     * @callback module:api/DefaultApi~getAllSystemAvatarsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all system avatars of the given type.
     * @param {String} type the avatar type
     * @param {module:api/DefaultApi~getAllSystemAvatarsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllSystemAvatars(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAllSystemAvatars");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/avatar/{type}/system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTabs operation.
     * @callback module:api/DefaultApi~getAllTabsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all tabs for the given screen
     * @param {Number} screenId id of screen
     * @param {Object} opts Optional parameters
     * @param {String} [projectKey] the key of the project; this parameter is optional
     * @param {module:api/DefaultApi~getAllTabsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllTabs(screenId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling getAllTabs");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
        'projectKey': opts['projectKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllWorkflows operation.
     * @callback module:api/DefaultApi~getAllWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all workflows.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] 
     * @param {module:api/DefaultApi~getAllWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllWorkflows(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlternativeIssueTypes operation.
     * @callback module:api/DefaultApi~getAlternativeIssueTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all alternative issue types for the given issue type id. The list will contain these issues types, to which  issues assigned to the given issue type can be migrated. The suitable alternatives are issue types which are assigned  to the same workflow, the same field configuration and the same screen scheme.
     * @param {String} id 
     * @param {module:api/DefaultApi~getAlternativeIssueTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAlternativeIssueTypes(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlternativeIssueTypes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{id}/alternatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssignedPermissionScheme operation.
     * @callback module:api/DefaultApi~getAssignedPermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a permission scheme assigned with a project.
     * @param {String} projectKeyOrId key or id of the project
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~getAssignedPermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAssignedPermissionScheme(projectKeyOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling getAssignedPermissionScheme");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectKeyOrId}/permissionscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachment operation.
     * @callback module:api/DefaultApi~getAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the meta-data for an attachment, including the URI of the actual attached file.
     * @param {String} id id of the attachment to remove
     * @param {module:api/DefaultApi~getAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAttachment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAttachment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/attachment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachmentMeta operation.
     * @callback module:api/DefaultApi~getAttachmentMetaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the meta information for an attachments, specifically if they are enabled and the maximum upload size  allowed.
     * @param {module:api/DefaultApi~getAttachmentMetaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAttachmentMeta(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/attachment/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoComplete operation.
     * @callback module:api/DefaultApi~getAutoCompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the auto complete data required for JQL searches.
     * @param {module:api/DefaultApi~getAutoCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAutoComplete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/jql/autocompletedata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableMetrics operation.
     * @callback module:api/DefaultApi~getAvailableMetricsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getAvailableMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAvailableMetrics(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/monitoring/jmx/getAvailableMetrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvatars operation.
     * @callback module:api/DefaultApi~getAvatarsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} type 
     * @param {String} owningObjectId 
     * @param {module:api/DefaultApi~getAvatarsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAvatars(type, owningObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAvatars");
      }
      // verify the required parameter 'owningObjectId' is set
      if (owningObjectId === undefined || owningObjectId === null) {
        throw new Error("Missing the required parameter 'owningObjectId' when calling getAvatars");
      }

      let pathParams = {
        'type': type,
        'owningObjectId': owningObjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/universal_avatar/type/{type}/owner/{owningObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById operation.
     * @callback module:api/DefaultApi~getByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the requested workflow scheme to the caller.
     * @param {Number} id the id of the scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnDraftIfExists = false)] when true indicates that a scheme's draft, if it exists, should be queried instead of                             the scheme itself.
     * @param {module:api/DefaultApi~getByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComment operation.
     * @callback module:api/DefaultApi~getCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single comment.
     * @param {String} issueIdOrKey of the issue the comment belongs to
     * @param {String} id the ID of the comment to request
     * @param {Object} opts Optional parameters
     * @param {String} [expand] optional flags: renderedBody (provides body rendered in HTML)
     * @param {module:api/DefaultApi~getCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getComment(issueIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComment");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/comment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComments operation.
     * @callback module:api/DefaultApi~getCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all comments for an issue.  <p>  Results can be ordered by the \"created\" field which means the date a comment was added.  </p>
     * @param {String} issueIdOrKey a string containing the issue id or key the comment will be added to
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] the page offset, if not specified then defaults to 0
     * @param {Number} [maxResults] how many results on the page should be included. Defaults to 50.
     * @param {String} [orderBy] ordering of the results.
     * @param {String} [expand] optional flags: renderedBody (provides body rendered in HTML)
     * @param {module:api/DefaultApi~getCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getComments(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getComments");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/comment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComponent operation.
     * @callback module:api/DefaultApi~getComponentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a project component.
     * @param {String} id The component to delete.
     * @param {module:api/DefaultApi~getComponentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getComponent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComponent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/component/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComponentRelatedIssues operation.
     * @callback module:api/DefaultApi~getComponentRelatedIssuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns counts of issues related to this component.
     * @param {String} id a String containing the component id
     * @param {module:api/DefaultApi~getComponentRelatedIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getComponentRelatedIssues(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComponentRelatedIssues");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/component/{id}/relatedIssueCounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguration operation.
     * @callback module:api/DefaultApi~getConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the information if the optional features in JIRA are enabled or disabled. If the time tracking is enabled,  it also returns the detailed information about time tracking configuration.
     * @param {module:api/DefaultApi~getConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConfiguration(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreateIssueMeta operation.
     * @callback module:api/DefaultApi~getCreateIssueMetaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the meta data for creating issues. This includes the available projects, issue types and fields,  including field types and whether or not those fields are required.  Projects will not be returned if the user does not have permission to create issues in that project.  <p/>  The fields in the createmeta correspond to the fields in the create screen for the project/issuetype.  Fields not in the screen will not be in the createmeta.  <p/>  Fields will only be returned if <code>expand=projects.issuetypes.fields</code>.  <p/>  The results can be filtered by project and/or issue type, given by the query params.
     * @param {Object} opts Optional parameters
     * @param {String} [projectIds] combined with the projectKeys param, lists the projects with which to filter the results. If absent, all projects are returned.                        This parameter can be specified multiple times, and/or be a comma-separated list.                        Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results.
     * @param {String} [projectKeys] combined with the projectIds param, lists the projects with which to filter the results. If null, all projects are returned.                        This parameter can be specified multiple times, and/or be a comma-separated list.                        Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results.
     * @param {String} [issuetypeIds] combinded with issuetypeNames, lists the issue types with which to filter the results. If null, all issue types are returned.                        This parameter can be specified multiple times, and/or be a comma-separated list.                        Specifiying an issue type that does not exist is not an error.
     * @param {String} [issuetypeNames] combinded with issuetypeIds, lists the issue types with which to filter the results. If null, all issue types are returned.                        This parameter can be specified multiple times, but is NOT interpreted as a comma-separated list.                        Specifiying an issue type that does not exist is not an error.
     * @param {module:api/DefaultApi~getCreateIssueMetaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCreateIssueMeta(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'projectIds': opts['projectIds'],
        'projectKeys': opts['projectKeys'],
        'issuetypeIds': opts['issuetypeIds'],
        'issuetypeNames': opts['issuetypeNames']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/createmeta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFieldOption operation.
     * @callback module:api/DefaultApi~getCustomFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a full representation of the Custom Field Option that has the given id.
     * @param {String} id a String containing an Custom Field Option id
     * @param {module:api/DefaultApi~getCustomFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCustomFieldOption(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomFieldOption");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/customFieldOption/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboard operation.
     * @callback module:api/DefaultApi~getDashboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single dashboard.
     * @param {String} id the dashboard id
     * @param {module:api/DefaultApi~getDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDashboard(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDashboard");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/dashboard/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefault operation.
     * @callback module:api/DefaultApi~getDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the default workflow from the passed workflow scheme.
     * @param {Number} id the id of the scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnDraftIfExists = false)] when true indicates that a scheme's draft, if it exists, should be queried instead of                             the scheme itself.
     * @param {module:api/DefaultApi~getDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDefault(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDefault");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultShareScope operation.
     * @callback module:api/DefaultApi~getDefaultShareScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default share scope of the logged-in user.
     * @param {module:api/DefaultApi~getDefaultShareScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDefaultShareScope(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/defaultShareScope', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDraftById operation.
     * @callback module:api/DefaultApi~getDraftByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the requested draft workflow scheme to the caller.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~getDraftByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDraftById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDraftById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDraftDefault operation.
     * @callback module:api/DefaultApi~getDraftDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the default workflow from the passed draft workflow scheme to the caller.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~getDraftDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDraftDefault(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDraftDefault");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDraftIssueType operation.
     * @callback module:api/DefaultApi~getDraftIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the issue type mapping for the passed draft workflow scheme.
     * @param {String} issueType the issue type being set.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~getDraftIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDraftIssueType(issueType, id, callback) {
      let postBody = null;
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling getDraftIssueType");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDraftIssueType");
      }

      let pathParams = {
        'issueType': issueType,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/issuetype/{issueType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDraftWorkflow operation.
     * @callback module:api/DefaultApi~getDraftWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the draft workflow mappings or requested mapping to the caller.
     * @param {Number} id the id of the parent scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] the workflow mapping to return. Null can be passed to return all mappings. Must be a valid workflow name.
     * @param {module:api/DefaultApi~getDraftWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDraftWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDraftWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditIssueMeta operation.
     * @callback module:api/DefaultApi~getEditIssueMetaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the meta data for editing an issue.  <p/>  The fields in the editmeta correspond to the fields in the edit screen for the issue.  Fields not in the screen will not be in the editmeta.
     * @param {String} issueIdOrKey the issue whose edit meta data you want to view
     * @param {module:api/DefaultApi~getEditIssueMetaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEditIssueMeta(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getEditIssueMeta");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/editmeta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFavouriteFilters operation.
     * @callback module:api/DefaultApi~getFavouriteFiltersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the favourite filters of the logged-in user.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] the parameters to expand
     * @param {Boolean} [enableSharedUsers = true)] enable calculating shared users collection
     * @param {module:api/DefaultApi~getFavouriteFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFavouriteFilters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'enableSharedUsers': opts['enableSharedUsers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/favourite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldAutoCompleteForQueryString operation.
     * @callback module:api/DefaultApi~getFieldAutoCompleteForQueryStringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns auto complete suggestions for JQL search.
     * @param {Object} opts Optional parameters
     * @param {String} [fieldName] the field name for which the suggestions are generated.
     * @param {String} [fieldValue] the portion of the field value that has already been provided by the user.
     * @param {String} [predicateName] the predicate for which the suggestions are generated. Suggestions are generated only for: \"by\", \"from\" and \"to\".
     * @param {String} [predicateValue] the portion of the predicate value that has already been provided by the user.
     * @param {module:api/DefaultApi~getFieldAutoCompleteForQueryStringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFieldAutoCompleteForQueryString(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fieldName': opts['fieldName'],
        'fieldValue': opts['fieldValue'],
        'predicateName': opts['predicateName'],
        'predicateValue': opts['predicateValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/jql/autocompletedata/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFields operation.
     * @callback module:api/DefaultApi~getFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all fields, both System and Custom
     * @param {module:api/DefaultApi~getFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFields(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/field', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldsToAdd operation.
     * @callback module:api/DefaultApi~getFieldsToAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available fields for screen. i.e ones that haven't already been added.
     * @param {Number} screenId id of screen
     * @param {module:api/DefaultApi~getFieldsToAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFieldsToAdd(screenId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling getFieldsToAdd");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/availableFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilter operation.
     * @callback module:api/DefaultApi~getFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a filter given an id
     * @param {Number} id the id of the filter being looked up
     * @param {Object} opts Optional parameters
     * @param {String} [expand] the parameters to expand
     * @param {Boolean} [enableSharedUsers = true)] enable calculating shared users collection
     * @param {module:api/DefaultApi~getFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFilter(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFilter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand'],
        'enableSharedUsers': opts['enableSharedUsers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:api/DefaultApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns REST representation for the requested group. Allows to get list of active users belonging to the  specified group and its subgroups if \"users\" expand option is provided. You can page through users list by using  indexes in expand param. For example to get users from index 10 to index 15 use \"users[10:15]\" expand value. This  will return 6 users (if there are at least 16 users in this group). Indexes are 0-based and inclusive.  <p>  This resource is deprecated, please use group/member API instead.
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] A name of requested group.
     * @param {String} [expand] List of fields to expand. Currently only available expand is \"users\".
     * @param {module:api/DefaultApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdsOfWorklogsDeletedSince operation.
     * @callback module:api/DefaultApi~getIdsOfWorklogsDeletedSinceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns worklogs id and delete time of worklogs that was deleted since given time.  The returns set of worklogs is limited to 1000 elements.  This API will not return worklogs deleted during last minute.
     * @param {Object} opts Optional parameters
     * @param {Number} [since = 0)] a date time in unix timestamp format since when deleted worklogs will be returned.
     * @param {module:api/DefaultApi~getIdsOfWorklogsDeletedSinceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIdsOfWorklogsDeletedSince(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/worklog/deleted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdsOfWorklogsModifiedSince operation.
     * @callback module:api/DefaultApi~getIdsOfWorklogsModifiedSinceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns worklogs id and update time of worklogs that was updated since given time.  The returns set of worklogs is limited to 1000 elements.  This API will not return worklogs updated during last minute.
     * @param {Object} opts Optional parameters
     * @param {Number} [since = 0)] a date time in unix timestamp format since when updated worklogs will be returned.
     * @param {module:api/DefaultApi~getIdsOfWorklogsModifiedSinceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIdsOfWorklogsModifiedSince(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/worklog/updated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndexSummary operation.
     * @callback module:api/DefaultApi~getIndexSummaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes index condition of current node.  <p/>  Returned data consists of:  <ul>  <li><code>nodeId</code> - Node identifier.</li>  <li><code>reportTime</code> - Time of this report creation.</li>  <li><code>issueIndex</code> - Summary of issue index status.</li>  <li><code>replicationQueues</code> - Map of index replication queues, where  keys represent nodes from which replication operations came from.</li>  </ul>  <p/>  <code>issueIndex</code> can contain:  <ul>  <li><code>indexReadable</code> - If <code>false</code> the end point failed to read data from issue index  (check JIRA logs for detailed stack trace), otherwise <code>true</code>.  When <code>false</code> other fields of <code>issueIndex</code> can be not visible.</li>  <li><code>countInDatabase</code> - Count of issues found in database.</li>  <li><code>countInIndex</code> - Count of issues found while querying index.</li>  <li><code>lastUpdatedInDatabase</code> - Time of last update of issue found in database.</li>  <li><code>lastUpdatedInIndex</code> - Time of last update of issue found while querying index.</li>  </ul>  <p/>  <code>replicationQueues</code>'s map values can contain:  <ul>  <li><code>lastConsumedOperation</code> - Last executed index replication operation by current node from sending node's queue.</li>  <li><code>lastConsumedOperation.id</code> - Identifier of the operation.</li>  <li><code>lastConsumedOperation.replicationTime</code> - Time when the operation was sent to other nodes.</li>  <li><code>lastOperationInQueue</code> - Last index replication operation in sending node's queue.</li>  <li><code>lastOperationInQueue.id</code> - Identifier of the operation.</li>  <li><code>lastOperationInQueue.replicationTime</code> - Time when the operation was sent to other nodes.</li>  <li><code>queueSize</code> - Number of operations in queue from sending node to current node.</li>  </ul>
     * @param {module:api/DefaultApi~getIndexSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIndexSummary(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/index/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssue operation.
     * @callback module:api/DefaultApi~getIssueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a full representation of the issue for the given issue key.  <p>  An issue JSON consists of the issue key, a collection of fields,  a link to the workflow transition sub-resource, and (optionally) the HTML rendered values of any fields that support it  (e.g. if wiki syntax is enabled for the description or comments).  <p>  The <code>fields</code> param (which can be specified multiple times) gives a comma-separated list of fields  to include in the response. This can be used to retrieve a subset of fields.  A particular field can be excluded by prefixing it with a minus.  <p>  By default, all (<code>*all</code>) fields are returned in this get-issue resource. Note: the default is different  when doing a jql search -- the default there is just navigable fields (<code>*navigable</code>).  <ul>  <li><code>*all</code> - include all fields</li>  <li><code>*navigable</code> - include just navigable fields</li>  <li><code>summary,comment</code> - include just the summary and comments</li>  <li><code>-comment</code> - include everything except comments (the default is <code>*all</code> for get-issue)</li>  <li><code>*all,-comment</code> - include everything except comments</li>  </ul>  <p>  The {@code properties} param is similar to {@code fields} and specifies a comma-separated list of issue  properties to include. Unlike {@code fields}, properties are not included by default. To include them all  send {@code ?properties=*all}. You can also include only specified properties or exclude some properties  with a minus (-) sign.  <p>  <ul>  <li>{@code *all} - include all properties</li>  <li>{@code *all, -prop1} - include all properties except {@code prop1} </li>  <li>{@code prop1, prop1} - include {@code prop1} and {@code prop2} properties </li>  </ul>  </p>  <p/>  JIRA will attempt to identify the issue by the <code>issueIdOrKey</code> path parameter. This can be an issue id,  or an issue key. If the issue cannot be found via an exact match, JIRA will also look for the issue in a case-insensitive way, or  by looking to see if the issue was moved. In either of these cases, the request will proceed as normal (a 302 or other redirect  will <b>not</b> be returned). The issue key contained in the response will indicate the current value of issue's key.  <p/>  The <code>expand</code> param is used to include, hidden by default, parts of response. This can be used to include:  <ul>  <li><code>renderedFields</code> - field values in HTML format</li>  <li><code>names</code> - display name of each field</li>  <li><code>schema</code> - schema for each field which describes a type of the field</li>  <li><code>transitions</code> - all possible transitions for the given issue</li>  <li><code>operations</code> - all possibles operations which may be applied on issue</li>  <li><code>editmeta</code> - information about how each field may be edited. It contains field's schema as well.</li>  <li><code>changelog</code> - history of all changes of the given issue</li>  <li><code>versionedRepresentations</code> -  REST representations of all fields. Some field may contain more recent versions. RESET representations are numbered.  The greatest number always represents the most recent version. It is recommended that the most recent version is used.  version for these fields which provide a more recent REST representation.  After including <code>versionedRepresentations</code> \"fields\" field become hidden.</li>  </ul>
     * @param {String} issueIdOrKey the issue id or key to update (i.e. JRA-1330)
     * @param {Object} opts Optional parameters
     * @param {String} [fields] the list of fields to return for the issue. By default, all fields are returned.
     * @param {String} [expand] 
     * @param {String} [properties] the list of properties to return for the issue. By default no properties are returned.
     * @param {module:api/DefaultApi~getIssueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssue(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getIssue");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'fields': opts['fields'],
        'expand': opts['expand'],
        'properties': opts['properties']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueAllTypes operation.
     * @callback module:api/DefaultApi~getIssueAllTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all issue types visible to the user
     * @param {module:api/DefaultApi~getIssueAllTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueAllTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueLink operation.
     * @callback module:api/DefaultApi~getIssueLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue link with the specified id.
     * @param {String} linkId the issue link id.
     * @param {module:api/DefaultApi~getIssueLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueLink(linkId, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling getIssueLink");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issueLink/{linkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueLinkType operation.
     * @callback module:api/DefaultApi~getIssueLinkTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns for a given issue link type id all information about this issue link type.
     * @param {String} issueLinkTypeId 
     * @param {module:api/DefaultApi~getIssueLinkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueLinkType(issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling getIssueLinkType");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issueLinkType/{issueLinkTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueLinkTypes operation.
     * @callback module:api/DefaultApi~getIssueLinkTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of available issue link types, if issue linking is enabled.  Each issue link type has an id, a name and a label for the outward and inward link relationship.
     * @param {module:api/DefaultApi~getIssueLinkTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueLinkTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issueLinkType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueNavigatorDefaultColumns operation.
     * @callback module:api/DefaultApi~getIssueNavigatorDefaultColumnsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default system columns for issue navigator. Admin permission will be required.
     * @param {module:api/DefaultApi~getIssueNavigatorDefaultColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueNavigatorDefaultColumns(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/settings/columns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssuePickerResource operation.
     * @callback module:api/DefaultApi~getIssuePickerResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns suggested issues which match the auto-completion query for the user which executes this request. This REST  method will check the user's history and the user's browsing context and select this issues, which match the query.
     * @param {Object} opts Optional parameters
     * @param {String} [query] the query.
     * @param {String} [currentJQL] the JQL in context of which the request is executed. Only issues which match this JQL query will be included in results.
     * @param {String} [currentIssueKey] the key of the issue in context of which the request is executed. The issue which is in context will not be included in the auto-completion result, even if it matches the query.
     * @param {String} [currentProjectId] the id of the project in context of which the request is executed. Suggested issues will be only from this project.
     * @param {Boolean} [showSubTasks] if set to false, subtasks will not be included in the list.
     * @param {Boolean} [showSubTaskParent] if set to false and request is executed in context of a subtask, the parent issue will not be included in the auto-completion result, even if it matches the query.
     * @param {module:api/DefaultApi~getIssuePickerResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssuePickerResource(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'currentJQL': opts['currentJQL'],
        'currentIssueKey': opts['currentIssueKey'],
        'currentProjectId': opts['currentProjectId'],
        'showSubTasks': opts['showSubTasks'],
        'showSubTaskParent': opts['showSubTaskParent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueSecuritySchemes operation.
     * @callback module:api/DefaultApi~getIssueSecuritySchemesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all issue security schemes that are defined.
     * @param {module:api/DefaultApi~getIssueSecuritySchemesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueSecuritySchemes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuesecurityschemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueWatchers operation.
     * @callback module:api/DefaultApi~getIssueWatchersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of watchers for the issue with the given key.
     * @param {String} issueIdOrKey a String containing an issue key.
     * @param {module:api/DefaultApi~getIssueWatchersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueWatchers(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getIssueWatchers");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/watchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueWorklog operation.
     * @callback module:api/DefaultApi~getIssueWorklogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all work logs for an issue. <br/>  <strong>Note:</strong> Work logs won't be returned if the Log work field is hidden for the project.
     * @param {String} issueIdOrKey a string containing the issue id or key the worklog will be added to
     * @param {module:api/DefaultApi~getIssueWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueWorklog(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getIssueWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/worklog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssuesecuritylevel operation.
     * @callback module:api/DefaultApi~getIssuesecuritylevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a full representation of the security level that has the given id.
     * @param {String} id a String containing an issue security level id
     * @param {module:api/DefaultApi~getIssuesecuritylevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssuesecuritylevel(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIssuesecuritylevel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/securitylevel/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationSchemes operation.
     * @callback module:api/DefaultApi~getNotificationSchemesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a <a href=\"#pagination\">paginated</a> list of notification schemes. In order to access notification scheme, the calling user is  required to have permissions to administer at least one project associated with the requested notification scheme. Each scheme contains  a list of events and recipient configured to receive notifications for these events. Consumer should allow events without recipients to appear in response.  The list is ordered by the scheme's name.  Follow the documentation of /notificationscheme/{id} resource for all details about returned value.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] the index of the first notification scheme to return (0 based).
     * @param {Number} [maxResults] the maximum number of notification schemes to return (max 50).
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~getNotificationSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/notificationscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPasswordPolicy operation.
     * @callback module:api/DefaultApi~getPasswordPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of requirements for the current password policy. For example, \"The password must have at least 10 characters.\",  \"The password must not be similar to the user's name or email address.\", etc.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hasOldPassword = false)] whether or not the user will be required to enter their current password.  Use                        {@code false} (the default) if this is a new user or if an administrator is forcibly changing                        another user's password.
     * @param {module:api/DefaultApi~getPasswordPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPasswordPolicy(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'hasOldPassword': opts['hasOldPassword']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/password/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionScheme operation.
     * @callback module:api/DefaultApi~getPermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a permission scheme identified by the given id.
     * @param {Number} schemeId 
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~getPermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPermissionScheme(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling getPermissionScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{schemeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionSchemeGrant operation.
     * @callback module:api/DefaultApi~getPermissionSchemeGrantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a permission grant identified by the given id.
     * @param {Number} permissionId 
     * @param {Number} schemeId 
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~getPermissionSchemeGrantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPermissionSchemeGrant(permissionId, schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling getPermissionSchemeGrant");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling getPermissionSchemeGrant");
      }

      let pathParams = {
        'permissionId': permissionId,
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{schemeId}/permission/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionSchemeGrants operation.
     * @callback module:api/DefaultApi~getPermissionSchemeGrantsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all permission grants of the given permission scheme.
     * @param {Number} schemeId 
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~getPermissionSchemeGrantsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPermissionSchemeGrants(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling getPermissionSchemeGrants");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{schemeId}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionSchemes operation.
     * @callback module:api/DefaultApi~getPermissionSchemesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all permission schemes.  <p>  By default only shortened beans are returned. If you want to include permissions of all the schemes,  then specify the <b>permissions</b> expand parameter. Permissions will be included also if you specify  any other expand parameter.  </p>
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~getPermissionSchemesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPermissionSchemes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissions operation.
     * @callback module:api/DefaultApi~getPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all permissions in the system and whether the currently logged in user has them. You can optionally provide a specific context to get permissions for  (projectKey OR projectId OR issueKey OR issueId)  <ul>  <li> When no context supplied the project related permissions will return true if the user has that permission in ANY project </li>  <li> If a project context is provided, project related permissions will return true if the user has the permissions in the specified project.  For permissions that are determined using issue data (e.g Current Assignee), true will be returned if the user meets the permission criteria in ANY issue in that project </li>  <li> If an issue context is provided, it will return whether or not the user has each permission in that specific issue</li>  </ul>  <p>  NB: The above means that for issue-level permissions (EDIT_ISSUE for example), hasPermission may be true when no context is provided, or when a project context is provided,  <b>but</b> may be false for any given (or all) issues. This would occur (for example) if Reporters were given the EDIT_ISSUE permission. This is because  any user could be a reporter, except in the context of a concrete issue, where the reporter is known.  </p>  <p>  Global permissions will still be returned for all scopes.  </p>  <p>  Prior to version 6.4 this service returned project permissions with keys corresponding to com.atlassian.jira.security.Permissions.Permission constants.  Since 6.4 those keys are considered deprecated and this service returns system project permission keys corresponding to constants defined in com.atlassian.jira.permission.ProjectPermissions.  Permissions with legacy keys are still also returned for backwards compatibility, they are marked with an attribute deprecatedKey=true.  The attribute is missing for project permissions with the current keys.  </p>
     * @param {Object} opts Optional parameters
     * @param {String} [projectKey] - key of project to scope returned permissions for.
     * @param {String} [projectId] - id of project to scope returned permissions for.
     * @param {String} [issueKey] - key of the issue to scope returned permissions for.
     * @param {String} [issueId] - id of the issue to scope returned permissions for.
     * @param {module:api/DefaultApi~getPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPermissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'projectKey': opts['projectKey'],
        'projectId': opts['projectId'],
        'issueKey': opts['issueKey'],
        'issueId': opts['issueId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/mypermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreference operation.
     * @callback module:api/DefaultApi~getPreferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns preference of the currently logged in user. Preference key must be provided as input parameter (key). The  value is returned exactly as it is. If key parameter is not provided or wrong - status code 404. If value is  found  - status code 200.
     * @param {Object} opts Optional parameters
     * @param {String} [key] - key of the preference to be returned.
     * @param {module:api/DefaultApi~getPreferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPreference(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/mypreferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPriorities operation.
     * @callback module:api/DefaultApi~getPrioritiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all issue priorities.
     * @param {module:api/DefaultApi~getPrioritiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPriorities(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/priority', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPriority operation.
     * @callback module:api/DefaultApi~getPriorityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue priority.
     * @param {String} id a String containing the priority id
     * @param {module:api/DefaultApi~getPriorityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPriority(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPriority");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/priority/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgress operation.
     * @callback module:api/DefaultApi~getProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the progress of a single reindex request.
     * @param {Number} requestId the reindex request ID.
     * @param {module:api/DefaultApi~getProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProgress(requestId, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getProgress");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/reindex/request/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgressBulk operation.
     * @callback module:api/DefaultApi~getProgressBulkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the progress of a multiple reindex requests.  Only reindex requests that actually exist will be returned  in the results.
     * @param {Object} opts Optional parameters
     * @param {String} [requestId] the reindex request IDs.
     * @param {module:api/DefaultApi~getProgressBulkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProgressBulk(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'requestId': opts['requestId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/reindex/request/bulk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectCategoryById operation.
     * @callback module:api/DefaultApi~getProjectCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains a representation of a project category in JSON format.
     * @param {Number} id 
     * @param {module:api/DefaultApi~getProjectCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectCategoryById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectCategoryById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/projectCategory/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectComponents operation.
     * @callback module:api/DefaultApi~getProjectComponentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains a full representation of a the specified project's components.
     * @param {String} projectIdOrKey the project id or project key
     * @param {module:api/DefaultApi~getProjectComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectComponents(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getProjectComponents");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectRole operation.
     * @callback module:api/DefaultApi~getProjectRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details for a given project role in a project.
     * @param {String} projectIdOrKey the project id or project key
     * @param {Number} id the project role id
     * @param {module:api/DefaultApi~getProjectRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectRole(projectIdOrKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getProjectRole");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectRole");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/role/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectRoleActorsForRole operation.
     * @callback module:api/DefaultApi~getProjectRoleActorsForRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets default actors for the given role.
     * @param {Number} id the role id to remove the actors from
     * @param {module:api/DefaultApi~getProjectRoleActorsForRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectRoleActorsForRole(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectRoleActorsForRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role/{id}/actors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectRolesById operation.
     * @callback module:api/DefaultApi~getProjectRolesByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific ProjectRole available in JIRA.
     * @param {Number} id 
     * @param {module:api/DefaultApi~getProjectRolesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectRolesById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectRolesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectTypeByKey operation.
     * @callback module:api/DefaultApi~getProjectTypeByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the project type with the given key.
     * @param {String} projectTypeKey 
     * @param {module:api/DefaultApi~getProjectTypeByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectTypeByKey(projectTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectTypeKey' is set
      if (projectTypeKey === undefined || projectTypeKey === null) {
        throw new Error("Missing the required parameter 'projectTypeKey' when calling getProjectTypeByKey");
      }

      let pathParams = {
        'projectTypeKey': projectTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/type/{projectTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectVersions operation.
     * @callback module:api/DefaultApi~getProjectVersionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains a full representation of a the specified project's versions.
     * @param {String} projectIdOrKey the project id or project key
     * @param {Object} opts Optional parameters
     * @param {String} [expand] the parameters to expand
     * @param {module:api/DefaultApi~getProjectVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectVersions(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getProjectVersions");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectVersionsPaginated operation.
     * @callback module:api/DefaultApi~getProjectVersionsPaginatedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all versions for the specified project. Results are <a href=\"#pagination\">paginated</a>.  <p>  Results can be ordered by the following fields:  <ul>  <li>sequence</li>  <li>name</li>  <li>startDate</li>  <li>releaseDate</li>  </ul>  </p>
     * @param {String} projectIdOrKey the project id or project key
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] the page offset, if not specified then defaults to 0
     * @param {Number} [maxResults] how many results on the page should be included. Defaults to 50.
     * @param {String} [orderBy] ordering of the results.
     * @param {String} [expand] the parameters to expand
     * @param {module:api/DefaultApi~getProjectVersionsPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectVersionsPaginated(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling getProjectVersionsPaginated");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProperties operation.
     * @callback module:api/DefaultApi~getPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the property or properties associated with a transition.
     * @param {Number} id the ID of the transition within the workflow.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeReservedKeys] some keys under the \"jira.\" prefix are editable, some are not. Set this to true                             in order to include the non-editable keys in the response.
     * @param {String} [key] the name of the property key to query. Can be left off the query to return all properties.
     * @param {String} [workflowName] the name of the workflow to use.
     * @param {String} [workflowMode] the type of workflow to use. Can either be \"live\" or \"draft\".
     * @param {module:api/DefaultApi~getPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProperties(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProperties");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includeReservedKeys': opts['includeReservedKeys'],
        'key': opts['key'],
        'workflowName': opts['workflowName'],
        'workflowMode': opts['workflowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflow/api/2/transitions/{id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertyKeys operation.
     * @callback module:api/DefaultApi~getPropertyKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for the issue type identified by the id.
     * @param {String} issueTypeId the issue type from which the keys will be returned
     * @param {module:api/DefaultApi~getPropertyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPropertyKeys(issueTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling getPropertyKeys");
      }

      let pathParams = {
        'issueTypeId': issueTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{issueTypeId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecords operation.
     * @callback module:api/DefaultApi~getRecordsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns auditing records filtered using provided parameters
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] - the number of record from which search starts
     * @param {Number} [limit] - maximum number of returned results (if is limit is <= 0 or > 1000, it will be set do default value: 1000)
     * @param {String} [filter] - text query; each record that will be returned must contain the provided text in one of its fields
     * @param {String} [from] - timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty                only records that where created in the same moment or after the 'from' timestamp will be provided in response
     * @param {String} [to] - timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty                only records that where created in the same moment or earlier than the 'to' timestamp will be provided in response
     * @param {String} [projectIds] - list of project ids to look for
     * @param {String} [userIds] - list of user ids to look for
     * @param {module:api/DefaultApi~getRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecords(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'from': opts['from'],
        'to': opts['to'],
        'projectIds': opts['projectIds'],
        'userIds': opts['userIds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/auditing/record', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReindexInfo operation.
     * @callback module:api/DefaultApi~getReindexInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information on the system reindexes.  If a reindex is currently taking place then information about this reindex is returned.  If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404  indicating that no reindex has taken place.
     * @param {Object} opts Optional parameters
     * @param {Number} [taskId] the id of an indexing task you wish to obtain details on.  If omitted, then defaults to the standard behaviour and                returns information on the active reindex task, or the last task to run if no reindex is taking place. .  If there is no                reindexing task with that id then a 404 is returned.
     * @param {module:api/DefaultApi~getReindexInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReindexInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'taskId': opts['taskId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/reindex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReindexProgress operation.
     * @callback module:api/DefaultApi~getReindexProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information on the system reindexes.  If a reindex is currently taking place then information about this reindex is returned.  If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404  indicating that no reindex has taken place.
     * @param {Object} opts Optional parameters
     * @param {Number} [taskId] the id of an indexing task you wish to obtain details on.  If omitted, then defaults to the standard behaviour and                returns information on the active reindex task, or the last task to run if no reindex is taking place. .  If there is no                reindexing task with that id then a 404 is returned.
     * @param {module:api/DefaultApi~getReindexProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReindexProgress(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'taskId': opts['taskId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/reindex/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteIssueLinkById operation.
     * @callback module:api/DefaultApi~getRemoteIssueLinkByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the remote issue link with the given id on the issue.
     * @param {String} linkId the id of the remote issue link
     * @param {String} issueIdOrKey the issue to create the remote issue link for
     * @param {module:api/DefaultApi~getRemoteIssueLinkByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRemoteIssueLinkById(linkId, issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling getRemoteIssueLinkById");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getRemoteIssueLinkById");
      }

      let pathParams = {
        'linkId': linkId,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/remotelink/{linkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteIssueLinks operation.
     * @callback module:api/DefaultApi~getRemoteIssueLinksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A REST sub-resource representing the remote issue links on the issue.
     * @param {String} issueIdOrKey the issue to create the remote issue link for
     * @param {Object} opts Optional parameters
     * @param {String} [globalId] The id of the remote issue link to be returned.  If null (not provided) all remote links for the                      issue are returned.                      <p>For a fullexplanation of Issue Link fields please refer to                      <a href=\"https://developer.atlassian.com/display/JIRADEV/Fields+in+Remote+Issue+Links\">https://developer.atlassian.com/display/JIRADEV/Fields+in+Remote+Issue+Links</a></p>
     * @param {module:api/DefaultApi~getRemoteIssueLinksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRemoteIssueLinks(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getRemoteIssueLinks");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'globalId': opts['globalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/remotelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteVersionLink operation.
     * @callback module:api/DefaultApi~getRemoteVersionLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A REST sub-resource representing a remote version link
     * @param {String} versionId The version ID of the remote link
     * @param {String} globalId The global ID of the remote link
     * @param {module:api/DefaultApi~getRemoteVersionLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRemoteVersionLink(versionId, globalId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getRemoteVersionLink");
      }
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling getRemoteVersionLink");
      }

      let pathParams = {
        'versionId': versionId,
        'globalId': globalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{versionId}/remotelink/{globalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteVersionLinks operation.
     * @callback module:api/DefaultApi~getRemoteVersionLinksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the remote version links for a given global ID.
     * @param {Object} opts Optional parameters
     * @param {String} [globalId] the global ID of the remote resource that is linked to the versions
     * @param {module:api/DefaultApi~getRemoteVersionLinksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRemoteVersionLinks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'globalId': opts['globalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/remotelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteVersionLinksByVersionId operation.
     * @callback module:api/DefaultApi~getRemoteVersionLinksByVersionIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the remote version links associated with the given version ID.
     * @param {String} versionId The version for which to delete ALL existing remote version links
     * @param {module:api/DefaultApi~getRemoteVersionLinksByVersionIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRemoteVersionLinksByVersionId(versionId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getRemoteVersionLinksByVersionId");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{versionId}/remotelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolution operation.
     * @callback module:api/DefaultApi~getResolutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a resolution.
     * @param {String} id a String containing the resolution id
     * @param {module:api/DefaultApi~getResolutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getResolution(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResolution");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/resolution/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolutions operation.
     * @callback module:api/DefaultApi~getResolutionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all resolutions.
     * @param {module:api/DefaultApi~getResolutionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getResolutions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/resolution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemeAttribute operation.
     * @callback module:api/DefaultApi~getSchemeAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} permissionSchemeId permission scheme id
     * @param {String} attributeKey permission scheme attribute key
     * @param {module:api/DefaultApi~getSchemeAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSchemeAttribute(permissionSchemeId, attributeKey, callback) {
      let postBody = null;
      // verify the required parameter 'permissionSchemeId' is set
      if (permissionSchemeId === undefined || permissionSchemeId === null) {
        throw new Error("Missing the required parameter 'permissionSchemeId' when calling getSchemeAttribute");
      }
      // verify the required parameter 'attributeKey' is set
      if (attributeKey === undefined || attributeKey === null) {
        throw new Error("Missing the required parameter 'attributeKey' when calling getSchemeAttribute");
      }

      let pathParams = {
        'permissionSchemeId': permissionSchemeId,
        'attributeKey': attributeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{permissionSchemeId}/attribute/{attributeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityLevelsForProject operation.
     * @callback module:api/DefaultApi~getSecurityLevelsForProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all security levels for the project that the current logged in user has access to.  If the user does not have the Set Issue Security permission, the list will be empty.
     * @param {String} projectKeyOrId - key or id of project to list the security levels for
     * @param {module:api/DefaultApi~getSecurityLevelsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSecurityLevelsForProject(projectKeyOrId, callback) {
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling getSecurityLevelsForProject");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectKeyOrId}/securitylevel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerInfo operation.
     * @callback module:api/DefaultApi~getServerInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns general information about the current JIRA server.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [doHealthCheck] 
     * @param {module:api/DefaultApi~getServerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getServerInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'doHealthCheck': opts['doHealthCheck']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/serverInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSharePermission operation.
     * @callback module:api/DefaultApi~getSharePermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single share permission of the given filter.
     * @param {Number} permissionId 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getSharePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSharePermission(permissionId, id, callback) {
      let postBody = null;
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling getSharePermission");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSharePermission");
      }

      let pathParams = {
        'permissionId': permissionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}/permission/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSharePermissions operation.
     * @callback module:api/DefaultApi~getSharePermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all share permissions of the given filter.
     * @param {Number} id 
     * @param {module:api/DefaultApi~getSharePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSharePermissions(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSharePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/{id}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getState operation.
     * @callback module:api/DefaultApi~getStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getState(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/cluster/zdu/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/DefaultApi~getStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a full representation of the Status having the given id or name.
     * @param {String} idOrName a numeric Status id or a status name
     * @param {module:api/DefaultApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStatus(idOrName, callback) {
      let postBody = null;
      // verify the required parameter 'idOrName' is set
      if (idOrName === undefined || idOrName === null) {
        throw new Error("Missing the required parameter 'idOrName' when calling getStatus");
      }

      let pathParams = {
        'idOrName': idOrName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/status/{idOrName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatusCategories operation.
     * @callback module:api/DefaultApi~getStatusCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all status categories
     * @param {module:api/DefaultApi~getStatusCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStatusCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/statuscategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatusCategory operation.
     * @callback module:api/DefaultApi~getStatusCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a full representation of the StatusCategory having the given id or key
     * @param {String} idOrKey a numeric StatusCategory id or a status category key
     * @param {module:api/DefaultApi~getStatusCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStatusCategory(idOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'idOrKey' is set
      if (idOrKey === undefined || idOrKey === null) {
        throw new Error("Missing the required parameter 'idOrKey' when calling getStatusCategory");
      }

      let pathParams = {
        'idOrKey': idOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/statuscategory/{idOrKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatuses operation.
     * @callback module:api/DefaultApi~getStatusesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all statuses
     * @param {module:api/DefaultApi~getStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStatuses(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubTasks operation.
     * @callback module:api/DefaultApi~getSubTasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue's subtask list
     * @param {String} issueIdOrKey The parent issue's key or id
     * @param {module:api/DefaultApi~getSubTasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSubTasks(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getSubTasks");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/subtask', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransitions operation.
     * @callback module:api/DefaultApi~getTransitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the transitions possible for this issue by the current user, along with fields that are required and their types.  <p/>  Fields will only be returned if <code>expand=transitions.fields</code>.  <p/>  The fields in the metadata correspond to the fields in the transition screen for that transition.  Fields not in the screen will not be in the metadata.
     * @param {String} issueIdOrKey the issue whose transitions you want to view
     * @param {Object} opts Optional parameters
     * @param {String} [transitionId] 
     * @param {module:api/DefaultApi~getTransitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTransitions(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getTransitions");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'transitionId': opts['transitionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/transitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpgradeResult operation.
     * @callback module:api/DefaultApi~getUpgradeResultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the result of the last upgrade task.   Returns {@link javax.ws.rs.core.Response#seeOther(java.net.URI)} if still running.
     * @param {module:api/DefaultApi~getUpgradeResultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUpgradeResult(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/upgrade', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersFromGroup operation.
     * @callback module:api/DefaultApi~getUsersFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource returns a <a href=\"#pagination\">paginated</a> list of users who are members of the specified group and its subgroups.  Users in the page are ordered by user names. User of this resource is required to have sysadmin or admin permissions.
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] a name of the group for which members will be returned.
     * @param {Boolean} [includeInactiveUsers = false)] inactive users will be included in the response if set to true.
     * @param {Number} [startAt = 0)] the index of the first user in group to return (0 based).
     * @param {Number} [maxResults = 50)] the maximum number of users to return (max 50).
     * @param {module:api/DefaultApi~getUsersFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUsersFromGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'includeInactiveUsers': opts['includeInactiveUsers'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/group/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersion operation.
     * @callback module:api/DefaultApi~getVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a project version.
     * @param {String} id The version to delete
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~getVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVersion(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVersion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersionRelatedIssues operation.
     * @callback module:api/DefaultApi~getVersionRelatedIssuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a bean containing the number of fixed in and affected issues for the given version.
     * @param {String} id a String containing the version id
     * @param {module:api/DefaultApi~getVersionRelatedIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVersionRelatedIssues(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVersionRelatedIssues");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{id}/relatedIssueCounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersionUnresolvedIssues operation.
     * @callback module:api/DefaultApi~getVersionUnresolvedIssuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of unresolved issues for the given version
     * @param {String} id a String containing the version id
     * @param {module:api/DefaultApi~getVersionUnresolvedIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVersionUnresolvedIssues(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVersionUnresolvedIssues");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{id}/unresolvedIssueCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVotes operation.
     * @callback module:api/DefaultApi~getVotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A REST sub-resource representing the voters on the issue.
     * @param {String} issueIdOrKey the issue to view voting information for
     * @param {module:api/DefaultApi~getVotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVotes(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getVotes");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/votes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflow operation.
     * @callback module:api/DefaultApi~getWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the workflow mappings or requested mapping to the caller for the passed scheme.
     * @param {Number} id the id of the scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] the workflow mapping to return. Null can be passed to return all mappings. Must be a valid workflow name.
     * @param {Boolean} [returnDraftIfExists = false)] when true indicates that a scheme's draft, if it exists, should be queried instead of                             the scheme itself.
     * @param {module:api/DefaultApi~getWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName'],
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorklog operation.
     * @callback module:api/DefaultApi~getWorklogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific worklog. <br/>  <strong>Note:</strong> The work log won't be returned if the Log work field is hidden for the project.
     * @param {String} issueIdOrKey a string containing the issue id or key the worklog belongs to
     * @param {String} id id of the worklog to be deleted
     * @param {module:api/DefaultApi~getWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWorklog(issueIdOrKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getWorklog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/worklog/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorklogsForIds operation.
     * @callback module:api/DefaultApi~getWorklogsForIdsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns worklogs for given worklog ids. Only worklogs to which the calling user has permissions, will be included in the result.  The returns set of worklogs is limited to 1000 elements.
     * @param {module:api/DefaultApi~getWorklogsForIdsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWorklogsForIds(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/worklog/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkIssues operation.
     * @callback module:api/DefaultApi~linkIssuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an issue link between two issues.  The user requires the link issue permission for the issue which will be linked to another issue.  The specified link type in the request is used to create the link and will create a link from the first issue  to the second issue using the outward description. It also create a link from the second issue to the first issue using the  inward description of the issue link type.  It will add the supplied comment to the first issue. The comment can have a restriction who can view it.  If group is specified, only users of this group can view this comment, if roleLevel is specified only users who have the specified role can view this comment.  The user who creates the issue link needs to belong to the specified group or have the specified role.
     * @param {module:api/DefaultApi~linkIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    linkIssues(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issueLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/DefaultApi~listCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all dashboards, optionally filtering them.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] an optional filter that is applied to the list of dashboards. Valid values include                         <code>\"favourite\"</code> for returning only favourite dashboards, and <code>\"my\"</code> for returning                         dashboards that are owned by the calling user.
     * @param {Number} [startAt] the index of the first dashboard to return (0-based). must be 0 or a multiple of                         <code>maxResults</code>
     * @param {Number} [maxResults] a hint as to the the maximum number of dashboards to return in each call. Note that the                         JIRA server reserves the right to impose a <code>maxResults</code> limit that is lower than the value that a                         client provides, dues to lack or resources or any other condition. When this happens, your results will be                         truncated. Callers should always check the returned <code>maxResults</code> to determine the value that is                         effectively being used.
     * @param {module:api/DefaultApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     */
    list(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new session for a user in JIRA. Once a session has been successfully created it can be used to access  any of JIRA's remote APIs and also the web UI by passing the appropriate HTTP Cookie header.  <p>  Note that it is generally preferrable to use HTTP BASIC authentication with the REST API. However, this resource  may be used to mimic the behaviour of JIRA's log-in page (e.g. to display log-in errors to a user).
     * @param {module:api/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/1/session', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/DefaultApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs the current user out of JIRA, destroying the existing session, if any.
     * @param {module:api/DefaultApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/1/session', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the merge operation.
     * @callback module:api/DefaultApi~mergeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge versions
     * @param {String} moveIssuesTo The version to set fixVersion to on issues where the deleted version is the fix version,                      If null then the fixVersion is removed.
     * @param {String} id The version that will be merged to version {@code moveIssuesTo} and removed
     * @param {module:api/DefaultApi~mergeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    merge(moveIssuesTo, id, callback) {
      let postBody = null;
      // verify the required parameter 'moveIssuesTo' is set
      if (moveIssuesTo === undefined || moveIssuesTo === null) {
        throw new Error("Missing the required parameter 'moveIssuesTo' when calling merge");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling merge");
      }

      let pathParams = {
        'moveIssuesTo': moveIssuesTo,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{id}/mergeto/{moveIssuesTo}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveField operation.
     * @callback module:api/DefaultApi~moveFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves field on the given tab
     * @param {Number} screenId id of screen
     * @param {Number} tabId id of tab
     * @param {String} id 
     * @param {module:api/DefaultApi~moveFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveField(screenId, tabId, id, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling moveField");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling moveField");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling moveField");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs/{tabId}/fields/{id}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveSubTasks operation.
     * @callback module:api/DefaultApi~moveSubTasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorders an issue's subtasks by moving the subtask at index \"from\"  to index \"to\".
     * @param {String} issueIdOrKey The parent issue's key or id
     * @param {module:api/DefaultApi~moveSubTasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveSubTasks(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling moveSubTasks");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/subtask/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveTab operation.
     * @callback module:api/DefaultApi~moveTabCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves tab position
     * @param {Number} screenId id of screen
     * @param {Number} tabId id of tab
     * @param {Number} pos position of tab
     * @param {module:api/DefaultApi~moveTabCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveTab(screenId, tabId, pos, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling moveTab");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling moveTab");
      }
      // verify the required parameter 'pos' is set
      if (pos === undefined || pos === null) {
        throw new Error("Missing the required parameter 'pos' when calling moveTab");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId,
        'pos': pos
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs/{tabId}/move/{pos}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveVersion operation.
     * @callback module:api/DefaultApi~moveVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a version's sequence within a project.  <p/>  The move version bean has 2 alternative field value pairs:  <dl>  <dt>position</dt><dd>An absolute position, which may have a value of 'First', 'Last', 'Earlier' or 'Later'</dd>  <dt>after</dt><dd>A version to place this version after.  The value should be the self link of another version</dd>  </dl>
     * @param {String} id a String containing the version id
     * @param {module:api/DefaultApi~moveVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveVersion(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling moveVersion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{id}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notify operation.
     * @callback module:api/DefaultApi~notifyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a notification (email) to the list or recipients defined in the request.
     * @param {String} issueIdOrKey a string containing the issue id or key the comment will be added to
     * @param {module:api/DefaultApi~notifyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notify(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling notify");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partialUpdateProjectRole operation.
     * @callback module:api/DefaultApi~partialUpdateProjectRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially updates a roles name or description.
     * @param {Number} id 
     * @param {module:api/DefaultApi~partialUpdateProjectRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partialUpdateProjectRole(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateProjectRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/role/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyCheckCreateUser operation.
     * @callback module:api/DefaultApi~policyCheckCreateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of statements explaining why the password policy would disallow a proposed password for a new user.  <p>  You can use this method to test the password policy validation. This could be done prior to an action   where a new user and related password are created, using methods like the ones in   <a href=\"https://docs.atlassian.com/jira/latest/com/atlassian/jira/bc/user/UserService.html\">UserService</a>.        For example, you could use this to validate a password in a create user form in the user interface, as the user enters it.<br/>  The username and new password must be not empty to perform the validation.<br/>  Note, this method will help you validate against the policy only. It won't check any other validations that might be performed   when creating a new user, e.g. checking whether a user with the same name already exists.  </p>
     * @param {module:api/DefaultApi~policyCheckCreateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    policyCheckCreateUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/password/policy/createUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyCheckUpdateUser operation.
     * @callback module:api/DefaultApi~policyCheckUpdateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of statements explaining why the password policy would disallow a proposed new password for a user with an existing password.  <p>  You can use this method to test the password policy validation. This could be done prior to an action where the password   is actually updated, using methods like <a href=\"https://docs.atlassian.com/jira/latest/com/atlassian/jira/web/action/user/ChangePassword.html\">ChangePassword</a>        or <a href=\"https://docs.atlassian.com/jira/latest/com/atlassian/jira/web/action/user/ResetPassword.html\">ResetPassword</a>.   For example, you could use this to validate a password in a change password form in the user interface, as the user enters it.<br/>  The user must exist and the username and new password must be not empty, to perform the validation.<br/>  Note, this method will help you validate against the policy only. It won't check any other validations that might be performed   when submitting a password change/reset request, e.g. verifying whether the old password is valid.  </p>
     * @param {module:api/DefaultApi~policyCheckUpdateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    policyCheckUpdateUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/password/policy/updateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processRequests operation.
     * @callback module:api/DefaultApi~processRequestsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes any pending reindex requests.  Returns a JSON array containing the IDs of the reindex requests  that are being processed.  Execution is asynchronous - progress of the returned tasks can be monitored through  other REST calls.
     * @param {module:api/DefaultApi~processRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    processRequests(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/reindex/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the put operation.
     * @callback module:api/DefaultApi~putCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the ApplicationRole with the passed data. Only the groups and default groups setting of the  role may be updated. Requests to change the key or the name of the role will be silently ignored.  <p>  Optional: If versionHash is passed through the If-Match header the request will be rejected if not the  same as server
     * @param {String} key the key of the role to update.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] the hash of the version to update. Optional Param
     * @param {module:api/DefaultApi~putCallback} callback The callback function, accepting three arguments: error, data, response
     */
    put(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling put");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/applicationrole/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBulk operation.
     * @callback module:api/DefaultApi~putBulkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the ApplicationRoles with the passed data if the version hash is the same as the server.  Only the groups and default groups setting of the role may be updated. Requests to change the key  or the name of the role will be silently ignored. It is acceptable to pass only the roles that are updated  as roles that are present in the server but not in data to update with, will not be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] 
     * @param {module:api/DefaultApi~putBulkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBulk(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/applicationrole', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindex operation.
     * @callback module:api/DefaultApi~reindexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kicks off a reindex.  Need Admin permissions to perform this reindex.
     * @param {Object} opts Optional parameters
     * @param {String} [type] Case insensitive String indicating type of reindex.  If omitted, then defaults to BACKGROUND_PREFERRED.
     * @param {Boolean} [indexComments = false)] Indicates that comments should also be reindexed. Not relevant for foreground reindex, where comments are always reindexed.
     * @param {Boolean} [indexChangeHistory = false)] Indicates that changeHistory should also be reindexed. Not relevant for foreground reindex, where changeHistory is always reindexed.
     * @param {Boolean} [indexWorklogs = false)] Indicates that changeHistory should also be reindexed. Not relevant for foreground reindex, where changeHistory is always reindexed.
     * @param {module:api/DefaultApi~reindexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reindex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'indexComments': opts['indexComments'],
        'indexChangeHistory': opts['indexChangeHistory'],
        'indexWorklogs': opts['indexWorklogs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/reindex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindexIssues operation.
     * @callback module:api/DefaultApi~reindexIssuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reindexes one or more individual issues.  Indexing is performed synchronously - the call returns when indexing of  the issues has completed or a failure occurs.  <p>  Use either explicitly specified issue IDs or a JQL query to select issues to reindex.
     * @param {Object} opts Optional parameters
     * @param {String} [issueId] the IDs or keys of one or more issues to reindex.
     * @param {Boolean} [indexComments = false)] Indicates that comments should also be reindexed.
     * @param {Boolean} [indexChangeHistory = false)] Indicates that changeHistory should also be reindexed.
     * @param {Boolean} [indexWorklogs = false)] Indicates that changeHistory should also be reindexed.
     * @param {module:api/DefaultApi~reindexIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reindexIssues(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'issueId': opts['issueId'],
        'indexComments': opts['indexComments'],
        'indexChangeHistory': opts['indexChangeHistory'],
        'indexWorklogs': opts['indexWorklogs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/reindex/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the release operation.
     * @callback module:api/DefaultApi~releaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method invalidates the any current WebSudo session.
     * @param {module:api/DefaultApi~releaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    release(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/1/websudo', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAttachment operation.
     * @callback module:api/DefaultApi~removeAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an attachment from an issue.
     * @param {String} id id of the attachment to remove
     * @param {module:api/DefaultApi~removeAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAttachment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeAttachment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/attachment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeField operation.
     * @callback module:api/DefaultApi~removeFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes field from given tab
     * @param {Number} screenId id of screen
     * @param {Number} tabId id of tab
     * @param {String} id 
     * @param {module:api/DefaultApi~removeFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeField(screenId, tabId, id, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling removeField");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling removeField");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeField");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs/{tabId}/fields/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroup operation.
     * @callback module:api/DefaultApi~removeGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a group by given group parameter.  <p>  Returns no content
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] (mandatory) The name of the group to delete.
     * @param {String} [swapGroup] If you delete a group and content is restricted to that group, the content will be hidden from all users.   To prevent this, use this parameter to specify a different group to transfer the restrictions (comments and worklogs only) to.
     * @param {module:api/DefaultApi~removeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'swapGroup': opts['swapGroup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/group', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removePreference operation.
     * @callback module:api/DefaultApi~removePreferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes preference of the currently logged in user. Preference key must be provided as input parameters (key). If  key parameter is not provided or wrong - status code 404. If preference is unset - status code 204.
     * @param {Object} opts Optional parameters
     * @param {String} [key] - key of the preference to be removed.
     * @param {module:api/DefaultApi~removePreferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removePreference(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/mypreferences', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeProjectCategory operation.
     * @callback module:api/DefaultApi~removeProjectCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project category.
     * @param {Number} id 
     * @param {module:api/DefaultApi~removeProjectCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeProjectCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeProjectCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/projectCategory/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUser operation.
     * @callback module:api/DefaultApi~removeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes user.
     * @param {Object} opts Optional parameters
     * @param {String} [username] the username
     * @param {String} [key] user key
     * @param {module:api/DefaultApi~removeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserFromApplication operation.
     * @callback module:api/DefaultApi~removeUserFromApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user from given application. Admin permission will be required to perform this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [username] username
     * @param {String} [applicationKey] application key
     * @param {module:api/DefaultApi~removeUserFromApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUserFromApplication(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'applicationKey': opts['applicationKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/user/application', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserFromGroup operation.
     * @callback module:api/DefaultApi~removeUserFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes given user from a group.  <p>  Returns no content
     * @param {Object} opts Optional parameters
     * @param {String} [groupname] A name of requested group.
     * @param {String} [username] User to remove from a group
     * @param {module:api/DefaultApi~removeUserFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUserFromGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/group/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVote operation.
     * @callback module:api/DefaultApi~removeVoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove your vote from an issue. (i.e. \"unvote\")
     * @param {String} issueIdOrKey the issue to view voting information for
     * @param {module:api/DefaultApi~removeVoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVote(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling removeVote");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/votes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWatcher operation.
     * @callback module:api/DefaultApi~removeWatcherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from an issue's watcher list.
     * @param {String} issueIdOrKey a String containing an issue key.
     * @param {Object} opts Optional parameters
     * @param {String} [username] a String containing the name of the user to remove from the watcher list. Must not be null.
     * @param {module:api/DefaultApi~removeWatcherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeWatcher(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling removeWatcher");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/watchers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameTab operation.
     * @callback module:api/DefaultApi~renameTabCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renames tab on given screen
     * @param {Number} screenId id of screen
     * @param {Number} tabId id of tab
     * @param {module:api/DefaultApi~renameTabCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameTab(screenId, tabId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling renameTab");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling renameTab");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/screens/{screenId}/tabs/{tabId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runUpgradesNow operation.
     * @callback module:api/DefaultApi~runUpgradesNowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs any pending delayed upgrade tasks.  Need Admin permissions to do this.
     * @param {module:api/DefaultApi~runUpgradesNowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    runUpgradesNow(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/DefaultApi~searchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for issues using JQL.  <p>  <b>Sorting</b>  the <code>jql</code> parameter is a full <a href=\"http://confluence.atlassian.com/display/JIRA/Advanced+Searching\">JQL</a>  expression, and includes an <code>ORDER BY</code> clause.  </p>  <p>  The <code>fields</code> param (which can be specified multiple times) gives a comma-separated list of fields  to include in the response. This can be used to retrieve a subset of fields.  A particular field can be excluded by prefixing it with a minus.  <p>  By default, only navigable (<code>*navigable</code>) fields are returned in this search resource. Note: the default is different  in the get-issue resource -- the default there all fields (<code>*all</code>).  <ul>  <li><code>*all</code> - include all fields</li>  <li><code>*navigable</code> - include just navigable fields</li>  <li><code>summary,comment</code> - include just the summary and comments</li>  <li><code>-description</code> - include navigable fields except the description (the default is <code>*navigable</code> for search)</li>  <li><code>*all,-comment</code> - include everything except comments</li>  </ul>  <p>  </p>  <p><b>GET vs POST:</b>  If the JQL query is too large to be encoded as a query param you should instead  POST to this resource.  </p>  <p>  <b>Expanding Issues in the Search Result:</b>  It is possible to expand the issues returned by directly specifying the expansion on the expand parameter passed  in to this resources.  </p>  <p>  For instance, to expand the &quot;changelog&quot; for all the issues on the search result, it is neccesary to  specify &quot;changelog&quot; as one of the values to expand.  </p>
     * @param {Object} opts Optional parameters
     * @param {String} [jql] a JQL query string
     * @param {Number} [startAt] the index of the first issue to return (0-based)
     * @param {Number} [maxResults] the maximum number of issues to return (defaults to 50). The maximum allowable value is                       dictated by the JIRA property 'jira.search.views.default.max'. If you specify a value that is higher than this                       number, your search results will be truncated.
     * @param {Boolean} [validateQuery = true)] whether to validate the JQL query
     * @param {String} [fields] the list of fields to return for each issue. By default, all navigable fields are returned.
     * @param {String} [expand] A comma-separated list of the parameters to expand.
     * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'jql': opts['jql'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'validateQuery': opts['validateQuery'],
        'fields': opts['fields'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsingSearchRequest operation.
     * @callback module:api/DefaultApi~searchUsingSearchRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a search using JQL.
     * @param {module:api/DefaultApi~searchUsingSearchRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchUsingSearchRequest(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setActors operation.
     * @callback module:api/DefaultApi~setActorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a project role to include the specified actors (users or groups).
     * @param {String} projectIdOrKey the project id or project key
     * @param {Number} id the project role id
     * @param {module:api/DefaultApi~setActorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setActors(projectIdOrKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling setActors");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setActors");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/role/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setBaseURL operation.
     * @callback module:api/DefaultApi~setBaseURLCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the base URL that is configured for this JIRA instance.
     * @param {module:api/DefaultApi~setBaseURLCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setBaseURL(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/settings/baseUrl', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDefaultShareScope operation.
     * @callback module:api/DefaultApi~setDefaultShareScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default share scope of the logged-in user. Available values are GLOBAL and PRIVATE.
     * @param {module:api/DefaultApi~setDefaultShareScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setDefaultShareScope(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/filter/defaultShareScope', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setDraftIssueType operation.
     * @callback module:api/DefaultApi~setDraftIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the issue type mapping for the passed draft scheme.  <p/>  The passed representation can have its updateDraftIfNeeded flag set to true to indicate that  the draft should be created/updated when the actual scheme cannot be edited.
     * @param {String} issueType the issue type being set.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~setDraftIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setDraftIssueType(issueType, id, callback) {
      let postBody = null;
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling setDraftIssueType");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setDraftIssueType");
      }

      let pathParams = {
        'issueType': issueType,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/issuetype/{issueType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setIssueNavigatorDefaultColumns operation.
     * @callback module:api/DefaultApi~setIssueNavigatorDefaultColumnsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default system columns for issue navigator. Admin permission will be required.
     * @param {module:api/DefaultApi~setIssueNavigatorDefaultColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setIssueNavigatorDefaultColumns(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/settings/columns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setIssueType operation.
     * @callback module:api/DefaultApi~setIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the issue type mapping for the passed scheme.  <p/>  The passed representation can have its updateDraftIfNeeded flag set to true to indicate that  the draft should be created/updated when the actual scheme cannot be edited.
     * @param {String} issueType the issue type being set.
     * @param {Number} id the id of the scheme.
     * @param {module:api/DefaultApi~setIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setIssueType(issueType, id, callback) {
      let postBody = null;
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling setIssueType");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setIssueType");
      }

      let pathParams = {
        'issueType': issueType,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/issuetype/{issueType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPreference operation.
     * @callback module:api/DefaultApi~setPreferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets preference of the currently logged in user. Preference key must be provided as input parameters (key). Value  must be provided as post body. If key or value parameter is not provided - status code 404. If preference is set  - status code 204.
     * @param {Object} opts Optional parameters
     * @param {String} [key] - key of the preference to be set.
     * @param {module:api/DefaultApi~setPreferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setPreference(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/mypreferences', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPropertyViaRestfulTable operation.
     * @callback module:api/DefaultApi~setPropertyViaRestfulTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify an application property via PUT. The \"value\" field present in the PUT will override the existing value.
     * @param {String} id 
     * @param {module:api/DefaultApi~setPropertyViaRestfulTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setPropertyViaRestfulTable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setPropertyViaRestfulTable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/application-properties/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setReadyToUpgrade operation.
     * @callback module:api/DefaultApi~setReadyToUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~setReadyToUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setReadyToUpgrade(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/cluster/zdu/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setSchemeAttribute operation.
     * @callback module:api/DefaultApi~setSchemeAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or inserts the attribute for a permission scheme specified by permission scheme id.  The attribute consists of the key and the value. The value will be converted to Boolean using Boolean#valueOf.
     * @param {Number} permissionSchemeId permission scheme id
     * @param {String} key permission scheme attribute key
     * @param {module:api/DefaultApi~setSchemeAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setSchemeAttribute(permissionSchemeId, key, callback) {
      let postBody = null;
      // verify the required parameter 'permissionSchemeId' is set
      if (permissionSchemeId === undefined || permissionSchemeId === null) {
        throw new Error("Missing the required parameter 'permissionSchemeId' when calling setSchemeAttribute");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling setSchemeAttribute");
      }

      let pathParams = {
        'permissionSchemeId': permissionSchemeId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{permissionSchemeId}/attribute/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the start operation.
     * @callback module:api/DefaultApi~startCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~startCallback} callback The callback function, accepting three arguments: error, data, response
     */
    start(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/monitoring/jmx/startExposing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stop operation.
     * @callback module:api/DefaultApi~stopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~stopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stop(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/monitoring/jmx/stopExposing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeTemporaryAvatar operation.
     * @callback module:api/DefaultApi~storeTemporaryAvatarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates temporary avatar
     * @param {String} type the avatar type
     * @param {Object} opts Optional parameters
     * @param {String} [filename] name of file being uploaded
     * @param {Number} [size] size of file
     * @param {module:api/DefaultApi~storeTemporaryAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeTemporaryAvatar(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling storeTemporaryAvatar");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'filename': opts['filename'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/avatar/{type}/temporary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/DefaultApi~updateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the passed workflow scheme.  <p/>  The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate  no change for that field.  <p/>  The passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft  should be created and/or updated when the actual scheme cannot be edited (e.g. when the scheme is being used by  a project). Values not appearing the body will not be touched.
     * @param {Number} id the id of the scheme.
     * @param {module:api/DefaultApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    update(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling update");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComment operation.
     * @callback module:api/DefaultApi~updateCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing comment using its JSON representation.
     * @param {String} issueIdOrKey of the issue the comment belongs to
     * @param {String} id the ID of the comment to request
     * @param {Object} opts Optional parameters
     * @param {String} [expand] optional flags: renderedBody (provides body rendered in HTML)
     * @param {module:api/DefaultApi~updateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateComment(issueIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling updateComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComment");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/comment/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComponent operation.
     * @callback module:api/DefaultApi~updateComponentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a component via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field  is not present, it is silently ignored.  <p>  If leadUserName is an empty string (\"\") the component lead will be removed.
     * @param {String} id The component to delete.
     * @param {module:api/DefaultApi~updateComponentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateComponent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComponent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/component/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDefault operation.
     * @callback module:api/DefaultApi~updateDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the default workflow for the passed workflow scheme.  <p/>  The passed representation can have its  updateDraftIfNeeded flag set to true to indicate that the draft should be created/updated when the actual scheme  cannot be edited.
     * @param {Number} id the id of the scheme.
     * @param {module:api/DefaultApi~updateDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDefault(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDefault");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDraft operation.
     * @callback module:api/DefaultApi~updateDraftCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a draft workflow scheme. The draft will created if necessary.  <p/>  The body is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~updateDraftCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDraft(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDraft");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDraftDefault operation.
     * @callback module:api/DefaultApi~updateDraftDefaultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the default workflow for the passed draft workflow scheme.
     * @param {Number} id the id of the parent scheme.
     * @param {module:api/DefaultApi~updateDraftDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDraftDefault(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDraftDefault");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDraftWorkflowMapping operation.
     * @callback module:api/DefaultApi~updateDraftWorkflowMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the draft scheme to include the passed mapping.  <p/>  The body is a representation of the workflow mapping.  Values not passed are assumed to indicate no change for that field.
     * @param {Number} id the id of the parent scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] the name of the workflow mapping to update.
     * @param {module:api/DefaultApi~updateDraftWorkflowMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDraftWorkflowMapping(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDraftWorkflowMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/draft/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIssueLinkType operation.
     * @callback module:api/DefaultApi~updateIssueLinkTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the specified issue link type.
     * @param {String} issueLinkTypeId 
     * @param {module:api/DefaultApi~updateIssueLinkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateIssueLinkType(issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling updateIssueLinkType");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issueLinkType/{issueLinkTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIssueType operation.
     * @callback module:api/DefaultApi~updateIssueTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified issue type from a JSON representation.
     * @param {String} id the id of the issue type to update.
     * @param {module:api/DefaultApi~updateIssueTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateIssueType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIssueType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issuetype/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissionScheme operation.
     * @callback module:api/DefaultApi~updatePermissionSchemeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a permission scheme.  <p>  If the permissions list is present then it will be set in the permission scheme, which basically means it will overwrite any permission grants that  existed in the permission scheme. Sending an empty list will remove all permission grants from the permission scheme.  </p>  <p>  To update just the name and description, do not send permissions list at all.  </p>  <p>  To add or remove a single permission grant instead of updating the whole list at once use the <b>{schemeId}/permission/</b> resource.  </p>
     * @param {Number} schemeId 
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {module:api/DefaultApi~updatePermissionSchemeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePermissionScheme(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling updatePermissionScheme");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/permissionscheme/{schemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/DefaultApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a project.  <p>  Only non null values sent in JSON will be updated in the project.</p>  <p>  Values available for the assigneeType field are: \"PROJECT_LEAD\" and \"UNASSIGNED\".</p>
     * @param {String} projectIdOrKey the project id or project key
     * @param {Object} opts Optional parameters
     * @param {String} [expand] the parameters to expand in returned project
     * @param {module:api/DefaultApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProject(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling updateProject");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectCategory operation.
     * @callback module:api/DefaultApi~updateProjectCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a project category via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field  is not present, it is silently ignored.
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateProjectCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProjectCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProjectCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/projectCategory/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectType operation.
     * @callback module:api/DefaultApi~updateProjectTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the type of a project.
     * @param {String} projectIdOrKey identity of the project to update
     * @param {String} newProjectTypeKey The key of the new project type
     * @param {module:api/DefaultApi~updateProjectTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProjectType(projectIdOrKey, newProjectTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling updateProjectType");
      }
      // verify the required parameter 'newProjectTypeKey' is set
      if (newProjectTypeKey === undefined || newProjectTypeKey === null) {
        throw new Error("Missing the required parameter 'newProjectTypeKey' when calling updateProjectType");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'newProjectTypeKey': newProjectTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/project/{projectIdOrKey}/type/{newProjectTypeKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProperty operation.
     * @callback module:api/DefaultApi~updatePropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/add new property to a transition. Trying to update a property that does  not exist will result in a new property being added.
     * @param {Number} id the ID of the transition within the workflow.
     * @param {Object} opts Optional parameters
     * @param {String} [key] the name of the property to add.
     * @param {String} [workflowName] the name of the workflow to use.
     * @param {String} [workflowMode] the type of workflow to use. Can either be \"live\" or \"draft\".
     * @param {module:api/DefaultApi~updatePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProperty(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProperty");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'key': opts['key'],
        'workflowName': opts['workflowName'],
        'workflowMode': opts['workflowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflow/api/2/transitions/{id}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRemoteIssueLink operation.
     * @callback module:api/DefaultApi~updateRemoteIssueLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a remote issue link from a JSON representation. Any fields not provided are set to null.
     * @param {String} linkId the id of the remote issue link
     * @param {String} issueIdOrKey the issue to create the remote issue link for
     * @param {module:api/DefaultApi~updateRemoteIssueLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRemoteIssueLink(linkId, issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling updateRemoteIssueLink");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling updateRemoteIssueLink");
      }

      let pathParams = {
        'linkId': linkId,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/remotelink/{linkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVersion operation.
     * @callback module:api/DefaultApi~updateVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a version via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field  is not present, it is silently ignored.
     * @param {String} id The version to delete
     * @param {module:api/DefaultApi~updateVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVersion(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVersion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/version/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkflowMapping operation.
     * @callback module:api/DefaultApi~updateWorkflowMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the scheme to include the passed mapping.  <p/>  The body is a representation of the workflow mapping.  Values not passed are assumed to indicate no change for that field.  <p/>  The passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft  should be created/updated when the actual scheme cannot be edited.
     * @param {Number} id the id of the scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [workflowName] the name of the workflow mapping to update.
     * @param {module:api/DefaultApi~updateWorkflowMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWorkflowMapping(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkflowMapping");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/workflowscheme/{id}/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorklog operation.
     * @callback module:api/DefaultApi~updateWorklogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing worklog entry.  <p>Note that:</p>   <ul>       <li>Fields possible for editing are: comment, visibility, started, timeSpent and timeSpentSeconds.</li>       <li>Either timeSpent or timeSpentSeconds can be set.</li>       <li>Fields which are not set will not be updated.</li>       <li>For a request to be valid, it has to have at least one field change.</li>   </ul>
     * @param {String} issueIdOrKey a string containing the issue id or key the worklog belongs to
     * @param {String} id id of the worklog to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [adjustEstimate] (optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are                        <ul>                        <li>\"new\" - sets the estimate to a specific value</li>                        <li>\"leave\"- leaves the estimate as is</li>                        <li>\"auto\"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog</li> </ul>
     * @param {String} [newEstimate] (required when \"new\" is selected for adjustEstimate) the new value for the remaining estimate field.
     * @param {module:api/DefaultApi~updateWorklogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWorklog(issueIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling updateWorklog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorklog");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'id': id
      };
      let queryParams = {
        'adjustEstimate': opts['adjustEstimate'],
        'newEstimate': opts['newEstimate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/issue/{issueIdOrKey}/worklog/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validate operation.
     * @callback module:api/DefaultApi~validateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~validateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/2/licenseValidator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
