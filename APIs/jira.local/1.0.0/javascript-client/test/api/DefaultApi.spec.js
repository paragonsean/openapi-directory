/**
 * JIRA 7.6.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Jira761);
  }
}(this, function(expect, Jira761) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Jira761.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('acknowledgeErrors', function() {
      it('should call acknowledgeErrors successfully', function(done) {
        //uncomment below and update the code to test acknowledgeErrors
        //instance.acknowledgeErrors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addActorUsers', function() {
      it('should call addActorUsers successfully', function(done) {
        //uncomment below and update the code to test addActorUsers
        //instance.addActorUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addAttachment', function() {
      it('should call addAttachment successfully', function(done) {
        //uncomment below and update the code to test addAttachment
        //instance.addAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addComment', function() {
      it('should call addComment successfully', function(done) {
        //uncomment below and update the code to test addComment
        //instance.addComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addField', function() {
      it('should call addField successfully', function(done) {
        //uncomment below and update the code to test addField
        //instance.addField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFieldToDefaultScreen', function() {
      it('should call addFieldToDefaultScreen successfully', function(done) {
        //uncomment below and update the code to test addFieldToDefaultScreen
        //instance.addFieldToDefaultScreen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addProjectRoleActorsToRole', function() {
      it('should call addProjectRoleActorsToRole successfully', function(done) {
        //uncomment below and update the code to test addProjectRoleActorsToRole
        //instance.addProjectRoleActorsToRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRecord', function() {
      it('should call addRecord successfully', function(done) {
        //uncomment below and update the code to test addRecord
        //instance.addRecord(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addSharePermission', function() {
      it('should call addSharePermission successfully', function(done) {
        //uncomment below and update the code to test addSharePermission
        //instance.addSharePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTab', function() {
      it('should call addTab successfully', function(done) {
        //uncomment below and update the code to test addTab
        //instance.addTab(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addUserToApplication', function() {
      it('should call addUserToApplication successfully', function(done) {
        //uncomment below and update the code to test addUserToApplication
        //instance.addUserToApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addUserToGroup', function() {
      it('should call addUserToGroup successfully', function(done) {
        //uncomment below and update the code to test addUserToGroup
        //instance.addUserToGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addVote', function() {
      it('should call addVote successfully', function(done) {
        //uncomment below and update the code to test addVote
        //instance.addVote(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWatcher', function() {
      it('should call addWatcher successfully', function(done) {
        //uncomment below and update the code to test addWatcher
        //instance.addWatcher(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWorklog', function() {
      it('should call addWorklog successfully', function(done) {
        //uncomment below and update the code to test addWorklog
        //instance.addWorklog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ApplicationPropertiesGet', function() {
      it('should call api2ApplicationPropertiesGet successfully', function(done) {
        //uncomment below and update the code to test api2ApplicationPropertiesGet
        //instance.api2ApplicationPropertiesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2AvatarTypeTemporaryCropPost', function() {
      it('should call api2AvatarTypeTemporaryCropPost successfully', function(done) {
        //uncomment below and update the code to test api2AvatarTypeTemporaryCropPost
        //instance.api2AvatarTypeTemporaryCropPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2CommentCommentIdPropertiesGet', function() {
      it('should call api2CommentCommentIdPropertiesGet successfully', function(done) {
        //uncomment below and update the code to test api2CommentCommentIdPropertiesGet
        //instance.api2CommentCommentIdPropertiesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2CommentCommentIdPropertiesPropertyKeyDelete', function() {
      it('should call api2CommentCommentIdPropertiesPropertyKeyDelete successfully', function(done) {
        //uncomment below and update the code to test api2CommentCommentIdPropertiesPropertyKeyDelete
        //instance.api2CommentCommentIdPropertiesPropertyKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2CommentCommentIdPropertiesPropertyKeyGet', function() {
      it('should call api2CommentCommentIdPropertiesPropertyKeyGet successfully', function(done) {
        //uncomment below and update the code to test api2CommentCommentIdPropertiesPropertyKeyGet
        //instance.api2CommentCommentIdPropertiesPropertyKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2CommentCommentIdPropertiesPropertyKeyPut', function() {
      it('should call api2CommentCommentIdPropertiesPropertyKeyPut successfully', function(done) {
        //uncomment below and update the code to test api2CommentCommentIdPropertiesPropertyKeyPut
        //instance.api2CommentCommentIdPropertiesPropertyKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ComponentIdDelete', function() {
      it('should call api2ComponentIdDelete successfully', function(done) {
        //uncomment below and update the code to test api2ComponentIdDelete
        //instance.api2ComponentIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2DashboardDashboardIdItemsItemIdPropertiesGet', function() {
      it('should call api2DashboardDashboardIdItemsItemIdPropertiesGet successfully', function(done) {
        //uncomment below and update the code to test api2DashboardDashboardIdItemsItemIdPropertiesGet
        //instance.api2DashboardDashboardIdItemsItemIdPropertiesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete', function() {
      it('should call api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete successfully', function(done) {
        //uncomment below and update the code to test api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete
        //instance.api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet', function() {
      it('should call api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet successfully', function(done) {
        //uncomment below and update the code to test api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet
        //instance.api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut', function() {
      it('should call api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut successfully', function(done) {
        //uncomment below and update the code to test api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut
        //instance.api2DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2FilterIdColumnsDelete', function() {
      it('should call api2FilterIdColumnsDelete successfully', function(done) {
        //uncomment below and update the code to test api2FilterIdColumnsDelete
        //instance.api2FilterIdColumnsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2FilterIdColumnsGet', function() {
      it('should call api2FilterIdColumnsGet successfully', function(done) {
        //uncomment below and update the code to test api2FilterIdColumnsGet
        //instance.api2FilterIdColumnsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2FilterIdColumnsPut', function() {
      it('should call api2FilterIdColumnsPut successfully', function(done) {
        //uncomment below and update the code to test api2FilterIdColumnsPut
        //instance.api2FilterIdColumnsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssueIssueIdOrKeyPropertiesGet', function() {
      it('should call api2IssueIssueIdOrKeyPropertiesGet successfully', function(done) {
        //uncomment below and update the code to test api2IssueIssueIdOrKeyPropertiesGet
        //instance.api2IssueIssueIdOrKeyPropertiesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete', function() {
      it('should call api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete successfully', function(done) {
        //uncomment below and update the code to test api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete
        //instance.api2IssueIssueIdOrKeyPropertiesPropertyKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssueIssueIdOrKeyPropertiesPropertyKeyGet', function() {
      it('should call api2IssueIssueIdOrKeyPropertiesPropertyKeyGet successfully', function(done) {
        //uncomment below and update the code to test api2IssueIssueIdOrKeyPropertiesPropertyKeyGet
        //instance.api2IssueIssueIdOrKeyPropertiesPropertyKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssueIssueIdOrKeyPropertiesPropertyKeyPut', function() {
      it('should call api2IssueIssueIdOrKeyPropertiesPropertyKeyPut successfully', function(done) {
        //uncomment below and update the code to test api2IssueIssueIdOrKeyPropertiesPropertyKeyPut
        //instance.api2IssueIssueIdOrKeyPropertiesPropertyKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssuesecurityschemesIdGet', function() {
      it('should call api2IssuesecurityschemesIdGet successfully', function(done) {
        //uncomment below and update the code to test api2IssuesecurityschemesIdGet
        //instance.api2IssuesecurityschemesIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssuetypeIdAvatarPost', function() {
      it('should call api2IssuetypeIdAvatarPost successfully', function(done) {
        //uncomment below and update the code to test api2IssuetypeIdAvatarPost
        //instance.api2IssuetypeIdAvatarPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssuetypeIdAvatarTemporaryPost', function() {
      it('should call api2IssuetypeIdAvatarTemporaryPost successfully', function(done) {
        //uncomment below and update the code to test api2IssuetypeIdAvatarTemporaryPost
        //instance.api2IssuetypeIdAvatarTemporaryPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssuetypeIdDelete', function() {
      it('should call api2IssuetypeIdDelete successfully', function(done) {
        //uncomment below and update the code to test api2IssuetypeIdDelete
        //instance.api2IssuetypeIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssuetypeIdGet', function() {
      it('should call api2IssuetypeIdGet successfully', function(done) {
        //uncomment below and update the code to test api2IssuetypeIdGet
        //instance.api2IssuetypeIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete', function() {
      it('should call api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete successfully', function(done) {
        //uncomment below and update the code to test api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete
        //instance.api2IssuetypeIssueTypeIdPropertiesPropertyKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet', function() {
      it('should call api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet successfully', function(done) {
        //uncomment below and update the code to test api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet
        //instance.api2IssuetypeIssueTypeIdPropertiesPropertyKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut', function() {
      it('should call api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut successfully', function(done) {
        //uncomment below and update the code to test api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut
        //instance.api2IssuetypeIssueTypeIdPropertiesPropertyKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2MyselfGet', function() {
      it('should call api2MyselfGet successfully', function(done) {
        //uncomment below and update the code to test api2MyselfGet
        //instance.api2MyselfGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2MyselfPut', function() {
      it('should call api2MyselfPut successfully', function(done) {
        //uncomment below and update the code to test api2MyselfPut
        //instance.api2MyselfPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2NotificationschemeIdGet', function() {
      it('should call api2NotificationschemeIdGet successfully', function(done) {
        //uncomment below and update the code to test api2NotificationschemeIdGet
        //instance.api2NotificationschemeIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyAvatarIdDelete', function() {
      it('should call api2ProjectProjectIdOrKeyAvatarIdDelete successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyAvatarIdDelete
        //instance.api2ProjectProjectIdOrKeyAvatarIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyAvatarPost', function() {
      it('should call api2ProjectProjectIdOrKeyAvatarPost successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyAvatarPost
        //instance.api2ProjectProjectIdOrKeyAvatarPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyAvatarPut', function() {
      it('should call api2ProjectProjectIdOrKeyAvatarPut successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyAvatarPut
        //instance.api2ProjectProjectIdOrKeyAvatarPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyAvatarTemporaryPost', function() {
      it('should call api2ProjectProjectIdOrKeyAvatarTemporaryPost successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyAvatarTemporaryPost
        //instance.api2ProjectProjectIdOrKeyAvatarTemporaryPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyAvatarsGet', function() {
      it('should call api2ProjectProjectIdOrKeyAvatarsGet successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyAvatarsGet
        //instance.api2ProjectProjectIdOrKeyAvatarsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyGet', function() {
      it('should call api2ProjectProjectIdOrKeyGet successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyGet
        //instance.api2ProjectProjectIdOrKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyPropertiesGet', function() {
      it('should call api2ProjectProjectIdOrKeyPropertiesGet successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyPropertiesGet
        //instance.api2ProjectProjectIdOrKeyPropertiesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete', function() {
      it('should call api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete
        //instance.api2ProjectProjectIdOrKeyPropertiesPropertyKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet', function() {
      it('should call api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet
        //instance.api2ProjectProjectIdOrKeyPropertiesPropertyKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut', function() {
      it('should call api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut
        //instance.api2ProjectProjectIdOrKeyPropertiesPropertyKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectIdOrKeyRoleGet', function() {
      it('should call api2ProjectProjectIdOrKeyRoleGet successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectIdOrKeyRoleGet
        //instance.api2ProjectProjectIdOrKeyRoleGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGet', function() {
      it('should call api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGet successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGet
        //instance.api2ProjectProjectKeyOrIdIssuesecuritylevelschemeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectProjectKeyOrIdNotificationschemeGet', function() {
      it('should call api2ProjectProjectKeyOrIdNotificationschemeGet successfully', function(done) {
        //uncomment below and update the code to test api2ProjectProjectKeyOrIdNotificationschemeGet
        //instance.api2ProjectProjectKeyOrIdNotificationschemeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2ProjectvalidateKeyGet', function() {
      it('should call api2ProjectvalidateKeyGet successfully', function(done) {
        //uncomment below and update the code to test api2ProjectvalidateKeyGet
        //instance.api2ProjectvalidateKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2RoleGet', function() {
      it('should call api2RoleGet successfully', function(done) {
        //uncomment below and update the code to test api2RoleGet
        //instance.api2RoleGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete', function() {
      it('should call api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete successfully', function(done) {
        //uncomment below and update the code to test api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete
        //instance.api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost', function() {
      it('should call api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost successfully', function(done) {
        //uncomment below and update the code to test api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost
        //instance.api2UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost', function() {
      it('should call api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost successfully', function(done) {
        //uncomment below and update the code to test api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost
        //instance.api2UniversalAvatarTypeTypeOwnerOwningObjectIdTempPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserAvatarIdDelete', function() {
      it('should call api2UserAvatarIdDelete successfully', function(done) {
        //uncomment below and update the code to test api2UserAvatarIdDelete
        //instance.api2UserAvatarIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserAvatarPost', function() {
      it('should call api2UserAvatarPost successfully', function(done) {
        //uncomment below and update the code to test api2UserAvatarPost
        //instance.api2UserAvatarPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserAvatarPut', function() {
      it('should call api2UserAvatarPut successfully', function(done) {
        //uncomment below and update the code to test api2UserAvatarPut
        //instance.api2UserAvatarPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserAvatarTemporaryPost', function() {
      it('should call api2UserAvatarTemporaryPost successfully', function(done) {
        //uncomment below and update the code to test api2UserAvatarTemporaryPost
        //instance.api2UserAvatarTemporaryPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserAvatarsGet', function() {
      it('should call api2UserAvatarsGet successfully', function(done) {
        //uncomment below and update the code to test api2UserAvatarsGet
        //instance.api2UserAvatarsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserColumnsDelete', function() {
      it('should call api2UserColumnsDelete successfully', function(done) {
        //uncomment below and update the code to test api2UserColumnsDelete
        //instance.api2UserColumnsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserColumnsGet', function() {
      it('should call api2UserColumnsGet successfully', function(done) {
        //uncomment below and update the code to test api2UserColumnsGet
        //instance.api2UserColumnsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserColumnsPut', function() {
      it('should call api2UserColumnsPut successfully', function(done) {
        //uncomment below and update the code to test api2UserColumnsPut
        //instance.api2UserColumnsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserGet', function() {
      it('should call api2UserGet successfully', function(done) {
        //uncomment below and update the code to test api2UserGet
        //instance.api2UserGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserPropertiesGet', function() {
      it('should call api2UserPropertiesGet successfully', function(done) {
        //uncomment below and update the code to test api2UserPropertiesGet
        //instance.api2UserPropertiesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserPropertiesPropertyKeyDelete', function() {
      it('should call api2UserPropertiesPropertyKeyDelete successfully', function(done) {
        //uncomment below and update the code to test api2UserPropertiesPropertyKeyDelete
        //instance.api2UserPropertiesPropertyKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserPropertiesPropertyKeyGet', function() {
      it('should call api2UserPropertiesPropertyKeyGet successfully', function(done) {
        //uncomment below and update the code to test api2UserPropertiesPropertyKeyGet
        //instance.api2UserPropertiesPropertyKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserPropertiesPropertyKeyPut', function() {
      it('should call api2UserPropertiesPropertyKeyPut successfully', function(done) {
        //uncomment below and update the code to test api2UserPropertiesPropertyKeyPut
        //instance.api2UserPropertiesPropertyKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2UserPut', function() {
      it('should call api2UserPut successfully', function(done) {
        //uncomment below and update the code to test api2UserPut
        //instance.api2UserPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2VersionIdDelete', function() {
      it('should call api2VersionIdDelete successfully', function(done) {
        //uncomment below and update the code to test api2VersionIdDelete
        //instance.api2VersionIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2VersionIdRemoveAndSwapPost', function() {
      it('should call api2VersionIdRemoveAndSwapPost successfully', function(done) {
        //uncomment below and update the code to test api2VersionIdRemoveAndSwapPost
        //instance.api2VersionIdRemoveAndSwapPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2VersionVersionIdRemotelinkGlobalIdPost', function() {
      it('should call api2VersionVersionIdRemotelinkGlobalIdPost successfully', function(done) {
        //uncomment below and update the code to test api2VersionVersionIdRemotelinkGlobalIdPost
        //instance.api2VersionVersionIdRemotelinkGlobalIdPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2VersionVersionIdRemotelinkPost', function() {
      it('should call api2VersionVersionIdRemotelinkPost successfully', function(done) {
        //uncomment below and update the code to test api2VersionVersionIdRemotelinkPost
        //instance.api2VersionVersionIdRemotelinkPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2WorkflowApi2TransitionsIdPropertiesDelete', function() {
      it('should call api2WorkflowApi2TransitionsIdPropertiesDelete successfully', function(done) {
        //uncomment below and update the code to test api2WorkflowApi2TransitionsIdPropertiesDelete
        //instance.api2WorkflowApi2TransitionsIdPropertiesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2WorkflowschemeIdIssuetypeIssueTypeDelete', function() {
      it('should call api2WorkflowschemeIdIssuetypeIssueTypeDelete successfully', function(done) {
        //uncomment below and update the code to test api2WorkflowschemeIdIssuetypeIssueTypeDelete
        //instance.api2WorkflowschemeIdIssuetypeIssueTypeDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('api2WorkflowschemeIdIssuetypeIssueTypeGet', function() {
      it('should call api2WorkflowschemeIdIssuetypeIssueTypeGet successfully', function(done) {
        //uncomment below and update the code to test api2WorkflowschemeIdIssuetypeIssueTypeGet
        //instance.api2WorkflowschemeIdIssuetypeIssueTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('approveUpgrade', function() {
      it('should call approveUpgrade successfully', function(done) {
        //uncomment below and update the code to test approveUpgrade
        //instance.approveUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('areMetricsExposed', function() {
      it('should call areMetricsExposed successfully', function(done) {
        //uncomment below and update the code to test areMetricsExposed
        //instance.areMetricsExposed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assign', function() {
      it('should call assign successfully', function(done) {
        //uncomment below and update the code to test assign
        //instance.assign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assignPermissionScheme', function() {
      it('should call assignPermissionScheme successfully', function(done) {
        //uncomment below and update the code to test assignPermissionScheme
        //instance.assignPermissionScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('canMoveSubTask', function() {
      it('should call canMoveSubTask successfully', function(done) {
        //uncomment below and update the code to test canMoveSubTask
        //instance.canMoveSubTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelUpgrade', function() {
      it('should call cancelUpgrade successfully', function(done) {
        //uncomment below and update the code to test cancelUpgrade
        //instance.cancelUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeMyPassword', function() {
      it('should call changeMyPassword successfully', function(done) {
        //uncomment below and update the code to test changeMyPassword
        //instance.changeMyPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeUserPassword', function() {
      it('should call changeUserPassword successfully', function(done) {
        //uncomment below and update the code to test changeUserPassword
        //instance.changeUserPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createComponent', function() {
      it('should call createComponent successfully', function(done) {
        //uncomment below and update the code to test createComponent
        //instance.createComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCustomField', function() {
      it('should call createCustomField successfully', function(done) {
        //uncomment below and update the code to test createCustomField
        //instance.createCustomField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDraftForParent', function() {
      it('should call createDraftForParent successfully', function(done) {
        //uncomment below and update the code to test createDraftForParent
        //instance.createDraftForParent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFilter', function() {
      it('should call createFilter successfully', function(done) {
        //uncomment below and update the code to test createFilter
        //instance.createFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGroup', function() {
      it('should call createGroup successfully', function(done) {
        //uncomment below and update the code to test createGroup
        //instance.createGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIssue', function() {
      it('should call createIssue successfully', function(done) {
        //uncomment below and update the code to test createIssue
        //instance.createIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIssueLinkType', function() {
      it('should call createIssueLinkType successfully', function(done) {
        //uncomment below and update the code to test createIssueLinkType
        //instance.createIssueLinkType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIssueType', function() {
      it('should call createIssueType successfully', function(done) {
        //uncomment below and update the code to test createIssueType
        //instance.createIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIssues', function() {
      it('should call createIssues successfully', function(done) {
        //uncomment below and update the code to test createIssues
        //instance.createIssues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOrUpdateRemoteIssueLink', function() {
      it('should call createOrUpdateRemoteIssueLink successfully', function(done) {
        //uncomment below and update the code to test createOrUpdateRemoteIssueLink
        //instance.createOrUpdateRemoteIssueLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPermissionGrant', function() {
      it('should call createPermissionGrant successfully', function(done) {
        //uncomment below and update the code to test createPermissionGrant
        //instance.createPermissionGrant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPermissionScheme', function() {
      it('should call createPermissionScheme successfully', function(done) {
        //uncomment below and update the code to test createPermissionScheme
        //instance.createPermissionScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProjectCategory', function() {
      it('should call createProjectCategory successfully', function(done) {
        //uncomment below and update the code to test createProjectCategory
        //instance.createProjectCategory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProjectRole', function() {
      it('should call createProjectRole successfully', function(done) {
        //uncomment below and update the code to test createProjectRole
        //instance.createProjectRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProperty', function() {
      it('should call createProperty successfully', function(done) {
        //uncomment below and update the code to test createProperty
        //instance.createProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createScheme', function() {
      it('should call createScheme successfully', function(done) {
        //uncomment below and update the code to test createScheme
        //instance.createScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVersion', function() {
      it('should call createVersion successfully', function(done) {
        //uncomment below and update the code to test createVersion
        //instance.createVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('currentUser', function() {
      it('should call currentUser successfully', function(done) {
        //uncomment below and update the code to test currentUser
        //instance.currentUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteActor', function() {
      it('should call deleteActor successfully', function(done) {
        //uncomment below and update the code to test deleteActor
        //instance.deleteActor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteComment', function() {
      it('should call deleteComment successfully', function(done) {
        //uncomment below and update the code to test deleteComment
        //instance.deleteComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDefault', function() {
      it('should call deleteDefault successfully', function(done) {
        //uncomment below and update the code to test deleteDefault
        //instance.deleteDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDraftById', function() {
      it('should call deleteDraftById successfully', function(done) {
        //uncomment below and update the code to test deleteDraftById
        //instance.deleteDraftById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDraftDefault', function() {
      it('should call deleteDraftDefault successfully', function(done) {
        //uncomment below and update the code to test deleteDraftDefault
        //instance.deleteDraftDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDraftIssueType', function() {
      it('should call deleteDraftIssueType successfully', function(done) {
        //uncomment below and update the code to test deleteDraftIssueType
        //instance.deleteDraftIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDraftWorkflowMapping', function() {
      it('should call deleteDraftWorkflowMapping successfully', function(done) {
        //uncomment below and update the code to test deleteDraftWorkflowMapping
        //instance.deleteDraftWorkflowMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFilter', function() {
      it('should call deleteFilter successfully', function(done) {
        //uncomment below and update the code to test deleteFilter
        //instance.deleteFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIssue', function() {
      it('should call deleteIssue successfully', function(done) {
        //uncomment below and update the code to test deleteIssue
        //instance.deleteIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIssueLink', function() {
      it('should call deleteIssueLink successfully', function(done) {
        //uncomment below and update the code to test deleteIssueLink
        //instance.deleteIssueLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIssueLinkType', function() {
      it('should call deleteIssueLinkType successfully', function(done) {
        //uncomment below and update the code to test deleteIssueLinkType
        //instance.deleteIssueLinkType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionScheme', function() {
      it('should call deletePermissionScheme successfully', function(done) {
        //uncomment below and update the code to test deletePermissionScheme
        //instance.deletePermissionScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionSchemeEntity', function() {
      it('should call deletePermissionSchemeEntity successfully', function(done) {
        //uncomment below and update the code to test deletePermissionSchemeEntity
        //instance.deletePermissionSchemeEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProjectRole', function() {
      it('should call deleteProjectRole successfully', function(done) {
        //uncomment below and update the code to test deleteProjectRole
        //instance.deleteProjectRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProjectRoleActorsFromRole', function() {
      it('should call deleteProjectRoleActorsFromRole successfully', function(done) {
        //uncomment below and update the code to test deleteProjectRoleActorsFromRole
        //instance.deleteProjectRoleActorsFromRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRemoteIssueLinkByGlobalId', function() {
      it('should call deleteRemoteIssueLinkByGlobalId successfully', function(done) {
        //uncomment below and update the code to test deleteRemoteIssueLinkByGlobalId
        //instance.deleteRemoteIssueLinkByGlobalId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRemoteIssueLinkById', function() {
      it('should call deleteRemoteIssueLinkById successfully', function(done) {
        //uncomment below and update the code to test deleteRemoteIssueLinkById
        //instance.deleteRemoteIssueLinkById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRemoteVersionLink', function() {
      it('should call deleteRemoteVersionLink successfully', function(done) {
        //uncomment below and update the code to test deleteRemoteVersionLink
        //instance.deleteRemoteVersionLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRemoteVersionLinksByVersionId', function() {
      it('should call deleteRemoteVersionLinksByVersionId successfully', function(done) {
        //uncomment below and update the code to test deleteRemoteVersionLinksByVersionId
        //instance.deleteRemoteVersionLinksByVersionId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteScheme', function() {
      it('should call deleteScheme successfully', function(done) {
        //uncomment below and update the code to test deleteScheme
        //instance.deleteScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSharePermission', function() {
      it('should call deleteSharePermission successfully', function(done) {
        //uncomment below and update the code to test deleteSharePermission
        //instance.deleteSharePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTab', function() {
      it('should call deleteTab successfully', function(done) {
        //uncomment below and update the code to test deleteTab
        //instance.deleteTab(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkflowMapping', function() {
      it('should call deleteWorkflowMapping successfully', function(done) {
        //uncomment below and update the code to test deleteWorkflowMapping
        //instance.deleteWorkflowMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorklog', function() {
      it('should call deleteWorklog successfully', function(done) {
        //uncomment below and update the code to test deleteWorklog
        //instance.deleteWorklog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('doTransition', function() {
      it('should call doTransition successfully', function(done) {
        //uncomment below and update the code to test doTransition
        //instance.doTransition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editFilter', function() {
      it('should call editFilter successfully', function(done) {
        //uncomment below and update the code to test editFilter
        //instance.editFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editIssue', function() {
      it('should call editIssue successfully', function(done) {
        //uncomment below and update the code to test editIssue
        //instance.editIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('expandForHumans', function() {
      it('should call expandForHumans successfully', function(done) {
        //uncomment below and update the code to test expandForHumans
        //instance.expandForHumans(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('expandForMachines', function() {
      it('should call expandForMachines successfully', function(done) {
        //uncomment below and update the code to test expandForMachines
        //instance.expandForMachines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAssignableUsers', function() {
      it('should call findAssignableUsers successfully', function(done) {
        //uncomment below and update the code to test findAssignableUsers
        //instance.findAssignableUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findBulkAssignableUsers', function() {
      it('should call findBulkAssignableUsers successfully', function(done) {
        //uncomment below and update the code to test findBulkAssignableUsers
        //instance.findBulkAssignableUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findGroups', function() {
      it('should call findGroups successfully', function(done) {
        //uncomment below and update the code to test findGroups
        //instance.findGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUsers', function() {
      it('should call findUsers successfully', function(done) {
        //uncomment below and update the code to test findUsers
        //instance.findUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUsersAndGroups', function() {
      it('should call findUsersAndGroups successfully', function(done) {
        //uncomment below and update the code to test findUsersAndGroups
        //instance.findUsersAndGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUsersForPicker', function() {
      it('should call findUsersForPicker successfully', function(done) {
        //uncomment below and update the code to test findUsersForPicker
        //instance.findUsersForPicker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUsersWithAllPermissions', function() {
      it('should call findUsersWithAllPermissions successfully', function(done) {
        //uncomment below and update the code to test findUsersWithAllPermissions
        //instance.findUsersWithAllPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUsersWithBrowsePermission', function() {
      it('should call findUsersWithBrowsePermission successfully', function(done) {
        //uncomment below and update the code to test findUsersWithBrowsePermission
        //instance.findUsersWithBrowsePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fullyUpdateProjectRole', function() {
      it('should call fullyUpdateProjectRole successfully', function(done) {
        //uncomment below and update the code to test fullyUpdateProjectRole
        //instance.fullyUpdateProjectRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('get', function() {
      it('should call get successfully', function(done) {
        //uncomment below and update the code to test get
        //instance.get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAccessibleProjectTypeByKey', function() {
      it('should call getAccessibleProjectTypeByKey successfully', function(done) {
        //uncomment below and update the code to test getAccessibleProjectTypeByKey
        //instance.getAccessibleProjectTypeByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAdvancedSettings', function() {
      it('should call getAdvancedSettings successfully', function(done) {
        //uncomment below and update the code to test getAdvancedSettings
        //instance.getAdvancedSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAll', function() {
      it('should call getAll successfully', function(done) {
        //uncomment below and update the code to test getAll
        //instance.getAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllFields', function() {
      it('should call getAllFields successfully', function(done) {
        //uncomment below and update the code to test getAllFields
        //instance.getAllFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPermissions', function() {
      it('should call getAllPermissions successfully', function(done) {
        //uncomment below and update the code to test getAllPermissions
        //instance.getAllPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllProjectCategories', function() {
      it('should call getAllProjectCategories successfully', function(done) {
        //uncomment below and update the code to test getAllProjectCategories
        //instance.getAllProjectCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllProjectTypes', function() {
      it('should call getAllProjectTypes successfully', function(done) {
        //uncomment below and update the code to test getAllProjectTypes
        //instance.getAllProjectTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllProjects', function() {
      it('should call getAllProjects successfully', function(done) {
        //uncomment below and update the code to test getAllProjects
        //instance.getAllProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllStatuses', function() {
      it('should call getAllStatuses successfully', function(done) {
        //uncomment below and update the code to test getAllStatuses
        //instance.getAllStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllSystemAvatars', function() {
      it('should call getAllSystemAvatars successfully', function(done) {
        //uncomment below and update the code to test getAllSystemAvatars
        //instance.getAllSystemAvatars(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllTabs', function() {
      it('should call getAllTabs successfully', function(done) {
        //uncomment below and update the code to test getAllTabs
        //instance.getAllTabs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllWorkflows', function() {
      it('should call getAllWorkflows successfully', function(done) {
        //uncomment below and update the code to test getAllWorkflows
        //instance.getAllWorkflows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAlternativeIssueTypes', function() {
      it('should call getAlternativeIssueTypes successfully', function(done) {
        //uncomment below and update the code to test getAlternativeIssueTypes
        //instance.getAlternativeIssueTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAssignedPermissionScheme', function() {
      it('should call getAssignedPermissionScheme successfully', function(done) {
        //uncomment below and update the code to test getAssignedPermissionScheme
        //instance.getAssignedPermissionScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttachment', function() {
      it('should call getAttachment successfully', function(done) {
        //uncomment below and update the code to test getAttachment
        //instance.getAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttachmentMeta', function() {
      it('should call getAttachmentMeta successfully', function(done) {
        //uncomment below and update the code to test getAttachmentMeta
        //instance.getAttachmentMeta(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAutoComplete', function() {
      it('should call getAutoComplete successfully', function(done) {
        //uncomment below and update the code to test getAutoComplete
        //instance.getAutoComplete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAvailableMetrics', function() {
      it('should call getAvailableMetrics successfully', function(done) {
        //uncomment below and update the code to test getAvailableMetrics
        //instance.getAvailableMetrics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAvatars', function() {
      it('should call getAvatars successfully', function(done) {
        //uncomment below and update the code to test getAvatars
        //instance.getAvatars(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById', function() {
      it('should call getById successfully', function(done) {
        //uncomment below and update the code to test getById
        //instance.getById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComment', function() {
      it('should call getComment successfully', function(done) {
        //uncomment below and update the code to test getComment
        //instance.getComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComments', function() {
      it('should call getComments successfully', function(done) {
        //uncomment below and update the code to test getComments
        //instance.getComments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComponent', function() {
      it('should call getComponent successfully', function(done) {
        //uncomment below and update the code to test getComponent
        //instance.getComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComponentRelatedIssues', function() {
      it('should call getComponentRelatedIssues successfully', function(done) {
        //uncomment below and update the code to test getComponentRelatedIssues
        //instance.getComponentRelatedIssues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfiguration', function() {
      it('should call getConfiguration successfully', function(done) {
        //uncomment below and update the code to test getConfiguration
        //instance.getConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCreateIssueMeta', function() {
      it('should call getCreateIssueMeta successfully', function(done) {
        //uncomment below and update the code to test getCreateIssueMeta
        //instance.getCreateIssueMeta(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFieldOption', function() {
      it('should call getCustomFieldOption successfully', function(done) {
        //uncomment below and update the code to test getCustomFieldOption
        //instance.getCustomFieldOption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDashboard', function() {
      it('should call getDashboard successfully', function(done) {
        //uncomment below and update the code to test getDashboard
        //instance.getDashboard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDefault', function() {
      it('should call getDefault successfully', function(done) {
        //uncomment below and update the code to test getDefault
        //instance.getDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDefaultShareScope', function() {
      it('should call getDefaultShareScope successfully', function(done) {
        //uncomment below and update the code to test getDefaultShareScope
        //instance.getDefaultShareScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDraftById', function() {
      it('should call getDraftById successfully', function(done) {
        //uncomment below and update the code to test getDraftById
        //instance.getDraftById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDraftDefault', function() {
      it('should call getDraftDefault successfully', function(done) {
        //uncomment below and update the code to test getDraftDefault
        //instance.getDraftDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDraftIssueType', function() {
      it('should call getDraftIssueType successfully', function(done) {
        //uncomment below and update the code to test getDraftIssueType
        //instance.getDraftIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDraftWorkflow', function() {
      it('should call getDraftWorkflow successfully', function(done) {
        //uncomment below and update the code to test getDraftWorkflow
        //instance.getDraftWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEditIssueMeta', function() {
      it('should call getEditIssueMeta successfully', function(done) {
        //uncomment below and update the code to test getEditIssueMeta
        //instance.getEditIssueMeta(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFavouriteFilters', function() {
      it('should call getFavouriteFilters successfully', function(done) {
        //uncomment below and update the code to test getFavouriteFilters
        //instance.getFavouriteFilters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFieldAutoCompleteForQueryString', function() {
      it('should call getFieldAutoCompleteForQueryString successfully', function(done) {
        //uncomment below and update the code to test getFieldAutoCompleteForQueryString
        //instance.getFieldAutoCompleteForQueryString(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFields', function() {
      it('should call getFields successfully', function(done) {
        //uncomment below and update the code to test getFields
        //instance.getFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFieldsToAdd', function() {
      it('should call getFieldsToAdd successfully', function(done) {
        //uncomment below and update the code to test getFieldsToAdd
        //instance.getFieldsToAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFilter', function() {
      it('should call getFilter successfully', function(done) {
        //uncomment below and update the code to test getFilter
        //instance.getFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGroup', function() {
      it('should call getGroup successfully', function(done) {
        //uncomment below and update the code to test getGroup
        //instance.getGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIdsOfWorklogsDeletedSince', function() {
      it('should call getIdsOfWorklogsDeletedSince successfully', function(done) {
        //uncomment below and update the code to test getIdsOfWorklogsDeletedSince
        //instance.getIdsOfWorklogsDeletedSince(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIdsOfWorklogsModifiedSince', function() {
      it('should call getIdsOfWorklogsModifiedSince successfully', function(done) {
        //uncomment below and update the code to test getIdsOfWorklogsModifiedSince
        //instance.getIdsOfWorklogsModifiedSince(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIndexSummary', function() {
      it('should call getIndexSummary successfully', function(done) {
        //uncomment below and update the code to test getIndexSummary
        //instance.getIndexSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssue', function() {
      it('should call getIssue successfully', function(done) {
        //uncomment below and update the code to test getIssue
        //instance.getIssue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueAllTypes', function() {
      it('should call getIssueAllTypes successfully', function(done) {
        //uncomment below and update the code to test getIssueAllTypes
        //instance.getIssueAllTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueLink', function() {
      it('should call getIssueLink successfully', function(done) {
        //uncomment below and update the code to test getIssueLink
        //instance.getIssueLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueLinkType', function() {
      it('should call getIssueLinkType successfully', function(done) {
        //uncomment below and update the code to test getIssueLinkType
        //instance.getIssueLinkType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueLinkTypes', function() {
      it('should call getIssueLinkTypes successfully', function(done) {
        //uncomment below and update the code to test getIssueLinkTypes
        //instance.getIssueLinkTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueNavigatorDefaultColumns', function() {
      it('should call getIssueNavigatorDefaultColumns successfully', function(done) {
        //uncomment below and update the code to test getIssueNavigatorDefaultColumns
        //instance.getIssueNavigatorDefaultColumns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssuePickerResource', function() {
      it('should call getIssuePickerResource successfully', function(done) {
        //uncomment below and update the code to test getIssuePickerResource
        //instance.getIssuePickerResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueSecuritySchemes', function() {
      it('should call getIssueSecuritySchemes successfully', function(done) {
        //uncomment below and update the code to test getIssueSecuritySchemes
        //instance.getIssueSecuritySchemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueWatchers', function() {
      it('should call getIssueWatchers successfully', function(done) {
        //uncomment below and update the code to test getIssueWatchers
        //instance.getIssueWatchers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssueWorklog', function() {
      it('should call getIssueWorklog successfully', function(done) {
        //uncomment below and update the code to test getIssueWorklog
        //instance.getIssueWorklog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIssuesecuritylevel', function() {
      it('should call getIssuesecuritylevel successfully', function(done) {
        //uncomment below and update the code to test getIssuesecuritylevel
        //instance.getIssuesecuritylevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNotificationSchemes', function() {
      it('should call getNotificationSchemes successfully', function(done) {
        //uncomment below and update the code to test getNotificationSchemes
        //instance.getNotificationSchemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPasswordPolicy', function() {
      it('should call getPasswordPolicy successfully', function(done) {
        //uncomment below and update the code to test getPasswordPolicy
        //instance.getPasswordPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPermissionScheme', function() {
      it('should call getPermissionScheme successfully', function(done) {
        //uncomment below and update the code to test getPermissionScheme
        //instance.getPermissionScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPermissionSchemeGrant', function() {
      it('should call getPermissionSchemeGrant successfully', function(done) {
        //uncomment below and update the code to test getPermissionSchemeGrant
        //instance.getPermissionSchemeGrant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPermissionSchemeGrants', function() {
      it('should call getPermissionSchemeGrants successfully', function(done) {
        //uncomment below and update the code to test getPermissionSchemeGrants
        //instance.getPermissionSchemeGrants(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPermissionSchemes', function() {
      it('should call getPermissionSchemes successfully', function(done) {
        //uncomment below and update the code to test getPermissionSchemes
        //instance.getPermissionSchemes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPermissions', function() {
      it('should call getPermissions successfully', function(done) {
        //uncomment below and update the code to test getPermissions
        //instance.getPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPreference', function() {
      it('should call getPreference successfully', function(done) {
        //uncomment below and update the code to test getPreference
        //instance.getPreference(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPriorities', function() {
      it('should call getPriorities successfully', function(done) {
        //uncomment below and update the code to test getPriorities
        //instance.getPriorities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPriority', function() {
      it('should call getPriority successfully', function(done) {
        //uncomment below and update the code to test getPriority
        //instance.getPriority(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProgress', function() {
      it('should call getProgress successfully', function(done) {
        //uncomment below and update the code to test getProgress
        //instance.getProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProgressBulk', function() {
      it('should call getProgressBulk successfully', function(done) {
        //uncomment below and update the code to test getProgressBulk
        //instance.getProgressBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectCategoryById', function() {
      it('should call getProjectCategoryById successfully', function(done) {
        //uncomment below and update the code to test getProjectCategoryById
        //instance.getProjectCategoryById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectComponents', function() {
      it('should call getProjectComponents successfully', function(done) {
        //uncomment below and update the code to test getProjectComponents
        //instance.getProjectComponents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectRole', function() {
      it('should call getProjectRole successfully', function(done) {
        //uncomment below and update the code to test getProjectRole
        //instance.getProjectRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectRoleActorsForRole', function() {
      it('should call getProjectRoleActorsForRole successfully', function(done) {
        //uncomment below and update the code to test getProjectRoleActorsForRole
        //instance.getProjectRoleActorsForRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectRolesById', function() {
      it('should call getProjectRolesById successfully', function(done) {
        //uncomment below and update the code to test getProjectRolesById
        //instance.getProjectRolesById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectTypeByKey', function() {
      it('should call getProjectTypeByKey successfully', function(done) {
        //uncomment below and update the code to test getProjectTypeByKey
        //instance.getProjectTypeByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectVersions', function() {
      it('should call getProjectVersions successfully', function(done) {
        //uncomment below and update the code to test getProjectVersions
        //instance.getProjectVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectVersionsPaginated', function() {
      it('should call getProjectVersionsPaginated successfully', function(done) {
        //uncomment below and update the code to test getProjectVersionsPaginated
        //instance.getProjectVersionsPaginated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProperties', function() {
      it('should call getProperties successfully', function(done) {
        //uncomment below and update the code to test getProperties
        //instance.getProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPropertyKeys', function() {
      it('should call getPropertyKeys successfully', function(done) {
        //uncomment below and update the code to test getPropertyKeys
        //instance.getPropertyKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecords', function() {
      it('should call getRecords successfully', function(done) {
        //uncomment below and update the code to test getRecords
        //instance.getRecords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReindexInfo', function() {
      it('should call getReindexInfo successfully', function(done) {
        //uncomment below and update the code to test getReindexInfo
        //instance.getReindexInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReindexProgress', function() {
      it('should call getReindexProgress successfully', function(done) {
        //uncomment below and update the code to test getReindexProgress
        //instance.getReindexProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRemoteIssueLinkById', function() {
      it('should call getRemoteIssueLinkById successfully', function(done) {
        //uncomment below and update the code to test getRemoteIssueLinkById
        //instance.getRemoteIssueLinkById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRemoteIssueLinks', function() {
      it('should call getRemoteIssueLinks successfully', function(done) {
        //uncomment below and update the code to test getRemoteIssueLinks
        //instance.getRemoteIssueLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRemoteVersionLink', function() {
      it('should call getRemoteVersionLink successfully', function(done) {
        //uncomment below and update the code to test getRemoteVersionLink
        //instance.getRemoteVersionLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRemoteVersionLinks', function() {
      it('should call getRemoteVersionLinks successfully', function(done) {
        //uncomment below and update the code to test getRemoteVersionLinks
        //instance.getRemoteVersionLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRemoteVersionLinksByVersionId', function() {
      it('should call getRemoteVersionLinksByVersionId successfully', function(done) {
        //uncomment below and update the code to test getRemoteVersionLinksByVersionId
        //instance.getRemoteVersionLinksByVersionId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolution', function() {
      it('should call getResolution successfully', function(done) {
        //uncomment below and update the code to test getResolution
        //instance.getResolution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolutions', function() {
      it('should call getResolutions successfully', function(done) {
        //uncomment below and update the code to test getResolutions
        //instance.getResolutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSchemeAttribute', function() {
      it('should call getSchemeAttribute successfully', function(done) {
        //uncomment below and update the code to test getSchemeAttribute
        //instance.getSchemeAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityLevelsForProject', function() {
      it('should call getSecurityLevelsForProject successfully', function(done) {
        //uncomment below and update the code to test getSecurityLevelsForProject
        //instance.getSecurityLevelsForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServerInfo', function() {
      it('should call getServerInfo successfully', function(done) {
        //uncomment below and update the code to test getServerInfo
        //instance.getServerInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSharePermission', function() {
      it('should call getSharePermission successfully', function(done) {
        //uncomment below and update the code to test getSharePermission
        //instance.getSharePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSharePermissions', function() {
      it('should call getSharePermissions successfully', function(done) {
        //uncomment below and update the code to test getSharePermissions
        //instance.getSharePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getState', function() {
      it('should call getState successfully', function(done) {
        //uncomment below and update the code to test getState
        //instance.getState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatus', function() {
      it('should call getStatus successfully', function(done) {
        //uncomment below and update the code to test getStatus
        //instance.getStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatusCategories', function() {
      it('should call getStatusCategories successfully', function(done) {
        //uncomment below and update the code to test getStatusCategories
        //instance.getStatusCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatusCategory', function() {
      it('should call getStatusCategory successfully', function(done) {
        //uncomment below and update the code to test getStatusCategory
        //instance.getStatusCategory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatuses', function() {
      it('should call getStatuses successfully', function(done) {
        //uncomment below and update the code to test getStatuses
        //instance.getStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubTasks', function() {
      it('should call getSubTasks successfully', function(done) {
        //uncomment below and update the code to test getSubTasks
        //instance.getSubTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTransitions', function() {
      it('should call getTransitions successfully', function(done) {
        //uncomment below and update the code to test getTransitions
        //instance.getTransitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUpgradeResult', function() {
      it('should call getUpgradeResult successfully', function(done) {
        //uncomment below and update the code to test getUpgradeResult
        //instance.getUpgradeResult(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsersFromGroup', function() {
      it('should call getUsersFromGroup successfully', function(done) {
        //uncomment below and update the code to test getUsersFromGroup
        //instance.getUsersFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVersion', function() {
      it('should call getVersion successfully', function(done) {
        //uncomment below and update the code to test getVersion
        //instance.getVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVersionRelatedIssues', function() {
      it('should call getVersionRelatedIssues successfully', function(done) {
        //uncomment below and update the code to test getVersionRelatedIssues
        //instance.getVersionRelatedIssues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVersionUnresolvedIssues', function() {
      it('should call getVersionUnresolvedIssues successfully', function(done) {
        //uncomment below and update the code to test getVersionUnresolvedIssues
        //instance.getVersionUnresolvedIssues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVotes', function() {
      it('should call getVotes successfully', function(done) {
        //uncomment below and update the code to test getVotes
        //instance.getVotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkflow', function() {
      it('should call getWorkflow successfully', function(done) {
        //uncomment below and update the code to test getWorkflow
        //instance.getWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorklog', function() {
      it('should call getWorklog successfully', function(done) {
        //uncomment below and update the code to test getWorklog
        //instance.getWorklog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorklogsForIds', function() {
      it('should call getWorklogsForIds successfully', function(done) {
        //uncomment below and update the code to test getWorklogsForIds
        //instance.getWorklogsForIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('linkIssues', function() {
      it('should call linkIssues successfully', function(done) {
        //uncomment below and update the code to test linkIssues
        //instance.linkIssues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('list', function() {
      it('should call list successfully', function(done) {
        //uncomment below and update the code to test list
        //instance.list(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('login', function() {
      it('should call login successfully', function(done) {
        //uncomment below and update the code to test login
        //instance.login(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logout', function() {
      it('should call logout successfully', function(done) {
        //uncomment below and update the code to test logout
        //instance.logout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('merge', function() {
      it('should call merge successfully', function(done) {
        //uncomment below and update the code to test merge
        //instance.merge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveField', function() {
      it('should call moveField successfully', function(done) {
        //uncomment below and update the code to test moveField
        //instance.moveField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveSubTasks', function() {
      it('should call moveSubTasks successfully', function(done) {
        //uncomment below and update the code to test moveSubTasks
        //instance.moveSubTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveTab', function() {
      it('should call moveTab successfully', function(done) {
        //uncomment below and update the code to test moveTab
        //instance.moveTab(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveVersion', function() {
      it('should call moveVersion successfully', function(done) {
        //uncomment below and update the code to test moveVersion
        //instance.moveVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notify', function() {
      it('should call notify successfully', function(done) {
        //uncomment below and update the code to test notify
        //instance.notify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('partialUpdateProjectRole', function() {
      it('should call partialUpdateProjectRole successfully', function(done) {
        //uncomment below and update the code to test partialUpdateProjectRole
        //instance.partialUpdateProjectRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('policyCheckCreateUser', function() {
      it('should call policyCheckCreateUser successfully', function(done) {
        //uncomment below and update the code to test policyCheckCreateUser
        //instance.policyCheckCreateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('policyCheckUpdateUser', function() {
      it('should call policyCheckUpdateUser successfully', function(done) {
        //uncomment below and update the code to test policyCheckUpdateUser
        //instance.policyCheckUpdateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('processRequests', function() {
      it('should call processRequests successfully', function(done) {
        //uncomment below and update the code to test processRequests
        //instance.processRequests(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('put', function() {
      it('should call put successfully', function(done) {
        //uncomment below and update the code to test put
        //instance.put(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putBulk', function() {
      it('should call putBulk successfully', function(done) {
        //uncomment below and update the code to test putBulk
        //instance.putBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reindex', function() {
      it('should call reindex successfully', function(done) {
        //uncomment below and update the code to test reindex
        //instance.reindex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reindexIssues', function() {
      it('should call reindexIssues successfully', function(done) {
        //uncomment below and update the code to test reindexIssues
        //instance.reindexIssues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('release', function() {
      it('should call release successfully', function(done) {
        //uncomment below and update the code to test release
        //instance.release(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAttachment', function() {
      it('should call removeAttachment successfully', function(done) {
        //uncomment below and update the code to test removeAttachment
        //instance.removeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeField', function() {
      it('should call removeField successfully', function(done) {
        //uncomment below and update the code to test removeField
        //instance.removeField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeGroup', function() {
      it('should call removeGroup successfully', function(done) {
        //uncomment below and update the code to test removeGroup
        //instance.removeGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removePreference', function() {
      it('should call removePreference successfully', function(done) {
        //uncomment below and update the code to test removePreference
        //instance.removePreference(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeProjectCategory', function() {
      it('should call removeProjectCategory successfully', function(done) {
        //uncomment below and update the code to test removeProjectCategory
        //instance.removeProjectCategory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeUser', function() {
      it('should call removeUser successfully', function(done) {
        //uncomment below and update the code to test removeUser
        //instance.removeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeUserFromApplication', function() {
      it('should call removeUserFromApplication successfully', function(done) {
        //uncomment below and update the code to test removeUserFromApplication
        //instance.removeUserFromApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeUserFromGroup', function() {
      it('should call removeUserFromGroup successfully', function(done) {
        //uncomment below and update the code to test removeUserFromGroup
        //instance.removeUserFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeVote', function() {
      it('should call removeVote successfully', function(done) {
        //uncomment below and update the code to test removeVote
        //instance.removeVote(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeWatcher', function() {
      it('should call removeWatcher successfully', function(done) {
        //uncomment below and update the code to test removeWatcher
        //instance.removeWatcher(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('renameTab', function() {
      it('should call renameTab successfully', function(done) {
        //uncomment below and update the code to test renameTab
        //instance.renameTab(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runUpgradesNow', function() {
      it('should call runUpgradesNow successfully', function(done) {
        //uncomment below and update the code to test runUpgradesNow
        //instance.runUpgradesNow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('search', function() {
      it('should call search successfully', function(done) {
        //uncomment below and update the code to test search
        //instance.search(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchUsingSearchRequest', function() {
      it('should call searchUsingSearchRequest successfully', function(done) {
        //uncomment below and update the code to test searchUsingSearchRequest
        //instance.searchUsingSearchRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setActors', function() {
      it('should call setActors successfully', function(done) {
        //uncomment below and update the code to test setActors
        //instance.setActors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setBaseURL', function() {
      it('should call setBaseURL successfully', function(done) {
        //uncomment below and update the code to test setBaseURL
        //instance.setBaseURL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDefaultShareScope', function() {
      it('should call setDefaultShareScope successfully', function(done) {
        //uncomment below and update the code to test setDefaultShareScope
        //instance.setDefaultShareScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDraftIssueType', function() {
      it('should call setDraftIssueType successfully', function(done) {
        //uncomment below and update the code to test setDraftIssueType
        //instance.setDraftIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setIssueNavigatorDefaultColumns', function() {
      it('should call setIssueNavigatorDefaultColumns successfully', function(done) {
        //uncomment below and update the code to test setIssueNavigatorDefaultColumns
        //instance.setIssueNavigatorDefaultColumns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setIssueType', function() {
      it('should call setIssueType successfully', function(done) {
        //uncomment below and update the code to test setIssueType
        //instance.setIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPreference', function() {
      it('should call setPreference successfully', function(done) {
        //uncomment below and update the code to test setPreference
        //instance.setPreference(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPropertyViaRestfulTable', function() {
      it('should call setPropertyViaRestfulTable successfully', function(done) {
        //uncomment below and update the code to test setPropertyViaRestfulTable
        //instance.setPropertyViaRestfulTable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setReadyToUpgrade', function() {
      it('should call setReadyToUpgrade successfully', function(done) {
        //uncomment below and update the code to test setReadyToUpgrade
        //instance.setReadyToUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setSchemeAttribute', function() {
      it('should call setSchemeAttribute successfully', function(done) {
        //uncomment below and update the code to test setSchemeAttribute
        //instance.setSchemeAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('start', function() {
      it('should call start successfully', function(done) {
        //uncomment below and update the code to test start
        //instance.start(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stop', function() {
      it('should call stop successfully', function(done) {
        //uncomment below and update the code to test stop
        //instance.stop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storeTemporaryAvatar', function() {
      it('should call storeTemporaryAvatar successfully', function(done) {
        //uncomment below and update the code to test storeTemporaryAvatar
        //instance.storeTemporaryAvatar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update', function() {
      it('should call update successfully', function(done) {
        //uncomment below and update the code to test update
        //instance.update(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateComment', function() {
      it('should call updateComment successfully', function(done) {
        //uncomment below and update the code to test updateComment
        //instance.updateComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateComponent', function() {
      it('should call updateComponent successfully', function(done) {
        //uncomment below and update the code to test updateComponent
        //instance.updateComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDefault', function() {
      it('should call updateDefault successfully', function(done) {
        //uncomment below and update the code to test updateDefault
        //instance.updateDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDraft', function() {
      it('should call updateDraft successfully', function(done) {
        //uncomment below and update the code to test updateDraft
        //instance.updateDraft(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDraftDefault', function() {
      it('should call updateDraftDefault successfully', function(done) {
        //uncomment below and update the code to test updateDraftDefault
        //instance.updateDraftDefault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDraftWorkflowMapping', function() {
      it('should call updateDraftWorkflowMapping successfully', function(done) {
        //uncomment below and update the code to test updateDraftWorkflowMapping
        //instance.updateDraftWorkflowMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIssueLinkType', function() {
      it('should call updateIssueLinkType successfully', function(done) {
        //uncomment below and update the code to test updateIssueLinkType
        //instance.updateIssueLinkType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIssueType', function() {
      it('should call updateIssueType successfully', function(done) {
        //uncomment below and update the code to test updateIssueType
        //instance.updateIssueType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePermissionScheme', function() {
      it('should call updatePermissionScheme successfully', function(done) {
        //uncomment below and update the code to test updatePermissionScheme
        //instance.updatePermissionScheme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectCategory', function() {
      it('should call updateProjectCategory successfully', function(done) {
        //uncomment below and update the code to test updateProjectCategory
        //instance.updateProjectCategory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectType', function() {
      it('should call updateProjectType successfully', function(done) {
        //uncomment below and update the code to test updateProjectType
        //instance.updateProjectType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProperty', function() {
      it('should call updateProperty successfully', function(done) {
        //uncomment below and update the code to test updateProperty
        //instance.updateProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRemoteIssueLink', function() {
      it('should call updateRemoteIssueLink successfully', function(done) {
        //uncomment below and update the code to test updateRemoteIssueLink
        //instance.updateRemoteIssueLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVersion', function() {
      it('should call updateVersion successfully', function(done) {
        //uncomment below and update the code to test updateVersion
        //instance.updateVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkflowMapping', function() {
      it('should call updateWorkflowMapping successfully', function(done) {
        //uncomment below and update the code to test updateWorkflowMapping
        //instance.updateWorkflowMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorklog', function() {
      it('should call updateWorklog successfully', function(done) {
        //uncomment below and update the code to test updateWorklog
        //instance.updateWorklog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validate', function() {
      it('should call validate successfully', function(done) {
        //uncomment below and update the code to test validate
        //instance.validate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
