/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeveraPublicRestApiDocumentation);
  }
}(this, function(expect, SeveraPublicRestApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SeveraPublicRestApiDocumentation.ProjectsWriteApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsWriteApi', function() {
    describe('filesPostProjectLink', function() {
      it('should call filesPostProjectLink successfully', function(done) {
        //uncomment below and update the code to test filesPostProjectLink
        //instance.filesPostProjectLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('keywordsLinkKeywordToProject', function() {
      it('should call keywordsLinkKeywordToProject successfully', function(done) {
        //uncomment below and update the code to test keywordsLinkKeywordToProject
        //instance.keywordsLinkKeywordToProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('phaseMembersPostPhaseMember', function() {
      it('should call phaseMembersPostPhaseMember successfully', function(done) {
        //uncomment below and update the code to test phaseMembersPostPhaseMember
        //instance.phaseMembersPostPhaseMember(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('phaseMembersPostPhaseMembersFromBusinessUnitUsers', function() {
      it('should call phaseMembersPostPhaseMembersFromBusinessUnitUsers successfully', function(done) {
        //uncomment below and update the code to test phaseMembersPostPhaseMembersFromBusinessUnitUsers
        //instance.phaseMembersPostPhaseMembersFromBusinessUnitUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('phasesPatchPhase', function() {
      it('should call phasesPatchPhase successfully', function(done) {
        //uncomment below and update the code to test phasesPatchPhase
        //instance.phasesPatchPhase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('phasesPostPhase', function() {
      it('should call phasesPostPhase successfully', function(done) {
        //uncomment below and update the code to test phasesPostPhase
        //instance.phasesPostPhase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('priceListsPostCustomPricelist', function() {
      it('should call priceListsPostCustomPricelist successfully', function(done) {
        //uncomment below and update the code to test priceListsPostCustomPricelist
        //instance.priceListsPostCustomPricelist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectCustomValuesPatchProjectCustomValue', function() {
      it('should call projectCustomValuesPatchProjectCustomValue successfully', function(done) {
        //uncomment below and update the code to test projectCustomValuesPatchProjectCustomValue
        //instance.projectCustomValuesPatchProjectCustomValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectCustomValuesPostProjectCustomValue', function() {
      it('should call projectCustomValuesPostProjectCustomValue successfully', function(done) {
        //uncomment below and update the code to test projectCustomValuesPostProjectCustomValue
        //instance.projectCustomValuesPostProjectCustomValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectForecastsPatchForecast', function() {
      it('should call projectForecastsPatchForecast successfully', function(done) {
        //uncomment below and update the code to test projectForecastsPatchForecast
        //instance.projectForecastsPatchForecast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectForecastsPostForecast', function() {
      it('should call projectForecastsPostForecast successfully', function(done) {
        //uncomment below and update the code to test projectForecastsPostForecast
        //instance.projectForecastsPostForecast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectInvoiceSettingsPatchProjectInvoiceSettings_0', function() {
      it('should call projectInvoiceSettingsPatchProjectInvoiceSettings_0 successfully', function(done) {
        //uncomment below and update the code to test projectInvoiceSettingsPatchProjectInvoiceSettings_0
        //instance.projectInvoiceSettingsPatchProjectInvoiceSettings_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectInvoiceSettingsPostProjectInvoiceSettings_0', function() {
      it('should call projectInvoiceSettingsPostProjectInvoiceSettings_0 successfully', function(done) {
        //uncomment below and update the code to test projectInvoiceSettingsPostProjectInvoiceSettings_0
        //instance.projectInvoiceSettingsPostProjectInvoiceSettings_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProductsPostProjectProduct', function() {
      it('should call projectProductsPostProjectProduct successfully', function(done) {
        //uncomment below and update the code to test projectProductsPostProjectProduct
        //instance.projectProductsPostProjectProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWorkHourPricesPatchProjectWorkHourPrice', function() {
      it('should call projectWorkHourPricesPatchProjectWorkHourPrice successfully', function(done) {
        //uncomment below and update the code to test projectWorkHourPricesPatchProjectWorkHourPrice
        //instance.projectWorkHourPricesPatchProjectWorkHourPrice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWorkHourPricesPostProjectWorkHourPrice', function() {
      it('should call projectWorkHourPricesPostProjectWorkHourPrice successfully', function(done) {
        //uncomment below and update the code to test projectWorkHourPricesPostProjectWorkHourPrice
        //instance.projectWorkHourPricesPostProjectWorkHourPrice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWorkTypesPatchProjectWorktype', function() {
      it('should call projectWorkTypesPatchProjectWorktype successfully', function(done) {
        //uncomment below and update the code to test projectWorkTypesPatchProjectWorktype
        //instance.projectWorkTypesPatchProjectWorktype(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWorkTypesPostProjectWorktype', function() {
      it('should call projectWorkTypesPostProjectWorktype successfully', function(done) {
        //uncomment below and update the code to test projectWorkTypesPostProjectWorktype
        //instance.projectWorkTypesPostProjectWorktype(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsPatchProject', function() {
      it('should call projectsPatchProject successfully', function(done) {
        //uncomment below and update the code to test projectsPatchProject
        //instance.projectsPatchProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsPostProject', function() {
      it('should call projectsPostProject successfully', function(done) {
        //uncomment below and update the code to test projectsPostProject
        //instance.projectsPostProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalFeesPatchProposalFee', function() {
      it('should call proposalFeesPatchProposalFee successfully', function(done) {
        //uncomment below and update the code to test proposalFeesPatchProposalFee
        //instance.proposalFeesPatchProposalFee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalFeesPostProposalFee', function() {
      it('should call proposalFeesPostProposalFee successfully', function(done) {
        //uncomment below and update the code to test proposalFeesPostProposalFee
        //instance.proposalFeesPostProposalFee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalSettingsPatchProposalSettings', function() {
      it('should call proposalSettingsPatchProposalSettings successfully', function(done) {
        //uncomment below and update the code to test proposalSettingsPatchProposalSettings
        //instance.proposalSettingsPatchProposalSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalSubtotalsPatchProposalSubtotal', function() {
      it('should call proposalSubtotalsPatchProposalSubtotal successfully', function(done) {
        //uncomment below and update the code to test proposalSubtotalsPatchProposalSubtotal
        //instance.proposalSubtotalsPatchProposalSubtotal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalSubtotalsPostProposalSubtotal', function() {
      it('should call proposalSubtotalsPostProposalSubtotal successfully', function(done) {
        //uncomment below and update the code to test proposalSubtotalsPostProposalSubtotal
        //instance.proposalSubtotalsPostProposalSubtotal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalWorkhoursPatchProposalWorkhour', function() {
      it('should call proposalWorkhoursPatchProposalWorkhour successfully', function(done) {
        //uncomment below and update the code to test proposalWorkhoursPatchProposalWorkhour
        //instance.proposalWorkhoursPatchProposalWorkhour(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalWorkhoursPostProposalWorkhour', function() {
      it('should call proposalWorkhoursPostProposalWorkhour successfully', function(done) {
        //uncomment below and update the code to test proposalWorkhoursPostProposalWorkhour
        //instance.proposalWorkhoursPostProposalWorkhour(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalsPatchProposal', function() {
      it('should call proposalsPatchProposal successfully', function(done) {
        //uncomment below and update the code to test proposalsPatchProposal
        //instance.proposalsPatchProposal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proposalsPostProposal', function() {
      it('should call proposalsPostProposal successfully', function(done) {
        //uncomment below and update the code to test proposalsPostProposal
        //instance.proposalsPostProposal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('salesNotesPatchProjectSalesNote', function() {
      it('should call salesNotesPatchProjectSalesNote successfully', function(done) {
        //uncomment below and update the code to test salesNotesPatchProjectSalesNote
        //instance.salesNotesPatchProjectSalesNote(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('salesNotesPostProjectSalesNotes', function() {
      it('should call salesNotesPostProjectSalesNotes successfully', function(done) {
        //uncomment below and update the code to test salesNotesPostProjectSalesNotes
        //instance.salesNotesPostProjectSalesNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
