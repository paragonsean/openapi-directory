/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeveraPublicRestApiDocumentation);
  }
}(this, function(expect, SeveraPublicRestApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SeveraPublicRestApiDocumentation.CustomersWriteApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CustomersWriteApi', function() {
    describe('addressesPatchAddress', function() {
      it('should call addressesPatchAddress successfully', function(done) {
        //uncomment below and update the code to test addressesPatchAddress
        //instance.addressesPatchAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addressesPostCustomerAddress', function() {
      it('should call addressesPostCustomerAddress successfully', function(done) {
        //uncomment below and update the code to test addressesPostCustomerAddress
        //instance.addressesPostCustomerAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contactCommunicationsPatchContactCommunication', function() {
      it('should call contactCommunicationsPatchContactCommunication successfully', function(done) {
        //uncomment below and update the code to test contactCommunicationsPatchContactCommunication
        //instance.contactCommunicationsPatchContactCommunication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contactCommunicationsPostContactCommunication', function() {
      it('should call contactCommunicationsPostContactCommunication successfully', function(done) {
        //uncomment below and update the code to test contactCommunicationsPostContactCommunication
        //instance.contactCommunicationsPostContactCommunication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contactsPatchContact', function() {
      it('should call contactsPatchContact successfully', function(done) {
        //uncomment below and update the code to test contactsPatchContact
        //instance.contactsPatchContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contactsPostContact', function() {
      it('should call contactsPostContact successfully', function(done) {
        //uncomment below and update the code to test contactsPostContact
        //instance.contactsPostContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customerCountrySettingsPatchCustomerCountrySettings', function() {
      it('should call customerCountrySettingsPatchCustomerCountrySettings successfully', function(done) {
        //uncomment below and update the code to test customerCountrySettingsPatchCustomerCountrySettings
        //instance.customerCountrySettingsPatchCustomerCountrySettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customerCountrySettingsPostCustomerCountrySettings', function() {
      it('should call customerCountrySettingsPostCustomerCountrySettings successfully', function(done) {
        //uncomment below and update the code to test customerCountrySettingsPostCustomerCountrySettings
        //instance.customerCountrySettingsPostCustomerCountrySettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customerCustomValuesPatchCustomerCustomValue', function() {
      it('should call customerCustomValuesPatchCustomerCustomValue successfully', function(done) {
        //uncomment below and update the code to test customerCustomValuesPatchCustomerCustomValue
        //instance.customerCustomValuesPatchCustomerCustomValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customerCustomValuesPostCustomerCustomValue', function() {
      it('should call customerCustomValuesPostCustomerCustomValue successfully', function(done) {
        //uncomment below and update the code to test customerCustomValuesPostCustomerCustomValue
        //instance.customerCustomValuesPostCustomerCustomValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customerMarketSegmentsPostCustomerMarketSegment', function() {
      it('should call customerMarketSegmentsPostCustomerMarketSegment successfully', function(done) {
        //uncomment below and update the code to test customerMarketSegmentsPostCustomerMarketSegment
        //instance.customerMarketSegmentsPostCustomerMarketSegment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customersPatchCustomer', function() {
      it('should call customersPatchCustomer successfully', function(done) {
        //uncomment below and update the code to test customersPatchCustomer
        //instance.customersPatchCustomer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('customersPostCustomer', function() {
      it('should call customersPostCustomer successfully', function(done) {
        //uncomment below and update the code to test customersPostCustomer
        //instance.customersPostCustomer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('keywordsLinkKeywordToContact', function() {
      it('should call keywordsLinkKeywordToContact successfully', function(done) {
        //uncomment below and update the code to test keywordsLinkKeywordToContact
        //instance.keywordsLinkKeywordToContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('salesNotesPatchCustomerSalesNote', function() {
      it('should call salesNotesPatchCustomerSalesNote successfully', function(done) {
        //uncomment below and update the code to test salesNotesPatchCustomerSalesNote
        //instance.salesNotesPatchCustomerSalesNote(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('salesNotesPostCustomerSalesNotes', function() {
      it('should call salesNotesPostCustomerSalesNotes successfully', function(done) {
        //uncomment below and update the code to test salesNotesPostCustomerSalesNotes
        //instance.salesNotesPostCustomerSalesNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
