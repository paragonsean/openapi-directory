/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import PatchOperation from '../model/PatchOperation';
import ProjectTravelExpenseInputModel from '../model/ProjectTravelExpenseInputModel';
import ProjectTravelExpenseOutputModel from '../model/ProjectTravelExpenseOutputModel';
import TravelReimbursementInputModel from '../model/TravelReimbursementInputModel';
import TravelReimbursementOutputModel from '../model/TravelReimbursementOutputModel';

/**
* TravelsWrite service.
* @module api/TravelsWriteApi
* @version 1.0
*/
export default class TravelsWriteApi {

    /**
    * Constructs a new TravelsWriteApi. 
    * @alias module:api/TravelsWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectTravelExpensesPatchProjectTravelExpense operation.
     * @callback module:api/TravelsWriteApi~projectTravelExpensesPatchProjectTravelExpenseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a project travel expense or a part of it.
     * @param {String} guid ID of the project travel expense.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ProjectTravelExpenseInputModel.
     * @param {module:api/TravelsWriteApi~projectTravelExpensesPatchProjectTravelExpenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseOutputModel>}
     */
    projectTravelExpensesPatchProjectTravelExpense(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectTravelExpensesPatchProjectTravelExpense");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/projecttravelexpenses/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesPostProjectTravelExpense operation.
     * @callback module:api/TravelsWriteApi~projectTravelExpensesPostProjectTravelExpenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectTravelExpenseOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project travel expense.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectTravelExpenseInputModel} [projectTravelExpenseInputModel] ProjectTravelExpenseInputModel.
     * @param {module:api/TravelsWriteApi~projectTravelExpensesPostProjectTravelExpenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectTravelExpenseOutputModel}
     */
    projectTravelExpensesPostProjectTravelExpense(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectTravelExpenseInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectTravelExpenseOutputModel;
      return this.apiClient.callApi(
        '/v1/projecttravelexpenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementsPatchTravelReimbursement operation.
     * @callback module:api/TravelsWriteApi~travelReimbursementsPatchTravelReimbursementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelReimbursementOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a travel reimbursement
     * @param {String} guid ID of the travel reimbursement
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document
     * @param {module:api/TravelsWriteApi~travelReimbursementsPatchTravelReimbursementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelReimbursementOutputModel>}
     */
    travelReimbursementsPatchTravelReimbursement(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelReimbursementsPatchTravelReimbursement");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TravelReimbursementOutputModel];
      return this.apiClient.callApi(
        '/v1/travelreimbursements/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementsPostTravelReimbursement operation.
     * @callback module:api/TravelsWriteApi~travelReimbursementsPostTravelReimbursementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TravelReimbursementOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a travel reimbursement
     * @param {Object} opts Optional parameters
     * @param {Boolean} [addAllUnreimbursedTravelExpenses = true)] Optional: Add all of user's unreimbursed travel expenses to reimbursement. Default is true. If TravelExpenseReimbursementStartDate is given in organization settings, travel expenses are added from that date onwards. If value is false then expenses from includedProjectTravelExpenses list are added.
     * @param {Array.<String>} [includedProjectTravelExpenses] Optional: A list of included projectTravelExpense GUIDs belonging to the user. If addAllUnreimbursedTravelExpenses is true then this list is ignored.
     * @param {module:model/TravelReimbursementInputModel} [travelReimbursementInputModel] TravelReimbursementModel
     * @param {module:api/TravelsWriteApi~travelReimbursementsPostTravelReimbursementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TravelReimbursementOutputModel}
     */
    travelReimbursementsPostTravelReimbursement(opts, callback) {
      opts = opts || {};
      let postBody = opts['travelReimbursementInputModel'];

      let pathParams = {
      };
      let queryParams = {
        'addAllUnreimbursedTravelExpenses': opts['addAllUnreimbursedTravelExpenses'],
        'includedProjectTravelExpenses': this.apiClient.buildCollectionParam(opts['includedProjectTravelExpenses'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TravelReimbursementOutputModel;
      return this.apiClient.callApi(
        '/v1/travelreimbursements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
