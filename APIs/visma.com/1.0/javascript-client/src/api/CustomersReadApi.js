/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressModel from '../model/AddressModel';
import ContactCommunicationModel from '../model/ContactCommunicationModel';
import ContactModel from '../model/ContactModel';
import CustomerCountrySettingsOutputModel from '../model/CustomerCountrySettingsOutputModel';
import CustomerCustomValueModel from '../model/CustomerCustomValueModel';
import CustomerMarketSegmentModel from '../model/CustomerMarketSegmentModel';
import CustomerModel from '../model/CustomerModel';
import CustomerSalesNoteOutputModel from '../model/CustomerSalesNoteOutputModel';
import ExceptionModel from '../model/ExceptionModel';
import KeyValuePairOfStringAndObject from '../model/KeyValuePairOfStringAndObject';
import KeyValuePairOfStringAndSortDirection from '../model/KeyValuePairOfStringAndSortDirection';
import KeywordModel from '../model/KeywordModel';
import SalesNoteOutputModel from '../model/SalesNoteOutputModel';

/**
* CustomersRead service.
* @module api/CustomersReadApi
* @version 1.0
*/
export default class CustomersReadApi {

    /**
    * Constructs a new CustomersReadApi. 
    * @alias module:api/CustomersReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addressesGetAddress operation.
     * @callback module:api/CustomersReadApi~addressesGetAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address by ID.
     * @param {String} guid GUID used to get the address.
     * @param {module:api/CustomersReadApi~addressesGetAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressModel}
     */
    addressesGetAddress(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling addressesGetAddress");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddressModel;
      return this.apiClient.callApi(
        '/v1/addresses/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addressesGetAddresses operation.
     * @callback module:api/CustomersReadApi~addressesGetAddressesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddressModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the addresses.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Date} [changedSince] Optional: Get addresses that have been added or changed after this date time (greater or equal).
     * @param {module:api/CustomersReadApi~addressesGetAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddressModel>}
     */
    addressesGetAddresses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'calculateRowCount': opts['calculateRowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AddressModel];
      return this.apiClient.callApi(
        '/v1/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addressesGetContactAddress operation.
     * @callback module:api/CustomersReadApi~addressesGetContactAddressCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddressModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact person's address
     * @param {String} contactGuid ID for the contact person
     * @param {module:api/CustomersReadApi~addressesGetContactAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddressModel>}
     */
    addressesGetContactAddress(contactGuid, callback) {
      let postBody = null;
      // verify the required parameter 'contactGuid' is set
      if (contactGuid === undefined || contactGuid === null) {
        throw new Error("Missing the required parameter 'contactGuid' when calling addressesGetContactAddress");
      }

      let pathParams = {
        'contactGuid': contactGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AddressModel];
      return this.apiClient.callApi(
        '/v1/contactpersons/{contactGuid}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addressesGetCustomerAddresses operation.
     * @callback module:api/CustomersReadApi~addressesGetCustomerAddressesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddressModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer's addresses
     * @param {String} customerGuid ID for the customer.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {module:api/CustomersReadApi~addressesGetCustomerAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddressModel>}
     */
    addressesGetCustomerAddresses(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling addressesGetCustomerAddresses");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'calculateRowCount': opts['calculateRowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AddressModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactCommunicationsGetCommunication operation.
     * @callback module:api/CustomersReadApi~contactCommunicationsGetCommunicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactCommunicationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact communication by ID.
     * @param {String} guid GUID used to get the contact communication.
     * @param {module:api/CustomersReadApi~contactCommunicationsGetCommunicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactCommunicationModel}
     */
    contactCommunicationsGetCommunication(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactCommunicationsGetCommunication");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactCommunicationModel;
      return this.apiClient.callApi(
        '/v1/contactcommunications/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactCommunicationsGetCommunications operation.
     * @callback module:api/CustomersReadApi~contactCommunicationsGetCommunicationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactCommunicationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all contact communications.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from contact communication value.
     * @param {Date} [changedSince] Optional: Get contact communications that have been added or changed after this date time (greater or equal).
     * @param {module:api/CustomersReadApi~contactCommunicationsGetCommunicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactCommunicationModel>}
     */
    contactCommunicationsGetCommunications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactCommunicationModel];
      return this.apiClient.callApi(
        '/v1/contactcommunications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactCommunicationsGetCommunications2 operation.
     * @callback module:api/CustomersReadApi~contactCommunicationsGetCommunications2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactCommunicationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all communications for a contact.
     * @param {String} contactGuid Whose communications are requested.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications.
     * @param {module:api/CustomersReadApi~contactCommunicationsGetCommunications2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactCommunicationModel>}
     */
    contactCommunicationsGetCommunications2(contactGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactGuid' is set
      if (contactGuid === undefined || contactGuid === null) {
        throw new Error("Missing the required parameter 'contactGuid' when calling contactCommunicationsGetCommunications2");
      }

      let pathParams = {
        'contactGuid': contactGuid
      };
      let queryParams = {
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactCommunicationModel];
      return this.apiClient.callApi(
        '/v1/contacts/{contactGuid}/contactcommunications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactsGetContact operation.
     * @callback module:api/CustomersReadApi~contactsGetContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact by ID.
     * @param {String} guid GUID used to get the contact.
     * @param {module:api/CustomersReadApi~contactsGetContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactModel}
     */
    contactsGetContact(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactsGetContact");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactModel;
      return this.apiClient.callApi(
        '/v1/contactpersons/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactsGetContacts operation.
     * @callback module:api/CustomersReadApi~contactsGetContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the contact persons.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from contact person's name or communication method (i.e. phone number or email address).
     * @param {Array.<module:model/KeyValuePairOfStringAndObject>} [searchCriterias] Optional: Search criterias.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=FirstName&sortings[0].value=Desc &sortings[1].key=LastName&sortings[1].value=Asc\".
     * @param {Date} [changedSince] Optional: Get contact persons that have been added or changed after this date time (greater or equal).
     * @param {module:api/CustomersReadApi~contactsGetContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactModel>}
     */
    contactsGetContacts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'searchCriterias': this.apiClient.buildCollectionParam(opts['searchCriterias'], 'multi'),
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi'),
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactModel];
      return this.apiClient.callApi(
        '/v1/contactpersons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactsGetCustomerContacts operation.
     * @callback module:api/CustomersReadApi~contactsGetCustomerContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the contact persons for a customer.
     * @param {String} customerGuid Customer guid used to get the contact persons.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from contact person's name or communication method (i.e. phone number or email address).
     * @param {module:api/CustomersReadApi~contactsGetCustomerContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactModel>}
     */
    contactsGetCustomerContacts(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling contactsGetCustomerContacts");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
        'active': opts['active'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/contactpersons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCountrySettingsGetCustomerCountrySettings operation.
     * @callback module:api/CustomersReadApi~customerCountrySettingsGetCustomerCountrySettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerCountrySettingsOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the country settings for a customer.
     * @param {String} customerGuid GUID of the customer.
     * @param {module:api/CustomersReadApi~customerCountrySettingsGetCustomerCountrySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerCountrySettingsOutputModel>}
     */
    customerCountrySettingsGetCustomerCountrySettings(customerGuid, callback) {
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling customerCountrySettingsGetCustomerCountrySettings");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomerCountrySettingsOutputModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/customercountrysettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomValuesGetCustomerCustomValue operation.
     * @callback module:api/CustomersReadApi~customerCustomValuesGetCustomerCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerCustomValueModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer custom value by ID.
     * @param {String} guid Id used to get the customer custom value.
     * @param {module:api/CustomersReadApi~customerCustomValuesGetCustomerCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerCustomValueModel}
     */
    customerCustomValuesGetCustomerCustomValue(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomValuesGetCustomerCustomValue");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerCustomValueModel;
      return this.apiClient.callApi(
        '/v1/customers/customvalues/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomValuesGetCustomerCustomValues operation.
     * @callback module:api/CustomersReadApi~customerCustomValuesGetCustomerCustomValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerCustomValueModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the customer custom values.
     * @param {String} customerGuid ID of the customer.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [active] Optional: Get only values of active or inactive customer custom properties.
     * @param {Array.<String>} [target] List of target for which to get the values.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\".
     * @param {module:api/CustomersReadApi~customerCustomValuesGetCustomerCustomValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerCustomValueModel>}
     */
    customerCustomValuesGetCustomerCustomValues(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling customerCustomValuesGetCustomerCustomValues");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'active': opts['active'],
        'target': this.apiClient.buildCollectionParam(opts['target'], 'multi'),
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomerCustomValueModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/customvalues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerMarketSegmentsGetAllCustomerMarketSegments operation.
     * @callback module:api/CustomersReadApi~customerMarketSegmentsGetAllCustomerMarketSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerMarketSegmentModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Customer Market Segments.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from customer market segment name.
     * @param {String} [parentMarketSegmentGuid] Optional: Fetches all children of a parent based on parent market segment guid.
     * @param {Boolean} [includeParentLevel = true)] Optional: Returns only child segments when false. Has no effect if parentMarketSegmentGuid parameter is defined. Default = true.
     * @param {module:api/CustomersReadApi~customerMarketSegmentsGetAllCustomerMarketSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerMarketSegmentModel>}
     */
    customerMarketSegmentsGetAllCustomerMarketSegments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'parentMarketSegmentGuid': opts['parentMarketSegmentGuid'],
        'includeParentLevel': opts['includeParentLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomerMarketSegmentModel];
      return this.apiClient.callApi(
        '/v1/customermarketsegments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerMarketSegmentsGetCustomerMarketSegment operation.
     * @callback module:api/CustomersReadApi~customerMarketSegmentsGetCustomerMarketSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerMarketSegmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the customer market segment.
     * @param {String} guid Customer market segment guid.
     * @param {module:api/CustomersReadApi~customerMarketSegmentsGetCustomerMarketSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerMarketSegmentModel}
     */
    customerMarketSegmentsGetCustomerMarketSegment(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerMarketSegmentsGetCustomerMarketSegment");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerMarketSegmentModel;
      return this.apiClient.callApi(
        '/v1/customermarketsegments/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerMarketSegmentsGetCustomerMarketSegments operation.
     * @callback module:api/CustomersReadApi~customerMarketSegmentsGetCustomerMarketSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerMarketSegmentModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Market Segments for a customer.
     * @param {String} customerGuid ID of the customer.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [includeMarketSegmentsFromRegistry = false)] Optional: Return also the markets segments that are not in use for the customer.
     * @param {module:api/CustomersReadApi~customerMarketSegmentsGetCustomerMarketSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerMarketSegmentModel>}
     */
    customerMarketSegmentsGetCustomerMarketSegments(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling customerMarketSegmentsGetCustomerMarketSegments");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'includeMarketSegmentsFromRegistry': opts['includeMarketSegmentsFromRegistry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomerMarketSegmentModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/customermarketsegments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersGetCustomer operation.
     * @callback module:api/CustomersReadApi~customersGetCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer by GUID.
     * @param {String} guid ID used to get the customer.
     * @param {module:api/CustomersReadApi~customersGetCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerModel}
     */
    customersGetCustomer(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customersGetCustomer");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerModel;
      return this.apiClient.callApi(
        '/v1/customers/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersGetCustomers operation.
     * @callback module:api/CustomersReadApi~customersGetCustomersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the customers
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] 
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {Boolean} [isActive] If not given, return all Customers, if given as true return only active Customers, if given as false returns only inactive Customers.
     * @param {Array.<String>} [customerOwnerGuids] Optional: List of customer owner ids to search for. Default all.
     * @param {Boolean} [isInternal] Optional: When true returns only internal customer
     * @param {Array.<Number>} [numbers] Optional: List of customer numbers.
     * @param {Date} [changedSince] Optional: Get customers that have been added or changed after this date time (greater or equal).
     * @param {Array.<String>} [emailAddresses] Optional: Get customers where email address matches to any provided email address
     * @param {Array.<String>} [customerNames] Optional: Get customers where customer name matches to any provided customer name
     * @param {module:api/CustomersReadApi~customersGetCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerModel>}
     */
    customersGetCustomers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isActive': opts['isActive'],
        'customerOwnerGuids': this.apiClient.buildCollectionParam(opts['customerOwnerGuids'], 'multi'),
        'isInternal': opts['isInternal'],
        'numbers': this.apiClient.buildCollectionParam(opts['numbers'], 'multi'),
        'changedSince': opts['changedSince'],
        'emailAddresses': this.apiClient.buildCollectionParam(opts['emailAddresses'], 'multi'),
        'customerNames': this.apiClient.buildCollectionParam(opts['customerNames'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomerModel];
      return this.apiClient.callApi(
        '/v1/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsGetContactKeywords operation.
     * @callback module:api/CustomersReadApi~keywordsGetContactKeywordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KeywordModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the keywords for contact.
     * @param {String} contactGuid ID of the user whose keywords are requested.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Keyword&sortings[0].value=Desc\".
     * @param {module:api/CustomersReadApi~keywordsGetContactKeywordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KeywordModel>}
     */
    keywordsGetContactKeywords(contactGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactGuid' is set
      if (contactGuid === undefined || contactGuid === null) {
        throw new Error("Missing the required parameter 'contactGuid' when calling keywordsGetContactKeywords");
      }

      let pathParams = {
        'contactGuid': contactGuid
      };
      let queryParams = {
        'active': opts['active'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KeywordModel];
      return this.apiClient.callApi(
        '/v1/contacts/{contactGuid}/keywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesGetAllCustomerSalesNotes_0 operation.
     * @callback module:api/CustomersReadApi~salesNotesGetAllCustomerSalesNotes_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SalesNoteOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sales notes by customer guid.
     * @param {String} customerGuid Customer guid used to get the notes.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get sales notes that have been added or changed after this date time (greater or equal).
     * @param {module:api/CustomersReadApi~salesNotesGetAllCustomerSalesNotes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SalesNoteOutputModel>}
     */
    salesNotesGetAllCustomerSalesNotes_0(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling salesNotesGetAllCustomerSalesNotes_0");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SalesNoteOutputModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/salesnotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesGetCustomerSalesNote operation.
     * @callback module:api/CustomersReadApi~salesNotesGetCustomerSalesNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerSalesNoteOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer sales note by ID.
     * @param {String} guid GUID used to get the customer sales note.
     * @param {module:api/CustomersReadApi~salesNotesGetCustomerSalesNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerSalesNoteOutputModel}
     */
    salesNotesGetCustomerSalesNote(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesNotesGetCustomerSalesNote");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerSalesNoteOutputModel;
      return this.apiClient.callApi(
        '/v1/customersalesnotes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesGetCustomerSalesNotes operation.
     * @callback module:api/CustomersReadApi~salesNotesGetCustomerSalesNotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerSalesNoteOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the customer sales notes.
     * @param {String} customerGuid Customer guid used to get the notes.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get sales notes that have been added or changed after this date time (greater or equal).
     * @param {module:api/CustomersReadApi~salesNotesGetCustomerSalesNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerSalesNoteOutputModel>}
     */
    salesNotesGetCustomerSalesNotes(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling salesNotesGetCustomerSalesNotes");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomerSalesNoteOutputModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/customersalesnotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
