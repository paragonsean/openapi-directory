/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateInvoiceModel from '../model/CreateInvoiceModel';
import ExceptionModel from '../model/ExceptionModel';
import InvoiceOutputModel from '../model/InvoiceOutputModel';
import InvoiceRowOutputModel from '../model/InvoiceRowOutputModel';
import InvoiceSettingsOutputModel from '../model/InvoiceSettingsOutputModel';
import PatchOperation from '../model/PatchOperation';
import ProjectInvoiceSettingsInputModel from '../model/ProjectInvoiceSettingsInputModel';
import ProjectInvoiceSettingsOutputModel from '../model/ProjectInvoiceSettingsOutputModel';

/**
* InvoicesWrite service.
* @module api/InvoicesWriteApi
* @version 1.0
*/
export default class InvoicesWriteApi {

    /**
    * Constructs a new InvoicesWriteApi. 
    * @alias module:api/InvoicesWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the invoiceRowsPatchInvoiceRow operation.
     * @callback module:api/InvoicesWriteApi~invoiceRowsPatchInvoiceRowCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a invoice row or a part of it
     * If CostCenterNumber, SalesAccountNumber or RecurringSalesAccountNumber are changed and the invoice row is related to one or many ProjectFees or ProjectTravelExpenses, the values for those will also be updated.
     * @param {String} guid ID of the invoice row
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of InvoiceRowModel
     * @param {module:api/InvoicesWriteApi~invoiceRowsPatchInvoiceRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceRowOutputModel>}
     */
    invoiceRowsPatchInvoiceRow(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoiceRowsPatchInvoiceRow");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InvoiceRowOutputModel];
      return this.apiClient.callApi(
        '/v1/invoicerows/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSettingsPatchInvoiceSettings operation.
     * @callback module:api/InvoicesWriteApi~invoiceSettingsPatchInvoiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceSettingsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) invoice setting
     * @param {String} guid ID of the invoice settings
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of InvoiceSettingsModel
     * @param {module:api/InvoicesWriteApi~invoiceSettingsPatchInvoiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceSettingsOutputModel}
     */
    invoiceSettingsPatchInvoiceSettings(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoiceSettingsPatchInvoiceSettings");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceSettingsOutputModel;
      return this.apiClient.callApi(
        '/v1/invoicesettings/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesPatchInvoice operation.
     * @callback module:api/InvoicesWriteApi~invoicesPatchInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) an invoice or a part of it
     * @param {String} guid GUID of the invoice
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of InvoiceInputModel
     * @param {module:api/InvoicesWriteApi~invoicesPatchInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceOutputModel>}
     */
    invoicesPatchInvoice(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoicesPatchInvoice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InvoiceOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesPostInvoiceCreation operation.
     * @callback module:api/InvoicesWriteApi~invoicesPostInvoiceCreationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an invoice to project(s)
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateInvoiceModel} [createInvoiceModel] CreateInvoiceModel
     * @param {module:api/InvoicesWriteApi~invoicesPostInvoiceCreationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceOutputModel>}
     */
    invoicesPostInvoiceCreation(opts, callback) {
      opts = opts || {};
      let postBody = opts['createInvoiceModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InvoiceOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsPatchProjectInvoiceSettings operation.
     * @callback module:api/InvoicesWriteApi~projectInvoiceSettingsPatchProjectInvoiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInvoiceSettingsOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) project invoice settings.
     * @param {String} guid ID of the project invoice settings.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON patch document of ProjectInvoiceSettingsInputModel.
     * @param {module:api/InvoicesWriteApi~projectInvoiceSettingsPatchProjectInvoiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectInvoiceSettingsOutputModel>}
     */
    projectInvoiceSettingsPatchProjectInvoiceSettings(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectInvoiceSettingsPatchProjectInvoiceSettings");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectInvoiceSettingsOutputModel];
      return this.apiClient.callApi(
        '/v1/projectinvoicesettings/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsPostProjectInvoiceSettings operation.
     * @callback module:api/InvoicesWriteApi~projectInvoiceSettingsPostProjectInvoiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInvoiceSettingsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project invoice settings.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectInvoiceSettingsInputModel} [projectInvoiceSettingsInputModel] Project invoice settings.
     * @param {module:api/InvoicesWriteApi~projectInvoiceSettingsPostProjectInvoiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectInvoiceSettingsOutputModel}
     */
    projectInvoiceSettingsPostProjectInvoiceSettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectInvoiceSettingsInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectInvoiceSettingsOutputModel;
      return this.apiClient.callApi(
        '/v1/projectinvoicesettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
