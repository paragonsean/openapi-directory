/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BillableStatusType from '../model/BillableStatusType';
import DeletedWorkHourModel from '../model/DeletedWorkHourModel';
import ExceptionModel from '../model/ExceptionModel';
import TimeEntryModel from '../model/TimeEntryModel';
import WorkHourOutputModel from '../model/WorkHourOutputModel';

/**
* HoursRead service.
* @module api/HoursReadApi
* @version 1.0
*/
export default class HoursReadApi {

    /**
    * Constructs a new HoursReadApi. 
    * @alias module:api/HoursReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the timeEntriesGetTimeEntries operation.
     * @callback module:api/HoursReadApi~timeEntriesGetTimeEntriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeEntryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the time entries.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Array.<String>} [phaseGuid] Optional: Filters time entries for given phases.
     * @param {Array.<String>} [timeEntryTypeGuid] Optional: Filters time entries for given time entry types.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get time entries that have been added or changed after this date time (greater or equal).
     * @param {module:api/HoursReadApi~timeEntriesGetTimeEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeEntryModel>}
     */
    timeEntriesGetTimeEntries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'phaseGuid': this.apiClient.buildCollectionParam(opts['phaseGuid'], 'multi'),
        'timeEntryTypeGuid': this.apiClient.buildCollectionParam(opts['timeEntryTypeGuid'], 'multi'),
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimeEntryModel];
      return this.apiClient.callApi(
        '/v1/timeentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeEntriesGetTimeEntriesForUser operation.
     * @callback module:api/HoursReadApi~timeEntriesGetTimeEntriesForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeEntryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the time entries for a user.
     * @param {String} userGuid ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Optional: starting date from which to get the time entries. Default all.
     * @param {Date} [endDate] Optional: starting date to which to get the time entries. Default all.
     * @param {Array.<String>} [phaseGuid] Optional: Filters time entries for given phases.
     * @param {Array.<String>} [timeEntryTypeGuid] Optional: Filters time entries for given time entry types.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/HoursReadApi~timeEntriesGetTimeEntriesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeEntryModel>}
     */
    timeEntriesGetTimeEntriesForUser(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling timeEntriesGetTimeEntriesForUser");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'phaseGuid': this.apiClient.buildCollectionParam(opts['phaseGuid'], 'multi'),
        'timeEntryTypeGuid': this.apiClient.buildCollectionParam(opts['timeEntryTypeGuid'], 'multi'),
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimeEntryModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/timeentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeEntriesGetTimeEntry operation.
     * @callback module:api/HoursReadApi~timeEntriesGetTimeEntryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeEntryModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get time entry by ID.
     * @param {String} guid Id used to get the time entry.
     * @param {module:api/HoursReadApi~timeEntriesGetTimeEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeEntryModel}
     */
    timeEntriesGetTimeEntry(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling timeEntriesGetTimeEntry");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeEntryModel;
      return this.apiClient.callApi(
        '/v1/timeentries/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursGetDeletedWorkHours operation.
     * @callback module:api/HoursReadApi~workHoursGetDeletedWorkHoursCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeletedWorkHourModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the deleted work hours.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Array.<String>} [projectGuids] Optional: ID of the project for the deleted work hours to be fetched. If not provided, returns for all projects. Default all.
     * @param {Array.<String>} [userGuids] Optional: ID of the user. If not provided, returns for all users. Default all.
     * @param {Date} [deletedSince] Optional: Get work hours that have been deleted after this date time (greater or equal).
     * @param {module:api/HoursReadApi~workHoursGetDeletedWorkHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeletedWorkHourModel>}
     */
    workHoursGetDeletedWorkHours(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi'),
        'userGuids': this.apiClient.buildCollectionParam(opts['userGuids'], 'multi'),
        'deletedSince': opts['deletedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeletedWorkHourModel];
      return this.apiClient.callApi(
        '/v1/deletedworkhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursGetProjectWorkHours operation.
     * @callback module:api/HoursReadApi~workHoursGetProjectWorkHoursCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the work hours for phases of a project for invoicing
     * @param {String} projectGuid ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isBillable] Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.
     * @param {Boolean} [isBilled] Optional: Filter the work hours. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null.
     * @param {Date} [startDate] Optional: starting date from which to get the hours. Default all.
     * @param {Date} [endDate] Optional: starting date to which to get the hours. Default all.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/HoursReadApi~workHoursGetProjectWorkHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkHourOutputModel>}
     */
    workHoursGetProjectWorkHours(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling workHoursGetProjectWorkHours");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'isBillable': opts['isBillable'],
        'isBilled': opts['isBilled'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/workhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursGetWorkHour operation.
     * @callback module:api/HoursReadApi~workHoursGetWorkHourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkHourOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get work hour by ID
     * @param {String} guid Id used to get the work hour.
     * @param {module:api/HoursReadApi~workHoursGetWorkHourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkHourOutputModel}
     */
    workHoursGetWorkHour(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workHoursGetWorkHour");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkHourOutputModel;
      return this.apiClient.callApi(
        '/v1/workhours/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursGetWorkHours operation.
     * @callback module:api/HoursReadApi~workHoursGetWorkHoursCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the work hours.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get work hours that have been added or changed after this date time (greater or equal).
     * @param {module:model/BillableStatusType} [billableStatus] Billable status type
     * @param {Date} [eventDateStart] Optional: Get work hours that have event date after this date time (greater or equal).
     * @param {Date} [eventDateEnd] Optional: Get work hours that have event date before this date time (less or equal).
     * @param {module:api/HoursReadApi~workHoursGetWorkHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkHourOutputModel>}
     */
    workHoursGetWorkHours(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince'],
        'billableStatus': opts['billableStatus'],
        'eventDateStart': opts['eventDateStart'],
        'eventDateEnd': opts['eventDateEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/workhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursGetWorkHoursForUser operation.
     * @callback module:api/HoursReadApi~workHoursGetWorkHoursForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the work hours for a user
     * @param {String} userGuid ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Optional: starting date from which to get the hours. Default all.
     * @param {Date} [endDate] Optional: starting date to which to get the hours. Default all.
     * @param {Array.<String>} [phaseGuid] Optional: ID of the phase to get the hours for. Default all.
     * @param {Array.<String>} [workTypeGuid] Optional: ID of the work type. Default all.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/HoursReadApi~workHoursGetWorkHoursForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkHourOutputModel>}
     */
    workHoursGetWorkHoursForUser(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling workHoursGetWorkHoursForUser");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'phaseGuid': this.apiClient.buildCollectionParam(opts['phaseGuid'], 'multi'),
        'workTypeGuid': this.apiClient.buildCollectionParam(opts['workTypeGuid'], 'multi'),
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/workhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
