/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import PhaseMemberModel from '../model/PhaseMemberModel';
import ResourceAllocationAction from '../model/ResourceAllocationAction';

/**
* ProjectsDelete service.
* @module api/ProjectsDeleteApi
* @version 1.0
*/
export default class ProjectsDeleteApi {

    /**
    * Constructs a new ProjectsDeleteApi. 
    * @alias module:api/ProjectsDeleteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keywordsDeleteProjectKeyword operation.
     * @callback module:api/ProjectsDeleteApi~keywordsDeleteProjectKeywordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a keyword from the project
     * Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found.
     * @param {String} projectGuid 
     * @param {String} guid 
     * @param {module:api/ProjectsDeleteApi~keywordsDeleteProjectKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    keywordsDeleteProjectKeyword(projectGuid, guid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling keywordsDeleteProjectKeyword");
      }
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling keywordsDeleteProjectKeyword");
      }

      let pathParams = {
        'projectGuid': projectGuid,
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/keywords/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseMembersDeletePhaseMember operation.
     * @callback module:api/ProjectsDeleteApi~phaseMembersDeletePhaseMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a phase member
     * Returns: No Content (204) if succeeded. Only one of transferToRoleGuid and transferToUserGuid can be provided. Use root phase to delete a project member.
     * @param {String} userGuid GUID of the phase member to remove
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceAllocationAction} [resourceAllocationAction] Optional: The action to be applied to the user's resource allocations
     * @param {String} [transferToUserGuid] Optional: GUID of the user to whom the resource allocations are transferred.
     * @param {module:model/PhaseMemberModel} [phaseMemberModel] 
     * @param {module:api/ProjectsDeleteApi~phaseMembersDeletePhaseMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    phaseMembersDeletePhaseMember(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['phaseMemberModel'];
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling phaseMembersDeletePhaseMember");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'resourceAllocationAction': opts['resourceAllocationAction'],
        'transferToUserGuid': opts['transferToUserGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/phasemembers/{userGuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesDeletePhase operation.
     * @callback module:api/ProjectsDeleteApi~phasesDeletePhaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a phase
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the phase.
     * @param {module:api/ProjectsDeleteApi~phasesDeletePhaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    phasesDeletePhase(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling phasesDeletePhase");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/phases/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomValuesDeleteProjectCustomValue operation.
     * @callback module:api/ProjectsDeleteApi~projectCustomValuesDeleteProjectCustomValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project custom value.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the project custom value.
     * @param {module:api/ProjectsDeleteApi~projectCustomValuesDeleteProjectCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectCustomValuesDeleteProjectCustomValue(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomValuesDeleteProjectCustomValue");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/customvalues/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectForecastsDeleteForecast operation.
     * @callback module:api/ProjectsDeleteApi~projectForecastsDeleteForecastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project forecast
     * Returns: No Content (204) if succeeded. Not found (404) if product can't be found.
     * @param {String} guid ID for the project forecast to delete
     * @param {module:api/ProjectsDeleteApi~projectForecastsDeleteForecastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectForecastsDeleteForecast(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectForecastsDeleteForecast");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectforecasts/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectForecastsDeleteForecasts operation.
     * @callback module:api/ProjectsDeleteApi~projectForecastsDeleteForecastsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the project forecasts from a month onward, including the given month.
     * @param {String} projectGuid Project for the forecasts to delete
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year where to start deleting the forecasts
     * @param {Number} [month] Month where to start deleting the forecasts
     * @param {module:api/ProjectsDeleteApi~projectForecastsDeleteForecastsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectForecastsDeleteForecasts(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectForecastsDeleteForecasts");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'year': opts['year'],
        'month': opts['month']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectforecasts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsDeleteProjectInvoiceSettings_0 operation.
     * @callback module:api/ProjectsDeleteApi~projectInvoiceSettingsDeleteProjectInvoiceSettings_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an project invoice settings.
     * Returns: No Content (204) if succeeded. Not found (404) if project invoice settings can't be found.
     * @param {String} guid ID for the project invoice settings to delete.
     * @param {module:api/ProjectsDeleteApi~projectInvoiceSettingsDeleteProjectInvoiceSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    projectInvoiceSettingsDeleteProjectInvoiceSettings_0(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectInvoiceSettingsDeleteProjectInvoiceSettings_0");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectinvoicesettings/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProductsDeleteAllProjectProducts operation.
     * @callback module:api/ProjectsDeleteApi~projectProductsDeleteAllProjectProductsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all project products of a project.
     * Returns: No Content (204) if succeeded.
     * @param {String} projectGuid GUID of the project from where project products to remove.
     * @param {module:api/ProjectsDeleteApi~projectProductsDeleteAllProjectProductsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectProductsDeleteAllProjectProducts(projectGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectProductsDeleteAllProjectProducts");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectproducts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProductsDeleteProjectProduct operation.
     * @callback module:api/ProjectsDeleteApi~projectProductsDeleteProjectProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project product.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID of the project product to remove.
     * @param {module:api/ProjectsDeleteApi~projectProductsDeleteProjectProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectProductsDeleteProjectProduct(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectProductsDeleteProjectProduct");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectproducts/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkHourPricesDeleteProjectWorkHourPrice operation.
     * @callback module:api/ProjectsDeleteApi~projectWorkHourPricesDeleteProjectWorkHourPriceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a work hour price
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the work hour price.
     * @param {module:api/ProjectsDeleteApi~projectWorkHourPricesDeleteProjectWorkHourPriceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectWorkHourPricesDeleteProjectWorkHourPrice(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectWorkHourPricesDeleteProjectWorkHourPrice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectworkhourprices/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkTypesDeleteProjectWorktype operation.
     * @callback module:api/ProjectsDeleteApi~projectWorkTypesDeleteProjectWorktypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project work type.
     * Returns: No Content (204) if succeeded. The \"UseWorktypesFromSetting\" flag for the Project should be false (the project should not use the organization list of work types).
     * @param {String} guid GUID of the project work type to remove.
     * @param {module:api/ProjectsDeleteApi~projectWorkTypesDeleteProjectWorktypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectWorkTypesDeleteProjectWorktype(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectWorkTypesDeleteProjectWorktype");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectworktypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeleteProject operation.
     * @callback module:api/ProjectsDeleteApi~projectsDeleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * Returns: No Content (204) if succeeded. Not found (404) if project can't be found.
     * @param {String} guid ID for the project to delete
     * @param {module:api/ProjectsDeleteApi~projectsDeleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDeleteProject(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectsDeleteProject");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalFeesDeleteProposalFee operation.
     * @callback module:api/ProjectsDeleteApi~proposalFeesDeleteProposalFeeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a proposal fee row
     * Returns: No Content (204) if succeeded. Not found (404) if proposal fee row can't be found.
     * @param {String} guid ID for the proposal fee row to delete
     * @param {module:api/ProjectsDeleteApi~proposalFeesDeleteProposalFeeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    proposalFeesDeleteProposalFee(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalFeesDeleteProposalFee");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/proposalfeerows/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalSubtotalsDeleteProposalSubtotal operation.
     * @callback module:api/ProjectsDeleteApi~proposalSubtotalsDeleteProposalSubtotalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a proposal subtotal
     * Returns: No Content (204) if succeeded. Not found (404) if proposal subtotal can't be found.
     * @param {String} guid ID for the proposal subtotal to delete.
     * @param {module:api/ProjectsDeleteApi~proposalSubtotalsDeleteProposalSubtotalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    proposalSubtotalsDeleteProposalSubtotal(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalSubtotalsDeleteProposalSubtotal");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/proposalsubtotals/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalWorkhoursDeleteProposalWorkhour operation.
     * @callback module:api/ProjectsDeleteApi~proposalWorkhoursDeleteProposalWorkhourCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a proposal work row.
     * Returns: No Content (204) if succeeded. Not found (404) if proposal work row can't be found.
     * @param {String} guid ID for the proposal work row to delete.
     * @param {module:api/ProjectsDeleteApi~proposalWorkhoursDeleteProposalWorkhourCallback} callback The callback function, accepting three arguments: error, data, response
     */
    proposalWorkhoursDeleteProposalWorkhour(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalWorkhoursDeleteProposalWorkhour");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/proposalworkrows/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalsDeleteProposal operation.
     * @callback module:api/ProjectsDeleteApi~proposalsDeleteProposalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a proposal
     * Returns: No Content (204) if succeeded. Not found (404) if proposal can't be found.
     * @param {String} guid Guid for the proposal to delete
     * @param {module:api/ProjectsDeleteApi~proposalsDeleteProposalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    proposalsDeleteProposal(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalsDeleteProposal");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/proposals/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesDeleteProjectSalesNote operation.
     * @callback module:api/ProjectsDeleteApi~salesNotesDeleteProjectSalesNoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project sales note.
     * Returns: No Content (204) if succeeded. OK (200) if note has child notes and can't be deleted. It is marked as IsDeleted = true. Not found (404) if note can't be found.
     * @param {String} guid GUID used to delete the project sales note.
     * @param {module:api/ProjectsDeleteApi~salesNotesDeleteProjectSalesNoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesNotesDeleteProjectSalesNote(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesNotesDeleteProjectSalesNote");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectsalesnotes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
