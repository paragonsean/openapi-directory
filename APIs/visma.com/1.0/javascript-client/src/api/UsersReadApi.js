/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import FlextimeAdjustmentOutputModel from '../model/FlextimeAdjustmentOutputModel';
import FlextimeModel from '../model/FlextimeModel';
import GetUsersPurpose from '../model/GetUsersPurpose';
import KeyValuePairOfStringAndSortDirection from '../model/KeyValuePairOfStringAndSortDirection';
import ProjectMemberCostExceptionOutputModel from '../model/ProjectMemberCostExceptionOutputModel';
import UserCustomValueOutputModel from '../model/UserCustomValueOutputModel';
import UserKeywordModel from '../model/UserKeywordModel';
import UserOutputModel from '../model/UserOutputModel';
import WorkContractOutputModel from '../model/WorkContractOutputModel';
import WorkdayModel from '../model/WorkdayModel';

/**
* UsersRead service.
* @module api/UsersReadApi
* @version 1.0
*/
export default class UsersReadApi {

    /**
    * Constructs a new UsersReadApi. 
    * @alias module:api/UsersReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the flextimeAdjustmentsGetFlextimeAdjustment operation.
     * @callback module:api/UsersReadApi~flextimeAdjustmentsGetFlextimeAdjustmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlextimeAdjustmentOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Flextime Adjustment by ID.
     * @param {String} guid GUID used to get the Flextime Adjustment.
     * @param {module:api/UsersReadApi~flextimeAdjustmentsGetFlextimeAdjustmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlextimeAdjustmentOutputModel}
     */
    flextimeAdjustmentsGetFlextimeAdjustment(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling flextimeAdjustmentsGetFlextimeAdjustment");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlextimeAdjustmentOutputModel;
      return this.apiClient.callApi(
        '/v1/flextimeadjustments/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flextimeAdjustmentsGetFlextimeAdjustments operation.
     * @callback module:api/UsersReadApi~flextimeAdjustmentsGetFlextimeAdjustmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlextimeAdjustmentOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Flextime Adjustments.
     * @param {String} userGuid ID of the user for whom to get the adjustments.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/UsersReadApi~flextimeAdjustmentsGetFlextimeAdjustmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlextimeAdjustmentOutputModel>}
     */
    flextimeAdjustmentsGetFlextimeAdjustments(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling flextimeAdjustmentsGetFlextimeAdjustments");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FlextimeAdjustmentOutputModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/flextimeadjustments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flextimeGetFlextime operation.
     * @callback module:api/UsersReadApi~flextimeGetFlextimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlextimeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the flextime balance for a user for a specified date. Total balance is returned for the given date. Month balance is the balance for the month of the given date. Values are returned only if the advanced time tracking add-on is active.
     * @param {String} userGuid Id of the user.
     * @param {Object} opts Optional parameters
     * @param {Date} [eventDate] Date for which to get the balance. Max 12 months into the future.
     * @param {module:api/UsersReadApi~flextimeGetFlextimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlextimeModel}
     */
    flextimeGetFlextime(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling flextimeGetFlextime");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'eventDate': opts['eventDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlextimeModel;
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/flextime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsGetUserKeywords operation.
     * @callback module:api/UsersReadApi~keywordsGetUserKeywordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserKeywordModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the keywords for user.
     * @param {String} userGuid ID of the user for who keywords are requested.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Keyword&sortings[0].value=Desc\".
     * @param {module:api/UsersReadApi~keywordsGetUserKeywordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserKeywordModel>}
     */
    keywordsGetUserKeywords(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling keywordsGetUserKeywords");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'active': opts['active'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserKeywordModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/keywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser operation.
     * @callback module:api/UsersReadApi~projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectMemberCostExceptionOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all cost exceptions of project members for user.
     * @param {String} userGuid Guid of the user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isProjectClosed] Search only for open or closed projects. Default all projects.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/UsersReadApi~projectMemberCostExceptionsGetProjectMemberCostExceptionsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectMemberCostExceptionOutputModel>}
     */
    projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'isProjectClosed': opts['isProjectClosed'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectMemberCostExceptionOutputModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/projectmembercostexceptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomValuesGetUserCustomValue operation.
     * @callback module:api/UsersReadApi~userCustomValuesGetUserCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCustomValueOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user custom value by ID.
     * @param {String} guid Id used to get the user custom value.
     * @param {module:api/UsersReadApi~userCustomValuesGetUserCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCustomValueOutputModel}
     */
    userCustomValuesGetUserCustomValue(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling userCustomValuesGetUserCustomValue");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserCustomValueOutputModel;
      return this.apiClient.callApi(
        '/v1/users/customvalues/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomValuesGetUserCustomValues operation.
     * @callback module:api/UsersReadApi~userCustomValuesGetUserCustomValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCustomValueOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user custom values.
     * @param {String} userGuid ID of the user.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [isActive] Optional: Get only values of active or inactive user custom properties.
     * @param {Array.<String>} [targets] Optional: List of target for which to get the values.
     * @param {Date} [changedSince] Optional: Get user custom values that have been added or changed after this date time (greater or equal).
     * @param {module:api/UsersReadApi~userCustomValuesGetUserCustomValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserCustomValueOutputModel>}
     */
    userCustomValuesGetUserCustomValues(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling userCustomValuesGetUserCustomValues");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isActive': opts['isActive'],
        'targets': this.apiClient.buildCollectionParam(opts['targets'], 'multi'),
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserCustomValueOutputModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/customvalues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUser operation.
     * @callback module:api/UsersReadApi~usersGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user by ID.
     * @param {String} guid GUID used to get the user.
     * @param {module:api/UsersReadApi~usersGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOutputModel}
     */
    usersGetUser(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling usersGetUser");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserOutputModel;
      return this.apiClient.callApi(
        '/v1/users/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUsers operation.
     * @callback module:api/UsersReadApi~usersGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] 
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {Boolean} [isActive] If not given, return all users, if given as true return only active users, if given as false returns only inactive users
     * @param {Array.<String>} [businessUnitGuids] Optional: ID of the business unit of the user. If not provided, returns for all business units. Default all.
     * @param {Array.<String>} [keywordGuids] Optional: ID of the keyword of the user. If not provided, returns for all keywords. Default all.
     * @param {Date} [changedSince] Optional: Get users that have been added or changed after this date time (greater or equal).
     * @param {Array.<String>} [supervisorUserGuids] Optional: ID of the supervisor to get subordinates for.
     * @param {String} [code = '')] Optional: Code of the user.
     * @param {String} [email = '')] Optional: Email address of the user.
     * @param {module:model/GetUsersPurpose} [purpose] Optional: Filter users by purpose.
     * @param {module:api/UsersReadApi~usersGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserOutputModel>}
     */
    usersGetUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isActive': opts['isActive'],
        'businessUnitGuids': this.apiClient.buildCollectionParam(opts['businessUnitGuids'], 'multi'),
        'keywordGuids': this.apiClient.buildCollectionParam(opts['keywordGuids'], 'multi'),
        'changedSince': opts['changedSince'],
        'supervisorUserGuids': this.apiClient.buildCollectionParam(opts['supervisorUserGuids'], 'multi'),
        'code': opts['code'],
        'email': opts['email'],
        'purpose': opts['purpose']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserOutputModel];
      return this.apiClient.callApi(
        '/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsGetCurrentWorkContractForUser operation.
     * @callback module:api/UsersReadApi~workContractsGetCurrentWorkContractForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkContractOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets current work contract for the user
     * @param {String} userGuid Id of the user
     * @param {module:api/UsersReadApi~workContractsGetCurrentWorkContractForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkContractOutputModel}
     */
    workContractsGetCurrentWorkContractForUser(userGuid, callback) {
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling workContractsGetCurrentWorkContractForUser");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkContractOutputModel;
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/workcontracts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsGetWorkContract_0 operation.
     * @callback module:api/UsersReadApi~workContractsGetWorkContract_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkContractOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get work contract by ID.
     * @param {String} guid Id used to get the work contract.
     * @param {module:api/UsersReadApi~workContractsGetWorkContract_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkContractOutputModel}
     */
    workContractsGetWorkContract_0(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workContractsGetWorkContract_0");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkContractOutputModel;
      return this.apiClient.callApi(
        '/v1/workcontracts/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsGetWorkContractsForUser operation.
     * @callback module:api/UsersReadApi~workContractsGetWorkContractsForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkContractOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the work contracts for the user.
     * @param {String} userGuid Id of the user.
     * @param {module:api/UsersReadApi~workContractsGetWorkContractsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkContractOutputModel>}
     */
    workContractsGetWorkContractsForUser(userGuid, callback) {
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling workContractsGetWorkContractsForUser");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkContractOutputModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/workcontracts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workdaysGetWorkdays operation.
     * @callback module:api/UsersReadApi~workdaysGetWorkdaysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkdayModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workdays for a user.
     * @param {String} userGuid ID of the user.
     * @param {Date} startDate Start date of the workdays.
     * @param {Date} endDate End date of the workdays.
     * @param {module:api/UsersReadApi~workdaysGetWorkdaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkdayModel>}
     */
    workdaysGetWorkdays(userGuid, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling workdaysGetWorkdays");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling workdaysGetWorkdays");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling workdaysGetWorkdays");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkdayModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/workdays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
