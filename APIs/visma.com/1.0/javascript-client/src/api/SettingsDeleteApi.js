/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';

/**
* SettingsDelete service.
* @module api/SettingsDeleteApi
* @version 1.0
*/
export default class SettingsDeleteApi {

    /**
    * Constructs a new SettingsDeleteApi. 
    * @alias module:api/SettingsDeleteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activityTypesDeleteActivityType operation.
     * @callback module:api/SettingsDeleteApi~activityTypesDeleteActivityTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an activity type.
     * Returns: No Content (204) if succeeded. Not found (404) if activity type can't be found.
     * @param {String} guid ID for the activity type to delete
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the activity type to which to move usages of this activity type. Default null. If activity type is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~activityTypesDeleteActivityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activityTypesDeleteActivityType(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling activityTypesDeleteActivityType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/activitytypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communicationTypesDeleteCommunicationType operation.
     * @callback module:api/SettingsDeleteApi~communicationTypesDeleteCommunicationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a communication type.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the communication type.
     * @param {module:api/SettingsDeleteApi~communicationTypesDeleteCommunicationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    communicationTypesDeleteCommunicationType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling communicationTypesDeleteCommunicationType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/communicationtypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactRolesDeleteContactRole operation.
     * @callback module:api/SettingsDeleteApi~contactRolesDeleteContactRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact role.
     * Returns: No Content (204) if succeeded. Not found (404) if contact role can't be found.
     * @param {String} guid ID for the contact role to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the contact role to which to move usages of this contact role. Default null. If contact role is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~contactRolesDeleteContactRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contactRolesDeleteContactRole(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactRolesDeleteContactRole");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contactroles/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costAccountsDeleteCostAccount operation.
     * @callback module:api/SettingsDeleteApi~costAccountsDeleteCostAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cost account.
     * Returns: No Content (204) if succeeded. Not found (404) if cost account can't be found.
     * @param {String} guid ID for the cost account to delete.
     * @param {module:api/SettingsDeleteApi~costAccountsDeleteCostAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    costAccountsDeleteCostAccount(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling costAccountsDeleteCostAccount");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/costaccounts/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the costCentersDeleteCostCenter operation.
     * @callback module:api/SettingsDeleteApi~costCentersDeleteCostCenterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cost center.
     * Returns: No Content (204) if succeeded. Not found (404) if cost center can't be found.
     * @param {String} guid ID for the cost center to delete.
     * @param {module:api/SettingsDeleteApi~costCentersDeleteCostCenterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    costCentersDeleteCostCenter(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling costCentersDeleteCostCenter");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/costcenters/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertiesDeleteCustomerCustomProperty operation.
     * @callback module:api/SettingsDeleteApi~customerCustomPropertiesDeleteCustomerCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer custom property.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the customer custom property.
     * @param {module:api/SettingsDeleteApi~customerCustomPropertiesDeleteCustomerCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerCustomPropertiesDeleteCustomerCustomProperty(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomPropertiesDeleteCustomerCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customers/customproperties/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItem operation.
     * @callback module:api/SettingsDeleteApi~customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer custom property selection item.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the customer custom property selection item.
     * @param {module:api/SettingsDeleteApi~customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItem(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customers/customproperties/customercustompropertyselectionitems/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the industriesDeleteIndustry operation.
     * @callback module:api/SettingsDeleteApi~industriesDeleteIndustryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an industry.
     * Returns: No Content (204) if succeeded. Not found (404) if industry can't be found.
     * @param {String} guid ID for the industry to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the industry to which to move usages of this industry. Default null. If industry is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~industriesDeleteIndustryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    industriesDeleteIndustry(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling industriesDeleteIndustry");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/industries/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceStatusesDeleteInvoiceStatus operation.
     * @callback module:api/SettingsDeleteApi~invoiceStatusesDeleteInvoiceStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an invoice status.
     * Returns: No Content (204) if succeeded. Not found (404) if invoice status can't be found.
     * @param {String} guid ID for the invoice status to delete.
     * @param {module:api/SettingsDeleteApi~invoiceStatusesDeleteInvoiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    invoiceStatusesDeleteInvoiceStatus(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoiceStatusesDeleteInvoiceStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/invoicestatuses/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsDeleteKeyword operation.
     * @callback module:api/SettingsDeleteApi~keywordsDeleteKeywordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete keyword by ID. It will also be deleted from any entity it is used in (Project, etc.)
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to get the keyword.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the keyword to which to move usages of this keyword. Default null. If keyword is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~keywordsDeleteKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    keywordsDeleteKeyword(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling keywordsDeleteKeyword");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/keywords/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leadSourcesDeleteLeadSource operation.
     * @callback module:api/SettingsDeleteApi~leadSourcesDeleteLeadSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a lead source.
     * Returns: No Content (204) if succeeded. Not found (404) if lead source can't be found.
     * @param {String} guid ID for the lead source to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the lead source to which to move usages of this lead source. Default null. If industry is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~leadSourcesDeleteLeadSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leadSourcesDeleteLeadSource(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling leadSourcesDeleteLeadSource");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/leadsources/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketSegmentsDeleteMarketSegment operation.
     * @callback module:api/SettingsDeleteApi~marketSegmentsDeleteMarketSegmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a market segment.
     * Returns: No Content (204) if succeeded. Not found (404) if market segment can't be found.
     * @param {String} guid ID for the market segment to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the lead source to which to move usages of this market segment. Default null.
     * @param {module:api/SettingsDeleteApi~marketSegmentsDeleteMarketSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    marketSegmentsDeleteMarketSegment(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling marketSegmentsDeleteMarketSegment");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/marketsegments/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overtimesDeleteOvertime operation.
     * @callback module:api/SettingsDeleteApi~overtimesDeleteOvertimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an overtime.
     * Returns: No Content (204) if succeeded. Not found (404) if overtime can't be found.
     * @param {String} guid ID for the overtime to delete.
     * @param {module:api/SettingsDeleteApi~overtimesDeleteOvertimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    overtimesDeleteOvertime(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling overtimesDeleteOvertime");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/overtimes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseStatusTypesDeletePhaseStatusType operation.
     * @callback module:api/SettingsDeleteApi~phaseStatusTypesDeletePhaseStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a phase status type
     * Returns: No Content (204) if succeeded. Not found (404) if phase status type can't be found.
     * @param {String} guid ID for the phase status type to delete
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the phase status type to which to move usages of this phase status type. Default null. If phase status type is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~phaseStatusTypesDeletePhaseStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    phaseStatusTypesDeletePhaseStatusType(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling phaseStatusTypesDeletePhaseStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/phasestatustypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCategoriesDeleteProductCategory operation.
     * @callback module:api/SettingsDeleteApi~productCategoriesDeleteProductCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a product category.
     * Returns: No Content (204) if succeeded. Not found (404) if product category can't be found.
     * @param {String} guid ID for the product category to delete.
     * @param {module:api/SettingsDeleteApi~productCategoriesDeleteProductCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productCategoriesDeleteProductCategory(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productCategoriesDeleteProductCategory");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/productcategories/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCountrySettingsDeleteProductCountrySetting operation.
     * @callback module:api/SettingsDeleteApi~productCountrySettingsDeleteProductCountrySettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a product country setting
     * Returns: No Content (204) if succeeded. Not found (404) if product country setting can't be found.
     * @param {String} guid GUID used to delete the product country setting.
     * @param {module:api/SettingsDeleteApi~productCountrySettingsDeleteProductCountrySettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productCountrySettingsDeleteProductCountrySetting(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productCountrySettingsDeleteProductCountrySetting");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/productcountrysettings/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsDeleteProduct operation.
     * @callback module:api/SettingsDeleteApi~productsDeleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a product.
     * Returns: No Content (204) if succeeded. Not found (404) if product can't be found.
     * @param {String} guid ID for the product to delete.
     * @param {module:api/SettingsDeleteApi~productsDeleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsDeleteProduct(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling productsDeleteProduct");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/products/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectBillingCustomersDeleteProjectBillingCustomer operation.
     * @callback module:api/SettingsDeleteApi~projectBillingCustomersDeleteProjectBillingCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project billing customer.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID of the project billing customer to remove.
     * @param {module:api/SettingsDeleteApi~projectBillingCustomersDeleteProjectBillingCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectBillingCustomersDeleteProjectBillingCustomer(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectBillingCustomersDeleteProjectBillingCustomer");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectbillingcustomers/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertiesDeleteProjectCustomProperty operation.
     * @callback module:api/SettingsDeleteApi~projectCustomPropertiesDeleteProjectCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project custom property.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the project custom property.
     * @param {module:api/SettingsDeleteApi~projectCustomPropertiesDeleteProjectCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectCustomPropertiesDeleteProjectCustomProperty(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomPropertiesDeleteProjectCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/customproperties/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItem operation.
     * @callback module:api/SettingsDeleteApi~projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project custom property selection item.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the project custom property selection item.
     * @param {module:api/SettingsDeleteApi~projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItem(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectMemberCostExceptionsDelete operation.
     * @callback module:api/SettingsDeleteApi~projectMemberCostExceptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project member cost exception.
     * Deletes project member cost exception. Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the project member cost exception.
     * @param {module:api/SettingsDeleteApi~projectMemberCostExceptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectMemberCostExceptionsDelete(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectMemberCostExceptionsDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectmembercostexceptions/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectStatusTypesDeleteProjectStatusType operation.
     * @callback module:api/SettingsDeleteApi~projectStatusTypesDeleteProjectStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a projectStatusType
     * Returns: No Content (204) if succeeded. Not found (404) if projectStatusType can't be found.
     * @param {String} guid ID for the projectStatusType to delete
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the project status type to which to move usages of this project status type. Default null. If project status type is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~projectStatusTypesDeleteProjectStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectStatusTypesDeleteProjectStatusType(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectStatusTypesDeleteProjectStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projectstatustypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTaskStatusesDeleteProjectTaskStatus operation.
     * @callback module:api/SettingsDeleteApi~projectTaskStatusesDeleteProjectTaskStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project task status.
     * Returns: No Content (204) if succeeded. Not found (404) if product can't be found.
     * @param {String} guid ID for the project task status to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the project task status to which to move usages of this project task status. Default null.
     * @param {module:api/SettingsDeleteApi~projectTaskStatusesDeleteProjectTaskStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectTaskStatusesDeleteProjectTaskStatus(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectTaskStatusesDeleteProjectTaskStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projecttaskstatuses/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalStatusesDeleteProposalStatus operation.
     * @callback module:api/SettingsDeleteApi~proposalStatusesDeleteProposalStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an proposal status
     * Returns: No Content (204) if succeeded. Not found (404) if proposal status can't be found.
     * @param {String} guid ID for the proposal status to delete
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the proposal status to which to move usages of this proposal status. Default null. If proposal status is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~proposalStatusesDeleteProposalStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    proposalStatusesDeleteProposalStatus(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalStatusesDeleteProposalStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/proposalstatuses/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesDeleteRole operation.
     * @callback module:api/SettingsDeleteApi~rolesDeleteRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role.
     * Returns: No Content (204) if succeeded. Not found (404) if role can't be found.
     * @param {String} guid ID for the role to delete.
     * @param {module:api/SettingsDeleteApi~rolesDeleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rolesDeleteRole(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling rolesDeleteRole");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesAccountsDeleteSalesAccount operation.
     * @callback module:api/SettingsDeleteApi~salesAccountsDeleteSalesAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a sales account.
     * Returns: No Content (204) if succeeded. Not found (404) if sales account can't be found.
     * @param {String} guid ID for the sales account to delete.
     * @param {module:api/SettingsDeleteApi~salesAccountsDeleteSalesAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesAccountsDeleteSalesAccount(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesAccountsDeleteSalesAccount");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/salesaccounts/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesStatusTypesDeleteSalesStatusType operation.
     * @callback module:api/SettingsDeleteApi~salesStatusTypesDeleteSalesStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an sales status type.
     * Returns: No Content (204) if succeeded. Not found (404) if sales status type can't be found.
     * @param {String} guid ID for the sales status type to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the sales status type to which to move usages of this sales status type. Default null. If sales status type is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~salesStatusTypesDeleteSalesStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesStatusTypesDeleteSalesStatusType(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesStatusTypesDeleteSalesStatusType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/salesstatustypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeEntryTypesDeleteTimeEntryType operation.
     * @callback module:api/SettingsDeleteApi~timeEntryTypesDeleteTimeEntryTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a time entry type.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the time entry type.
     * @param {module:api/SettingsDeleteApi~timeEntryTypesDeleteTimeEntryTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    timeEntryTypesDeleteTimeEntryType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling timeEntryTypesDeleteTimeEntryType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/timeentrytypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySetting operation.
     * @callback module:api/SettingsDeleteApi~travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a travel expense type country setting
     * Returns: No Content (204) if succeeded. Not found (404) if travel expense type country setting can't be found.
     * @param {String} guid GUID used to delete the travel expense type country setting.
     * @param {module:api/SettingsDeleteApi~travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySetting(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySetting");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/travelexpensetypecountrysettings/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypesDeleteTravelExpenseType operation.
     * @callback module:api/SettingsDeleteApi~travelExpenseTypesDeleteTravelExpenseTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a travel expense type.
     * @param {String} guid Guid for the travel expense type to delete.
     * @param {module:api/SettingsDeleteApi~travelExpenseTypesDeleteTravelExpenseTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    travelExpenseTypesDeleteTravelExpenseType(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelExpenseTypesDeleteTravelExpenseType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/travelexpensetypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelReimbursementStatusDeleteTravelReimbursementStatus operation.
     * @callback module:api/SettingsDeleteApi~travelReimbursementStatusDeleteTravelReimbursementStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a travel reimbursement status.
     * Returns: No Content (204) if succeeded. Not found (404) if travel reimbursement status can't be found.
     * @param {String} guid ID for the travel reimbursement status to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the travel reimbursement status to which to move usages of this travel reimbursement status. Default null. If travel reimbursement status is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~travelReimbursementStatusDeleteTravelReimbursementStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    travelReimbursementStatusDeleteTravelReimbursementStatus(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling travelReimbursementStatusDeleteTravelReimbursementStatus");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/travelreimbursementstatuses/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertiesDeleteUserCustomProperty operation.
     * @callback module:api/SettingsDeleteApi~userCustomPropertiesDeleteUserCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user custom property.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the user custom property.
     * @param {module:api/SettingsDeleteApi~userCustomPropertiesDeleteUserCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCustomPropertiesDeleteUserCustomProperty(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling userCustomPropertiesDeleteUserCustomProperty");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/customproperties/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItem operation.
     * @callback module:api/SettingsDeleteApi~userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user custom property selection item.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the user custom property selection item.
     * @param {module:api/SettingsDeleteApi~userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItem(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItem");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/customproperties/usercustompropertyselectionitems/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vatRatesDeleteVatRate operation.
     * @callback module:api/SettingsDeleteApi~vatRatesDeleteVatRateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a vat rate
     * Returns: No Content (204) if succeeded. Bad Request (400) if vat rate is the default one. Not Found (404) if vat rate can't be found.
     * @param {String} guid GUID for the vat rate to delete
     * @param {module:api/SettingsDeleteApi~vatRatesDeleteVatRateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vatRatesDeleteVatRate(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling vatRatesDeleteVatRate");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/vatrates/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workContractsDeleteWorkContract operation.
     * @callback module:api/SettingsDeleteApi~workContractsDeleteWorkContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a work contract.
     * Returns: No Content (204) if succeeded. Not found (404) if work contract can't be found.
     * @param {String} guid ID for the work contract to delete.
     * @param {module:api/SettingsDeleteApi~workContractsDeleteWorkContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workContractsDeleteWorkContract(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workContractsDeleteWorkContract");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/workcontracts/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workTypesDeleteWorkType operation.
     * @callback module:api/SettingsDeleteApi~workTypesDeleteWorkTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a work type.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the work type.
     * @param {Object} opts Optional parameters
     * @param {String} [moveUsagesToGuid] Optional: ID of the work type to which to move usages of this work type. Default null. If work type is in use and usages aren't moved the deletion might fail.
     * @param {module:api/SettingsDeleteApi~workTypesDeleteWorkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workTypesDeleteWorkType(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling workTypesDeleteWorkType");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'moveUsagesToGuid': opts['moveUsagesToGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/worktypes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
