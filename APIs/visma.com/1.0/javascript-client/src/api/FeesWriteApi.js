/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import FlatRateInputModel from '../model/FlatRateInputModel';
import FlatRateOutputModel from '../model/FlatRateOutputModel';
import PatchOperation from '../model/PatchOperation';
import ProjectFeeInputModel from '../model/ProjectFeeInputModel';
import ProjectFeeOutputModel from '../model/ProjectFeeOutputModel';
import ProjectRecurringFeeRuleInputModel from '../model/ProjectRecurringFeeRuleInputModel';
import ProjectRecurringFeeRuleOutputModel from '../model/ProjectRecurringFeeRuleOutputModel';

/**
* FeesWrite service.
* @module api/FeesWriteApi
* @version 1.0
*/
export default class FeesWriteApi {

    /**
    * Constructs a new FeesWriteApi. 
    * @alias module:api/FeesWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the flatRatesPatchFlatRate operation.
     * @callback module:api/FeesWriteApi~flatRatesPatchFlatRateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlatRateOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a flat rate or a part of it.
     * @param {String} guid ID of the flat rate.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of FlatRateModel.
     * @param {module:api/FeesWriteApi~flatRatesPatchFlatRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlatRateOutputModel>}
     */
    flatRatesPatchFlatRate(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling flatRatesPatchFlatRate");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [FlatRateOutputModel];
      return this.apiClient.callApi(
        '/v1/flatrates/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flatRatesPostFlatRate operation.
     * @callback module:api/FeesWriteApi~flatRatesPostFlatRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlatRateOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a flat rate.
     * @param {Object} opts Optional parameters
     * @param {module:model/FlatRateInputModel} [flatRateInputModel] FlatRateModel.
     * @param {module:api/FeesWriteApi~flatRatesPostFlatRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlatRateOutputModel}
     */
    flatRatesPostFlatRate(opts, callback) {
      opts = opts || {};
      let postBody = opts['flatRateInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlatRateOutputModel;
      return this.apiClient.callApi(
        '/v1/flatrates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesPatchProjectFee operation.
     * @callback module:api/FeesWriteApi~projectFeesPatchProjectFeeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a projectFee or a part of it.
     * @param {String} guid ID of the project fee Can also be comma separate list of IDs to patch multiple project fees with one call. When multiple IDs are given, returns model which has list of succeeded project fees and list of errors.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ProjectFeeInputModel.
     * @param {module:api/FeesWriteApi~projectFeesPatchProjectFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFeeOutputModel>}
     */
    projectFeesPatchProjectFee(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectFeesPatchProjectFee");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/projectfees/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesPostProjectFee operation.
     * @callback module:api/FeesWriteApi~projectFeesPostProjectFeeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a project fee.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectFeeInputModel} [projectFeeInputModel] ProjectFeeInputModel.
     * @param {module:api/FeesWriteApi~projectFeesPostProjectFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFeeOutputModel>}
     */
    projectFeesPostProjectFee(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectFeeInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/projectfees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRecurringFeeRulesPatchProjectRecurringFeeRule operation.
     * @callback module:api/FeesWriteApi~projectRecurringFeeRulesPatchProjectRecurringFeeRuleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectRecurringFeeRuleOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a projectRecurringFeeRule or a part of it.
     * @param {String} guid ID of the projectRecurringFeeRule.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ProjectRecurringFeeRuleModel.
     * @param {module:api/FeesWriteApi~projectRecurringFeeRulesPatchProjectRecurringFeeRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectRecurringFeeRuleOutputModel>}
     */
    projectRecurringFeeRulesPatchProjectRecurringFeeRule(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectRecurringFeeRulesPatchProjectRecurringFeeRule");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectRecurringFeeRuleOutputModel];
      return this.apiClient.callApi(
        '/v1/projectrecurringfeerules/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRecurringFeeRulesPostProjectRecurringFeeRule operation.
     * @callback module:api/FeesWriteApi~projectRecurringFeeRulesPostProjectRecurringFeeRuleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectRecurringFeeRuleOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a projectRecurringFeeRule.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectRecurringFeeRuleInputModel} [projectRecurringFeeRuleInputModel] ProjectRecurringFeeRuleModel.
     * @param {module:api/FeesWriteApi~projectRecurringFeeRulesPostProjectRecurringFeeRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectRecurringFeeRuleOutputModel>}
     */
    projectRecurringFeeRulesPostProjectRecurringFeeRule(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectRecurringFeeRuleInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectRecurringFeeRuleOutputModel];
      return this.apiClient.callApi(
        '/v1/projectrecurringfeerules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
