/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityCategory from '../model/ActivityCategory';
import ActivityModel from '../model/ActivityModel';
import ActivityParticipantModel from '../model/ActivityParticipantModel';
import ExceptionModel from '../model/ExceptionModel';
import RecurrenceType from '../model/RecurrenceType';

/**
* ActivitiesRead service.
* @module api/ActivitiesReadApi
* @version 1.0
*/
export default class ActivitiesReadApi {

    /**
    * Constructs a new ActivitiesReadApi. 
    * @alias module:api/ActivitiesReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activitiesGetActivities operation.
     * @callback module:api/ActivitiesReadApi~activitiesGetActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all activities of an organization
     * Start and end date times accept values of DateTimeOffset type, based on UTF-8 encoding.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [closed] Optional: Which activities to fetch - open/closed, Default all.
     * @param {Array.<module:model/ActivityCategory>} [activityCategories] Optional: activity category for the activities to be fetched. Should be one of Personal/Absences/CalendarEntry/SalesEvent/Task. Default all.
     * @param {Array.<String>} [customerGuids] Optional: ID of customer. Default all.
     * @param {Boolean} [includeTasksWithNoCustomer = true)] Optional: Include the activities that don't have customer. Default is true.
     * @param {Array.<String>} [projectGuids] Optional: ID of the project for the activities to be fetched. If not provided, returns for all projects. Default all.
     * @param {Boolean} [includeTasksWithNoProject = true)] Optional: Include the activities that don't have project. Default is true.
     * @param {Array.<String>} [projectBusinessUnitGuids] Optional: ID of the business unit of the project based on which activities should be filtered. If not provided, returns for all business units. Default all.
     * @param {Array.<String>} [projectOwnerGuids] Optional: ID of the project manager. If not provided, returns for all project managers. Default all.
     * @param {Array.<String>} [userGuids] Optional: ID of the user for the activities to be fetched. If not provided, returns for all users. Default all.
     * @param {Boolean} [includeAsMember = false)] Optional: Include the activities that the user is a member. Effective if userGuid is provided. Default is to not include.
     * @param {Array.<String>} [userKeywordGuids] Optional: User keyword Ids of activity owner to search for.
     * @param {Date} [startDateTime] Optional: starting date and time from which to get the activities in user's timezone. Finds all activities that end after the date time. Format \"2017-04-12T13%3A20%3A00%2b02%3A00\". Default all.
     * @param {Date} [endDateTime] Optional: ending date and time to which to get the activities in user's timezone. Finds all activities that start before or on the date time. Format \"2017-04-12T13%3A20%3A00%2b02%3A00\". Default all. If activities for one day are fetched, give start date time with time as 00:00 with the offset of the timezone and end time as 23:59:59 with the offset.
     * @param {Array.<String>} [projectTaskStatusGuids] Optional: ID of the project task status. Default all.
     * @param {Array.<String>} [phaseGuids] Optional: ID of the phase for the activities to be fetched. If not provided, returns for all phases. Default all.
     * @param {Boolean} [includeSubPhases = false)] Optional: If one phase guid is given include activities also from sub phases. If multiple phase guids are given, returns activities only for those regardless of this parameter. Default false.
     * @param {Array.<String>} [contactGuids] Optional: ID of the contact for the activities to be fetched. If not provided, returns for all users. Default all.
     * @param {Boolean} [hasDuration] Optional: has duration flag for the activity. Default all.
     * @param {Boolean} [hasHours] Optional: has any work hour entries associated with the activity. Default all.
     * @param {Boolean} [isUnassigned] Optional: is the activity unassigned. Default all.
     * @param {Date} [changedSince] Optional: Get activities that have been added or changed after this date time (greater or equal).
     * @param {Boolean} [useStrictStartAndEndDateTime = false)] Optional: If given as true returns activities that start after start time and end before end time. If given as false returns activities that start before end time and end after start time. Limit are included in both cases. Default false.
     * @param {Array.<String>} [activityTypeGuids] Optional: ID of the project activity type. Default all.
     * @param {module:model/RecurrenceType} [recurrenceType] Optional: Type of the recurrence. Default returns all not recurring activities, instances and exceptions. (None = not recurring activity)
     * @param {module:api/ActivitiesReadApi~activitiesGetActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityModel>}
     */
    activitiesGetActivities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'closed': opts['closed'],
        'activityCategories': this.apiClient.buildCollectionParam(opts['activityCategories'], 'multi'),
        'customerGuids': this.apiClient.buildCollectionParam(opts['customerGuids'], 'multi'),
        'includeTasksWithNoCustomer': opts['includeTasksWithNoCustomer'],
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi'),
        'includeTasksWithNoProject': opts['includeTasksWithNoProject'],
        'projectBusinessUnitGuids': this.apiClient.buildCollectionParam(opts['projectBusinessUnitGuids'], 'multi'),
        'projectOwnerGuids': this.apiClient.buildCollectionParam(opts['projectOwnerGuids'], 'multi'),
        'userGuids': this.apiClient.buildCollectionParam(opts['userGuids'], 'multi'),
        'includeAsMember': opts['includeAsMember'],
        'userKeywordGuids': this.apiClient.buildCollectionParam(opts['userKeywordGuids'], 'multi'),
        'startDateTime': opts['startDateTime'],
        'endDateTime': opts['endDateTime'],
        'projectTaskStatusGuids': this.apiClient.buildCollectionParam(opts['projectTaskStatusGuids'], 'multi'),
        'phaseGuids': this.apiClient.buildCollectionParam(opts['phaseGuids'], 'multi'),
        'includeSubPhases': opts['includeSubPhases'],
        'contactGuids': this.apiClient.buildCollectionParam(opts['contactGuids'], 'multi'),
        'hasDuration': opts['hasDuration'],
        'hasHours': opts['hasHours'],
        'isUnassigned': opts['isUnassigned'],
        'changedSince': opts['changedSince'],
        'useStrictStartAndEndDateTime': opts['useStrictStartAndEndDateTime'],
        'activityTypeGuids': this.apiClient.buildCollectionParam(opts['activityTypeGuids'], 'multi'),
        'recurrenceType': opts['recurrenceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActivityModel];
      return this.apiClient.callApi(
        '/v1/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesGetActivity operation.
     * @callback module:api/ActivitiesReadApi~activitiesGetActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get activity by ID
     * @param {String} guid GUID used to get the activity.
     * @param {module:api/ActivitiesReadApi~activitiesGetActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityModel}
     */
    activitiesGetActivity(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling activitiesGetActivity");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityModel;
      return this.apiClient.callApi(
        '/v1/activities/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityParticipantsGetActivityParticipant operation.
     * @callback module:api/ActivitiesReadApi~activityParticipantsGetActivityParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityParticipantModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get activity participant
     * @param {String} guid ID of the participant
     * @param {module:api/ActivitiesReadApi~activityParticipantsGetActivityParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityParticipantModel}
     */
    activityParticipantsGetActivityParticipant(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling activityParticipantsGetActivityParticipant");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityParticipantModel;
      return this.apiClient.callApi(
        '/v1/activityparticipants/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityParticipantsGetActivityParticipants operation.
     * @callback module:api/ActivitiesReadApi~activityParticipantsGetActivityParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityParticipantModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get participants for an activity
     * @param {String} activityGuid ID of the activity
     * @param {module:api/ActivitiesReadApi~activityParticipantsGetActivityParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityParticipantModel>}
     */
    activityParticipantsGetActivityParticipants(activityGuid, callback) {
      let postBody = null;
      // verify the required parameter 'activityGuid' is set
      if (activityGuid === undefined || activityGuid === null) {
        throw new Error("Missing the required parameter 'activityGuid' when calling activityParticipantsGetActivityParticipants");
      }

      let pathParams = {
        'activityGuid': activityGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActivityParticipantModel];
      return this.apiClient.callApi(
        '/v1/activities/{activityGuid}/activityparticipants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
