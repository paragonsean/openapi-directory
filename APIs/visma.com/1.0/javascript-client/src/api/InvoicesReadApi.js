/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import ExpensesClass from '../model/ExpensesClass';
import InvoiceOutputModel from '../model/InvoiceOutputModel';
import InvoiceRowOutputModel from '../model/InvoiceRowOutputModel';
import InvoiceRowType from '../model/InvoiceRowType';
import InvoiceSettingsOutputModel from '../model/InvoiceSettingsOutputModel';
import KeyValuePairOfStringAndSortDirection from '../model/KeyValuePairOfStringAndSortDirection';
import ProductType from '../model/ProductType';
import ProjectFeeOutputModel from '../model/ProjectFeeOutputModel';
import ProjectInvoiceSettingsOutputModel from '../model/ProjectInvoiceSettingsOutputModel';
import ProjectTravelExpenseOutputModel from '../model/ProjectTravelExpenseOutputModel';
import ReimbursedProjectFeeOutputModel from '../model/ReimbursedProjectFeeOutputModel';
import ReimbursedProjectTravelExpenseOutputModel from '../model/ReimbursedProjectTravelExpenseOutputModel';
import ReimbursedWorkHourOutputModel from '../model/ReimbursedWorkHourOutputModel';
import WorkHourOutputModel from '../model/WorkHourOutputModel';

/**
* InvoicesRead service.
* @module api/InvoicesReadApi
* @version 1.0
*/
export default class InvoicesReadApi {

    /**
    * Constructs a new InvoicesReadApi. 
    * @alias module:api/InvoicesReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the finvoicesGetFinvoiceByInvoiceGuid operation.
     * @callback module:api/InvoicesReadApi~finvoicesGetFinvoiceByInvoiceGuidCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} invoiceGuid 
     * @param {module:api/InvoicesReadApi~finvoicesGetFinvoiceByInvoiceGuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    finvoicesGetFinvoiceByInvoiceGuid(invoiceGuid, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling finvoicesGetFinvoiceByInvoiceGuid");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/soap+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/finvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the finvoicesGetFinvoicesByInvoiceStatus operation.
     * @callback module:api/InvoicesReadApi~finvoicesGetFinvoicesByInvoiceStatusCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} invoiceStatusGuid 
     * @param {module:api/InvoicesReadApi~finvoicesGetFinvoicesByInvoiceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    finvoicesGetFinvoicesByInvoiceStatus(invoiceStatusGuid, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceStatusGuid' is set
      if (invoiceStatusGuid === undefined || invoiceStatusGuid === null) {
        throw new Error("Missing the required parameter 'invoiceStatusGuid' when calling finvoicesGetFinvoicesByInvoiceStatus");
      }

      let pathParams = {
        'invoiceStatusGuid': invoiceStatusGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/invoicestatuses/{invoiceStatusGuid}/finvoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceRowsGetInvoiceRow operation.
     * @callback module:api/InvoicesReadApi~invoiceRowsGetInvoiceRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceRowOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice row by ID
     * @param {String} guid GUID of the invoice row.
     * @param {module:api/InvoicesReadApi~invoiceRowsGetInvoiceRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceRowOutputModel}
     */
    invoiceRowsGetInvoiceRow(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoiceRowsGetInvoiceRow");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceRowOutputModel;
      return this.apiClient.callApi(
        '/v1/invoicerows/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceRowsGetInvoiceRows operation.
     * @callback module:api/InvoicesReadApi~invoiceRowsGetInvoiceRowsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice rows
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get invoice rows that have been added or changed after this date time (greater or equal).
     * @param {module:api/InvoicesReadApi~invoiceRowsGetInvoiceRowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceRowOutputModel>}
     */
    invoiceRowsGetInvoiceRows(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvoiceRowOutputModel];
      return this.apiClient.callApi(
        '/v1/invoicerows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceRowsGetInvoiceRowsForInvoice operation.
     * @callback module:api/InvoicesReadApi~invoiceRowsGetInvoiceRowsForInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Invoice rows for an invoice.
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:model/InvoiceRowType} [rowType] Optional: Type of the row. Either Hours or ProjectFees, Default all.
     * @param {module:api/InvoicesReadApi~invoiceRowsGetInvoiceRowsForInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceRowOutputModel>}
     */
    invoiceRowsGetInvoiceRowsForInvoice(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling invoiceRowsGetInvoiceRowsForInvoice");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'rowType': opts['rowType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvoiceRowOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/invoicerows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceSettingsGetInvoiceSettings operation.
     * @callback module:api/InvoicesReadApi~invoiceSettingsGetInvoiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceSettingsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice settings by invoice GUID
     * @param {String} invoiceGuid Invoice GUID used to get the invoice settings.
     * @param {module:api/InvoicesReadApi~invoiceSettingsGetInvoiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceSettingsOutputModel}
     */
    invoiceSettingsGetInvoiceSettings(invoiceGuid, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling invoiceSettingsGetInvoiceSettings");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceSettingsOutputModel;
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/invoicesettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesGetInvoice operation.
     * @callback module:api/InvoicesReadApi~invoicesGetInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice by ID
     * @param {String} guid GUID of the invoice.
     * @param {module:api/InvoicesReadApi~invoicesGetInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceOutputModel}
     */
    invoicesGetInvoice(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling invoicesGetInvoice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceOutputModel;
      return this.apiClient.callApi(
        '/v1/invoices/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesGetInvoices operation.
     * @callback module:api/InvoicesReadApi~invoicesGetInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Invoices
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Date} [paymentDateStart] Optional: Get only invoices paid at this date or later. Default: Get invoices regardless of payment date.
     * @param {Array.<String>} [invoiceStatusGuids] Optional: Get invoices with this status only. Default: all statuses.
     * @param {Array.<String>} [projectGuids] Optional: ID of the project to get the invoices. If not provided, returns for all projects. Default all.
     * @param {Array.<String>} [projectOwnerGuids] Optional: ID of the project manager to get the invoices for. If not provided, returns for all project managers. Default all.
     * @param {Array.<String>} [projectBusinessUnitGuids] Optional: ID of the business unit of the project. If not provided, returns for all business units. Default all.
     * @param {Array.<String>} [customerGuids] Optional: List of customer IDs. Get invoices for these customers.
     * @param {Date} [startDate] Optional: starting date from which to get the invoices. Default all.
     * @param {Date} [endDate] Optional: end date from which to get the invoices. Default all.
     * @param {Number} [minimumTotalExcludingTax] Optional: specifies minimum value for invoice total in organization currency.
     * @param {Number} [maximumTotalExcludingTax] Optional: specifies maximum value for invoice total in organization currency.
     * @param {Array.<String>} [referenceNumbers] Optional: Invoice reference number. If not provided, returns invoices with any invoice reference number.
     * @param {Array.<Number>} [numbers] Optional: Invoice number. If not provided, returns invoices with any invoice number.
     * @param {Date} [changedSince] Optional: Get invoices that have been added or changed after this date time (greater or equal).
     * @param {Array.<String>} [salesPersonGuids] Optional: ID of the salesperson to get the invoices for. If not provided, returns for all sales persons.
     * @param {Array.<String>} [createdByUserGuids] Optional: ID of the user who created the invoice. If not provided, returns for all users.
     * @param {module:api/InvoicesReadApi~invoicesGetInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceOutputModel>}
     */
    invoicesGetInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken'],
        'paymentDateStart': opts['paymentDateStart'],
        'invoiceStatusGuids': this.apiClient.buildCollectionParam(opts['invoiceStatusGuids'], 'multi'),
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi'),
        'projectOwnerGuids': this.apiClient.buildCollectionParam(opts['projectOwnerGuids'], 'multi'),
        'projectBusinessUnitGuids': this.apiClient.buildCollectionParam(opts['projectBusinessUnitGuids'], 'multi'),
        'customerGuids': this.apiClient.buildCollectionParam(opts['customerGuids'], 'multi'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'minimumTotalExcludingTax': opts['minimumTotalExcludingTax'],
        'maximumTotalExcludingTax': opts['maximumTotalExcludingTax'],
        'referenceNumbers': this.apiClient.buildCollectionParam(opts['referenceNumbers'], 'multi'),
        'numbers': this.apiClient.buildCollectionParam(opts['numbers'], 'multi'),
        'changedSince': opts['changedSince'],
        'salesPersonGuids': this.apiClient.buildCollectionParam(opts['salesPersonGuids'], 'multi'),
        'createdByUserGuids': this.apiClient.buildCollectionParam(opts['createdByUserGuids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvoiceOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesGetInvoiceProjectFees operation.
     * @callback module:api/InvoicesReadApi~projectFeesGetInvoiceProjectFeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project fees on an invoice
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {module:model/ProductType} [productType] Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting
     * @param {module:api/InvoicesReadApi~projectFeesGetInvoiceProjectFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFeeOutputModel>}
     */
    projectFeesGetInvoiceProjectFees(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling projectFeesGetInvoiceProjectFees");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'productType': opts['productType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/projectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesGetInvoiceRowProjectFees operation.
     * @callback module:api/InvoicesReadApi~projectFeesGetInvoiceRowProjectFeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project fees on an invoice row
     * @param {String} invoiceRowGuid ID of the invoice row.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {module:model/ProductType} [productType] Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting
     * @param {module:api/InvoicesReadApi~projectFeesGetInvoiceRowProjectFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFeeOutputModel>}
     */
    projectFeesGetInvoiceRowProjectFees(invoiceRowGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceRowGuid' is set
      if (invoiceRowGuid === undefined || invoiceRowGuid === null) {
        throw new Error("Missing the required parameter 'invoiceRowGuid' when calling projectFeesGetInvoiceRowProjectFees");
      }

      let pathParams = {
        'invoiceRowGuid': invoiceRowGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'productType': opts['productType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/invoicerows/{invoiceRowGuid}/projectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesGetUninvoicedProjectFeesForInvoice operation.
     * @callback module:api/InvoicesReadApi~projectFeesGetUninvoicedProjectFeesForInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get uninvoiced project fees available for invoice
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {Boolean} [isBillable] Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.
     * @param {module:api/InvoicesReadApi~projectFeesGetUninvoicedProjectFeesForInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFeeOutputModel>}
     */
    projectFeesGetUninvoicedProjectFeesForInvoice(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling projectFeesGetUninvoicedProjectFeesForInvoice");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isBillable': opts['isBillable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/uninvoicedprojectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsGetProjectInvoiceSetting operation.
     * @callback module:api/InvoicesReadApi~projectInvoiceSettingsGetProjectInvoiceSettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInvoiceSettingsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project invoice settings by ID.
     * @param {String} guid ID of the project invoice settings.
     * @param {module:api/InvoicesReadApi~projectInvoiceSettingsGetProjectInvoiceSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectInvoiceSettingsOutputModel}
     */
    projectInvoiceSettingsGetProjectInvoiceSetting(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectInvoiceSettingsGetProjectInvoiceSetting");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectInvoiceSettingsOutputModel;
      return this.apiClient.callApi(
        '/v1/projectinvoicesettings/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsGetProjectInvoiceSettings operation.
     * @callback module:api/InvoicesReadApi~projectInvoiceSettingsGetProjectInvoiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInvoiceSettingsOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project invoice settings by project ID.
     * @param {String} projectGuid ID of the project.
     * @param {module:api/InvoicesReadApi~projectInvoiceSettingsGetProjectInvoiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectInvoiceSettingsOutputModel>}
     */
    projectInvoiceSettingsGetProjectInvoiceSettings(projectGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectInvoiceSettingsGetProjectInvoiceSettings");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectInvoiceSettingsOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectinvoicesettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesGetInvoiceProjectTravelExpenses operation.
     * @callback module:api/InvoicesReadApi~projectTravelExpensesGetInvoiceProjectTravelExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project travel expenses on an invoice
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:model/ExpensesClass} [expenseClass] Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense
     * @param {module:api/InvoicesReadApi~projectTravelExpensesGetInvoiceProjectTravelExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseOutputModel>}
     */
    projectTravelExpensesGetInvoiceProjectTravelExpenses(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling projectTravelExpensesGetInvoiceProjectTravelExpenses");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'expenseClass': opts['expenseClass']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/projecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesGetInvoiceRowProjectTravelExpenses operation.
     * @callback module:api/InvoicesReadApi~projectTravelExpensesGetInvoiceRowProjectTravelExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project travel expenses on an invoice row
     * @param {String} invoiceRowGuid ID of the invoice row.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:model/ExpensesClass} [expenseClass] Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense
     * @param {module:api/InvoicesReadApi~projectTravelExpensesGetInvoiceRowProjectTravelExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseOutputModel>}
     */
    projectTravelExpensesGetInvoiceRowProjectTravelExpenses(invoiceRowGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceRowGuid' is set
      if (invoiceRowGuid === undefined || invoiceRowGuid === null) {
        throw new Error("Missing the required parameter 'invoiceRowGuid' when calling projectTravelExpensesGetInvoiceRowProjectTravelExpenses");
      }

      let pathParams = {
        'invoiceRowGuid': invoiceRowGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'expenseClass': opts['expenseClass']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/invoicerows/{invoiceRowGuid}/projecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice operation.
     * @callback module:api/InvoicesReadApi~projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get uninvoiced project travel expenses available for invoice
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isBillable] Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:model/ExpensesClass} [expenseClass] Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense
     * @param {module:api/InvoicesReadApi~projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseOutputModel>}
     */
    projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'isBillable': opts['isBillable'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'expenseClass': opts['expenseClass']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/uninvoicedprojecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reimbursedProjectFeesGetInvoiceReimbursedProjectFees operation.
     * @callback module:api/InvoicesReadApi~reimbursedProjectFeesGetInvoiceReimbursedProjectFeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReimbursedProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project fees on an invoice
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: Number of rows to fetch
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {module:api/InvoicesReadApi~reimbursedProjectFeesGetInvoiceReimbursedProjectFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReimbursedProjectFeeOutputModel>}
     */
    reimbursedProjectFeesGetInvoiceReimbursedProjectFees(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling reimbursedProjectFeesGetInvoiceReimbursedProjectFees");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReimbursedProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/reimbursedprojectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees operation.
     * @callback module:api/InvoicesReadApi~reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReimbursedProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project fees on an invoice row
     * @param {String} invoiceRowGuid ID of the invoice row.
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: Number of rows to fetch
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {module:api/InvoicesReadApi~reimbursedProjectFeesGetInvoiceRowReimbursedProjectFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReimbursedProjectFeeOutputModel>}
     */
    reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees(invoiceRowGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceRowGuid' is set
      if (invoiceRowGuid === undefined || invoiceRowGuid === null) {
        throw new Error("Missing the required parameter 'invoiceRowGuid' when calling reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees");
      }

      let pathParams = {
        'invoiceRowGuid': invoiceRowGuid
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReimbursedProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/invoicerows/{invoiceRowGuid}/reimbursedprojectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses operation.
     * @callback module:api/InvoicesReadApi~reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReimbursedProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project travel expenses on an invoice.
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {String} [textToSearch = '')] Searched string: part of name or description.
     * @param {Boolean} [calculateRowCount = false)] Optional. If true, calculates the total count of project fees. Default false.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\".
     * @param {module:api/InvoicesReadApi~reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReimbursedProjectTravelExpenseOutputModel>}
     */
    reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReimbursedProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/reimbursedprojecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses operation.
     * @callback module:api/InvoicesReadApi~reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReimbursedProjectTravelExpenseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project travel expenses on an invoice row.
     * @param {String} invoiceRowGuid ID of the invoice row.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {String} [textToSearch = '')] Searched string: part of name or description.
     * @param {Boolean} [calculateRowCount = false)] Optional. If true, calculates the total count of project fees. Default false.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\".
     * @param {module:api/InvoicesReadApi~reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReimbursedProjectTravelExpenseOutputModel>}
     */
    reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses(invoiceRowGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceRowGuid' is set
      if (invoiceRowGuid === undefined || invoiceRowGuid === null) {
        throw new Error("Missing the required parameter 'invoiceRowGuid' when calling reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses");
      }

      let pathParams = {
        'invoiceRowGuid': invoiceRowGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReimbursedProjectTravelExpenseOutputModel];
      return this.apiClient.callApi(
        '/v1/invoicerows/{invoiceRowGuid}/reimbursedprojecttravelexpenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reimbursedWorkHoursGetInvoiceReimbursedWorkHours operation.
     * @callback module:api/InvoicesReadApi~reimbursedWorkHoursGetInvoiceReimbursedWorkHoursCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReimbursedWorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all reimbursed hours on an invoice.
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from description or invoice description.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=DueDate&sortings[0].value=Asc&sortings[1].key=TotalIncludingTax&sortings[1].value=Desc\".
     * @param {module:api/InvoicesReadApi~reimbursedWorkHoursGetInvoiceReimbursedWorkHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReimbursedWorkHourOutputModel>}
     */
    reimbursedWorkHoursGetInvoiceReimbursedWorkHours(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling reimbursedWorkHoursGetInvoiceReimbursedWorkHours");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReimbursedWorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/reimbursedworkhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours operation.
     * @callback module:api/InvoicesReadApi~reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReimbursedWorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all reimbursed hours on an invoice row.
     * @param {String} invoiceRowGuid ID of the invoice row.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from description or invoice description.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=DueDate&sortings[0].value=Asc&sortings[1].key=TotalIncludingTax&sortings[1].value=Desc\".
     * @param {module:api/InvoicesReadApi~reimbursedWorkHoursGetInvoiceRowReimbursedWorkHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReimbursedWorkHourOutputModel>}
     */
    reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours(invoiceRowGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceRowGuid' is set
      if (invoiceRowGuid === undefined || invoiceRowGuid === null) {
        throw new Error("Missing the required parameter 'invoiceRowGuid' when calling reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours");
      }

      let pathParams = {
        'invoiceRowGuid': invoiceRowGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReimbursedWorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/invoicerows/{invoiceRowGuid}/reimbursedworkhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursGetInvoiceRowWorkHours operation.
     * @callback module:api/InvoicesReadApi~workHoursGetInvoiceRowWorkHoursCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the work hours on an invoice row
     * @param {String} invoiceRowGuid ID of the invoice row.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/InvoicesReadApi~workHoursGetInvoiceRowWorkHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkHourOutputModel>}
     */
    workHoursGetInvoiceRowWorkHours(invoiceRowGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceRowGuid' is set
      if (invoiceRowGuid === undefined || invoiceRowGuid === null) {
        throw new Error("Missing the required parameter 'invoiceRowGuid' when calling workHoursGetInvoiceRowWorkHours");
      }

      let pathParams = {
        'invoiceRowGuid': invoiceRowGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/invoicerows/{invoiceRowGuid}/workhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursGetInvoiceWorkHours operation.
     * @callback module:api/InvoicesReadApi~workHoursGetInvoiceWorkHoursCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the work hours on an invoice
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/InvoicesReadApi~workHoursGetInvoiceWorkHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkHourOutputModel>}
     */
    workHoursGetInvoiceWorkHours(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling workHoursGetInvoiceWorkHours");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/workhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workHoursGetUninvoicedWorkHoursForInvoice operation.
     * @callback module:api/InvoicesReadApi~workHoursGetUninvoicedWorkHoursForInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkHourOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get uninvoiced work hours available for invoice
     * @param {String} invoiceGuid ID of the invoice.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isBillable] Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/InvoicesReadApi~workHoursGetUninvoicedWorkHoursForInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkHourOutputModel>}
     */
    workHoursGetUninvoicedWorkHoursForInvoice(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling workHoursGetUninvoicedWorkHoursForInvoice");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'isBillable': opts['isBillable'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkHourOutputModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/uninvoicedworkhours', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
