/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import LicenseUserType from '../model/LicenseUserType';
import ResourceAllocationCriteriaModel from '../model/ResourceAllocationCriteriaModel';
import ResourceAllocationOutputModel from '../model/ResourceAllocationOutputModel';
import RoleAllocationOutputModel from '../model/RoleAllocationOutputModel';
import SalesProgress from '../model/SalesProgress';

/**
* ResourceallocationsRead service.
* @module api/ResourceallocationsReadApi
* @version 1.0
*/
export default class ResourceallocationsReadApi {

    /**
    * Constructs a new ResourceallocationsReadApi. 
    * @alias module:api/ResourceallocationsReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the resourceAllocationsGetResourceAllocation operation.
     * @callback module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAllocationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resource allocation by ID
     * @param {String} guid GUID used to get the resource allocation.
     * @param {module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAllocationOutputModel}
     */
    resourceAllocationsGetResourceAllocation(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling resourceAllocationsGetResourceAllocation");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceAllocationOutputModel;
      return this.apiClient.callApi(
        '/v1/resourceallocations/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourceAllocationsGetResourceAllocations operation.
     * @callback module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAllocationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resource allocations
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Date} [changedSince] Optional: Get resource allocations that have been added or changed after this date time (greater or equal).
     * @param {module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAllocationOutputModel}
     */
    resourceAllocationsGetResourceAllocations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceAllocationOutputModel;
      return this.apiClient.callApi(
        '/v1/resourceallocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourceAllocationsGetResourceAllocationsByPhaseGuid operation.
     * @callback module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationsByPhaseGuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAllocationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resource allocations for a phase with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * @param {String} phaseGuid 
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
     * @param {Date} [endDate] Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
     * @param {Date} [changedSince] Optional: Get resource allocations that have been added or changed after this date time (greater or equal).
     * @param {Array.<module:model/LicenseUserType>} [userLicenseTypes] 
     * @param {String} [projectGuid] 
     * @param {String} [userGuid] 
     * @param {String} [projectBusinessUnitGuid] 
     * @param {String} [userBusinessUnitGuid] 
     * @param {String} [projectManagerUserGuid] 
     * @param {String} [userTagGuid] 
     * @param {Boolean} [useSalesProbability = true)] 
     * @param {String} [projectStatusTypeGuid] 
     * @param {String} [projectTagGuid] 
     * @param {String} [superiorUserGuid] 
     * @param {String} [salesStatusTypeGuid] 
     * @param {String} [resourceAllocationGuid] 
     * @param {module:model/SalesProgress} [salesProgress] 
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationsByPhaseGuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAllocationOutputModel}
     */
    resourceAllocationsGetResourceAllocationsByPhaseGuid(phaseGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phaseGuid' is set
      if (phaseGuid === undefined || phaseGuid === null) {
        throw new Error("Missing the required parameter 'phaseGuid' when calling resourceAllocationsGetResourceAllocationsByPhaseGuid");
      }

      let pathParams = {
        'phaseGuid': phaseGuid
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'changedSince': opts['changedSince'],
        'userLicenseTypes': this.apiClient.buildCollectionParam(opts['userLicenseTypes'], 'multi'),
        'projectGuid': opts['projectGuid'],
        'userGuid': opts['userGuid'],
        'projectBusinessUnitGuid': opts['projectBusinessUnitGuid'],
        'userBusinessUnitGuid': opts['userBusinessUnitGuid'],
        'projectManagerUserGuid': opts['projectManagerUserGuid'],
        'userTagGuid': opts['userTagGuid'],
        'useSalesProbability': opts['useSalesProbability'],
        'projectStatusTypeGuid': opts['projectStatusTypeGuid'],
        'projectTagGuid': opts['projectTagGuid'],
        'superiorUserGuid': opts['superiorUserGuid'],
        'salesStatusTypeGuid': opts['salesStatusTypeGuid'],
        'resourceAllocationGuid': opts['resourceAllocationGuid'],
        'salesProgress': opts['salesProgress'],
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceAllocationOutputModel;
      return this.apiClient.callApi(
        '/v1/phases/{phaseGuid}/resourceallocations/allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourceAllocationsGetResourceAllocationsByProjectGuid operation.
     * @callback module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationsByProjectGuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAllocationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resource allocations for a project with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * @param {String} projectGuid 
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
     * @param {Date} [endDate] Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
     * @param {Date} [changedSince] Optional: Get resource allocations that have been added or changed after this date time (greater or equal).
     * @param {Array.<module:model/LicenseUserType>} [userLicenseTypes] 
     * @param {String} [phaseGuid] 
     * @param {String} [userGuid] 
     * @param {String} [projectBusinessUnitGuid] 
     * @param {String} [userBusinessUnitGuid] 
     * @param {String} [projectManagerUserGuid] 
     * @param {String} [userTagGuid] 
     * @param {Boolean} [useSalesProbability = true)] 
     * @param {String} [projectStatusTypeGuid] 
     * @param {String} [projectTagGuid] 
     * @param {String} [superiorUserGuid] 
     * @param {String} [salesStatusTypeGuid] 
     * @param {String} [resourceAllocationGuid] 
     * @param {module:model/SalesProgress} [salesProgress] 
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationsByProjectGuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAllocationOutputModel}
     */
    resourceAllocationsGetResourceAllocationsByProjectGuid(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling resourceAllocationsGetResourceAllocationsByProjectGuid");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'changedSince': opts['changedSince'],
        'userLicenseTypes': this.apiClient.buildCollectionParam(opts['userLicenseTypes'], 'multi'),
        'phaseGuid': opts['phaseGuid'],
        'userGuid': opts['userGuid'],
        'projectBusinessUnitGuid': opts['projectBusinessUnitGuid'],
        'userBusinessUnitGuid': opts['userBusinessUnitGuid'],
        'projectManagerUserGuid': opts['projectManagerUserGuid'],
        'userTagGuid': opts['userTagGuid'],
        'useSalesProbability': opts['useSalesProbability'],
        'projectStatusTypeGuid': opts['projectStatusTypeGuid'],
        'projectTagGuid': opts['projectTagGuid'],
        'superiorUserGuid': opts['superiorUserGuid'],
        'salesStatusTypeGuid': opts['salesStatusTypeGuid'],
        'resourceAllocationGuid': opts['resourceAllocationGuid'],
        'salesProgress': opts['salesProgress'],
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceAllocationOutputModel;
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/resourceallocations/allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourceAllocationsGetResourceAllocationsByUserGuid operation.
     * @callback module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationsByUserGuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAllocationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resource allocations for a user with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
     * @param {String} userGuid 
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
     * @param {Date} [endDate] Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days
     * @param {Date} [changedSince] Optional: Get resource allocations that have been added or changed after this date time (greater or equal).
     * @param {Array.<module:model/LicenseUserType>} [userLicenseTypes] 
     * @param {String} [phaseGuid] 
     * @param {String} [projectGuid] 
     * @param {String} [projectBusinessUnitGuid] 
     * @param {String} [userBusinessUnitGuid] 
     * @param {String} [projectManagerUserGuid] 
     * @param {String} [userTagGuid] 
     * @param {Boolean} [useSalesProbability = true)] 
     * @param {String} [projectStatusTypeGuid] 
     * @param {String} [projectTagGuid] 
     * @param {String} [superiorUserGuid] 
     * @param {String} [salesStatusTypeGuid] 
     * @param {String} [resourceAllocationGuid] 
     * @param {module:model/SalesProgress} [salesProgress] 
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {module:api/ResourceallocationsReadApi~resourceAllocationsGetResourceAllocationsByUserGuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAllocationOutputModel}
     */
    resourceAllocationsGetResourceAllocationsByUserGuid(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling resourceAllocationsGetResourceAllocationsByUserGuid");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'changedSince': opts['changedSince'],
        'userLicenseTypes': this.apiClient.buildCollectionParam(opts['userLicenseTypes'], 'multi'),
        'phaseGuid': opts['phaseGuid'],
        'projectGuid': opts['projectGuid'],
        'projectBusinessUnitGuid': opts['projectBusinessUnitGuid'],
        'userBusinessUnitGuid': opts['userBusinessUnitGuid'],
        'projectManagerUserGuid': opts['projectManagerUserGuid'],
        'userTagGuid': opts['userTagGuid'],
        'useSalesProbability': opts['useSalesProbability'],
        'projectStatusTypeGuid': opts['projectStatusTypeGuid'],
        'projectTagGuid': opts['projectTagGuid'],
        'superiorUserGuid': opts['superiorUserGuid'],
        'salesStatusTypeGuid': opts['salesStatusTypeGuid'],
        'resourceAllocationGuid': opts['resourceAllocationGuid'],
        'salesProgress': opts['salesProgress'],
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceAllocationOutputModel;
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/resourceallocations/allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourceAllocationsPostResourceAllocations operation.
     * @callback module:api/ResourceallocationsReadApi~resourceAllocationsPostResourceAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourceAllocationOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resource allocations (its POST because of being able to accommodate more filters)
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Date} [changedSince] Optional: Get resource allocations that have been added or changed after this date time (greater or equal).
     * @param {module:model/ResourceAllocationCriteriaModel} [resourceAllocationCriteriaModel] resourceAllocationCriteriaModel
     * @param {module:api/ResourceallocationsReadApi~resourceAllocationsPostResourceAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourceAllocationOutputModel>}
     */
    resourceAllocationsPostResourceAllocations(opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceAllocationCriteriaModel'];

      let pathParams = {
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ResourceAllocationOutputModel];
      return this.apiClient.callApi(
        '/v1/resourceallocations/allocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAllocationsGetRoleAllocation operation.
     * @callback module:api/ResourceallocationsReadApi~roleAllocationsGetRoleAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAllocationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role allocation by GUID.
     * @param {String} guid ID used to get the role allocation.
     * @param {module:api/ResourceallocationsReadApi~roleAllocationsGetRoleAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAllocationOutputModel}
     */
    roleAllocationsGetRoleAllocation(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling roleAllocationsGetRoleAllocation");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleAllocationOutputModel;
      return this.apiClient.callApi(
        '/v1/roleallocations/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAllocationsGetRoleAllocations operation.
     * @callback module:api/ResourceallocationsReadApi~roleAllocationsGetRoleAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleAllocationOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role allocations.
     * @param {Date} startDate Starting date from which to get the role allocations. If end date is not specified on the role allocation then it will be compared with phase end date.
     * @param {Object} opts Optional parameters
     * @param {Date} [endDate] Optional: Ending date to which to get the role allocations. If start date is not specified on the role allocation then it will be compared with phase start date.
     * @param {String} [pageToken] Optional: Page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {Boolean} [useSalesProbability = true)] Optional: Calculates the hours based on sales probability set for the project. Default is true.
     * @param {Array.<String>} [roleGuids] Optional: Role IDs.
     * @param {Array.<String>} [phaseGuids] Optional: Phase IDs.
     * @param {Array.<String>} [projectGuids] Optional: Project IDs.
     * @param {module:api/ResourceallocationsReadApi~roleAllocationsGetRoleAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleAllocationOutputModel>}
     */
    roleAllocationsGetRoleAllocations(startDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling roleAllocationsGetRoleAllocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'startDate': startDate,
        'endDate': opts['endDate'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'useSalesProbability': opts['useSalesProbability'],
        'roleGuids': this.apiClient.buildCollectionParam(opts['roleGuids'], 'multi'),
        'phaseGuids': this.apiClient.buildCollectionParam(opts['phaseGuids'], 'multi'),
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleAllocationOutputModel];
      return this.apiClient.callApi(
        '/v1/roleallocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
