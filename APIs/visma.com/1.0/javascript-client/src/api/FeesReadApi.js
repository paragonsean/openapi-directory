/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BillablePeriod from '../model/BillablePeriod';
import DeletedProjectFeeModel from '../model/DeletedProjectFeeModel';
import ExceptionModel from '../model/ExceptionModel';
import FlatRateOutputModel from '../model/FlatRateOutputModel';
import ProductType from '../model/ProductType';
import ProjectFeeOutputModel from '../model/ProjectFeeOutputModel';
import ProjectRecurringFeeRuleOutputModel from '../model/ProjectRecurringFeeRuleOutputModel';

/**
* FeesRead service.
* @module api/FeesReadApi
* @version 1.0
*/
export default class FeesReadApi {

    /**
    * Constructs a new FeesReadApi. 
    * @alias module:api/FeesReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the flatRatesGetAllFlatRates operation.
     * @callback module:api/FeesReadApi~flatRatesGetAllFlatRatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlatRateOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all flat rates
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: Page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get flat rates that have been added or changed after this date time (greater or equal).
     * @param {String} [invoiceGuid] Optional: Get flat rates by invoice guid. Default all.
     * @param {module:api/FeesReadApi~flatRatesGetAllFlatRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlatRateOutputModel>}
     */
    flatRatesGetAllFlatRates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince'],
        'invoiceGuid': opts['invoiceGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FlatRateOutputModel];
      return this.apiClient.callApi(
        '/v1/flatrates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flatRatesGetFlatrate operation.
     * @callback module:api/FeesReadApi~flatRatesGetFlatrateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlatRateOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get flat rate.
     * @param {String} guid Id of the flat rate.
     * @param {module:api/FeesReadApi~flatRatesGetFlatrateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlatRateOutputModel>}
     */
    flatRatesGetFlatrate(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling flatRatesGetFlatrate");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FlatRateOutputModel];
      return this.apiClient.callApi(
        '/v1/flatrates/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flatRatesGetFlatratesForProject operation.
     * @callback module:api/FeesReadApi~flatRatesGetFlatratesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlatRateOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project's flat rates.
     * @param {String} projectGuid Id of the project.
     * @param {module:api/FeesReadApi~flatRatesGetFlatratesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlatRateOutputModel>}
     */
    flatRatesGetFlatratesForProject(projectGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling flatRatesGetFlatratesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FlatRateOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/flatrates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesGetDeletedProjectFees operation.
     * @callback module:api/FeesReadApi~projectFeesGetDeletedProjectFeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeletedProjectFeeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the deleted project fees.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] 
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Array.<String>} [projectGuids] Optional: ID of the project for the deleted project fees to be fetched. If not provided, returns for all projects. Default all.
     * @param {Array.<String>} [userGuids] Optional: ID of the user. If not provided, returns for all users. Default all.
     * @param {Date} [deletedSince] Optional: Get project fees that have been deleted after this date time (greater or equal).
     * @param {module:api/FeesReadApi~projectFeesGetDeletedProjectFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeletedProjectFeeModel>}
     */
    projectFeesGetDeletedProjectFees(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi'),
        'userGuids': this.apiClient.buildCollectionParam(opts['userGuids'], 'multi'),
        'deletedSince': opts['deletedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeletedProjectFeeModel];
      return this.apiClient.callApi(
        '/v1/deletedprojectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesGetProjectFee operation.
     * @callback module:api/FeesReadApi~projectFeesGetProjectFeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFeeOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projectFee by ID.
     * @param {String} guid Id used to get the projectFee.
     * @param {module:api/FeesReadApi~projectFeesGetProjectFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFeeOutputModel}
     */
    projectFeesGetProjectFee(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectFeesGetProjectFee");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectFeeOutputModel;
      return this.apiClient.callApi(
        '/v1/projectfees/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesGetProjectFeesByToken operation.
     * @callback module:api/FeesReadApi~projectFeesGetProjectFeesByTokenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the project fees.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: Number of rows to fetch
     * @param {Date} [changedSince] Optional: Get project fees that have been added or changed after this date time (greater or equal).
     * @param {module:api/FeesReadApi~projectFeesGetProjectFeesByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFeeOutputModel>}
     */
    projectFeesGetProjectFeesByToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/projectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesGetProjectFeesForProject operation.
     * @callback module:api/FeesReadApi~projectFeesGetProjectFeesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the project fees for a project
     * @param {String} projectGuid ID of the project.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {module:model/ProductType} [productType] Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting
     * @param {Boolean} [isBillable] Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.
     * @param {Boolean} [isBilled] Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null.
     * @param {Date} [invoiceableDate] Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null.
     * @param {Boolean} [includeRecurringRules = false)] Optional: Also fetches recurring rules along with project fees. Default is false.
     * @param {Boolean} [isBillablePeriodInFuture] Optional. Filter the project fees. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.
     * @param {module:api/FeesReadApi~projectFeesGetProjectFeesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFeeOutputModel>}
     */
    projectFeesGetProjectFeesForProject(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectFeesGetProjectFeesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'productType': opts['productType'],
        'isBillable': opts['isBillable'],
        'isBilled': opts['isBilled'],
        'invoiceableDate': opts['invoiceableDate'],
        'includeRecurringRules': opts['includeRecurringRules'],
        'isBillablePeriodInFuture': opts['isBillablePeriodInFuture']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFeesGetUserProjectFees operation.
     * @callback module:api/FeesReadApi~projectFeesGetUserProjectFeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFeeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the projectFees for a user
     * @param {String} userGuid ID of the user.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: Number of rows to fetch.
     * @param {module:model/ProductType} [productType] Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting.
     * @param {Boolean} [isBillable] Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.
     * @param {Boolean} [isBilled] Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null.
     * @param {Date} [invoiceableDate] Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null.
     * @param {Boolean} [hasPhase] Optional: Filter the project fees. If true/false, only the ones are connected/not-connected to a phase are returned. If null, all are returned. Default is null.
     * @param {Date} [startDate] Start date search criteria. Only get project fees that have event date from this date.
     * @param {Date} [endDate] End date search criteria. Only get project fees that have event date until this date.
     * @param {module:api/FeesReadApi~projectFeesGetUserProjectFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFeeOutputModel>}
     */
    projectFeesGetUserProjectFees(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling projectFeesGetUserProjectFees");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'productType': opts['productType'],
        'isBillable': opts['isBillable'],
        'isBilled': opts['isBilled'],
        'invoiceableDate': opts['invoiceableDate'],
        'hasPhase': opts['hasPhase'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectFeeOutputModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/projectfees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRecurringFeeRulesGetProjectRecurringFeeRule operation.
     * @callback module:api/FeesReadApi~projectRecurringFeeRulesGetProjectRecurringFeeRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRecurringFeeRuleOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project's RecurringFeeRule by ID.
     * @param {String} guid Id used to get the ProjectRecurringFeeRule.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeInactive = false)] Indicates the rule should be returned even if it is not active. Default is false.
     * @param {module:api/FeesReadApi~projectRecurringFeeRulesGetProjectRecurringFeeRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRecurringFeeRuleOutputModel}
     */
    projectRecurringFeeRulesGetProjectRecurringFeeRule(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectRecurringFeeRulesGetProjectRecurringFeeRule");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'includeInactive': opts['includeInactive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectRecurringFeeRuleOutputModel;
      return this.apiClient.callApi(
        '/v1/projectrecurringfeerules/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRecurringFeeRulesGetProjectRecurringFeeRules operation.
     * @callback module:api/FeesReadApi~projectRecurringFeeRulesGetProjectRecurringFeeRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectRecurringFeeRuleOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the recurring fee rules.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:model/ProductType} [productType] projectRecurringFeeRule's product type. if given, it filters the projectRecurringFeeRules by the given type.
     * @param {Date} [changedSince] Optional: Get recurring fee rules that have been added or changed after this date time (greater or equal).
     * @param {module:api/FeesReadApi~projectRecurringFeeRulesGetProjectRecurringFeeRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectRecurringFeeRuleOutputModel>}
     */
    projectRecurringFeeRulesGetProjectRecurringFeeRules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'productType': opts['productType'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectRecurringFeeRuleOutputModel];
      return this.apiClient.callApi(
        '/v1/projectrecurringfeerules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject operation.
     * @callback module:api/FeesReadApi~projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectRecurringFeeRuleOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the Recurring Fee Rules for a project
     * @param {String} projectGuid ID of the project to get the recurring fee rules.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductType} [productType] projectRecurringFeeRule's product type. if given, it filters the projectRecurringFeeRules by the given type.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [isBillablePeriodInFuture] Optional. Filter the project recurring fee rules. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.
     * @param {module:model/BillablePeriod} [billableTimePeriod] the time period for any uninvoiced recurring rules.
     * @param {module:api/FeesReadApi~projectRecurringFeeRulesGetProjectRecurringFeeRulesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectRecurringFeeRuleOutputModel>}
     */
    projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'productType': opts['productType'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'isBillablePeriodInFuture': opts['isBillablePeriodInFuture'],
        'billableTimePeriod': opts['billableTimePeriod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectRecurringFeeRuleOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectrecurringfeerules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
