/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletedPhaseMemberOutputModel from '../model/DeletedPhaseMemberOutputModel';
import ExceptionModel from '../model/ExceptionModel';
import ExpensesClass from '../model/ExpensesClass';
import KeyValuePairOfStringAndSortDirection from '../model/KeyValuePairOfStringAndSortDirection';
import OvertimePriceModel from '../model/OvertimePriceModel';
import PhaseMemberOutputModel from '../model/PhaseMemberOutputModel';
import PhaseModelWithHierarchyInfo from '../model/PhaseModelWithHierarchyInfo';
import PhaseOutputModel from '../model/PhaseOutputModel';
import ProductForProjectOutputModel from '../model/ProductForProjectOutputModel';
import ProductPriceOutputModel from '../model/ProductPriceOutputModel';
import ProductType from '../model/ProductType';
import ProjectBillingCustomerModel from '../model/ProjectBillingCustomerModel';
import ProjectCustomValueModel from '../model/ProjectCustomValueModel';
import ProjectForecastOutputModel from '../model/ProjectForecastOutputModel';
import ProjectInvoiceSettingsOutputModel from '../model/ProjectInvoiceSettingsOutputModel';
import ProjectKeywordModel from '../model/ProjectKeywordModel';
import ProjectMemberCostExceptionOutputModel from '../model/ProjectMemberCostExceptionOutputModel';
import ProjectOutputModel from '../model/ProjectOutputModel';
import ProjectProductOutputModel from '../model/ProjectProductOutputModel';
import ProjectSalesNoteOutputModel from '../model/ProjectSalesNoteOutputModel';
import ProjectWorkHourPriceOutputModel from '../model/ProjectWorkHourPriceOutputModel';
import ProjectWorkTypeModel from '../model/ProjectWorkTypeModel';
import ProposalFeeRowOutputModel from '../model/ProposalFeeRowOutputModel';
import ProposalOutputModel from '../model/ProposalOutputModel';
import ProposalSettingsOutputModel from '../model/ProposalSettingsOutputModel';
import ProposalSubtotalOutputModel from '../model/ProposalSubtotalOutputModel';
import ProposalWorkhourRowOutputModel from '../model/ProposalWorkhourRowOutputModel';
import SalesNoteOutputModel from '../model/SalesNoteOutputModel';
import SalesStatusHistoryOutputModel from '../model/SalesStatusHistoryOutputModel';
import TeamProductivityOutputModel from '../model/TeamProductivityOutputModel';
import TravelExpenseTypeOutputModel from '../model/TravelExpenseTypeOutputModel';
import TravelPriceOutputModel from '../model/TravelPriceOutputModel';
import WorkTypeOutputModel from '../model/WorkTypeOutputModel';
import WorktypeForProjectOutputModel from '../model/WorktypeForProjectOutputModel';

/**
* ProjectsRead service.
* @module api/ProjectsReadApi
* @version 1.0
*/
export default class ProjectsReadApi {

    /**
    * Constructs a new ProjectsReadApi. 
    * @alias module:api/ProjectsReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keywordsGetProjectKeywords operation.
     * @callback module:api/ProjectsReadApi~keywordsGetProjectKeywordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectKeywordModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the keywords for project.
     * @param {String} projectGuid ID of the project for which keywords are requested.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Keyword&sortings[0].value=Desc\".
     * @param {module:api/ProjectsReadApi~keywordsGetProjectKeywordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectKeywordModel>}
     */
    keywordsGetProjectKeywords(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling keywordsGetProjectKeywords");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'active': opts['active'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectKeywordModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/keywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overtimePricesGetOvertimePricesForProject operation.
     * @callback module:api/ProjectsReadApi~overtimePricesGetOvertimePricesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OvertimePriceModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the overtimePrices for a project.
     * @param {String} projectGuid 
     * @param {module:api/ProjectsReadApi~overtimePricesGetOvertimePricesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OvertimePriceModel>}
     */
    overtimePricesGetOvertimePricesForProject(projectGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling overtimePricesGetOvertimePricesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OvertimePriceModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/overtimeprices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseMembersGetAllDeletedPhaseMembers operation.
     * @callback module:api/ProjectsReadApi~phaseMembersGetAllDeletedPhaseMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeletedPhaseMemberOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all deleted phase members
     * Use root phase to get project members.
     * @param {Object} opts Optional parameters
     * @param {Date} [deletedSince] Optional: Get phase members that have been added or changed after this date time (greater or equal).
     * @param {String} [pageToken] Optional: Page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {Boolean} [isUserActive] Optional: Is the user active. Default nothing = all.
     * @param {module:api/ProjectsReadApi~phaseMembersGetAllDeletedPhaseMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeletedPhaseMemberOutputModel>}
     */
    phaseMembersGetAllDeletedPhaseMembers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'deletedSince': opts['deletedSince'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isUserActive': opts['isUserActive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeletedPhaseMemberOutputModel];
      return this.apiClient.callApi(
        '/v1/deletedphasemembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseMembersGetAllPhaseMembers operation.
     * @callback module:api/ProjectsReadApi~phaseMembersGetAllPhaseMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseMemberOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all active phase members
     * Use root phase to get project members.
     * @param {Object} opts Optional parameters
     * @param {Date} [changedSince] Optional: Get phase members that have been added or changed after this date time (greater or equal).
     * @param {String} [pageToken] Optional: Page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {Boolean} [isUserActive] Optional: Is the user active. Default nothing = all.
     * @param {module:api/ProjectsReadApi~phaseMembersGetAllPhaseMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseMemberOutputModel>}
     */
    phaseMembersGetAllPhaseMembers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'changedSince': opts['changedSince'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isUserActive': opts['isUserActive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PhaseMemberOutputModel];
      return this.apiClient.callApi(
        '/v1/phasemembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phaseMembersGetPhaseMembers operation.
     * @callback module:api/ProjectsReadApi~phaseMembersGetPhaseMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseMemberOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get phase members
     * Use root phase to get project members.
     * @param {String} phaseGuid GUID of the phase.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: Page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {Boolean} [isActive] Optional: Is the member active on the phase. Filters only root phase members. Default nothing = all.
     * @param {Boolean} [isUserActive] Optional: Is the user active. Default nothing = all.
     * @param {module:api/ProjectsReadApi~phaseMembersGetPhaseMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseMemberOutputModel>}
     */
    phaseMembersGetPhaseMembers(phaseGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phaseGuid' is set
      if (phaseGuid === undefined || phaseGuid === null) {
        throw new Error("Missing the required parameter 'phaseGuid' when calling phaseMembersGetPhaseMembers");
      }

      let pathParams = {
        'phaseGuid': phaseGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isActive': opts['isActive'],
        'isUserActive': opts['isUserActive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PhaseMemberOutputModel];
      return this.apiClient.callApi(
        '/v1/phases/{phaseGuid}/phasemembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesGetPhase operation.
     * @callback module:api/ProjectsReadApi~phasesGetPhaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhaseOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get phase by ID
     * @param {String} guid Id used to get the phase.
     * @param {module:api/ProjectsReadApi~phasesGetPhaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhaseOutputModel}
     */
    phasesGetPhase(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling phasesGetPhase");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PhaseOutputModel;
      return this.apiClient.callApi(
        '/v1/phases/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesGetPhases operation.
     * @callback module:api/ProjectsReadApi~phasesGetPhasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the phases.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get phases that have been added or changed after this date time (greater or equal).
     * @param {String} [code = '')] Optional: Code of the phase.
     * @param {Array.<String>} [projectGuids] Optional: List of project ids.
     * @param {module:api/ProjectsReadApi~phasesGetPhasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseOutputModel>}
     */
    phasesGetPhases(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince'],
        'code': opts['code'],
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PhaseOutputModel];
      return this.apiClient.callApi(
        '/v1/phases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesGetProjectPhases operation.
     * @callback module:api/ProjectsReadApi~phasesGetProjectPhasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseModelWithHierarchyInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project's phases as flat list
     * @param {String} guid Id of the project.
     * @param {module:api/ProjectsReadApi~phasesGetProjectPhasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseModelWithHierarchyInfo>}
     */
    phasesGetProjectPhases(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling phasesGetProjectPhases");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PhaseModelWithHierarchyInfo];
      return this.apiClient.callApi(
        '/v1/projects/{guid}/phaseswithhierarchy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesGetRootPhases operation.
     * @callback module:api/ProjectsReadApi~phasesGetRootPhasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhaseOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of root phases with information about hierarchy.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Array.<String>} [customerGuids] 
     * @param {Array.<String>} [projectGuids] 
     * @param {Array.<String>} [projectKeywordGuids] 
     * @param {Array.<String>} [projectStatusTypeGuids] 
     * @param {Array.<String>} [salesPersonGuids] 
     * @param {Array.<String>} [projectOwnerGuids] 
     * @param {Array.<String>} [businessUnitGuids] 
     * @param {Array.<String>} [customerOwnerGuids] 
     * @param {Array.<String>} [salesStatusTypeGuids] 
     * @param {Boolean} [openProjects] 
     * @param {Array.<String>} [projectMemberUserGuids] 
     * @param {module:api/ProjectsReadApi~phasesGetRootPhasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhaseOutputModel>}
     */
    phasesGetRootPhases(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'customerGuids': this.apiClient.buildCollectionParam(opts['customerGuids'], 'multi'),
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi'),
        'projectKeywordGuids': this.apiClient.buildCollectionParam(opts['projectKeywordGuids'], 'multi'),
        'projectStatusTypeGuids': this.apiClient.buildCollectionParam(opts['projectStatusTypeGuids'], 'multi'),
        'salesPersonGuids': this.apiClient.buildCollectionParam(opts['salesPersonGuids'], 'multi'),
        'projectOwnerGuids': this.apiClient.buildCollectionParam(opts['projectOwnerGuids'], 'multi'),
        'businessUnitGuids': this.apiClient.buildCollectionParam(opts['businessUnitGuids'], 'multi'),
        'customerOwnerGuids': this.apiClient.buildCollectionParam(opts['customerOwnerGuids'], 'multi'),
        'salesStatusTypeGuids': this.apiClient.buildCollectionParam(opts['salesStatusTypeGuids'], 'multi'),
        'openProjects': opts['openProjects'],
        'projectMemberUserGuids': this.apiClient.buildCollectionParam(opts['projectMemberUserGuids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PhaseOutputModel];
      return this.apiClient.callApi(
        '/v1/rootphaseswithhierarchy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPricesGetProductPricesForProject operation.
     * @callback module:api/ProjectsReadApi~productPricesGetProductPricesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductPriceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the productPrices for a project.
     * @param {String} projectGuid ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fromPricelistOnly = false)] If true return only prices from the price list, if false also returns prices from the products. Default is false.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from Product name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate the number of total rows. Default false = total row count is returned as zero.
     * @param {Boolean} [isAvailable] Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all.
     * @param {String} [productCode = '')] Optional: Absolute search for products with specified product code.
     * @param {Array.<String>} [productGuids] Optional: Search all product price(s) by products guid(s).
     * @param {Boolean} [isVolumePriced] Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products.
     * @param {Array.<String>} [productCategoryGuids] Optional: Search product prices according to product category / categories by product category guid(s).
     * @param {Array.<module:model/ProductType>} [productTypes] Optional: Search product prices according to product type / types.
     * @param {module:api/ProjectsReadApi~productPricesGetProductPricesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductPriceOutputModel>}
     */
    productPricesGetProductPricesForProject(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling productPricesGetProductPricesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'fromPricelistOnly': opts['fromPricelistOnly'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount'],
        'isAvailable': opts['isAvailable'],
        'productCode': opts['productCode'],
        'productGuids': this.apiClient.buildCollectionParam(opts['productGuids'], 'multi'),
        'isVolumePriced': opts['isVolumePriced'],
        'productCategoryGuids': this.apiClient.buildCollectionParam(opts['productCategoryGuids'], 'multi'),
        'productTypes': this.apiClient.buildCollectionParam(opts['productTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductPriceOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/productprices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsGetSearchedProducts operation.
     * @callback module:api/ProjectsReadApi~productsGetSearchedProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductForProjectOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available products for the given project where price information comes from projects price list
     * @param {String} projectGuid Id of the project
     * @param {Object} opts Optional parameters
     * @param {Number} [rowCount] Optional: Number of rows to fetch
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {module:model/ProductType} [type] Product type. if given, it filters the products by the given type
     * @param {Boolean} [includeProductsFromRegistry = false)] Optional: If true returns all the products from registry with project specific prices. If false returns only products specified for the project with project specific prices. Default false.
     * @param {module:api/ProjectsReadApi~productsGetSearchedProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductForProjectOutputModel>}
     */
    productsGetSearchedProducts(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling productsGetSearchedProducts");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'rowCount': opts['rowCount'],
        'pageToken': opts['pageToken'],
        'type': opts['type'],
        'includeProductsFromRegistry': opts['includeProductsFromRegistry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductForProjectOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/productsforproject', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectBillingCustomersGetWorkHourPricesForProject operation.
     * @callback module:api/ProjectsReadApi~projectBillingCustomersGetWorkHourPricesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectBillingCustomerModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the billing customers for a project
     * @param {String} projectGuid 
     * @param {module:api/ProjectsReadApi~projectBillingCustomersGetWorkHourPricesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectBillingCustomerModel>}
     */
    projectBillingCustomersGetWorkHourPricesForProject(projectGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectBillingCustomersGetWorkHourPricesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectBillingCustomerModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectbillingcustomers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomValuesGetProjectCustomValue operation.
     * @callback module:api/ProjectsReadApi~projectCustomValuesGetProjectCustomValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCustomValueModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project custom value by ID.
     * @param {String} guid Id used to get the project custom value.
     * @param {module:api/ProjectsReadApi~projectCustomValuesGetProjectCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCustomValueModel}
     */
    projectCustomValuesGetProjectCustomValue(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectCustomValuesGetProjectCustomValue");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectCustomValueModel;
      return this.apiClient.callApi(
        '/v1/projects/customvalues/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCustomValuesGetProjectCustomValues operation.
     * @callback module:api/ProjectsReadApi~projectCustomValuesGetProjectCustomValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCustomValueModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the project custom values.
     * @param {String} projectGuid ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [active] Optional: Get only values of active or inactive project custom properties.
     * @param {Array.<String>} [target] List of target for which to get the values.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate total number of rows.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\".
     * @param {module:api/ProjectsReadApi~projectCustomValuesGetProjectCustomValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCustomValueModel>}
     */
    projectCustomValuesGetProjectCustomValues(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectCustomValuesGetProjectCustomValues");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'active': opts['active'],
        'target': this.apiClient.buildCollectionParam(opts['target'], 'multi'),
        'calculateRowCount': opts['calculateRowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectCustomValueModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/customvalues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectForecastsGetForecast operation.
     * @callback module:api/ProjectsReadApi~projectForecastsGetForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectForecastOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project forecast by ID
     * @param {String} guid GUID used to get the project forecast.
     * @param {module:api/ProjectsReadApi~projectForecastsGetForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectForecastOutputModel}
     */
    projectForecastsGetForecast(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectForecastsGetForecast");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectForecastOutputModel;
      return this.apiClient.callApi(
        '/v1/projectforecasts/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectForecastsGetForecasts operation.
     * @callback module:api/ProjectsReadApi~projectForecastsGetForecastsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectForecastOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the project forecasts
     * @param {String} projectGuid project for the forecasts
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Start date of the date range for the forecasts
     * @param {Date} [endDate] End date of the date range for the forecasts
     * @param {module:api/ProjectsReadApi~projectForecastsGetForecastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectForecastOutputModel>}
     */
    projectForecastsGetForecasts(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectForecastsGetForecasts");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectForecastOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectforecasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsGetProjectInvoiceSetting_0 operation.
     * @callback module:api/ProjectsReadApi~projectInvoiceSettingsGetProjectInvoiceSetting_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectInvoiceSettingsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project invoice settings by ID.
     * @param {String} guid ID of the project invoice settings.
     * @param {module:api/ProjectsReadApi~projectInvoiceSettingsGetProjectInvoiceSetting_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectInvoiceSettingsOutputModel}
     */
    projectInvoiceSettingsGetProjectInvoiceSetting_0(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectInvoiceSettingsGetProjectInvoiceSetting_0");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectInvoiceSettingsOutputModel;
      return this.apiClient.callApi(
        '/v1/projectinvoicesettings/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectInvoiceSettingsGetProjectInvoiceSettings_0 operation.
     * @callback module:api/ProjectsReadApi~projectInvoiceSettingsGetProjectInvoiceSettings_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectInvoiceSettingsOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project invoice settings by project ID.
     * @param {String} projectGuid ID of the project.
     * @param {module:api/ProjectsReadApi~projectInvoiceSettingsGetProjectInvoiceSettings_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectInvoiceSettingsOutputModel>}
     */
    projectInvoiceSettingsGetProjectInvoiceSettings_0(projectGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectInvoiceSettingsGetProjectInvoiceSettings_0");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectInvoiceSettingsOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectinvoicesettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject operation.
     * @callback module:api/ProjectsReadApi~projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectMemberCostExceptionOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all cost exceptions of project members for a project.
     * @param {String} projectGuid Guid of the project.
     * @param {Object} opts Optional parameters
     * @param {String} [userGuid] Optional: Guid of the user.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {module:api/ProjectsReadApi~projectMemberCostExceptionsGetProjectMemberCostExceptionsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectMemberCostExceptionOutputModel>}
     */
    projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'userGuid': opts['userGuid'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectMemberCostExceptionOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectmembercostexceptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProductsGetProjectProducts operation.
     * @callback module:api/ProjectsReadApi~projectProductsGetProjectProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectProductOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project products
     * This is the same as organization's list of products, unless the project has some specific products and UseProductsFromSetting in project model is set to false.
     * @param {String} projectGuid GUID of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeProductsFromRegistry = false)] Optional: Includes products available from product registry
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {Boolean} [active] Fetch only active
     * @param {module:api/ProjectsReadApi~projectProductsGetProjectProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectProductOutputModel>}
     */
    projectProductsGetProjectProducts(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectProductsGetProjectProducts");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'includeProductsFromRegistry': opts['includeProductsFromRegistry'],
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectProductOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectproducts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkHourPricesGetProjectWorkHourPrice operation.
     * @callback module:api/ProjectsReadApi~projectWorkHourPricesGetProjectWorkHourPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectWorkHourPriceOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project work hour price by ID
     * @param {String} guid Id used to get the work hour price.
     * @param {module:api/ProjectsReadApi~projectWorkHourPricesGetProjectWorkHourPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectWorkHourPriceOutputModel}
     */
    projectWorkHourPricesGetProjectWorkHourPrice(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectWorkHourPricesGetProjectWorkHourPrice");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectWorkHourPriceOutputModel;
      return this.apiClient.callApi(
        '/v1/projectworkhourprices/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkHourPricesGetWorkHourPricesForProject operation.
     * @callback module:api/ProjectsReadApi~projectWorkHourPricesGetWorkHourPricesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectWorkHourPriceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the work hour prices for a project
     * @param {String} projectGuid Guid of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fromPricelistOnly = false)] If true return only prices from the price list, if false also returns prices from the products. Default is false.
     * @param {Boolean} [isAvailable] Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all.
     * @param {Date} [changedSince] Optional: Get project work hour prices that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~projectWorkHourPricesGetWorkHourPricesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectWorkHourPriceOutputModel>}
     */
    projectWorkHourPricesGetWorkHourPricesForProject(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectWorkHourPricesGetWorkHourPricesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'fromPricelistOnly': opts['fromPricelistOnly'],
        'isAvailable': opts['isAvailable'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectWorkHourPriceOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectworkhourprices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWorkTypesGetProjectWorktypes operation.
     * @callback module:api/ProjectsReadApi~projectWorkTypesGetProjectWorktypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectWorkTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project work types.
     * This is the same as organization's list of work types, unless the project has some specific work types and \"UseWorktypesFromSetting\" in project model is set to false.
     * @param {String} projectGuid GUID of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeWorktypesFromRegistry = false)] Include work types also from registry. If false, returns only project specific work types. Default false.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [active] If not given, return all work types, if given as true return only active work types, if given as false returns only inactive work types.
     * @param {String} [textToSearch = '')] Optional: Text to search from work type name.
     * @param {Date} [changedSince] Optional: Get project work types that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~projectWorkTypesGetProjectWorktypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectWorkTypeModel>}
     */
    projectWorkTypesGetProjectWorktypes(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling projectWorkTypesGetProjectWorktypes");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'includeWorktypesFromRegistry': opts['includeWorktypesFromRegistry'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'active': opts['active'],
        'textToSearch': opts['textToSearch'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectWorkTypeModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectworktypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetCustomerProjects operation.
     * @callback module:api/ProjectsReadApi~projectsGetCustomerProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer's projects
     * @param {String} customerGuid Id of the customer.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] 
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Boolean} [isBillable] Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing = all.
     * @param {Array.<String>} [currencyGuids] 
     * @param {Array.<String>} [projectGuids] 
     * @param {Array.<String>} [projectKeywordGuids] 
     * @param {Array.<String>} [projectStatusTypeGuids] 
     * @param {Array.<String>} [salesPersonGuids] 
     * @param {Array.<String>} [projectOwnerGuids] 
     * @param {Array.<String>} [businessUnitGuids] 
     * @param {Number} [minimumBillableAmount] 
     * @param {Array.<String>} [customerOwnerGuids] 
     * @param {Date} [invoiceableDate] 
     * @param {Array.<String>} [marketSegmentationGuids] 
     * @param {Array.<String>} [salesStatusTypeGuids] 
     * @param {Boolean} [isClosed] 
     * @param {Boolean} [hasRecurringFees] 
     * @param {Array.<String>} [companyCurrencyGuids] 
     * @param {Array.<String>} [projectMemberUserGuids] 
     * @param {Array.<Number>} [numbers] 
     * @param {module:api/ProjectsReadApi~projectsGetCustomerProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectOutputModel>}
     */
    projectsGetCustomerProjects(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling projectsGetCustomerProjects");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'isBillable': opts['isBillable'],
        'currencyGuids': this.apiClient.buildCollectionParam(opts['currencyGuids'], 'multi'),
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi'),
        'projectKeywordGuids': this.apiClient.buildCollectionParam(opts['projectKeywordGuids'], 'multi'),
        'projectStatusTypeGuids': this.apiClient.buildCollectionParam(opts['projectStatusTypeGuids'], 'multi'),
        'salesPersonGuids': this.apiClient.buildCollectionParam(opts['salesPersonGuids'], 'multi'),
        'projectOwnerGuids': this.apiClient.buildCollectionParam(opts['projectOwnerGuids'], 'multi'),
        'businessUnitGuids': this.apiClient.buildCollectionParam(opts['businessUnitGuids'], 'multi'),
        'minimumBillableAmount': opts['minimumBillableAmount'],
        'customerOwnerGuids': this.apiClient.buildCollectionParam(opts['customerOwnerGuids'], 'multi'),
        'invoiceableDate': opts['invoiceableDate'],
        'marketSegmentationGuids': this.apiClient.buildCollectionParam(opts['marketSegmentationGuids'], 'multi'),
        'salesStatusTypeGuids': this.apiClient.buildCollectionParam(opts['salesStatusTypeGuids'], 'multi'),
        'isClosed': opts['isClosed'],
        'hasRecurringFees': opts['hasRecurringFees'],
        'companyCurrencyGuids': this.apiClient.buildCollectionParam(opts['companyCurrencyGuids'], 'multi'),
        'projectMemberUserGuids': this.apiClient.buildCollectionParam(opts['projectMemberUserGuids'], 'multi'),
        'numbers': this.apiClient.buildCollectionParam(opts['numbers'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectOutputModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetProject operation.
     * @callback module:api/ProjectsReadApi~projectsGetProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project by ID
     * @param {String} guid Id used to get the project.
     * @param {module:api/ProjectsReadApi~projectsGetProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectOutputModel}
     */
    projectsGetProject(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling projectsGetProject");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectOutputModel;
      return this.apiClient.callApi(
        '/v1/projects/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetProjects operation.
     * @callback module:api/ProjectsReadApi~projectsGetProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the projects
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] 
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [currencyGuid] Optional: ID of project currency.
     * @param {Date} [changedSince] Optional: Get projects that have been added or changed after this date time (greater or equal).
     * @param {Boolean} [isBillable] Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing = all.
     * @param {Array.<String>} [customerGuids] 
     * @param {Array.<String>} [projectGuids] 
     * @param {Array.<String>} [projectKeywordGuids] 
     * @param {Array.<String>} [projectStatusTypeGuids] 
     * @param {Array.<String>} [salesPersonGuids] 
     * @param {Array.<String>} [projectOwnerGuids] 
     * @param {Array.<String>} [businessUnitGuids] 
     * @param {Number} [minimumBillableAmount] 
     * @param {Array.<String>} [customerOwnerGuids] 
     * @param {Date} [invoiceableDate] 
     * @param {Array.<String>} [marketSegmentationGuids] 
     * @param {Array.<String>} [salesStatusTypeGuids] 
     * @param {Boolean} [isClosed] 
     * @param {Boolean} [hasRecurringFees] 
     * @param {Array.<String>} [companyCurrencyGuids] 
     * @param {Array.<String>} [projectMemberUserGuids] 
     * @param {Array.<Number>} [numbers] 
     * @param {Boolean} [internal] Optional: Get internal / non-internal projects.
     * @param {module:api/ProjectsReadApi~projectsGetProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectOutputModel>}
     */
    projectsGetProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'currencyGuid': opts['currencyGuid'],
        'changedSince': opts['changedSince'],
        'isBillable': opts['isBillable'],
        'customerGuids': this.apiClient.buildCollectionParam(opts['customerGuids'], 'multi'),
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi'),
        'projectKeywordGuids': this.apiClient.buildCollectionParam(opts['projectKeywordGuids'], 'multi'),
        'projectStatusTypeGuids': this.apiClient.buildCollectionParam(opts['projectStatusTypeGuids'], 'multi'),
        'salesPersonGuids': this.apiClient.buildCollectionParam(opts['salesPersonGuids'], 'multi'),
        'projectOwnerGuids': this.apiClient.buildCollectionParam(opts['projectOwnerGuids'], 'multi'),
        'businessUnitGuids': this.apiClient.buildCollectionParam(opts['businessUnitGuids'], 'multi'),
        'minimumBillableAmount': opts['minimumBillableAmount'],
        'customerOwnerGuids': this.apiClient.buildCollectionParam(opts['customerOwnerGuids'], 'multi'),
        'invoiceableDate': opts['invoiceableDate'],
        'marketSegmentationGuids': this.apiClient.buildCollectionParam(opts['marketSegmentationGuids'], 'multi'),
        'salesStatusTypeGuids': this.apiClient.buildCollectionParam(opts['salesStatusTypeGuids'], 'multi'),
        'isClosed': opts['isClosed'],
        'hasRecurringFees': opts['hasRecurringFees'],
        'companyCurrencyGuids': this.apiClient.buildCollectionParam(opts['companyCurrencyGuids'], 'multi'),
        'projectMemberUserGuids': this.apiClient.buildCollectionParam(opts['projectMemberUserGuids'], 'multi'),
        'numbers': this.apiClient.buildCollectionParam(opts['numbers'], 'multi'),
        'internal': opts['internal']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectOutputModel];
      return this.apiClient.callApi(
        '/v1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetSalesCases operation.
     * @callback module:api/ProjectsReadApi~projectsGetSalesCasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the sales cases (sales status is in progress)
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] 
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Array.<String>} [customerGuids] 
     * @param {Array.<String>} [currencyGuids] 
     * @param {Array.<String>} [projectGuids] 
     * @param {Array.<String>} [projectKeywordGuids] 
     * @param {Array.<String>} [projectStatusTypeGuids] 
     * @param {Array.<String>} [salesPersonGuids] 
     * @param {Array.<String>} [projectOwnerGuids] 
     * @param {Array.<String>} [businessUnitGuids] 
     * @param {Number} [minimumBillableAmount] 
     * @param {Array.<String>} [customerOwnerGuids] 
     * @param {Date} [invoiceableDate] 
     * @param {Array.<String>} [marketSegmentationGuids] 
     * @param {Array.<String>} [salesStatusTypeGuids] 
     * @param {Boolean} [isClosed] 
     * @param {Boolean} [hasRecurringFees] 
     * @param {Array.<String>} [companyCurrencyGuids] 
     * @param {Array.<String>} [projectMemberUserGuids] 
     * @param {Array.<Number>} [numbers] 
     * @param {module:api/ProjectsReadApi~projectsGetSalesCasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectOutputModel>}
     */
    projectsGetSalesCases(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'customerGuids': this.apiClient.buildCollectionParam(opts['customerGuids'], 'multi'),
        'currencyGuids': this.apiClient.buildCollectionParam(opts['currencyGuids'], 'multi'),
        'projectGuids': this.apiClient.buildCollectionParam(opts['projectGuids'], 'multi'),
        'projectKeywordGuids': this.apiClient.buildCollectionParam(opts['projectKeywordGuids'], 'multi'),
        'projectStatusTypeGuids': this.apiClient.buildCollectionParam(opts['projectStatusTypeGuids'], 'multi'),
        'salesPersonGuids': this.apiClient.buildCollectionParam(opts['salesPersonGuids'], 'multi'),
        'projectOwnerGuids': this.apiClient.buildCollectionParam(opts['projectOwnerGuids'], 'multi'),
        'businessUnitGuids': this.apiClient.buildCollectionParam(opts['businessUnitGuids'], 'multi'),
        'minimumBillableAmount': opts['minimumBillableAmount'],
        'customerOwnerGuids': this.apiClient.buildCollectionParam(opts['customerOwnerGuids'], 'multi'),
        'invoiceableDate': opts['invoiceableDate'],
        'marketSegmentationGuids': this.apiClient.buildCollectionParam(opts['marketSegmentationGuids'], 'multi'),
        'salesStatusTypeGuids': this.apiClient.buildCollectionParam(opts['salesStatusTypeGuids'], 'multi'),
        'isClosed': opts['isClosed'],
        'hasRecurringFees': opts['hasRecurringFees'],
        'companyCurrencyGuids': this.apiClient.buildCollectionParam(opts['companyCurrencyGuids'], 'multi'),
        'projectMemberUserGuids': this.apiClient.buildCollectionParam(opts['projectMemberUserGuids'], 'multi'),
        'numbers': this.apiClient.buildCollectionParam(opts['numbers'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectOutputModel];
      return this.apiClient.callApi(
        '/v1/salescases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalFeesGetProposalFee operation.
     * @callback module:api/ProjectsReadApi~proposalFeesGetProposalFeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalFeeRowOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the proposal fee rows by guid
     * @param {String} guid proposal fee row id to get
     * @param {module:api/ProjectsReadApi~proposalFeesGetProposalFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalFeeRowOutputModel}
     */
    proposalFeesGetProposalFee(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalFeesGetProposalFee");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProposalFeeRowOutputModel;
      return this.apiClient.callApi(
        '/v1/proposalfeerows/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalFeesGetProposalFees operation.
     * @callback module:api/ProjectsReadApi~proposalFeesGetProposalFeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalFeeRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the proposal fee rows.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get proposal fee rows that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~proposalFeesGetProposalFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalFeeRowOutputModel>}
     */
    proposalFeesGetProposalFees(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalFeeRowOutputModel];
      return this.apiClient.callApi(
        '/v1/proposalfeerows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalFeesGetProposalFeesForProposal operation.
     * @callback module:api/ProjectsReadApi~proposalFeesGetProposalFeesForProposalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalFeeRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the proposal fee rows for a proposal
     * @param {String} proposalGuid proposal id for which to get proposal fees rows.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {module:api/ProjectsReadApi~proposalFeesGetProposalFeesForProposalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalFeeRowOutputModel>}
     */
    proposalFeesGetProposalFeesForProposal(proposalGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'proposalGuid' is set
      if (proposalGuid === undefined || proposalGuid === null) {
        throw new Error("Missing the required parameter 'proposalGuid' when calling proposalFeesGetProposalFeesForProposal");
      }

      let pathParams = {
        'proposalGuid': proposalGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalFeeRowOutputModel];
      return this.apiClient.callApi(
        '/v1/proposals/{proposalGuid}/proposalfeerows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalSettingsGetProposalSettings operation.
     * @callback module:api/ProjectsReadApi~proposalSettingsGetProposalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalSettingsOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get settings for a proposal
     * @param {String} guid GUID used to get the Proposal.
     * @param {module:api/ProjectsReadApi~proposalSettingsGetProposalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalSettingsOutputModel}
     */
    proposalSettingsGetProposalSettings(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalSettingsGetProposalSettings");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProposalSettingsOutputModel;
      return this.apiClient.callApi(
        '/v1/proposals/{guid}/proposalsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalSubtotalsGetProposalSubtotal operation.
     * @callback module:api/ProjectsReadApi~proposalSubtotalsGetProposalSubtotalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalSubtotalOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Proposal subtotal by ID
     * @param {String} guid GUID used to get the Proposal subtotal.
     * @param {module:api/ProjectsReadApi~proposalSubtotalsGetProposalSubtotalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalSubtotalOutputModel}
     */
    proposalSubtotalsGetProposalSubtotal(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalSubtotalsGetProposalSubtotal");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProposalSubtotalOutputModel;
      return this.apiClient.callApi(
        '/v1/proposalsubtotals/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalSubtotalsGetProposalSubtotals operation.
     * @callback module:api/ProjectsReadApi~proposalSubtotalsGetProposalSubtotalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalSubtotalOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the proposal subtotals.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: Page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get proposal subtotals that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~proposalSubtotalsGetProposalSubtotalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalSubtotalOutputModel>}
     */
    proposalSubtotalsGetProposalSubtotals(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalSubtotalOutputModel];
      return this.apiClient.callApi(
        '/v1/proposalsubtotals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalSubtotalsGetProposalSubtotalsForProposal operation.
     * @callback module:api/ProjectsReadApi~proposalSubtotalsGetProposalSubtotalsForProposalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalSubtotalOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the proposal subtotals for a proposal
     * @param {String} proposalGuid proposal id for which to get proposal subtotals.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: Page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {module:api/ProjectsReadApi~proposalSubtotalsGetProposalSubtotalsForProposalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalSubtotalOutputModel>}
     */
    proposalSubtotalsGetProposalSubtotalsForProposal(proposalGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'proposalGuid' is set
      if (proposalGuid === undefined || proposalGuid === null) {
        throw new Error("Missing the required parameter 'proposalGuid' when calling proposalSubtotalsGetProposalSubtotalsForProposal");
      }

      let pathParams = {
        'proposalGuid': proposalGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalSubtotalOutputModel];
      return this.apiClient.callApi(
        '/v1/proposals/{proposalGuid}/proposalsubtotals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalWorkhoursGetProposalWorkHours operation.
     * @callback module:api/ProjectsReadApi~proposalWorkhoursGetProposalWorkHoursCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalWorkhourRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the proposal work rows.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get proposal work rows that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~proposalWorkhoursGetProposalWorkHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalWorkhourRowOutputModel>}
     */
    proposalWorkhoursGetProposalWorkHours(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalWorkhourRowOutputModel];
      return this.apiClient.callApi(
        '/v1/proposalworkrows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalWorkhoursGetProposalWorkHoursForProposal operation.
     * @callback module:api/ProjectsReadApi~proposalWorkhoursGetProposalWorkHoursForProposalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalWorkhourRowOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the proposal work rows.
     * @param {String} proposalGuid proposal id for which to get proposal work rows.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {module:api/ProjectsReadApi~proposalWorkhoursGetProposalWorkHoursForProposalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalWorkhourRowOutputModel>}
     */
    proposalWorkhoursGetProposalWorkHoursForProposal(proposalGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'proposalGuid' is set
      if (proposalGuid === undefined || proposalGuid === null) {
        throw new Error("Missing the required parameter 'proposalGuid' when calling proposalWorkhoursGetProposalWorkHoursForProposal");
      }

      let pathParams = {
        'proposalGuid': proposalGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalWorkhourRowOutputModel];
      return this.apiClient.callApi(
        '/v1/proposals/{proposalGuid}/proposalworkrows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalWorkhoursGetProposalWorkhour operation.
     * @callback module:api/ProjectsReadApi~proposalWorkhoursGetProposalWorkhourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalWorkhourRowOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the proposal work row by guid.
     * @param {String} guid proposal work row id to get.
     * @param {module:api/ProjectsReadApi~proposalWorkhoursGetProposalWorkhourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalWorkhourRowOutputModel}
     */
    proposalWorkhoursGetProposalWorkhour(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalWorkhoursGetProposalWorkhour");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProposalWorkhourRowOutputModel;
      return this.apiClient.callApi(
        '/v1/proposalworkrows/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalsGetProposal operation.
     * @callback module:api/ProjectsReadApi~proposalsGetProposalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProposalOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Proposal by ID
     * @param {String} guid GUID used to get the Proposal.
     * @param {module:api/ProjectsReadApi~proposalsGetProposalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProposalOutputModel}
     */
    proposalsGetProposal(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling proposalsGetProposal");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProposalOutputModel;
      return this.apiClient.callApi(
        '/v1/proposals/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalsGetProposals operation.
     * @callback module:api/ProjectsReadApi~proposalsGetProposalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the proposals
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get proposals that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~proposalsGetProposalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalOutputModel>}
     */
    proposalsGetProposals(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalOutputModel];
      return this.apiClient.callApi(
        '/v1/proposals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proposalsGetProposalsForProject operation.
     * @callback module:api/ProjectsReadApi~proposalsGetProposalsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProposalOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the proposals for a project
     * @param {String} projectGuid Project id for which to get proposals.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {Date} [changedSince] Optional: Get proposals that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~proposalsGetProposalsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProposalOutputModel>}
     */
    proposalsGetProposalsForProject(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling proposalsGetProposalsForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProposalOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/proposals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesGetAllCustomerSalesNotes operation.
     * @callback module:api/ProjectsReadApi~salesNotesGetAllCustomerSalesNotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SalesNoteOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sales notes by customer guid.
     * @param {String} customerGuid Customer guid used to get the notes.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get sales notes that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~salesNotesGetAllCustomerSalesNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SalesNoteOutputModel>}
     */
    salesNotesGetAllCustomerSalesNotes(customerGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerGuid' is set
      if (customerGuid === undefined || customerGuid === null) {
        throw new Error("Missing the required parameter 'customerGuid' when calling salesNotesGetAllCustomerSalesNotes");
      }

      let pathParams = {
        'customerGuid': customerGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SalesNoteOutputModel];
      return this.apiClient.callApi(
        '/v1/customers/{customerGuid}/salesnotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesGetProjectSalesNote operation.
     * @callback module:api/ProjectsReadApi~salesNotesGetProjectSalesNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSalesNoteOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project sales note by ID.
     * @param {String} guid GUID used to get the project sales note.
     * @param {module:api/ProjectsReadApi~salesNotesGetProjectSalesNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectSalesNoteOutputModel}
     */
    salesNotesGetProjectSalesNote(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesNotesGetProjectSalesNote");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectSalesNoteOutputModel;
      return this.apiClient.callApi(
        '/v1/projectsalesnotes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesGetProjectSalesNotes operation.
     * @callback module:api/ProjectsReadApi~salesNotesGetProjectSalesNotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectSalesNoteOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sales notes of a case.
     * @param {String} projectGuid Project guid used to get the notes.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {Date} [changedSince] Optional: Get sales notes that have been added or changed after this date time (greater or equal).
     * @param {module:api/ProjectsReadApi~salesNotesGetProjectSalesNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectSalesNoteOutputModel>}
     */
    salesNotesGetProjectSalesNotes(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling salesNotesGetProjectSalesNotes");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'changedSince': opts['changedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectSalesNoteOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/projectsalesnotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesStatusHistoryGetSalesStatusHistory operation.
     * @callback module:api/ProjectsReadApi~salesStatusHistoryGetSalesStatusHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SalesStatusHistoryOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the sales status history for a project
     * @param {String} projectGuid The project for which the sales status history is fetched.
     * @param {module:api/ProjectsReadApi~salesStatusHistoryGetSalesStatusHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SalesStatusHistoryOutputModel>}
     */
    salesStatusHistoryGetSalesStatusHistory(projectGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling salesStatusHistoryGetSalesStatusHistory");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SalesStatusHistoryOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/salesstatushistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamProductivityGetTeamProductivity operation.
     * @callback module:api/ProjectsReadApi~teamProductivityGetTeamProductivityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamProductivityOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team productivity of a project.
     * @param {String} projectGuid GUID of the project.
     * @param {module:api/ProjectsReadApi~teamProductivityGetTeamProductivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamProductivityOutputModel>}
     */
    teamProductivityGetTeamProductivity(projectGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling teamProductivityGetTeamProductivity");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamProductivityOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/teamproductivity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelExpenseTypesGetSearchedTravelExpenseTypes operation.
     * @callback module:api/ProjectsReadApi~travelExpenseTypesGetSearchedTravelExpenseTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelExpenseTypeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search active travel expense types of project by part of the name or code.
     * @param {String} projectGuid Id of the project.
     * @param {Object} opts Optional parameters
     * @param {String} [textToSearch = '')] Searched string: part of name or code.
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default all.
     * @param {String} [userGuid] Optional: Id of the user to fetch travels for.
     * @param {module:model/ExpensesClass} [expenseClass] Optional: Expense class of the travel. Mileage/DailyAllowance/OtherTravelExpense.
     * @param {module:api/ProjectsReadApi~travelExpenseTypesGetSearchedTravelExpenseTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelExpenseTypeOutputModel>}
     */
    travelExpenseTypesGetSearchedTravelExpenseTypes(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling travelExpenseTypesGetSearchedTravelExpenseTypes");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'textToSearch': opts['textToSearch'],
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'userGuid': opts['userGuid'],
        'expenseClass': opts['expenseClass']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TravelExpenseTypeOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/travelexpensetypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the travelPricesGetTravelPricesForProject operation.
     * @callback module:api/ProjectsReadApi~travelPricesGetTravelPricesForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TravelPriceOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the travel prices for a project.
     * @param {String} projectGuid ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [fromPricelistOnly = false)] If true return only prices from the price list, if false also returns prices from the settings. Default is false.
     * @param {Array.<module:model/ExpensesClass>} [expenseClasses] Optional: List of expense classes to search by, defaults to all travel categories.
     * @param {Number} [firstRow = 0)] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Optional: Text to search from Product name.
     * @param {Boolean} [calculateRowCount = false)] Optional: Calculate the number of total rows. Default false = total row count is returned as zero.
     * @param {module:api/ProjectsReadApi~travelPricesGetTravelPricesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TravelPriceOutputModel>}
     */
    travelPricesGetTravelPricesForProject(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling travelPricesGetTravelPricesForProject");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'fromPricelistOnly': opts['fromPricelistOnly'],
        'expenseClasses': this.apiClient.buildCollectionParam(opts['expenseClasses'], 'multi'),
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch'],
        'calculateRowCount': opts['calculateRowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TravelPriceOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/travelprices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workTypesGetPhaseWorkTypes operation.
     * @callback module:api/ProjectsReadApi~workTypesGetPhaseWorkTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkTypeOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all work types that are available for a phase (for work hour entry)
     * Only the active work types are included in the list, whether they come from organization settings or project specific work types.
     * @param {String} phaseGuid Id of the phase.
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Optional: page token to fetch the next page.
     * @param {Number} [rowCount] Optional: number of rows to fetch
     * @param {String} [userGuid] Id of the user for whom the work types are retrieved. Default is current user.
     * @param {module:api/ProjectsReadApi~workTypesGetPhaseWorkTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkTypeOutputModel>}
     */
    workTypesGetPhaseWorkTypes(phaseGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phaseGuid' is set
      if (phaseGuid === undefined || phaseGuid === null) {
        throw new Error("Missing the required parameter 'phaseGuid' when calling workTypesGetPhaseWorkTypes");
      }

      let pathParams = {
        'phaseGuid': phaseGuid
      };
      let queryParams = {
        'pageToken': opts['pageToken'],
        'rowCount': opts['rowCount'],
        'userGuid': opts['userGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkTypeOutputModel];
      return this.apiClient.callApi(
        '/v1/phases/{phaseGuid}/worktypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workTypesGetSearchedWorktypes operation.
     * @callback module:api/ProjectsReadApi~workTypesGetSearchedWorktypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorktypeForProjectOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search active work types by part of the name or code.
     * @param {String} projectGuid Id of the case to which proposal is connected.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch, Default 20, maximum 100.
     * @param {String} [textToSearch = '')] Searched string: part of name or code.
     * @param {module:api/ProjectsReadApi~workTypesGetSearchedWorktypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorktypeForProjectOutputModel>}
     */
    workTypesGetSearchedWorktypes(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling workTypesGetSearchedWorktypes");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'textToSearch': opts['textToSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorktypeForProjectOutputModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/worktypesforproject', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
