/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import PatchOperation from '../model/PatchOperation';
import ResourceAllocationInputModel from '../model/ResourceAllocationInputModel';
import ResourceAllocationOutputModel from '../model/ResourceAllocationOutputModel';
import RoleAllocationInputModel from '../model/RoleAllocationInputModel';
import RoleAllocationOutputModel from '../model/RoleAllocationOutputModel';

/**
* ResourceallocationsWrite service.
* @module api/ResourceallocationsWriteApi
* @version 1.0
*/
export default class ResourceallocationsWriteApi {

    /**
    * Constructs a new ResourceallocationsWriteApi. 
    * @alias module:api/ResourceallocationsWriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the resourceAllocationsPatchResourceAllocation operation.
     * @callback module:api/ResourceallocationsWriteApi~resourceAllocationsPatchResourceAllocationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourceAllocationOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a resource allocation or a part of it
     * @param {String} guid ID of the resource allocation
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of ResourceAllocationModel
     * @param {module:api/ResourceallocationsWriteApi~resourceAllocationsPatchResourceAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourceAllocationOutputModel>}
     */
    resourceAllocationsPatchResourceAllocation(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling resourceAllocationsPatchResourceAllocation");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ResourceAllocationOutputModel];
      return this.apiClient.callApi(
        '/v1/resourceallocations/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourceAllocationsPostResourceAllocation operation.
     * @callback module:api/ResourceallocationsWriteApi~resourceAllocationsPostResourceAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAllocationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a resource allocation
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceAllocationInputModel} [resourceAllocationInputModel] ResourceAllocationInputModel
     * @param {module:api/ResourceallocationsWriteApi~resourceAllocationsPostResourceAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAllocationOutputModel}
     */
    resourceAllocationsPostResourceAllocation(opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceAllocationInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceAllocationOutputModel;
      return this.apiClient.callApi(
        '/v1/resourceallocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAllocationsPatchRoleAllocation operation.
     * @callback module:api/ResourceallocationsWriteApi~roleAllocationsPatchRoleAllocationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleAllocationOutputModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update (Patch) a role allocation.
     * @param {String} guid ID of the role allocation.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchOperation>} [patchOperation] JSON Patch document of RoleAllocationModel.
     * @param {module:api/ResourceallocationsWriteApi~roleAllocationsPatchRoleAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleAllocationOutputModel>}
     */
    roleAllocationsPatchRoleAllocation(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchOperation'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling roleAllocationsPatchRoleAllocation");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RoleAllocationOutputModel];
      return this.apiClient.callApi(
        '/v1/roleallocations/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAllocationsPostRoleAllocation operation.
     * @callback module:api/ResourceallocationsWriteApi~roleAllocationsPostRoleAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAllocationOutputModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a role allocation.
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleAllocationInputModel} [roleAllocationInputModel] Role allocation to insert.
     * @param {module:api/ResourceallocationsWriteApi~roleAllocationsPostRoleAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAllocationOutputModel}
     */
    roleAllocationsPostRoleAllocation(opts, callback) {
      opts = opts || {};
      let postBody = opts['roleAllocationInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleAllocationOutputModel;
      return this.apiClient.callApi(
        '/v1/roleallocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
