/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';
import FileKeywordModel from '../model/FileKeywordModel';
import FileModel from '../model/FileModel';
import InvoiceFileModel from '../model/InvoiceFileModel';
import InvoicePdfGetOptions from '../model/InvoicePdfGetOptions';
import InvoiceType from '../model/InvoiceType';
import KeyValuePairOfStringAndSortDirection from '../model/KeyValuePairOfStringAndSortDirection';
import ProjectFileModel from '../model/ProjectFileModel';
import ProjectTravelExpenseFileModel from '../model/ProjectTravelExpenseFileModel';

/**
* FilesRead service.
* @module api/FilesReadApi
* @version 1.0
*/
export default class FilesReadApi {

    /**
    * Constructs a new FilesReadApi. 
    * @alias module:api/FilesReadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fileDataGetDataForFile operation.
     * @callback module:api/FilesReadApi~fileDataGetDataForFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file data by ID.
     * Returns binary data, which contains content with type given in Content-Type header.
     * @param {String} guid GUID used to get the file.
     * @param {module:api/FilesReadApi~fileDataGetDataForFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    fileDataGetDataForFile(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fileDataGetDataForFile");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/files/{guid}/filedata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetFile operation.
     * @callback module:api/FilesReadApi~filesGetFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file by ID.
     * @param {String} guid GUID used to get the file.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeDataInResponse = false)] Is data included in response as base64 string.
     * @param {module:api/FilesReadApi~filesGetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileModel}
     */
    filesGetFile(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling filesGetFile");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'includeDataInResponse': opts['includeDataInResponse']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileModel;
      return this.apiClient.callApi(
        '/v1/files/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetInvoiceFile operation.
     * @callback module:api/FilesReadApi~filesGetInvoiceFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceFileModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice file by ID.
     * @param {String} guid GUID used to get the invoice file.
     * @param {module:api/FilesReadApi~filesGetInvoiceFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceFileModel}
     */
    filesGetInvoiceFile(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling filesGetInvoiceFile");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceFileModel;
      return this.apiClient.callApi(
        '/v1/invoicefiles/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetInvoiceFiles operation.
     * @callback module:api/FilesReadApi~filesGetInvoiceFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceFileModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all files of a invoice by its id.
     * @param {String} invoiceGuid GUID of the invoice used to get the files.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {module:api/FilesReadApi~filesGetInvoiceFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvoiceFileModel>}
     */
    filesGetInvoiceFiles(invoiceGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceGuid' is set
      if (invoiceGuid === undefined || invoiceGuid === null) {
        throw new Error("Missing the required parameter 'invoiceGuid' when calling filesGetInvoiceFiles");
      }

      let pathParams = {
        'invoiceGuid': invoiceGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvoiceFileModel];
      return this.apiClient.callApi(
        '/v1/invoices/{invoiceGuid}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetProjectFile operation.
     * @callback module:api/FilesReadApi~filesGetProjectFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFileModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project file by ID.
     * @param {String} guid GUID used to get the project file.
     * @param {module:api/FilesReadApi~filesGetProjectFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFileModel}
     */
    filesGetProjectFile(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling filesGetProjectFile");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectFileModel;
      return this.apiClient.callApi(
        '/v1/projectfiles/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetProjectFiles operation.
     * @callback module:api/FilesReadApi~filesGetProjectFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFileModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all files of a project by its id.
     * @param {String} projectGuid GUID of the project used to get the files.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\".
     * @param {module:api/FilesReadApi~filesGetProjectFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFileModel>}
     */
    filesGetProjectFiles(projectGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGuid' is set
      if (projectGuid === undefined || projectGuid === null) {
        throw new Error("Missing the required parameter 'projectGuid' when calling filesGetProjectFiles");
      }

      let pathParams = {
        'projectGuid': projectGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectFileModel];
      return this.apiClient.callApi(
        '/v1/projects/{projectGuid}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetTravelExpenseFile operation.
     * @callback module:api/FilesReadApi~filesGetTravelExpenseFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectTravelExpenseFileModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get travel expense file by ID.
     * @param {String} guid GUID used to get the travel expense file.
     * @param {module:api/FilesReadApi~filesGetTravelExpenseFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectTravelExpenseFileModel}
     */
    filesGetTravelExpenseFile(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling filesGetTravelExpenseFile");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectTravelExpenseFileModel;
      return this.apiClient.callApi(
        '/v1/projecttravelexpensefiles/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetTravelExpenseFiles operation.
     * @callback module:api/FilesReadApi~filesGetTravelExpenseFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseFileModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all files of a travel expense by its id.
     * @param {String} projectTravelExpenseGuid GUID of the travel expense used to get the files.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {module:api/FilesReadApi~filesGetTravelExpenseFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseFileModel>}
     */
    filesGetTravelExpenseFiles(projectTravelExpenseGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectTravelExpenseGuid' is set
      if (projectTravelExpenseGuid === undefined || projectTravelExpenseGuid === null) {
        throw new Error("Missing the required parameter 'projectTravelExpenseGuid' when calling filesGetTravelExpenseFiles");
      }

      let pathParams = {
        'projectTravelExpenseGuid': projectTravelExpenseGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseFileModel];
      return this.apiClient.callApi(
        '/v1/projecttravelexpenses/{projectTravelExpenseGuid}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetUsersTravelExpensesFiles operation.
     * @callback module:api/FilesReadApi~filesGetUsersTravelExpensesFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectTravelExpenseFileModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all files of all travel expenses of the user.
     * @param {String} userGuid GUID of the user used to get the files attached to travel expenses.
     * @param {Object} opts Optional parameters
     * @param {Number} [firstRow] Optional: first row to fetch. Default 0 = first row.
     * @param {Number} [rowCount] Optional: How many rows to fetch.
     * @param {Date} [startDate] Optional: Start date to from which to check travel expenses.
     * @param {Date} [endDate] Optional: End date to check for availability until travel expenses.
     * @param {module:api/FilesReadApi~filesGetUsersTravelExpensesFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectTravelExpenseFileModel>}
     */
    filesGetUsersTravelExpensesFiles(userGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling filesGetUsersTravelExpensesFiles");
      }

      let pathParams = {
        'userGuid': userGuid
      };
      let queryParams = {
        'firstRow': opts['firstRow'],
        'rowCount': opts['rowCount'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectTravelExpenseFileModel];
      return this.apiClient.callApi(
        '/v1/users/{userGuid}/travelexpensesfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsGetFileKeywords operation.
     * @callback module:api/FilesReadApi~keywordsGetFileKeywordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileKeywordModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the keywords for file.
     * @param {String} fileGuid ID of the file for which keywords are requested.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.
     * @param {Array.<module:model/KeyValuePairOfStringAndSortDirection>} [sortings] Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Keyword&sortings[0].value=Desc\".
     * @param {module:api/FilesReadApi~keywordsGetFileKeywordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileKeywordModel>}
     */
    keywordsGetFileKeywords(fileGuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileGuid' is set
      if (fileGuid === undefined || fileGuid === null) {
        throw new Error("Missing the required parameter 'fileGuid' when calling keywordsGetFileKeywords");
      }

      let pathParams = {
        'fileGuid': fileGuid
      };
      let queryParams = {
        'active': opts['active'],
        'sortings': this.apiClient.buildCollectionParam(opts['sortings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileKeywordModel];
      return this.apiClient.callApi(
        '/v1/files/{fileGuid}/keywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pdfGetInvoicePdf operation.
     * @callback module:api/FilesReadApi~pdfGetInvoicePdfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an invoice PDF.
     * @param {String} guid The invoice GUID.
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceType} [invoiceType] Optional: type of invoice.
     * @param {module:model/InvoicePdfGetOptions} [pdfGetOptions] Optional: what to include in the PDF. Defaults to InvoicePdfGetOptions.All.
     * @param {module:api/FilesReadApi~pdfGetInvoicePdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    pdfGetInvoicePdf(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pdfGetInvoicePdf");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'invoiceType': opts['invoiceType'],
        'pdfGetOptions': opts['pdfGetOptions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/invoices/{guid}/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pdfGetTravelReimbursementPdf operation.
     * @callback module:api/FilesReadApi~pdfGetTravelReimbursementPdfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a travel reimbursement PDF.
     * @param {String} guid The travel reimbursement GUID.
     * @param {module:api/FilesReadApi~pdfGetTravelReimbursementPdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    pdfGetTravelReimbursementPdf(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pdfGetTravelReimbursementPdf");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/travelreimbursements/{guid}/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
