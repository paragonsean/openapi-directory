/**
 * Severa Public Rest API Documentation
 * The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.    You need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.    After authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.    The access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.    
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExceptionModel from '../model/ExceptionModel';

/**
* CustomersDelete service.
* @module api/CustomersDeleteApi
* @version 1.0
*/
export default class CustomersDeleteApi {

    /**
    * Constructs a new CustomersDeleteApi. 
    * @alias module:api/CustomersDeleteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addressesDeleteAddress operation.
     * @callback module:api/CustomersDeleteApi~addressesDeleteAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an address.
     * Returns: No Content (204) if succeeded. Not found (404) if address can't be found.
     * @param {String} guid ID for the address to delete.
     * @param {module:api/CustomersDeleteApi~addressesDeleteAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addressesDeleteAddress(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling addressesDeleteAddress");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/addresses/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactCommunicationsDeleteContactCommunication operation.
     * @callback module:api/CustomersDeleteApi~contactCommunicationsDeleteContactCommunicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes contact's communication.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the contact's communication.
     * @param {module:api/CustomersDeleteApi~contactCommunicationsDeleteContactCommunicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contactCommunicationsDeleteContactCommunication(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactCommunicationsDeleteContactCommunication");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contactcommunications/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contactsDeleteContact operation.
     * @callback module:api/CustomersDeleteApi~contactsDeleteContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a contact.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the contact.
     * @param {module:api/CustomersDeleteApi~contactsDeleteContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contactsDeleteContact(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling contactsDeleteContact");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contactpersons/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCountrySettingsDeleteCustomerCountrySetting operation.
     * @callback module:api/CustomersDeleteApi~customerCountrySettingsDeleteCustomerCountrySettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer country setting.
     * Returns: No Content (204) if succeeded. Not found (404) if customer country setting can't be found.
     * @param {String} guid GUID used to delete the customer country setting.
     * @param {module:api/CustomersDeleteApi~customerCountrySettingsDeleteCustomerCountrySettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerCountrySettingsDeleteCustomerCountrySetting(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCountrySettingsDeleteCustomerCountrySetting");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customercountrysettings/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCustomValuesDeleteCustomerCustomValue operation.
     * @callback module:api/CustomersDeleteApi~customerCustomValuesDeleteCustomerCustomValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer custom value.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the customer custom value.
     * @param {module:api/CustomersDeleteApi~customerCustomValuesDeleteCustomerCustomValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerCustomValuesDeleteCustomerCustomValue(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerCustomValuesDeleteCustomerCustomValue");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customers/customvalues/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerMarketSegmentsDeleteCustomerMarketSegment operation.
     * @callback module:api/CustomersDeleteApi~customerMarketSegmentsDeleteCustomerMarketSegmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer market segment.
     * Returns: No Content (204) if succeeded. Not found (404) if customer market segment can't be found.
     * @param {String} guid ID for the customer market segment to delete.
     * @param {module:api/CustomersDeleteApi~customerMarketSegmentsDeleteCustomerMarketSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customerMarketSegmentsDeleteCustomerMarketSegment(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customerMarketSegmentsDeleteCustomerMarketSegment");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customermarketsegments/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersDeleteCustomer operation.
     * @callback module:api/CustomersDeleteApi~customersDeleteCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer.
     * Returns: No Content (204) if succeeded.
     * @param {String} guid GUID used to delete the customer.
     * @param {module:api/CustomersDeleteApi~customersDeleteCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customersDeleteCustomer(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling customersDeleteCustomer");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customers/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keywordsDeleteContactKeyword operation.
     * @callback module:api/CustomersDeleteApi~keywordsDeleteContactKeywordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a keyword from the contact
     * Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found.
     * @param {String} contactGuid 
     * @param {String} guid 
     * @param {module:api/CustomersDeleteApi~keywordsDeleteContactKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    keywordsDeleteContactKeyword(contactGuid, guid, callback) {
      let postBody = null;
      // verify the required parameter 'contactGuid' is set
      if (contactGuid === undefined || contactGuid === null) {
        throw new Error("Missing the required parameter 'contactGuid' when calling keywordsDeleteContactKeyword");
      }
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling keywordsDeleteContactKeyword");
      }

      let pathParams = {
        'contactGuid': contactGuid,
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contacts/{contactGuid}/keywords/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesNotesDeleteCustomerSalesNote operation.
     * @callback module:api/CustomersDeleteApi~salesNotesDeleteCustomerSalesNoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a customer sales note.
     * Returns: No Content (204) if succeeded. OK (200) if note has child notes and can't be deleted. It is marked as IsDeleted = true. Not found (404) if note can't be found.
     * @param {String} guid GUID used to delete the customer sales note.
     * @param {module:api/CustomersDeleteApi~salesNotesDeleteCustomerSalesNoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesNotesDeleteCustomerSalesNote(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling salesNotesDeleteCustomerSalesNote");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ClientIdAuth', 'OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customersalesnotes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
